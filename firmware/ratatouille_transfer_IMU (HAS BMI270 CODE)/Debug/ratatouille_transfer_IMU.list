
ratatouille_transfer_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019aa4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003590  08019be8  08019be8  0001abe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d178  0801d178  0001e178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d180  0801d180  0001e180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801d184  0801d184  0001e184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000308  20000008  0801d188  0001f008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002030  20000310  0801d490  0001f310  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002340  0801d490  0001f340  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001f310  2**0
                  CONTENTS, READONLY
 10 .debug_info   000387ab  00000000  00000000  0001f340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005efd  00000000  00000000  00057aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003388  00000000  00000000  0005d9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000281d  00000000  00000000  00060d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002bdd4  00000000  00000000  0006358d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00035d86  00000000  00000000  0008f361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010bcee  00000000  00000000  000c50e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d0dd5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000f31c  00000000  00000000  001d0e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000080  00000000  00000000  001e0134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000310 	.word	0x20000310
 800015c:	00000000 	.word	0x00000000
 8000160:	08019bcc 	.word	0x08019bcc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000314 	.word	0x20000314
 800017c:	08019bcc 	.word	0x08019bcc

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <bmi2_sec_init>:
 * @brief This API is the entry point for bmi2 sensor. It selects between
 * I2C/SPI interface, based on user selection. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi2_sec_init(struct bmi2_dev *dev)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73bb      	strb	r3, [r7, #14]

    /* Structure to define the default values for axes re-mapping */
    struct bmi2_axes_remap axes_remap = {
 8000ef4:	4a2b      	ldr	r2, [pc, #172]	@ (8000fa4 <bmi2_sec_init+0xbc>)
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000efe:	6018      	str	r0, [r3, #0]
 8000f00:	3304      	adds	r3, #4
 8000f02:	8019      	strh	r1, [r3, #0]
        .x_axis = BMI2_MAP_X_AXIS, .x_axis_sign = BMI2_POS_SIGN, .y_axis = BMI2_MAP_Y_AXIS,
        .y_axis_sign = BMI2_POS_SIGN, .z_axis = BMI2_MAP_Z_AXIS, .z_axis_sign = BMI2_POS_SIGN
    };

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f001 ff68 	bl	8002dda <null_ptr_check>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI2_OK)
 8000f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d140      	bne.n	8000f98 <bmi2_sec_init+0xb0>
    {
        /* Set APS flag as after reset, the sensor is on advance power save mode */
        dev->aps_status = BMI2_ENABLE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

        /* Performing a dummy read to bring interface back to SPI from I2C interface */
        if (dev->intf == BMI2_SPI_INTF)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	7a5b      	ldrb	r3, [r3, #9]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d108      	bne.n	8000f38 <bmi2_sec_init+0x50>
        {
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f26:	f107 010e 	add.w	r1, r7, #14
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f83a 	bl	8000fa8 <bmi2_get_regs>
 8000f34:	4603      	mov	r3, r0
 8000f36:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI2_OK)
 8000f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d12b      	bne.n	8000f98 <bmi2_sec_init+0xb0>
        {
            /* Read chip-id of the BMI2 sensor */
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f40:	f107 010e 	add.w	r1, r7, #14
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2201      	movs	r2, #1
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f000 f82d 	bl	8000fa8 <bmi2_get_regs>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI2_OK)
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d11e      	bne.n	8000f98 <bmi2_sec_init+0xb0>
            {
                /* Validate chip-id */
                if (chip_id == dev->chip_id)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d114      	bne.n	8000f8e <bmi2_sec_init+0xa6>
                {
                    /* Assign resolution to the structure */
                    dev->resolution = 16;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2210      	movs	r2, #16
 8000f68:	731a      	strb	r2, [r3, #12]

                    /* Set manual enable flag */
                    dev->aux_man_en = 1;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	76da      	strb	r2, [r3, #27]

                    /* Set the default values for axis
                     *  re-mapping in the device structure
                     */
                    dev->remap = axes_remap;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3328      	adds	r3, #40	@ 0x28
 8000f74:	f107 0208 	add.w	r2, r7, #8
 8000f78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f7c:	6018      	str	r0, [r3, #0]
 8000f7e:	3304      	adds	r3, #4
 8000f80:	8019      	strh	r1, [r3, #0]

                    /* Perform soft-reset to bring all register values to their
                     * default values
                     */
                    rslt = bmi2_soft_reset(dev);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f906 	bl	8001194 <bmi2_soft_reset>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	e004      	b.n	8000f98 <bmi2_sec_init+0xb0>
                else
                {
                    /* Storing the chip-id value read from
                     * the register to identify the sensor
                     */
                    dev->chip_id = chip_id;
 8000f8e:	7bba      	ldrb	r2, [r7, #14]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	701a      	strb	r2, [r3, #0]
                    rslt = BMI2_E_DEV_NOT_FOUND;
 8000f94:	23fd      	movs	r3, #253	@ 0xfd
 8000f96:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8000f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	08019be8 	.word	0x08019be8

08000fa8 <bmi2_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x26, 0x5E.
 */
int8_t bmi2_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi2_dev *dev)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b0a7      	sub	sp, #156	@ 0x9c
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	81bb      	strh	r3, [r7, #12]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define loop */
    uint16_t index = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI2_MAX_LEN];

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f001 ff0a 	bl	8002dda <null_ptr_check>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if ((rslt == BMI2_OK) && (data != NULL))
 8000fcc:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d153      	bne.n	800107c <bmi2_get_regs+0xd4>
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d050      	beq.n	800107c <bmi2_get_regs+0xd4>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI2_SPI_INTF)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7a5b      	ldrb	r3, [r3, #9]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d103      	bne.n	8000fea <bmi2_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI2_SPI_RD_MASK);
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fe8:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, (len + dev->dummy_byte), dev->intf_ptr);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8000fee:	89bb      	ldrh	r3, [r7, #12]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	7ad2      	ldrb	r2, [r2, #11]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f107 0114 	add.w	r1, r7, #20
 8001000:	7bf8      	ldrb	r0, [r7, #15]
 8001002:	47a0      	blx	r4
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	729a      	strb	r2, [r3, #10]

        if (dev->aps_status == BMI2_ENABLE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001012:	2b01      	cmp	r3, #1
 8001014:	d108      	bne.n	8001028 <bmi2_get_regs+0x80>
        {
            dev->delay_us(450, dev->intf_ptr);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	6852      	ldr	r2, [r2, #4]
 800101e:	4611      	mov	r1, r2
 8001020:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001024:	4798      	blx	r3
 8001026:	e006      	b.n	8001036 <bmi2_get_regs+0x8e>
        }
        else
        {
            dev->delay_us(2, dev->intf_ptr);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6852      	ldr	r2, [r2, #4]
 8001030:	4611      	mov	r1, r2
 8001032:	2002      	movs	r0, #2
 8001034:	4798      	blx	r3
        }

        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d119      	bne.n	8001074 <bmi2_get_regs+0xcc>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 8001040:	e012      	b.n	8001068 <bmi2_get_regs+0xc0>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 8001042:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	7ad2      	ldrb	r2, [r2, #11]
 800104a:	441a      	add	r2, r3
 800104c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	440b      	add	r3, r1
 8001054:	3298      	adds	r2, #152	@ 0x98
 8001056:	443a      	add	r2, r7
 8001058:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 800105c:	701a      	strb	r2, [r3, #0]
                index++;
 800105e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001062:	3301      	adds	r3, #1
 8001064:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            while (index < len)
 8001068:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 800106c:	89bb      	ldrh	r3, [r7, #12]
 800106e:	429a      	cmp	r2, r3
 8001070:	d3e7      	bcc.n	8001042 <bmi2_get_regs+0x9a>
        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 8001072:	e006      	b.n	8001082 <bmi2_get_regs+0xda>
            }
        }
        else
        {
            rslt = BMI2_E_COM_FAIL;
 8001074:	23fe      	movs	r3, #254	@ 0xfe
 8001076:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (dev->intf_rslt == BMI2_INTF_RET_SUCCESS)
 800107a:	e002      	b.n	8001082 <bmi2_get_regs+0xda>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800107c:	23ff      	movs	r3, #255	@ 0xff
 800107e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    }

    return rslt;
 8001082:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8001086:	4618      	mov	r0, r3
 8001088:	379c      	adds	r7, #156	@ 0x9c
 800108a:	46bd      	mov	sp, r7
 800108c:	bd90      	pop	{r4, r7, pc}

0800108e <bmi2_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi2 sensor.
 */
int8_t bmi2_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi2_dev *dev)
{
 800108e:	b590      	push	{r4, r7, lr}
 8001090:	b087      	sub	sp, #28
 8001092:	af00      	add	r7, sp, #0
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	4603      	mov	r3, r0
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	4613      	mov	r3, r2
 800109e:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    uint16_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f001 fe9a 	bl	8002dda <null_ptr_check>
 80010a6:	4603      	mov	r3, r0
 80010a8:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (data != NULL))
 80010aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d168      	bne.n	8001184 <bmi2_set_regs+0xf6>
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d065      	beq.n	8001184 <bmi2_set_regs+0xf6>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI2_SPI_INTF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7a5b      	ldrb	r3, [r3, #9]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d103      	bne.n	80010c8 <bmi2_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI2_SPI_WR_MASK);
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010c6:	73fb      	strb	r3, [r7, #15]
        }

        /* Writing Byte by byte and delay for Low power mode of the sensor is 450 us */
        if (dev->aps_status == BMI2_ENABLE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d129      	bne.n	8001126 <bmi2_set_regs+0x98>
        {
            for (loop = 0; loop < len; loop++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	82bb      	strh	r3, [r7, #20]
 80010d6:	e021      	b.n	800111c <bmi2_set_regs+0x8e>
            {
                dev->intf_rslt = dev->write((uint8_t)((uint16_t)reg_addr + loop), &data[loop], 1, dev->intf_ptr);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80010dc:	8abb      	ldrh	r3, [r7, #20]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	4413      	add	r3, r2
 80010e4:	b2d8      	uxtb	r0, r3
 80010e6:	8abb      	ldrh	r3, [r7, #20]
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	18d1      	adds	r1, r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	47a0      	blx	r4
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	729a      	strb	r2, [r3, #10]
                dev->delay_us(BMI2_POWER_SAVE_MODE_DELAY_IN_US, dev->intf_ptr);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6852      	ldr	r2, [r2, #4]
 8001104:	4611      	mov	r1, r2
 8001106:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800110a:	4798      	blx	r3
                if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d11b      	bne.n	800114e <bmi2_set_regs+0xc0>
            for (loop = 0; loop < len; loop++)
 8001116:	8abb      	ldrh	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	82bb      	strh	r3, [r7, #20]
 800111c:	8aba      	ldrh	r2, [r7, #20]
 800111e:	89bb      	ldrh	r3, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d3d9      	bcc.n	80010d8 <bmi2_set_regs+0x4a>
 8001124:	e014      	b.n	8001150 <bmi2_set_regs+0xc2>
            }
        }
        /* Burst write and delay for Normal mode of the sensor is 2 us */
        else
        {
            dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800112a:	89ba      	ldrh	r2, [r7, #12]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	7bf8      	ldrb	r0, [r7, #15]
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	47a0      	blx	r4
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	729a      	strb	r2, [r3, #10]
            dev->delay_us(BMI2_NORMAL_MODE_DELAY_IN_US, dev->intf_ptr);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6852      	ldr	r2, [r2, #4]
 8001146:	4611      	mov	r1, r2
 8001148:	2002      	movs	r0, #2
 800114a:	4798      	blx	r3
 800114c:	e000      	b.n	8001150 <bmi2_set_regs+0xc2>
                    break;
 800114e:	bf00      	nop
        }

        /* Updating the advance power saver flag */
        if (reg_addr == BMI2_PWR_CONF_ADDR)
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b7c      	cmp	r3, #124	@ 0x7c
 8001154:	d10e      	bne.n	8001174 <bmi2_set_regs+0xe6>
        {
            if (*data & BMI2_ADV_POW_EN_MASK)
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d004      	beq.n	800116c <bmi2_set_regs+0xde>
            {
                dev->aps_status = BMI2_ENABLE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 800116a:	e003      	b.n	8001174 <bmi2_set_regs+0xe6>
            }
            else
            {
                dev->aps_status = BMI2_DISABLE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            }
        }

        if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d004      	beq.n	8001188 <bmi2_set_regs+0xfa>
        {
            rslt = BMI2_E_COM_FAIL;
 800117e:	23fe      	movs	r3, #254	@ 0xfe
 8001180:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI2_INTF_RET_SUCCESS)
 8001182:	e001      	b.n	8001188 <bmi2_set_regs+0xfa>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001184:	23ff      	movs	r3, #255	@ 0xff
 8001186:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001188:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800118c:	4618      	mov	r0, r3
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	bd90      	pop	{r4, r7, pc}

08001194 <bmi2_soft_reset>:
/*!
 * @brief This API resets bmi2 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi2_soft_reset(struct bmi2_dev *dev)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define soft reset value */
    uint8_t data = BMI2_SOFT_RESET_CMD;
 800119c:	23b6      	movs	r3, #182	@ 0xb6
 800119e:	73bb      	strb	r3, [r7, #14]

    /* Variable to read the dummy byte */
    uint8_t dummy_read = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	737b      	strb	r3, [r7, #13]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f001 fe18 	bl	8002dda <null_ptr_check>
 80011aa:	4603      	mov	r3, r0
 80011ac:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d139      	bne.n	800122a <bmi2_soft_reset+0x96>
    {
        /* Reset bmi2 device */
        rslt = bmi2_set_regs(BMI2_CMD_REG_ADDR, &data, 1, dev);
 80011b6:	f107 010e 	add.w	r1, r7, #14
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	207e      	movs	r0, #126	@ 0x7e
 80011c0:	f7ff ff65 	bl	800108e <bmi2_set_regs>
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]
        dev->delay_us(2000, dev->intf_ptr);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6852      	ldr	r2, [r2, #4]
 80011d0:	4611      	mov	r1, r2
 80011d2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011d6:	4798      	blx	r3

        /* Set APS flag as after soft reset the sensor is on advance power save mode */
        dev->aps_status = BMI2_ENABLE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

        /* Performing a dummy read to bring interface back to SPI from
         * I2C after a soft-reset
         */
        if ((rslt == BMI2_OK) && (dev->intf == BMI2_SPI_INTF))
 80011e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10c      	bne.n	8001202 <bmi2_soft_reset+0x6e>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7a5b      	ldrb	r3, [r3, #9]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d108      	bne.n	8001202 <bmi2_soft_reset+0x6e>
        {
            rslt = bmi2_get_regs(BMI2_CHIP_ID_ADDR, &dummy_read, 1, dev);
 80011f0:	f107 010d 	add.w	r1, r7, #13
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fed5 	bl	8000fa8 <bmi2_get_regs>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI2_OK)
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d104      	bne.n	8001214 <bmi2_soft_reset+0x80>
        {
            /* Write the configuration file */
            rslt = bmi2_write_config_file(dev);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f85f 	bl	80012ce <bmi2_write_config_file>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the sensor status flag in the device structure */
        if (rslt == BMI2_OK)
 8001214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d106      	bne.n	800122a <bmi2_soft_reset+0x96>
        {
            dev->sens_en_stat = 0;
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        }
    }

    return rslt;
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <bmi2_set_adv_power_save>:

/*!
 * @brief This API enables/disables the advance power save mode in the sensor.
 */
int8_t bmi2_set_adv_power_save(uint8_t enable, struct bmi2_dev *dev)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	6039      	str	r1, [r7, #0]
 8001240:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001246:	6838      	ldr	r0, [r7, #0]
 8001248:	f001 fdc7 	bl	8002dda <null_ptr_check>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d134      	bne.n	80012c2 <bmi2_set_adv_power_save+0x8c>
    {
        rslt = bmi2_get_regs(BMI2_PWR_CONF_ADDR, &reg_data, 1, dev);
 8001258:	f107 010e 	add.w	r1, r7, #14
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2201      	movs	r2, #1
 8001260:	207c      	movs	r0, #124	@ 0x7c
 8001262:	f7ff fea1 	bl	8000fa8 <bmi2_get_regs>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d127      	bne.n	80012c2 <bmi2_set_adv_power_save+0x8c>
        {
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_ADV_POW_EN, enable);
 8001272:	7bbb      	ldrb	r3, [r7, #14]
 8001274:	b25b      	sxtb	r3, r3
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	b25a      	sxtb	r2, r3
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	b25b      	sxtb	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	b25b      	sxtb	r3, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	73bb      	strb	r3, [r7, #14]
            rslt = bmi2_set_regs(BMI2_PWR_CONF_ADDR, &reg_data, 1, dev);
 800128e:	f107 010e 	add.w	r1, r7, #14
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2201      	movs	r2, #1
 8001296:	207c      	movs	r0, #124	@ 0x7c
 8001298:	f7ff fef9 	bl	800108e <bmi2_set_regs>
 800129c:	4603      	mov	r3, r0
 800129e:	73fb      	strb	r3, [r7, #15]

            if (rslt != BMI2_OK)
 80012a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <bmi2_set_adv_power_save+0x76>
            {
                /* Return error if enable/disable APS fails */
                rslt = BMI2_E_SET_APS_FAIL;
 80012a8:	23f3      	movs	r3, #243	@ 0xf3
 80012aa:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BMI2_OK)
 80012ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d106      	bne.n	80012c2 <bmi2_set_adv_power_save+0x8c>
            {
                dev->aps_status = BMI2_GET_BIT_POS0(reg_data, BMI2_ADV_POW_EN);
 80012b4:	7bbb      	ldrb	r3, [r7, #14]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            }
        }
    }

    return rslt;
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <bmi2_write_config_file>:

/*!
 * @brief This API loads the configuration file into the bmi2 sensor.
 */
int8_t bmi2_write_config_file(struct bmi2_dev *dev)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to know the load status */
    uint8_t load_status = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f001 fd7d 	bl	8002dda <null_ptr_check>
 80012e0:	4603      	mov	r3, r0
 80012e2:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (dev->config_size != 0))
 80012e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d13b      	bne.n	8001364 <bmi2_write_config_file+0x96>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d036      	beq.n	8001364 <bmi2_write_config_file+0x96>
    {
        /* Bytes written are multiples of 2 */
        if ((dev->read_write_len % 2) != 0)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	89db      	ldrh	r3, [r3, #14]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	b29b      	uxth	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <bmi2_write_config_file+0x42>
        {
            dev->read_write_len = dev->read_write_len - 1;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	89db      	ldrh	r3, [r3, #14]
 8001308:	3b01      	subs	r3, #1
 800130a:	b29a      	uxth	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	81da      	strh	r2, [r3, #14]
        }

        if (dev->read_write_len < 2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	89db      	ldrh	r3, [r3, #14]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d802      	bhi.n	800131e <bmi2_write_config_file+0x50>
        {
            dev->read_write_len = 2;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2202      	movs	r2, #2
 800131c:	81da      	strh	r2, [r3, #14]
        }

        /* Write the configuration file */
        rslt = write_config_file(dev);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 fcab 	bl	8001c7a <write_config_file>
 8001324:	4603      	mov	r3, r0
 8001326:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8001328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d11c      	bne.n	800136a <bmi2_write_config_file+0x9c>
        {
            /* Check the configuration load status */
            rslt = bmi2_get_internal_status(&load_status, dev);
 8001330:	f107 030e 	add.w	r3, r7, #14
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fbae 	bl	8001a98 <bmi2_get_internal_status>
 800133c:	4603      	mov	r3, r0
 800133e:	73fb      	strb	r3, [r7, #15]

            load_status &= BMI2_CONFIG_LOAD_STATUS_MASK;
 8001340:	7bbb      	ldrb	r3, [r7, #14]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	b2db      	uxtb	r3, r3
 8001348:	73bb      	strb	r3, [r7, #14]

            dev->load_status = load_status;
 800134a:	7bba      	ldrb	r2, [r7, #14]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	741a      	strb	r2, [r3, #16]

            /* Return error if loading not successful */
            if ((rslt == BMI2_OK) && (load_status != BMI2_CONFIG_LOAD_SUCCESS))
 8001350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d108      	bne.n	800136a <bmi2_write_config_file+0x9c>
 8001358:	7bbb      	ldrb	r3, [r7, #14]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d005      	beq.n	800136a <bmi2_write_config_file+0x9c>
            {
                rslt = BMI2_E_CONFIG_LOAD;
 800135e:	23f7      	movs	r3, #247	@ 0xf7
 8001360:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8001362:	e002      	b.n	800136a <bmi2_write_config_file+0x9c>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001364:	23ff      	movs	r3, #255	@ 0xff
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e000      	b.n	800136c <bmi2_write_config_file+0x9e>
        if (rslt == BMI2_OK)
 800136a:	bf00      	nop
    }

    return rslt;
 800136c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <bmi2_sensor_enable>:

/*!
 * @brief This API selects the sensors/features to be enabled.
 */
int8_t bmi2_sensor_enable(const uint8_t *sens_list, uint8_t n_sens, struct bmi2_dev *dev)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	460b      	mov	r3, r1
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to select sensor */
    uint64_t sensor_sel = 0;
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f001 fd21 	bl	8002dda <null_ptr_check>
 8001398:	4603      	mov	r3, r0
 800139a:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMI2_OK) && (sens_list != NULL))
 800139c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d117      	bne.n	80013d4 <bmi2_sensor_enable+0x5c>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d014      	beq.n	80013d4 <bmi2_sensor_enable+0x5c>
    {
        /* Get the selected sensors */
        rslt = select_sensor(sens_list, n_sens, &sensor_sel);
 80013aa:	f107 0210 	add.w	r2, r7, #16
 80013ae:	7afb      	ldrb	r3, [r7, #11]
 80013b0:	4619      	mov	r1, r3
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f001 fe53 	bl	800305e <select_sensor>
 80013b8:	4603      	mov	r3, r0
 80013ba:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80013bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <bmi2_sensor_enable+0x60>
        {
            /* Enable the selected sensors */
            rslt = sensor_enable(sensor_sel, dev);
 80013c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	f001 fea3 	bl	8003114 <sensor_enable>
 80013ce:	4603      	mov	r3, r0
 80013d0:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 80013d2:	e001      	b.n	80013d8 <bmi2_sensor_enable+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80013d4:	23ff      	movs	r3, #255	@ 0xff
 80013d6:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80013d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <bmi2_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi2_set_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	460b      	mov	r3, r1
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f001 fcef 	bl	8002dda <null_ptr_check>
 80013fc:	4603      	mov	r3, r0
 80013fe:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 8001400:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001404:	2b00      	cmp	r3, #0
 8001406:	f040 8099 	bne.w	800153c <bmi2_set_sensor_config+0x158>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 8095 	beq.w	800153c <bmi2_set_sensor_config+0x158>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001418:	757b      	strb	r3, [r7, #21]

        for (loop = 0; loop < n_sens; loop++)
 800141a:	2300      	movs	r3, #0
 800141c:	75bb      	strb	r3, [r7, #22]
 800141e:	e079      	b.n	8001514 <bmi2_set_sensor_config+0x130>
        {
            /* Disable Advance power save if enabled for auxiliary
             * and feature configurations
             */
            if (aps_stat == BMI2_ENABLE)
 8001420:	7d7b      	ldrb	r3, [r7, #21]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d105      	bne.n	8001432 <bmi2_set_sensor_config+0x4e>
            {
                /* Disable advance power save if
                 * enabled
                 */
                rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff ff04 	bl	8001236 <bmi2_set_adv_power_save>
 800142e:	4603      	mov	r3, r0
 8001430:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BMI2_OK)
 8001432:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d165      	bne.n	8001506 <bmi2_set_sensor_config+0x122>
            {
                switch (sens_cfg[loop].type)
 800143a:	7dba      	ldrb	r2, [r7, #22]
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	461a      	mov	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4413      	add	r3, r2
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d857      	bhi.n	8001500 <bmi2_set_sensor_config+0x11c>
 8001450:	a201      	add	r2, pc, #4	@ (adr r2, 8001458 <bmi2_set_sensor_config+0x74>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	08001481 	.word	0x08001481
 800145c:	080014a1 	.word	0x080014a1
 8001460:	080014c1 	.word	0x080014c1
 8001464:	08001501 	.word	0x08001501
 8001468:	08001501 	.word	0x08001501
 800146c:	08001501 	.word	0x08001501
 8001470:	08001501 	.word	0x08001501
 8001474:	08001501 	.word	0x08001501
 8001478:	08001501 	.word	0x08001501
 800147c:	080014e1 	.word	0x080014e1
                {
                    /* Set accelerometer configuration */
                    case BMI2_ACCEL:
                        rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8001480:	7dba      	ldrb	r2, [r7, #22]
 8001482:	4613      	mov	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	1a9b      	subs	r3, r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	461a      	mov	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	3304      	adds	r3, #4
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	f001 fba9 	bl	8002bec <set_accel_config>
 800149a:	4603      	mov	r3, r0
 800149c:	75fb      	strb	r3, [r7, #23]
                        break;
 800149e:	e032      	b.n	8001506 <bmi2_set_sensor_config+0x122>

                    /* Set gyroscope configuration */
                    case BMI2_GYRO:
                        rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 80014a0:	7dba      	ldrb	r2, [r7, #22]
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	1a9b      	subs	r3, r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	461a      	mov	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	3304      	adds	r3, #4
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f001 fc0e 	bl	8002cd6 <set_gyro_config>
 80014ba:	4603      	mov	r3, r0
 80014bc:	75fb      	strb	r3, [r7, #23]
                        break;
 80014be:	e022      	b.n	8001506 <bmi2_set_sensor_config+0x122>

                    /* Set auxiliary configuration */
                    case BMI2_AUX:
                        rslt = set_aux_config(&sens_cfg[loop].cfg.aux, dev);
 80014c0:	7dba      	ldrb	r2, [r7, #22]
 80014c2:	4613      	mov	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	1a9b      	subs	r3, r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	461a      	mov	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	3304      	adds	r3, #4
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fdc9 	bl	800206c <set_aux_config>
 80014da:	4603      	mov	r3, r0
 80014dc:	75fb      	strb	r3, [r7, #23]
                        break;
 80014de:	e012      	b.n	8001506 <bmi2_set_sensor_config+0x122>

                    /* Set gyroscope user gain configuration */
                    case BMI2_GYRO_GAIN_UPDATE:
                        rslt = set_gyro_user_gain_config(&sens_cfg[loop].cfg.gyro_gain_update, dev);
 80014e0:	7dba      	ldrb	r2, [r7, #22]
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	1a9b      	subs	r3, r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	461a      	mov	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	3304      	adds	r3, #4
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 fde8 	bl	80020ca <set_gyro_user_gain_config>
 80014fa:	4603      	mov	r3, r0
 80014fc:	75fb      	strb	r3, [r7, #23]
                        break;
 80014fe:	e002      	b.n	8001506 <bmi2_set_sensor_config+0x122>

                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 8001500:	23f8      	movs	r3, #248	@ 0xf8
 8001502:	75fb      	strb	r3, [r7, #23]
                        break;
 8001504:	bf00      	nop
                }
            }

            /* Return error if any of the set configurations fail */
            if (rslt != BMI2_OK)
 8001506:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d107      	bne.n	800151e <bmi2_set_sensor_config+0x13a>
        for (loop = 0; loop < n_sens; loop++)
 800150e:	7dbb      	ldrb	r3, [r7, #22]
 8001510:	3301      	adds	r3, #1
 8001512:	75bb      	strb	r3, [r7, #22]
 8001514:	7dba      	ldrb	r2, [r7, #22]
 8001516:	7afb      	ldrb	r3, [r7, #11]
 8001518:	429a      	cmp	r2, r3
 800151a:	d381      	bcc.n	8001420 <bmi2_set_sensor_config+0x3c>
 800151c:	e000      	b.n	8001520 <bmi2_set_sensor_config+0x13c>
            {
                break;
 800151e:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8001520:	7d7b      	ldrb	r3, [r7, #21]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d10d      	bne.n	8001542 <bmi2_set_sensor_config+0x15e>
 8001526:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d109      	bne.n	8001542 <bmi2_set_sensor_config+0x15e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	2001      	movs	r0, #1
 8001532:	f7ff fe80 	bl	8001236 <bmi2_set_adv_power_save>
 8001536:	4603      	mov	r3, r0
 8001538:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 800153a:	e002      	b.n	8001542 <bmi2_set_sensor_config+0x15e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800153c:	23ff      	movs	r3, #255	@ 0xff
 800153e:	75fb      	strb	r3, [r7, #23]
 8001540:	e000      	b.n	8001544 <bmi2_set_sensor_config+0x160>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 8001542:	bf00      	nop
    }

    return rslt;
 8001544:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <bmi2_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi2_get_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	460b      	mov	r3, r1
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f001 fc39 	bl	8002dda <null_ptr_check>
 8001568:	4603      	mov	r3, r0
 800156a:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 800156c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001570:	2b00      	cmp	r3, #0
 8001572:	f040 80b0 	bne.w	80016d6 <bmi2_get_sensor_config+0x186>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80ac 	beq.w	80016d6 <bmi2_get_sensor_config+0x186>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001584:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 8001586:	2300      	movs	r3, #0
 8001588:	75bb      	strb	r3, [r7, #22]
 800158a:	e08f      	b.n	80016ac <bmi2_get_sensor_config+0x15c>
        {
            /* Disable Advance power save if enabled for auxiliary
             * and feature configurations
             */
            if ((sens_cfg[loop].type >= BMI2_MAIN_SENS_MAX_NUM) || (sens_cfg[loop].type == BMI2_AUX))
 800158c:	7dba      	ldrb	r2, [r7, #22]
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	1a9b      	subs	r3, r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d80a      	bhi.n	80015b8 <bmi2_get_sensor_config+0x68>
 80015a2:	7dba      	ldrb	r2, [r7, #22]
 80015a4:	4613      	mov	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	1a9b      	subs	r3, r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	461a      	mov	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d108      	bne.n	80015ca <bmi2_get_sensor_config+0x7a>
            {

                if (aps_stat == BMI2_ENABLE)
 80015b8:	7d7b      	ldrb	r3, [r7, #21]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d105      	bne.n	80015ca <bmi2_get_sensor_config+0x7a>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff fe38 	bl	8001236 <bmi2_set_adv_power_save>
 80015c6:	4603      	mov	r3, r0
 80015c8:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (rslt == BMI2_OK)
 80015ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d165      	bne.n	800169e <bmi2_get_sensor_config+0x14e>
            {
                switch (sens_cfg[loop].type)
 80015d2:	7dba      	ldrb	r2, [r7, #22]
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	461a      	mov	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4413      	add	r3, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b09      	cmp	r3, #9
 80015e6:	d857      	bhi.n	8001698 <bmi2_get_sensor_config+0x148>
 80015e8:	a201      	add	r2, pc, #4	@ (adr r2, 80015f0 <bmi2_get_sensor_config+0xa0>)
 80015ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ee:	bf00      	nop
 80015f0:	08001619 	.word	0x08001619
 80015f4:	08001639 	.word	0x08001639
 80015f8:	08001659 	.word	0x08001659
 80015fc:	08001699 	.word	0x08001699
 8001600:	08001699 	.word	0x08001699
 8001604:	08001699 	.word	0x08001699
 8001608:	08001699 	.word	0x08001699
 800160c:	08001699 	.word	0x08001699
 8001610:	08001699 	.word	0x08001699
 8001614:	08001679 	.word	0x08001679
                {
                    /* Get accelerometer configuration */
                    case BMI2_ACCEL:
                        rslt = get_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8001618:	7dba      	ldrb	r2, [r7, #22]
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	1a9b      	subs	r3, r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	461a      	mov	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	3304      	adds	r3, #4
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4618      	mov	r0, r3
 800162e:	f000 ff74 	bl	800251a <get_accel_config>
 8001632:	4603      	mov	r3, r0
 8001634:	75fb      	strb	r3, [r7, #23]
                        break;
 8001636:	e032      	b.n	800169e <bmi2_get_sensor_config+0x14e>

                    /* Get gyroscope configuration */
                    case BMI2_GYRO:
                        rslt = get_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 8001638:	7dba      	ldrb	r2, [r7, #22]
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	1a9b      	subs	r3, r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	3304      	adds	r3, #4
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 ffa6 	bl	800259e <get_gyro_config>
 8001652:	4603      	mov	r3, r0
 8001654:	75fb      	strb	r3, [r7, #23]
                        break;
 8001656:	e022      	b.n	800169e <bmi2_get_sensor_config+0x14e>

                    /* Get auxiliary configuration */
                    case BMI2_AUX:
                        rslt = get_aux_config(&sens_cfg[loop].cfg.aux, dev);
 8001658:	7dba      	ldrb	r2, [r7, #22]
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	1a9b      	subs	r3, r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	3304      	adds	r3, #4
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4618      	mov	r0, r3
 800166e:	f000 ffe8 	bl	8002642 <get_aux_config>
 8001672:	4603      	mov	r3, r0
 8001674:	75fb      	strb	r3, [r7, #23]
                        break;
 8001676:	e012      	b.n	800169e <bmi2_get_sensor_config+0x14e>

                    /* Get gyroscope user gain configuration */
                    case BMI2_GYRO_GAIN_UPDATE:
                        rslt = get_gyro_gain_update_config(&sens_cfg[loop].cfg.gyro_gain_update, dev);
 8001678:	7dba      	ldrb	r2, [r7, #22]
 800167a:	4613      	mov	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	1a9b      	subs	r3, r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	3304      	adds	r3, #4
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4618      	mov	r0, r3
 800168e:	f001 f80e 	bl	80026ae <get_gyro_gain_update_config>
 8001692:	4603      	mov	r3, r0
 8001694:	75fb      	strb	r3, [r7, #23]
                        break;
 8001696:	e002      	b.n	800169e <bmi2_get_sensor_config+0x14e>

                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 8001698:	23f8      	movs	r3, #248	@ 0xf8
 800169a:	75fb      	strb	r3, [r7, #23]
                        break;
 800169c:	bf00      	nop
                }
            }

            /* Return error if any of the get configurations fail */
            if (rslt != BMI2_OK)
 800169e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d108      	bne.n	80016b8 <bmi2_get_sensor_config+0x168>
        for (loop = 0; loop < n_sens; loop++)
 80016a6:	7dbb      	ldrb	r3, [r7, #22]
 80016a8:	3301      	adds	r3, #1
 80016aa:	75bb      	strb	r3, [r7, #22]
 80016ac:	7dba      	ldrb	r2, [r7, #22]
 80016ae:	7afb      	ldrb	r3, [r7, #11]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	f4ff af6b 	bcc.w	800158c <bmi2_get_sensor_config+0x3c>
 80016b6:	e000      	b.n	80016ba <bmi2_get_sensor_config+0x16a>
            {
                break;
 80016b8:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80016ba:	7d7b      	ldrb	r3, [r7, #21]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d10d      	bne.n	80016dc <bmi2_get_sensor_config+0x18c>
 80016c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d109      	bne.n	80016dc <bmi2_get_sensor_config+0x18c>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	2001      	movs	r0, #1
 80016cc:	f7ff fdb3 	bl	8001236 <bmi2_set_adv_power_save>
 80016d0:	4603      	mov	r3, r0
 80016d2:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80016d4:	e002      	b.n	80016dc <bmi2_get_sensor_config+0x18c>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80016d6:	23ff      	movs	r3, #255	@ 0xff
 80016d8:	75fb      	strb	r3, [r7, #23]
 80016da:	e000      	b.n	80016de <bmi2_get_sensor_config+0x18e>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80016dc:	bf00      	nop
    }

    return rslt;
 80016de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop

080016ec <bmi2_get_feature_data>:

/*!
 * @brief This API gets the feature data gyroscope user-gain update and gyroscope cross sensitivity.
 */
int8_t bmi2_get_feature_data(struct bmi2_feat_sensor_data *feat_sensor_data, uint8_t n_sens, struct bmi2_dev *dev)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	460b      	mov	r3, r1
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f001 fb6b 	bl	8002dda <null_ptr_check>
 8001704:	4603      	mov	r3, r0
 8001706:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 8001708:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d15c      	bne.n	80017ca <bmi2_get_feature_data+0xde>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d059      	beq.n	80017ca <bmi2_get_feature_data+0xde>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800171c:	757b      	strb	r3, [r7, #21]
        for (loop = 0; loop < n_sens; loop++)
 800171e:	2300      	movs	r3, #0
 8001720:	75bb      	strb	r3, [r7, #22]
 8001722:	e04b      	b.n	80017bc <bmi2_get_feature_data+0xd0>
        {
            /* Disable Advance power save if enabled for feature
             * configurations
             */
            if (feat_sensor_data[loop].type >= BMI2_MAIN_SENS_MAX_NUM)
 8001724:	7dbb      	ldrb	r3, [r7, #22]
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d908      	bls.n	8001744 <bmi2_get_feature_data+0x58>
            {
                if (aps_stat == BMI2_ENABLE)
 8001732:	7d7b      	ldrb	r3, [r7, #21]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <bmi2_get_feature_data+0x58>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff fd7b 	bl	8001236 <bmi2_set_adv_power_save>
 8001740:	4603      	mov	r3, r0
 8001742:	75fb      	strb	r3, [r7, #23]
                }
            }

            if (rslt == BMI2_OK)
 8001744:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d127      	bne.n	800179c <bmi2_get_feature_data+0xb0>
            {
                switch (feat_sensor_data[loop].type)
 800174c:	7dbb      	ldrb	r3, [r7, #22]
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b09      	cmp	r3, #9
 8001758:	d00d      	beq.n	8001776 <bmi2_get_feature_data+0x8a>
 800175a:	2b29      	cmp	r3, #41	@ 0x29
 800175c:	d117      	bne.n	800178e <bmi2_get_feature_data+0xa2>
                {
                    case BMI2_GYRO_CROSS_SENSE:

                        /* Get Gyroscope cross sense value of z axis */
                        rslt = get_gyro_cross_sense(&feat_sensor_data[loop].sens_data.correction_factor_zx, dev);
 800175e:	7dbb      	ldrb	r3, [r7, #22]
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4413      	add	r3, r2
 8001766:	3304      	adds	r3, #4
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4618      	mov	r0, r3
 800176c:	f001 fbf0 	bl	8002f50 <get_gyro_cross_sense>
 8001770:	4603      	mov	r3, r0
 8001772:	75fb      	strb	r3, [r7, #23]
                        break;
 8001774:	e00e      	b.n	8001794 <bmi2_get_feature_data+0xa8>

                    case BMI2_GYRO_GAIN_UPDATE:

                        /* Get saturation status of gyroscope user gain update  */
                        rslt =
                            get_gyro_gain_update_status(&feat_sensor_data[loop].sens_data.gyro_user_gain_status, dev);
 8001776:	7dbb      	ldrb	r3, [r7, #22]
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	4413      	add	r3, r2
 800177e:	3304      	adds	r3, #4
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4618      	mov	r0, r3
 8001784:	f001 fb48 	bl	8002e18 <get_gyro_gain_update_status>
 8001788:	4603      	mov	r3, r0
 800178a:	75fb      	strb	r3, [r7, #23]
                        break;
 800178c:	e002      	b.n	8001794 <bmi2_get_feature_data+0xa8>
                    default:
                        rslt = BMI2_E_INVALID_SENSOR;
 800178e:	23f8      	movs	r3, #248	@ 0xf8
 8001790:	75fb      	strb	r3, [r7, #23]
                        break;
 8001792:	bf00      	nop
                }

                /* Return error if any of the get sensor data fails */
                if (rslt != BMI2_OK)
 8001794:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d114      	bne.n	80017c6 <bmi2_get_feature_data+0xda>
            }

            /* Enable Advance power save if disabled while
             * configuring and not when already disabled
             */
            if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 800179c:	7d7b      	ldrb	r3, [r7, #21]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d109      	bne.n	80017b6 <bmi2_get_feature_data+0xca>
 80017a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d105      	bne.n	80017b6 <bmi2_get_feature_data+0xca>
            {
                rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	2001      	movs	r0, #1
 80017ae:	f7ff fd42 	bl	8001236 <bmi2_set_adv_power_save>
 80017b2:	4603      	mov	r3, r0
 80017b4:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 80017b6:	7dbb      	ldrb	r3, [r7, #22]
 80017b8:	3301      	adds	r3, #1
 80017ba:	75bb      	strb	r3, [r7, #22]
 80017bc:	7dba      	ldrb	r2, [r7, #22]
 80017be:	7afb      	ldrb	r3, [r7, #11]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d3af      	bcc.n	8001724 <bmi2_get_feature_data+0x38>
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 80017c4:	e003      	b.n	80017ce <bmi2_get_feature_data+0xe2>
                    break;
 80017c6:	bf00      	nop
    if ((rslt == BMI2_OK) && (feat_sensor_data != NULL))
 80017c8:	e001      	b.n	80017ce <bmi2_get_feature_data+0xe2>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80017ca:	23ff      	movs	r3, #255	@ 0xff
 80017cc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80017ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <bmi2_get_sensor_data>:
/*!
 * @brief This API gets the sensor data for accelerometer, gyroscope,
 * auxiliary sensor with sensortime
 */
int8_t bmi2_get_sensor_data(struct bmi2_sens_data *data, struct bmi2_dev *dev)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b08a      	sub	sp, #40	@ 0x28
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]

    /* Array to hold register sensor data */
    uint8_t sensor_data[BMI2_ACC_GYR_AUX_SENSORTIME_NUM_BYTES];

    /* Null-pointer check */
    if (data != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d018      	beq.n	800181c <bmi2_get_sensor_data+0x42>
    {
        rslt = bmi2_get_regs(BMI2_STATUS_ADDR, sensor_data, BMI2_ACC_GYR_AUX_SENSORTIME_NUM_BYTES, dev);
 80017ea:	f107 010c 	add.w	r1, r7, #12
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	2218      	movs	r2, #24
 80017f2:	2003      	movs	r0, #3
 80017f4:	f7ff fbd8 	bl	8000fa8 <bmi2_get_regs>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMI2_OK)
 80017fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10d      	bne.n	8001822 <bmi2_get_sensor_data+0x48>
        {
            rslt = bmi2_parse_sensor_data(sensor_data, data, dev);
 8001806:	f107 030c 	add.w	r3, r7, #12
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f80d 	bl	800182e <bmi2_parse_sensor_data>
 8001814:	4603      	mov	r3, r0
 8001816:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800181a:	e002      	b.n	8001822 <bmi2_get_sensor_data+0x48>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800181c:	23ff      	movs	r3, #255	@ 0xff
 800181e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8001822:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001826:	4618      	mov	r0, r3
 8001828:	3728      	adds	r7, #40	@ 0x28
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <bmi2_parse_sensor_data>:
/*!
 * @brief This API parses the sensor data for accelerometer, gyroscope,
 * auxiliary sensor with sensortime
 */
int8_t bmi2_parse_sensor_data(const uint8_t *sensor_data, struct bmi2_sens_data *data, const struct bmi2_dev *dev)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b088      	sub	sp, #32
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variables to define loop */
    uint8_t count = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	77bb      	strb	r3, [r7, #30]

    uint8_t index = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	777b      	strb	r3, [r7, #29]

    uint32_t sensor_time_byte3 = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
    uint16_t sensor_time_byte2 = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	82fb      	strh	r3, [r7, #22]
    uint8_t sensor_time_byte1 = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	757b      	strb	r3, [r7, #21]

    rslt = null_ptr_check(dev);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f001 fac3 	bl	8002dda <null_ptr_check>
 8001854:	4603      	mov	r3, r0
 8001856:	77fb      	strb	r3, [r7, #31]

    if ((rslt == BMI2_OK) && (data != NULL))
 8001858:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d156      	bne.n	800190e <bmi2_parse_sensor_data+0xe0>
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d053      	beq.n	800190e <bmi2_parse_sensor_data+0xe0>
    {
        /* Update auxiliary sensor data length */
        index = BMI2_AUX_START_INDEX;
 8001866:	2301      	movs	r3, #1
 8001868:	777b      	strb	r3, [r7, #29]

        /* Get the 8 bytes of auxiliary data */
        do
        {
            *(data->aux_data + count++) = (sensor_data[index++]);
 800186a:	7f7b      	ldrb	r3, [r7, #29]
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	777a      	strb	r2, [r7, #29]
 8001870:	461a      	mov	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	441a      	add	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f103 0118 	add.w	r1, r3, #24
 800187c:	7fbb      	ldrb	r3, [r7, #30]
 800187e:	1c58      	adds	r0, r3, #1
 8001880:	77b8      	strb	r0, [r7, #30]
 8001882:	440b      	add	r3, r1
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	701a      	strb	r2, [r3, #0]
        } while (count < BMI2_AUX_NUM_BYTES);
 8001888:	7fbb      	ldrb	r3, [r7, #30]
 800188a:	2b07      	cmp	r3, #7
 800188c:	d9ed      	bls.n	800186a <bmi2_parse_sensor_data+0x3c>

        /* Update accelerometer sensor data length */
        index = BMI2_ACC_START_INDEX;
 800188e:	2309      	movs	r3, #9
 8001890:	777b      	strb	r3, [r7, #29]

        /* Get accelerometer data from the register */
        get_acc_gyr_data(&data->acc, &sensor_data[index]);
 8001892:	68b8      	ldr	r0, [r7, #8]
 8001894:	7f7b      	ldrb	r3, [r7, #29]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f001 f832 	bl	8002904 <get_acc_gyr_data>

        /* Get the re-mapped accelerometer data */
        get_remapped_data(&data->acc, dev);
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f001 f88e 	bl	80029c6 <get_remapped_data>

        /* Update gyroscope sensor data length */
        index = BMI2_GYR_START_INDEX;
 80018aa:	230f      	movs	r3, #15
 80018ac:	777b      	strb	r3, [r7, #29]

        /* Get gyroscope data from the register */
        get_acc_gyr_data(&data->gyr, &sensor_data[index]);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f103 000c 	add.w	r0, r3, #12
 80018b4:	7f7b      	ldrb	r3, [r7, #29]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4413      	add	r3, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	f001 f822 	bl	8002904 <get_acc_gyr_data>

        /* Get the compensated gyroscope data */
        comp_gyro_cross_axis_sensitivity(&data->gyr, dev);
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	330c      	adds	r3, #12
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f001 f930 	bl	8002b2c <comp_gyro_cross_axis_sensitivity>

        /* Get the re-mapped gyroscope data */
        get_remapped_data(&data->gyr, dev);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	330c      	adds	r3, #12
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f001 f877 	bl	80029c6 <get_remapped_data>

        sensor_time_byte3 = sensor_data[BMI2_PARSE_SENSOR_TIME_MSB_BYTE] << 16;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3317      	adds	r3, #23
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	041b      	lsls	r3, r3, #16
 80018e0:	61bb      	str	r3, [r7, #24]
        sensor_time_byte2 = sensor_data[BMI2_PARSE_SENSOR_TIME_XLSB_BYTE] << 8;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3316      	adds	r3, #22
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	82fb      	strh	r3, [r7, #22]
        sensor_time_byte1 = sensor_data[BMI2_PARSE_SENSOR_TIME_LSB_BYTE];
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3315      	adds	r3, #21
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	757b      	strb	r3, [r7, #21]

        data->sens_time = (uint32_t)(sensor_time_byte3 | sensor_time_byte2 | sensor_time_byte1);
 80018f4:	8afa      	ldrh	r2, [r7, #22]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	7d7b      	ldrb	r3, [r7, #21]
 80018fc:	431a      	orrs	r2, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	621a      	str	r2, [r3, #32]

        /* Store status register value in structure */
        data->status = sensor_data[BMI2_STATUS_INDEX];
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	781a      	ldrb	r2, [r3, #0]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800190c:	e001      	b.n	8001912 <bmi2_parse_sensor_data+0xe4>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800190e:	23ff      	movs	r3, #255	@ 0xff
 8001910:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001912:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <bmi2_get_status>:
/*!
 * @brief This API gets the data ready status of accelerometer, gyroscope,
 * auxiliary, command decoder and busy status of auxiliary.
 */
int8_t bmi2_get_status(uint8_t *status, struct bmi2_dev *dev)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001928:	6838      	ldr	r0, [r7, #0]
 800192a:	f001 fa56 	bl	8002dda <null_ptr_check>
 800192e:	4603      	mov	r3, r0
 8001930:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (status != NULL))
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10b      	bne.n	8001952 <bmi2_get_status+0x34>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d008      	beq.n	8001952 <bmi2_get_status+0x34>
    {
        rslt = bmi2_get_regs(BMI2_STATUS_ADDR, status, 1, dev);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2201      	movs	r2, #1
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	2003      	movs	r0, #3
 8001948:	f7ff fb2e 	bl	8000fa8 <bmi2_get_regs>
 800194c:	4603      	mov	r3, r0
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	e001      	b.n	8001956 <bmi2_get_status+0x38>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001952:	23ff      	movs	r3, #255	@ 0xff
 8001954:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001956:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <bmi2_map_data_int>:

/*!
 * @brief This API maps/un-maps data interrupts to that of interrupt pins.
 */
int8_t bmi2_map_data_int(uint8_t data_int, enum bmi2_hw_int_pin int_pin, struct bmi2_dev *dev)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	603a      	str	r2, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
 8001970:	460b      	mov	r3, r1
 8001972:	71bb      	strb	r3, [r7, #6]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to mask interrupt pin 1 - lower nibble */
    uint8_t int1_mask = data_int;
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	73bb      	strb	r3, [r7, #14]

    /* Variable to mask interrupt pin 2 - higher nibble */
    uint8_t int2_mask = (uint8_t)(data_int << 4);
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	737b      	strb	r3, [r7, #13]

    /* Variable to store register data */
    uint8_t reg_data = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	733b      	strb	r3, [r7, #12]

    /* Read interrupt map1 and map2 and register */
    rslt = bmi2_get_regs(BMI2_INT_MAP_DATA_ADDR, &reg_data, 1, dev);
 8001982:	f107 010c 	add.w	r1, r7, #12
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2201      	movs	r2, #1
 800198a:	2058      	movs	r0, #88	@ 0x58
 800198c:	f7ff fb0c 	bl	8000fa8 <bmi2_get_regs>
 8001990:	4603      	mov	r3, r0
 8001992:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d141      	bne.n	8001a20 <bmi2_map_data_int+0xbc>
    {
        if (int_pin < BMI2_INT_PIN_MAX)
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d83c      	bhi.n	8001a1c <bmi2_map_data_int+0xb8>
        {
            switch (int_pin)
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d82e      	bhi.n	8001a06 <bmi2_map_data_int+0xa2>
 80019a8:	a201      	add	r2, pc, #4	@ (adr r2, 80019b0 <bmi2_map_data_int+0x4c>)
 80019aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ae:	bf00      	nop
 80019b0:	080019c1 	.word	0x080019c1
 80019b4:	080019dd 	.word	0x080019dd
 80019b8:	080019e9 	.word	0x080019e9
 80019bc:	080019f5 	.word	0x080019f5
                case BMI2_INT_NONE:

                    /* Un-Map the corresponding data
                     * interrupt to both interrupt pin 1 and 2
                     */
                    reg_data &= ~(int1_mask | int2_mask);
 80019c0:	7bba      	ldrb	r2, [r7, #14]
 80019c2:	7b7b      	ldrb	r3, [r7, #13]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	b25b      	sxtb	r3, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	b25a      	sxtb	r2, r3
 80019ce:	7b3b      	ldrb	r3, [r7, #12]
 80019d0:	b25b      	sxtb	r3, r3
 80019d2:	4013      	ands	r3, r2
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	733b      	strb	r3, [r7, #12]
                    break;
 80019da:	e015      	b.n	8001a08 <bmi2_map_data_int+0xa4>
                case BMI2_INT1:

                    /* Map the corresponding data interrupt to
                     * interrupt pin 1
                     */
                    reg_data |= int1_mask;
 80019dc:	7b3a      	ldrb	r2, [r7, #12]
 80019de:	7bbb      	ldrb	r3, [r7, #14]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	733b      	strb	r3, [r7, #12]
                    break;
 80019e6:	e00f      	b.n	8001a08 <bmi2_map_data_int+0xa4>
                case BMI2_INT2:

                    /* Map the corresponding data interrupt to
                     * interrupt pin 2
                     */
                    reg_data |= int2_mask;
 80019e8:	7b3a      	ldrb	r2, [r7, #12]
 80019ea:	7b7b      	ldrb	r3, [r7, #13]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	733b      	strb	r3, [r7, #12]
                    break;
 80019f2:	e009      	b.n	8001a08 <bmi2_map_data_int+0xa4>
                case BMI2_INT_BOTH:

                    /* Map the corresponding data
                     * interrupt to both interrupt pin 1 and 2
                     */
                    reg_data |= (int1_mask | int2_mask);
 80019f4:	7bba      	ldrb	r2, [r7, #14]
 80019f6:	7b7b      	ldrb	r3, [r7, #13]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	7b3b      	ldrb	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	733b      	strb	r3, [r7, #12]
                    break;
 8001a04:	e000      	b.n	8001a08 <bmi2_map_data_int+0xa4>
                default:
                    break;
 8001a06:	bf00      	nop
            }

            /* Set the interrupts in the map register */
            rslt = bmi2_set_regs(BMI2_INT_MAP_DATA_ADDR, &reg_data, 1, dev);
 8001a08:	f107 010c 	add.w	r1, r7, #12
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2058      	movs	r0, #88	@ 0x58
 8001a12:	f7ff fb3c 	bl	800108e <bmi2_set_regs>
 8001a16:	4603      	mov	r3, r0
 8001a18:	73fb      	strb	r3, [r7, #15]
 8001a1a:	e001      	b.n	8001a20 <bmi2_map_data_int+0xbc>
        }
        else
        {
            /* Return error if invalid pin selection */
            rslt = BMI2_E_INVALID_INT_PIN;
 8001a1c:	23f4      	movs	r3, #244	@ 0xf4
 8001a1e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <bmi2_get_gyro_cross_sense>:
/*!
 * @brief This API updates the cross sensitivity coefficient between gyroscope's
 * X and Z axes.
 */
int8_t bmi2_get_gyro_cross_sense(struct bmi2_dev *dev)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	77fb      	strb	r3, [r7, #31]
    struct bmi2_feat_sensor_data data;

    /* Check if the feature is supported by this variant */
    if (dev->variant_feature & BMI2_GYRO_CROSS_SENS_ENABLE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d020      	beq.n	8001a88 <bmi2_get_gyro_cross_sense+0x5c>
    {
        rslt = null_ptr_check(dev);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f001 f9c7 	bl	8002dda <null_ptr_check>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8001a50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d114      	bne.n	8001a82 <bmi2_get_gyro_cross_sense+0x56>
        {
            /* Select the feature whose data is to be acquired */
            data.type = BMI2_GYRO_CROSS_SENSE;
 8001a58:	2329      	movs	r3, #41	@ 0x29
 8001a5a:	733b      	strb	r3, [r7, #12]

            /* Get the respective data */
            rslt = bmi2_get_feature_data(&data, 1, dev);
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	2101      	movs	r1, #1
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fe41 	bl	80016ec <bmi2_get_feature_data>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI2_OK)
 8001a6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10a      	bne.n	8001a8c <bmi2_get_gyro_cross_sense+0x60>
            {
                /* Update the gyroscope cross sense value of z axis
                 * in the device structure
                 */
                dev->gyr_cross_sens_zx = data.sens_data.correction_factor_zx;
 8001a76:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8001a80:	e004      	b.n	8001a8c <bmi2_get_gyro_cross_sense+0x60>
            }
        }
        else
        {
            rslt = BMI2_E_NULL_PTR;
 8001a82:	23ff      	movs	r3, #255	@ 0xff
 8001a84:	77fb      	strb	r3, [r7, #31]
 8001a86:	e001      	b.n	8001a8c <bmi2_get_gyro_cross_sense+0x60>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8001a88:	23f8      	movs	r3, #248	@ 0xf8
 8001a8a:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001a8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <bmi2_get_internal_status>:

/*!
 * @brief This API gets Error bits and message indicating internal status.
 */
int8_t bmi2_get_internal_status(uint8_t *int_stat, struct bmi2_dev *dev)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001aa2:	6838      	ldr	r0, [r7, #0]
 8001aa4:	f001 f999 	bl	8002dda <null_ptr_check>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (int_stat != NULL))
 8001aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d113      	bne.n	8001adc <bmi2_get_internal_status+0x44>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d010      	beq.n	8001adc <bmi2_get_internal_status+0x44>
    {
        /* Wait till ASIC is initialized */
        dev->delay_us(BMI2_INTERNAL_STATUS_READ_DELAY_MS, dev->intf_ptr);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	6852      	ldr	r2, [r2, #4]
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001ac8:	4798      	blx	r3

        /* Get the error bits and message */
        rslt = bmi2_get_regs(BMI2_INTERNAL_STATUS_ADDR, int_stat, 1, dev);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	2201      	movs	r2, #1
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	2021      	movs	r0, #33	@ 0x21
 8001ad2:	f7ff fa69 	bl	8000fa8 <bmi2_get_regs>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	e001      	b.n	8001ae0 <bmi2_get_internal_status+0x48>
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001adc:	23ff      	movs	r3, #255	@ 0xff
 8001ade:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <bmi2_get_feat_config>:
/*!
 * @brief This API is used to get the feature configuration from the
 * selected page.
 */
int8_t bmi2_get_feat_config(uint8_t sw_page, uint8_t *feat_config, struct bmi2_dev *dev)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	73fb      	strb	r3, [r7, #15]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to define bytes remaining to read */
    uint8_t bytes_remain = BMI2_FEAT_SIZE_IN_BYTES;
 8001afa:	2310      	movs	r3, #16
 8001afc:	75bb      	strb	r3, [r7, #22]

    /* Variable to define the read-write length */
    uint8_t read_write_len = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	757b      	strb	r3, [r7, #21]

    /* Variable to define the feature configuration address */
    uint8_t addr = BMI2_FEATURES_REG_ADDR;
 8001b02:	2330      	movs	r3, #48	@ 0x30
 8001b04:	753b      	strb	r3, [r7, #20]

    /* Variable to define index */
    uint8_t index = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	74fb      	strb	r3, [r7, #19]

    if ((feat_config == NULL) || (dev == NULL))
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <bmi2_get_feat_config+0x2a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d102      	bne.n	8001b1c <bmi2_get_feat_config+0x30>
    {
        rslt = BMI2_E_NULL_PTR;
 8001b16:	23ff      	movs	r3, #255	@ 0xff
 8001b18:	75fb      	strb	r3, [r7, #23]
 8001b1a:	e073      	b.n	8001c04 <bmi2_get_feat_config+0x118>
    }
    else
    {
        /* Check whether the page is valid */
        if (sw_page < dev->page_max)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7e1a      	ldrb	r2, [r3, #24]
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d96c      	bls.n	8001c00 <bmi2_get_feat_config+0x114>
        {
            /* Switch page */
            rslt = bmi2_set_regs(BMI2_FEAT_PAGE_ADDR, &sw_page, 1, dev);
 8001b26:	f107 010f 	add.w	r1, r7, #15
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	202f      	movs	r0, #47	@ 0x2f
 8001b30:	f7ff faad 	bl	800108e <bmi2_set_regs>
 8001b34:	4603      	mov	r3, r0
 8001b36:	75fb      	strb	r3, [r7, #23]

            /* If user length is less than feature length */
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 8001b38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d152      	bne.n	8001be6 <bmi2_get_feat_config+0xfa>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	89db      	ldrh	r3, [r3, #14]
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	d84e      	bhi.n	8001be6 <bmi2_get_feat_config+0xfa>
            {
                /* Read-write should be even */
                if ((dev->read_write_len % 2) != 0)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	89db      	ldrh	r3, [r3, #14]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d041      	beq.n	8001bda <bmi2_get_feat_config+0xee>
                {
                    dev->read_write_len--;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	89db      	ldrh	r3, [r3, #14]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	81da      	strh	r2, [r3, #14]
                }

                while (bytes_remain > 0)
 8001b62:	e03a      	b.n	8001bda <bmi2_get_feat_config+0xee>
                {
                    if (bytes_remain >= dev->read_write_len)
 8001b64:	7dbb      	ldrb	r3, [r7, #22]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	89db      	ldrh	r3, [r3, #14]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d31d      	bcc.n	8001bac <bmi2_get_feat_config+0xc0>
                    {
                        /* Read from the page */
                        rslt = bmi2_get_regs(addr, &feat_config[index], dev->read_write_len, dev);
 8001b70:	7cfb      	ldrb	r3, [r7, #19]
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	18d1      	adds	r1, r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	89da      	ldrh	r2, [r3, #14]
 8001b7a:	7d38      	ldrb	r0, [r7, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f7ff fa13 	bl	8000fa8 <bmi2_get_regs>
 8001b82:	4603      	mov	r3, r0
 8001b84:	75fb      	strb	r3, [r7, #23]

                        /* Update index */
                        index += (uint8_t) dev->read_write_len;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	89db      	ldrh	r3, [r3, #14]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	7cfb      	ldrb	r3, [r7, #19]
 8001b8e:	4413      	add	r3, r2
 8001b90:	74fb      	strb	r3, [r7, #19]

                        /* Update address */
                        addr += (uint8_t) dev->read_write_len;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	89db      	ldrh	r3, [r3, #14]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	7d3b      	ldrb	r3, [r7, #20]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	753b      	strb	r3, [r7, #20]

                        /* Update read-write length */
                        read_write_len += (uint8_t) dev->read_write_len;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	89db      	ldrh	r3, [r3, #14]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	7d7b      	ldrb	r3, [r7, #21]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	757b      	strb	r3, [r7, #21]
 8001baa:	e00e      	b.n	8001bca <bmi2_get_feat_config+0xde>
                    }
                    else
                    {
                        /* Read from the page */
                        rslt = bmi2_get_regs(addr, (uint8_t *) (feat_config + index), (uint16_t) bytes_remain, dev);
 8001bac:	7cfb      	ldrb	r3, [r7, #19]
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	18d1      	adds	r1, r2, r3
 8001bb2:	7dbb      	ldrb	r3, [r7, #22]
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	7d38      	ldrb	r0, [r7, #20]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f7ff f9f5 	bl	8000fa8 <bmi2_get_regs>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	75fb      	strb	r3, [r7, #23]

                        /* Update read-write length */
                        read_write_len += bytes_remain;
 8001bc2:	7d7a      	ldrb	r2, [r7, #21]
 8001bc4:	7dbb      	ldrb	r3, [r7, #22]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	757b      	strb	r3, [r7, #21]
                    }

                    /* Remaining bytes */
                    bytes_remain = BMI2_FEAT_SIZE_IN_BYTES - read_write_len;
 8001bca:	7d7b      	ldrb	r3, [r7, #21]
 8001bcc:	f1c3 0310 	rsb	r3, r3, #16
 8001bd0:	75bb      	strb	r3, [r7, #22]

                    if (rslt != BMI2_OK)
 8001bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d103      	bne.n	8001be2 <bmi2_get_feat_config+0xf6>
                while (bytes_remain > 0)
 8001bda:	7dbb      	ldrb	r3, [r7, #22]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1c1      	bne.n	8001b64 <bmi2_get_feat_config+0x78>
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 8001be0:	e010      	b.n	8001c04 <bmi2_get_feat_config+0x118>
                    {
                        break;
 8001be2:	bf00      	nop
            if ((rslt == BMI2_OK) && (dev->read_write_len < BMI2_FEAT_SIZE_IN_BYTES))
 8001be4:	e00e      	b.n	8001c04 <bmi2_get_feat_config+0x118>
                    }
                }
            }
            else if (rslt == BMI2_OK)
 8001be6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10a      	bne.n	8001c04 <bmi2_get_feat_config+0x118>
            {
                /* Get configuration from the page */
                rslt = bmi2_get_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	68b9      	ldr	r1, [r7, #8]
 8001bf4:	2030      	movs	r0, #48	@ 0x30
 8001bf6:	f7ff f9d7 	bl	8000fa8 <bmi2_get_regs>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	75fb      	strb	r3, [r7, #23]
 8001bfe:	e001      	b.n	8001c04 <bmi2_get_feat_config+0x118>
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_PAGE;
 8001c00:	23f6      	movs	r3, #246	@ 0xf6
 8001c02:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <bmi2_extract_input_feat_config>:
 * @brief This API is used to extract the input feature configuration
 * details from the look-up table.
 */
uint8_t bmi2_extract_input_feat_config(struct bmi2_feature_config *feat_config, uint8_t type,
                                       const struct bmi2_dev *dev)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	75fb      	strb	r3, [r7, #23]

    /* Variable to set flag */
    uint8_t feat_found = BMI2_FALSE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	75bb      	strb	r3, [r7, #22]

    /* Search for the input feature from the input configuration array */
    while (loop < dev->input_sens)
 8001c26:	e01c      	b.n	8001c62 <bmi2_extract_input_feat_config+0x52>
    {
        if (dev->feat_config[loop].type == type)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a19      	ldr	r1, [r3, #32]
 8001c2c:	7dfa      	ldrb	r2, [r7, #23]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	7afa      	ldrb	r2, [r7, #11]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d10e      	bne.n	8001c5c <bmi2_extract_input_feat_config+0x4c>
        {
            *feat_config = dev->feat_config[loop];
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a19      	ldr	r1, [r3, #32]
 8001c42:	7dfa      	ldrb	r2, [r7, #23]
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	18ca      	adds	r2, r1, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8811      	ldrh	r1, [r2, #0]
 8001c50:	7892      	ldrb	r2, [r2, #2]
 8001c52:	8019      	strh	r1, [r3, #0]
 8001c54:	709a      	strb	r2, [r3, #2]
            feat_found = BMI2_TRUE;
 8001c56:	2301      	movs	r3, #1
 8001c58:	75bb      	strb	r3, [r7, #22]
            break;
 8001c5a:	e007      	b.n	8001c6c <bmi2_extract_input_feat_config+0x5c>
        }

        loop++;
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->input_sens)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7e5b      	ldrb	r3, [r3, #25]
 8001c66:	7dfa      	ldrb	r2, [r7, #23]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d3dd      	bcc.n	8001c28 <bmi2_extract_input_feat_config+0x18>
    }

    /* Return flag */
    return feat_found;
 8001c6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	371c      	adds	r7, #28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <write_config_file>:

/*!
 * @brief This internal API writes the configuration file.
 */
static int8_t write_config_file(struct bmi2_dev *dev)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to update the configuration file index */
    uint16_t index = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	82bb      	strh	r3, [r7, #20]

    /* config file size */
    uint16_t config_size = dev->config_size;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001c8c:	827b      	strh	r3, [r7, #18]

    /* Variable to get the remainder */
    uint8_t remain = (uint8_t)(config_size % dev->read_write_len);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	89da      	ldrh	r2, [r3, #14]
 8001c92:	8a7b      	ldrh	r3, [r7, #18]
 8001c94:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c98:	fb01 f202 	mul.w	r2, r1, r2
 8001c9c:	1a9b      	subs	r3, r3, r2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	747b      	strb	r3, [r7, #17]

    /* Variable to get the balance bytes */
    uint16_t bal_byte = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	81fb      	strh	r3, [r7, #14]

    /* Variable to define temporary read/write length */
    uint16_t read_write_len = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	81bb      	strh	r3, [r7, #12]

    /* Disable advanced power save mode */
    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff fac2 	bl	8001236 <bmi2_set_adv_power_save>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8001cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f040 8088 	bne.w	8001dd0 <write_config_file+0x156>
    {
        /* Disable loading of the configuration */
        rslt = set_config_load(BMI2_DISABLE, dev);
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f000 f88a 	bl	8001ddc <set_config_load>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI2_OK)
 8001ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d17d      	bne.n	8001dd0 <write_config_file+0x156>
        {
            if (!remain)
 8001cd4:	7c7b      	ldrb	r3, [r7, #17]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d11c      	bne.n	8001d14 <write_config_file+0x9a>
            {
                /* Write the configuration file */
                for (index = 0; (index < config_size) && (rslt == BMI2_OK); index += dev->read_write_len)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	82bb      	strh	r3, [r7, #20]
 8001cde:	e010      	b.n	8001d02 <write_config_file+0x88>
                {
                    rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	8abb      	ldrh	r3, [r7, #20]
 8001ce6:	18d0      	adds	r0, r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	89da      	ldrh	r2, [r3, #14]
 8001cec:	8ab9      	ldrh	r1, [r7, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f000 f8a6 	bl	8001e40 <upload_file>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	75fb      	strb	r3, [r7, #23]
                for (index = 0; (index < config_size) && (rslt == BMI2_OK); index += dev->read_write_len)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	89da      	ldrh	r2, [r3, #14]
 8001cfc:	8abb      	ldrh	r3, [r7, #20]
 8001cfe:	4413      	add	r3, r2
 8001d00:	82bb      	strh	r3, [r7, #20]
 8001d02:	8aba      	ldrh	r2, [r7, #20]
 8001d04:	8a7b      	ldrh	r3, [r7, #18]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d24e      	bcs.n	8001da8 <write_config_file+0x12e>
 8001d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0e6      	beq.n	8001ce0 <write_config_file+0x66>
 8001d12:	e049      	b.n	8001da8 <write_config_file+0x12e>
                }
            }
            else
            {
                /* Get the balance bytes */
                bal_byte = (uint16_t) config_size - (uint16_t) remain;
 8001d14:	7c7b      	ldrb	r3, [r7, #17]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	8a7a      	ldrh	r2, [r7, #18]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	81fb      	strh	r3, [r7, #14]

                /* Write the configuration file for the balancem bytes */
                for (index = 0; (index < bal_byte) && (rslt == BMI2_OK); index += dev->read_write_len)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	82bb      	strh	r3, [r7, #20]
 8001d22:	e010      	b.n	8001d46 <write_config_file+0xcc>
                {
                    rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	8abb      	ldrh	r3, [r7, #20]
 8001d2a:	18d0      	adds	r0, r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	89da      	ldrh	r2, [r3, #14]
 8001d30:	8ab9      	ldrh	r1, [r7, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f000 f884 	bl	8001e40 <upload_file>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	75fb      	strb	r3, [r7, #23]
                for (index = 0; (index < bal_byte) && (rslt == BMI2_OK); index += dev->read_write_len)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	89da      	ldrh	r2, [r3, #14]
 8001d40:	8abb      	ldrh	r3, [r7, #20]
 8001d42:	4413      	add	r3, r2
 8001d44:	82bb      	strh	r3, [r7, #20]
 8001d46:	8aba      	ldrh	r2, [r7, #20]
 8001d48:	89fb      	ldrh	r3, [r7, #14]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d203      	bcs.n	8001d56 <write_config_file+0xdc>
 8001d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0e6      	beq.n	8001d24 <write_config_file+0xaa>
                }

                if (rslt == BMI2_OK)
 8001d56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d124      	bne.n	8001da8 <write_config_file+0x12e>
                {
                    /* Update length in a temporary variable */
                    read_write_len = dev->read_write_len;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	89db      	ldrh	r3, [r3, #14]
 8001d62:	81bb      	strh	r3, [r7, #12]

                    /* Write the remaining bytes in 2 bytes length */
                    dev->read_write_len = 2;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	81da      	strh	r2, [r3, #14]

                    /* Write the configuration file for the remaining bytes */
                    for (index = bal_byte;
 8001d6a:	89fb      	ldrh	r3, [r7, #14]
 8001d6c:	82bb      	strh	r3, [r7, #20]
 8001d6e:	e010      	b.n	8001d92 <write_config_file+0x118>
                         (index < config_size) && (rslt == BMI2_OK);
                         index += dev->read_write_len)
                    {
                        rslt = upload_file((dev->config_file_ptr + index), index, dev->read_write_len, dev);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695a      	ldr	r2, [r3, #20]
 8001d74:	8abb      	ldrh	r3, [r7, #20]
 8001d76:	18d0      	adds	r0, r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	89da      	ldrh	r2, [r3, #14]
 8001d7c:	8ab9      	ldrh	r1, [r7, #20]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f000 f85e 	bl	8001e40 <upload_file>
 8001d84:	4603      	mov	r3, r0
 8001d86:	75fb      	strb	r3, [r7, #23]
                         index += dev->read_write_len)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	89da      	ldrh	r2, [r3, #14]
 8001d8c:	8abb      	ldrh	r3, [r7, #20]
 8001d8e:	4413      	add	r3, r2
 8001d90:	82bb      	strh	r3, [r7, #20]
                         (index < config_size) && (rslt == BMI2_OK);
 8001d92:	8aba      	ldrh	r2, [r7, #20]
 8001d94:	8a7b      	ldrh	r3, [r7, #18]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d203      	bcs.n	8001da2 <write_config_file+0x128>
 8001d9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0e6      	beq.n	8001d70 <write_config_file+0xf6>
                    }

                    /* Restore the user set length back from the temporary variable */
                    dev->read_write_len = read_write_len;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	89ba      	ldrh	r2, [r7, #12]
 8001da6:	81da      	strh	r2, [r3, #14]
                }
            }

            if (rslt == BMI2_OK)
 8001da8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10f      	bne.n	8001dd0 <write_config_file+0x156>
            {
                /* Enable loading of the configuration */
                rslt = set_config_load(BMI2_ENABLE, dev);
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	2001      	movs	r0, #1
 8001db4:	f000 f812 	bl	8001ddc <set_config_load>
 8001db8:	4603      	mov	r3, r0
 8001dba:	75fb      	strb	r3, [r7, #23]

                if (rslt == BMI2_OK)
 8001dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <write_config_file+0x156>
                {
                    /* Enable advanced power save mode */
                    rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f7ff fa35 	bl	8001236 <bmi2_set_adv_power_save>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8001dd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <set_config_load>:
/*!
 * @brief This internal API enables/disables the loading of the configuration
 * file.
 */
static int8_t set_config_load(uint8_t enable, struct bmi2_dev *dev)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	71fb      	strb	r3, [r7, #7]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	73bb      	strb	r3, [r7, #14]

    rslt = bmi2_get_regs(BMI2_INIT_CTRL_ADDR, &reg_data, 1, dev);
 8001dec:	f107 010e 	add.w	r1, r7, #14
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2201      	movs	r2, #1
 8001df4:	2059      	movs	r0, #89	@ 0x59
 8001df6:	f7ff f8d7 	bl	8000fa8 <bmi2_get_regs>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d116      	bne.n	8001e34 <set_config_load+0x58>
    {
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_CONF_LOAD_EN, enable);
 8001e06:	7bbb      	ldrb	r3, [r7, #14]
 8001e08:	b25b      	sxtb	r3, r3
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	b25a      	sxtb	r2, r3
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	b25b      	sxtb	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	73bb      	strb	r3, [r7, #14]
        rslt = bmi2_set_regs(BMI2_INIT_CTRL_ADDR, &reg_data, 1, dev);
 8001e22:	f107 010e 	add.w	r1, r7, #14
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	2059      	movs	r0, #89	@ 0x59
 8001e2c:	f7ff f92f 	bl	800108e <bmi2_set_regs>
 8001e30:	4603      	mov	r3, r0
 8001e32:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <upload_file>:

/*!
 * @brief This internal API loads the configuration file.
 */
static int8_t upload_file(const uint8_t *config_data, uint16_t index, uint16_t write_len, struct bmi2_dev *dev)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	817b      	strh	r3, [r7, #10]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	813b      	strh	r3, [r7, #8]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store address */
    uint8_t addr_array[2] = { 0 };
 8001e52:	2300      	movs	r3, #0
 8001e54:	82bb      	strh	r3, [r7, #20]

    if (config_data != NULL)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d024      	beq.n	8001ea6 <upload_file+0x66>
    {
        /* Store 0 to 3 bits of address in first byte */
        addr_array[0] = (uint8_t)((index / 2) & 0x0F);
 8001e5c:	897b      	ldrh	r3, [r7, #10]
 8001e5e:	085b      	lsrs	r3, r3, #1
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	753b      	strb	r3, [r7, #20]

        /* Store 4 to 11 bits of address in the second byte */
        addr_array[1] = (uint8_t)((index / 2) >> 4);
 8001e6c:	897b      	ldrh	r3, [r7, #10]
 8001e6e:	085b      	lsrs	r3, r3, #1
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	757b      	strb	r3, [r7, #21]

        /* Write the 2 bytes of address in consecutive locations */
        rslt = bmi2_set_regs(BMI2_INIT_ADDR_0, addr_array, 2, dev);
 8001e7a:	f107 0114 	add.w	r1, r7, #20
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2202      	movs	r2, #2
 8001e82:	205b      	movs	r0, #91	@ 0x5b
 8001e84:	f7ff f903 	bl	800108e <bmi2_set_regs>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI2_OK)
 8001e8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10a      	bne.n	8001eaa <upload_file+0x6a>
        {
            /* Burst write configuration file data corresponding to user set length */
            rslt = bmi2_set_regs(BMI2_INIT_DATA_ADDR, (uint8_t *)config_data, write_len, dev);
 8001e94:	893a      	ldrh	r2, [r7, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68f9      	ldr	r1, [r7, #12]
 8001e9a:	205e      	movs	r0, #94	@ 0x5e
 8001e9c:	f7ff f8f7 	bl	800108e <bmi2_set_regs>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	75fb      	strb	r3, [r7, #23]
 8001ea4:	e001      	b.n	8001eaa <upload_file+0x6a>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8001ea6:	23ff      	movs	r3, #255	@ 0xff
 8001ea8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <validate_bw_perf_mode>:
/*!
 * @brief This internal API validates bandwidth and performance mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_perf_mode(uint8_t *bandwidth, uint8_t *perf_mode, struct bmi2_dev *dev)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto-correct performance mode */
    rslt = check_boundary_val(perf_mode, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	68b8      	ldr	r0, [r7, #8]
 8001eca:	f000 fe58 	bl	8002b7e <check_boundary_val>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8001ed2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d114      	bne.n	8001f04 <validate_bw_perf_mode+0x4e>
    {
        /* Validate and auto-correct bandwidth parameter */
        if (*perf_mode == BMI2_PERF_OPT_MODE)
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d108      	bne.n	8001ef4 <validate_bw_perf_mode+0x3e>
        {
            /* Validate for continuous filter mode */
            rslt = check_boundary_val(bandwidth, BMI2_ACC_OSR4_AVG1, BMI2_ACC_CIC_AVG8, dev);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 fe48 	bl	8002b7e <check_boundary_val>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	75fb      	strb	r3, [r7, #23]
 8001ef2:	e007      	b.n	8001f04 <validate_bw_perf_mode+0x4e>
        }
        else
        {
            /* Validate for CIC averaging mode */
            rslt = check_boundary_val(bandwidth, BMI2_ACC_OSR4_AVG1, BMI2_ACC_RES_AVG128, dev);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2207      	movs	r2, #7
 8001ef8:	2100      	movs	r1, #0
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fe3f 	bl	8002b7e <check_boundary_val>
 8001f00:	4603      	mov	r3, r0
 8001f02:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001f04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <validate_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_odr_range(uint8_t *odr, uint8_t *range, struct bmi2_dev *dev)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto correct ODR */
    rslt = check_boundary_val(odr, BMI2_ACC_ODR_0_78HZ, BMI2_ACC_ODR_1600HZ, dev);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	220c      	movs	r2, #12
 8001f20:	2101      	movs	r1, #1
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 fe2b 	bl	8002b7e <check_boundary_val>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI2_OK)
 8001f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d107      	bne.n	8001f44 <validate_odr_range+0x34>
    {
        /* Validate and auto correct Range */
        rslt = check_boundary_val(range, BMI2_ACC_RANGE_2G, BMI2_ACC_RANGE_16G, dev);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2203      	movs	r2, #3
 8001f38:	2100      	movs	r1, #0
 8001f3a:	68b8      	ldr	r0, [r7, #8]
 8001f3c:	f000 fe1f 	bl	8002b7e <check_boundary_val>
 8001f40:	4603      	mov	r3, r0
 8001f42:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001f44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <validate_gyro_config>:
/*!
 * @brief This internal API validates bandwidth, performance mode, low power/
 * high performance mode, ODR, and range set by the user.
 */
static int8_t validate_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate and auto-correct performance mode */
    rslt = check_boundary_val(&config->filter_perf, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	1c98      	adds	r0, r3, #2
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2201      	movs	r2, #1
 8001f62:	2100      	movs	r1, #0
 8001f64:	f000 fe0b 	bl	8002b7e <check_boundary_val>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8001f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d13b      	bne.n	8001fec <validate_gyro_config+0x9c>
    {
        /* Validate and auto-correct bandwidth parameter */
        rslt = check_boundary_val(&config->bwp, BMI2_GYR_OSR4_MODE, BMI2_GYR_CIC_MODE, dev);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	1c58      	adds	r0, r3, #1
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	f000 fdfe 	bl	8002b7e <check_boundary_val>
 8001f82:	4603      	mov	r3, r0
 8001f84:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8001f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d12e      	bne.n	8001fec <validate_gyro_config+0x9c>
        {
            /* Validate and auto-correct low power/high-performance parameter */
            rslt = check_boundary_val(&config->noise_perf, BMI2_POWER_OPT_MODE, BMI2_PERF_OPT_MODE, dev);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	1d58      	adds	r0, r3, #5
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2201      	movs	r2, #1
 8001f96:	2100      	movs	r1, #0
 8001f98:	f000 fdf1 	bl	8002b7e <check_boundary_val>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8001fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d121      	bne.n	8001fec <validate_gyro_config+0x9c>
            {
                /* Validate and auto-correct ODR parameter */
                rslt = check_boundary_val(&config->odr, BMI2_GYR_ODR_25HZ, BMI2_GYR_ODR_3200HZ, dev);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	220d      	movs	r2, #13
 8001fae:	2106      	movs	r1, #6
 8001fb0:	f000 fde5 	bl	8002b7e <check_boundary_val>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI2_OK)
 8001fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d115      	bne.n	8001fec <validate_gyro_config+0x9c>
                {
                    /* Validate and auto-correct OIS range */
                    rslt = check_boundary_val(&config->ois_range, BMI2_GYR_OIS_250, BMI2_GYR_OIS_2000, dev);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	1cd8      	adds	r0, r3, #3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2100      	movs	r1, #0
 8001fca:	f000 fdd8 	bl	8002b7e <check_boundary_val>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI2_OK)
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d108      	bne.n	8001fec <validate_gyro_config+0x9c>
                    {
                        /* Validate and auto-correct range parameter */
                        rslt = check_boundary_val(&config->range, BMI2_GYR_RANGE_2000, BMI2_GYR_RANGE_125, dev);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	1d18      	adds	r0, r3, #4
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	f000 fdcb 	bl	8002b7e <check_boundary_val>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <cfg_error_status>:
/*!
 * @brief This internal API shows the error status when illegal sensor
 * configuration is set.
 */
static int8_t cfg_error_status(struct bmi2_dev *dev)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

    /* Variable to store data */
    uint8_t reg_data;

    /* Get error status of the set sensor configuration */
    rslt = bmi2_get_regs(BMI2_EVENT_ADDR, &reg_data, 1, dev);
 8002000:	f107 010e 	add.w	r1, r7, #14
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	201b      	movs	r0, #27
 800200a:	f7fe ffcd 	bl	8000fa8 <bmi2_get_regs>
 800200e:	4603      	mov	r3, r0
 8002010:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d121      	bne.n	800205e <cfg_error_status+0x66>
    {
        reg_data = BMI2_GET_BITS(reg_data, BMI2_EVENT_FLAG);
 800201a:	7bbb      	ldrb	r3, [r7, #14]
 800201c:	109b      	asrs	r3, r3, #2
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	b2db      	uxtb	r3, r3
 8002026:	73bb      	strb	r3, [r7, #14]
        switch (reg_data)
 8002028:	7bbb      	ldrb	r3, [r7, #14]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d816      	bhi.n	800205c <cfg_error_status+0x64>
 800202e:	a201      	add	r2, pc, #4	@ (adr r2, 8002034 <cfg_error_status+0x3c>)
 8002030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002034:	08002045 	.word	0x08002045
 8002038:	0800204b 	.word	0x0800204b
 800203c:	08002051 	.word	0x08002051
 8002040:	08002057 	.word	0x08002057
        {
            case BMI2_NO_ERROR:
                rslt = BMI2_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]
                break;
 8002048:	e009      	b.n	800205e <cfg_error_status+0x66>
            case BMI2_ACC_ERROR:
                rslt = BMI2_E_ACC_INVALID_CFG;
 800204a:	23fb      	movs	r3, #251	@ 0xfb
 800204c:	73fb      	strb	r3, [r7, #15]
                break;
 800204e:	e006      	b.n	800205e <cfg_error_status+0x66>
            case BMI2_GYR_ERROR:
                rslt = BMI2_E_GYRO_INVALID_CFG;
 8002050:	23fa      	movs	r3, #250	@ 0xfa
 8002052:	73fb      	strb	r3, [r7, #15]
                break;
 8002054:	e003      	b.n	800205e <cfg_error_status+0x66>
            case BMI2_ACC_GYR_ERROR:
                rslt = BMI2_E_ACC_GYR_INVALID_CFG;
 8002056:	23f9      	movs	r3, #249	@ 0xf9
 8002058:	73fb      	strb	r3, [r7, #15]
                break;
 800205a:	e000      	b.n	800205e <cfg_error_status+0x66>
            default:
                break;
 800205c:	bf00      	nop
        }
    }

    return rslt;
 800205e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop

0800206c <set_aux_config>:
 * mode enable, manual burst read length, AUX burst read length and AUX read
 * address.
 * 3)It maps/un-maps data interrupts to that of hardware interrupt line.
 */
static int8_t set_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate auxiliary configurations */
    rslt = validate_aux_config(config, dev);
 8002076:	6839      	ldr	r1, [r7, #0]
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fa3a 	bl	80024f2 <validate_aux_config>
 800207e:	4603      	mov	r3, r0
 8002080:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8002082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d119      	bne.n	80020be <set_aux_config+0x52>
    {
        /* Enable/Disable auxiliary interface */
        rslt = set_aux_interface(config, dev);
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f8f8 	bl	8002282 <set_aux_interface>
 8002092:	4603      	mov	r3, r0
 8002094:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10f      	bne.n	80020be <set_aux_config+0x52>
        {
            /* Set the auxiliary interface configurations */
            rslt = config_aux_interface(config, dev);
 800209e:	6839      	ldr	r1, [r7, #0]
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f91f 	bl	80022e4 <config_aux_interface>
 80020a6:	4603      	mov	r3, r0
 80020a8:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 80020aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <set_aux_config+0x52>
            {
                /* Set read out offset and ODR */
                rslt = config_aux(config, dev);
 80020b2:	6839      	ldr	r1, [r7, #0]
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f9d7 	bl	8002468 <config_aux>
 80020ba:	4603      	mov	r3, r0
 80020bc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80020be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <set_gyro_user_gain_config>:
/*!
 * @brief This internal API sets gyroscope user-gain configurations like gain
 * update value for x, y and z-axis.
 */
static int8_t set_gyro_user_gain_config(const struct bmi2_gyro_user_gain_config *config, struct bmi2_dev *dev)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b08a      	sub	sp, #40	@ 0x28
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for user-gain */
    struct bmi2_feature_config user_gain_config = { 0, 0, 0 };
 80020f0:	2300      	movs	r3, #0
 80020f2:	723b      	strb	r3, [r7, #8]
 80020f4:	2300      	movs	r3, #0
 80020f6:	727b      	strb	r3, [r7, #9]
 80020f8:	2300      	movs	r3, #0
 80020fa:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	623b      	str	r3, [r7, #32]

    /* Search for user-gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&user_gain_config, BMI2_GYRO_GAIN_UPDATE, dev);
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	2109      	movs	r1, #9
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fd80 	bl	8001c10 <bmi2_extract_input_feat_config>
 8002110:	4603      	mov	r3, r0
 8002112:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8002114:	7ffb      	ldrb	r3, [r7, #31]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 80aa 	beq.w	8002270 <set_gyro_user_gain_config+0x1a6>
    {
        /* Get the configuration from the page where user-gain feature resides */
        rslt = bmi2_get_feat_config(user_gain_config.page, feat_config, dev);
 800211c:	7a7b      	ldrb	r3, [r7, #9]
 800211e:	f107 010c 	add.w	r1, r7, #12
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fce1 	bl	8001aec <bmi2_get_feat_config>
 800212a:	4603      	mov	r3, r0
 800212c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8002130:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002134:	2b00      	cmp	r3, #0
 8002136:	f040 809e 	bne.w	8002276 <set_gyro_user_gain_config+0x1ac>
        {
            /* Define the offset in bytes for user-gain select */
            idx = user_gain_config.start_addr;
 800213a:	7abb      	ldrb	r3, [r7, #10]
 800213c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8002140:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002144:	085b      	lsrs	r3, r3, #1
 8002146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_x */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_X, config->ratio_x);
 800214a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	6a3a      	ldr	r2, [r7, #32]
 8002152:	4413      	add	r3, r2
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b21b      	sxth	r3, r3
 8002158:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800215c:	f023 0307 	bic.w	r3, r3, #7
 8002160:	b21a      	sxth	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	b21b      	sxth	r3, r3
 8002168:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800216c:	b21b      	sxth	r3, r3
 800216e:	4313      	orrs	r3, r2
 8002170:	b219      	sxth	r1, r3
 8002172:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	6a3a      	ldr	r2, [r7, #32]
 800217a:	4413      	add	r3, r2
 800217c:	b28a      	uxth	r2, r1
 800217e:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set ratio_y */
            idx++;
 8002180:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002184:	3301      	adds	r3, #1
 8002186:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_y */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_Y, config->ratio_y);
 800218a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	6a3a      	ldr	r2, [r7, #32]
 8002192:	4413      	add	r3, r2
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b21b      	sxth	r3, r3
 8002198:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800219c:	f023 0307 	bic.w	r3, r3, #7
 80021a0:	b21a      	sxth	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	885b      	ldrh	r3, [r3, #2]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	4313      	orrs	r3, r2
 80021b0:	b219      	sxth	r1, r3
 80021b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	6a3a      	ldr	r2, [r7, #32]
 80021ba:	4413      	add	r3, r2
 80021bc:	b28a      	uxth	r2, r1
 80021be:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set ratio_z */
            idx++;
 80021c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80021c4:	3301      	adds	r3, #1
 80021c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set ratio_z */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_GYR_USER_GAIN_RATIO_Z, config->ratio_z);
 80021ca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	6a3a      	ldr	r2, [r7, #32]
 80021d2:	4413      	add	r3, r2
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80021dc:	f023 0307 	bic.w	r3, r3, #7
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	889b      	ldrh	r3, [r3, #4]
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	4313      	orrs	r3, r2
 80021f0:	b219      	sxth	r1, r3
 80021f2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	6a3a      	ldr	r2, [r7, #32]
 80021fa:	4413      	add	r3, r2
 80021fc:	b28a      	uxth	r2, r1
 80021fe:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8002200:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002204:	3301      	adds	r3, #1
 8002206:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - user_gain_config.start_addr;
 800220a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	b2da      	uxtb	r2, r3
 8002212:	7abb      	ldrb	r3, [r7, #10]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 800221a:	2300      	movs	r3, #0
 800221c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002220:	e015      	b.n	800224e <set_gyro_user_gain_config+0x184>
            {
                feat_config[user_gain_config.start_addr +
                            index] = *((uint8_t *) data_p + user_gain_config.start_addr + index);
 8002222:	7abb      	ldrb	r3, [r7, #10]
 8002224:	461a      	mov	r2, r3
 8002226:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800222a:	4413      	add	r3, r2
 800222c:	6a3a      	ldr	r2, [r7, #32]
 800222e:	441a      	add	r2, r3
                feat_config[user_gain_config.start_addr +
 8002230:	7abb      	ldrb	r3, [r7, #10]
 8002232:	4619      	mov	r1, r3
 8002234:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002238:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + user_gain_config.start_addr + index);
 800223a:	7812      	ldrb	r2, [r2, #0]
 800223c:	3328      	adds	r3, #40	@ 0x28
 800223e:	443b      	add	r3, r7
 8002240:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8002244:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002248:	3301      	adds	r3, #1
 800224a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800224e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002252:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002256:	429a      	cmp	r2, r3
 8002258:	d3e3      	bcc.n	8002222 <set_gyro_user_gain_config+0x158>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 800225a:	f107 010c 	add.w	r1, r7, #12
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2210      	movs	r2, #16
 8002262:	2030      	movs	r0, #48	@ 0x30
 8002264:	f7fe ff13 	bl	800108e <bmi2_set_regs>
 8002268:	4603      	mov	r3, r0
 800226a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800226e:	e002      	b.n	8002276 <set_gyro_user_gain_config+0x1ac>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8002270:	23f8      	movs	r3, #248	@ 0xf8
 8002272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8002276:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800227a:	4618      	mov	r0, r3
 800227c:	3728      	adds	r7, #40	@ 0x28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <set_aux_interface>:

/*!
 * @brief This internal API enables/disables auxiliary interface.
 */
static int8_t set_aux_interface(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 800228c:	f107 010e 	add.w	r1, r7, #14
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2201      	movs	r2, #1
 8002294:	206b      	movs	r0, #107	@ 0x6b
 8002296:	f7fe fe87 	bl	8000fa8 <bmi2_get_regs>
 800229a:	4603      	mov	r3, r0
 800229c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800229e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d118      	bne.n	80022d8 <set_aux_interface+0x56>
    {
        reg_data = BMI2_SET_BITS(reg_data, BMI2_AUX_IF_EN, config->aux_en);
 80022a6:	7bbb      	ldrb	r3, [r7, #14]
 80022a8:	b25b      	sxtb	r3, r3
 80022aa:	f023 0320 	bic.w	r3, r3, #32
 80022ae:	b25a      	sxtb	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	015b      	lsls	r3, r3, #5
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	f003 0320 	and.w	r3, r3, #32
 80022bc:	b25b      	sxtb	r3, r3
 80022be:	4313      	orrs	r3, r2
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	73bb      	strb	r3, [r7, #14]

        /* Enable/Disable auxiliary interface */
        rslt = bmi2_set_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 80022c6:	f107 010e 	add.w	r1, r7, #14
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2201      	movs	r2, #1
 80022ce:	206b      	movs	r0, #107	@ 0x6b
 80022d0:	f7fe fedd 	bl	800108e <bmi2_set_regs>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80022d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <config_aux_interface>:
 *
 * @note Auxiliary sensor should not be busy when configuring aux_i2c_addr,
 * man_rd_burst_len, aux_rd_burst_len and aux_rd_addr.
 */
static int8_t config_aux_interface(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 80022ee:	2300      	movs	r3, #0
 80022f0:	81bb      	strh	r3, [r7, #12]

    /* Variable to store status */
    uint8_t status = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	72fb      	strb	r3, [r7, #11]

    /* Variable to define count */
    uint8_t count = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	73bb      	strb	r3, [r7, #14]

    rslt = bmi2_get_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 80022fa:	f107 010c 	add.w	r1, r7, #12
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2202      	movs	r2, #2
 8002302:	204b      	movs	r0, #75	@ 0x4b
 8002304:	f7fe fe50 	bl	8000fa8 <bmi2_get_regs>
 8002308:	4603      	mov	r3, r0
 800230a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800230c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002310:	2b00      	cmp	r3, #0
 8002312:	f040 80a3 	bne.w	800245c <config_aux_interface+0x178>
    {
        /* Set I2C address for AUX sensor */
        reg_data[0] = BMI2_SET_BITS(reg_data[0], BMI2_AUX_SET_I2C_ADDR, config->i2c_device_addr);
 8002316:	7b3b      	ldrb	r3, [r7, #12]
 8002318:	b25b      	sxtb	r3, r3
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	b25a      	sxtb	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	79db      	ldrb	r3, [r3, #7]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	b25b      	sxtb	r3, r3
 8002328:	4313      	orrs	r3, r2
 800232a:	b25b      	sxtb	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	733b      	strb	r3, [r7, #12]

        /* Set the AUX IF to either manual or auto mode */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_MAN_MODE_EN, config->manual_en);
 8002330:	7b7b      	ldrb	r3, [r7, #13]
 8002332:	b25b      	sxtb	r3, r3
 8002334:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002338:	b25a      	sxtb	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	785b      	ldrb	r3, [r3, #1]
 800233e:	01db      	lsls	r3, r3, #7
 8002340:	b25b      	sxtb	r3, r3
 8002342:	4313      	orrs	r3, r2
 8002344:	b25b      	sxtb	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	737b      	strb	r3, [r7, #13]

        /* Enables FCU write command on AUX IF for auxiliary sensors that need a trigger */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_FCU_WR_EN, config->fcu_write_en);
 800234a:	7b7b      	ldrb	r3, [r7, #13]
 800234c:	b25b      	sxtb	r3, r3
 800234e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002352:	b25a      	sxtb	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	789b      	ldrb	r3, [r3, #2]
 8002358:	019b      	lsls	r3, r3, #6
 800235a:	b25b      	sxtb	r3, r3
 800235c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002360:	b25b      	sxtb	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b25b      	sxtb	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	737b      	strb	r3, [r7, #13]

        /* Set the burst read length for manual mode */
        reg_data[1] = BMI2_SET_BITS(reg_data[1], BMI2_AUX_MAN_READ_BURST, config->man_rd_burst);
 800236a:	7b7b      	ldrb	r3, [r7, #13]
 800236c:	b25b      	sxtb	r3, r3
 800236e:	f023 030c 	bic.w	r3, r3, #12
 8002372:	b25a      	sxtb	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	78db      	ldrb	r3, [r3, #3]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	b25b      	sxtb	r3, r3
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	b25b      	sxtb	r3, r3
 8002382:	4313      	orrs	r3, r2
 8002384:	b25b      	sxtb	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	737b      	strb	r3, [r7, #13]

        /* Set the burst read length for data mode */
        reg_data[1] = BMI2_SET_BIT_POS0(reg_data[1], BMI2_AUX_READ_BURST, config->aux_rd_burst);
 800238a:	7b7b      	ldrb	r3, [r7, #13]
 800238c:	b25b      	sxtb	r3, r3
 800238e:	f023 0303 	bic.w	r3, r3, #3
 8002392:	b25a      	sxtb	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	791b      	ldrb	r3, [r3, #4]
 8002398:	b25b      	sxtb	r3, r3
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	b25b      	sxtb	r3, r3
 80023a0:	4313      	orrs	r3, r2
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	737b      	strb	r3, [r7, #13]
        for (;;)
        {
            /* Check if auxiliary sensor is busy */
            rslt = bmi2_get_status(&status, dev);
 80023a8:	f107 030b 	add.w	r3, r7, #11
 80023ac:	6839      	ldr	r1, [r7, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fab5 	bl	800191e <bmi2_get_status>
 80023b4:	4603      	mov	r3, r0
 80023b6:	73fb      	strb	r3, [r7, #15]
            if ((rslt == BMI2_OK) && (!(status & BMI2_AUX_BUSY)))
 80023b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d13b      	bne.n	8002438 <config_aux_interface+0x154>
 80023c0:	7afb      	ldrb	r3, [r7, #11]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d136      	bne.n	8002438 <config_aux_interface+0x154>
            {
                /* Set the configurations if AUX is not busy */
                rslt = bmi2_set_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 80023ca:	f107 010c 	add.w	r1, r7, #12
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2202      	movs	r2, #2
 80023d2:	204b      	movs	r0, #75	@ 0x4b
 80023d4:	f7fe fe5b 	bl	800108e <bmi2_set_regs>
 80023d8:	4603      	mov	r3, r0
 80023da:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(1000, dev->intf_ptr);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	6852      	ldr	r2, [r2, #4]
 80023e4:	4611      	mov	r1, r2
 80023e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023ea:	4798      	blx	r3
                if (rslt == BMI2_OK)
 80023ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d132      	bne.n	800245a <config_aux_interface+0x176>
                {
                    /* If data mode */
                    if (!config->manual_en)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	785b      	ldrb	r3, [r3, #1]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d115      	bne.n	8002428 <config_aux_interface+0x144>
                    {
                        /* Disable manual enable flag in device structure */
                        dev->aux_man_en = 0;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2200      	movs	r2, #0
 8002400:	76da      	strb	r2, [r3, #27]

                        /* Set the read address of the AUX sensor */
                        rslt = bmi2_set_regs(BMI2_AUX_RD_ADDR, (uint8_t *) &config->read_addr, 1, dev);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f103 0108 	add.w	r1, r3, #8
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2201      	movs	r2, #1
 800240c:	204d      	movs	r0, #77	@ 0x4d
 800240e:	f7fe fe3e 	bl	800108e <bmi2_set_regs>
 8002412:	4603      	mov	r3, r0
 8002414:	73fb      	strb	r3, [r7, #15]
                        dev->delay_us(1000, dev->intf_ptr);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	6852      	ldr	r2, [r2, #4]
 800241e:	4611      	mov	r1, r2
 8002420:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002424:	4798      	blx	r3
                        dev->aux_man_rd_burst_len = config->man_rd_burst;
                    }
                }

                /* Break after setting the register */
                break;
 8002426:	e018      	b.n	800245a <config_aux_interface+0x176>
                        dev->aux_man_en = 1;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2201      	movs	r2, #1
 800242c:	76da      	strb	r2, [r3, #27]
                        dev->aux_man_rd_burst_len = config->man_rd_burst;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	78da      	ldrb	r2, [r3, #3]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	771a      	strb	r2, [r3, #28]
                break;
 8002436:	e010      	b.n	800245a <config_aux_interface+0x176>
            }

            /* Increment count after every 10 seconds */
            dev->delay_us(10000, dev->intf_ptr);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	6852      	ldr	r2, [r2, #4]
 8002440:	4611      	mov	r1, r2
 8002442:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002446:	4798      	blx	r3
            count++;
 8002448:	7bbb      	ldrb	r3, [r7, #14]
 800244a:	3301      	adds	r3, #1
 800244c:	73bb      	strb	r3, [r7, #14]

            /* Break after 2 seconds if AUX still busy - since slowest ODR is 0.78Hz*/
            if (count > 20)
 800244e:	7bbb      	ldrb	r3, [r7, #14]
 8002450:	2b14      	cmp	r3, #20
 8002452:	d9a9      	bls.n	80023a8 <config_aux_interface+0xc4>
            {
                rslt = BMI2_E_AUX_BUSY;
 8002454:	23f1      	movs	r3, #241	@ 0xf1
 8002456:	73fb      	strb	r3, [r7, #15]
                break;
 8002458:	e000      	b.n	800245c <config_aux_interface+0x178>
                break;
 800245a:	bf00      	nop
            }
        }
    }

    return rslt;
 800245c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <config_aux>:
/*!
 * @brief This internal API triggers read out offset and sets ODR of the
 * auxiliary sensor.
 */
static int8_t config_aux(const struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 8002472:	f107 010e 	add.w	r1, r7, #14
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2201      	movs	r2, #1
 800247a:	2044      	movs	r0, #68	@ 0x44
 800247c:	f7fe fd94 	bl	8000fa8 <bmi2_get_regs>
 8002480:	4603      	mov	r3, r0
 8002482:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8002484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d12c      	bne.n	80024e6 <config_aux+0x7e>
    {
        /* Trigger read out offset */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_AUX_OFFSET_READ_OUT, config->offset);
 800248c:	7bbb      	ldrb	r3, [r7, #14]
 800248e:	b25b      	sxtb	r3, r3
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	b25a      	sxtb	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	799b      	ldrb	r3, [r3, #6]
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	b25b      	sxtb	r3, r3
 800249e:	4313      	orrs	r3, r2
 80024a0:	b25b      	sxtb	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	73bb      	strb	r3, [r7, #14]

        /* Set ODR */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_AUX_ODR_EN, config->odr);
 80024a6:	7bbb      	ldrb	r3, [r7, #14]
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	f023 030f 	bic.w	r3, r3, #15
 80024ae:	b25a      	sxtb	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	795b      	ldrb	r3, [r3, #5]
 80024b4:	b25b      	sxtb	r3, r3
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	b25b      	sxtb	r3, r3
 80024bc:	4313      	orrs	r3, r2
 80024be:	b25b      	sxtb	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	73bb      	strb	r3, [r7, #14]

        /* Set auxiliary configuration register */
        rslt = bmi2_set_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 80024c4:	f107 010e 	add.w	r1, r7, #14
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2201      	movs	r2, #1
 80024cc:	2044      	movs	r0, #68	@ 0x44
 80024ce:	f7fe fdde 	bl	800108e <bmi2_set_regs>
 80024d2:	4603      	mov	r3, r0
 80024d4:	73fb      	strb	r3, [r7, #15]
        dev->delay_us(1000, dev->intf_ptr);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	6852      	ldr	r2, [r2, #4]
 80024de:	4611      	mov	r1, r2
 80024e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024e4:	4798      	blx	r3
    }

    return rslt;
 80024e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <validate_aux_config>:

/*!
 * @brief This internal API validates auxiliary configuration set by the user.
 */
static int8_t validate_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Validate ODR for auxiliary sensor */
    rslt = check_boundary_val(&config->odr, BMI2_AUX_ODR_0_78HZ, BMI2_AUX_ODR_800HZ, dev);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	1d58      	adds	r0, r3, #5
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	220b      	movs	r2, #11
 8002504:	2101      	movs	r1, #1
 8002506:	f000 fb3a 	bl	8002b7e <check_boundary_val>
 800250a:	4603      	mov	r3, r0
 800250c:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800250e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <get_accel_config>:
/*!
 * @brief This internal API gets accelerometer configurations like ODR,
 * bandwidth, performance mode and g-range.
 */
static int8_t get_accel_config(struct bmi2_accel_config *config, struct bmi2_dev *dev)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8002524:	2300      	movs	r3, #0
 8002526:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8002528:	6838      	ldr	r0, [r7, #0]
 800252a:	f000 fc56 	bl	8002dda <null_ptr_check>
 800252e:	4603      	mov	r3, r0
 8002530:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 8002532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d129      	bne.n	800258e <get_accel_config+0x74>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d026      	beq.n	800258e <get_accel_config+0x74>
    {
        /* Read the sensor configuration details */
        rslt = bmi2_get_regs(BMI2_ACC_CONF_ADDR, data_array, 2, dev);
 8002540:	f107 010c 	add.w	r1, r7, #12
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2202      	movs	r2, #2
 8002548:	2040      	movs	r0, #64	@ 0x40
 800254a:	f7fe fd2d 	bl	8000fa8 <bmi2_get_regs>
 800254e:	4603      	mov	r3, r0
 8002550:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8002552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d11b      	bne.n	8002592 <get_accel_config+0x78>
        {
            /* Get accelerometer performance mode */
            config->filter_perf = BMI2_GET_BITS(data_array[0], BMI2_ACC_FILTER_PERF_MODE);
 800255a:	7b3b      	ldrb	r3, [r7, #12]
 800255c:	09db      	lsrs	r3, r3, #7
 800255e:	b2da      	uxtb	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	709a      	strb	r2, [r3, #2]

            /* Get accelerometer bandwidth */
            config->bwp = BMI2_GET_BITS(data_array[0], BMI2_ACC_BW_PARAM);
 8002564:	7b3b      	ldrb	r3, [r7, #12]
 8002566:	111b      	asrs	r3, r3, #4
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	b2da      	uxtb	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	705a      	strb	r2, [r3, #1]

            /* Get accelerometer ODR */
            config->odr = BMI2_GET_BIT_POS0(data_array[0], BMI2_ACC_ODR);
 8002574:	7b3b      	ldrb	r3, [r7, #12]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	b2da      	uxtb	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	701a      	strb	r2, [r3, #0]

            /* Get accelerometer range */
            config->range = BMI2_GET_BIT_POS0(data_array[1], BMI2_ACC_RANGE);
 8002580:	7b7b      	ldrb	r3, [r7, #13]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	b2da      	uxtb	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	70da      	strb	r2, [r3, #3]
        if (rslt == BMI2_OK)
 800258c:	e001      	b.n	8002592 <get_accel_config+0x78>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800258e:	23ff      	movs	r3, #255	@ 0xff
 8002590:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <get_gyro_config>:
/*!
 * @brief This internal API gets gyroscope configurations like ODR, bandwidth,
 * low power/high performance mode, performance mode and range.
 */
static int8_t get_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 80025a8:	2300      	movs	r3, #0
 80025aa:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80025ac:	6838      	ldr	r0, [r7, #0]
 80025ae:	f000 fc14 	bl	8002dda <null_ptr_check>
 80025b2:	4603      	mov	r3, r0
 80025b4:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 80025b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d139      	bne.n	8002632 <get_gyro_config+0x94>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d036      	beq.n	8002632 <get_gyro_config+0x94>
    {
        /* Read the sensor configuration details */
        rslt = bmi2_get_regs(BMI2_GYR_CONF_ADDR, data_array, 2, dev);
 80025c4:	f107 010c 	add.w	r1, r7, #12
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2202      	movs	r2, #2
 80025cc:	2042      	movs	r0, #66	@ 0x42
 80025ce:	f7fe fceb 	bl	8000fa8 <bmi2_get_regs>
 80025d2:	4603      	mov	r3, r0
 80025d4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d12b      	bne.n	8002636 <get_gyro_config+0x98>
        {
            /* Get gyroscope performance mode */
            config->filter_perf = BMI2_GET_BITS(data_array[0], BMI2_GYR_FILTER_PERF_MODE);
 80025de:	7b3b      	ldrb	r3, [r7, #12]
 80025e0:	09db      	lsrs	r3, r3, #7
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	709a      	strb	r2, [r3, #2]

            /* Get gyroscope noise performance mode */
            config->noise_perf = BMI2_GET_BITS(data_array[0], BMI2_GYR_NOISE_PERF_MODE);
 80025e8:	7b3b      	ldrb	r3, [r7, #12]
 80025ea:	119b      	asrs	r3, r3, #6
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	715a      	strb	r2, [r3, #5]

            /* Get gyroscope bandwidth */
            config->bwp = BMI2_GET_BITS(data_array[0], BMI2_GYR_BW_PARAM);
 80025f8:	7b3b      	ldrb	r3, [r7, #12]
 80025fa:	111b      	asrs	r3, r3, #4
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	b2da      	uxtb	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	705a      	strb	r2, [r3, #1]

            /* Get gyroscope ODR */
            config->odr = BMI2_GET_BIT_POS0(data_array[0], BMI2_GYR_ODR);
 8002608:	7b3b      	ldrb	r3, [r7, #12]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	b2da      	uxtb	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	701a      	strb	r2, [r3, #0]

            /* Get gyroscope OIS range */
            config->ois_range = BMI2_GET_BITS(data_array[1], BMI2_GYR_OIS_RANGE);
 8002614:	7b7b      	ldrb	r3, [r7, #13]
 8002616:	10db      	asrs	r3, r3, #3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	b2da      	uxtb	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	70da      	strb	r2, [r3, #3]

            /* Get gyroscope range */
            config->range = BMI2_GET_BIT_POS0(data_array[1], BMI2_GYR_RANGE);
 8002624:	7b7b      	ldrb	r3, [r7, #13]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	b2da      	uxtb	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	711a      	strb	r2, [r3, #4]
        if (rslt == BMI2_OK)
 8002630:	e001      	b.n	8002636 <get_gyro_config+0x98>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8002632:	23ff      	movs	r3, #255	@ 0xff
 8002634:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002636:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <get_aux_config>:
 * mode enable, manual burst read length, AUX burst read length and AUX read
 * address.
 * 3) Gets ODR and offset.
 */
static int8_t get_aux_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800264c:	6838      	ldr	r0, [r7, #0]
 800264e:	f000 fbc4 	bl	8002dda <null_ptr_check>
 8002652:	4603      	mov	r3, r0
 8002654:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMI2_OK) && (config != NULL))
 8002656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d11d      	bne.n	800269a <get_aux_config+0x58>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01a      	beq.n	800269a <get_aux_config+0x58>
    {
        /* Get enable status of auxiliary interface */
        rslt = get_aux_interface(config, dev);
 8002664:	6839      	ldr	r1, [r7, #0]
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f8c1 	bl	80027ee <get_aux_interface>
 800266c:	4603      	mov	r3, r0
 800266e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8002670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d113      	bne.n	80026a0 <get_aux_config+0x5e>
        {
            /* Get the auxiliary interface configurations */
            rslt = get_aux_interface_config(config, dev);
 8002678:	6839      	ldr	r1, [r7, #0]
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f8d7 	bl	800282e <get_aux_interface_config>
 8002680:	4603      	mov	r3, r0
 8002682:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI2_OK)
 8002684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d109      	bne.n	80026a0 <get_aux_config+0x5e>
            {
                /* Get read out offset and ODR */
                rslt = get_aux_cfg(config, dev);
 800268c:	6839      	ldr	r1, [r7, #0]
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f915 	bl	80028be <get_aux_cfg>
 8002694:	4603      	mov	r3, r0
 8002696:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8002698:	e002      	b.n	80026a0 <get_aux_config+0x5e>
            }
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 800269a:	23ff      	movs	r3, #255	@ 0xff
 800269c:	73fb      	strb	r3, [r7, #15]
 800269e:	e000      	b.n	80026a2 <get_aux_config+0x60>
        if (rslt == BMI2_OK)
 80026a0:	bf00      	nop
    }

    return rslt;
 80026a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <get_gyro_gain_update_config>:
/*!
 * @brief This internal API gets gyroscope user-gain configurations like gain
 * update value for x, y and z-axis.
 */
static int8_t get_gyro_gain_update_config(struct bmi2_gyro_user_gain_config *config, struct bmi2_dev *dev)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b08a      	sub	sp, #40	@ 0x28
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	f107 0310 	add.w	r3, r7, #16
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to define LSB */
    uint16_t lsb = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	84bb      	strh	r3, [r7, #36]	@ 0x24

    /* Variable to define MSB */
    uint16_t msb = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* Variable to define a word */
    uint16_t lsb_msb = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	843b      	strh	r3, [r7, #32]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for user-gain */
    struct bmi2_feature_config user_gain_config = { 0, 0, 0 };
 80026da:	2300      	movs	r3, #0
 80026dc:	723b      	strb	r3, [r7, #8]
 80026de:	2300      	movs	r3, #0
 80026e0:	727b      	strb	r3, [r7, #9]
 80026e2:	2300      	movs	r3, #0
 80026e4:	72bb      	strb	r3, [r7, #10]

    /* Search for user-gain feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&user_gain_config, BMI2_GYRO_GAIN_UPDATE, dev);
 80026e6:	f107 0308 	add.w	r3, r7, #8
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	2109      	movs	r1, #9
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fa8e 	bl	8001c10 <bmi2_extract_input_feat_config>
 80026f4:	4603      	mov	r3, r0
 80026f6:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80026f8:	7ffb      	ldrb	r3, [r7, #31]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d06e      	beq.n	80027dc <get_gyro_gain_update_config+0x12e>
    {
        /* Get the configuration from the page where user-gain feature resides */
        rslt = bmi2_get_feat_config(user_gain_config.page, feat_config, dev);
 80026fe:	7a7b      	ldrb	r3, [r7, #9]
 8002700:	f107 010c 	add.w	r1, r7, #12
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff f9f0 	bl	8001aec <bmi2_get_feat_config>
 800270c:	4603      	mov	r3, r0
 800270e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8002712:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002716:	2b00      	cmp	r3, #0
 8002718:	d163      	bne.n	80027e2 <get_gyro_gain_update_config+0x134>
        {
            /* Define the offset in bytes for user-gain select */
            idx = user_gain_config.start_addr;
 800271a:	7abb      	ldrb	r3, [r7, #10]
 800271c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

            /* Get word to calculate ratio_x */
            lsb = (uint16_t) feat_config[idx++];
 8002720:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800272a:	3328      	adds	r3, #40	@ 0x28
 800272c:	443b      	add	r3, r7
 800272e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002732:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 8002734:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800273e:	3328      	adds	r3, #40	@ 0x28
 8002740:	443b      	add	r3, r7
 8002742:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 800274a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800274c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800274e:	4313      	orrs	r3, r2
 8002750:	843b      	strh	r3, [r7, #32]

            /* Get ratio_x */
            config->ratio_x = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_X_MASK;
 8002752:	8c3b      	ldrh	r3, [r7, #32]
 8002754:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002758:	b29a      	uxth	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	801a      	strh	r2, [r3, #0]

            /* Get word to calculate ratio_y */
            lsb = (uint16_t) feat_config[idx++];
 800275e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8002768:	3328      	adds	r3, #40	@ 0x28
 800276a:	443b      	add	r3, r7
 800276c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002770:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 8002772:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800277c:	3328      	adds	r3, #40	@ 0x28
 800277e:	443b      	add	r3, r7
 8002780:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 8002788:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800278a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800278c:	4313      	orrs	r3, r2
 800278e:	843b      	strh	r3, [r7, #32]

            /* Get ratio_y */
            config->ratio_y = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_Y_MASK;
 8002790:	8c3b      	ldrh	r3, [r7, #32]
 8002792:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002796:	b29a      	uxth	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	805a      	strh	r2, [r3, #2]

            /* Get word to calculate ratio_z */
            lsb = (uint16_t) feat_config[idx++];
 800279c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80027a6:	3328      	adds	r3, #40	@ 0x28
 80027a8:	443b      	add	r3, r7
 80027aa:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80027ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
            msb = ((uint16_t) feat_config[idx++] << 8);
 80027b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80027ba:	3328      	adds	r3, #40	@ 0x28
 80027bc:	443b      	add	r3, r7
 80027be:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	847b      	strh	r3, [r7, #34]	@ 0x22
            lsb_msb = lsb | msb;
 80027c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80027c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80027ca:	4313      	orrs	r3, r2
 80027cc:	843b      	strh	r3, [r7, #32]

            /* Get ratio_z */
            config->ratio_z = lsb_msb & BMI2_GYR_USER_GAIN_RATIO_Z_MASK;
 80027ce:	8c3b      	ldrh	r3, [r7, #32]
 80027d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	809a      	strh	r2, [r3, #4]
 80027da:	e002      	b.n	80027e2 <get_gyro_gain_update_config+0x134>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 80027dc:	23f8      	movs	r3, #248	@ 0xf8
 80027de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80027e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3728      	adds	r7, #40	@ 0x28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <get_aux_interface>:

/*!
 * @brief This internal API gets the enable status of auxiliary interface.
 */
static int8_t get_aux_interface(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]

    /* Variable to store data */
    uint8_t reg_data;

    /* Get the enable status of auxiliary interface */
    rslt = bmi2_get_regs(BMI2_IF_CONF_ADDR, &reg_data, 1, dev);
 80027f8:	f107 010e 	add.w	r1, r7, #14
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	206b      	movs	r0, #107	@ 0x6b
 8002802:	f7fe fbd1 	bl	8000fa8 <bmi2_get_regs>
 8002806:	4603      	mov	r3, r0
 8002808:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800280a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d107      	bne.n	8002822 <get_aux_interface+0x34>
    {
        config->aux_en = BMI2_GET_BITS(reg_data, BMI2_AUX_IF_EN);
 8002812:	7bbb      	ldrb	r3, [r7, #14]
 8002814:	115b      	asrs	r3, r3, #5
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	b2da      	uxtb	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002822:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <get_aux_interface_config>:
/*!
 * @brief This internal API gets auxiliary configurations like manual/auto mode
 * FCU write command enable and read burst length for both data and manual mode.
 */
static int8_t get_aux_interface_config(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8002838:	2300      	movs	r3, #0
 800283a:	81bb      	strh	r3, [r7, #12]

    rslt = bmi2_get_regs(BMI2_AUX_DEV_ID_ADDR, reg_data, 2, dev);
 800283c:	f107 010c 	add.w	r1, r7, #12
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2202      	movs	r2, #2
 8002844:	204b      	movs	r0, #75	@ 0x4b
 8002846:	f7fe fbaf 	bl	8000fa8 <bmi2_get_regs>
 800284a:	4603      	mov	r3, r0
 800284c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 800284e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d12d      	bne.n	80028b2 <get_aux_interface_config+0x84>
    {
        /* Get I2C address for auxiliary sensor */
        config->i2c_device_addr = BMI2_GET_BITS(reg_data[0], BMI2_AUX_SET_I2C_ADDR);
 8002856:	7b3b      	ldrb	r3, [r7, #12]
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	71da      	strb	r2, [r3, #7]

        /* Get the AUX IF to either manual or auto mode */
        config->manual_en = BMI2_GET_BITS(reg_data[1], BMI2_AUX_MAN_MODE_EN);
 8002860:	7b7b      	ldrb	r3, [r7, #13]
 8002862:	09db      	lsrs	r3, r3, #7
 8002864:	b2da      	uxtb	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	705a      	strb	r2, [r3, #1]

        /* Enables FCU write command on AUX IF for auxiliary sensors that need a trigger */
        config->fcu_write_en = BMI2_GET_BITS(reg_data[1], BMI2_AUX_FCU_WR_EN);
 800286a:	7b7b      	ldrb	r3, [r7, #13]
 800286c:	119b      	asrs	r3, r3, #6
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	b2da      	uxtb	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	709a      	strb	r2, [r3, #2]

        /* Get the burst read length for manual mode */
        config->man_rd_burst = BMI2_GET_BITS(reg_data[1], BMI2_AUX_MAN_READ_BURST);
 800287a:	7b7b      	ldrb	r3, [r7, #13]
 800287c:	109b      	asrs	r3, r3, #2
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	b2da      	uxtb	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	70da      	strb	r2, [r3, #3]

        /* Get the burst read length for data mode */
        config->aux_rd_burst = BMI2_GET_BIT_POS0(reg_data[1], BMI2_AUX_READ_BURST);
 800288a:	7b7b      	ldrb	r3, [r7, #13]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	b2da      	uxtb	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	711a      	strb	r2, [r3, #4]

        /* If data mode, get the read address of the auxiliary sensor from where data is to be read */
        if (!config->manual_en)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	785b      	ldrb	r3, [r3, #1]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <get_aux_interface_config+0x84>
        {
            rslt = bmi2_get_regs(BMI2_AUX_RD_ADDR, &config->read_addr, 1, dev);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f103 0108 	add.w	r1, r3, #8
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2201      	movs	r2, #1
 80028a8:	204d      	movs	r0, #77	@ 0x4d
 80028aa:	f7fe fb7d 	bl	8000fa8 <bmi2_get_regs>
 80028ae:	4603      	mov	r3, r0
 80028b0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80028b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <get_aux_cfg>:
/*!
 * @brief This internal API gets read out offset and ODR of the auxiliary
 * sensor.
 */
static int8_t get_aux_cfg(struct bmi2_aux_config *config, struct bmi2_dev *dev)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data;

    rslt = bmi2_get_regs(BMI2_AUX_CONF_ADDR, &reg_data, 1, dev);
 80028c8:	f107 010e 	add.w	r1, r7, #14
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2201      	movs	r2, #1
 80028d0:	2044      	movs	r0, #68	@ 0x44
 80028d2:	f7fe fb69 	bl	8000fa8 <bmi2_get_regs>
 80028d6:	4603      	mov	r3, r0
 80028d8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 80028da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10a      	bne.n	80028f8 <get_aux_cfg+0x3a>
    {
        /* Get read out offset */
        config->offset = BMI2_GET_BITS(reg_data, BMI2_AUX_OFFSET_READ_OUT);
 80028e2:	7bbb      	ldrb	r3, [r7, #14]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	719a      	strb	r2, [r3, #6]

        /* Get ODR */
        config->odr = BMI2_GET_BIT_POS0(reg_data, BMI2_AUX_ODR_EN);
 80028ec:	7bbb      	ldrb	r3, [r7, #14]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	715a      	strb	r2, [r3, #5]
    }

    return rslt;
 80028f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <get_acc_gyr_data>:

/*!
 * @brief This internal API gets the accelerometer/gyroscope data.
 */
static void get_acc_gyr_data(struct bmi2_sens_axes_data *data, const uint8_t *reg_data)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]

    /* Variables to store both msb and lsb value */
    uint16_t msb_lsb;

    /* Variables to define index */
    uint8_t index = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]

    /* Read x-axis data */
    lsb = reg_data[index++];
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	73fa      	strb	r2, [r7, #15]
 8002918:	461a      	mov	r2, r3
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	4413      	add	r3, r2
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	73fa      	strb	r2, [r7, #15]
 8002928:	461a      	mov	r2, r3
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	4413      	add	r3, r2
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 8002932:	7b7b      	ldrb	r3, [r7, #13]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	b21a      	sxth	r2, r3
 8002938:	7bbb      	ldrb	r3, [r7, #14]
 800293a:	b21b      	sxth	r3, r3
 800293c:	4313      	orrs	r3, r2
 800293e:	b21b      	sxth	r3, r3
 8002940:	817b      	strh	r3, [r7, #10]
    data->x = (int16_t) msb_lsb;
 8002942:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	801a      	strh	r2, [r3, #0]

    /* Read y-axis data */
    lsb = reg_data[index++];
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	73fa      	strb	r2, [r7, #15]
 8002950:	461a      	mov	r2, r3
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	4413      	add	r3, r2
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	73fa      	strb	r2, [r7, #15]
 8002960:	461a      	mov	r2, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	4413      	add	r3, r2
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 800296a:	7b7b      	ldrb	r3, [r7, #13]
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	b21a      	sxth	r2, r3
 8002970:	7bbb      	ldrb	r3, [r7, #14]
 8002972:	b21b      	sxth	r3, r3
 8002974:	4313      	orrs	r3, r2
 8002976:	b21b      	sxth	r3, r3
 8002978:	817b      	strh	r3, [r7, #10]
    data->y = (int16_t) msb_lsb;
 800297a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	805a      	strh	r2, [r3, #2]

    /* Read z-axis data */
    lsb = reg_data[index++];
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	73fa      	strb	r2, [r7, #15]
 8002988:	461a      	mov	r2, r3
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	4413      	add	r3, r2
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	73bb      	strb	r3, [r7, #14]
    msb = reg_data[index++];
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	73fa      	strb	r2, [r7, #15]
 8002998:	461a      	mov	r2, r3
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	4413      	add	r3, r2
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	737b      	strb	r3, [r7, #13]
    msb_lsb = ((uint16_t) msb << 8) | (uint16_t) lsb;
 80029a2:	7b7b      	ldrb	r3, [r7, #13]
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	b21a      	sxth	r2, r3
 80029a8:	7bbb      	ldrb	r3, [r7, #14]
 80029aa:	b21b      	sxth	r3, r3
 80029ac:	4313      	orrs	r3, r2
 80029ae:	b21b      	sxth	r3, r3
 80029b0:	817b      	strh	r3, [r7, #10]
    data->z = (int16_t) msb_lsb;
 80029b2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	809a      	strh	r2, [r3, #4]
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <get_remapped_data>:

/*!
 * @brief This internal API gets the re-mapped accelerometer/gyroscope data.
 */
static void get_remapped_data(struct bmi2_sens_axes_data *data, const struct bmi2_dev *dev)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b087      	sub	sp, #28
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	6039      	str	r1, [r7, #0]
    /* Array to defined the re-mapped sensor data */
    int16_t remap_data[3] = { 0 };
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	809a      	strh	r2, [r3, #4]
    int16_t pos_multiplier = INT16_C(1);
 80029da:	2301      	movs	r3, #1
 80029dc:	82fb      	strh	r3, [r7, #22]
    int16_t neg_multiplier = INT16_C(-1);
 80029de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029e2:	82bb      	strh	r3, [r7, #20]

    /* Fill the array with the un-mapped sensor data */
    remap_data[0] = data->x;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ea:	81bb      	strh	r3, [r7, #12]
    remap_data[1] = data->y;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029f2:	81fb      	strh	r3, [r7, #14]
    remap_data[2] = data->z;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029fa:	823b      	strh	r3, [r7, #16]

    /* Get the re-mapped x axis data */
    if (dev->remap.x_axis_sign == BMI2_POS_SIGN)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d110      	bne.n	8002a28 <get_remapped_data+0x62>
    {
        data->x = (int16_t)(remap_data[dev->remap.x_axis] * pos_multiplier);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	3318      	adds	r3, #24
 8002a10:	443b      	add	r3, r7
 8002a12:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	8afb      	ldrh	r3, [r7, #22]
 8002a1a:	fb12 f303 	smulbb	r3, r2, r3
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	b21a      	sxth	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	801a      	strh	r2, [r3, #0]
 8002a26:	e00f      	b.n	8002a48 <get_remapped_data+0x82>
    }
    else
    {
        data->x = (int16_t)(remap_data[dev->remap.x_axis] * neg_multiplier);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	3318      	adds	r3, #24
 8002a32:	443b      	add	r3, r7
 8002a34:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	8abb      	ldrh	r3, [r7, #20]
 8002a3c:	fb12 f303 	smulbb	r3, r2, r3
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	b21a      	sxth	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	801a      	strh	r2, [r3, #0]
    }

    /* Get the re-mapped y axis data */
    if (dev->remap.y_axis_sign == BMI2_POS_SIGN)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d110      	bne.n	8002a74 <get_remapped_data+0xae>
    {
        data->y = (int16_t)(remap_data[dev->remap.y_axis] * pos_multiplier);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	3318      	adds	r3, #24
 8002a5c:	443b      	add	r3, r7
 8002a5e:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	8afb      	ldrh	r3, [r7, #22]
 8002a66:	fb12 f303 	smulbb	r3, r2, r3
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	b21a      	sxth	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	805a      	strh	r2, [r3, #2]
 8002a72:	e00f      	b.n	8002a94 <get_remapped_data+0xce>
    }
    else
    {
        data->y = (int16_t)(remap_data[dev->remap.y_axis] * neg_multiplier);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	3318      	adds	r3, #24
 8002a7e:	443b      	add	r3, r7
 8002a80:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	8abb      	ldrh	r3, [r7, #20]
 8002a88:	fb12 f303 	smulbb	r3, r2, r3
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	b21a      	sxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	805a      	strh	r2, [r3, #2]
    }

    /* Get the re-mapped z axis data */
    if (dev->remap.z_axis_sign == BMI2_POS_SIGN)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d110      	bne.n	8002ac0 <get_remapped_data+0xfa>
    {
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * pos_multiplier);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	3318      	adds	r3, #24
 8002aa8:	443b      	add	r3, r7
 8002aaa:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	8afb      	ldrh	r3, [r7, #22]
 8002ab2:	fb12 f303 	smulbb	r3, r2, r3
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	b21a      	sxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	809a      	strh	r2, [r3, #4]
    }
    else
    {
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * neg_multiplier);
    }
}
 8002abe:	e00f      	b.n	8002ae0 <get_remapped_data+0x11a>
        data->z = (int16_t)(remap_data[dev->remap.z_axis] * neg_multiplier);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	3318      	adds	r3, #24
 8002aca:	443b      	add	r3, r7
 8002acc:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	8abb      	ldrh	r3, [r7, #20]
 8002ad4:	fb12 f303 	smulbb	r3, r2, r3
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	b21a      	sxth	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	809a      	strh	r2, [r3, #4]
}
 8002ae0:	bf00      	nop
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <saturate>:

/*!
 * @brief This internal API clips the gyroscope cross-axis sensitivity within signed 16-bit limit
 */
static int16_t saturate(int32_t value, uint16_t saturation_val)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	807b      	strh	r3, [r7, #2]
    int16_t retval = (int16_t)value;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	81fb      	strh	r3, [r7, #14]

    if (value > (int32_t)saturation_val)
 8002afc:	887b      	ldrh	r3, [r7, #2]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	dd02      	ble.n	8002b0a <saturate+0x1e>
    {
        retval = (int16_t)saturation_val;
 8002b04:	887b      	ldrh	r3, [r7, #2]
 8002b06:	81fb      	strh	r3, [r7, #14]
 8002b08:	e008      	b.n	8002b1c <saturate+0x30>
    }
    else if (value < (-(int32_t)saturation_val - 1))
 8002b0a:	887b      	ldrh	r3, [r7, #2]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	da03      	bge.n	8002b1c <saturate+0x30>
    {
        retval = -(int16_t)saturation_val - 1;
 8002b14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	81fb      	strh	r3, [r7, #14]
    }

    return retval;
 8002b1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <comp_gyro_cross_axis_sensitivity>:
/*!
 * @brief This internal API corrects the gyroscope cross-axis sensitivity
 * between the z and the x axis.
 */
static void comp_gyro_cross_axis_sensitivity(struct bmi2_sens_axes_data *gyr_data, const struct bmi2_dev *dev)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
    uint16_t int16_max = UINT16_C(32767);
 8002b36:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002b3a:	81fb      	strh	r3, [r7, #14]

    /* Get the compensated gyroscope x-axis */
    gyr_data->x =
        saturate((int32_t)(gyr_data->x - (int16_t)(((int32_t) dev->gyr_cross_sens_zx * (int32_t) gyr_data->z) / 512)),
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b42:	461a      	mov	r2, r3
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	da01      	bge.n	8002b5e <comp_gyro_cross_axis_sensitivity+0x32>
 8002b5a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8002b5e:	125b      	asrs	r3, r3, #9
 8002b60:	b21b      	sxth	r3, r3
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	89fa      	ldrh	r2, [r7, #14]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ffbf 	bl	8002aec <saturate>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
    gyr_data->x =
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	801a      	strh	r2, [r3, #0]
                 int16_max);
}
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi2_dev *dev)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b087      	sub	sp, #28
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	607b      	str	r3, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	72fb      	strb	r3, [r7, #11]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	72bb      	strb	r3, [r7, #10]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	75fb      	strb	r3, [r7, #23]

    if (val != NULL)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d01e      	beq.n	8002bd8 <check_boundary_val+0x5a>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	7afa      	ldrb	r2, [r7, #11]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d909      	bls.n	8002bb8 <check_boundary_val+0x3a>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	7afa      	ldrb	r2, [r7, #11]
 8002ba8:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI2_I_MIN_VALUE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	7a1b      	ldrb	r3, [r3, #8]
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	7aba      	ldrb	r2, [r7, #10]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d20c      	bcs.n	8002bdc <check_boundary_val+0x5e>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	7aba      	ldrb	r2, [r7, #10]
 8002bc6:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI2_I_MAX_VALUE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7a1b      	ldrb	r3, [r3, #8]
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	721a      	strb	r2, [r3, #8]
 8002bd6:	e001      	b.n	8002bdc <check_boundary_val+0x5e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 8002bd8:	23ff      	movs	r3, #255	@ 0xff
 8002bda:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002bdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR,
 * bandwidth, performance mode and g-range.
 */
static int8_t set_accel_config(struct bmi2_accel_config *config, struct bmi2_dev *dev)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
    uint8_t reg_data;

    /* Array to store the default value of accelerometer configuration
     * reserved registers
     */
    uint8_t data_array[2] = { 0 };
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	81bb      	strh	r3, [r7, #12]

    /* Validate bandwidth and performance mode */
    rslt = validate_bw_perf_mode(&config->bwp, &config->filter_perf, dev);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	1c58      	adds	r0, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3302      	adds	r3, #2
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	4619      	mov	r1, r3
 8002c06:	f7ff f956 	bl	8001eb6 <validate_bw_perf_mode>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8002c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d159      	bne.n	8002cca <set_accel_config+0xde>
    {
        /* Validate ODR and range */
        rslt = validate_odr_range(&config->odr, &config->range, dev);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3303      	adds	r3, #3
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f7ff f976 	bl	8001f10 <validate_odr_range>
 8002c24:	4603      	mov	r3, r0
 8002c26:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8002c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d14c      	bne.n	8002cca <set_accel_config+0xde>
        {
            /* Set accelerometer performance mode */
            reg_data = BMI2_SET_BITS(data_array[0], BMI2_ACC_FILTER_PERF_MODE, config->filter_perf);
 8002c30:	7b3b      	ldrb	r3, [r7, #12]
 8002c32:	b25b      	sxtb	r3, r3
 8002c34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c38:	b25a      	sxtb	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	789b      	ldrb	r3, [r3, #2]
 8002c3e:	01db      	lsls	r3, r3, #7
 8002c40:	b25b      	sxtb	r3, r3
 8002c42:	4313      	orrs	r3, r2
 8002c44:	b25b      	sxtb	r3, r3
 8002c46:	73bb      	strb	r3, [r7, #14]

            /* Set accelerometer bandwidth */
            reg_data = BMI2_SET_BITS(reg_data, BMI2_ACC_BW_PARAM, config->bwp);
 8002c48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c50:	b25a      	sxtb	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	785b      	ldrb	r3, [r3, #1]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	4313      	orrs	r3, r2
 8002c62:	b25b      	sxtb	r3, r3
 8002c64:	73bb      	strb	r3, [r7, #14]

            /* Set accelerometer ODR */
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_ACC_ODR, config->odr);
 8002c66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c6a:	f023 030f 	bic.w	r3, r3, #15
 8002c6e:	b25a      	sxtb	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	b25b      	sxtb	r3, r3
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	b25b      	sxtb	r3, r3
 8002c80:	73bb      	strb	r3, [r7, #14]

            /* Copy the register data to the array */
            data_array[0] = reg_data;
 8002c82:	7bbb      	ldrb	r3, [r7, #14]
 8002c84:	733b      	strb	r3, [r7, #12]

            /* Set accelerometer range */
            reg_data = BMI2_SET_BIT_POS0(data_array[1], BMI2_ACC_RANGE, config->range);
 8002c86:	7b7b      	ldrb	r3, [r7, #13]
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	f023 0303 	bic.w	r3, r3, #3
 8002c8e:	b25a      	sxtb	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	78db      	ldrb	r3, [r3, #3]
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	b25b      	sxtb	r3, r3
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	b25b      	sxtb	r3, r3
 8002ca0:	73bb      	strb	r3, [r7, #14]

            /* Copy the register data to the array */
            data_array[1] = reg_data;
 8002ca2:	7bbb      	ldrb	r3, [r7, #14]
 8002ca4:	737b      	strb	r3, [r7, #13]

            /* Write accelerometer configuration to ACC_CONFand
             * ACC_RANGE registers simultaneously as they lie in consecutive places
             */
            rslt = bmi2_set_regs(BMI2_ACC_CONF_ADDR, data_array, 2, dev);
 8002ca6:	f107 010c 	add.w	r1, r7, #12
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2202      	movs	r2, #2
 8002cae:	2040      	movs	r0, #64	@ 0x40
 8002cb0:	f7fe f9ed 	bl	800108e <bmi2_set_regs>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	73fb      	strb	r3, [r7, #15]

            /* Get error status to check for invalid configurations */
            if (rslt == BMI2_OK)
 8002cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d104      	bne.n	8002cca <set_accel_config+0xde>
            {
                rslt = cfg_error_status(dev);
 8002cc0:	6838      	ldr	r0, [r7, #0]
 8002cc2:	f7ff f999 	bl	8001ff8 <cfg_error_status>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <set_gyro_config>:
 * @brief This internal API sets gyroscope configurations like ODR, bandwidth,
 * low power/high performance mode, performance mode and range. It also
 * maps/un-maps data interrupts to that of hardware interrupt line.
 */
static int8_t set_gyro_config(struct bmi2_gyro_config *config, struct bmi2_dev *dev)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]

    /* Variable to store data */
    uint8_t reg_data;

    /* Array to store the default value of gyroscope configuration reserved registers  */
    uint8_t data_array[2] = { 0 };
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	81bb      	strh	r3, [r7, #12]

    /* Validate gyroscope configurations */
    rslt = validate_gyro_config(config, dev);
 8002ce4:	6839      	ldr	r1, [r7, #0]
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff f932 	bl	8001f50 <validate_gyro_config>
 8002cec:	4603      	mov	r3, r0
 8002cee:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8002cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d16a      	bne.n	8002dce <set_gyro_config+0xf8>
    {
        /* Set gyroscope performance mode */
        reg_data = BMI2_SET_BITS(data_array[0], BMI2_GYR_FILTER_PERF_MODE, config->filter_perf);
 8002cf8:	7b3b      	ldrb	r3, [r7, #12]
 8002cfa:	b25b      	sxtb	r3, r3
 8002cfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d00:	b25a      	sxtb	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	789b      	ldrb	r3, [r3, #2]
 8002d06:	01db      	lsls	r3, r3, #7
 8002d08:	b25b      	sxtb	r3, r3
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	b25b      	sxtb	r3, r3
 8002d0e:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope noise performance mode */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_NOISE_PERF_MODE, config->noise_perf);
 8002d10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d18:	b25a      	sxtb	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	795b      	ldrb	r3, [r3, #5]
 8002d1e:	019b      	lsls	r3, r3, #6
 8002d20:	b25b      	sxtb	r3, r3
 8002d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d26:	b25b      	sxtb	r3, r3
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	b25b      	sxtb	r3, r3
 8002d2c:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope bandwidth */
        reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_BW_PARAM, config->bwp);
 8002d2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d32:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002d36:	b25a      	sxtb	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	785b      	ldrb	r3, [r3, #1]
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	b25b      	sxtb	r3, r3
 8002d40:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d44:	b25b      	sxtb	r3, r3
 8002d46:	4313      	orrs	r3, r2
 8002d48:	b25b      	sxtb	r3, r3
 8002d4a:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope ODR */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_GYR_ODR, config->odr);
 8002d4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d50:	f023 030f 	bic.w	r3, r3, #15
 8002d54:	b25a      	sxtb	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b25b      	sxtb	r3, r3
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	b25b      	sxtb	r3, r3
 8002d62:	4313      	orrs	r3, r2
 8002d64:	b25b      	sxtb	r3, r3
 8002d66:	73bb      	strb	r3, [r7, #14]

        /* Copy the register data to the array */
        data_array[0] = reg_data;
 8002d68:	7bbb      	ldrb	r3, [r7, #14]
 8002d6a:	733b      	strb	r3, [r7, #12]

        /* Set gyroscope OIS range */
        reg_data = BMI2_SET_BITS(data_array[1], BMI2_GYR_OIS_RANGE, config->ois_range);
 8002d6c:	7b7b      	ldrb	r3, [r7, #13]
 8002d6e:	b25b      	sxtb	r3, r3
 8002d70:	f023 0308 	bic.w	r3, r3, #8
 8002d74:	b25a      	sxtb	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	78db      	ldrb	r3, [r3, #3]
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	b25b      	sxtb	r3, r3
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	b25b      	sxtb	r3, r3
 8002d84:	4313      	orrs	r3, r2
 8002d86:	b25b      	sxtb	r3, r3
 8002d88:	73bb      	strb	r3, [r7, #14]

        /* Set gyroscope range */
        reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_GYR_RANGE, config->range);
 8002d8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d8e:	f023 0307 	bic.w	r3, r3, #7
 8002d92:	b25a      	sxtb	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	791b      	ldrb	r3, [r3, #4]
 8002d98:	b25b      	sxtb	r3, r3
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	b25b      	sxtb	r3, r3
 8002da0:	4313      	orrs	r3, r2
 8002da2:	b25b      	sxtb	r3, r3
 8002da4:	73bb      	strb	r3, [r7, #14]

        /* Copy the register data to the array */
        data_array[1] = reg_data;
 8002da6:	7bbb      	ldrb	r3, [r7, #14]
 8002da8:	737b      	strb	r3, [r7, #13]

        /* Write accelerometer configuration to GYR_CONF and GYR_RANGE
         * registers simultaneously as they lie in consecutive places
         */
        rslt = bmi2_set_regs(BMI2_GYR_CONF_ADDR, data_array, 2, dev);
 8002daa:	f107 010c 	add.w	r1, r7, #12
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2202      	movs	r2, #2
 8002db2:	2042      	movs	r0, #66	@ 0x42
 8002db4:	f7fe f96b 	bl	800108e <bmi2_set_regs>
 8002db8:	4603      	mov	r3, r0
 8002dba:	73fb      	strb	r3, [r7, #15]

        /* Get error status to check for invalid configurations */
        if (rslt == BMI2_OK)
 8002dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d104      	bne.n	8002dce <set_gyro_config+0xf8>
        {
            rslt = cfg_error_status(dev);
 8002dc4:	6838      	ldr	r0, [r7, #0]
 8002dc6:	f7ff f917 	bl	8001ff8 <cfg_error_status>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi2_dev *dev)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b085      	sub	sp, #20
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI2_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00b      	beq.n	8002e04 <null_ptr_check+0x2a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d007      	beq.n	8002e04 <null_ptr_check+0x2a>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <null_ptr_check+0x2a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BMI2_E_NULL_PTR;
 8002e04:	23ff      	movs	r3, #255	@ 0xff
 8002e06:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <get_gyro_gain_update_status>:
/*!
 * @brief This internal API gets the saturation status for the gyroscope user
 * gain update.
 */
static int8_t get_gyro_gain_update_status(struct bmi2_gyr_user_gain_status *user_gain_stat, struct bmi2_dev *dev)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	f107 0310 	add.w	r3, r7, #16
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	609a      	str	r2, [r3, #8]

    /* Variables to define index */
    uint8_t idx = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	77bb      	strb	r3, [r7, #30]

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature output for gyroscope user gain status */
    struct bmi2_feature_config user_gain_cfg = { 0, 0, 0 };
 8002e36:	2300      	movs	r3, #0
 8002e38:	723b      	strb	r3, [r7, #8]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	727b      	strb	r3, [r7, #9]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	72bb      	strb	r3, [r7, #10]

    /* Search for gyroscope user gain status output feature and extract its
     * configuration details
     */
    feat_found = extract_output_feat_config(&user_gain_cfg, BMI2_GYRO_GAIN_UPDATE, dev);
 8002e42:	f107 0308 	add.w	r3, r7, #8
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	2109      	movs	r1, #9
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f84b 	bl	8002ee6 <extract_output_feat_config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	777b      	strb	r3, [r7, #29]
    if (feat_found)
 8002e54:	7f7b      	ldrb	r3, [r7, #29]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d03d      	beq.n	8002ed6 <get_gyro_gain_update_status+0xbe>
    {
        /* Get the feature output configuration for gyroscope user gain  status */
        rslt = bmi2_get_feat_config(user_gain_cfg.page, feat_config, dev);
 8002e5a:	7a7b      	ldrb	r3, [r7, #9]
 8002e5c:	f107 010c 	add.w	r1, r7, #12
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fe42 	bl	8001aec <bmi2_get_feat_config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8002e6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d132      	bne.n	8002eda <get_gyro_gain_update_status+0xc2>
        {
            /* Define the offset in bytes for gyroscope user gain status */
            idx = user_gain_cfg.start_addr;
 8002e74:	7abb      	ldrb	r3, [r7, #10]
 8002e76:	77bb      	strb	r3, [r7, #30]

            /* Get the saturation status for x-axis */
            user_gain_stat->sat_x = BMI2_GET_BIT_POS0(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_X);
 8002e78:	7fbb      	ldrb	r3, [r7, #30]
 8002e7a:	3320      	adds	r3, #32
 8002e7c:	443b      	add	r3, r7
 8002e7e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	701a      	strb	r2, [r3, #0]

            /* Get the saturation status for y-axis */
            user_gain_stat->sat_y = BMI2_GET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_Y);
 8002e8c:	7fbb      	ldrb	r3, [r7, #30]
 8002e8e:	3320      	adds	r3, #32
 8002e90:	443b      	add	r3, r7
 8002e92:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002e96:	105b      	asrs	r3, r3, #1
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	705a      	strb	r2, [r3, #1]

            /* Get the saturation status for z-axis */
            user_gain_stat->sat_z = BMI2_GET_BITS(feat_config[idx], BMI2_GYR_USER_GAIN_SAT_STAT_Z);
 8002ea4:	7fbb      	ldrb	r3, [r7, #30]
 8002ea6:	3320      	adds	r3, #32
 8002ea8:	443b      	add	r3, r7
 8002eaa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002eae:	109b      	asrs	r3, r3, #2
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	709a      	strb	r2, [r3, #2]

            /* Get g trigger status */
            user_gain_stat->g_trigger_status = BMI2_GET_BITS(feat_config[idx], BMI2_G_TRIGGER_STAT);
 8002ebc:	7fbb      	ldrb	r3, [r7, #30]
 8002ebe:	3320      	adds	r3, #32
 8002ec0:	443b      	add	r3, r7
 8002ec2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002ec6:	10db      	asrs	r3, r3, #3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	70da      	strb	r2, [r3, #3]
 8002ed4:	e001      	b.n	8002eda <get_gyro_gain_update_status+0xc2>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8002ed6:	23f8      	movs	r3, #248	@ 0xf8
 8002ed8:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002eda:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <extract_output_feat_config>:
 * details from the look-up table.
 */
static uint8_t extract_output_feat_config(struct bmi2_feature_config *feat_output,
                                          uint8_t type,
                                          const struct bmi2_dev *dev)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b087      	sub	sp, #28
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	72fb      	strb	r3, [r7, #11]
    /* Variable to define loop */
    uint8_t loop = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	75fb      	strb	r3, [r7, #23]

    /* Variable to set flag */
    uint8_t feat_found = BMI2_FALSE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	75bb      	strb	r3, [r7, #22]

    /* Search for the output feature from the output configuration array */
    while (loop < dev->out_sens)
 8002efc:	e01c      	b.n	8002f38 <extract_output_feat_config+0x52>
    {
        if (dev->feat_output[loop].type == type)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002f02:	7dfa      	ldrb	r2, [r7, #23]
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	7afa      	ldrb	r2, [r7, #11]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d10e      	bne.n	8002f32 <extract_output_feat_config+0x4c>
        {
            *feat_output = dev->feat_output[loop];
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002f18:	7dfa      	ldrb	r2, [r7, #23]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4413      	add	r3, r2
 8002f20:	18ca      	adds	r2, r1, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8811      	ldrh	r1, [r2, #0]
 8002f26:	7892      	ldrb	r2, [r2, #2]
 8002f28:	8019      	strh	r1, [r3, #0]
 8002f2a:	709a      	strb	r2, [r3, #2]
            feat_found = BMI2_TRUE;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	75bb      	strb	r3, [r7, #22]
            break;
 8002f30:	e007      	b.n	8002f42 <extract_output_feat_config+0x5c>
        }

        loop++;
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	3301      	adds	r3, #1
 8002f36:	75fb      	strb	r3, [r7, #23]
    while (loop < dev->out_sens)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7e9b      	ldrb	r3, [r3, #26]
 8002f3c:	7dfa      	ldrb	r2, [r7, #23]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d3dd      	bcc.n	8002efe <extract_output_feat_config+0x18>
    }

    /* Return flag */
    return feat_found;
 8002f42:	7dbb      	ldrb	r3, [r7, #22]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	371c      	adds	r7, #28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <get_gyro_cross_sense>:
/*!
 * @brief This internal API gets the cross sensitivity coefficient between
 * gyroscope's X and Z axes.
 */
static int8_t get_gyro_cross_sense(int16_t *cross_sense, struct bmi2_dev *dev)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	f107 0310 	add.w	r3, r7, #16
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	609a      	str	r2, [r3, #8]

    /* Variable to define index */
    uint8_t idx = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	77bb      	strb	r3, [r7, #30]
    uint8_t feat_found;

    uint8_t corr_fact_zx;

    /* Initialize feature output for gyroscope cross sensitivity */
    struct bmi2_feature_config cross_sense_out_config = { 0, 0, 0 };
 8002f6e:	2300      	movs	r3, #0
 8002f70:	723b      	strb	r3, [r7, #8]
 8002f72:	2300      	movs	r3, #0
 8002f74:	727b      	strb	r3, [r7, #9]
 8002f76:	2300      	movs	r3, #0
 8002f78:	72bb      	strb	r3, [r7, #10]

    if (dev->variant_feature & BMI2_MAXIMUM_FIFO_VARIANT)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01d      	beq.n	8002fc4 <get_gyro_cross_sense+0x74>
    {
        /* For maximum_fifo variant fetch the correction factor from GPIO0 */
        rslt = bmi2_get_regs(BMI2_GYR_CAS_GPIO0_ADDR, &corr_fact_zx, 1, dev);
 8002f88:	f107 010b 	add.w	r1, r7, #11
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	201e      	movs	r0, #30
 8002f92:	f7fe f809 	bl	8000fa8 <bmi2_get_regs>
 8002f96:	4603      	mov	r3, r0
 8002f98:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMI2_OK)
 8002f9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d157      	bne.n	8003052 <get_gyro_cross_sense+0x102>
        {
            /* Get the gyroscope cross sensitivity coefficient */
            if (corr_fact_zx & BMI2_GYRO_CROSS_AXES_SENSE_SIGN_BIT_MASK)
 8002fa2:	7afb      	ldrb	r3, [r7, #11]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d006      	beq.n	8002fba <get_gyro_cross_sense+0x6a>
            {
                *cross_sense = (int16_t)(((int16_t)corr_fact_zx) - 128);
 8002fac:	7afb      	ldrb	r3, [r7, #11]
 8002fae:	3b80      	subs	r3, #128	@ 0x80
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	b21a      	sxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	801a      	strh	r2, [r3, #0]
 8002fb8:	e04b      	b.n	8003052 <get_gyro_cross_sense+0x102>
            }
            else
            {
                *cross_sense = (int16_t)(corr_fact_zx);
 8002fba:	7afb      	ldrb	r3, [r7, #11]
 8002fbc:	b21a      	sxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	801a      	strh	r2, [r3, #0]
 8002fc2:	e046      	b.n	8003052 <get_gyro_cross_sense+0x102>
        }
    }
    else
    {
        /* Search for gyroscope cross sensitivity feature and extract its configuration details */
        feat_found = extract_output_feat_config(&cross_sense_out_config, BMI2_GYRO_CROSS_SENSE, dev);
 8002fc4:	f107 0308 	add.w	r3, r7, #8
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	2129      	movs	r1, #41	@ 0x29
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff8a 	bl	8002ee6 <extract_output_feat_config>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	777b      	strb	r3, [r7, #29]
        if (feat_found)
 8002fd6:	7f7b      	ldrb	r3, [r7, #29]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d038      	beq.n	800304e <get_gyro_cross_sense+0xfe>
        {
            /* Get the feature output configuration for gyroscope cross sensitivity
             * feature */
            rslt = bmi2_get_feat_config(cross_sense_out_config.page, feat_config, dev);
 8002fdc:	7a7b      	ldrb	r3, [r7, #9]
 8002fde:	f107 010c 	add.w	r1, r7, #12
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fe fd81 	bl	8001aec <bmi2_get_feat_config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	77fb      	strb	r3, [r7, #31]
            if (rslt == BMI2_OK)
 8002fee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d12d      	bne.n	8003052 <get_gyro_cross_sense+0x102>
            {
                /* Define the offset in bytes for gyroscope cross sensitivity output */
                idx = cross_sense_out_config.start_addr;
 8002ff6:	7abb      	ldrb	r3, [r7, #10]
 8002ff8:	77bb      	strb	r3, [r7, #30]

                /* discard the MSB as GYR_CAS is of only 7 bit */
                feat_config[idx] = feat_config[idx] & BMI2_GYRO_CROSS_AXES_SENSE_MASK;
 8002ffa:	7fbb      	ldrb	r3, [r7, #30]
 8002ffc:	3320      	adds	r3, #32
 8002ffe:	443b      	add	r3, r7
 8003000:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8003004:	7fbb      	ldrb	r3, [r7, #30]
 8003006:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	3320      	adds	r3, #32
 800300e:	443b      	add	r3, r7
 8003010:	f803 2c14 	strb.w	r2, [r3, #-20]

                /* Get the gyroscope cross sensitivity coefficient */
                if (feat_config[idx] & BMI2_GYRO_CROSS_AXES_SENSE_SIGN_BIT_MASK)
 8003014:	7fbb      	ldrb	r3, [r7, #30]
 8003016:	3320      	adds	r3, #32
 8003018:	443b      	add	r3, r7
 800301a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800301e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <get_gyro_cross_sense+0xec>
                {
                    *cross_sense = (int16_t)(((int16_t)feat_config[idx]) - 128);
 8003026:	7fbb      	ldrb	r3, [r7, #30]
 8003028:	3320      	adds	r3, #32
 800302a:	443b      	add	r3, r7
 800302c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003030:	3b80      	subs	r3, #128	@ 0x80
 8003032:	b29b      	uxth	r3, r3
 8003034:	b21a      	sxth	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	801a      	strh	r2, [r3, #0]
 800303a:	e00a      	b.n	8003052 <get_gyro_cross_sense+0x102>
                }
                else
                {
                    *cross_sense = (int16_t)(feat_config[idx]);
 800303c:	7fbb      	ldrb	r3, [r7, #30]
 800303e:	3320      	adds	r3, #32
 8003040:	443b      	add	r3, r7
 8003042:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003046:	b21a      	sxth	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	801a      	strh	r2, [r3, #0]
 800304c:	e001      	b.n	8003052 <get_gyro_cross_sense+0x102>
                }
            }
        }
        else
        {
            rslt = BMI2_E_INVALID_SENSOR;
 800304e:	23f8      	movs	r3, #248	@ 0xf8
 8003050:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8003052:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <select_sensor>:
/*!
 * @brief This internal API selects the sensor/features to be enabled or
 * disabled.
 */
static int8_t select_sensor(const uint8_t *sens_list, uint8_t n_sens, uint64_t *sensor_sel)
{
 800305e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003062:	b089      	sub	sp, #36	@ 0x24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6178      	str	r0, [r7, #20]
 8003068:	460b      	mov	r3, r1
 800306a:	60fa      	str	r2, [r7, #12]
 800306c:	74fb      	strb	r3, [r7, #19]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	77fb      	strb	r3, [r7, #31]

    /* Variable to define loop */
    uint8_t count;

    for (count = 0; count < n_sens; count++)
 8003072:	2300      	movs	r3, #0
 8003074:	77bb      	strb	r3, [r7, #30]
 8003076:	e041      	b.n	80030fc <select_sensor+0x9e>
    {
        switch (sens_list[count])
 8003078:	7fbb      	ldrb	r3, [r7, #30]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4413      	add	r3, r2
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b20      	cmp	r3, #32
 8003082:	d028      	beq.n	80030d6 <select_sensor+0x78>
 8003084:	2b20      	cmp	r3, #32
 8003086:	dc33      	bgt.n	80030f0 <select_sensor+0x92>
 8003088:	2b02      	cmp	r3, #2
 800308a:	d01a      	beq.n	80030c2 <select_sensor+0x64>
 800308c:	2b02      	cmp	r3, #2
 800308e:	dc2f      	bgt.n	80030f0 <select_sensor+0x92>
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <select_sensor+0x3c>
 8003094:	2b01      	cmp	r3, #1
 8003096:	d00a      	beq.n	80030ae <select_sensor+0x50>
 8003098:	e02a      	b.n	80030f0 <select_sensor+0x92>
        {
            case BMI2_ACCEL:
                *sensor_sel |= BMI2_ACCEL_SENS_SEL;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	f042 0401 	orr.w	r4, r2, #1
 80030a4:	461d      	mov	r5, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	e9c3 4500 	strd	r4, r5, [r3]
                break;
 80030ac:	e023      	b.n	80030f6 <select_sensor+0x98>
            case BMI2_GYRO:
                *sensor_sel |= BMI2_GYRO_SENS_SEL;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b4:	f042 0802 	orr.w	r8, r2, #2
 80030b8:	4699      	mov	r9, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	e9c3 8900 	strd	r8, r9, [r3]
                break;
 80030c0:	e019      	b.n	80030f6 <select_sensor+0x98>
            case BMI2_AUX:
                *sensor_sel |= BMI2_AUX_SENS_SEL;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	f042 0a04 	orr.w	sl, r2, #4
 80030cc:	469b      	mov	fp, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	e9c3 ab00 	strd	sl, fp, [r3]
                break;
 80030d4:	e00f      	b.n	80030f6 <select_sensor+0x98>
            case BMI2_TEMP:
                *sensor_sel |= BMI2_TEMP_SENS_SEL;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	603a      	str	r2, [r7, #0]
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80030ea:	e9c3 1200 	strd	r1, r2, [r3]
                break;
 80030ee:	e002      	b.n	80030f6 <select_sensor+0x98>
            default:
                rslt = BMI2_E_INVALID_SENSOR;
 80030f0:	23f8      	movs	r3, #248	@ 0xf8
 80030f2:	77fb      	strb	r3, [r7, #31]
                break;
 80030f4:	bf00      	nop
    for (count = 0; count < n_sens; count++)
 80030f6:	7fbb      	ldrb	r3, [r7, #30]
 80030f8:	3301      	adds	r3, #1
 80030fa:	77bb      	strb	r3, [r7, #30]
 80030fc:	7fba      	ldrb	r2, [r7, #30]
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	429a      	cmp	r2, r3
 8003102:	d3b9      	bcc.n	8003078 <select_sensor+0x1a>
        }
    }

    return rslt;
 8003104:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3724      	adds	r7, #36	@ 0x24
 800310c:	46bd      	mov	sp, r7
 800310e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003112:	4770      	bx	lr

08003114 <sensor_enable>:

/*!
 * @brief This internal API enables the selected sensor/features.
 */
static int8_t sensor_enable(uint64_t sensor_sel, struct bmi2_dev *dev)
{
 8003114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003118:	b08a      	sub	sp, #40	@ 0x28
 800311a:	af00      	add	r7, sp, #0
 800311c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003120:	617a      	str	r2, [r7, #20]
    /* Variable to define error */
    int8_t rslt;

    /* Variable to store register values */
    uint8_t reg_data = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    rslt = bmi2_get_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 8003128:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2201      	movs	r2, #1
 8003130:	207d      	movs	r0, #125	@ 0x7d
 8003132:	f7fd ff39 	bl	8000fa8 <bmi2_get_regs>
 8003136:	4603      	mov	r3, r0
 8003138:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (rslt == BMI2_OK)
 800313c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003140:	2b00      	cmp	r3, #0
 8003142:	d158      	bne.n	80031f6 <sensor_enable+0xe2>
    {
        /* Enable accelerometer */
        if (sensor_sel & BMI2_ACCEL_SENS_SEL)
 8003144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003148:	f002 0301 	and.w	r3, r2, #1
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003156:	460b      	mov	r3, r1
 8003158:	4313      	orrs	r3, r2
 800315a:	d006      	beq.n	800316a <sensor_enable+0x56>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_ACC_EN, BMI2_ENABLE);
 800315c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable gyroscope */
        if (sensor_sel & BMI2_GYRO_SENS_SEL)
 800316a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800316e:	f002 0302 	and.w	r3, r2, #2
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	2300      	movs	r3, #0
 8003176:	607b      	str	r3, [r7, #4]
 8003178:	e9d7 1200 	ldrd	r1, r2, [r7]
 800317c:	460b      	mov	r3, r1
 800317e:	4313      	orrs	r3, r2
 8003180:	d006      	beq.n	8003190 <sensor_enable+0x7c>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_GYR_EN, BMI2_ENABLE);
 8003182:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003186:	f043 0302 	orr.w	r3, r3, #2
 800318a:	b2db      	uxtb	r3, r3
 800318c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable auxiliary sensor */
        if (sensor_sel & BMI2_AUX_SENS_SEL)
 8003190:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003194:	f002 0a04 	and.w	sl, r2, #4
 8003198:	f04f 0b00 	mov.w	fp, #0
 800319c:	ea5a 030b 	orrs.w	r3, sl, fp
 80031a0:	d006      	beq.n	80031b0 <sensor_enable+0x9c>
        {
            reg_data = BMI2_SET_BIT_POS0(reg_data, BMI2_AUX_EN, BMI2_ENABLE);
 80031a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable temperature sensor */
        if (sensor_sel & BMI2_TEMP_SENS_SEL)
 80031b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031b4:	f04f 0800 	mov.w	r8, #0
 80031b8:	f003 0901 	and.w	r9, r3, #1
 80031bc:	ea58 0309 	orrs.w	r3, r8, r9
 80031c0:	d006      	beq.n	80031d0 <sensor_enable+0xbc>
        {
            reg_data = BMI2_SET_BITS(reg_data, BMI2_TEMP_EN, BMI2_ENABLE);
 80031c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031c6:	f043 0308 	orr.w	r3, r3, #8
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }

        /* Enable the sensors that are set in the power control register */
        if (sensor_sel & BMI2_MAIN_SENSORS)
 80031d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031d4:	f002 0407 	and.w	r4, r2, #7
 80031d8:	f003 0501 	and.w	r5, r3, #1
 80031dc:	ea54 0305 	orrs.w	r3, r4, r5
 80031e0:	d009      	beq.n	80031f6 <sensor_enable+0xe2>
        {
            rslt = bmi2_set_regs(BMI2_PWR_CTRL_ADDR, &reg_data, 1, dev);
 80031e2:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2201      	movs	r2, #1
 80031ea:	207d      	movs	r0, #125	@ 0x7d
 80031ec:	f7fd ff4f 	bl	800108e <bmi2_set_regs>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return rslt;
 80031f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3728      	adds	r7, #40	@ 0x28
 80031fe:	46bd      	mov	sp, r7
 8003200:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003204 <bmi270_init>:
 *  3) Writes the configuration file.
 *  4) Updates the feature offset parameters in the device structure.
 *  5) Updates the maximum number of pages, in the device structure.
 */
int8_t bmi270_init(struct bmi2_dev *dev)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f8e5 	bl	80033dc <null_ptr_check>
 8003212:	4603      	mov	r3, r0
 8003214:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI2_OK)
 8003216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d141      	bne.n	80032a2 <bmi270_init+0x9e>
    {
        /* Assign chip id of BMI270 */
        dev->chip_id = BMI270_CHIP_ID;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2224      	movs	r2, #36	@ 0x24
 8003222:	701a      	strb	r2, [r3, #0]

        /* get the size of config array */
        dev->config_size = sizeof(bmi270_config_file);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800322a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

        /* Enable the variant specific features if any */
        dev->variant_feature = BMI2_GYRO_CROSS_SENS_ENABLE | BMI2_CRT_RTOSK_ENABLE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2203      	movs	r2, #3
 8003232:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI2_SPI_INTF)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	7a5b      	ldrb	r3, [r3, #9]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d103      	bne.n	8003246 <bmi270_init+0x42>
        {
            dev->dummy_byte = 1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	72da      	strb	r2, [r3, #11]
 8003244:	e002      	b.n	800324c <bmi270_init+0x48>
        }
        else
        {
            dev->dummy_byte = 0;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	72da      	strb	r2, [r3, #11]
        }

        /* If configuration file pointer is not assigned any address */
        if (!dev->config_file_ptr)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <bmi270_init+0x56>
        {
            /* Give the address of the configuration file array to
             * the device pointer
             */
            dev->config_file_ptr = bmi270_config_file;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a16      	ldr	r2, [pc, #88]	@ (80032b0 <bmi270_init+0xac>)
 8003258:	615a      	str	r2, [r3, #20]
        }

        /* Initialize BMI2 sensor */
        rslt = bmi2_sec_init(dev);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fd fe44 	bl	8000ee8 <bmi2_sec_init>
 8003260:	4603      	mov	r3, r0
 8003262:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI2_OK)
 8003264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d11a      	bne.n	80032a2 <bmi270_init+0x9e>
        {
            /* Assign the offsets of the feature input
             * configuration to the device structure
             */
            dev->feat_config = bmi270_feat_in;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a11      	ldr	r2, [pc, #68]	@ (80032b4 <bmi270_init+0xb0>)
 8003270:	621a      	str	r2, [r3, #32]

            /* Assign the offsets of the feature output to
             * the device structure
             */
            dev->feat_output = bmi270_feat_out;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a10      	ldr	r2, [pc, #64]	@ (80032b8 <bmi270_init+0xb4>)
 8003276:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Assign the maximum number of pages to the
             * device structure
             */
            dev->page_max = BMI270_MAX_PAGE_NUM;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2208      	movs	r2, #8
 800327c:	761a      	strb	r2, [r3, #24]

            /* Assign maximum number of input sensors/
             * features to device structure
             */
            dev->input_sens = BMI270_MAX_FEAT_IN;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2211      	movs	r2, #17
 8003282:	765a      	strb	r2, [r3, #25]

            /* Assign maximum number of output sensors/
             * features to device structure
             */
            dev->out_sens = BMI270_MAX_FEAT_OUT;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2207      	movs	r2, #7
 8003288:	769a      	strb	r2, [r3, #26]

            /* Assign the offsets of the feature interrupt
             * to the device structure
             */
            dev->map_int = bmi270_map_int;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a0b      	ldr	r2, [pc, #44]	@ (80032bc <bmi270_init+0xb8>)
 800328e:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Assign maximum number of feature interrupts
             * to device structure
             */
            dev->sens_int_map = BMI270_MAX_INT_MAP;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2208      	movs	r2, #8
 8003294:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            /* Get the gyroscope cross axis sensitivity */
            rslt = bmi2_get_gyro_cross_sense(dev);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7fe fbc7 	bl	8001a2c <bmi2_get_gyro_cross_sense>
 800329e:	4603      	mov	r3, r0
 80032a0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80032a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	0801acb0 	.word	0x0801acb0
 80032b4:	0801ccb0 	.word	0x0801ccb0
 80032b8:	0801cce4 	.word	0x0801cce4
 80032bc:	20000008 	.word	0x20000008

080032c0 <bmi270_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi270_set_sensor_config(struct bmi2_sens_config *sens_cfg, uint8_t n_sens, struct bmi2_dev *dev)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	460b      	mov	r3, r1
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Variable to get the status of advance power save */
    uint8_t aps_stat = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	757b      	strb	r3, [r7, #21]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f882 	bl	80033dc <null_ptr_check>
 80032d8:	4603      	mov	r3, r0
 80032da:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMI2_OK) && (sens_cfg != NULL))
 80032dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d171      	bne.n	80033c8 <bmi270_set_sensor_config+0x108>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d06e      	beq.n	80033c8 <bmi270_set_sensor_config+0x108>
    {
        /* Get status of advance power save mode */
        aps_stat = dev->aps_status;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80032f0:	757b      	strb	r3, [r7, #21]

        for (loop = 0; loop < n_sens; loop++)
 80032f2:	2300      	movs	r3, #0
 80032f4:	75bb      	strb	r3, [r7, #22]
 80032f6:	e053      	b.n	80033a0 <bmi270_set_sensor_config+0xe0>
        {
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 80032f8:	7dba      	ldrb	r2, [r7, #22]
 80032fa:	4613      	mov	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	461a      	mov	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d020      	beq.n	8003350 <bmi270_set_sensor_config+0x90>
 800330e:	7dba      	ldrb	r2, [r7, #22]
 8003310:	4613      	mov	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	461a      	mov	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4413      	add	r3, r2
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d015      	beq.n	8003350 <bmi270_set_sensor_config+0x90>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 8003324:	7dba      	ldrb	r2, [r7, #22]
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	461a      	mov	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4413      	add	r3, r2
 8003334:	781b      	ldrb	r3, [r3, #0]
            if ((sens_cfg[loop].type == BMI2_ACCEL) || (sens_cfg[loop].type == BMI2_GYRO) ||
 8003336:	2b02      	cmp	r3, #2
 8003338:	d00a      	beq.n	8003350 <bmi270_set_sensor_config+0x90>
                (sens_cfg[loop].type == BMI2_AUX) || (sens_cfg[loop].type == BMI2_GYRO_GAIN_UPDATE))
 800333a:	7dba      	ldrb	r2, [r7, #22]
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	461a      	mov	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4413      	add	r3, r2
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b09      	cmp	r3, #9
 800334e:	d10f      	bne.n	8003370 <bmi270_set_sensor_config+0xb0>
            {
                rslt = bmi2_set_sensor_config(&sens_cfg[loop], 1, dev);
 8003350:	7dba      	ldrb	r2, [r7, #22]
 8003352:	4613      	mov	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	2101      	movs	r1, #1
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe f83d 	bl	80013e4 <bmi2_set_sensor_config>
 800336a:	4603      	mov	r3, r0
 800336c:	75fb      	strb	r3, [r7, #23]
 800336e:	e014      	b.n	800339a <bmi270_set_sensor_config+0xda>
            else
            {
                /* Disable Advance power save if enabled for auxiliary
                 * and feature configurations
                 */
                if (aps_stat == BMI2_ENABLE)
 8003370:	7d7b      	ldrb	r3, [r7, #21]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d105      	bne.n	8003382 <bmi270_set_sensor_config+0xc2>
                {
                    /* Disable advance power save if
                     * enabled
                     */
                    rslt = bmi2_set_adv_power_save(BMI2_DISABLE, dev);
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	2000      	movs	r0, #0
 800337a:	f7fd ff5c 	bl	8001236 <bmi2_set_adv_power_save>
 800337e:	4603      	mov	r3, r0
 8003380:	75fb      	strb	r3, [r7, #23]
                }

                if (rslt == BMI2_OK)
 8003382:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10f      	bne.n	80033aa <bmi270_set_sensor_config+0xea>
                {
                    rslt = set_feat_config(sens_cfg, loop, dev);
 800338a:	7dbb      	ldrb	r3, [r7, #22]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	4619      	mov	r1, r3
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fdf7 	bl	8003f84 <set_feat_config>
 8003396:	4603      	mov	r3, r0
 8003398:	75fb      	strb	r3, [r7, #23]
        for (loop = 0; loop < n_sens; loop++)
 800339a:	7dbb      	ldrb	r3, [r7, #22]
 800339c:	3301      	adds	r3, #1
 800339e:	75bb      	strb	r3, [r7, #22]
 80033a0:	7dba      	ldrb	r2, [r7, #22]
 80033a2:	7afb      	ldrb	r3, [r7, #11]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d3a7      	bcc.n	80032f8 <bmi270_set_sensor_config+0x38>
 80033a8:	e000      	b.n	80033ac <bmi270_set_sensor_config+0xec>
                }
                /* Return error if any of the set configurations fail */
                else
                {
                    break;
 80033aa:	bf00      	nop
        }

        /* Enable Advance power save if disabled while configuring and
         * not when already disabled
         */
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80033ac:	7d7b      	ldrb	r3, [r7, #21]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d10d      	bne.n	80033ce <bmi270_set_sensor_config+0x10e>
 80033b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <bmi270_set_sensor_config+0x10e>
        {
            rslt = bmi2_set_adv_power_save(BMI2_ENABLE, dev);
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	2001      	movs	r0, #1
 80033be:	f7fd ff3a 	bl	8001236 <bmi2_set_adv_power_save>
 80033c2:	4603      	mov	r3, r0
 80033c4:	75fb      	strb	r3, [r7, #23]
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80033c6:	e002      	b.n	80033ce <bmi270_set_sensor_config+0x10e>
        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80033c8:	23ff      	movs	r3, #255	@ 0xff
 80033ca:	75fb      	strb	r3, [r7, #23]
 80033cc:	e000      	b.n	80033d0 <bmi270_set_sensor_config+0x110>
        if ((aps_stat == BMI2_ENABLE) && (rslt == BMI2_OK))
 80033ce:	bf00      	nop
    }

    return rslt;
 80033d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi2_dev *dev)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00b      	beq.n	8003406 <null_ptr_check+0x2a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <null_ptr_check+0x2a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <null_ptr_check+0x2a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BMI2_E_NULL_PTR;
 8003406:	23ff      	movs	r3, #255	@ 0xff
 8003408:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800340a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <set_any_motion_config>:
/*!
 * @brief This internal API sets any-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t set_any_motion_config(const struct bmi2_any_motion_config *config, struct bmi2_dev *dev)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b08a      	sub	sp, #40	@ 0x28
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	f107 0310 	add.w	r3, r7, #16
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define count */
    uint8_t index = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for any motion */
    struct bmi2_feature_config any_mot_config = { 0, 0, 0 };
 8003440:	2300      	movs	r3, #0
 8003442:	723b      	strb	r3, [r7, #8]
 8003444:	2300      	movs	r3, #0
 8003446:	727b      	strb	r3, [r7, #9]
 8003448:	2300      	movs	r3, #0
 800344a:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 800344c:	f107 030c 	add.w	r3, r7, #12
 8003450:	623b      	str	r3, [r7, #32]

    /* Search for any-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&any_mot_config, BMI2_ANY_MOTION, dev);
 8003452:	f107 0308 	add.w	r3, r7, #8
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	2104      	movs	r1, #4
 800345a:	4618      	mov	r0, r3
 800345c:	f7fe fbd8 	bl	8001c10 <bmi2_extract_input_feat_config>
 8003460:	4603      	mov	r3, r0
 8003462:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8003464:	7ffb      	ldrb	r3, [r7, #31]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80d5 	beq.w	8003616 <set_any_motion_config+0x1fc>
    {
        /* Get the configuration from the page where any-motion feature resides */
        rslt = bmi2_get_feat_config(any_mot_config.page, feat_config, dev);
 800346c:	7a7b      	ldrb	r3, [r7, #9]
 800346e:	f107 010c 	add.w	r1, r7, #12
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe fb39 	bl	8001aec <bmi2_get_feat_config>
 800347a:	4603      	mov	r3, r0
 800347c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8003480:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003484:	2b00      	cmp	r3, #0
 8003486:	f040 80c9 	bne.w	800361c <set_any_motion_config+0x202>
        {
            /* Define the offset in bytes for any-motion select */
            idx = any_mot_config.start_addr;
 800348a:	7abb      	ldrb	r3, [r7, #10]
 800348c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8003490:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003494:	085b      	lsrs	r3, r3, #1
 8003496:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set duration */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_DUR, config->duration);
 800349a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	6a3a      	ldr	r2, [r7, #32]
 80034a2:	4413      	add	r3, r2
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	b21b      	sxth	r3, r3
 80034a8:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80034ac:	f023 031f 	bic.w	r3, r3, #31
 80034b0:	b21a      	sxth	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	b21b      	sxth	r3, r3
 80034b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034bc:	b21b      	sxth	r3, r3
 80034be:	4313      	orrs	r3, r2
 80034c0:	b219      	sxth	r1, r3
 80034c2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	6a3a      	ldr	r2, [r7, #32]
 80034ca:	4413      	add	r3, r2
 80034cc:	b28a      	uxth	r2, r1
 80034ce:	801a      	strh	r2, [r3, #0]

            /* Set x-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_X_SEL, config->select_x);
 80034d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	6a3a      	ldr	r2, [r7, #32]
 80034d8:	4413      	add	r3, r2
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b21b      	sxth	r3, r3
 80034de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034e2:	b21a      	sxth	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	889b      	ldrh	r3, [r3, #4]
 80034e8:	035b      	lsls	r3, r3, #13
 80034ea:	b21b      	sxth	r3, r3
 80034ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034f0:	b21b      	sxth	r3, r3
 80034f2:	4313      	orrs	r3, r2
 80034f4:	b219      	sxth	r1, r3
 80034f6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	6a3a      	ldr	r2, [r7, #32]
 80034fe:	4413      	add	r3, r2
 8003500:	b28a      	uxth	r2, r1
 8003502:	801a      	strh	r2, [r3, #0]

            /* Set y-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Y_SEL, config->select_y);
 8003504:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	6a3a      	ldr	r2, [r7, #32]
 800350c:	4413      	add	r3, r2
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b21b      	sxth	r3, r3
 8003512:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003516:	b21a      	sxth	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	88db      	ldrh	r3, [r3, #6]
 800351c:	039b      	lsls	r3, r3, #14
 800351e:	b21b      	sxth	r3, r3
 8003520:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003524:	b21b      	sxth	r3, r3
 8003526:	4313      	orrs	r3, r2
 8003528:	b219      	sxth	r1, r3
 800352a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	6a3a      	ldr	r2, [r7, #32]
 8003532:	4413      	add	r3, r2
 8003534:	b28a      	uxth	r2, r1
 8003536:	801a      	strh	r2, [r3, #0]

            /* Set z-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Z_SEL, config->select_z);
 8003538:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	6a3a      	ldr	r2, [r7, #32]
 8003540:	4413      	add	r3, r2
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b21b      	sxth	r3, r3
 8003546:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800354a:	b21a      	sxth	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	891b      	ldrh	r3, [r3, #8]
 8003550:	03db      	lsls	r3, r3, #15
 8003552:	b21b      	sxth	r3, r3
 8003554:	4313      	orrs	r3, r2
 8003556:	b219      	sxth	r1, r3
 8003558:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	6a3a      	ldr	r2, [r7, #32]
 8003560:	4413      	add	r3, r2
 8003562:	b28a      	uxth	r2, r1
 8003564:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set threshold and output configuration */
            idx++;
 8003566:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800356a:	3301      	adds	r3, #1
 800356c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set threshold */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_THRES, config->threshold);
 8003570:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	6a3a      	ldr	r2, [r7, #32]
 8003578:	4413      	add	r3, r2
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	b21b      	sxth	r3, r3
 800357e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003582:	f023 0307 	bic.w	r3, r3, #7
 8003586:	b21a      	sxth	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	885b      	ldrh	r3, [r3, #2]
 800358c:	b21b      	sxth	r3, r3
 800358e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003592:	b21b      	sxth	r3, r3
 8003594:	4313      	orrs	r3, r2
 8003596:	b219      	sxth	r1, r3
 8003598:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	6a3a      	ldr	r2, [r7, #32]
 80035a0:	4413      	add	r3, r2
 80035a2:	b28a      	uxth	r2, r1
 80035a4:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 80035a6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035aa:	3301      	adds	r3, #1
 80035ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - any_mot_config.start_addr;
 80035b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	7abb      	ldrb	r3, [r7, #10]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 80035c0:	2300      	movs	r3, #0
 80035c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80035c6:	e015      	b.n	80035f4 <set_any_motion_config+0x1da>
            {
                feat_config[any_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + any_mot_config.start_addr + index);
 80035c8:	7abb      	ldrb	r3, [r7, #10]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80035d0:	4413      	add	r3, r2
 80035d2:	6a3a      	ldr	r2, [r7, #32]
 80035d4:	441a      	add	r2, r3
                feat_config[any_mot_config.start_addr +
 80035d6:	7abb      	ldrb	r3, [r7, #10]
 80035d8:	4619      	mov	r1, r3
 80035da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80035de:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + any_mot_config.start_addr + index);
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	3328      	adds	r3, #40	@ 0x28
 80035e4:	443b      	add	r3, r7
 80035e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 80035ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80035ee:	3301      	adds	r3, #1
 80035f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80035f4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80035f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d3e3      	bcc.n	80035c8 <set_any_motion_config+0x1ae>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003600:	f107 010c 	add.w	r1, r7, #12
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2210      	movs	r2, #16
 8003608:	2030      	movs	r0, #48	@ 0x30
 800360a:	f7fd fd40 	bl	800108e <bmi2_set_regs>
 800360e:	4603      	mov	r3, r0
 8003610:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003614:	e002      	b.n	800361c <set_any_motion_config+0x202>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003616:	23f8      	movs	r3, #248	@ 0xf8
 8003618:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800361c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003620:	4618      	mov	r0, r3
 8003622:	3728      	adds	r7, #40	@ 0x28
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <set_no_motion_config>:
/*!
 * @brief This internal API sets no-motion configurations like axes select,
 * duration, threshold and output-configuration.
 */
static int8_t set_no_motion_config(const struct bmi2_no_motion_config *config, struct bmi2_dev *dev)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	@ 0x28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	f107 0310 	add.w	r3, r7, #16
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	609a      	str	r2, [r3, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define count */
    uint8_t index = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for no-motion */
    struct bmi2_feature_config no_mot_config = { 0, 0, 0 };
 800364e:	2300      	movs	r3, #0
 8003650:	723b      	strb	r3, [r7, #8]
 8003652:	2300      	movs	r3, #0
 8003654:	727b      	strb	r3, [r7, #9]
 8003656:	2300      	movs	r3, #0
 8003658:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 800365a:	f107 030c 	add.w	r3, r7, #12
 800365e:	623b      	str	r3, [r7, #32]

    /* Search for no-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&no_mot_config, BMI2_NO_MOTION, dev);
 8003660:	f107 0308 	add.w	r3, r7, #8
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	2105      	movs	r1, #5
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe fad1 	bl	8001c10 <bmi2_extract_input_feat_config>
 800366e:	4603      	mov	r3, r0
 8003670:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8003672:	7ffb      	ldrb	r3, [r7, #31]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80d5 	beq.w	8003824 <set_no_motion_config+0x1fc>
    {
        /* Get the configuration from the page where no-motion feature resides */
        rslt = bmi2_get_feat_config(no_mot_config.page, feat_config, dev);
 800367a:	7a7b      	ldrb	r3, [r7, #9]
 800367c:	f107 010c 	add.w	r1, r7, #12
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe fa32 	bl	8001aec <bmi2_get_feat_config>
 8003688:	4603      	mov	r3, r0
 800368a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 800368e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003692:	2b00      	cmp	r3, #0
 8003694:	f040 80c9 	bne.w	800382a <set_no_motion_config+0x202>
        {
            /* Define the offset in bytes for no-motion select */
            idx = no_mot_config.start_addr;
 8003698:	7abb      	ldrb	r3, [r7, #10]
 800369a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 800369e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set duration */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_DUR, config->duration);
 80036a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	6a3a      	ldr	r2, [r7, #32]
 80036b0:	4413      	add	r3, r2
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b21b      	sxth	r3, r3
 80036b6:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80036ba:	f023 031f 	bic.w	r3, r3, #31
 80036be:	b21a      	sxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	b21b      	sxth	r3, r3
 80036c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036ca:	b21b      	sxth	r3, r3
 80036cc:	4313      	orrs	r3, r2
 80036ce:	b219      	sxth	r1, r3
 80036d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	6a3a      	ldr	r2, [r7, #32]
 80036d8:	4413      	add	r3, r2
 80036da:	b28a      	uxth	r2, r1
 80036dc:	801a      	strh	r2, [r3, #0]

            /* Set x-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_X_SEL, config->select_x);
 80036de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	6a3a      	ldr	r2, [r7, #32]
 80036e6:	4413      	add	r3, r2
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b21b      	sxth	r3, r3
 80036ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036f0:	b21a      	sxth	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	889b      	ldrh	r3, [r3, #4]
 80036f6:	035b      	lsls	r3, r3, #13
 80036f8:	b21b      	sxth	r3, r3
 80036fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036fe:	b21b      	sxth	r3, r3
 8003700:	4313      	orrs	r3, r2
 8003702:	b219      	sxth	r1, r3
 8003704:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	6a3a      	ldr	r2, [r7, #32]
 800370c:	4413      	add	r3, r2
 800370e:	b28a      	uxth	r2, r1
 8003710:	801a      	strh	r2, [r3, #0]

            /* Set y-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Y_SEL, config->select_y);
 8003712:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	6a3a      	ldr	r2, [r7, #32]
 800371a:	4413      	add	r3, r2
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	b21b      	sxth	r3, r3
 8003720:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003724:	b21a      	sxth	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	88db      	ldrh	r3, [r3, #6]
 800372a:	039b      	lsls	r3, r3, #14
 800372c:	b21b      	sxth	r3, r3
 800372e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003732:	b21b      	sxth	r3, r3
 8003734:	4313      	orrs	r3, r2
 8003736:	b219      	sxth	r1, r3
 8003738:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	6a3a      	ldr	r2, [r7, #32]
 8003740:	4413      	add	r3, r2
 8003742:	b28a      	uxth	r2, r1
 8003744:	801a      	strh	r2, [r3, #0]

            /* Set z-select */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_ANY_NO_MOT_Z_SEL, config->select_z);
 8003746:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	6a3a      	ldr	r2, [r7, #32]
 800374e:	4413      	add	r3, r2
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	b21b      	sxth	r3, r3
 8003754:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003758:	b21a      	sxth	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	891b      	ldrh	r3, [r3, #8]
 800375e:	03db      	lsls	r3, r3, #15
 8003760:	b21b      	sxth	r3, r3
 8003762:	4313      	orrs	r3, r2
 8003764:	b219      	sxth	r1, r3
 8003766:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	6a3a      	ldr	r2, [r7, #32]
 800376e:	4413      	add	r3, r2
 8003770:	b28a      	uxth	r2, r1
 8003772:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word to set threshold and output configuration */
            idx++;
 8003774:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003778:	3301      	adds	r3, #1
 800377a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set threshold */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_ANY_NO_MOT_THRES, config->threshold);
 800377e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	6a3a      	ldr	r2, [r7, #32]
 8003786:	4413      	add	r3, r2
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b21b      	sxth	r3, r3
 800378c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003790:	f023 0307 	bic.w	r3, r3, #7
 8003794:	b21a      	sxth	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	885b      	ldrh	r3, [r3, #2]
 800379a:	b21b      	sxth	r3, r3
 800379c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037a0:	b21b      	sxth	r3, r3
 80037a2:	4313      	orrs	r3, r2
 80037a4:	b219      	sxth	r1, r3
 80037a6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	6a3a      	ldr	r2, [r7, #32]
 80037ae:	4413      	add	r3, r2
 80037b0:	b28a      	uxth	r2, r1
 80037b2:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 80037b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80037b8:	3301      	adds	r3, #1
 80037ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - no_mot_config.start_addr;
 80037be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	7abb      	ldrb	r3, [r7, #10]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 80037ce:	2300      	movs	r3, #0
 80037d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80037d4:	e015      	b.n	8003802 <set_no_motion_config+0x1da>
            {
                feat_config[no_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + no_mot_config.start_addr + index);
 80037d6:	7abb      	ldrb	r3, [r7, #10]
 80037d8:	461a      	mov	r2, r3
 80037da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80037de:	4413      	add	r3, r2
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	441a      	add	r2, r3
                feat_config[no_mot_config.start_addr +
 80037e4:	7abb      	ldrb	r3, [r7, #10]
 80037e6:	4619      	mov	r1, r3
 80037e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80037ec:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + no_mot_config.start_addr + index);
 80037ee:	7812      	ldrb	r2, [r2, #0]
 80037f0:	3328      	adds	r3, #40	@ 0x28
 80037f2:	443b      	add	r3, r7
 80037f4:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 80037f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80037fc:	3301      	adds	r3, #1
 80037fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003802:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003806:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800380a:	429a      	cmp	r2, r3
 800380c:	d3e3      	bcc.n	80037d6 <set_no_motion_config+0x1ae>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 800380e:	f107 010c 	add.w	r1, r7, #12
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2210      	movs	r2, #16
 8003816:	2030      	movs	r0, #48	@ 0x30
 8003818:	f7fd fc39 	bl	800108e <bmi2_set_regs>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003822:	e002      	b.n	800382a <set_no_motion_config+0x202>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003824:	23f8      	movs	r3, #248	@ 0xf8
 8003826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800382a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800382e:	4618      	mov	r0, r3
 8003830:	3728      	adds	r7, #40	@ 0x28
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <set_sig_motion_config>:
/*!
 * @brief This internal API sets sig-motion configurations like block-size,
 * output-configuration and other parameters.
 */
static int8_t set_sig_motion_config(const struct bmi2_sig_motion_config *config, struct bmi2_dev *dev)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b08a      	sub	sp, #40	@ 0x28
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	f107 0310 	add.w	r3, r7, #16
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	609a      	str	r2, [r3, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for sig-motion */
    struct bmi2_feature_config sig_mot_config = { 0, 0, 0 };
 800385c:	2300      	movs	r3, #0
 800385e:	723b      	strb	r3, [r7, #8]
 8003860:	2300      	movs	r3, #0
 8003862:	727b      	strb	r3, [r7, #9]
 8003864:	2300      	movs	r3, #0
 8003866:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8003868:	f107 030c 	add.w	r3, r7, #12
 800386c:	623b      	str	r3, [r7, #32]

    /* Search for sig-motion feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&sig_mot_config, BMI2_SIG_MOTION, dev);
 800386e:	f107 0308 	add.w	r3, r7, #8
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	2103      	movs	r1, #3
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe f9ca 	bl	8001c10 <bmi2_extract_input_feat_config>
 800387c:	4603      	mov	r3, r0
 800387e:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8003880:	7ffb      	ldrb	r3, [r7, #31]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d055      	beq.n	8003932 <set_sig_motion_config+0xfc>
    {
        /* Get the configuration from the page where sig-motion feature resides */
        rslt = bmi2_get_feat_config(sig_mot_config.page, feat_config, dev);
 8003886:	7a7b      	ldrb	r3, [r7, #9]
 8003888:	f107 010c 	add.w	r1, r7, #12
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe f92c 	bl	8001aec <bmi2_get_feat_config>
 8003894:	4603      	mov	r3, r0
 8003896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 800389a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d14a      	bne.n	8003938 <set_sig_motion_config+0x102>
        {
            /* Define the offset in bytes for sig-motion select */
            idx = sig_mot_config.start_addr;
 80038a2:	7abb      	ldrb	r3, [r7, #10]
 80038a4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 80038a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set parameter 1 */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_SIG_MOT_PARAM_1, config->block_size);
 80038b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	6a3a      	ldr	r2, [r7, #32]
 80038ba:	4413      	add	r3, r2
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	8812      	ldrh	r2, [r2, #0]
 80038c0:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 80038c2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80038c6:	3301      	adds	r3, #1
 80038c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - sig_mot_config.start_addr;
 80038cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	7abb      	ldrb	r3, [r7, #10]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 80038dc:	2300      	movs	r3, #0
 80038de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80038e2:	e015      	b.n	8003910 <set_sig_motion_config+0xda>
            {
                feat_config[sig_mot_config.start_addr +
                            index] = *((uint8_t *) data_p + sig_mot_config.start_addr + index);
 80038e4:	7abb      	ldrb	r3, [r7, #10]
 80038e6:	461a      	mov	r2, r3
 80038e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80038ec:	4413      	add	r3, r2
 80038ee:	6a3a      	ldr	r2, [r7, #32]
 80038f0:	441a      	add	r2, r3
                feat_config[sig_mot_config.start_addr +
 80038f2:	7abb      	ldrb	r3, [r7, #10]
 80038f4:	4619      	mov	r1, r3
 80038f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80038fa:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + sig_mot_config.start_addr + index);
 80038fc:	7812      	ldrb	r2, [r2, #0]
 80038fe:	3328      	adds	r3, #40	@ 0x28
 8003900:	443b      	add	r3, r7
 8003902:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8003906:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800390a:	3301      	adds	r3, #1
 800390c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003910:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003914:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003918:	429a      	cmp	r2, r3
 800391a:	d3e3      	bcc.n	80038e4 <set_sig_motion_config+0xae>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 800391c:	f107 010c 	add.w	r1, r7, #12
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2210      	movs	r2, #16
 8003924:	2030      	movs	r0, #48	@ 0x30
 8003926:	f7fd fbb2 	bl	800108e <bmi2_set_regs>
 800392a:	4603      	mov	r3, r0
 800392c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003930:	e002      	b.n	8003938 <set_sig_motion_config+0x102>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003932:	23f8      	movs	r3, #248	@ 0xf8
 8003934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003938:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800393c:	4618      	mov	r0, r3
 800393e:	3728      	adds	r7, #40	@ 0x28
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <set_step_count_params_config>:

/*!
 * @brief This internal API sets step counter parameter configurations.
 */
static int8_t set_step_count_params_config(const uint16_t *step_count_params, struct bmi2_dev *dev)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08c      	sub	sp, #48	@ 0x30
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt = BMI2_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	f107 0310 	add.w	r3, r7, #16
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]

    /* Variable to define index */
    uint8_t index = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter parameters */
    struct bmi2_feature_config step_params_config = { 0, 0, 0 };
 800396a:	2300      	movs	r3, #0
 800396c:	723b      	strb	r3, [r7, #8]
 800396e:	2300      	movs	r3, #0
 8003970:	727b      	strb	r3, [r7, #9]
 8003972:	2300      	movs	r3, #0
 8003974:	72bb      	strb	r3, [r7, #10]

    /* Variable to define start address of the parameters */
    uint8_t start_addr;

    /* Variable to define number of bytes */
    uint8_t n_bytes = (BMI2_STEP_CNT_N_PARAMS * 2);
 8003976:	2332      	movs	r3, #50	@ 0x32
 8003978:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    /* Variable to store number of pages */
    uint8_t n_pages = (n_bytes / 16);
 800397c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Variable to define the remaining bytes to be read */
    uint8_t remain_len;

    /* Variable to define the maximum words(16 bytes or 8 words) to be read in a page */
    uint8_t max_len = 8;
 8003986:	2308      	movs	r3, #8
 8003988:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    /* Variable index bytes in a page */
    uint8_t page_byte_idx;

    /* Variable to index the parameters */
    uint8_t param_idx = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8003992:	f107 030c 	add.w	r3, r7, #12
 8003996:	623b      	str	r3, [r7, #32]

    /* Search for step counter parameter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_params_config, BMI2_STEP_COUNTER_PARAMS, dev);
 8003998:	f107 0308 	add.w	r3, r7, #8
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	211d      	movs	r1, #29
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe f935 	bl	8001c10 <bmi2_extract_input_feat_config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 80039aa:	7ffb      	ldrb	r3, [r7, #31]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8099 	beq.w	8003ae4 <set_step_count_params_config+0x1a0>
    {
        /* Get the start page for the step counter parameters */
        start_page = step_params_config.page;
 80039b2:	7a7b      	ldrb	r3, [r7, #9]
 80039b4:	77bb      	strb	r3, [r7, #30]

        /* Get the end page for the step counter parameters */
        end_page = start_page + n_pages;
 80039b6:	7fba      	ldrb	r2, [r7, #30]
 80039b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039bc:	4413      	add	r3, r2
 80039be:	777b      	strb	r3, [r7, #29]

        /* Get the start address for the step counter parameters */
        start_addr = step_params_config.start_addr;
 80039c0:	7abb      	ldrb	r3, [r7, #10]
 80039c2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

        /* Get the remaining length of bytes to be read */
        remain_len = (uint8_t)((n_bytes - (n_pages * 16)) + start_addr);
 80039c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80039da:	4413      	add	r3, r2
 80039dc:	773b      	strb	r3, [r7, #28]
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 80039de:	7fbb      	ldrb	r3, [r7, #30]
 80039e0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80039e4:	e078      	b.n	8003ad8 <set_step_count_params_config+0x194>
        {
            /* Get the configuration from the respective page */
            rslt = bmi2_get_feat_config(page_idx, feat_config, dev);
 80039e6:	f107 010c 	add.w	r1, r7, #12
 80039ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fe f87b 	bl	8001aec <bmi2_get_feat_config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (rslt == BMI2_OK)
 80039fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d164      	bne.n	8003ace <set_step_count_params_config+0x18a>
            {
                /* Start from address 0x00 when switched to next page */
                if (page_idx > start_page)
 8003a04:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8003a08:	7fbb      	ldrb	r3, [r7, #30]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d902      	bls.n	8003a14 <set_step_count_params_config+0xd0>
                {
                    start_addr = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                /* Remaining number of words to be read in the page  */
                if (page_idx == end_page)
 8003a14:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8003a18:	7f7b      	ldrb	r3, [r7, #29]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d103      	bne.n	8003a26 <set_step_count_params_config+0xe2>
                {
                    max_len = (remain_len / 2);
 8003a1e:	7f3b      	ldrb	r3, [r7, #28]
 8003a20:	085b      	lsrs	r3, r3, #1
 8003a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* Get offset in words since all the features are set in words length */
                page_byte_idx = start_addr / 2;
 8003a26:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003a2a:	085b      	lsrs	r3, r3, #1
 8003a2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                for (; page_byte_idx < max_len;)
 8003a30:	e015      	b.n	8003a5e <set_step_count_params_config+0x11a>
                {
                    /* Set parameters 1 to 25 */
                    *(data_p + page_byte_idx) = BMI2_SET_BIT_POS0(*(data_p + page_byte_idx),
 8003a32:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	441a      	add	r2, r3
 8003a3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	6a39      	ldr	r1, [r7, #32]
 8003a44:	440b      	add	r3, r1
 8003a46:	8812      	ldrh	r2, [r2, #0]
 8003a48:	801a      	strh	r2, [r3, #0]
                                                                  BMI2_STEP_COUNT_PARAMS,
                                                                  step_count_params[param_idx]);

                    /* Increment offset by 1 word to set to the next parameter */
                    page_byte_idx++;
 8003a4a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003a4e:	3301      	adds	r3, #1
 8003a50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                    /* Increment to next parameter */
                    param_idx++;
 8003a54:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003a58:	3301      	adds	r3, #1
 8003a5a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                for (; page_byte_idx < max_len;)
 8003a5e:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8003a62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d3e3      	bcc.n	8003a32 <set_step_count_params_config+0xee>
                }

                /* Get total length in bytes to copy from local pointer to the array */
                page_byte_idx = (uint8_t)(page_byte_idx * 2) - step_params_config.start_addr;
 8003a6a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	7abb      	ldrb	r3, [r7, #10]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                /* Copy the bytes to be set back to the array */
                for (index = 0; index < page_byte_idx; index++)
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003a80:	e015      	b.n	8003aae <set_step_count_params_config+0x16a>
                {
                    feat_config[step_params_config.start_addr +
                                index] = *((uint8_t *) data_p + step_params_config.start_addr + index);
 8003a82:	7abb      	ldrb	r3, [r7, #10]
 8003a84:	461a      	mov	r2, r3
 8003a86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a8a:	4413      	add	r3, r2
 8003a8c:	6a3a      	ldr	r2, [r7, #32]
 8003a8e:	441a      	add	r2, r3
                    feat_config[step_params_config.start_addr +
 8003a90:	7abb      	ldrb	r3, [r7, #10]
 8003a92:	4619      	mov	r1, r3
 8003a94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a98:	440b      	add	r3, r1
                                index] = *((uint8_t *) data_p + step_params_config.start_addr + index);
 8003a9a:	7812      	ldrb	r2, [r2, #0]
 8003a9c:	3330      	adds	r3, #48	@ 0x30
 8003a9e:	443b      	add	r3, r7
 8003aa0:	f803 2c24 	strb.w	r2, [r3, #-36]
                for (index = 0; index < page_byte_idx; index++)
 8003aa4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003aae:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8003ab2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d3e3      	bcc.n	8003a82 <set_step_count_params_config+0x13e>
                }

                /* Set the configuration back to the page */
                rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003aba:	f107 010c 	add.w	r1, r7, #12
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	2030      	movs	r0, #48	@ 0x30
 8003ac4:	f7fd fae3 	bl	800108e <bmi2_set_regs>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        for (page_idx = start_page; page_idx <= end_page; page_idx++)
 8003ace:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8003ad8:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8003adc:	7f7b      	ldrb	r3, [r7, #29]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d981      	bls.n	80039e6 <set_step_count_params_config+0xa2>
 8003ae2:	e002      	b.n	8003aea <set_step_count_params_config+0x1a6>
            }
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003ae4:	23f8      	movs	r3, #248	@ 0xf8
 8003ae6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8003aea:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3730      	adds	r7, #48	@ 0x30
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <set_step_config>:

/* @brief This internal API sets step counter configurations like water-mark
 * level, reset-counter and output-configuration step detector and activity.
 */
static int8_t set_step_config(const struct bmi2_step_config *config, struct bmi2_dev *dev)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b08a      	sub	sp, #40	@ 0x28
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	f107 0310 	add.w	r3, r7, #16
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	609a      	str	r2, [r3, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for step counter 4 */
    struct bmi2_feature_config step_count_config = { 0, 0, 0 };
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	723b      	strb	r3, [r7, #8]
 8003b20:	2300      	movs	r3, #0
 8003b22:	727b      	strb	r3, [r7, #9]
 8003b24:	2300      	movs	r3, #0
 8003b26:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8003b28:	f107 030c 	add.w	r3, r7, #12
 8003b2c:	623b      	str	r3, [r7, #32]

    /* Search for step counter feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&step_count_config, BMI2_STEP_COUNTER, dev);
 8003b2e:	f107 0308 	add.w	r3, r7, #8
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	2107      	movs	r1, #7
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe f86a 	bl	8001c10 <bmi2_extract_input_feat_config>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8003b40:	7ffb      	ldrb	r3, [r7, #31]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 8083 	beq.w	8003c4e <set_step_config+0x158>
    {
        /* Get the configuration from the page where step counter resides */
        rslt = bmi2_get_feat_config(step_count_config.page, feat_config, dev);
 8003b48:	7a7b      	ldrb	r3, [r7, #9]
 8003b4a:	f107 010c 	add.w	r1, r7, #12
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fd ffcb 	bl	8001aec <bmi2_get_feat_config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8003b5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d177      	bne.n	8003c54 <set_step_config+0x15e>
        {
            /* Define the offset in bytes */
            idx = step_count_config.start_addr;
 8003b64:	7abb      	ldrb	r3, [r7, #10]
 8003b66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8003b6a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set water-mark level */
            *(data_p + idx) = BMI2_SET_BIT_POS0(*(data_p + idx), BMI2_STEP_COUNT_WM_LEVEL, config->watermark_level);
 8003b74:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	6a3a      	ldr	r2, [r7, #32]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	b21b      	sxth	r3, r3
 8003b82:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b86:	f023 0303 	bic.w	r3, r3, #3
 8003b8a:	b21a      	sxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	b21b      	sxth	r3, r3
 8003b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b96:	b21b      	sxth	r3, r3
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	b219      	sxth	r1, r3
 8003b9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	6a3a      	ldr	r2, [r7, #32]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	b28a      	uxth	r2, r1
 8003ba8:	801a      	strh	r2, [r3, #0]

            /* Set reset-counter */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_STEP_COUNT_RST_CNT, config->reset_counter);
 8003baa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	6a3a      	ldr	r2, [r7, #32]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	b21b      	sxth	r3, r3
 8003bb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bbc:	b21a      	sxth	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	885b      	ldrh	r3, [r3, #2]
 8003bc2:	029b      	lsls	r3, r3, #10
 8003bc4:	b21b      	sxth	r3, r3
 8003bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bca:	b21b      	sxth	r3, r3
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	b219      	sxth	r1, r3
 8003bd0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	6a3a      	ldr	r2, [r7, #32]
 8003bd8:	4413      	add	r3, r2
 8003bda:	b28a      	uxth	r2, r1
 8003bdc:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 word  to set output
             * configuration of step detector and step activity
             */
            idx++;
 8003bde:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003be2:	3301      	adds	r3, #1
 8003be4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - step_count_config.start_addr;
 8003be8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	7abb      	ldrb	r3, [r7, #10]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003bfe:	e015      	b.n	8003c2c <set_step_config+0x136>
            {
                feat_config[step_count_config.start_addr +
                            index] = *((uint8_t *) data_p + step_count_config.start_addr + index);
 8003c00:	7abb      	ldrb	r3, [r7, #10]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c08:	4413      	add	r3, r2
 8003c0a:	6a3a      	ldr	r2, [r7, #32]
 8003c0c:	441a      	add	r2, r3
                feat_config[step_count_config.start_addr +
 8003c0e:	7abb      	ldrb	r3, [r7, #10]
 8003c10:	4619      	mov	r1, r3
 8003c12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c16:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + step_count_config.start_addr + index);
 8003c18:	7812      	ldrb	r2, [r2, #0]
 8003c1a:	3328      	adds	r3, #40	@ 0x28
 8003c1c:	443b      	add	r3, r7
 8003c1e:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8003c22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c26:	3301      	adds	r3, #1
 8003c28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003c2c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003c30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d3e3      	bcc.n	8003c00 <set_step_config+0x10a>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003c38:	f107 010c 	add.w	r1, r7, #12
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2210      	movs	r2, #16
 8003c40:	2030      	movs	r0, #48	@ 0x30
 8003c42:	f7fd fa24 	bl	800108e <bmi2_set_regs>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003c4c:	e002      	b.n	8003c54 <set_step_config+0x15e>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003c4e:	23f8      	movs	r3, #248	@ 0xf8
 8003c50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003c54:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3728      	adds	r7, #40	@ 0x28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <set_wrist_gest_config>:
/*!
 * @brief This internal API sets wrist gesture configurations like wearable-arm,
 * and output-configuration.
 */
static int8_t set_wrist_gest_config(const struct bmi2_wrist_gest_config *config, struct bmi2_dev *dev)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	@ 0x28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	f107 0310 	add.w	r3, r7, #16
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	605a      	str	r2, [r3, #4]
 8003c78:	609a      	str	r2, [r3, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist gesture */
    struct bmi2_feature_config wrist_gest_config = { 0, 0, 0 };
 8003c86:	2300      	movs	r3, #0
 8003c88:	723b      	strb	r3, [r7, #8]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	727b      	strb	r3, [r7, #9]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8003c92:	f107 030c 	add.w	r3, r7, #12
 8003c96:	623b      	str	r3, [r7, #32]

    /* Search for wrist gesture feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_gest_config, BMI2_WRIST_GESTURE, dev);
 8003c98:	f107 0308 	add.w	r3, r7, #8
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	2113      	movs	r1, #19
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fd ffb5 	bl	8001c10 <bmi2_extract_input_feat_config>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8003caa:	7ffb      	ldrb	r3, [r7, #31]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8090 	beq.w	8003dd2 <set_wrist_gest_config+0x172>
    {
        /* Get the configuration from the page where wrist gesture feature resides */
        rslt = bmi2_get_feat_config(wrist_gest_config.page, feat_config, dev);
 8003cb2:	7a7b      	ldrb	r3, [r7, #9]
 8003cb4:	f107 010c 	add.w	r1, r7, #12
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fd ff16 	bl	8001aec <bmi2_get_feat_config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8003cc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 8084 	bne.w	8003dd8 <set_wrist_gest_config+0x178>
        {
            /* Define the offset in bytes for gesture select */
            idx = wrist_gest_config.start_addr;
 8003cd0:	7abb      	ldrb	r3, [r7, #10]
 8003cd2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8003cd6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003cda:	085b      	lsrs	r3, r3, #1
 8003cdc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Set wearable arm */
            *(data_p + idx) = BMI2_SET_BITS(*(data_p + idx), BMI2_WRIST_GEST_WEAR_ARM, config->wearable_arm);
 8003ce0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	6a3a      	ldr	r2, [r7, #32]
 8003ce8:	4413      	add	r3, r2
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	b21b      	sxth	r3, r3
 8003cee:	f023 0310 	bic.w	r3, r3, #16
 8003cf2:	b21a      	sxth	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	b21b      	sxth	r3, r3
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	b21b      	sxth	r3, r3
 8003d02:	4313      	orrs	r3, r2
 8003d04:	b219      	sxth	r1, r3
 8003d06:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	6a3a      	ldr	r2, [r7, #32]
 8003d0e:	4413      	add	r3, r2
 8003d10:	b28a      	uxth	r2, r1
 8003d12:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set minimum tilt angle (min_flick_peak) */
            idx++;
 8003d14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_flick_peak;
 8003d1e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	6a3a      	ldr	r2, [r7, #32]
 8003d26:	4413      	add	r3, r2
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	8852      	ldrh	r2, [r2, #2]
 8003d2c:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set min_flick_samples */
            idx++;
 8003d2e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d32:	3301      	adds	r3, #1
 8003d34:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_flick_samples;
 8003d38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	6a3a      	ldr	r2, [r7, #32]
 8003d40:	4413      	add	r3, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	8892      	ldrh	r2, [r2, #4]
 8003d46:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max time within gesture moment has to be completed */
            idx++;
 8003d48:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_duration;
 8003d52:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	6a3a      	ldr	r2, [r7, #32]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	88d2      	ldrh	r2, [r2, #6]
 8003d60:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8003d62:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d66:	3301      	adds	r3, #1
 8003d68:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - wrist_gest_config.start_addr;
 8003d6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	7abb      	ldrb	r3, [r7, #10]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003d82:	e015      	b.n	8003db0 <set_wrist_gest_config+0x150>
            {
                feat_config[wrist_gest_config.start_addr +
                            index] = *((uint8_t *) data_p + wrist_gest_config.start_addr + index);
 8003d84:	7abb      	ldrb	r3, [r7, #10]
 8003d86:	461a      	mov	r2, r3
 8003d88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003d8c:	4413      	add	r3, r2
 8003d8e:	6a3a      	ldr	r2, [r7, #32]
 8003d90:	441a      	add	r2, r3
                feat_config[wrist_gest_config.start_addr +
 8003d92:	7abb      	ldrb	r3, [r7, #10]
 8003d94:	4619      	mov	r1, r3
 8003d96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003d9a:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + wrist_gest_config.start_addr + index);
 8003d9c:	7812      	ldrb	r2, [r2, #0]
 8003d9e:	3328      	adds	r3, #40	@ 0x28
 8003da0:	443b      	add	r3, r7
 8003da2:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8003da6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003daa:	3301      	adds	r3, #1
 8003dac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003db0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003db4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d3e3      	bcc.n	8003d84 <set_wrist_gest_config+0x124>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003dbc:	f107 010c 	add.w	r1, r7, #12
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	2030      	movs	r0, #48	@ 0x30
 8003dc6:	f7fd f962 	bl	800108e <bmi2_set_regs>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003dd0:	e002      	b.n	8003dd8 <set_wrist_gest_config+0x178>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003dd2:	23f8      	movs	r3, #248	@ 0xf8
 8003dd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003dd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3728      	adds	r7, #40	@ 0x28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <set_wrist_wear_wake_up_config>:
/*!
 * @brief This internal API sets wrist wear wake-up configurations like
 * output-configuration.
 */
static int8_t set_wrist_wear_wake_up_config(const struct bmi2_wrist_wear_wake_up_config *config, struct bmi2_dev *dev)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	@ 0x28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
    /* Variable to define error */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t feat_config[BMI2_FEAT_SIZE_IN_BYTES] = { 0 };
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	f107 0310 	add.w	r3, r7, #16
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	605a      	str	r2, [r3, #4]
 8003dfc:	609a      	str	r2, [r3, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Variable to define index */
    uint8_t index = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Variable to set flag */
    uint8_t feat_found;

    /* Initialize feature configuration for wrist wear wake-up */
    struct bmi2_feature_config wrist_wake_up_config = { 0, 0, 0 };
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	723b      	strb	r3, [r7, #8]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	727b      	strb	r3, [r7, #9]
 8003e12:	2300      	movs	r3, #0
 8003e14:	72bb      	strb	r3, [r7, #10]

    /* Copy the feature configuration address to a local pointer */
    uint16_t *data_p = (uint16_t *) (void *)feat_config;
 8003e16:	f107 030c 	add.w	r3, r7, #12
 8003e1a:	623b      	str	r3, [r7, #32]

    /* Search for wrist wear wake-up feature and extract its configuration details */
    feat_found = bmi2_extract_input_feat_config(&wrist_wake_up_config, BMI2_WRIST_WEAR_WAKE_UP, dev);
 8003e1c:	f107 0308 	add.w	r3, r7, #8
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	2114      	movs	r1, #20
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fd fef3 	bl	8001c10 <bmi2_extract_input_feat_config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	77fb      	strb	r3, [r7, #31]
    if (feat_found)
 8003e2e:	7ffb      	ldrb	r3, [r7, #31]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 809d 	beq.w	8003f70 <set_wrist_wear_wake_up_config+0x18c>
    {
        /* Get the configuration from the page where wrist wear wake-up feature resides */
        rslt = bmi2_get_feat_config(wrist_wake_up_config.page, feat_config, dev);
 8003e36:	7a7b      	ldrb	r3, [r7, #9]
 8003e38:	f107 010c 	add.w	r1, r7, #12
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fd fe54 	bl	8001aec <bmi2_get_feat_config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI2_OK)
 8003e4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f040 8091 	bne.w	8003f76 <set_wrist_wear_wake_up_config+0x192>
        {
            /* Define the offset in bytes for wrist wear wake-up select */
            idx = wrist_wake_up_config.start_addr;
 8003e54:	7abb      	ldrb	r3, [r7, #10]
 8003e56:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get offset in words since all the features are set in words length */
            idx = idx / 2;
 8003e5a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Increment offset by 1 more word to set min_angle_focus */
            idx++;
 8003e64:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e68:	3301      	adds	r3, #1
 8003e6a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            *(data_p + idx) = config->min_angle_focus;
 8003e6e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	6a3a      	ldr	r2, [r7, #32]
 8003e76:	4413      	add	r3, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	8812      	ldrh	r2, [r2, #0]
 8003e7c:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set min_angle_nonfocus */
            idx++;
 8003e7e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e82:	3301      	adds	r3, #1
 8003e84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->min_angle_nonfocus;
 8003e88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	6a3a      	ldr	r2, [r7, #32]
 8003e90:	4413      	add	r3, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	8852      	ldrh	r2, [r2, #2]
 8003e96:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_lr */
            idx++;
 8003e98:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_lr;
 8003ea2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	6a3a      	ldr	r2, [r7, #32]
 8003eaa:	4413      	add	r3, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	8892      	ldrh	r2, [r2, #4]
 8003eb0:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_ll */
            idx++;
 8003eb2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_ll;
 8003ebc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	6a3a      	ldr	r2, [r7, #32]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	88d2      	ldrh	r2, [r2, #6]
 8003eca:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_pd */
            idx++;
 8003ecc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_pd;
 8003ed6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	6a3a      	ldr	r2, [r7, #32]
 8003ede:	4413      	add	r3, r2
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	8912      	ldrh	r2, [r2, #8]
 8003ee4:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to set max_tilt_pu */
            idx++;
 8003ee6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003eea:	3301      	adds	r3, #1
 8003eec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            *(data_p + idx) = config->max_tilt_pu;
 8003ef0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	6a3a      	ldr	r2, [r7, #32]
 8003ef8:	4413      	add	r3, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	8952      	ldrh	r2, [r2, #10]
 8003efe:	801a      	strh	r2, [r3, #0]

            /* Increment offset by 1 more word to get the total length in words */
            idx++;
 8003f00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f04:	3301      	adds	r3, #1
 8003f06:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Get total length in bytes to copy from local pointer to the array */
            idx = (uint8_t)(idx * 2) - wrist_wake_up_config.start_addr;
 8003f0a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	7abb      	ldrb	r3, [r7, #10]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

            /* Copy the bytes to be set back to the array */
            for (index = 0; index < idx; index++)
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003f20:	e015      	b.n	8003f4e <set_wrist_wear_wake_up_config+0x16a>
            {
                feat_config[wrist_wake_up_config.start_addr +
                            index] = *((uint8_t *) data_p + wrist_wake_up_config.start_addr + index);
 8003f22:	7abb      	ldrb	r3, [r7, #10]
 8003f24:	461a      	mov	r2, r3
 8003f26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f2a:	4413      	add	r3, r2
 8003f2c:	6a3a      	ldr	r2, [r7, #32]
 8003f2e:	441a      	add	r2, r3
                feat_config[wrist_wake_up_config.start_addr +
 8003f30:	7abb      	ldrb	r3, [r7, #10]
 8003f32:	4619      	mov	r1, r3
 8003f34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f38:	440b      	add	r3, r1
                            index] = *((uint8_t *) data_p + wrist_wake_up_config.start_addr + index);
 8003f3a:	7812      	ldrb	r2, [r2, #0]
 8003f3c:	3328      	adds	r3, #40	@ 0x28
 8003f3e:	443b      	add	r3, r7
 8003f40:	f803 2c1c 	strb.w	r2, [r3, #-28]
            for (index = 0; index < idx; index++)
 8003f44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f48:	3301      	adds	r3, #1
 8003f4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003f4e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003f52:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d3e3      	bcc.n	8003f22 <set_wrist_wear_wake_up_config+0x13e>
            }

            /* Set the configuration back to the page */
            rslt = bmi2_set_regs(BMI2_FEATURES_REG_ADDR, feat_config, BMI2_FEAT_SIZE_IN_BYTES, dev);
 8003f5a:	f107 010c 	add.w	r1, r7, #12
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2210      	movs	r2, #16
 8003f62:	2030      	movs	r0, #48	@ 0x30
 8003f64:	f7fd f893 	bl	800108e <bmi2_set_regs>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003f6e:	e002      	b.n	8003f76 <set_wrist_wear_wake_up_config+0x192>
        }
    }
    else
    {
        rslt = BMI2_E_INVALID_SENSOR;
 8003f70:	23f8      	movs	r3, #248	@ 0xf8
 8003f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8003f76:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3728      	adds	r7, #40	@ 0x28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <set_feat_config>:

/*!
 * @brief This internal API sets feature configuration to the sensor.
 */
static int8_t set_feat_config(const struct bmi2_sens_config *sens_cfg, uint8_t loop, struct bmi2_dev *dev)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    switch (sens_cfg[loop].type)
 8003f92:	7afa      	ldrb	r2, [r7, #11]
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	3b03      	subs	r3, #3
 8003fa6:	2b1a      	cmp	r3, #26
 8003fa8:	f200 80aa 	bhi.w	8004100 <set_feat_config+0x17c>
 8003fac:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb4 <set_feat_config+0x30>)
 8003fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb2:	bf00      	nop
 8003fb4:	08004061 	.word	0x08004061
 8003fb8:	08004021 	.word	0x08004021
 8003fbc:	08004041 	.word	0x08004041
 8003fc0:	080040a1 	.word	0x080040a1
 8003fc4:	080040a1 	.word	0x080040a1
 8003fc8:	080040a1 	.word	0x080040a1
 8003fcc:	08004101 	.word	0x08004101
 8003fd0:	08004101 	.word	0x08004101
 8003fd4:	08004101 	.word	0x08004101
 8003fd8:	08004101 	.word	0x08004101
 8003fdc:	08004101 	.word	0x08004101
 8003fe0:	08004101 	.word	0x08004101
 8003fe4:	08004101 	.word	0x08004101
 8003fe8:	08004101 	.word	0x08004101
 8003fec:	08004101 	.word	0x08004101
 8003ff0:	08004101 	.word	0x08004101
 8003ff4:	080040c1 	.word	0x080040c1
 8003ff8:	080040e1 	.word	0x080040e1
 8003ffc:	08004101 	.word	0x08004101
 8004000:	08004101 	.word	0x08004101
 8004004:	08004101 	.word	0x08004101
 8004008:	08004101 	.word	0x08004101
 800400c:	08004101 	.word	0x08004101
 8004010:	08004101 	.word	0x08004101
 8004014:	08004101 	.word	0x08004101
 8004018:	08004101 	.word	0x08004101
 800401c:	08004081 	.word	0x08004081
    {
        /* Set any motion configuration */
        case BMI2_ANY_MOTION:
            rslt = set_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 8004020:	7afa      	ldrb	r2, [r7, #11]
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	461a      	mov	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	3304      	adds	r3, #4
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff f9f0 	bl	800341a <set_any_motion_config>
 800403a:	4603      	mov	r3, r0
 800403c:	75fb      	strb	r3, [r7, #23]
            break;
 800403e:	e062      	b.n	8004106 <set_feat_config+0x182>

        /* Set no motion configuration */
        case BMI2_NO_MOTION:
            rslt = set_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 8004040:	7afa      	ldrb	r2, [r7, #11]
 8004042:	4613      	mov	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	461a      	mov	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	3304      	adds	r3, #4
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fae7 	bl	8003628 <set_no_motion_config>
 800405a:	4603      	mov	r3, r0
 800405c:	75fb      	strb	r3, [r7, #23]
            break;
 800405e:	e052      	b.n	8004106 <set_feat_config+0x182>

        /* Set sig-motion configuration */
        case BMI2_SIG_MOTION:
            rslt = set_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 8004060:	7afa      	ldrb	r2, [r7, #11]
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	461a      	mov	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	3304      	adds	r3, #4
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fbde 	bl	8003836 <set_sig_motion_config>
 800407a:	4603      	mov	r3, r0
 800407c:	75fb      	strb	r3, [r7, #23]
            break;
 800407e:	e042      	b.n	8004106 <set_feat_config+0x182>

        /* Set the step counter parameters */
        case BMI2_STEP_COUNTER_PARAMS:
            rslt = set_step_count_params_config(sens_cfg[loop].cfg.step_counter_params, dev);
 8004080:	7afa      	ldrb	r2, [r7, #11]
 8004082:	4613      	mov	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	461a      	mov	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	3304      	adds	r3, #4
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff fc55 	bl	8003944 <set_step_count_params_config>
 800409a:	4603      	mov	r3, r0
 800409c:	75fb      	strb	r3, [r7, #23]
            break;
 800409e:	e032      	b.n	8004106 <set_feat_config+0x182>

        /* Set step counter/detector/activity configuration */
        case BMI2_STEP_DETECTOR:
        case BMI2_STEP_COUNTER:
        case BMI2_STEP_ACTIVITY:
            rslt = set_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 80040a0:	7afa      	ldrb	r2, [r7, #11]
 80040a2:	4613      	mov	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	461a      	mov	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	3304      	adds	r3, #4
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fd1e 	bl	8003af6 <set_step_config>
 80040ba:	4603      	mov	r3, r0
 80040bc:	75fb      	strb	r3, [r7, #23]
            break;
 80040be:	e022      	b.n	8004106 <set_feat_config+0x182>

        /* Set the wrist gesture configuration */
        case BMI2_WRIST_GESTURE:
            rslt = set_wrist_gest_config(&sens_cfg[loop].cfg.wrist_gest, dev);
 80040c0:	7afa      	ldrb	r2, [r7, #11]
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	3304      	adds	r3, #4
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff fdc3 	bl	8003c60 <set_wrist_gest_config>
 80040da:	4603      	mov	r3, r0
 80040dc:	75fb      	strb	r3, [r7, #23]
            break;
 80040de:	e012      	b.n	8004106 <set_feat_config+0x182>

        /* Set the wrist wear wake-up configuration */
        case BMI2_WRIST_WEAR_WAKE_UP:
            rslt = set_wrist_wear_wake_up_config(&sens_cfg[loop].cfg.wrist_wear_wake_up, dev);
 80040e0:	7afa      	ldrb	r2, [r7, #11]
 80040e2:	4613      	mov	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	461a      	mov	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	3304      	adds	r3, #4
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff fe75 	bl	8003de4 <set_wrist_wear_wake_up_config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	75fb      	strb	r3, [r7, #23]
            break;
 80040fe:	e002      	b.n	8004106 <set_feat_config+0x182>

        default:
            rslt = BMI2_E_INVALID_SENSOR;
 8004100:	23f8      	movs	r3, #248	@ 0xf8
 8004102:	75fb      	strb	r3, [r7, #23]
            break;
 8004104:	bf00      	nop
    }

    return rslt;
 8004106:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop

08004114 <bmi2_i2c_read>:

/*!
 * I2C read function map to COINES platform
 */
BMI2_INTF_RETURN_TYPE bmi2_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4603      	mov	r3, r0
 8004122:	73fb      	strb	r3, [r7, #15]
    struct coines_intf_config intf_info = *(struct coines_intf_config *)intf_ptr;
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	f107 0314 	add.w	r3, r7, #20
 800412a:	8812      	ldrh	r2, [r2, #0]
 800412c:	801a      	strh	r2, [r3, #0]

//    return SensorAPI_I2Cx_Read(intf_info.bus, intf_info.dev_addr, reg_addr, reg_data, (uint16_t)len);
    return SensorAPI_I2Cx_Read(intf_info.dev_addr, reg_addr, reg_data, (uint16_t)len);
 800412e:	7d38      	ldrb	r0, [r7, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	b29b      	uxth	r3, r3
 8004134:	7bf9      	ldrb	r1, [r7, #15]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	f003 fd9c 	bl	8007c74 <SensorAPI_I2Cx_Read>
 800413c:	4603      	mov	r3, r0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <bmi2_i2c_write>:

/*!
 * I2C write function map to COINES platform
 */
BMI2_INTF_RETURN_TYPE bmi2_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b086      	sub	sp, #24
 800414a:	af00      	add	r7, sp, #0
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
 8004152:	4603      	mov	r3, r0
 8004154:	73fb      	strb	r3, [r7, #15]
    struct coines_intf_config intf_info = *(struct coines_intf_config *)intf_ptr;
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	f107 0314 	add.w	r3, r7, #20
 800415c:	8812      	ldrh	r2, [r2, #0]
 800415e:	801a      	strh	r2, [r3, #0]

//    return SensorAPI_I2Cx_Write(intf_info.bus, intf_info.dev_addr, reg_addr, (uint8_t *)reg_data, (uint16_t)len);
    return SensorAPI_I2Cx_Write(intf_info.dev_addr, reg_addr, (uint8_t *)reg_data, (uint16_t)len);
 8004160:	7d38      	ldrb	r0, [r7, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	b29b      	uxth	r3, r3
 8004166:	7bf9      	ldrb	r1, [r7, #15]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	f003 fda5 	bl	8007cb8 <SensorAPI_I2Cx_Write>
 800416e:	4603      	mov	r3, r0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <bmi2_delay_us>:

/*!
 * Delay function map to COINES platform
 */
void bmi2_delay_us(uint32_t period, void *intf_ptr)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
	bmi160_delay_us(period);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f003 fd5c 	bl	8007c40 <bmi160_delay_us>
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <bmi2_interface_init>:

/*!
 *  @brief Function to select the interface between SPI and I2C.
 */
int8_t bmi2_interface_init(struct bmi2_dev *bmi, uint8_t intf)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	70fb      	strb	r3, [r7, #3]
    int8_t rslt = BMI2_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	73fb      	strb	r3, [r7, #15]

    if (bmi != NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d026      	beq.n	80041f4 <bmi2_interface_init+0x64>
//
//            return COINES_E_UNABLE_OPEN_DEVICE;
//        }

        /* Bus configuration : I2C */
        if (intf == BMI2_I2C_INTF)
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d10e      	bne.n	80041ca <bmi2_interface_init+0x3a>
        {
            printf("I2C Interface \n");
 80041ac:	4815      	ldr	r0, [pc, #84]	@ (8004204 <bmi2_interface_init+0x74>)
 80041ae:	f012 fe0b 	bl	8016dc8 <puts>

            /* To initialize the user I2C function */
            dev_addr = BMI2_I2C_SEC_ADDR;
 80041b2:	4b15      	ldr	r3, [pc, #84]	@ (8004208 <bmi2_interface_init+0x78>)
 80041b4:	2269      	movs	r2, #105	@ 0x69
 80041b6:	701a      	strb	r2, [r3, #0]
            bmi->intf = BMI2_I2C_INTF;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	725a      	strb	r2, [r3, #9]
            bmi->read = bmi2_i2c_read;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a12      	ldr	r2, [pc, #72]	@ (800420c <bmi2_interface_init+0x7c>)
 80041c2:	639a      	str	r2, [r3, #56]	@ 0x38
            bmi->write = bmi2_i2c_write;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a12      	ldr	r2, [pc, #72]	@ (8004210 <bmi2_interface_init+0x80>)
 80041c8:	63da      	str	r2, [r3, #60]	@ 0x3c
//        }

//        if (COINES_SUCCESS == result)
//        {
            /* Assign device address and bus instance to interface pointer */
            intf_conf.bus = bus_inst;
 80041ca:	4b12      	ldr	r3, [pc, #72]	@ (8004214 <bmi2_interface_init+0x84>)
 80041cc:	781a      	ldrb	r2, [r3, #0]
 80041ce:	4b12      	ldr	r3, [pc, #72]	@ (8004218 <bmi2_interface_init+0x88>)
 80041d0:	705a      	strb	r2, [r3, #1]
            intf_conf.dev_addr = dev_addr;
 80041d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004208 <bmi2_interface_init+0x78>)
 80041d4:	781a      	ldrb	r2, [r3, #0]
 80041d6:	4b10      	ldr	r3, [pc, #64]	@ (8004218 <bmi2_interface_init+0x88>)
 80041d8:	701a      	strb	r2, [r3, #0]
            bmi->intf_ptr = ((void *)&intf_conf);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a0e      	ldr	r2, [pc, #56]	@ (8004218 <bmi2_interface_init+0x88>)
 80041de:	605a      	str	r2, [r3, #4]

            /* Configure delay in microseconds */
            bmi->delay_us = bmi2_delay_us;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a0e      	ldr	r2, [pc, #56]	@ (800421c <bmi2_interface_init+0x8c>)
 80041e4:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
            bmi->read_write_len = READ_WRITE_LEN;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	222e      	movs	r2, #46	@ 0x2e
 80041ea:	81da      	strh	r2, [r3, #14]

            /* Assign to NULL to load the default config file. */
            bmi->config_file_ptr = NULL;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	615a      	str	r2, [r3, #20]
 80041f2:	e001      	b.n	80041f8 <bmi2_interface_init+0x68>
//            rslt = COINES_E_COMM_INIT_FAILED;
//        }
    }
    else
    {
        rslt = BMI2_E_NULL_PTR;
 80041f4:	23ff      	movs	r3, #255	@ 0xff
 80041f6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80041f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	08019bf4 	.word	0x08019bf4
 8004208:	2000032c 	.word	0x2000032c
 800420c:	08004115 	.word	0x08004115
 8004210:	08004147 	.word	0x08004147
 8004214:	2000032d 	.word	0x2000032d
 8004218:	20000330 	.word	0x20000330
 800421c:	08004179 	.word	0x08004179

08004220 <bmi2_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bmi2_error_codes_print_result(int8_t rslt)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
    switch (rslt)
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	3322      	adds	r3, #34	@ 0x22
 8004230:	2b24      	cmp	r3, #36	@ 0x24
 8004232:	f200 812d 	bhi.w	8004490 <bmi2_error_codes_print_result+0x270>
 8004236:	a201      	add	r2, pc, #4	@ (adr r2, 800423c <bmi2_error_codes_print_result+0x1c>)
 8004238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423c:	08004483 	.word	0x08004483
 8004240:	08004475 	.word	0x08004475
 8004244:	08004467 	.word	0x08004467
 8004248:	08004491 	.word	0x08004491
 800424c:	08004459 	.word	0x08004459
 8004250:	08004491 	.word	0x08004491
 8004254:	08004491 	.word	0x08004491
 8004258:	0800444b 	.word	0x0800444b
 800425c:	0800443d 	.word	0x0800443d
 8004260:	0800442f 	.word	0x0800442f
 8004264:	08004421 	.word	0x08004421
 8004268:	08004413 	.word	0x08004413
 800426c:	08004405 	.word	0x08004405
 8004270:	080043f7 	.word	0x080043f7
 8004274:	080043e9 	.word	0x080043e9
 8004278:	080043db 	.word	0x080043db
 800427c:	080043cd 	.word	0x080043cd
 8004280:	080043bf 	.word	0x080043bf
 8004284:	08004325 	.word	0x08004325
 8004288:	080043b1 	.word	0x080043b1
 800428c:	080043a3 	.word	0x080043a3
 8004290:	08004395 	.word	0x08004395
 8004294:	08004333 	.word	0x08004333
 8004298:	08004491 	.word	0x08004491
 800429c:	08004387 	.word	0x08004387
 80042a0:	08004379 	.word	0x08004379
 80042a4:	08004317 	.word	0x08004317
 80042a8:	0800436b 	.word	0x0800436b
 80042ac:	0800435d 	.word	0x0800435d
 80042b0:	0800434f 	.word	0x0800434f
 80042b4:	08004341 	.word	0x08004341
 80042b8:	08004309 	.word	0x08004309
 80042bc:	080042fb 	.word	0x080042fb
 80042c0:	080042ed 	.word	0x080042ed
 80042c4:	0800449f 	.word	0x0800449f
 80042c8:	080042d1 	.word	0x080042d1
 80042cc:	080042df 	.word	0x080042df

            /* Do nothing */
            break;

        case BMI2_W_FIFO_EMPTY:
            printf("Warning [%d] : FIFO empty\r\n", rslt);
 80042d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d4:	4619      	mov	r1, r3
 80042d6:	4874      	ldr	r0, [pc, #464]	@ (80044a8 <bmi2_error_codes_print_result+0x288>)
 80042d8:	f012 fd06 	bl	8016ce8 <iprintf>
            break;
 80042dc:	e0e0      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>
        case BMI2_W_PARTIAL_READ:
            printf("Warning [%d] : FIFO partial read\r\n", rslt);
 80042de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e2:	4619      	mov	r1, r3
 80042e4:	4871      	ldr	r0, [pc, #452]	@ (80044ac <bmi2_error_codes_print_result+0x28c>)
 80042e6:	f012 fcff 	bl	8016ce8 <iprintf>
            break;
 80042ea:	e0d9      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>
        case BMI2_E_NULL_PTR:
            printf(
 80042ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f0:	4619      	mov	r1, r3
 80042f2:	486f      	ldr	r0, [pc, #444]	@ (80044b0 <bmi2_error_codes_print_result+0x290>)
 80042f4:	f012 fcf8 	bl	8016ce8 <iprintf>
                "Error [%d] : Null pointer error. It occurs when the user tries to assign value (not address) to a pointer," " which has been initialized to NULL.\r\n",
                rslt);
            break;
 80042f8:	e0d2      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_COM_FAIL:
            printf(
 80042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fe:	4619      	mov	r1, r3
 8004300:	486c      	ldr	r0, [pc, #432]	@ (80044b4 <bmi2_error_codes_print_result+0x294>)
 8004302:	f012 fcf1 	bl	8016ce8 <iprintf>
                "Error [%d] : Communication failure error. It occurs due to read/write operation failure and also due " "to power failure during communication\r\n",
                rslt);
            break;
 8004306:	e0cb      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_DEV_NOT_FOUND:
            printf("Error [%d] : Device not found error. It occurs when the device chip id is incorrectly read\r\n",
 8004308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430c:	4619      	mov	r1, r3
 800430e:	486a      	ldr	r0, [pc, #424]	@ (80044b8 <bmi2_error_codes_print_result+0x298>)
 8004310:	f012 fcea 	bl	8016ce8 <iprintf>
                   rslt);
            break;
 8004314:	e0c4      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_SENSOR:
            printf(
 8004316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431a:	4619      	mov	r1, r3
 800431c:	4867      	ldr	r0, [pc, #412]	@ (80044bc <bmi2_error_codes_print_result+0x29c>)
 800431e:	f012 fce3 	bl	8016ce8 <iprintf>
                "Error [%d] : Invalid sensor error. It occurs when there is a mismatch in the requested feature with the " "available one\r\n",
                rslt);
            break;
 8004322:	e0bd      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_SELF_TEST_FAIL:
            printf(
 8004324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004328:	4619      	mov	r1, r3
 800432a:	4865      	ldr	r0, [pc, #404]	@ (80044c0 <bmi2_error_codes_print_result+0x2a0>)
 800432c:	f012 fcdc 	bl	8016ce8 <iprintf>
                "Error [%d] : Self-test failed error. It occurs when the validation of accel self-test data is " "not satisfied\r\n",
                rslt);
            break;
 8004330:	e0b6      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_INT_PIN:
            printf(
 8004332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004336:	4619      	mov	r1, r3
 8004338:	4862      	ldr	r0, [pc, #392]	@ (80044c4 <bmi2_error_codes_print_result+0x2a4>)
 800433a:	f012 fcd5 	bl	8016ce8 <iprintf>
                "Error [%d] : Invalid interrupt pin error. It occurs when the user tries to configure interrupt pins " "apart from INT1 and INT2\r\n",
                rslt);
            break;
 800433e:	e0af      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_OUT_OF_RANGE:
            printf(
 8004340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004344:	4619      	mov	r1, r3
 8004346:	4860      	ldr	r0, [pc, #384]	@ (80044c8 <bmi2_error_codes_print_result+0x2a8>)
 8004348:	f012 fcce 	bl	8016ce8 <iprintf>
                "Error [%d] : Out of range error. It occurs when the data exceeds from filtered or unfiltered data from " "fifo and also when the range exceeds the maximum range for accel and gyro while performing FOC\r\n",
                rslt);
            break;
 800434c:	e0a8      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ACC_INVALID_CFG:
            printf(
 800434e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004352:	4619      	mov	r1, r3
 8004354:	485d      	ldr	r0, [pc, #372]	@ (80044cc <bmi2_error_codes_print_result+0x2ac>)
 8004356:	f012 fcc7 	bl	8016ce8 <iprintf>
                "Error [%d] : Invalid Accel configuration error. It occurs when there is an error in accel configuration" " register which could be one among range, BW or filter performance in reg address 0x40\r\n",
                rslt);
            break;
 800435a:	e0a1      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_GYRO_INVALID_CFG:
            printf(
 800435c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004360:	4619      	mov	r1, r3
 8004362:	485b      	ldr	r0, [pc, #364]	@ (80044d0 <bmi2_error_codes_print_result+0x2b0>)
 8004364:	f012 fcc0 	bl	8016ce8 <iprintf>
                "Error [%d] : Invalid Gyro configuration error. It occurs when there is a error in gyro configuration" "register which could be one among range, BW or filter performance in reg address 0x42\r\n",
                rslt);
            break;
 8004368:	e09a      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ACC_GYR_INVALID_CFG:
            printf(
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	4619      	mov	r1, r3
 8004370:	4858      	ldr	r0, [pc, #352]	@ (80044d4 <bmi2_error_codes_print_result+0x2b4>)
 8004372:	f012 fcb9 	bl	8016ce8 <iprintf>
                "Error [%d] : Invalid Accel-Gyro configuration error. It occurs when there is a error in accel and gyro" " configuration registers which could be one among range, BW or filter performance in reg address 0x40 " "and 0x42\r\n",
                rslt);
            break;
 8004376:	e093      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_CONFIG_LOAD:
            printf(
 8004378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437c:	4619      	mov	r1, r3
 800437e:	4856      	ldr	r0, [pc, #344]	@ (80044d8 <bmi2_error_codes_print_result+0x2b8>)
 8004380:	f012 fcb2 	bl	8016ce8 <iprintf>
                "Error [%d] : Configuration load error. It occurs when failure observed while loading the configuration " "into the sensor\r\n",
                rslt);
            break;
 8004384:	e08c      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_PAGE:
            printf(
 8004386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438a:	4619      	mov	r1, r3
 800438c:	4853      	ldr	r0, [pc, #332]	@ (80044dc <bmi2_error_codes_print_result+0x2bc>)
 800438e:	f012 fcab 	bl	8016ce8 <iprintf>
                "Error [%d] : Invalid page error. It occurs due to failure in writing the correct feature configuration " "from selected page\r\n",
                rslt);
            break;
 8004392:	e085      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_SET_APS_FAIL:
            printf(
 8004394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004398:	4619      	mov	r1, r3
 800439a:	4851      	ldr	r0, [pc, #324]	@ (80044e0 <bmi2_error_codes_print_result+0x2c0>)
 800439c:	f012 fca4 	bl	8016ce8 <iprintf>
                "Error [%d] : APS failure error. It occurs due to failure in write of advance power mode configuration " "register\r\n",
                rslt);
            break;
 80043a0:	e07e      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_AUX_INVALID_CFG:
            printf(
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	4619      	mov	r1, r3
 80043a8:	484e      	ldr	r0, [pc, #312]	@ (80044e4 <bmi2_error_codes_print_result+0x2c4>)
 80043aa:	f012 fc9d 	bl	8016ce8 <iprintf>
                "Error [%d] : Invalid AUX configuration error. It occurs when the auxiliary interface settings are not " "enabled properly\r\n",
                rslt);
            break;
 80043ae:	e077      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_AUX_BUSY:
            printf(
 80043b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b4:	4619      	mov	r1, r3
 80043b6:	484c      	ldr	r0, [pc, #304]	@ (80044e8 <bmi2_error_codes_print_result+0x2c8>)
 80043b8:	f012 fc96 	bl	8016ce8 <iprintf>
                "Error [%d] : AUX busy error. It occurs when the auxiliary interface buses are engaged while configuring" " the AUX\r\n",
                rslt);
            break;
 80043bc:	e070      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_REMAP_ERROR:
            printf(
 80043be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c2:	4619      	mov	r1, r3
 80043c4:	4849      	ldr	r0, [pc, #292]	@ (80044ec <bmi2_error_codes_print_result+0x2cc>)
 80043c6:	f012 fc8f 	bl	8016ce8 <iprintf>
                "Error [%d] : Remap error. It occurs due to failure in assigning the remap axes data for all the axes " "after change in axis position\r\n",
                rslt);
            break;
 80043ca:	e069      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_GYR_USER_GAIN_UPD_FAIL:
            printf(
 80043cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d0:	4619      	mov	r1, r3
 80043d2:	4847      	ldr	r0, [pc, #284]	@ (80044f0 <bmi2_error_codes_print_result+0x2d0>)
 80043d4:	f012 fc88 	bl	8016ce8 <iprintf>
                "Error [%d] : Gyro user gain update fail error. It occurs when the reading of user gain update status " "fails\r\n",
                rslt);
            break;
 80043d8:	e062      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_SELF_TEST_NOT_DONE:
            printf(
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	4619      	mov	r1, r3
 80043e0:	4844      	ldr	r0, [pc, #272]	@ (80044f4 <bmi2_error_codes_print_result+0x2d4>)
 80043e2:	f012 fc81 	bl	8016ce8 <iprintf>
                "Error [%d] : Self-test not done error. It occurs when the self-test process is ongoing or not " "completed\r\n",
                rslt);
            break;
 80043e6:	e05b      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_INPUT:
            printf("Error [%d] : Invalid input error. It occurs when the sensor input validity fails\r\n", rslt);
 80043e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ec:	4619      	mov	r1, r3
 80043ee:	4842      	ldr	r0, [pc, #264]	@ (80044f8 <bmi2_error_codes_print_result+0x2d8>)
 80043f0:	f012 fc7a 	bl	8016ce8 <iprintf>
            break;
 80043f4:	e054      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_STATUS:
            printf("Error [%d] : Invalid status error. It occurs when the feature/sensor validity fails\r\n", rslt);
 80043f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fa:	4619      	mov	r1, r3
 80043fc:	483f      	ldr	r0, [pc, #252]	@ (80044fc <bmi2_error_codes_print_result+0x2dc>)
 80043fe:	f012 fc73 	bl	8016ce8 <iprintf>
            break;
 8004402:	e04d      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_CRT_ERROR:
            printf("Error [%d] : CRT error. It occurs when the CRT test has failed\r\n", rslt);
 8004404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004408:	4619      	mov	r1, r3
 800440a:	483d      	ldr	r0, [pc, #244]	@ (8004500 <bmi2_error_codes_print_result+0x2e0>)
 800440c:	f012 fc6c 	bl	8016ce8 <iprintf>
            break;
 8004410:	e046      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ST_ALREADY_RUNNING:
            printf(
 8004412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004416:	4619      	mov	r1, r3
 8004418:	483a      	ldr	r0, [pc, #232]	@ (8004504 <bmi2_error_codes_print_result+0x2e4>)
 800441a:	f012 fc65 	bl	8016ce8 <iprintf>
                "Error [%d] : Self-test already running error. It occurs when the self-test is already running and " "another has been initiated\r\n",
                rslt);
            break;
 800441e:	e03f      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_CRT_READY_FOR_DL_FAIL_ABORT:
            printf(
 8004420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004424:	4619      	mov	r1, r3
 8004426:	4838      	ldr	r0, [pc, #224]	@ (8004508 <bmi2_error_codes_print_result+0x2e8>)
 8004428:	f012 fc5e 	bl	8016ce8 <iprintf>
                "Error [%d] : CRT ready for download fail abort error. It occurs when download in CRT fails due to wrong " "address location\r\n",
                rslt);
            break;
 800442c:	e038      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_DL_ERROR:
            printf(
 800442e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004432:	4619      	mov	r1, r3
 8004434:	4835      	ldr	r0, [pc, #212]	@ (800450c <bmi2_error_codes_print_result+0x2ec>)
 8004436:	f012 fc57 	bl	8016ce8 <iprintf>
                "Error [%d] : Download error. It occurs when write length exceeds that of the maximum burst length\r\n",
                rslt);
            break;
 800443a:	e031      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_PRECON_ERROR:
            printf(
 800443c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004440:	4619      	mov	r1, r3
 8004442:	4833      	ldr	r0, [pc, #204]	@ (8004510 <bmi2_error_codes_print_result+0x2f0>)
 8004444:	f012 fc50 	bl	8016ce8 <iprintf>
                "Error [%d] : Pre-conditional error. It occurs when precondition to start the feature was not " "completed\r\n",
                rslt);
            break;
 8004448:	e02a      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ABORT_ERROR:
            printf("Error [%d] : Abort error. It occurs when the device was shaken during CRT test\r\n", rslt);
 800444a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444e:	4619      	mov	r1, r3
 8004450:	4830      	ldr	r0, [pc, #192]	@ (8004514 <bmi2_error_codes_print_result+0x2f4>)
 8004452:	f012 fc49 	bl	8016ce8 <iprintf>
            break;
 8004456:	e023      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_WRITE_CYCLE_ONGOING:
            printf(
 8004458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445c:	4619      	mov	r1, r3
 800445e:	482e      	ldr	r0, [pc, #184]	@ (8004518 <bmi2_error_codes_print_result+0x2f8>)
 8004460:	f012 fc42 	bl	8016ce8 <iprintf>
                "Error [%d] : Write cycle ongoing error. It occurs when the write cycle is already running and another " "has been initiated\r\n",
                rslt);
            break;
 8004464:	e01c      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_ST_NOT_RUNING:
            printf(
 8004466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446a:	4619      	mov	r1, r3
 800446c:	482b      	ldr	r0, [pc, #172]	@ (800451c <bmi2_error_codes_print_result+0x2fc>)
 800446e:	f012 fc3b 	bl	8016ce8 <iprintf>
                "Error [%d] : Self-test is not running error. It occurs when self-test running is disabled while it's " "running\r\n",
                rslt);
            break;
 8004472:	e015      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_DATA_RDY_INT_FAILED:
            printf(
 8004474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004478:	4619      	mov	r1, r3
 800447a:	4829      	ldr	r0, [pc, #164]	@ (8004520 <bmi2_error_codes_print_result+0x300>)
 800447c:	f012 fc34 	bl	8016ce8 <iprintf>
                "Error [%d] : Data ready interrupt error. It occurs when the sample count exceeds the FOC sample limit " "and data ready status is not updated\r\n",
                rslt);
            break;
 8004480:	e00e      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        case BMI2_E_INVALID_FOC_POSITION:
            printf(
 8004482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004486:	4619      	mov	r1, r3
 8004488:	4826      	ldr	r0, [pc, #152]	@ (8004524 <bmi2_error_codes_print_result+0x304>)
 800448a:	f012 fc2d 	bl	8016ce8 <iprintf>
                "Error [%d] : Invalid FOC position error. It occurs when average FOC data is obtained for the wrong" " axes\r\n",
                rslt);
            break;
 800448e:	e007      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>

        default:
            printf("Error [%d] : Unknown error code\r\n", rslt);
 8004490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004494:	4619      	mov	r1, r3
 8004496:	4824      	ldr	r0, [pc, #144]	@ (8004528 <bmi2_error_codes_print_result+0x308>)
 8004498:	f012 fc26 	bl	8016ce8 <iprintf>
            break;
 800449c:	e000      	b.n	80044a0 <bmi2_error_codes_print_result+0x280>
            break;
 800449e:	bf00      	nop
    }
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	08019c04 	.word	0x08019c04
 80044ac:	08019c20 	.word	0x08019c20
 80044b0:	08019c44 	.word	0x08019c44
 80044b4:	08019cd8 	.word	0x08019cd8
 80044b8:	08019d68 	.word	0x08019d68
 80044bc:	08019dc8 	.word	0x08019dc8
 80044c0:	08019e40 	.word	0x08019e40
 80044c4:	08019eb0 	.word	0x08019eb0
 80044c8:	08019f30 	.word	0x08019f30
 80044cc:	08019ff8 	.word	0x08019ff8
 80044d0:	0801a0b8 	.word	0x0801a0b8
 80044d4:	0801a174 	.word	0x0801a174
 80044d8:	0801a24c 	.word	0x0801a24c
 80044dc:	0801a2c8 	.word	0x0801a2c8
 80044e0:	0801a344 	.word	0x0801a344
 80044e4:	0801a3b8 	.word	0x0801a3b8
 80044e8:	0801a434 	.word	0x0801a434
 80044ec:	0801a4a8 	.word	0x0801a4a8
 80044f0:	0801a530 	.word	0x0801a530
 80044f4:	0801a5a0 	.word	0x0801a5a0
 80044f8:	0801a60c 	.word	0x0801a60c
 80044fc:	0801a660 	.word	0x0801a660
 8004500:	0801a6b8 	.word	0x0801a6b8
 8004504:	0801a6fc 	.word	0x0801a6fc
 8004508:	0801a77c 	.word	0x0801a77c
 800450c:	0801a7f8 	.word	0x0801a7f8
 8004510:	0801a85c 	.word	0x0801a85c
 8004514:	0801a8c8 	.word	0x0801a8c8
 8004518:	0801a91c 	.word	0x0801a91c
 800451c:	0801a998 	.word	0x0801a998
 8004520:	0801aa08 	.word	0x0801aa08
 8004524:	0801aa98 	.word	0x0801aa98
 8004528:	0801ab04 	.word	0x0801ab04

0800452c <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 800452c:	b590      	push	{r4, r7, lr}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607b      	str	r3, [r7, #4]
 8004536:	4603      	mov	r3, r0
 8004538:	73fb      	strb	r3, [r7, #15]
 800453a:	4613      	mov	r3, r2
 800453c:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <bmi160_get_regs+0x24>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d102      	bne.n	8004556 <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8004550:	23ff      	movs	r3, #255	@ 0xff
 8004552:	75fb      	strb	r3, [r7, #23]
 8004554:	e017      	b.n	8004586 <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8004556:	89bb      	ldrh	r3, [r7, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d102      	bne.n	8004562 <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 800455c:	23f4      	movs	r3, #244	@ 0xf4
 800455e:	75fb      	strb	r3, [r7, #23]
 8004560:	e011      	b.n	8004586 <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	789b      	ldrb	r3, [r3, #2]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d103      	bne.n	8004572 <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004570:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69dc      	ldr	r4, [r3, #28]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	7858      	ldrb	r0, [r3, #1]
 800457a:	89bb      	ldrh	r3, [r7, #12]
 800457c:	7bf9      	ldrb	r1, [r7, #15]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	47a0      	blx	r4
 8004582:	4603      	mov	r3, r0
 8004584:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004586:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800458a:	4618      	mov	r0, r3
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	bd90      	pop	{r4, r7, pc}

08004592 <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8004592:	b590      	push	{r4, r7, lr}
 8004594:	b087      	sub	sp, #28
 8004596:	af00      	add	r7, sp, #0
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607b      	str	r3, [r7, #4]
 800459c:	4603      	mov	r3, r0
 800459e:	73fb      	strb	r3, [r7, #15]
 80045a0:	4613      	mov	r3, r2
 80045a2:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <bmi160_set_regs+0x28>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d102      	bne.n	80045c0 <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 80045ba:	23ff      	movs	r3, #255	@ 0xff
 80045bc:	75fb      	strb	r3, [r7, #23]
 80045be:	e045      	b.n	800464c <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 80045c0:	89bb      	ldrh	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d102      	bne.n	80045cc <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 80045c6:	23f4      	movs	r3, #244	@ 0xf4
 80045c8:	75fb      	strb	r3, [r7, #23]
 80045ca:	e03f      	b.n	800464c <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	789b      	ldrb	r3, [r3, #2]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d103      	bne.n	80045dc <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045da:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	7a1b      	ldrb	r3, [r3, #8]
 80045e0:	2b11      	cmp	r3, #17
 80045e2:	d003      	beq.n	80045ec <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 80045e8:	2b15      	cmp	r3, #21
 80045ea:	d124      	bne.n	8004636 <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1c      	ldr	r4, [r3, #32]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	7858      	ldrb	r0, [r3, #1]
 80045f4:	89bb      	ldrh	r3, [r7, #12]
 80045f6:	7bf9      	ldrb	r1, [r7, #15]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	47a0      	blx	r4
 80045fc:	4603      	mov	r3, r0
 80045fe:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004604:	2001      	movs	r0, #1
 8004606:	4798      	blx	r3
 8004608:	e01a      	b.n	8004640 <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1c      	ldr	r4, [r3, #32]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	7858      	ldrb	r0, [r3, #1]
 8004612:	7dbb      	ldrb	r3, [r7, #22]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	441a      	add	r2, r3
 8004618:	7bf9      	ldrb	r1, [r7, #15]
 800461a:	2301      	movs	r3, #1
 800461c:	47a0      	blx	r4
 800461e:	4603      	mov	r3, r0
 8004620:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	3301      	adds	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462c:	2001      	movs	r0, #1
 800462e:	4798      	blx	r3
            for (; count < len; count++)
 8004630:	7dbb      	ldrb	r3, [r7, #22]
 8004632:	3301      	adds	r3, #1
 8004634:	75bb      	strb	r3, [r7, #22]
 8004636:	7dbb      	ldrb	r3, [r7, #22]
 8004638:	b29b      	uxth	r3, r3
 800463a:	89ba      	ldrh	r2, [r7, #12]
 800463c:	429a      	cmp	r2, r3
 800463e:	d8e4      	bhi.n	800460a <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8004640:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8004648:	23fe      	movs	r3, #254	@ 0xfe
 800464a:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800464c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004650:	4618      	mov	r0, r3
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	bd90      	pop	{r4, r7, pc}

08004658 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8004660:	2303      	movs	r3, #3
 8004662:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fd33 	bl	80050d0 <null_ptr_check>
 800466a:	4603      	mov	r3, r0
 800466c:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 800466e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10c      	bne.n	8004690 <bmi160_init+0x38>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	789b      	ldrb	r3, [r3, #2]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d108      	bne.n	8004690 <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 800467e:	f107 010d 	add.w	r1, r7, #13
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	207f      	movs	r0, #127	@ 0x7f
 8004688:	f7ff ff50 	bl	800452c <bmi160_get_regs>
 800468c:	4603      	mov	r3, r0
 800468e:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 8004690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d127      	bne.n	80046e8 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 800469e:	e007      	b.n	80046b0 <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	2024      	movs	r0, #36	@ 0x24
 80046a8:	f7ff ff40 	bl	800452c <bmi160_get_regs>
 80046ac:	4603      	mov	r3, r0
 80046ae:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80046b0:	7bbb      	ldrb	r3, [r7, #14]
 80046b2:	1e5a      	subs	r2, r3, #1
 80046b4:	73ba      	strb	r2, [r7, #14]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <bmi160_init+0x6a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2bd1      	cmp	r3, #209	@ 0xd1
 80046c0:	d1ee      	bne.n	80046a0 <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 80046c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10c      	bne.n	80046e4 <bmi160_init+0x8c>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2bd1      	cmp	r3, #209	@ 0xd1
 80046d0:	d108      	bne.n	80046e4 <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	22ff      	movs	r2, #255	@ 0xff
 80046d6:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f80b 	bl	80046f4 <bmi160_soft_reset>
 80046de:	4603      	mov	r3, r0
 80046e0:	73fb      	strb	r3, [r7, #15]
 80046e2:	e001      	b.n	80046e8 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 80046e4:	23fd      	movs	r3, #253	@ 0xfd
 80046e6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80046e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 80046fc:	23b6      	movs	r3, #182	@ 0xb6
 80046fe:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <bmi160_soft_reset+0x1a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 800470e:	23ff      	movs	r3, #255	@ 0xff
 8004710:	73fb      	strb	r3, [r7, #15]
 8004712:	e024      	b.n	800475e <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8004714:	f107 010e 	add.w	r1, r7, #14
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	207e      	movs	r0, #126	@ 0x7e
 800471e:	f7ff ff38 	bl	8004592 <bmi160_set_regs>
 8004722:	4603      	mov	r3, r0
 8004724:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472a:	2001      	movs	r0, #1
 800472c:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 800472e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10c      	bne.n	8004750 <bmi160_soft_reset+0x5c>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	789b      	ldrb	r3, [r3, #2]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d108      	bne.n	8004750 <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 800473e:	f107 010e 	add.w	r1, r7, #14
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	207f      	movs	r0, #127	@ 0x7f
 8004748:	f7ff fef0 	bl	800452c <bmi160_get_regs>
 800474c:	4603      	mov	r3, r0
 800474e:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 8004750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fcd9 	bl	8005110 <default_param_settg>
        }
    }

    return rslt;
 800475e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <bmi160_set_sens_conf+0x1a>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	d102      	bne.n	800478a <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8004784:	23ff      	movs	r3, #255	@ 0xff
 8004786:	73fb      	strb	r3, [r7, #15]
 8004788:	e01f      	b.n	80047ca <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fcea 	bl	8005164 <set_accel_conf>
 8004790:	4603      	mov	r3, r0
 8004792:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d116      	bne.n	80047ca <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fe25 	bl	80053ec <set_gyro_conf>
 80047a2:	4603      	mov	r3, r0
 80047a4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80047a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10d      	bne.n	80047ca <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f811 	bl	80047d6 <bmi160_set_power_mode>
 80047b4:	4603      	mov	r3, r0
 80047b6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80047b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d104      	bne.n	80047ca <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fdde 	bl	8005382 <check_invalid_settg>
 80047c6:	4603      	mov	r3, r0
 80047c8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80047ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <bmi160_set_power_mode+0x1a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d102      	bne.n	80047f6 <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80047f0:	23ff      	movs	r3, #255	@ 0xff
 80047f2:	73fb      	strb	r3, [r7, #15]
 80047f4:	e00d      	b.n	8004812 <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 ff01 	bl	80055fe <set_accel_pwr>
 80047fc:	4603      	mov	r3, r0
 80047fe:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d104      	bne.n	8004812 <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 ff8f 	bl	800572c <set_gyro_pwr>
 800480e:	4603      	mov	r3, r0
 8004810:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004812:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b086      	sub	sp, #24
 8004822:	af00      	add	r7, sp, #0
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
 800482a:	4603      	mov	r3, r0
 800482c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 8004832:	2300      	movs	r3, #0
 8004834:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 800483e:	7d7b      	ldrb	r3, [r7, #21]
 8004840:	109b      	asrs	r3, r3, #2
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 800484a:	7d7b      	ldrb	r3, [r7, #21]
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 8004852:	7d3b      	ldrb	r3, [r7, #20]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8004858:	2303      	movs	r3, #3
 800485a:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d03c      	beq.n	80048dc <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 8004862:	7d7b      	ldrb	r3, [r7, #21]
 8004864:	2b03      	cmp	r3, #3
 8004866:	d024      	beq.n	80048b2 <bmi160_get_sensor_data+0x94>
 8004868:	2b03      	cmp	r3, #3
 800486a:	dc34      	bgt.n	80048d6 <bmi160_get_sensor_data+0xb8>
 800486c:	2b01      	cmp	r3, #1
 800486e:	d002      	beq.n	8004876 <bmi160_get_sensor_data+0x58>
 8004870:	2b02      	cmp	r3, #2
 8004872:	d00f      	beq.n	8004894 <bmi160_get_sensor_data+0x76>
 8004874:	e02f      	b.n	80048d6 <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d102      	bne.n	8004882 <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 800487c:	23ff      	movs	r3, #255	@ 0xff
 800487e:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 8004880:	e02e      	b.n	80048e0 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 8004882:	7dbb      	ldrb	r3, [r7, #22]
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	4618      	mov	r0, r3
 800488a:	f000 ff93 	bl	80057b4 <get_accel_data>
 800488e:	4603      	mov	r3, r0
 8004890:	75fb      	strb	r3, [r7, #23]
                break;
 8004892:	e025      	b.n	80048e0 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d102      	bne.n	80048a0 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 800489a:	23ff      	movs	r3, #255	@ 0xff
 800489c:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 800489e:	e01f      	b.n	80048e0 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 80048a0:	7dbb      	ldrb	r3, [r7, #22]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f001 f84e 	bl	8005948 <get_gyro_data>
 80048ac:	4603      	mov	r3, r0
 80048ae:	75fb      	strb	r3, [r7, #23]
                break;
 80048b0:	e016      	b.n	80048e0 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <bmi160_get_sensor_data+0xa0>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 80048be:	23ff      	movs	r3, #255	@ 0xff
 80048c0:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 80048c2:	e00d      	b.n	80048e0 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 80048c4:	7db8      	ldrb	r0, [r7, #22]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	68b9      	ldr	r1, [r7, #8]
 80048cc:	f001 f985 	bl	8005bda <get_accel_gyro_data>
 80048d0:	4603      	mov	r3, r0
 80048d2:	75fb      	strb	r3, [r7, #23]
                break;
 80048d4:	e004      	b.n	80048e0 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 80048d6:	23fb      	movs	r3, #251	@ 0xfb
 80048d8:	75fb      	strb	r3, [r7, #23]
                break;
 80048da:	e001      	b.n	80048e0 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 80048dc:	23ff      	movs	r3, #255	@ 0xff
 80048de:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80048e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <bmi160_set_int_config>:
/*!
 * @brief This API configures the necessary interrupt based on
 *  the user settings in the bmi160_int_settg structure instance.
 */
int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]

    switch (int_config->int_type)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	2b0d      	cmp	r3, #13
 8004900:	d879      	bhi.n	80049f6 <bmi160_set_int_config+0x10a>
 8004902:	a201      	add	r2, pc, #4	@ (adr r2, 8004908 <bmi160_set_int_config+0x1c>)
 8004904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004908:	08004941 	.word	0x08004941
 800490c:	0800494f 	.word	0x0800494f
 8004910:	08004979 	.word	0x08004979
 8004914:	0800496b 	.word	0x0800496b
 8004918:	0800496b 	.word	0x0800496b
 800491c:	08004987 	.word	0x08004987
 8004920:	08004995 	.word	0x08004995
 8004924:	080049b1 	.word	0x080049b1
 8004928:	080049a3 	.word	0x080049a3
 800492c:	0800495d 	.word	0x0800495d
 8004930:	080049bf 	.word	0x080049bf
 8004934:	080049cd 	.word	0x080049cd
 8004938:	080049db 	.word	0x080049db
 800493c:	080049e9 	.word	0x080049e9
    {
        case BMI160_ACC_ANY_MOTION_INT:

            /*Any-motion  interrupt*/
            rslt = set_accel_any_motion_int(int_config, dev);
 8004940:	6839      	ldr	r1, [r7, #0]
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f95a 	bl	8004bfc <set_accel_any_motion_int>
 8004948:	4603      	mov	r3, r0
 800494a:	73fb      	strb	r3, [r7, #15]
            break;
 800494c:	e054      	b.n	80049f8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SIG_MOTION_INT:

            /* Significant motion interrupt */
            rslt = set_accel_sig_motion_int(int_config, dev);
 800494e:	6839      	ldr	r1, [r7, #0]
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f9ed 	bl	8004d30 <set_accel_sig_motion_int>
 8004956:	4603      	mov	r3, r0
 8004958:	73fb      	strb	r3, [r7, #15]
            break;
 800495a:	e04d      	b.n	80049f8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SLOW_NO_MOTION_INT:

            /* Slow or no motion interrupt */
            rslt = set_accel_no_motion_int(int_config, dev);
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fa14 	bl	8004d8c <set_accel_no_motion_int>
 8004964:	4603      	mov	r3, r0
 8004966:	73fb      	strb	r3, [r7, #15]
            break;
 8004968:	e046      	b.n	80049f8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_DOUBLE_TAP_INT:
        case BMI160_ACC_SINGLE_TAP_INT:

            /* Double tap and single tap Interrupt */
            rslt = set_accel_tap_int(int_config, dev);
 800496a:	6839      	ldr	r1, [r7, #0]
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f973 	bl	8004c58 <set_accel_tap_int>
 8004972:	4603      	mov	r3, r0
 8004974:	73fb      	strb	r3, [r7, #15]
            break;
 8004976:	e03f      	b.n	80049f8 <bmi160_set_int_config+0x10c>
        case BMI160_STEP_DETECT_INT:

            /* Step detector interrupt */
            rslt = set_accel_step_detect_int(int_config, dev);
 8004978:	6839      	ldr	r1, [r7, #0]
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fa34 	bl	8004de8 <set_accel_step_detect_int>
 8004980:	4603      	mov	r3, r0
 8004982:	73fb      	strb	r3, [r7, #15]
            break;
 8004984:	e038      	b.n	80049f8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_ORIENT_INT:

            /* Orientation interrupt */
            rslt = set_accel_orientation_int(int_config, dev);
 8004986:	6839      	ldr	r1, [r7, #0]
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fa6e 	bl	8004e6a <set_accel_orientation_int>
 800498e:	4603      	mov	r3, r0
 8004990:	73fb      	strb	r3, [r7, #15]
            break;
 8004992:	e031      	b.n	80049f8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_FLAT_INT:

            /* Flat detection interrupt */
            rslt = set_accel_flat_detect_int(int_config, dev);
 8004994:	6839      	ldr	r1, [r7, #0]
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 faa8 	bl	8004eec <set_accel_flat_detect_int>
 800499c:	4603      	mov	r3, r0
 800499e:	73fb      	strb	r3, [r7, #15]
            break;
 80049a0:	e02a      	b.n	80049f8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_LOW_G_INT:

            /* Low-g interrupt */
            rslt = set_accel_low_g_int(int_config, dev);
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fae2 	bl	8004f6e <set_accel_low_g_int>
 80049aa:	4603      	mov	r3, r0
 80049ac:	73fb      	strb	r3, [r7, #15]
            break;
 80049ae:	e023      	b.n	80049f8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_HIGH_G_INT:

            /* High-g interrupt */
            rslt = set_accel_high_g_int(int_config, dev);
 80049b0:	6839      	ldr	r1, [r7, #0]
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fb26 	bl	8005004 <set_accel_high_g_int>
 80049b8:	4603      	mov	r3, r0
 80049ba:	73fb      	strb	r3, [r7, #15]
            break;
 80049bc:	e01c      	b.n	80049f8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_DATA_RDY_INT:

            /* Data ready interrupt */
            rslt = set_accel_gyro_data_ready_int(int_config, dev);
 80049be:	6839      	ldr	r1, [r7, #0]
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f982 	bl	8004cca <set_accel_gyro_data_ready_int>
 80049c6:	4603      	mov	r3, r0
 80049c8:	73fb      	strb	r3, [r7, #15]
            break;
 80049ca:	e015      	b.n	80049f8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_FULL_INT:

            /* Fifo full interrupt */
            rslt = set_fifo_full_int(int_config, dev);
 80049cc:	6839      	ldr	r1, [r7, #0]
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f002 fd50 	bl	8007474 <set_fifo_full_int>
 80049d4:	4603      	mov	r3, r0
 80049d6:	73fb      	strb	r3, [r7, #15]
            break;
 80049d8:	e00e      	b.n	80049f8 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:

            /* Fifo water-mark interrupt */
            rslt = set_fifo_watermark_int(int_config, dev);
 80049da:	6839      	ldr	r1, [r7, #0]
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f002 fdb0 	bl	8007542 <set_fifo_watermark_int>
 80049e2:	4603      	mov	r3, r0
 80049e4:	73fb      	strb	r3, [r7, #15]
            break;
 80049e6:	e007      	b.n	80049f8 <bmi160_set_int_config+0x10c>
        case BMI160_FIFO_TAG_INT_PIN:

            /* Fifo tagging feature support */
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80049e8:	6839      	ldr	r1, [r7, #0]
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fb55 	bl	800509a <set_intr_pin_config>
 80049f0:	4603      	mov	r3, r0
 80049f2:	73fb      	strb	r3, [r7, #15]
            break;
 80049f4:	e000      	b.n	80049f8 <bmi160_set_int_config+0x10c>
        default:
            break;
 80049f6:	bf00      	nop
    }

    return rslt;
 80049f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <bmi160_start_foc>:
 *  Gyro FOC always targets value of 0 dps
 */
int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf,
                        struct bmi160_offsets *offset,
                        struct bmi160_dev const *dev)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fb5d 	bl	80050d0 <null_ptr_check>
 8004a16:	4603      	mov	r3, r0
 8004a18:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK)
 8004a1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <bmi160_start_foc+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 8004a22:	23ff      	movs	r3, #255	@ 0xff
 8004a24:	75fb      	strb	r3, [r7, #23]
 8004a26:	e068      	b.n	8004afa <bmi160_start_foc+0xf6>
    }
    else
    {
        /* Set the offset enable bits */
        rslt = configure_offset_enable(foc_conf, dev);
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f002 fe10 	bl	8007650 <configure_offset_enable>
 8004a30:	4603      	mov	r3, r0
 8004a32:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8004a34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d15e      	bne.n	8004afa <bmi160_start_foc+0xf6>
        {
            /* Read the FOC config from the sensor */
            rslt = bmi160_get_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8004a3c:	f107 0116 	add.w	r1, r7, #22
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	2069      	movs	r0, #105	@ 0x69
 8004a46:	f7ff fd71 	bl	800452c <bmi160_get_regs>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	75fb      	strb	r3, [r7, #23]

            /* Set the FOC config for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);
 8004a4e:	7dbb      	ldrb	r3, [r7, #22]
 8004a50:	b25b      	sxtb	r3, r3
 8004a52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a56:	b25a      	sxtb	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	019b      	lsls	r3, r3, #6
 8004a5e:	b25b      	sxtb	r3, r3
 8004a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a64:	b25b      	sxtb	r3, r3
 8004a66:	4313      	orrs	r3, r2
 8004a68:	b25b      	sxtb	r3, r3
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	75bb      	strb	r3, [r7, #22]

            /* Set the FOC config for accel xyz axes */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
 8004a6e:	7dbb      	ldrb	r3, [r7, #22]
 8004a70:	b25b      	sxtb	r3, r3
 8004a72:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004a76:	b25a      	sxtb	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	785b      	ldrb	r3, [r3, #1]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	b25b      	sxtb	r3, r3
 8004a80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a84:	b25b      	sxtb	r3, r3
 8004a86:	4313      	orrs	r3, r2
 8004a88:	b25b      	sxtb	r3, r3
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
 8004a8e:	7dbb      	ldrb	r3, [r7, #22]
 8004a90:	b25b      	sxtb	r3, r3
 8004a92:	f023 030c 	bic.w	r3, r3, #12
 8004a96:	b25a      	sxtb	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	789b      	ldrb	r3, [r3, #2]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	b25b      	sxtb	r3, r3
 8004aa0:	f003 030c 	and.w	r3, r3, #12
 8004aa4:	b25b      	sxtb	r3, r3
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	b25b      	sxtb	r3, r3
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
 8004aae:	7dbb      	ldrb	r3, [r7, #22]
 8004ab0:	b25b      	sxtb	r3, r3
 8004ab2:	f023 0303 	bic.w	r3, r3, #3
 8004ab6:	b25a      	sxtb	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	78db      	ldrb	r3, [r3, #3]
 8004abc:	b25b      	sxtb	r3, r3
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	b25b      	sxtb	r3, r3
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	b25b      	sxtb	r3, r3
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	75bb      	strb	r3, [r7, #22]
            if (rslt == BMI160_OK)
 8004acc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d112      	bne.n	8004afa <bmi160_start_foc+0xf6>
            {
                /* Set the FOC config in the sensor */
                rslt = bmi160_set_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8004ad4:	f107 0116 	add.w	r1, r7, #22
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	2069      	movs	r0, #105	@ 0x69
 8004ade:	f7ff fd58 	bl	8004592 <bmi160_set_regs>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8004ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d105      	bne.n	8004afa <bmi160_start_foc+0xf6>
                {
                    /* Procedure to trigger
                     * FOC and check status */
                    rslt = trigger_foc(offset, dev);
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	68b8      	ldr	r0, [r7, #8]
 8004af2:	f002 fdf7 	bl	80076e4 <trigger_foc>
 8004af6:	4603      	mov	r3, r0
 8004af8:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 8004afa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b088      	sub	sp, #32
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004b10:	6838      	ldr	r0, [r7, #0]
 8004b12:	f000 fadd 	bl	80050d0 <null_ptr_check>
 8004b16:	4603      	mov	r3, r0
 8004b18:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8004b1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8004b22:	23ff      	movs	r3, #255	@ 0xff
 8004b24:	77fb      	strb	r3, [r7, #31]
 8004b26:	e063      	b.n	8004bf0 <bmi160_get_offsets+0xea>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8004b28:	f107 010c 	add.w	r1, r7, #12
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2207      	movs	r2, #7
 8004b30:	2071      	movs	r0, #113	@ 0x71
 8004b32:	f7ff fcfb 	bl	800452c <bmi160_get_regs>
 8004b36:	4603      	mov	r3, r0
 8004b38:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 8004b3a:	7b3b      	ldrb	r3, [r7, #12]
 8004b3c:	b25a      	sxtb	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 8004b42:	7b7b      	ldrb	r3, [r7, #13]
 8004b44:	b25a      	sxtb	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 8004b4a:	7bbb      	ldrb	r3, [r7, #14]
 8004b4c:	b25a      	sxtb	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 8004b56:	7cbb      	ldrb	r3, [r7, #18]
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004b5e:	7f7b      	ldrb	r3, [r7, #29]
 8004b60:	039b      	lsls	r3, r3, #14
 8004b62:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004b64:	7fbb      	ldrb	r3, [r7, #30]
 8004b66:	019b      	lsls	r3, r3, #6
 8004b68:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8004b6a:	8b7a      	ldrh	r2, [r7, #26]
 8004b6c:	8b3b      	ldrh	r3, [r7, #24]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 8004b72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	da00      	bge.n	8004b7c <bmi160_get_offsets+0x76>
 8004b7a:	333f      	adds	r3, #63	@ 0x3f
 8004b7c:	119b      	asrs	r3, r3, #6
 8004b7e:	b21a      	sxth	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 8004b84:	7c3b      	ldrb	r3, [r7, #16]
 8004b86:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 8004b88:	7cbb      	ldrb	r3, [r7, #18]
 8004b8a:	109b      	asrs	r3, r3, #2
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004b94:	7f7b      	ldrb	r3, [r7, #29]
 8004b96:	039b      	lsls	r3, r3, #14
 8004b98:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004b9a:	7fbb      	ldrb	r3, [r7, #30]
 8004b9c:	019b      	lsls	r3, r3, #6
 8004b9e:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8004ba0:	8b7a      	ldrh	r2, [r7, #26]
 8004ba2:	8b3b      	ldrh	r3, [r7, #24]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 8004ba8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	da00      	bge.n	8004bb2 <bmi160_get_offsets+0xac>
 8004bb0:	333f      	adds	r3, #63	@ 0x3f
 8004bb2:	119b      	asrs	r3, r3, #6
 8004bb4:	b21a      	sxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 8004bba:	7c7b      	ldrb	r3, [r7, #17]
 8004bbc:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 8004bbe:	7cbb      	ldrb	r3, [r7, #18]
 8004bc0:	111b      	asrs	r3, r3, #4
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004bca:	7f7b      	ldrb	r3, [r7, #29]
 8004bcc:	039b      	lsls	r3, r3, #14
 8004bce:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004bd0:	7fbb      	ldrb	r3, [r7, #30]
 8004bd2:	019b      	lsls	r3, r3, #6
 8004bd4:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8004bd6:	8b7a      	ldrh	r2, [r7, #26]
 8004bd8:	8b3b      	ldrh	r3, [r7, #24]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 8004bde:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	da00      	bge.n	8004be8 <bmi160_get_offsets+0xe2>
 8004be6:	333f      	adds	r3, #63	@ 0x3f
 8004be8:	119b      	asrs	r3, r3, #6
 8004bea:	b21a      	sxth	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 8004bf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3720      	adds	r7, #32
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <set_accel_any_motion_int>:
 * @brief This API sets the any-motion interrupt of the sensor.
 * This interrupt occurs when accel values exceeds preset threshold
 * for a certain period of time.
 */
static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004c06:	6838      	ldr	r0, [r7, #0]
 8004c08:	f000 fa62 	bl	80050d0 <null_ptr_check>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <set_accel_any_motion_int+0x22>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d102      	bne.n	8004c24 <set_accel_any_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004c1e:	23ff      	movs	r3, #255	@ 0xff
 8004c20:	73fb      	strb	r3, [r7, #15]
 8004c22:	e013      	b.n	8004c4c <set_accel_any_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg = &(int_config->int_type_cfg.acc_any_motion_int);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3304      	adds	r3, #4
 8004c28:	60bb      	str	r3, [r7, #8]
        rslt = enable_accel_any_motion_int(any_motion_int_cfg, dev);
 8004c2a:	6839      	ldr	r1, [r7, #0]
 8004c2c:	68b8      	ldr	r0, [r7, #8]
 8004c2e:	f001 f912 	bl	8005e56 <enable_accel_any_motion_int>
 8004c32:	4603      	mov	r3, r0
 8004c34:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <set_accel_any_motion_int+0x50>
        {
            rslt = config_any_motion_int_settg(int_config, any_motion_int_cfg, dev);
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f001 fb3f 	bl	80062c6 <config_any_motion_int_settg>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <set_accel_tap_int>:
/*!
 * @brief This API sets tap interrupts.Interrupt is fired when
 * tap movements happen.
 */
static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004c62:	6838      	ldr	r0, [r7, #0]
 8004c64:	f000 fa34 	bl	80050d0 <null_ptr_check>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d102      	bne.n	8004c7a <set_accel_tap_int+0x22>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d102      	bne.n	8004c80 <set_accel_tap_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004c7a:	23ff      	movs	r3, #255	@ 0xff
 8004c7c:	73fb      	strb	r3, [r7, #15]
 8004c7e:	e01e      	b.n	8004cbe <set_accel_tap_int+0x66>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_tap_int_cfg *tap_int_cfg = &(int_config->int_type_cfg.acc_tap_int);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3304      	adds	r3, #4
 8004c84:	60bb      	str	r3, [r7, #8]
        rslt = enable_tap_int(int_config, tap_int_cfg, dev);
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f001 fe79 	bl	8006982 <enable_tap_int>
 8004c90:	4603      	mov	r3, r0
 8004c92:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d110      	bne.n	8004cbe <set_accel_tap_int+0x66>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004c9c:	6839      	ldr	r1, [r7, #0]
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f9fb 	bl	800509a <set_intr_pin_config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d106      	bne.n	8004cbe <set_accel_tap_int+0x66>
            {
                rslt = config_tap_int_settg(int_config, tap_int_cfg, dev);
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f001 feb7 	bl	8006a28 <config_tap_int_settg>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <set_accel_gyro_data_ready_int>:
/*!
 * @brief This API sets the data ready interrupt for both accel and gyro.
 * This interrupt occurs when new accel and gyro data comes.
 */
static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004cd4:	6838      	ldr	r0, [r7, #0]
 8004cd6:	f000 f9fb 	bl	80050d0 <null_ptr_check>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <set_accel_gyro_data_ready_int+0x22>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <set_accel_gyro_data_ready_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004cec:	23ff      	movs	r3, #255	@ 0xff
 8004cee:	73fb      	strb	r3, [r7, #15]
 8004cf0:	e018      	b.n	8004d24 <set_accel_gyro_data_ready_int+0x5a>
    }
    else
    {
        rslt = enable_data_ready_int(dev);
 8004cf2:	6838      	ldr	r0, [r7, #0]
 8004cf4:	f001 fb20 	bl	8006338 <enable_data_ready_int>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10f      	bne.n	8004d24 <set_accel_gyro_data_ready_int+0x5a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004d04:	6839      	ldr	r1, [r7, #0]
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f9c7 	bl	800509a <set_intr_pin_config>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d105      	bne.n	8004d24 <set_accel_gyro_data_ready_int+0x5a>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8004d18:	6839      	ldr	r1, [r7, #0]
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f001 f9d4 	bl	80060c8 <map_hardware_interrupt>
 8004d20:	4603      	mov	r3, r0
 8004d22:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8004d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <set_accel_sig_motion_int>:
/*!
 * @brief This API sets the significant motion interrupt of the sensor.This
 * interrupt occurs when there is change in user location.
 */
static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004d3a:	6838      	ldr	r0, [r7, #0]
 8004d3c:	f000 f9c8 	bl	80050d0 <null_ptr_check>
 8004d40:	4603      	mov	r3, r0
 8004d42:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d102      	bne.n	8004d52 <set_accel_sig_motion_int+0x22>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <set_accel_sig_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004d52:	23ff      	movs	r3, #255	@ 0xff
 8004d54:	73fb      	strb	r3, [r7, #15]
 8004d56:	e013      	b.n	8004d80 <set_accel_sig_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg = &(int_config->int_type_cfg.acc_sig_motion_int);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	60bb      	str	r3, [r7, #8]
        rslt = enable_sig_motion_int(sig_mot_int_cfg, dev);
 8004d5e:	6839      	ldr	r1, [r7, #0]
 8004d60:	68b8      	ldr	r0, [r7, #8]
 8004d62:	f001 fc3f 	bl	80065e4 <enable_sig_motion_int>
 8004d66:	4603      	mov	r3, r0
 8004d68:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d106      	bne.n	8004d80 <set_accel_sig_motion_int+0x50>
        {
            rslt = config_sig_motion_int_settg(int_config, sig_mot_int_cfg, dev);
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f001 fc75 	bl	8006666 <config_sig_motion_int_settg>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <set_accel_no_motion_int>:
 * Slow motion is similar to any motion interrupt.No motion interrupt
 * occurs when slope bet. two accel values falls below preset threshold
 * for preset duration.
 */
static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004d96:	6838      	ldr	r0, [r7, #0]
 8004d98:	f000 f99a 	bl	80050d0 <null_ptr_check>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <set_accel_no_motion_int+0x22>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <set_accel_no_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004dae:	23ff      	movs	r3, #255	@ 0xff
 8004db0:	73fb      	strb	r3, [r7, #15]
 8004db2:	e013      	b.n	8004ddc <set_accel_no_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg = &(int_config->int_type_cfg.acc_no_motion_int);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3304      	adds	r3, #4
 8004db8:	60bb      	str	r3, [r7, #8]
        rslt = enable_no_motion_int(no_mot_int_cfg, dev);
 8004dba:	6839      	ldr	r1, [r7, #0]
 8004dbc:	68b8      	ldr	r0, [r7, #8]
 8004dbe:	f001 fae8 	bl	8006392 <enable_no_motion_int>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <set_accel_no_motion_int+0x50>
        {
            /* Configure the INT PIN settings*/
            rslt = config_no_motion_int_settg(int_config, no_mot_int_cfg, dev);
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	68b9      	ldr	r1, [r7, #8]
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f001 fb32 	bl	800643c <config_no_motion_int_settg>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <set_accel_step_detect_int>:
 * @brief This API sets the step detection interrupt.This interrupt
 * occurs when the single step causes accel values to go above
 * preset threshold.
 */
static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004df2:	6838      	ldr	r0, [r7, #0]
 8004df4:	f000 f96c 	bl	80050d0 <null_ptr_check>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d102      	bne.n	8004e0a <set_accel_step_detect_int+0x22>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d102      	bne.n	8004e10 <set_accel_step_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004e0a:	23ff      	movs	r3, #255	@ 0xff
 8004e0c:	73fb      	strb	r3, [r7, #15]
 8004e0e:	e026      	b.n	8004e5e <set_accel_step_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg = &(int_config->int_type_cfg.acc_step_detect_int);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3304      	adds	r3, #4
 8004e14:	60bb      	str	r3, [r7, #8]
        rslt = enable_step_detect_int(step_detect_int_cfg, dev);
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	68b8      	ldr	r0, [r7, #8]
 8004e1a:	f001 fcf9 	bl	8006810 <enable_step_detect_int>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d119      	bne.n	8004e5e <set_accel_step_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004e2a:	6839      	ldr	r1, [r7, #0]
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f934 	bl	800509a <set_intr_pin_config>
 8004e32:	4603      	mov	r3, r0
 8004e34:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10f      	bne.n	8004e5e <set_accel_step_detect_int+0x76>
            {
                rslt = map_feature_interrupt(int_config, dev);
 8004e3e:	6839      	ldr	r1, [r7, #0]
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f001 f8a7 	bl	8005f94 <map_feature_interrupt>
 8004e46:	4603      	mov	r3, r0
 8004e48:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d105      	bne.n	8004e5e <set_accel_step_detect_int+0x76>
                {
                    rslt = config_step_detect(step_detect_int_cfg, dev);
 8004e52:	6839      	ldr	r1, [r7, #0]
 8004e54:	68b8      	ldr	r0, [r7, #8]
 8004e56:	f001 fd14 	bl	8006882 <config_step_detect>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <set_accel_orientation_int>:
 * @brief This API sets the orientation interrupt of the sensor.This
 * interrupt occurs when there is orientation change in the sensor
 * with respect to gravitational field vector g.
 */
static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004e74:	6838      	ldr	r0, [r7, #0]
 8004e76:	f000 f92b 	bl	80050d0 <null_ptr_check>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d102      	bne.n	8004e8c <set_accel_orientation_int+0x22>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d102      	bne.n	8004e92 <set_accel_orientation_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004e8c:	23ff      	movs	r3, #255	@ 0xff
 8004e8e:	73fb      	strb	r3, [r7, #15]
 8004e90:	e026      	b.n	8004ee0 <set_accel_orientation_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_orient_int_cfg *orient_int_cfg = &(int_config->int_type_cfg.acc_orient_int);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3304      	adds	r3, #4
 8004e96:	60bb      	str	r3, [r7, #8]
        rslt = enable_orient_int(orient_int_cfg, dev);
 8004e98:	6839      	ldr	r1, [r7, #0]
 8004e9a:	68b8      	ldr	r0, [r7, #8]
 8004e9c:	f001 fec8 	bl	8006c30 <enable_orient_int>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d119      	bne.n	8004ee0 <set_accel_orientation_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004eac:	6839      	ldr	r1, [r7, #0]
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f8f3 	bl	800509a <set_intr_pin_config>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10f      	bne.n	8004ee0 <set_accel_orientation_int+0x76>
            {
                /* map INT pin to orient interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f001 f866 	bl	8005f94 <map_feature_interrupt>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d105      	bne.n	8004ee0 <set_accel_orientation_int+0x76>
                {
                    /* configure the
                     * orientation setting*/
                    rslt = config_orient_int_settg(orient_int_cfg, dev);
 8004ed4:	6839      	ldr	r1, [r7, #0]
 8004ed6:	68b8      	ldr	r0, [r7, #8]
 8004ed8:	f001 fee3 	bl	8006ca2 <config_orient_int_settg>
 8004edc:	4603      	mov	r3, r0
 8004ede:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <set_accel_flat_detect_int>:
/*!
 * @brief This API sets the flat interrupt of the sensor.This interrupt
 * occurs in case of flat orientation
 */
static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004ef6:	6838      	ldr	r0, [r7, #0]
 8004ef8:	f000 f8ea 	bl	80050d0 <null_ptr_check>
 8004efc:	4603      	mov	r3, r0
 8004efe:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d102      	bne.n	8004f0e <set_accel_flat_detect_int+0x22>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <set_accel_flat_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004f0e:	23ff      	movs	r3, #255	@ 0xff
 8004f10:	73fb      	strb	r3, [r7, #15]
 8004f12:	e026      	b.n	8004f62 <set_accel_flat_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_flat_detect_int_cfg *flat_detect_int = &(int_config->int_type_cfg.acc_flat_int);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	60bb      	str	r3, [r7, #8]

        /* enable the flat interrupt */
        rslt = enable_flat_int(flat_detect_int, dev);
 8004f1a:	6839      	ldr	r1, [r7, #0]
 8004f1c:	68b8      	ldr	r0, [r7, #8]
 8004f1e:	f001 ff4f 	bl	8006dc0 <enable_flat_int>
 8004f22:	4603      	mov	r3, r0
 8004f24:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d119      	bne.n	8004f62 <set_accel_flat_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004f2e:	6839      	ldr	r1, [r7, #0]
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f8b2 	bl	800509a <set_intr_pin_config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10f      	bne.n	8004f62 <set_accel_flat_detect_int+0x76>
            {
                /* map INT pin to flat interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f001 f825 	bl	8005f94 <map_feature_interrupt>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d105      	bne.n	8004f62 <set_accel_flat_detect_int+0x76>
                {
                    /* configure the flat setting*/
                    rslt = config_flat_int_settg(flat_detect_int, dev);
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	68b8      	ldr	r0, [r7, #8]
 8004f5a:	f001 ff67 	bl	8006e2c <config_flat_int_settg>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <set_accel_low_g_int>:
/*!
 * @brief This API sets the low-g interrupt of the sensor.This interrupt
 * occurs during free-fall.
 */
static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004f78:	6838      	ldr	r0, [r7, #0]
 8004f7a:	f000 f8a9 	bl	80050d0 <null_ptr_check>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8004f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d102      	bne.n	8004f90 <set_accel_low_g_int+0x22>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d102      	bne.n	8004f96 <set_accel_low_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004f90:	23ff      	movs	r3, #255	@ 0xff
 8004f92:	73fb      	strb	r3, [r7, #15]
 8004f94:	e030      	b.n	8004ff8 <set_accel_low_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_low_g_int_cfg *low_g_int = &(int_config->int_type_cfg.acc_low_g_int);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	60bb      	str	r3, [r7, #8]

        /* Enable the low-g interrupt*/
        rslt = enable_low_g_int(low_g_int, dev);
 8004f9c:	6839      	ldr	r1, [r7, #0]
 8004f9e:	68b8      	ldr	r0, [r7, #8]
 8004fa0:	f001 ffa0 	bl	8006ee4 <enable_low_g_int>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d123      	bne.n	8004ff8 <set_accel_low_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8004fb0:	6839      	ldr	r1, [r7, #0]
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f871 	bl	800509a <set_intr_pin_config>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d119      	bne.n	8004ff8 <set_accel_low_g_int+0x8a>
            {
                /* Map INT pin to low-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 ffe4 	bl	8005f94 <map_feature_interrupt>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10f      	bne.n	8004ff8 <set_accel_low_g_int+0x8a>
                {
                    /* configure the data source
                     * for low-g interrupt*/
                    rslt = config_low_g_data_src(low_g_int, dev);
 8004fd8:	6839      	ldr	r1, [r7, #0]
 8004fda:	68b8      	ldr	r0, [r7, #8]
 8004fdc:	f001 ffbb 	bl	8006f56 <config_low_g_data_src>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 8004fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d105      	bne.n	8004ff8 <set_accel_low_g_int+0x8a>
                    {
                        rslt = config_low_g_int_settg(low_g_int, dev);
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	68b8      	ldr	r0, [r7, #8]
 8004ff0:	f001 ffe8 	bl	8006fc4 <config_low_g_int_settg>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <set_accel_high_g_int>:
 * occurs if the absolute value of acceleration data of any enabled axis
 * exceeds the programmed threshold and the sign of the value does not
 * change for a preset duration.
 */
static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800500e:	6838      	ldr	r0, [r7, #0]
 8005010:	f000 f85e 	bl	80050d0 <null_ptr_check>
 8005014:	4603      	mov	r3, r0
 8005016:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8005018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d102      	bne.n	8005026 <set_accel_high_g_int+0x22>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d102      	bne.n	800502c <set_accel_high_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8005026:	23ff      	movs	r3, #255	@ 0xff
 8005028:	73fb      	strb	r3, [r7, #15]
 800502a:	e030      	b.n	800508e <set_accel_high_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_high_g_int_cfg *high_g_int_cfg = &(int_config->int_type_cfg.acc_high_g_int);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3304      	adds	r3, #4
 8005030:	60bb      	str	r3, [r7, #8]

        /* Enable the high-g interrupt */
        rslt = enable_high_g_int(high_g_int_cfg, dev);
 8005032:	6839      	ldr	r1, [r7, #0]
 8005034:	68b8      	ldr	r0, [r7, #8]
 8005036:	f002 f81d 	bl	8007074 <enable_high_g_int>
 800503a:	4603      	mov	r3, r0
 800503c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800503e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d123      	bne.n	800508e <set_accel_high_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8005046:	6839      	ldr	r1, [r7, #0]
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f826 	bl	800509a <set_intr_pin_config>
 800504e:	4603      	mov	r3, r0
 8005050:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8005052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d119      	bne.n	800508e <set_accel_high_g_int+0x8a>
            {
                /* Map INT pin to high-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 800505a:	6839      	ldr	r1, [r7, #0]
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 ff99 	bl	8005f94 <map_feature_interrupt>
 8005062:	4603      	mov	r3, r0
 8005064:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8005066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10f      	bne.n	800508e <set_accel_high_g_int+0x8a>
                {
                    /* configure the data source
                     * for high-g interrupt*/
                    rslt = config_high_g_data_src(high_g_int_cfg, dev);
 800506e:	6839      	ldr	r1, [r7, #0]
 8005070:	68b8      	ldr	r0, [r7, #8]
 8005072:	f002 f85a 	bl	800712a <config_high_g_data_src>
 8005076:	4603      	mov	r3, r0
 8005078:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 800507a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d105      	bne.n	800508e <set_accel_high_g_int+0x8a>
                    {
                        rslt = config_high_g_int_settg(high_g_int_cfg, dev);
 8005082:	6839      	ldr	r1, [r7, #0]
 8005084:	68b8      	ldr	r0, [r7, #8]
 8005086:	f002 f887 	bl	8007198 <config_high_g_int_settg>
 800508a:	4603      	mov	r3, r0
 800508c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800508e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <set_intr_pin_config>:
/*!
 * @brief This API configures the pins to fire the
 * interrupt signal when it occurs.
 */
static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* configure the behavioural settings of interrupt pin */
    rslt = config_int_out_ctrl(int_config, dev);
 80050a4:	6839      	ldr	r1, [r7, #0]
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f002 f8bc 	bl	8007224 <config_int_out_ctrl>
 80050ac:	4603      	mov	r3, r0
 80050ae:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80050b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d105      	bne.n	80050c4 <set_intr_pin_config+0x2a>
    {
        rslt = config_int_latch(int_config, dev);
 80050b8:	6839      	ldr	r1, [r7, #0]
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f002 f977 	bl	80073ae <config_int_latch>
 80050c0:	4603      	mov	r3, r0
 80050c2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80050c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <null_ptr_check+0x26>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d007      	beq.n	80050f6 <null_ptr_check+0x26>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <null_ptr_check+0x26>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 80050f6:	23ff      	movs	r3, #255	@ 0xff
 80050f8:	73fb      	strb	r3, [r7, #15]
 80050fa:	e001      	b.n	8005100 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005100:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2208      	movs	r2, #8
 8005122:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2210      	movs	r2, #16
 8005128:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2203      	movs	r2, #3
 800512e:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2208      	movs	r2, #8
 800513a:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2214      	movs	r2, #20
 8005140:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6852      	ldr	r2, [r2, #4]
 800514e:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	68d2      	ldr	r2, [r2, #12]
 8005156:	611a      	str	r2, [r3, #16]
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 800516c:	2300      	movs	r3, #0
 800516e:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 8005170:	f107 030c 	add.w	r3, r7, #12
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4618      	mov	r0, r3
 8005178:	f000 f833 	bl	80051e2 <check_accel_config>
 800517c:	4603      	mov	r3, r0
 800517e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d126      	bne.n	80051d6 <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 8005188:	f107 010c 	add.w	r1, r7, #12
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	2040      	movs	r0, #64	@ 0x40
 8005192:	f7ff f9fe 	bl	8004592 <bmi160_set_regs>
 8005196:	4603      	mov	r3, r0
 8005198:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800519a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d119      	bne.n	80051d6 <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	795a      	ldrb	r2, [r3, #5]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	79da      	ldrb	r2, [r3, #7]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 80051b2:	f107 030c 	add.w	r3, r7, #12
 80051b6:	1c59      	adds	r1, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	2041      	movs	r0, #65	@ 0x41
 80051be:	f7ff f9e8 	bl	8004592 <bmi160_set_regs>
 80051c2:	4603      	mov	r3, r0
 80051c4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80051c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d103      	bne.n	80051d6 <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	799a      	ldrb	r2, [r3, #6]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 80051d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2202      	movs	r2, #2
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	2040      	movs	r0, #64	@ 0x40
 80051f4:	f7ff f99a 	bl	800452c <bmi160_get_regs>
 80051f8:	4603      	mov	r3, r0
 80051fa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80051fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d11b      	bne.n	800523c <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f81e 	bl	8005248 <process_accel_odr>
 800520c:	4603      	mov	r3, r0
 800520e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8005210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d111      	bne.n	800523c <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8005218:	6839      	ldr	r1, [r7, #0]
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f848 	bl	80052b0 <process_accel_bw>
 8005220:	4603      	mov	r3, r0
 8005222:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8005224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d107      	bne.n	800523c <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3301      	adds	r3, #1
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 f871 	bl	800531a <process_accel_range>
 8005238:	4603      	mov	r3, r0
 800523a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800523c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8005252:	2300      	movs	r3, #0
 8005254:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 800525a:	2300      	movs	r3, #0
 800525c:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	795b      	ldrb	r3, [r3, #5]
 8005262:	2b0c      	cmp	r3, #12
 8005264:	d81a      	bhi.n	800529c <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	795a      	ldrb	r2, [r3, #5]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	7a5b      	ldrb	r3, [r3, #9]
 800526e:	429a      	cmp	r2, r3
 8005270:	d016      	beq.n	80052a0 <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	795b      	ldrb	r3, [r3, #5]
 8005276:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f023 030f 	bic.w	r3, r3, #15
 8005280:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8005282:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	b25a      	sxtb	r2, r3
 800528c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005290:	4313      	orrs	r3, r2
 8005292:	b25b      	sxtb	r3, r3
 8005294:	b2da      	uxtb	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	e001      	b.n	80052a0 <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800529c:	23fc      	movs	r3, #252	@ 0xfc
 800529e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80052a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	79db      	ldrb	r3, [r3, #7]
 80052ca:	2b07      	cmp	r3, #7
 80052cc:	d81b      	bhi.n	8005306 <process_accel_bw+0x56>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	79da      	ldrb	r2, [r3, #7]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	7adb      	ldrb	r3, [r3, #11]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d017      	beq.n	800530a <process_accel_bw+0x5a>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	79db      	ldrb	r3, [r3, #7]
 80052de:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e8:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 80052ea:	7b7b      	ldrb	r3, [r7, #13]
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	b25b      	sxtb	r3, r3
 80052f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052f4:	b25a      	sxtb	r2, r3
 80052f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	b25b      	sxtb	r3, r3
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	e001      	b.n	800530a <process_accel_bw+0x5a>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8005306:	23fc      	movs	r3, #252	@ 0xfc
 8005308:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800530a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8005328:	2300      	movs	r3, #0
 800532a:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	799b      	ldrb	r3, [r3, #6]
 8005334:	2b0c      	cmp	r3, #12
 8005336:	d81a      	bhi.n	800536e <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	799a      	ldrb	r2, [r3, #6]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	7a9b      	ldrb	r3, [r3, #10]
 8005340:	429a      	cmp	r2, r3
 8005342:	d016      	beq.n	8005372 <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	799b      	ldrb	r3, [r3, #6]
 8005348:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	f023 030f 	bic.w	r3, r3, #15
 8005352:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8005354:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	b25a      	sxtb	r2, r3
 800535e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005362:	4313      	orrs	r3, r2
 8005364:	b25b      	sxtb	r3, r3
 8005366:	b2da      	uxtb	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	e001      	b.n	8005372 <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800536e:	23fc      	movs	r3, #252	@ 0xfc
 8005370:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005372:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 800538e:	f107 010e 	add.w	r1, r7, #14
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	2002      	movs	r0, #2
 8005398:	f7ff f8c8 	bl	800452c <bmi160_get_regs>
 800539c:	4603      	mov	r3, r0
 800539e:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 80053a0:	7bbb      	ldrb	r3, [r7, #14]
 80053a2:	085b      	lsrs	r3, r3, #1
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 80053a8:	7bbb      	ldrb	r3, [r7, #14]
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 80053b2:	7bbb      	ldrb	r3, [r7, #14]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d102      	bne.n	80053be <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 80053b8:	23fa      	movs	r3, #250	@ 0xfa
 80053ba:	73fb      	strb	r3, [r7, #15]
 80053bc:	e010      	b.n	80053e0 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 80053be:	7bbb      	ldrb	r3, [r7, #14]
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d102      	bne.n	80053ca <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 80053c4:	23f9      	movs	r3, #249	@ 0xf9
 80053c6:	73fb      	strb	r3, [r7, #15]
 80053c8:	e00a      	b.n	80053e0 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 80053ca:	7bbb      	ldrb	r3, [r7, #14]
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d102      	bne.n	80053d6 <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 80053d0:	23f8      	movs	r3, #248	@ 0xf8
 80053d2:	73fb      	strb	r3, [r7, #15]
 80053d4:	e004      	b.n	80053e0 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 80053d6:	7bbb      	ldrb	r3, [r7, #14]
 80053d8:	2b07      	cmp	r3, #7
 80053da:	d101      	bne.n	80053e0 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 80053dc:	23f7      	movs	r3, #247	@ 0xf7
 80053de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80053e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80053f4:	2300      	movs	r3, #0
 80053f6:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 80053f8:	f107 030c 	add.w	r3, r7, #12
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 f833 	bl	800546a <check_gyro_config>
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d126      	bne.n	800545e <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8005410:	f107 010c 	add.w	r1, r7, #12
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	2042      	movs	r0, #66	@ 0x42
 800541a:	f7ff f8ba 	bl	8004592 <bmi160_set_regs>
 800541e:	4603      	mov	r3, r0
 8005420:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8005422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d119      	bne.n	800545e <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	7b5a      	ldrb	r2, [r3, #13]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	7bda      	ldrb	r2, [r3, #15]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 800543a:	f107 030c 	add.w	r3, r7, #12
 800543e:	1c59      	adds	r1, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	2043      	movs	r0, #67	@ 0x43
 8005446:	f7ff f8a4 	bl	8004592 <bmi160_set_regs>
 800544a:	4603      	mov	r3, r0
 800544c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800544e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d103      	bne.n	800545e <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	7b9a      	ldrb	r2, [r3, #14]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 800545e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2202      	movs	r2, #2
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	2042      	movs	r0, #66	@ 0x42
 800547c:	f7ff f856 	bl	800452c <bmi160_get_regs>
 8005480:	4603      	mov	r3, r0
 8005482:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d11b      	bne.n	80054c4 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f81e 	bl	80054d0 <process_gyro_odr>
 8005494:	4603      	mov	r3, r0
 8005496:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8005498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d111      	bne.n	80054c4 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f848 	bl	8005538 <process_gyro_bw>
 80054a8:	4603      	mov	r3, r0
 80054aa:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80054ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d107      	bne.n	80054c4 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3301      	adds	r3, #1
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 f86b 	bl	8005596 <process_gyro_range>
 80054c0:	4603      	mov	r3, r0
 80054c2:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80054c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80054de:	2300      	movs	r3, #0
 80054e0:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	7b5b      	ldrb	r3, [r3, #13]
 80054ea:	2b0d      	cmp	r3, #13
 80054ec:	d81a      	bhi.n	8005524 <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	7b5a      	ldrb	r2, [r3, #13]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	7c5b      	ldrb	r3, [r3, #17]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d016      	beq.n	8005528 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	7b5b      	ldrb	r3, [r3, #13]
 80054fe:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	f023 030f 	bic.w	r3, r3, #15
 8005508:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 800550a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	b25a      	sxtb	r2, r3
 8005514:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005518:	4313      	orrs	r3, r2
 800551a:	b25b      	sxtb	r3, r3
 800551c:	b2da      	uxtb	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	e001      	b.n	8005528 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8005524:	23fc      	movs	r3, #252	@ 0xfc
 8005526:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005528:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	7bdb      	ldrb	r3, [r3, #15]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d815      	bhi.n	8005582 <process_gyro_bw+0x4a>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	7bdb      	ldrb	r3, [r3, #15]
 800555a:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005564:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8005566:	7b7b      	ldrb	r3, [r7, #13]
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	b25b      	sxtb	r3, r3
 800556c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005570:	b25a      	sxtb	r2, r3
 8005572:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005576:	4313      	orrs	r3, r2
 8005578:	b25b      	sxtb	r3, r3
 800557a:	b2da      	uxtb	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	701a      	strb	r2, [r3, #0]
 8005580:	e001      	b.n	8005586 <process_gyro_bw+0x4e>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8005582:	23fc      	movs	r3, #252	@ 0xfc
 8005584:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005586:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8005596:	b480      	push	{r7}
 8005598:	b085      	sub	sp, #20
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80055a4:	2300      	movs	r3, #0
 80055a6:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 80055a8:	2300      	movs	r3, #0
 80055aa:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	7b9b      	ldrb	r3, [r3, #14]
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d81a      	bhi.n	80055ea <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	7b9a      	ldrb	r2, [r3, #14]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	7c9b      	ldrb	r3, [r3, #18]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d016      	beq.n	80055ee <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	7b9b      	ldrb	r3, [r3, #14]
 80055c4:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	f023 0307 	bic.w	r3, r3, #7
 80055ce:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 80055d0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	b25a      	sxtb	r2, r3
 80055da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055de:	4313      	orrs	r3, r2
 80055e0:	b25b      	sxtb	r3, r3
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	701a      	strb	r2, [r3, #0]
 80055e8:	e001      	b.n	80055ee <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80055ea:	23fc      	movs	r3, #252	@ 0xfc
 80055ec:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80055ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8005606:	2300      	movs	r3, #0
 8005608:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	791b      	ldrb	r3, [r3, #4]
 8005612:	2b0f      	cmp	r3, #15
 8005614:	d92b      	bls.n	800566e <set_accel_pwr+0x70>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	791b      	ldrb	r3, [r3, #4]
 800561a:	2b12      	cmp	r3, #18
 800561c:	d827      	bhi.n	800566e <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	791a      	ldrb	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	7a1b      	ldrb	r3, [r3, #8]
 8005626:	429a      	cmp	r2, r3
 8005628:	d024      	beq.n	8005674 <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 800562a:	f107 030e 	add.w	r3, r7, #14
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	4618      	mov	r0, r3
 8005632:	f000 f826 	bl	8005682 <process_under_sampling>
 8005636:	4603      	mov	r3, r0
 8005638:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800563a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d118      	bne.n	8005674 <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	1d19      	adds	r1, r3, #4
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	207e      	movs	r0, #126	@ 0x7e
 800564c:	f7fe ffa1 	bl	8004592 <bmi160_set_regs>
 8005650:	4603      	mov	r3, r0
 8005652:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	7a1b      	ldrb	r3, [r3, #8]
 8005658:	2b10      	cmp	r3, #16
 800565a:	d103      	bne.n	8005664 <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005660:	2005      	movs	r0, #5
 8005662:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	791a      	ldrb	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800566c:	e002      	b.n	8005674 <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 800566e:	23f3      	movs	r3, #243	@ 0xf3
 8005670:	73fb      	strb	r3, [r7, #15]
 8005672:	e000      	b.n	8005676 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8005674:	bf00      	nop
    }

    return rslt;
 8005676:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 8005690:	2300      	movs	r3, #0
 8005692:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2201      	movs	r2, #1
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	2040      	movs	r0, #64	@ 0x40
 800569c:	f7fe ff46 	bl	800452c <bmi160_get_regs>
 80056a0:	4603      	mov	r3, r0
 80056a2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80056a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d139      	bne.n	8005720 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	791b      	ldrb	r3, [r3, #4]
 80056b0:	2b12      	cmp	r3, #18
 80056b2:	d120      	bne.n	80056f6 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056bc:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 80056be:	7bbb      	ldrb	r3, [r7, #14]
 80056c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2201      	movs	r2, #1
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	2040      	movs	r0, #64	@ 0x40
 80056d2:	f7fe ff5e 	bl	8004592 <bmi160_set_regs>
 80056d6:	4603      	mov	r3, r0
 80056d8:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 80056da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d11e      	bne.n	8005720 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 80056e2:	f107 010c 	add.w	r1, r7, #12
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2202      	movs	r2, #2
 80056ea:	2058      	movs	r0, #88	@ 0x58
 80056ec:	f7fe ff51 	bl	8004592 <bmi160_set_regs>
 80056f0:	4603      	mov	r3, r0
 80056f2:	73fb      	strb	r3, [r7, #15]
 80056f4:	e014      	b.n	8005720 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	b25b      	sxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	da0f      	bge.n	8005720 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005708:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	7bba      	ldrb	r2, [r7, #14]
 800570e:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2201      	movs	r2, #1
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	2040      	movs	r0, #64	@ 0x40
 8005718:	f7fe ff3b 	bl	8004592 <bmi160_set_regs>
 800571c:	4603      	mov	r3, r0
 800571e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005720:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	7b1b      	ldrb	r3, [r3, #12]
 800573c:	2b14      	cmp	r3, #20
 800573e:	d007      	beq.n	8005750 <set_gyro_pwr+0x24>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	7b1b      	ldrb	r3, [r3, #12]
 8005744:	2b15      	cmp	r3, #21
 8005746:	d003      	beq.n	8005750 <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 800574c:	2b17      	cmp	r3, #23
 800574e:	d129      	bne.n	80057a4 <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	7b1a      	ldrb	r2, [r3, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	7c1b      	ldrb	r3, [r3, #16]
 8005758:	429a      	cmp	r2, r3
 800575a:	d025      	beq.n	80057a8 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f103 010c 	add.w	r1, r3, #12
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	207e      	movs	r0, #126	@ 0x7e
 8005768:	f7fe ff13 	bl	8004592 <bmi160_set_regs>
 800576c:	4603      	mov	r3, r0
 800576e:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	7c1b      	ldrb	r3, [r3, #16]
 8005774:	2b14      	cmp	r3, #20
 8005776:	d104      	bne.n	8005782 <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577c:	2050      	movs	r0, #80	@ 0x50
 800577e:	4798      	blx	r3
 8005780:	e00b      	b.n	800579a <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	7c1b      	ldrb	r3, [r3, #16]
 8005786:	2b17      	cmp	r3, #23
 8005788:	d107      	bne.n	800579a <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 800578e:	2b15      	cmp	r3, #21
 8005790:	d103      	bne.n	800579a <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005796:	200a      	movs	r0, #10
 8005798:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	7b1a      	ldrb	r2, [r3, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 80057a2:	e001      	b.n	80057a8 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 80057a4:	23f3      	movs	r3, #243	@ 0xf3
 80057a6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80057a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08c      	sub	sp, #48	@ 0x30
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	4603      	mov	r3, r0
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[9] = { 0 };
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	f107 0318 	add.w	r3, r7, #24
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	711a      	strb	r2, [r3, #4]
    uint8_t time_0 = 0;
 80057d6:	2300      	movs	r3, #0
 80057d8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	3306      	adds	r3, #6
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	f107 0114 	add.w	r1, r7, #20
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2012      	movs	r0, #18
 80057f4:	f7fe fe9a 	bl	800452c <bmi160_get_regs>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 80057fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005802:	2b00      	cmp	r3, #0
 8005804:	f040 8097 	bne.w	8005936 <get_accel_data+0x182>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 8005808:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005812:	3330      	adds	r3, #48	@ 0x30
 8005814:	443b      	add	r3, r7
 8005816:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800581a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800581e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005828:	3330      	adds	r3, #48	@ 0x30
 800582a:	443b      	add	r3, r7
 800582c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005830:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005834:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	b21a      	sxth	r2, r3
 800583c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005840:	b21b      	sxth	r3, r3
 8005842:	4313      	orrs	r3, r2
 8005844:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	8c3a      	ldrh	r2, [r7, #32]
 800584a:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 800584c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005856:	3330      	adds	r3, #48	@ 0x30
 8005858:	443b      	add	r3, r7
 800585a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800585e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005862:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800586c:	3330      	adds	r3, #48	@ 0x30
 800586e:	443b      	add	r3, r7
 8005870:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005874:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005878:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800587c:	021b      	lsls	r3, r3, #8
 800587e:	b21a      	sxth	r2, r3
 8005880:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005884:	b21b      	sxth	r3, r3
 8005886:	4313      	orrs	r3, r2
 8005888:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	8c3a      	ldrh	r2, [r7, #32]
 800588e:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8005890:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800589a:	3330      	adds	r3, #48	@ 0x30
 800589c:	443b      	add	r3, r7
 800589e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80058a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80058b0:	3330      	adds	r3, #48	@ 0x30
 80058b2:	443b      	add	r3, r7
 80058b4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80058b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80058bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	b21a      	sxth	r2, r3
 80058c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058c8:	b21b      	sxth	r3, r3
 80058ca:	4313      	orrs	r3, r2
 80058cc:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	8c3a      	ldrh	r2, [r7, #32]
 80058d2:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d129      	bne.n	800592e <get_accel_data+0x17a>
        {
            time_0 = data_array[idx++];
 80058da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80058e4:	3330      	adds	r3, #48	@ 0x30
 80058e6:	443b      	add	r3, r7
 80058e8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80058ec:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 80058f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80058fa:	3330      	adds	r3, #48	@ 0x30
 80058fc:	443b      	add	r3, r7
 80058fe:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005906:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005910:	3330      	adds	r3, #48	@ 0x30
 8005912:	443b      	add	r3, r7
 8005914:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005918:	041b      	lsls	r3, r3, #16
 800591a:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800591c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	431a      	orrs	r2, r3
 8005922:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005926:	431a      	orrs	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	609a      	str	r2, [r3, #8]
 800592c:	e006      	b.n	800593c <get_accel_data+0x188>
        }
        else
        {
            accel->sensortime = 0;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2200      	movs	r2, #0
 8005932:	609a      	str	r2, [r3, #8]
 8005934:	e002      	b.n	800593c <get_accel_data+0x188>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8005936:	23fe      	movs	r3, #254	@ 0xfe
 8005938:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 800593c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005940:	4618      	mov	r0, r3
 8005942:	3730      	adds	r7, #48	@ 0x30
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08c      	sub	sp, #48	@ 0x30
 800594c:	af00      	add	r7, sp, #0
 800594e:	4603      	mov	r3, r0
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 800595c:	2300      	movs	r3, #0
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	f107 0314 	add.w	r3, r7, #20
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	605a      	str	r2, [r3, #4]
 800596a:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 800596e:	2300      	movs	r3, #0
 8005970:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d17b      	bne.n	8005a7a <get_gyro_data+0x132>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 8005982:	f107 0110 	add.w	r1, r7, #16
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2206      	movs	r2, #6
 800598a:	200c      	movs	r0, #12
 800598c:	f7fe fdce 	bl	800452c <bmi160_get_regs>
 8005990:	4603      	mov	r3, r0
 8005992:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 8005996:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800599a:	2b00      	cmp	r3, #0
 800599c:	d169      	bne.n	8005a72 <get_gyro_data+0x12a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 800599e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80059a8:	3330      	adds	r3, #48	@ 0x30
 80059aa:	443b      	add	r3, r7
 80059ac:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80059b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80059b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80059be:	3330      	adds	r3, #48	@ 0x30
 80059c0:	443b      	add	r3, r7
 80059c2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80059c6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80059ca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	b21a      	sxth	r2, r3
 80059d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059d6:	b21b      	sxth	r3, r3
 80059d8:	4313      	orrs	r3, r2
 80059da:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	8c3a      	ldrh	r2, [r7, #32]
 80059e0:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 80059e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80059ec:	3330      	adds	r3, #48	@ 0x30
 80059ee:	443b      	add	r3, r7
 80059f0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80059f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80059f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005a02:	3330      	adds	r3, #48	@ 0x30
 8005a04:	443b      	add	r3, r7
 8005a06:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a0a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005a0e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005a12:	021b      	lsls	r3, r3, #8
 8005a14:	b21a      	sxth	r2, r3
 8005a16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a1a:	b21b      	sxth	r3, r3
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	8c3a      	ldrh	r2, [r7, #32]
 8005a24:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8005a26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005a30:	3330      	adds	r3, #48	@ 0x30
 8005a32:	443b      	add	r3, r7
 8005a34:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005a3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005a46:	3330      	adds	r3, #48	@ 0x30
 8005a48:	443b      	add	r3, r7
 8005a4a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a4e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005a52:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	b21a      	sxth	r2, r3
 8005a5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a5e:	b21b      	sxth	r3, r3
 8005a60:	4313      	orrs	r3, r2
 8005a62:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	8c3a      	ldrh	r2, [r7, #32]
 8005a68:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	609a      	str	r2, [r3, #8]
 8005a70:	e0ad      	b.n	8005bce <get_gyro_data+0x286>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8005a72:	23fe      	movs	r3, #254	@ 0xfe
 8005a74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005a78:	e0a9      	b.n	8005bce <get_gyro_data+0x286>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	330c      	adds	r3, #12
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	f107 0110 	add.w	r1, r7, #16
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	200c      	movs	r0, #12
 8005a8a:	f7fe fd4f 	bl	800452c <bmi160_get_regs>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 8005a94:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f040 8095 	bne.w	8005bc8 <get_gyro_data+0x280>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8005a9e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005aa8:	3330      	adds	r3, #48	@ 0x30
 8005aaa:	443b      	add	r3, r7
 8005aac:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005ab0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005ab4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005abe:	3330      	adds	r3, #48	@ 0x30
 8005ac0:	443b      	add	r3, r7
 8005ac2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005ac6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005aca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005ace:	021b      	lsls	r3, r3, #8
 8005ad0:	b21a      	sxth	r2, r3
 8005ad2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ad6:	b21b      	sxth	r3, r3
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	8c3a      	ldrh	r2, [r7, #32]
 8005ae0:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8005ae2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005aec:	3330      	adds	r3, #48	@ 0x30
 8005aee:	443b      	add	r3, r7
 8005af0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005af4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005af8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b02:	3330      	adds	r3, #48	@ 0x30
 8005b04:	443b      	add	r3, r7
 8005b06:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b0a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005b0e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005b12:	021b      	lsls	r3, r3, #8
 8005b14:	b21a      	sxth	r2, r3
 8005b16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b1a:	b21b      	sxth	r3, r3
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	8c3a      	ldrh	r2, [r7, #32]
 8005b24:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8005b26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b30:	3330      	adds	r3, #48	@ 0x30
 8005b32:	443b      	add	r3, r7
 8005b34:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005b3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b46:	3330      	adds	r3, #48	@ 0x30
 8005b48:	443b      	add	r3, r7
 8005b4a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b4e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005b52:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005b56:	021b      	lsls	r3, r3, #8
 8005b58:	b21a      	sxth	r2, r3
 8005b5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b5e:	b21b      	sxth	r3, r3
 8005b60:	4313      	orrs	r3, r2
 8005b62:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	8c3a      	ldrh	r2, [r7, #32]
 8005b68:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 8005b6a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b6e:	3306      	adds	r3, #6
 8005b70:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            time_0 = data_array[idx++];
 8005b74:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b7e:	3330      	adds	r3, #48	@ 0x30
 8005b80:	443b      	add	r3, r7
 8005b82:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b86:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8005b8a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b94:	3330      	adds	r3, #48	@ 0x30
 8005b96:	443b      	add	r3, r7
 8005b98:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005ba0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005baa:	3330      	adds	r3, #48	@ 0x30
 8005bac:	443b      	add	r3, r7
 8005bae:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	627b      	str	r3, [r7, #36]	@ 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005bb6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	609a      	str	r2, [r3, #8]
 8005bc6:	e002      	b.n	8005bce <get_gyro_data+0x286>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8005bc8:	23fe      	movs	r3, #254	@ 0xfe
 8005bca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
    }

    return rslt;
 8005bce:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3730      	adds	r7, #48	@ 0x30
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b08c      	sub	sp, #48	@ 0x30
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
 8005be6:	4603      	mov	r3, r0
 8005be8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	613b      	str	r3, [r7, #16]
 8005bf4:	f107 0314 	add.w	r3, r7, #20
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	605a      	str	r2, [r3, #4]
 8005bfe:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	330c      	adds	r3, #12
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	f107 0110 	add.w	r1, r7, #16
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	200c      	movs	r0, #12
 8005c20:	f7fe fc84 	bl	800452c <bmi160_get_regs>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 8005c2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f040 8108 	bne.w	8005e44 <get_accel_gyro_data+0x26a>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 8005c34:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005c3e:	3330      	adds	r3, #48	@ 0x30
 8005c40:	443b      	add	r3, r7
 8005c42:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005c4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005c54:	3330      	adds	r3, #48	@ 0x30
 8005c56:	443b      	add	r3, r7
 8005c58:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005c5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005c60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	b21a      	sxth	r2, r3
 8005c68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c6c:	b21b      	sxth	r3, r3
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	8c3a      	ldrh	r2, [r7, #32]
 8005c76:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8005c78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005c82:	3330      	adds	r3, #48	@ 0x30
 8005c84:	443b      	add	r3, r7
 8005c86:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005c8e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005c98:	3330      	adds	r3, #48	@ 0x30
 8005c9a:	443b      	add	r3, r7
 8005c9c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005ca0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005ca4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005ca8:	021b      	lsls	r3, r3, #8
 8005caa:	b21a      	sxth	r2, r3
 8005cac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005cb0:	b21b      	sxth	r3, r3
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	8c3a      	ldrh	r2, [r7, #32]
 8005cba:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8005cbc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005cc6:	3330      	adds	r3, #48	@ 0x30
 8005cc8:	443b      	add	r3, r7
 8005cca:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005cd2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005cdc:	3330      	adds	r3, #48	@ 0x30
 8005cde:	443b      	add	r3, r7
 8005ce0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005ce4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005ce8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	b21a      	sxth	r2, r3
 8005cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005cf4:	b21b      	sxth	r3, r3
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	8c3a      	ldrh	r2, [r7, #32]
 8005cfe:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 8005d00:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005d0a:	3330      	adds	r3, #48	@ 0x30
 8005d0c:	443b      	add	r3, r7
 8005d0e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005d16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005d20:	3330      	adds	r3, #48	@ 0x30
 8005d22:	443b      	add	r3, r7
 8005d24:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005d28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005d2c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005d30:	021b      	lsls	r3, r3, #8
 8005d32:	b21a      	sxth	r2, r3
 8005d34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d38:	b21b      	sxth	r3, r3
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	8c3a      	ldrh	r2, [r7, #32]
 8005d42:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8005d44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005d4e:	3330      	adds	r3, #48	@ 0x30
 8005d50:	443b      	add	r3, r7
 8005d52:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005d5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005d64:	3330      	adds	r3, #48	@ 0x30
 8005d66:	443b      	add	r3, r7
 8005d68:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005d6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005d70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	b21a      	sxth	r2, r3
 8005d78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d7c:	b21b      	sxth	r3, r3
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	8c3a      	ldrh	r2, [r7, #32]
 8005d86:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8005d88:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005d92:	3330      	adds	r3, #48	@ 0x30
 8005d94:	443b      	add	r3, r7
 8005d96:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005d9e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005da8:	3330      	adds	r3, #48	@ 0x30
 8005daa:	443b      	add	r3, r7
 8005dac:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005db0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005db4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	b21a      	sxth	r2, r3
 8005dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005dc0:	b21b      	sxth	r3, r3
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	8c3a      	ldrh	r2, [r7, #32]
 8005dca:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d131      	bne.n	8005e36 <get_accel_gyro_data+0x25c>
        {
            time_0 = data_array[idx++];
 8005dd2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005ddc:	3330      	adds	r3, #48	@ 0x30
 8005dde:	443b      	add	r3, r7
 8005de0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005de4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8005de8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005df2:	3330      	adds	r3, #48	@ 0x30
 8005df4:	443b      	add	r3, r7
 8005df6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005dfa:	021b      	lsls	r3, r3, #8
 8005dfc:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005dfe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005e08:	3330      	adds	r3, #48	@ 0x30
 8005e0a:	443b      	add	r3, r7
 8005e0c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005e10:	041b      	lsls	r3, r3, #16
 8005e12:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005e14:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005e24:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	609a      	str	r2, [r3, #8]
 8005e34:	e009      	b.n	8005e4a <get_accel_gyro_data+0x270>
        }
        else
        {
            accel->sensortime = 0;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	609a      	str	r2, [r3, #8]
 8005e42:	e002      	b.n	8005e4a <get_accel_gyro_data+0x270>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8005e44:	23fe      	movs	r3, #254	@ 0xfe
 8005e46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8005e4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3730      	adds	r7, #48	@ 0x30
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <enable_accel_any_motion_int>:
/*!
 * @brief This API enables the any-motion interrupt for accel.
 */
static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          struct bmi160_dev *dev)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8005e60:	2300      	movs	r3, #0
 8005e62:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	73bb      	strb	r3, [r7, #14]

    /* Enable any motion x, any motion y, any motion z
     * in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005e68:	f107 010d 	add.w	r1, r7, #13
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	2050      	movs	r0, #80	@ 0x50
 8005e72:	f7fe fb5b 	bl	800452c <bmi160_get_regs>
 8005e76:	4603      	mov	r3, r0
 8005e78:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d151      	bne.n	8005f26 <enable_accel_any_motion_int+0xd0>
    {
        if (any_motion_int_cfg->anymotion_en == BMI160_ENABLE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d039      	beq.n	8005f04 <enable_accel_any_motion_int+0xae>
        {
            temp = data & ~BMI160_ANY_MOTION_X_INT_EN_MASK;
 8005e90:	7b7b      	ldrb	r3, [r7, #13]
 8005e92:	f023 0301 	bic.w	r3, r3, #1
 8005e96:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion x axis */
            data = temp | (any_motion_int_cfg->anymotion_x & BMI160_ANY_MOTION_X_INT_EN_MASK);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	7bbb      	ldrb	r3, [r7, #14]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Y_INT_EN_MASK;
 8005eac:	7b7b      	ldrb	r3, [r7, #13]
 8005eae:	f023 0302 	bic.w	r3, r3, #2
 8005eb2:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion y axis */
            data = temp | ((any_motion_int_cfg->anymotion_y << 1) & BMI160_ANY_MOTION_Y_INT_EN_MASK);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	b25b      	sxtb	r3, r3
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	b25a      	sxtb	r2, r3
 8005ec8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	b25b      	sxtb	r3, r3
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Z_INT_EN_MASK;
 8005ed4:	7b7b      	ldrb	r3, [r7, #13]
 8005ed6:	f023 0304 	bic.w	r3, r3, #4
 8005eda:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion z axis */
            data = temp | ((any_motion_int_cfg->anymotion_z << 2) & BMI160_ANY_MOTION_Z_INT_EN_MASK);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	b25b      	sxtb	r3, r3
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	b25a      	sxtb	r2, r3
 8005ef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	b25b      	sxtb	r3, r3
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	737b      	strb	r3, [r7, #13]

            /* any-motion feature selected*/
            dev->any_sig_sel = BMI160_ANY_MOTION_ENABLED;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2200      	movs	r2, #0
 8005f00:	70da      	strb	r2, [r3, #3]
 8005f02:	e007      	b.n	8005f14 <enable_accel_any_motion_int+0xbe>
        }
        else
        {
            data = data & ~BMI160_ANY_MOTION_ALL_INT_EN_MASK;
 8005f04:	7b7b      	ldrb	r3, [r7, #13]
 8005f06:	f023 0307 	bic.w	r3, r3, #7
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	22ff      	movs	r2, #255	@ 0xff
 8005f12:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8005f14:	f107 010d 	add.w	r1, r7, #13
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	2050      	movs	r0, #80	@ 0x50
 8005f1e:	f7fe fb38 	bl	8004592 <bmi160_set_regs>
 8005f22:	4603      	mov	r3, r0
 8005f24:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <disable_sig_motion_int>:

/*!
 * @brief This API disable the sig-motion interrupt.
 */
static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	73bb      	strb	r3, [r7, #14]

    /* Disabling Significant motion interrupt if enabled */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005f42:	f107 010d 	add.w	r1, r7, #13
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	2062      	movs	r0, #98	@ 0x62
 8005f4c:	f7fe faee 	bl	800452c <bmi160_get_regs>
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d115      	bne.n	8005f88 <disable_sig_motion_int+0x56>
    {
        temp = (data & BMI160_SIG_MOTION_SEL_MASK);
 8005f5c:	7b7b      	ldrb	r3, [r7, #13]
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	73bb      	strb	r3, [r7, #14]
        if (temp)
 8005f64:	7bbb      	ldrb	r3, [r7, #14]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00e      	beq.n	8005f88 <disable_sig_motion_int+0x56>
        {
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8005f6a:	7b7b      	ldrb	r3, [r7, #13]
 8005f6c:	f023 0302 	bic.w	r3, r3, #2
 8005f70:	73bb      	strb	r3, [r7, #14]
            data = temp;
 8005f72:	7bbb      	ldrb	r3, [r7, #14]
 8005f74:	737b      	strb	r3, [r7, #13]

            /* Write data to register */
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8005f76:	f107 010d 	add.w	r1, r7, #13
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	2062      	movs	r0, #98	@ 0x62
 8005f80:	f7fe fb07 	bl	8004592 <bmi160_set_regs>
 8005f84:	4603      	mov	r3, r0
 8005f86:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <map_feature_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Any/Sig motion, Step det/Low-g,
 *  Double tap, Single tap, Orientation, Flat, High-G, Nomotion interrupt pins.
 */
static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[3] = { 0, 0, 0 };
 8005f9e:	4a48      	ldr	r2, [pc, #288]	@ (80060c0 <map_feature_interrupt+0x12c>)
 8005fa0:	f107 030c 	add.w	r3, r7, #12
 8005fa4:	6812      	ldr	r2, [r2, #0]
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	8019      	strh	r1, [r3, #0]
 8005faa:	3302      	adds	r3, #2
 8005fac:	0c12      	lsrs	r2, r2, #16
 8005fae:	701a      	strb	r2, [r3, #0]
    uint8_t temp[3] = { 0, 0, 0 };
 8005fb0:	4a43      	ldr	r2, [pc, #268]	@ (80060c0 <map_feature_interrupt+0x12c>)
 8005fb2:	f107 0308 	add.w	r3, r7, #8
 8005fb6:	6812      	ldr	r2, [r2, #0]
 8005fb8:	4611      	mov	r1, r2
 8005fba:	8019      	strh	r1, [r3, #0]
 8005fbc:	3302      	adds	r3, #2
 8005fbe:	0c12      	lsrs	r2, r2, #16
 8005fc0:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8005fc2:	f107 010c 	add.w	r1, r7, #12
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2203      	movs	r2, #3
 8005fca:	2055      	movs	r0, #85	@ 0x55
 8005fcc:	f7fe faae 	bl	800452c <bmi160_get_regs>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d16a      	bne.n	80060b2 <map_feature_interrupt+0x11e>
    {
        temp[0] = data[0] & ~int_mask_lookup_table[int_config->int_type];
 8005fdc:	7b3b      	ldrb	r3, [r7, #12]
 8005fde:	b25a      	sxtb	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	785b      	ldrb	r3, [r3, #1]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4b37      	ldr	r3, [pc, #220]	@ (80060c4 <map_feature_interrupt+0x130>)
 8005fe8:	5c5b      	ldrb	r3, [r3, r1]
 8005fea:	b25b      	sxtb	r3, r3
 8005fec:	43db      	mvns	r3, r3
 8005fee:	b25b      	sxtb	r3, r3
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	b25b      	sxtb	r3, r3
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	723b      	strb	r3, [r7, #8]
        temp[2] = data[2] & ~int_mask_lookup_table[int_config->int_type];
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	b25a      	sxtb	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	4619      	mov	r1, r3
 8006002:	4b30      	ldr	r3, [pc, #192]	@ (80060c4 <map_feature_interrupt+0x130>)
 8006004:	5c5b      	ldrb	r3, [r3, r1]
 8006006:	b25b      	sxtb	r3, r3
 8006008:	43db      	mvns	r3, r3
 800600a:	b25b      	sxtb	r3, r3
 800600c:	4013      	ands	r3, r2
 800600e:	b25b      	sxtb	r3, r3
 8006010:	b2db      	uxtb	r3, r3
 8006012:	72bb      	strb	r3, [r7, #10]
        switch (int_config->int_channel)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b03      	cmp	r3, #3
 800601a:	d83b      	bhi.n	8006094 <map_feature_interrupt+0x100>
 800601c:	a201      	add	r2, pc, #4	@ (adr r2, 8006024 <map_feature_interrupt+0x90>)
 800601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006022:	bf00      	nop
 8006024:	08006035 	.word	0x08006035
 8006028:	0800603f 	.word	0x0800603f
 800602c:	08006057 	.word	0x08006057
 8006030:	0800606f 	.word	0x0800606f
        {
            case BMI160_INT_CHANNEL_NONE:
                data[0] = temp[0];
 8006034:	7a3b      	ldrb	r3, [r7, #8]
 8006036:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8006038:	7abb      	ldrb	r3, [r7, #10]
 800603a:	73bb      	strb	r3, [r7, #14]
                break;
 800603c:	e02c      	b.n	8006098 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_1:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 800603e:	7a3a      	ldrb	r2, [r7, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	785b      	ldrb	r3, [r3, #1]
 8006044:	4619      	mov	r1, r3
 8006046:	4b1f      	ldr	r3, [pc, #124]	@ (80060c4 <map_feature_interrupt+0x130>)
 8006048:	5c5b      	ldrb	r3, [r3, r1]
 800604a:	4313      	orrs	r3, r2
 800604c:	b2db      	uxtb	r3, r3
 800604e:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8006050:	7abb      	ldrb	r3, [r7, #10]
 8006052:	73bb      	strb	r3, [r7, #14]
                break;
 8006054:	e020      	b.n	8006098 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_2:
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8006056:	7aba      	ldrb	r2, [r7, #10]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	4619      	mov	r1, r3
 800605e:	4b19      	ldr	r3, [pc, #100]	@ (80060c4 <map_feature_interrupt+0x130>)
 8006060:	5c5b      	ldrb	r3, [r3, r1]
 8006062:	4313      	orrs	r3, r2
 8006064:	b2db      	uxtb	r3, r3
 8006066:	73bb      	strb	r3, [r7, #14]
                data[0] = temp[0];
 8006068:	7a3b      	ldrb	r3, [r7, #8]
 800606a:	733b      	strb	r3, [r7, #12]
                break;
 800606c:	e014      	b.n	8006098 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_BOTH:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 800606e:	7a3a      	ldrb	r2, [r7, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	785b      	ldrb	r3, [r3, #1]
 8006074:	4619      	mov	r1, r3
 8006076:	4b13      	ldr	r3, [pc, #76]	@ (80060c4 <map_feature_interrupt+0x130>)
 8006078:	5c5b      	ldrb	r3, [r3, r1]
 800607a:	4313      	orrs	r3, r2
 800607c:	b2db      	uxtb	r3, r3
 800607e:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8006080:	7aba      	ldrb	r2, [r7, #10]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	785b      	ldrb	r3, [r3, #1]
 8006086:	4619      	mov	r1, r3
 8006088:	4b0e      	ldr	r3, [pc, #56]	@ (80060c4 <map_feature_interrupt+0x130>)
 800608a:	5c5b      	ldrb	r3, [r3, r1]
 800608c:	4313      	orrs	r3, r2
 800608e:	b2db      	uxtb	r3, r3
 8006090:	73bb      	strb	r3, [r7, #14]
                break;
 8006092:	e001      	b.n	8006098 <map_feature_interrupt+0x104>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8006094:	23fc      	movs	r3, #252	@ 0xfc
 8006096:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8006098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d108      	bne.n	80060b2 <map_feature_interrupt+0x11e>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 80060a0:	f107 010c 	add.w	r1, r7, #12
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2203      	movs	r2, #3
 80060a8:	2055      	movs	r0, #85	@ 0x55
 80060aa:	f7fe fa72 	bl	8004592 <bmi160_set_regs>
 80060ae:	4603      	mov	r3, r0
 80060b0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80060b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	0801ab28 	.word	0x0801ab28
 80060c4:	0801ccfc 	.word	0x0801ccfc

080060c8 <map_hardware_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Dataready(Accel & Gyro), FIFO full
 *  and FIFO watermark interrupt.
 */
static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80060d2:	2300      	movs	r3, #0
 80060d4:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80060d6:	2300      	movs	r3, #0
 80060d8:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 80060da:	f107 010d 	add.w	r1, r7, #13
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2201      	movs	r2, #1
 80060e2:	2056      	movs	r0, #86	@ 0x56
 80060e4:	f7fe fa22 	bl	800452c <bmi160_get_regs>
 80060e8:	4603      	mov	r3, r0
 80060ea:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80060ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d168      	bne.n	80061c6 <map_hardware_interrupt+0xfe>
    {
        temp = data & ~int_mask_lookup_table[int_config->int_type];
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	785b      	ldrb	r3, [r3, #1]
 80060f8:	461a      	mov	r2, r3
 80060fa:	4b36      	ldr	r3, [pc, #216]	@ (80061d4 <map_hardware_interrupt+0x10c>)
 80060fc:	5c9b      	ldrb	r3, [r3, r2]
 80060fe:	b25b      	sxtb	r3, r3
 8006100:	43db      	mvns	r3, r3
 8006102:	b25a      	sxtb	r2, r3
 8006104:	7b7b      	ldrb	r3, [r7, #13]
 8006106:	b25b      	sxtb	r3, r3
 8006108:	4013      	ands	r3, r2
 800610a:	b25b      	sxtb	r3, r3
 800610c:	73bb      	strb	r3, [r7, #14]
        temp = temp & ~((uint8_t)(int_mask_lookup_table[int_config->int_type] << 4));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	785b      	ldrb	r3, [r3, #1]
 8006112:	461a      	mov	r2, r3
 8006114:	4b2f      	ldr	r3, [pc, #188]	@ (80061d4 <map_hardware_interrupt+0x10c>)
 8006116:	5c9b      	ldrb	r3, [r3, r2]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	b2db      	uxtb	r3, r3
 800611c:	43db      	mvns	r3, r3
 800611e:	b2db      	uxtb	r3, r3
 8006120:	b25a      	sxtb	r2, r3
 8006122:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006126:	4013      	ands	r3, r2
 8006128:	b25b      	sxtb	r3, r3
 800612a:	73bb      	strb	r3, [r7, #14]
        switch (int_config->int_channel)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b03      	cmp	r3, #3
 8006132:	d839      	bhi.n	80061a8 <map_hardware_interrupt+0xe0>
 8006134:	a201      	add	r2, pc, #4	@ (adr r2, 800613c <map_hardware_interrupt+0x74>)
 8006136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613a:	bf00      	nop
 800613c:	0800614d 	.word	0x0800614d
 8006140:	08006153 	.word	0x08006153
 8006144:	0800616b 	.word	0x0800616b
 8006148:	0800617f 	.word	0x0800617f
        {
            case BMI160_INT_CHANNEL_NONE:
                data = temp;
 800614c:	7bbb      	ldrb	r3, [r7, #14]
 800614e:	737b      	strb	r3, [r7, #13]
                break;
 8006150:	e02c      	b.n	80061ac <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_1:
                data = temp | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	461a      	mov	r2, r3
 8006158:	4b1e      	ldr	r3, [pc, #120]	@ (80061d4 <map_hardware_interrupt+0x10c>)
 800615a:	5c9b      	ldrb	r3, [r3, r2]
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	b2da      	uxtb	r2, r3
 8006160:	7bbb      	ldrb	r3, [r7, #14]
 8006162:	4313      	orrs	r3, r2
 8006164:	b2db      	uxtb	r3, r3
 8006166:	737b      	strb	r3, [r7, #13]
                break;
 8006168:	e020      	b.n	80061ac <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_2:
                data = temp | int_mask_lookup_table[int_config->int_type];
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	461a      	mov	r2, r3
 8006170:	4b18      	ldr	r3, [pc, #96]	@ (80061d4 <map_hardware_interrupt+0x10c>)
 8006172:	5c9a      	ldrb	r2, [r3, r2]
 8006174:	7bbb      	ldrb	r3, [r7, #14]
 8006176:	4313      	orrs	r3, r2
 8006178:	b2db      	uxtb	r3, r3
 800617a:	737b      	strb	r3, [r7, #13]
                break;
 800617c:	e016      	b.n	80061ac <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_BOTH:
                data = temp | int_mask_lookup_table[int_config->int_type];
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	461a      	mov	r2, r3
 8006184:	4b13      	ldr	r3, [pc, #76]	@ (80061d4 <map_hardware_interrupt+0x10c>)
 8006186:	5c9a      	ldrb	r2, [r3, r2]
 8006188:	7bbb      	ldrb	r3, [r7, #14]
 800618a:	4313      	orrs	r3, r2
 800618c:	b2db      	uxtb	r3, r3
 800618e:	737b      	strb	r3, [r7, #13]
                data = data | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	785b      	ldrb	r3, [r3, #1]
 8006194:	461a      	mov	r2, r3
 8006196:	4b0f      	ldr	r3, [pc, #60]	@ (80061d4 <map_hardware_interrupt+0x10c>)
 8006198:	5c9b      	ldrb	r3, [r3, r2]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	b2da      	uxtb	r2, r3
 800619e:	7b7b      	ldrb	r3, [r7, #13]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	737b      	strb	r3, [r7, #13]
                break;
 80061a6:	e001      	b.n	80061ac <map_hardware_interrupt+0xe4>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 80061a8:	23fc      	movs	r3, #252	@ 0xfc
 80061aa:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 80061ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d108      	bne.n	80061c6 <map_hardware_interrupt+0xfe>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 80061b4:	f107 010d 	add.w	r1, r7, #13
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2201      	movs	r2, #1
 80061bc:	2056      	movs	r0, #86	@ 0x56
 80061be:	f7fe f9e8 	bl	8004592 <bmi160_set_regs>
 80061c2:	4603      	mov	r3, r0
 80061c4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80061c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	0801ccfc 	.word	0x0801ccfc

080061d8 <config_any_motion_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for any-motion interrupt.
 */
static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                    const struct bmi160_dev *dev)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80061ea:	f107 010d 	add.w	r1, r7, #13
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2201      	movs	r2, #1
 80061f2:	2059      	movs	r0, #89	@ 0x59
 80061f4:	f7fe f99a 	bl	800452c <bmi160_get_regs>
 80061f8:	4603      	mov	r3, r0
 80061fa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80061fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d119      	bne.n	8006238 <config_any_motion_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8006204:	7b7b      	ldrb	r3, [r7, #13]
 8006206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800620a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((any_motion_int_cfg->anymotion_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006214:	b2db      	uxtb	r3, r3
 8006216:	01db      	lsls	r3, r3, #7
 8006218:	b25a      	sxtb	r2, r3
 800621a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800621e:	4313      	orrs	r3, r2
 8006220:	b25b      	sxtb	r3, r3
 8006222:	b2db      	uxtb	r3, r3
 8006224:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8006226:	f107 010d 	add.w	r1, r7, #13
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2201      	movs	r2, #1
 800622e:	2059      	movs	r0, #89	@ 0x59
 8006230:	f7fe f9af 	bl	8004592 <bmi160_set_regs>
 8006234:	4603      	mov	r3, r0
 8006236:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006238:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <config_any_dur_threshold>:
 * @brief This API configure the duration and threshold of
 * any-motion interrupt.
 */
static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	733b      	strb	r3, [r7, #12]
    uint8_t temp = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[2] = { 0 };
 8006256:	2300      	movs	r3, #0
 8006258:	813b      	strh	r3, [r7, #8]
    uint8_t dur;

    /* Configure Int Motion 0 register */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_0_ADDR, &data, 1, dev);
 800625a:	f107 010c 	add.w	r1, r7, #12
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2201      	movs	r2, #1
 8006262:	205f      	movs	r0, #95	@ 0x5f
 8006264:	f7fe f962 	bl	800452c <bmi160_get_regs>
 8006268:	4603      	mov	r3, r0
 800626a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800626c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d122      	bne.n	80062ba <config_any_dur_threshold+0x76>
    {
        /* slope duration */
        dur = (uint8_t)any_motion_int_cfg->anymotion_dur;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800627c:	b2db      	uxtb	r3, r3
 800627e:	737b      	strb	r3, [r7, #13]
        temp = data & ~BMI160_SLOPE_INT_DUR_MASK;
 8006280:	7b3b      	ldrb	r3, [r7, #12]
 8006282:	f023 0303 	bic.w	r3, r3, #3
 8006286:	73bb      	strb	r3, [r7, #14]
        data = temp | (dur & BMI160_MOTION_SRC_INT_MASK);
 8006288:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800628c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006290:	b25a      	sxtb	r2, r3
 8006292:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006296:	4313      	orrs	r3, r2
 8006298:	b25b      	sxtb	r3, r3
 800629a:	b2db      	uxtb	r3, r3
 800629c:	733b      	strb	r3, [r7, #12]
        data_array[0] = data;
 800629e:	7b3b      	ldrb	r3, [r7, #12]
 80062a0:	723b      	strb	r3, [r7, #8]

        /* add slope threshold */
        data_array[1] = any_motion_int_cfg->anymotion_thr;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	785b      	ldrb	r3, [r3, #1]
 80062a6:	727b      	strb	r3, [r7, #9]
        /* INT MOTION 0 and INT MOTION 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Int_motion 0 and
         * Int_motion 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_MOTION_0_ADDR, data_array, 2, dev);
 80062a8:	f107 0108 	add.w	r1, r7, #8
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2202      	movs	r2, #2
 80062b0:	205f      	movs	r0, #95	@ 0x5f
 80062b2:	f7fe f96e 	bl	8004592 <bmi160_set_regs>
 80062b6:	4603      	mov	r3, r0
 80062b8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80062ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <config_any_motion_int_settg>:
 * @brief This API configure necessary setting of any-motion interrupt.
 */
static int8_t config_any_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          const struct bmi160_dev *dev)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b086      	sub	sp, #24
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f7fe fee0 	bl	800509a <set_intr_pin_config>
 80062da:	4603      	mov	r3, r0
 80062dc:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80062de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d122      	bne.n	800632c <config_any_motion_int_settg+0x66>
    {
        rslt = disable_sig_motion_int(dev);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff fe23 	bl	8005f32 <disable_sig_motion_int>
 80062ec:	4603      	mov	r3, r0
 80062ee:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80062f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d119      	bne.n	800632c <config_any_motion_int_settg+0x66>
        {
            rslt = map_feature_interrupt(int_config, dev);
 80062f8:	6879      	ldr	r1, [r7, #4]
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7ff fe4a 	bl	8005f94 <map_feature_interrupt>
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8006304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10f      	bne.n	800632c <config_any_motion_int_settg+0x66>
            {
                rslt = config_any_motion_src(any_motion_int_cfg, dev);
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	68b8      	ldr	r0, [r7, #8]
 8006310:	f7ff ff62 	bl	80061d8 <config_any_motion_src>
 8006314:	4603      	mov	r3, r0
 8006316:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8006318:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d105      	bne.n	800632c <config_any_motion_int_settg+0x66>
                {
                    rslt = config_any_dur_threshold(any_motion_int_cfg, dev);
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	68b8      	ldr	r0, [r7, #8]
 8006324:	f7ff ff8e 	bl	8006244 <config_any_dur_threshold>
 8006328:	4603      	mov	r3, r0
 800632a:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 800632c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <enable_data_ready_int>:

/*!
 * @brief This API enable the data ready interrupt.
 */
static int8_t enable_data_ready_int(const struct bmi160_dev *dev)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8006340:	2300      	movs	r3, #0
 8006342:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006344:	2300      	movs	r3, #0
 8006346:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006348:	f107 010d 	add.w	r1, r7, #13
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	2051      	movs	r0, #81	@ 0x51
 8006352:	f7fe f8eb 	bl	800452c <bmi160_get_regs>
 8006356:	4603      	mov	r3, r0
 8006358:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800635a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d111      	bne.n	8006386 <enable_data_ready_int+0x4e>
    {
        temp = data & ~BMI160_DATA_RDY_INT_EN_MASK;
 8006362:	7b7b      	ldrb	r3, [r7, #13]
 8006364:	f023 0310 	bic.w	r3, r3, #16
 8006368:	73bb      	strb	r3, [r7, #14]
        data = temp | ((1 << 4) & BMI160_DATA_RDY_INT_EN_MASK);
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	f043 0310 	orr.w	r3, r3, #16
 8006370:	b2db      	uxtb	r3, r3
 8006372:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006374:	f107 010d 	add.w	r1, r7, #13
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	2051      	movs	r0, #81	@ 0x51
 800637e:	f7fe f908 	bl	8004592 <bmi160_set_regs>
 8006382:	4603      	mov	r3, r0
 8006384:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006386:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <enable_no_motion_int>:
/*!
 * @brief This API enables the no motion/slow motion interrupt.
 */
static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800639c:	2300      	movs	r3, #0
 800639e:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	73bb      	strb	r3, [r7, #14]

    /* Enable no motion x, no motion y, no motion z
     * in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80063a4:	f107 010d 	add.w	r1, r7, #13
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2201      	movs	r2, #1
 80063ac:	2052      	movs	r0, #82	@ 0x52
 80063ae:	f7fe f8bd 	bl	800452c <bmi160_get_regs>
 80063b2:	4603      	mov	r3, r0
 80063b4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80063b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d138      	bne.n	8006430 <enable_no_motion_int+0x9e>
    {
        if (no_mot_int_cfg->no_motion_x == 1)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d008      	beq.n	80063de <enable_no_motion_int+0x4c>
        {
            temp = data & ~BMI160_NO_MOTION_X_INT_EN_MASK;
 80063cc:	7b7b      	ldrb	r3, [r7, #13]
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | (1 & BMI160_NO_MOTION_X_INT_EN_MASK);
 80063d4:	7bbb      	ldrb	r3, [r7, #14]
 80063d6:	f043 0301 	orr.w	r3, r3, #1
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_y == 1)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d008      	beq.n	80063fe <enable_no_motion_int+0x6c>
        {
            temp = data & ~BMI160_NO_MOTION_Y_INT_EN_MASK;
 80063ec:	7b7b      	ldrb	r3, [r7, #13]
 80063ee:	f023 0302 	bic.w	r3, r3, #2
 80063f2:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 1) & BMI160_NO_MOTION_Y_INT_EN_MASK);
 80063f4:	7bbb      	ldrb	r3, [r7, #14]
 80063f6:	f043 0302 	orr.w	r3, r3, #2
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_z == 1)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	f003 0304 	and.w	r3, r3, #4
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d008      	beq.n	800641e <enable_no_motion_int+0x8c>
        {
            temp = data & ~BMI160_NO_MOTION_Z_INT_EN_MASK;
 800640c:	7b7b      	ldrb	r3, [r7, #13]
 800640e:	f023 0304 	bic.w	r3, r3, #4
 8006412:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 2) & BMI160_NO_MOTION_Z_INT_EN_MASK);
 8006414:	7bbb      	ldrb	r3, [r7, #14]
 8006416:	f043 0304 	orr.w	r3, r3, #4
 800641a:	b2db      	uxtb	r3, r3
 800641c:	737b      	strb	r3, [r7, #13]
        }

        /* write data to Int Enable 2 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 800641e:	f107 010d 	add.w	r1, r7, #13
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2201      	movs	r2, #1
 8006426:	2052      	movs	r0, #82	@ 0x52
 8006428:	f7fe f8b3 	bl	8004592 <bmi160_set_regs>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006430:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <config_no_motion_int_settg>:
 * no motion/slow motion interrupt.
 */
static int8_t config_no_motion_int_settg(const struct bmi160_int_settg *int_config,
                                         const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f7fe fe25 	bl	800509a <set_intr_pin_config>
 8006450:	4603      	mov	r3, r0
 8006452:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006454:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d119      	bne.n	8006490 <config_no_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7ff fd98 	bl	8005f94 <map_feature_interrupt>
 8006464:	4603      	mov	r3, r0
 8006466:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8006468:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10f      	bne.n	8006490 <config_no_motion_int_settg+0x54>
        {
            rslt = config_no_motion_data_src(no_mot_int_cfg, dev);
 8006470:	6879      	ldr	r1, [r7, #4]
 8006472:	68b8      	ldr	r0, [r7, #8]
 8006474:	f000 f812 	bl	800649c <config_no_motion_data_src>
 8006478:	4603      	mov	r3, r0
 800647a:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 800647c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d105      	bne.n	8006490 <config_no_motion_int_settg+0x54>
            {
                rslt = config_no_motion_dur_thr(no_mot_int_cfg, dev);
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	68b8      	ldr	r0, [r7, #8]
 8006488:	f000 f83e 	bl	8006508 <config_no_motion_dur_thr>
 800648c:	4603      	mov	r3, r0
 800648e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8006490:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <config_no_motion_data_src>:
/*!
 * @brief This API configure the source of interrupt for no motion.
 */
static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                        const struct bmi160_dev *dev)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80064aa:	2300      	movs	r3, #0
 80064ac:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80064ae:	f107 010d 	add.w	r1, r7, #13
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2201      	movs	r2, #1
 80064b6:	2059      	movs	r0, #89	@ 0x59
 80064b8:	f7fe f838 	bl	800452c <bmi160_get_regs>
 80064bc:	4603      	mov	r3, r0
 80064be:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80064c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d119      	bne.n	80064fc <config_no_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 80064c8:	7b7b      	ldrb	r3, [r7, #13]
 80064ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ce:	73bb      	strb	r3, [r7, #14]
        data = temp | ((no_mot_int_cfg->no_motion_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	785b      	ldrb	r3, [r3, #1]
 80064d4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	01db      	lsls	r3, r3, #7
 80064dc:	b25a      	sxtb	r2, r3
 80064de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	b25b      	sxtb	r3, r3
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80064ea:	f107 010d 	add.w	r1, r7, #13
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2201      	movs	r2, #1
 80064f2:	2059      	movs	r0, #89	@ 0x59
 80064f4:	f7fe f84d 	bl	8004592 <bmi160_set_regs>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80064fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <config_no_motion_dur_thr>:
 * @brief This API configure the duration and threshold of
 * no motion/slow motion interrupt along with selection of no/slow motion.
 */
static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	72fb      	strb	r3, [r7, #11]
    uint8_t temp = 0;
 8006516:	2300      	movs	r3, #0
 8006518:	73bb      	strb	r3, [r7, #14]
    uint8_t temp_1 = 0;
 800651a:	2300      	movs	r3, #0
 800651c:	737b      	strb	r3, [r7, #13]
    uint8_t reg_addr;
    uint8_t data_array[2] = { 0 };
 800651e:	2300      	movs	r3, #0
 8006520:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_MOTION register */
    reg_addr = BMI160_INT_MOTION_0_ADDR;
 8006522:	235f      	movs	r3, #95	@ 0x5f
 8006524:	733b      	strb	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8006526:	f107 010b 	add.w	r1, r7, #11
 800652a:	7b38      	ldrb	r0, [r7, #12]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2201      	movs	r2, #1
 8006530:	f7fd fffc 	bl	800452c <bmi160_get_regs>
 8006534:	4603      	mov	r3, r0
 8006536:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d14b      	bne.n	80065d8 <config_no_motion_dur_thr+0xd0>
    {
        temp = data & ~BMI160_NO_MOTION_INT_DUR_MASK;
 8006540:	7afb      	ldrb	r3, [r7, #11]
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	73bb      	strb	r3, [r7, #14]

        /* Adding no_motion duration */
        data = temp | ((no_mot_int_cfg->no_motion_dur << 2) & BMI160_NO_MOTION_INT_DUR_MASK);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8006550:	b2db      	uxtb	r3, r3
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	b25a      	sxtb	r2, r3
 8006556:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800655a:	4313      	orrs	r3, r2
 800655c:	b25b      	sxtb	r3, r3
 800655e:	b2db      	uxtb	r3, r3
 8006560:	72fb      	strb	r3, [r7, #11]

        /* Write data to NO_MOTION 0 address */
        rslt = bmi160_set_regs(reg_addr, &data, 1, dev);
 8006562:	f107 010b 	add.w	r1, r7, #11
 8006566:	7b38      	ldrb	r0, [r7, #12]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2201      	movs	r2, #1
 800656c:	f7fe f811 	bl	8004592 <bmi160_set_regs>
 8006570:	4603      	mov	r3, r0
 8006572:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8006574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d12d      	bne.n	80065d8 <config_no_motion_dur_thr+0xd0>
        {
            reg_addr = BMI160_INT_MOTION_3_ADDR;
 800657c:	2362      	movs	r3, #98	@ 0x62
 800657e:	733b      	strb	r3, [r7, #12]
            rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8006580:	f107 010b 	add.w	r1, r7, #11
 8006584:	7b38      	ldrb	r0, [r7, #12]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2201      	movs	r2, #1
 800658a:	f7fd ffcf 	bl	800452c <bmi160_get_regs>
 800658e:	4603      	mov	r3, r0
 8006590:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8006592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d11e      	bne.n	80065d8 <config_no_motion_dur_thr+0xd0>
            {
                temp = data & ~BMI160_NO_MOTION_SEL_BIT_MASK;
 800659a:	7afb      	ldrb	r3, [r7, #11]
 800659c:	f023 0301 	bic.w	r3, r3, #1
 80065a0:	73bb      	strb	r3, [r7, #14]

                /* Adding no_motion_sel bit */
                temp_1 = (no_mot_int_cfg->no_motion_sel & BMI160_NO_MOTION_SEL_BIT_MASK);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	785b      	ldrb	r3, [r3, #1]
 80065a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	737b      	strb	r3, [r7, #13]
                data = (temp | temp_1);
 80065ae:	7bba      	ldrb	r2, [r7, #14]
 80065b0:	7b7b      	ldrb	r3, [r7, #13]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	72fb      	strb	r3, [r7, #11]
                data_array[1] = data;
 80065b8:	7afb      	ldrb	r3, [r7, #11]
 80065ba:	727b      	strb	r3, [r7, #9]

                /* Adding no motion threshold */
                data_array[0] = no_mot_int_cfg->no_motion_thres;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	789b      	ldrb	r3, [r3, #2]
 80065c0:	723b      	strb	r3, [r7, #8]
                reg_addr = BMI160_INT_MOTION_2_ADDR;
 80065c2:	2361      	movs	r3, #97	@ 0x61
 80065c4:	733b      	strb	r3, [r7, #12]

                /* writing data to INT_MOTION 2 and INT_MOTION 3
                 * address simultaneously */
                rslt = bmi160_set_regs(reg_addr, data_array, 2, dev);
 80065c6:	f107 0108 	add.w	r1, r7, #8
 80065ca:	7b38      	ldrb	r0, [r7, #12]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f7fd ffdf 	bl	8004592 <bmi160_set_regs>
 80065d4:	4603      	mov	r3, r0
 80065d6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80065d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <enable_sig_motion_int>:

/*!
 * @brief This API enables the sig-motion motion interrupt.
 */
static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, struct bmi160_dev *dev)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	73bb      	strb	r3, [r7, #14]

    /* For significant motion,enable any motion x,any motion y,
     * any motion z in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80065f6:	f107 010d 	add.w	r1, r7, #13
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2201      	movs	r2, #1
 80065fe:	2050      	movs	r0, #80	@ 0x50
 8006600:	f7fd ff94 	bl	800452c <bmi160_get_regs>
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d124      	bne.n	800665a <enable_sig_motion_int+0x76>
    {
        if (sig_mot_int_cfg->sig_en == BMI160_ENABLE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00c      	beq.n	8006638 <enable_sig_motion_int+0x54>
        {
            temp = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 800661e:	7b7b      	ldrb	r3, [r7, #13]
 8006620:	f023 0307 	bic.w	r3, r3, #7
 8006624:	73bb      	strb	r3, [r7, #14]
            data = temp | (7 & BMI160_SIG_MOTION_INT_EN_MASK);
 8006626:	7bbb      	ldrb	r3, [r7, #14]
 8006628:	f043 0307 	orr.w	r3, r3, #7
 800662c:	b2db      	uxtb	r3, r3
 800662e:	737b      	strb	r3, [r7, #13]

            /* sig-motion feature selected*/
            dev->any_sig_sel = BMI160_SIG_MOTION_ENABLED;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2201      	movs	r2, #1
 8006634:	70da      	strb	r2, [r3, #3]
 8006636:	e007      	b.n	8006648 <enable_sig_motion_int+0x64>
        }
        else
        {
            data = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 8006638:	7b7b      	ldrb	r3, [r7, #13]
 800663a:	f023 0307 	bic.w	r3, r3, #7
 800663e:	b2db      	uxtb	r3, r3
 8006640:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	22ff      	movs	r2, #255	@ 0xff
 8006646:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006648:	f107 010d 	add.w	r1, r7, #13
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2201      	movs	r2, #1
 8006650:	2050      	movs	r0, #80	@ 0x50
 8006652:	f7fd ff9e 	bl	8004592 <bmi160_set_regs>
 8006656:	4603      	mov	r3, r0
 8006658:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800665a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <config_sig_motion_int_settg>:
 * significant motion interrupt.
 */
static int8_t config_sig_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b086      	sub	sp, #24
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8006672:	6879      	ldr	r1, [r7, #4]
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f7fe fd10 	bl	800509a <set_intr_pin_config>
 800667a:	4603      	mov	r3, r0
 800667c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 800667e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d119      	bne.n	80066ba <config_sig_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7ff fc83 	bl	8005f94 <map_feature_interrupt>
 800668e:	4603      	mov	r3, r0
 8006690:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8006692:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10f      	bne.n	80066ba <config_sig_motion_int_settg+0x54>
        {
            rslt = config_sig_motion_data_src(sig_mot_int_cfg, dev);
 800669a:	6879      	ldr	r1, [r7, #4]
 800669c:	68b8      	ldr	r0, [r7, #8]
 800669e:	f000 f812 	bl	80066c6 <config_sig_motion_data_src>
 80066a2:	4603      	mov	r3, r0
 80066a4:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 80066a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d105      	bne.n	80066ba <config_sig_motion_int_settg+0x54>
            {
                rslt = config_sig_dur_threshold(sig_mot_int_cfg, dev);
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	68b8      	ldr	r0, [r7, #8]
 80066b2:	f000 f83e 	bl	8006732 <config_sig_dur_threshold>
 80066b6:	4603      	mov	r3, r0
 80066b8:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 80066ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <config_sig_motion_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for sig motion interrupt.
 */
static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80066d4:	2300      	movs	r3, #0
 80066d6:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80066d8:	f107 010d 	add.w	r1, r7, #13
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2201      	movs	r2, #1
 80066e0:	2059      	movs	r0, #89	@ 0x59
 80066e2:	f7fd ff23 	bl	800452c <bmi160_get_regs>
 80066e6:	4603      	mov	r3, r0
 80066e8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80066ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d119      	bne.n	8006726 <config_sig_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 80066f2:	7b7b      	ldrb	r3, [r7, #13]
 80066f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066f8:	73bb      	strb	r3, [r7, #14]
        data = temp | ((sig_mot_int_cfg->sig_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006702:	b2db      	uxtb	r3, r3
 8006704:	01db      	lsls	r3, r3, #7
 8006706:	b25a      	sxtb	r2, r3
 8006708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800670c:	4313      	orrs	r3, r2
 800670e:	b25b      	sxtb	r3, r3
 8006710:	b2db      	uxtb	r3, r3
 8006712:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8006714:	f107 010d 	add.w	r1, r7, #13
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	2201      	movs	r2, #1
 800671c:	2059      	movs	r0, #89	@ 0x59
 800671e:	f7fd ff38 	bl	8004592 <bmi160_set_regs>
 8006722:	4603      	mov	r3, r0
 8006724:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006726:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <config_sig_dur_threshold>:
 * @brief This API configure the threshold, skip and proof time of
 * sig motion interrupt.
 */
static int8_t config_sig_dur_threshold(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;
    uint8_t temp = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	73bb      	strb	r3, [r7, #14]

    /* Configuring INT_MOTION registers */

    /* Write significant motion threshold.
     * This threshold is same as any motion threshold */
    data = sig_mot_int_cfg->sig_mot_thres;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	785b      	ldrb	r3, [r3, #1]
 8006744:	737b      	strb	r3, [r7, #13]

    /* Write data to INT_MOTION 1 address */
    rslt = bmi160_set_regs(BMI160_INT_MOTION_1_ADDR, &data, 1, dev);
 8006746:	f107 010d 	add.w	r1, r7, #13
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2201      	movs	r2, #1
 800674e:	2060      	movs	r0, #96	@ 0x60
 8006750:	f7fd ff1f 	bl	8004592 <bmi160_set_regs>
 8006754:	4603      	mov	r3, r0
 8006756:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d151      	bne.n	8006804 <config_sig_dur_threshold+0xd2>
    {
        rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8006760:	f107 010d 	add.w	r1, r7, #13
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2201      	movs	r2, #1
 8006768:	2062      	movs	r0, #98	@ 0x62
 800676a:	f7fd fedf 	bl	800452c <bmi160_get_regs>
 800676e:	4603      	mov	r3, r0
 8006770:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8006772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d144      	bne.n	8006804 <config_sig_dur_threshold+0xd2>
        {
            temp = data & ~BMI160_SIG_MOTION_SKIP_MASK;
 800677a:	7b7b      	ldrb	r3, [r7, #13]
 800677c:	f023 030c 	bic.w	r3, r3, #12
 8006780:	73bb      	strb	r3, [r7, #14]

            /* adding skip time of sig_motion interrupt*/
            data = temp | ((sig_mot_int_cfg->sig_mot_skip << 2) & BMI160_SIG_MOTION_SKIP_MASK);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800678a:	b2db      	uxtb	r3, r3
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	b25b      	sxtb	r3, r3
 8006790:	f003 030c 	and.w	r3, r3, #12
 8006794:	b25a      	sxtb	r2, r3
 8006796:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800679a:	4313      	orrs	r3, r2
 800679c:	b25b      	sxtb	r3, r3
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_SIG_MOTION_PROOF_MASK;
 80067a2:	7b7b      	ldrb	r3, [r7, #13]
 80067a4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80067a8:	73bb      	strb	r3, [r7, #14]

            /* adding proof time of sig_motion interrupt */
            data = temp | ((sig_mot_int_cfg->sig_mot_proof << 4) & BMI160_SIG_MOTION_PROOF_MASK);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	b25b      	sxtb	r3, r3
 80067b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80067bc:	b25a      	sxtb	r2, r3
 80067be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	b25b      	sxtb	r3, r3
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	737b      	strb	r3, [r7, #13]

            /* configure the int_sig_mot_sel bit to select
             * significant motion interrupt */
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 80067ca:	7b7b      	ldrb	r3, [r7, #13]
 80067cc:	f023 0302 	bic.w	r3, r3, #2
 80067d0:	73bb      	strb	r3, [r7, #14]
            data = temp | ((sig_mot_int_cfg->sig_en << 1) & BMI160_SIG_MOTION_SEL_MASK);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	005b      	lsls	r3, r3, #1
 80067de:	b25b      	sxtb	r3, r3
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	b25a      	sxtb	r2, r3
 80067e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	b25b      	sxtb	r3, r3
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	737b      	strb	r3, [r7, #13]
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80067f2:	f107 010d 	add.w	r1, r7, #13
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2201      	movs	r2, #1
 80067fa:	2062      	movs	r0, #98	@ 0x62
 80067fc:	f7fd fec9 	bl	8004592 <bmi160_set_regs>
 8006800:	4603      	mov	r3, r0
 8006802:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8006804:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <enable_step_detect_int>:
/*!
 * @brief This API enables the step detector interrupt.
 */
static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                     const struct bmi160_dev *dev)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8006822:	f107 010d 	add.w	r1, r7, #13
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2201      	movs	r2, #1
 800682a:	2052      	movs	r0, #82	@ 0x52
 800682c:	f7fd fe7e 	bl	800452c <bmi160_get_regs>
 8006830:	4603      	mov	r3, r0
 8006832:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d11c      	bne.n	8006876 <enable_step_detect_int+0x66>
    {
        temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 800683c:	7b7b      	ldrb	r3, [r7, #13]
 800683e:	f023 0308 	bic.w	r3, r3, #8
 8006842:	73bb      	strb	r3, [r7, #14]
        data = temp | ((step_detect_int_cfg->step_detector_en << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800684c:	b2db      	uxtb	r3, r3
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	b25b      	sxtb	r3, r3
 8006852:	f003 0308 	and.w	r3, r3, #8
 8006856:	b25a      	sxtb	r2, r3
 8006858:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800685c:	4313      	orrs	r3, r2
 800685e:	b25b      	sxtb	r3, r3
 8006860:	b2db      	uxtb	r3, r3
 8006862:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 2 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8006864:	f107 010d 	add.w	r1, r7, #13
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2201      	movs	r2, #1
 800686c:	2052      	movs	r0, #82	@ 0x52
 800686e:	f7fd fe90 	bl	8004592 <bmi160_set_regs>
 8006872:	4603      	mov	r3, r0
 8006874:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006876:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <config_step_detect>:
/*!
 * @brief This API configure the step detector parameter.
 */
static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                 const struct bmi160_dev *dev)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	73fb      	strb	r3, [r7, #15]
    uint8_t data_array[2] = { 0 };
 8006890:	2300      	movs	r3, #0
 8006892:	81bb      	strh	r3, [r7, #12]

    if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_NORMAL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d104      	bne.n	80068ac <config_step_detect+0x2a>
    {
        /* Normal mode setting */
        data_array[0] = 0x15;
 80068a2:	2315      	movs	r3, #21
 80068a4:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x03;
 80068a6:	2303      	movs	r3, #3
 80068a8:	737b      	strb	r3, [r7, #13]
 80068aa:	e05b      	b.n	8006964 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_SENSITIVE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b40      	cmp	r3, #64	@ 0x40
 80068b8:	d104      	bne.n	80068c4 <config_step_detect+0x42>
    {
        /* Sensitive mode setting */
        data_array[0] = 0x2D;
 80068ba:	232d      	movs	r3, #45	@ 0x2d
 80068bc:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x00;
 80068be:	2300      	movs	r3, #0
 80068c0:	737b      	strb	r3, [r7, #13]
 80068c2:	e04f      	b.n	8006964 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_ROBUST)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b80      	cmp	r3, #128	@ 0x80
 80068d0:	d104      	bne.n	80068dc <config_step_detect+0x5a>
    {
        /* Robust mode setting */
        data_array[0] = 0x1D;
 80068d2:	231d      	movs	r3, #29
 80068d4:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x07;
 80068d6:	2307      	movs	r3, #7
 80068d8:	737b      	strb	r3, [r7, #13]
 80068da:	e043      	b.n	8006964 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_USER_DEFINE)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80068e8:	d13c      	bne.n	8006964 <config_step_detect+0xe2>
    {
        /* Non recommended User defined setting */
        /* Configuring STEP_CONFIG register */
        rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 80068ea:	f107 010c 	add.w	r1, r7, #12
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2202      	movs	r2, #2
 80068f2:	207a      	movs	r0, #122	@ 0x7a
 80068f4:	f7fd fe1a 	bl	800452c <bmi160_get_regs>
 80068f8:	4603      	mov	r3, r0
 80068fa:	73bb      	strb	r3, [r7, #14]
        if (rslt == BMI160_OK)
 80068fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d12f      	bne.n	8006964 <config_step_detect+0xe2>
        {
            temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 8006904:	7b3b      	ldrb	r3, [r7, #12]
 8006906:	f023 0318 	bic.w	r3, r3, #24
 800690a:	73fb      	strb	r3, [r7, #15]

            /* Adding min_threshold */
            data_array[0] = temp | ((step_detect_int_cfg->min_threshold << 3) & BMI160_STEP_DETECT_MIN_THRES_MASK);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8006914:	b2db      	uxtb	r3, r3
 8006916:	00db      	lsls	r3, r3, #3
 8006918:	b25b      	sxtb	r3, r3
 800691a:	f003 0318 	and.w	r3, r3, #24
 800691e:	b25a      	sxtb	r2, r3
 8006920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006924:	4313      	orrs	r3, r2
 8006926:	b25b      	sxtb	r3, r3
 8006928:	b2db      	uxtb	r3, r3
 800692a:	733b      	strb	r3, [r7, #12]
            temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 800692c:	7b3b      	ldrb	r3, [r7, #12]
 800692e:	f023 0307 	bic.w	r3, r3, #7
 8006932:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[0] = temp | ((step_detect_int_cfg->steptime_min) & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800693c:	b2db      	uxtb	r3, r3
 800693e:	461a      	mov	r2, r3
 8006940:	7bfb      	ldrb	r3, [r7, #15]
 8006942:	4313      	orrs	r3, r2
 8006944:	b2db      	uxtb	r3, r3
 8006946:	733b      	strb	r3, [r7, #12]
            temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 8006948:	7b7b      	ldrb	r3, [r7, #13]
 800694a:	f023 0307 	bic.w	r3, r3, #7
 800694e:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[1] = temp | ((step_detect_int_cfg->step_min_buf) & BMI160_STEP_MIN_BUF_MASK);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8006958:	b2db      	uxtb	r3, r3
 800695a:	461a      	mov	r2, r3
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	4313      	orrs	r3, r2
 8006960:	b2db      	uxtb	r3, r3
 8006962:	737b      	strb	r3, [r7, #13]
        }
    }

    /* Write data to STEP_CONFIG register */
    rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 8006964:	f107 010c 	add.w	r1, r7, #12
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	2202      	movs	r2, #2
 800696c:	207a      	movs	r0, #122	@ 0x7a
 800696e:	f7fd fe10 	bl	8004592 <bmi160_set_regs>
 8006972:	4603      	mov	r3, r0
 8006974:	73bb      	strb	r3, [r7, #14]

    return rslt;
 8006976:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <enable_tap_int>:
 * @brief This API enables the single/double tap interrupt.
 */
static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,
                             const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                             const struct bmi160_dev *dev)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b086      	sub	sp, #24
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	757b      	strb	r3, [r7, #21]
    uint8_t temp = 0;
 8006992:	2300      	movs	r3, #0
 8006994:	75bb      	strb	r3, [r7, #22]

    /* Enable single tap or double tap interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006996:	f107 0115 	add.w	r1, r7, #21
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	2050      	movs	r0, #80	@ 0x50
 80069a0:	f7fd fdc4 	bl	800452c <bmi160_get_regs>
 80069a4:	4603      	mov	r3, r0
 80069a6:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80069a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d135      	bne.n	8006a1c <enable_tap_int+0x9a>
    {
        if (int_config->int_type == BMI160_ACC_SINGLE_TAP_INT)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	785b      	ldrb	r3, [r3, #1]
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d114      	bne.n	80069e2 <enable_tap_int+0x60>
        {
            temp = data & ~BMI160_SINGLE_TAP_INT_EN_MASK;
 80069b8:	7d7b      	ldrb	r3, [r7, #21]
 80069ba:	f023 0320 	bic.w	r3, r3, #32
 80069be:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 5) & BMI160_SINGLE_TAP_INT_EN_MASK);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	785b      	ldrb	r3, [r3, #1]
 80069c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	015b      	lsls	r3, r3, #5
 80069cc:	b25b      	sxtb	r3, r3
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	b25a      	sxtb	r2, r3
 80069d4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80069d8:	4313      	orrs	r3, r2
 80069da:	b25b      	sxtb	r3, r3
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	757b      	strb	r3, [r7, #21]
 80069e0:	e013      	b.n	8006a0a <enable_tap_int+0x88>
        }
        else
        {
            temp = data & ~BMI160_DOUBLE_TAP_INT_EN_MASK;
 80069e2:	7d7b      	ldrb	r3, [r7, #21]
 80069e4:	f023 0310 	bic.w	r3, r3, #16
 80069e8:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 4) & BMI160_DOUBLE_TAP_INT_EN_MASK);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	785b      	ldrb	r3, [r3, #1]
 80069ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	b25b      	sxtb	r3, r3
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	b25a      	sxtb	r2, r3
 80069fe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	b25b      	sxtb	r3, r3
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	757b      	strb	r3, [r7, #21]
        }

        /* Write to Enable 0 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006a0a:	f107 0115 	add.w	r1, r7, #21
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	2050      	movs	r0, #80	@ 0x50
 8006a14:	f7fd fdbd 	bl	8004592 <bmi160_set_regs>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006a1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <config_tap_int_settg>:
 * tap interrupt.
 */
static int8_t config_tap_int_settg(const struct bmi160_int_settg *int_config,
                                   const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f7fe fb2f 	bl	800509a <set_intr_pin_config>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8006a40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d11a      	bne.n	8006a7e <config_tap_int_settg+0x56>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7ff faa2 	bl	8005f94 <map_feature_interrupt>
 8006a50:	4603      	mov	r3, r0
 8006a52:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8006a54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d110      	bne.n	8006a7e <config_tap_int_settg+0x56>
        {
            rslt = config_tap_data_src(tap_int_cfg, dev);
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	68b8      	ldr	r0, [r7, #8]
 8006a60:	f000 f813 	bl	8006a8a <config_tap_data_src>
 8006a64:	4603      	mov	r3, r0
 8006a66:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8006a68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d106      	bne.n	8006a7e <config_tap_int_settg+0x56>
            {
                rslt = config_tap_param(int_config, tap_int_cfg, dev);
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	68b9      	ldr	r1, [r7, #8]
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f841 	bl	8006afc <config_tap_param>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8006a7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <config_tap_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for tap interrupt.
 */
static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct bmi160_dev *dev)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006a9c:	f107 010d 	add.w	r1, r7, #13
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	2058      	movs	r0, #88	@ 0x58
 8006aa6:	f7fd fd41 	bl	800452c <bmi160_get_regs>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d11c      	bne.n	8006af0 <config_tap_data_src+0x66>
    {
        temp = data & ~BMI160_TAP_SRC_INT_MASK;
 8006ab6:	7b7b      	ldrb	r3, [r7, #13]
 8006ab8:	f023 0308 	bic.w	r3, r3, #8
 8006abc:	73bb      	strb	r3, [r7, #14]
        data = temp | ((tap_int_cfg->tap_data_src << 3) & BMI160_TAP_SRC_INT_MASK);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	785b      	ldrb	r3, [r3, #1]
 8006ac2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	b25b      	sxtb	r3, r3
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	b25a      	sxtb	r2, r3
 8006ad2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	b25b      	sxtb	r3, r3
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006ade:	f107 010d 	add.w	r1, r7, #13
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	2058      	movs	r0, #88	@ 0x58
 8006ae8:	f7fd fd53 	bl	8004592 <bmi160_set_regs>
 8006aec:	4603      	mov	r3, r0
 8006aee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <config_tap_param>:
 * Threshold, quite, shock, and duration.
 */
static int8_t config_tap_param(const struct bmi160_int_settg *int_config,
                               const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                               const struct bmi160_dev *dev)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	777b      	strb	r3, [r7, #29]
    uint8_t data = 0;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[2] = { 0 };
 8006b10:	2300      	movs	r3, #0
 8006b12:	82bb      	strh	r3, [r7, #20]
    uint8_t count = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	773b      	strb	r3, [r7, #28]
    uint8_t dur, shock, quiet, thres;

    /* Configure tap 0 register for tap shock,tap quiet duration
     * in case of single tap interrupt */
    rslt = bmi160_get_regs(BMI160_INT_TAP_0_ADDR, data_array, 2, dev);
 8006b18:	f107 0114 	add.w	r1, r7, #20
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	2063      	movs	r0, #99	@ 0x63
 8006b22:	f7fd fd03 	bl	800452c <bmi160_get_regs>
 8006b26:	4603      	mov	r3, r0
 8006b28:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 8006b2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d178      	bne.n	8006c24 <config_tap_param+0x128>
    {
        data = data_array[count];
 8006b32:	7f3b      	ldrb	r3, [r7, #28]
 8006b34:	3320      	adds	r3, #32
 8006b36:	443b      	add	r3, r7
 8006b38:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006b3c:	77bb      	strb	r3, [r7, #30]
        if (int_config->int_type == BMI160_ACC_DOUBLE_TAP_INT)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	785b      	ldrb	r3, [r3, #1]
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d113      	bne.n	8006b6e <config_tap_param+0x72>
        {
            dur = (uint8_t)tap_int_cfg->tap_dur;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	76fb      	strb	r3, [r7, #27]
            temp = (data & ~BMI160_TAP_DUR_MASK);
 8006b52:	7fbb      	ldrb	r3, [r7, #30]
 8006b54:	f023 0307 	bic.w	r3, r3, #7
 8006b58:	777b      	strb	r3, [r7, #29]

            /* Add tap duration data in case of
             * double tap interrupt */
            data = temp | (dur & BMI160_TAP_DUR_MASK);
 8006b5a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006b5e:	f003 0307 	and.w	r3, r3, #7
 8006b62:	b25a      	sxtb	r2, r3
 8006b64:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	b25b      	sxtb	r3, r3
 8006b6c:	77bb      	strb	r3, [r7, #30]
        }

        shock = (uint8_t)tap_int_cfg->tap_shock;
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	76bb      	strb	r3, [r7, #26]
        temp = data & ~BMI160_TAP_SHOCK_DUR_MASK;
 8006b7a:	7fbb      	ldrb	r3, [r7, #30]
 8006b7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b80:	777b      	strb	r3, [r7, #29]
        data = temp | ((shock << 6) & BMI160_TAP_SHOCK_DUR_MASK);
 8006b82:	7ebb      	ldrb	r3, [r7, #26]
 8006b84:	019b      	lsls	r3, r3, #6
 8006b86:	b25b      	sxtb	r3, r3
 8006b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8c:	b25a      	sxtb	r2, r3
 8006b8e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	b25b      	sxtb	r3, r3
 8006b96:	77bb      	strb	r3, [r7, #30]
        quiet = (uint8_t)tap_int_cfg->tap_quiet;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	767b      	strb	r3, [r7, #25]
        temp = data & ~BMI160_TAP_QUIET_DUR_MASK;
 8006ba4:	7fbb      	ldrb	r3, [r7, #30]
 8006ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006baa:	777b      	strb	r3, [r7, #29]
        data = temp | ((quiet << 7) & BMI160_TAP_QUIET_DUR_MASK);
 8006bac:	7e7b      	ldrb	r3, [r7, #25]
 8006bae:	01db      	lsls	r3, r3, #7
 8006bb0:	b25a      	sxtb	r2, r3
 8006bb2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	b25b      	sxtb	r3, r3
 8006bba:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8006bbc:	7f3b      	ldrb	r3, [r7, #28]
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	773a      	strb	r2, [r7, #28]
 8006bc2:	3320      	adds	r3, #32
 8006bc4:	443b      	add	r3, r7
 8006bc6:	7fba      	ldrb	r2, [r7, #30]
 8006bc8:	f803 2c0c 	strb.w	r2, [r3, #-12]
        data = data_array[count];
 8006bcc:	7f3b      	ldrb	r3, [r7, #28]
 8006bce:	3320      	adds	r3, #32
 8006bd0:	443b      	add	r3, r7
 8006bd2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006bd6:	77bb      	strb	r3, [r7, #30]
        thres = (uint8_t)tap_int_cfg->tap_thr;
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	763b      	strb	r3, [r7, #24]
        temp = data & ~BMI160_TAP_THRES_MASK;
 8006be4:	7fbb      	ldrb	r3, [r7, #30]
 8006be6:	f023 031f 	bic.w	r3, r3, #31
 8006bea:	777b      	strb	r3, [r7, #29]
        data = temp | (thres & BMI160_TAP_THRES_MASK);
 8006bec:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8006bf0:	f003 031f 	and.w	r3, r3, #31
 8006bf4:	b25a      	sxtb	r2, r3
 8006bf6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	b25b      	sxtb	r3, r3
 8006bfe:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8006c00:	7f3b      	ldrb	r3, [r7, #28]
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	773a      	strb	r2, [r7, #28]
 8006c06:	3320      	adds	r3, #32
 8006c08:	443b      	add	r3, r7
 8006c0a:	7fba      	ldrb	r2, [r7, #30]
 8006c0c:	f803 2c0c 	strb.w	r2, [r3, #-12]

        /* TAP 0 and TAP 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Tap 0 and Tap 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_TAP_0_ADDR, data_array, count, dev);
 8006c10:	7f3b      	ldrb	r3, [r7, #28]
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	f107 0114 	add.w	r1, r7, #20
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2063      	movs	r0, #99	@ 0x63
 8006c1c:	f7fd fcb9 	bl	8004592 <bmi160_set_regs>
 8006c20:	4603      	mov	r3, r0
 8006c22:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006c24:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3720      	adds	r7, #32
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <enable_orient_int>:

/*!
 * @brief This API enables the orient interrupt.
 */
static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const struct bmi160_dev *dev)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006c42:	f107 010d 	add.w	r1, r7, #13
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	2050      	movs	r0, #80	@ 0x50
 8006c4c:	f7fd fc6e 	bl	800452c <bmi160_get_regs>
 8006c50:	4603      	mov	r3, r0
 8006c52:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d11c      	bne.n	8006c96 <enable_orient_int+0x66>
    {
        temp = data & ~BMI160_ORIENT_INT_EN_MASK;
 8006c5c:	7b7b      	ldrb	r3, [r7, #13]
 8006c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c62:	73bb      	strb	r3, [r7, #14]
        data = temp | ((orient_int_cfg->orient_en << 6) & BMI160_ORIENT_INT_EN_MASK);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	789b      	ldrb	r3, [r3, #2]
 8006c68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	019b      	lsls	r3, r3, #6
 8006c70:	b25b      	sxtb	r3, r3
 8006c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c76:	b25a      	sxtb	r2, r3
 8006c78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	b25b      	sxtb	r3, r3
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006c84:	f107 010d 	add.w	r1, r7, #13
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	2050      	movs	r0, #80	@ 0x50
 8006c8e:	f7fd fc80 	bl	8004592 <bmi160_set_regs>
 8006c92:	4603      	mov	r3, r0
 8006c94:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <config_orient_int_settg>:
/*!
 * @brief This API configure the necessary setting of orientation interrupt.
 */
static int8_t config_orient_int_settg(const struct bmi160_acc_orient_int_cfg *orient_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006cac:	2300      	movs	r3, #0
 8006cae:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_ORIENT registers */
    rslt = bmi160_get_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8006cb8:	f107 0108 	add.w	r1, r7, #8
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	2065      	movs	r0, #101	@ 0x65
 8006cc2:	f7fd fc33 	bl	800452c <bmi160_get_regs>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d170      	bne.n	8006db4 <config_orient_int_settg+0x112>
    {
        data = data_array[0];
 8006cd2:	7a3b      	ldrb	r3, [r7, #8]
 8006cd4:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_MODE_MASK;
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	f023 0303 	bic.w	r3, r3, #3
 8006cdc:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation mode */
        data = temp | ((orient_int_cfg->orient_mode) & BMI160_ORIENT_MODE_MASK);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	7b7b      	ldrb	r3, [r7, #13]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_BLOCK_MASK;
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	f023 030c 	bic.w	r3, r3, #12
 8006cf6:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation blocking */
        data = temp | ((orient_int_cfg->orient_blocking << 2) & BMI160_ORIENT_BLOCK_MASK);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	b25b      	sxtb	r3, r3
 8006d06:	f003 030c 	and.w	r3, r3, #12
 8006d0a:	b25a      	sxtb	r2, r3
 8006d0c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	b25b      	sxtb	r3, r3
 8006d14:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_HYST_MASK;
 8006d16:	7bbb      	ldrb	r3, [r7, #14]
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation hysteresis */
        data = temp | ((orient_int_cfg->orient_hyst << 4) & BMI160_ORIENT_HYST_MASK);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	011b      	lsls	r3, r3, #4
 8006d2a:	b25a      	sxtb	r2, r3
 8006d2c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	b25b      	sxtb	r3, r3
 8006d34:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 8006d3a:	7a7b      	ldrb	r3, [r7, #9]
 8006d3c:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_THETA_MASK;
 8006d3e:	7bbb      	ldrb	r3, [r7, #14]
 8006d40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006d44:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation threshold */
        data = temp | ((orient_int_cfg->orient_theta) & BMI160_ORIENT_THETA_MASK);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	7b7b      	ldrb	r3, [r7, #13]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_UD_ENABLE;
 8006d58:	7bbb      	ldrb	r3, [r7, #14]
 8006d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d5e:	737b      	strb	r3, [r7, #13]

        /* Adding Orient_ud_en */
        data = temp | ((orient_int_cfg->orient_ud_en << 6) & BMI160_ORIENT_UD_ENABLE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	785b      	ldrb	r3, [r3, #1]
 8006d64:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	019b      	lsls	r3, r3, #6
 8006d6c:	b25b      	sxtb	r3, r3
 8006d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d72:	b25a      	sxtb	r2, r3
 8006d74:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	b25b      	sxtb	r3, r3
 8006d7c:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_AXES_EN_MASK;
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d84:	737b      	strb	r3, [r7, #13]

        /* Adding axes_en */
        data = temp | ((orient_int_cfg->axes_ex << 7) & BMI160_AXES_EN_MASK);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	785b      	ldrb	r3, [r3, #1]
 8006d8a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	01db      	lsls	r3, r3, #7
 8006d92:	b25a      	sxtb	r2, r3
 8006d94:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	b25b      	sxtb	r3, r3
 8006d9c:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8006d9e:	7bbb      	ldrb	r3, [r7, #14]
 8006da0:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_ORIENT 0 and INT_ORIENT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8006da2:	f107 0108 	add.w	r1, r7, #8
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2202      	movs	r2, #2
 8006daa:	2065      	movs	r0, #101	@ 0x65
 8006dac:	f7fd fbf1 	bl	8004592 <bmi160_set_regs>
 8006db0:	4603      	mov	r3, r0
 8006db2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <enable_flat_int>:

/*!
 * @brief This API enables the flat interrupt.
 */
static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73bb      	strb	r3, [r7, #14]

    /* Enable flat interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006dd2:	f107 010d 	add.w	r1, r7, #13
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	2050      	movs	r0, #80	@ 0x50
 8006ddc:	f7fd fba6 	bl	800452c <bmi160_get_regs>
 8006de0:	4603      	mov	r3, r0
 8006de2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d119      	bne.n	8006e20 <enable_flat_int+0x60>
    {
        temp = data & ~BMI160_FLAT_INT_EN_MASK;
 8006dec:	7b7b      	ldrb	r3, [r7, #13]
 8006dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006df2:	73bb      	strb	r3, [r7, #14]
        data = temp | ((flat_int->flat_en << 7) & BMI160_FLAT_INT_EN_MASK);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	01db      	lsls	r3, r3, #7
 8006e00:	b25a      	sxtb	r2, r3
 8006e02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	b25b      	sxtb	r3, r3
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8006e0e:	f107 010d 	add.w	r1, r7, #13
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2201      	movs	r2, #1
 8006e16:	2050      	movs	r0, #80	@ 0x50
 8006e18:	f7fd fbbb 	bl	8004592 <bmi160_set_regs>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <config_flat_int_settg>:

/*!
 * @brief This API configure the necessary setting of flat interrupt.
 */
static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8006e3e:	2300      	movs	r3, #0
 8006e40:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_FLAT register */
    rslt = bmi160_get_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8006e42:	f107 0108 	add.w	r1, r7, #8
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	2067      	movs	r0, #103	@ 0x67
 8006e4c:	f7fd fb6e 	bl	800452c <bmi160_get_regs>
 8006e50:	4603      	mov	r3, r0
 8006e52:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d13d      	bne.n	8006ed8 <config_flat_int_settg+0xac>
    {
        data = data_array[0];
 8006e5c:	7a3b      	ldrb	r3, [r7, #8]
 8006e5e:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_THRES_MASK;
 8006e60:	7bbb      	ldrb	r3, [r7, #14]
 8006e62:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006e66:	737b      	strb	r3, [r7, #13]

        /* Adding flat theta */
        data = temp | ((flat_int->flat_theta) & BMI160_FLAT_THRES_MASK);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	461a      	mov	r2, r3
 8006e74:	7b7b      	ldrb	r3, [r7, #13]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 8006e7e:	7a7b      	ldrb	r3, [r7, #9]
 8006e80:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HOLD_TIME_MASK;
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006e88:	737b      	strb	r3, [r7, #13]

        /* Adding flat hold time */
        data = temp | ((flat_int->flat_hold_time << 4) & BMI160_FLAT_HOLD_TIME_MASK);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	785b      	ldrb	r3, [r3, #1]
 8006e8e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	b25b      	sxtb	r3, r3
 8006e98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e9c:	b25a      	sxtb	r2, r3
 8006e9e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	b25b      	sxtb	r3, r3
 8006ea6:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HYST_MASK;
 8006ea8:	7bbb      	ldrb	r3, [r7, #14]
 8006eaa:	f023 0307 	bic.w	r3, r3, #7
 8006eae:	737b      	strb	r3, [r7, #13]

        /* Adding flat hysteresis */
        data = temp | ((flat_int->flat_hy) & BMI160_FLAT_HYST_MASK);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	461a      	mov	r2, r3
 8006ebc:	7b7b      	ldrb	r3, [r7, #13]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8006ec2:	7bbb      	ldrb	r3, [r7, #14]
 8006ec4:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_FLAT 0 and INT_FLAT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8006ec6:	f107 0108 	add.w	r1, r7, #8
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	2067      	movs	r0, #103	@ 0x67
 8006ed0:	f7fd fb5f 	bl	8004592 <bmi160_set_regs>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <enable_low_g_int>:

/*!
 * @brief This API enables the Low-g interrupt.
 */
static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006ef6:	f107 010d 	add.w	r1, r7, #13
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2201      	movs	r2, #1
 8006efe:	2051      	movs	r0, #81	@ 0x51
 8006f00:	f7fd fb14 	bl	800452c <bmi160_get_regs>
 8006f04:	4603      	mov	r3, r0
 8006f06:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d11c      	bne.n	8006f4a <enable_low_g_int+0x66>
    {
        temp = data & ~BMI160_LOW_G_INT_EN_MASK;
 8006f10:	7b7b      	ldrb	r3, [r7, #13]
 8006f12:	f023 0308 	bic.w	r3, r3, #8
 8006f16:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_en << 3) & BMI160_LOW_G_INT_EN_MASK);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	789b      	ldrb	r3, [r3, #2]
 8006f1c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	b25b      	sxtb	r3, r3
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	b25a      	sxtb	r2, r3
 8006f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	b25b      	sxtb	r3, r3
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8006f38:	f107 010d 	add.w	r1, r7, #13
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	2051      	movs	r0, #81	@ 0x51
 8006f42:	f7fd fb26 	bl	8004592 <bmi160_set_regs>
 8006f46:	4603      	mov	r3, r0
 8006f48:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <config_low_g_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for low-g interrupt.
 */
static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006f68:	f107 010d 	add.w	r1, r7, #13
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	2058      	movs	r0, #88	@ 0x58
 8006f72:	f7fd fadb 	bl	800452c <bmi160_get_regs>
 8006f76:	4603      	mov	r3, r0
 8006f78:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d119      	bne.n	8006fb6 <config_low_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8006f82:	7b7b      	ldrb	r3, [r7, #13]
 8006f84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f88:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	789b      	ldrb	r3, [r3, #2]
 8006f8e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	01db      	lsls	r3, r3, #7
 8006f96:	b25a      	sxtb	r2, r3
 8006f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	b25b      	sxtb	r3, r3
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8006fa4:	f107 010d 	add.w	r1, r7, #13
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2201      	movs	r2, #1
 8006fac:	2058      	movs	r0, #88	@ 0x58
 8006fae:	f7fd faf0 	bl	8004592 <bmi160_set_regs>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <config_low_g_int_settg>:

/*!
 * @brief This API configure the necessary setting of low-g interrupt.
 */
static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8006fd2:	4a27      	ldr	r2, [pc, #156]	@ (8007070 <config_low_g_int_settg+0xac>)
 8006fd4:	f107 0308 	add.w	r3, r7, #8
 8006fd8:	6812      	ldr	r2, [r2, #0]
 8006fda:	4611      	mov	r1, r2
 8006fdc:	8019      	strh	r1, [r3, #0]
 8006fde:	3302      	adds	r3, #2
 8006fe0:	0c12      	lsrs	r2, r2, #16
 8006fe2:	701a      	strb	r2, [r3, #0]

    /* Configuring INT_LOWHIGH register for low-g interrupt */
    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[2], 1, dev);
 8006fe4:	f107 0308 	add.w	r3, r7, #8
 8006fe8:	1c99      	adds	r1, r3, #2
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2201      	movs	r2, #1
 8006fee:	205c      	movs	r0, #92	@ 0x5c
 8006ff0:	f7fd fa9c 	bl	800452c <bmi160_get_regs>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8006ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d130      	bne.n	8007062 <config_low_g_int_settg+0x9e>
    {
        temp = data_array[2] & ~BMI160_LOW_G_HYST_MASK;
 8007000:	7abb      	ldrb	r3, [r7, #10]
 8007002:	f023 0303 	bic.w	r3, r3, #3
 8007006:	73bb      	strb	r3, [r7, #14]

        /* Adding low-g hysteresis */
        data_array[2] = temp | (low_g_int->low_hyst & BMI160_LOW_G_HYST_MASK);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	789b      	ldrb	r3, [r3, #2]
 800700c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007010:	b2db      	uxtb	r3, r3
 8007012:	461a      	mov	r2, r3
 8007014:	7bbb      	ldrb	r3, [r7, #14]
 8007016:	4313      	orrs	r3, r2
 8007018:	b2db      	uxtb	r3, r3
 800701a:	72bb      	strb	r3, [r7, #10]
        temp = data_array[2] & ~BMI160_LOW_G_LOW_MODE_MASK;
 800701c:	7abb      	ldrb	r3, [r7, #10]
 800701e:	f023 0304 	bic.w	r3, r3, #4
 8007022:	73bb      	strb	r3, [r7, #14]

        /* Adding low-mode */
        data_array[2] = temp | ((low_g_int->low_mode << 2) & BMI160_LOW_G_LOW_MODE_MASK);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	789b      	ldrb	r3, [r3, #2]
 8007028:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800702c:	b2db      	uxtb	r3, r3
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	b25b      	sxtb	r3, r3
 8007032:	f003 0304 	and.w	r3, r3, #4
 8007036:	b25a      	sxtb	r2, r3
 8007038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800703c:	4313      	orrs	r3, r2
 800703e:	b25b      	sxtb	r3, r3
 8007040:	b2db      	uxtb	r3, r3
 8007042:	72bb      	strb	r3, [r7, #10]

        /* Adding low-g threshold */
        data_array[1] = low_g_int->low_thres;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	785b      	ldrb	r3, [r3, #1]
 8007048:	727b      	strb	r3, [r7, #9]

        /* Adding low-g interrupt delay */
        data_array[0] = low_g_int->low_dur;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	723b      	strb	r3, [r7, #8]

        /* Writing data to INT_LOWHIGH 0,1,2 registers simultaneously*/
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_0_ADDR, data_array, 3, dev);
 8007050:	f107 0108 	add.w	r1, r7, #8
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2203      	movs	r2, #3
 8007058:	205a      	movs	r0, #90	@ 0x5a
 800705a:	f7fd fa9a 	bl	8004592 <bmi160_set_regs>
 800705e:	4603      	mov	r3, r0
 8007060:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007062:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	0801ab28 	.word	0x0801ab28

08007074 <enable_high_g_int>:

/*!
 * @brief This API enables the high-g interrupt.
 */
static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const struct bmi160_dev *dev)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800707e:	2300      	movs	r3, #0
 8007080:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8007086:	f107 010d 	add.w	r1, r7, #13
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2201      	movs	r2, #1
 800708e:	2051      	movs	r0, #81	@ 0x51
 8007090:	f7fd fa4c 	bl	800452c <bmi160_get_regs>
 8007094:	4603      	mov	r3, r0
 8007096:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8007098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d13e      	bne.n	800711e <enable_high_g_int+0xaa>
    {
        /* Adding high-g X-axis */
        temp = data & ~BMI160_HIGH_G_X_INT_EN_MASK;
 80070a0:	7b7b      	ldrb	r3, [r7, #13]
 80070a2:	f023 0301 	bic.w	r3, r3, #1
 80070a6:	73bb      	strb	r3, [r7, #14]
        data = temp | (high_g_int_cfg->high_g_x & BMI160_HIGH_G_X_INT_EN_MASK);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	461a      	mov	r2, r3
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Y-axis */
        temp = data & ~BMI160_HIGH_G_Y_INT_EN_MASK;
 80070bc:	7b7b      	ldrb	r3, [r7, #13]
 80070be:	f023 0302 	bic.w	r3, r3, #2
 80070c2:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_y << 1) & BMI160_HIGH_G_Y_INT_EN_MASK);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	b25b      	sxtb	r3, r3
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	b25a      	sxtb	r2, r3
 80070d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070dc:	4313      	orrs	r3, r2
 80070de:	b25b      	sxtb	r3, r3
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Z-axis */
        temp = data & ~BMI160_HIGH_G_Z_INT_EN_MASK;
 80070e4:	7b7b      	ldrb	r3, [r7, #13]
 80070e6:	f023 0304 	bic.w	r3, r3, #4
 80070ea:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_z << 2) & BMI160_HIGH_G_Z_INT_EN_MASK);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	b25b      	sxtb	r3, r3
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	b25a      	sxtb	r2, r3
 8007100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007104:	4313      	orrs	r3, r2
 8007106:	b25b      	sxtb	r3, r3
 8007108:	b2db      	uxtb	r3, r3
 800710a:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 800710c:	f107 010d 	add.w	r1, r7, #13
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2201      	movs	r2, #1
 8007114:	2051      	movs	r0, #81	@ 0x51
 8007116:	f7fd fa3c 	bl	8004592 <bmi160_set_regs>
 800711a:	4603      	mov	r3, r0
 800711c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800711e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <config_high_g_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for high-g interrupt.
 */
static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                     const struct bmi160_dev *dev)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b084      	sub	sp, #16
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8007134:	2300      	movs	r3, #0
 8007136:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 800713c:	f107 010d 	add.w	r1, r7, #13
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	2201      	movs	r2, #1
 8007144:	2058      	movs	r0, #88	@ 0x58
 8007146:	f7fd f9f1 	bl	800452c <bmi160_get_regs>
 800714a:	4603      	mov	r3, r0
 800714c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800714e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d119      	bne.n	800718a <config_high_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8007156:	7b7b      	ldrb	r3, [r7, #13]
 8007158:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800715c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007166:	b2db      	uxtb	r3, r3
 8007168:	01db      	lsls	r3, r3, #7
 800716a:	b25a      	sxtb	r2, r3
 800716c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007170:	4313      	orrs	r3, r2
 8007172:	b25b      	sxtb	r3, r3
 8007174:	b2db      	uxtb	r3, r3
 8007176:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8007178:	f107 010d 	add.w	r1, r7, #13
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2201      	movs	r2, #1
 8007180:	2058      	movs	r0, #88	@ 0x58
 8007182:	f7fd fa06 	bl	8004592 <bmi160_set_regs>
 8007186:	4603      	mov	r3, r0
 8007188:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800718a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <config_high_g_int_settg>:
/*!
 * @brief This API configure the necessary setting of high-g interrupt.
 */
static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 80071a6:	4a1e      	ldr	r2, [pc, #120]	@ (8007220 <config_high_g_int_settg+0x88>)
 80071a8:	f107 0308 	add.w	r3, r7, #8
 80071ac:	6812      	ldr	r2, [r2, #0]
 80071ae:	4611      	mov	r1, r2
 80071b0:	8019      	strh	r1, [r3, #0]
 80071b2:	3302      	adds	r3, #2
 80071b4:	0c12      	lsrs	r2, r2, #16
 80071b6:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[0], 1, dev);
 80071b8:	f107 0108 	add.w	r1, r7, #8
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	2201      	movs	r2, #1
 80071c0:	205c      	movs	r0, #92	@ 0x5c
 80071c2:	f7fd f9b3 	bl	800452c <bmi160_get_regs>
 80071c6:	4603      	mov	r3, r0
 80071c8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80071ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d11f      	bne.n	8007212 <config_high_g_int_settg+0x7a>
    {
        temp = data_array[0] & ~BMI160_HIGH_G_HYST_MASK;
 80071d2:	7a3b      	ldrb	r3, [r7, #8]
 80071d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071d8:	73bb      	strb	r3, [r7, #14]

        /* Adding high-g hysteresis */
        data_array[0] = temp | ((high_g_int_cfg->high_hy << 6) & BMI160_HIGH_G_HYST_MASK);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	019b      	lsls	r3, r3, #6
 80071e6:	b25a      	sxtb	r2, r3
 80071e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	b25b      	sxtb	r3, r3
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	723b      	strb	r3, [r7, #8]

        /* Adding high-g duration */
        data_array[1] = high_g_int_cfg->high_dur;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	789b      	ldrb	r3, [r3, #2]
 80071f8:	727b      	strb	r3, [r7, #9]

        /* Adding high-g threshold */
        data_array[2] = high_g_int_cfg->high_thres;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	785b      	ldrb	r3, [r3, #1]
 80071fe:	72bb      	strb	r3, [r7, #10]
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_2_ADDR, data_array, 3, dev);
 8007200:	f107 0108 	add.w	r1, r7, #8
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2203      	movs	r2, #3
 8007208:	205c      	movs	r0, #92	@ 0x5c
 800720a:	f7fd f9c2 	bl	8004592 <bmi160_set_regs>
 800720e:	4603      	mov	r3, r0
 8007210:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007212:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	0801ab28 	.word	0x0801ab28

08007224 <config_int_out_ctrl>:

/*!
 * @brief This API configure the behavioural setting of interrupt pin.
 */
static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 8007232:	2300      	movs	r3, #0
 8007234:	73fb      	strb	r3, [r7, #15]

    /* Configuration of output interrupt signals on pins INT1 and INT2 are
     * done in BMI160_INT_OUT_CTRL_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8007236:	f107 010f 	add.w	r1, r7, #15
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2201      	movs	r2, #1
 800723e:	2053      	movs	r0, #83	@ 0x53
 8007240:	f7fd f974 	bl	800452c <bmi160_get_regs>
 8007244:	4603      	mov	r3, r0
 8007246:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8007248:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800724c:	2b00      	cmp	r3, #0
 800724e:	f040 80a8 	bne.w	80073a2 <config_int_out_ctrl+0x17e>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3302      	adds	r3, #2
 8007256:	613b      	str	r3, [r7, #16]

        /* Configuring channel 1 */
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d14a      	bne.n	80072f6 <config_int_out_ctrl+0xd2>
        {
            /* Output enable */
            temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	f023 0308 	bic.w	r3, r3, #8
 8007266:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007270:	b2db      	uxtb	r3, r3
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	b25b      	sxtb	r3, r3
 8007276:	f003 0308 	and.w	r3, r3, #8
 800727a:	b25a      	sxtb	r2, r3
 800727c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007280:	4313      	orrs	r3, r2
 8007282:	b25b      	sxtb	r3, r3
 8007284:	b2db      	uxtb	r3, r3
 8007286:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	f023 0304 	bic.w	r3, r3, #4
 800728e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007298:	b2db      	uxtb	r3, r3
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	b25b      	sxtb	r3, r3
 800729e:	f003 0304 	and.w	r3, r3, #4
 80072a2:	b25a      	sxtb	r2, r3
 80072a4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	b25b      	sxtb	r3, r3
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
 80072b2:	f023 0302 	bic.w	r3, r3, #2
 80072b6:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	005b      	lsls	r3, r3, #1
 80072c4:	b25b      	sxtb	r3, r3
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	b25a      	sxtb	r2, r3
 80072cc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	b25b      	sxtb	r3, r3
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
 80072da:	f023 0301 	bic.w	r3, r3, #1
 80072de:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl) & BMI160_INT1_EDGE_CTRL_MASK);
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	461a      	mov	r2, r3
 80072ec:	7dbb      	ldrb	r3, [r7, #22]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	73fb      	strb	r3, [r7, #15]
 80072f4:	e04c      	b.n	8007390 <config_int_out_ctrl+0x16c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Output enable */
            temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072fc:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007306:	b2db      	uxtb	r3, r3
 8007308:	01db      	lsls	r3, r3, #7
 800730a:	b25a      	sxtb	r2, r3
 800730c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007310:	4313      	orrs	r3, r2
 8007312:	b25b      	sxtb	r3, r3
 8007314:	b2db      	uxtb	r3, r3
 8007316:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800731e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007328:	b2db      	uxtb	r3, r3
 800732a:	019b      	lsls	r3, r3, #6
 800732c:	b25b      	sxtb	r3, r3
 800732e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007332:	b25a      	sxtb	r2, r3
 8007334:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007338:	4313      	orrs	r3, r2
 800733a:	b25b      	sxtb	r3, r3
 800733c:	b2db      	uxtb	r3, r3
 800733e:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	f023 0320 	bic.w	r3, r3, #32
 8007346:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007350:	b2db      	uxtb	r3, r3
 8007352:	015b      	lsls	r3, r3, #5
 8007354:	b25b      	sxtb	r3, r3
 8007356:	f003 0320 	and.w	r3, r3, #32
 800735a:	b25a      	sxtb	r2, r3
 800735c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007360:	4313      	orrs	r3, r2
 8007362:	b25b      	sxtb	r3, r3
 8007364:	b2db      	uxtb	r3, r3
 8007366:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	f023 0310 	bic.w	r3, r3, #16
 800736e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007378:	b2db      	uxtb	r3, r3
 800737a:	011b      	lsls	r3, r3, #4
 800737c:	b25b      	sxtb	r3, r3
 800737e:	f003 0310 	and.w	r3, r3, #16
 8007382:	b25a      	sxtb	r2, r3
 8007384:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007388:	4313      	orrs	r3, r2
 800738a:	b25b      	sxtb	r3, r3
 800738c:	b2db      	uxtb	r3, r3
 800738e:	73fb      	strb	r3, [r7, #15]
        }

        rslt = bmi160_set_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8007390:	f107 010f 	add.w	r1, r7, #15
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2201      	movs	r2, #1
 8007398:	2053      	movs	r0, #83	@ 0x53
 800739a:	f7fd f8fa 	bl	8004592 <bmi160_set_regs>
 800739e:	4603      	mov	r3, r0
 80073a0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80073a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <config_int_latch>:

/*!
 * @brief This API configure the mode(input enable, latch or non-latch) of interrupt pin.
 */
static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b086      	sub	sp, #24
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 80073bc:	2300      	movs	r3, #0
 80073be:	73fb      	strb	r3, [r7, #15]

    /* Configuration of latch on pins INT1 and INT2 are done in
     * BMI160_INT_LATCH_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 80073c0:	f107 010f 	add.w	r1, r7, #15
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2201      	movs	r2, #1
 80073c8:	2054      	movs	r0, #84	@ 0x54
 80073ca:	f7fd f8af 	bl	800452c <bmi160_get_regs>
 80073ce:	4603      	mov	r3, r0
 80073d0:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80073d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d146      	bne.n	8007468 <config_int_latch+0xba>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3302      	adds	r3, #2
 80073de:	613b      	str	r3, [r7, #16]
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d114      	bne.n	8007412 <config_int_latch+0x64>
        {
            /* Configuring channel 1 */
            /* Input enable */
            temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
 80073ea:	f023 0310 	bic.w	r3, r3, #16
 80073ee:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 4) & BMI160_INT1_INPUT_EN_MASK);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	011b      	lsls	r3, r3, #4
 80073fc:	b25b      	sxtb	r3, r3
 80073fe:	f003 0310 	and.w	r3, r3, #16
 8007402:	b25a      	sxtb	r2, r3
 8007404:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007408:	4313      	orrs	r3, r2
 800740a:	b25b      	sxtb	r3, r3
 800740c:	b2db      	uxtb	r3, r3
 800740e:	73fb      	strb	r3, [r7, #15]
 8007410:	e013      	b.n	800743a <config_int_latch+0x8c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Input enable */
            temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	f023 0320 	bic.w	r3, r3, #32
 8007418:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 5) & BMI160_INT2_INPUT_EN_MASK);
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007422:	b2db      	uxtb	r3, r3
 8007424:	015b      	lsls	r3, r3, #5
 8007426:	b25b      	sxtb	r3, r3
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	b25a      	sxtb	r2, r3
 800742e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007432:	4313      	orrs	r3, r2
 8007434:	b25b      	sxtb	r3, r3
 8007436:	b2db      	uxtb	r3, r3
 8007438:	73fb      	strb	r3, [r7, #15]

        /* In case of latch interrupt,update the latch duration */

        /* Latching holds the interrupt for the amount of latch
         * duration time */
        temp = data & ~BMI160_INT_LATCH_MASK;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	f023 030f 	bic.w	r3, r3, #15
 8007440:	75bb      	strb	r3, [r7, #22]
        data = temp | (intr_pin_sett->latch_dur & BMI160_INT_LATCH_MASK);
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800744a:	b2db      	uxtb	r3, r3
 800744c:	461a      	mov	r2, r3
 800744e:	7dbb      	ldrb	r3, [r7, #22]
 8007450:	4313      	orrs	r3, r2
 8007452:	b2db      	uxtb	r3, r3
 8007454:	73fb      	strb	r3, [r7, #15]

        /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
         * hence writing data to respective registers at one go */
        rslt = bmi160_set_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8007456:	f107 010f 	add.w	r1, r7, #15
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2201      	movs	r2, #1
 800745e:	2054      	movs	r0, #84	@ 0x54
 8007460:	f7fd f897 	bl	8004592 <bmi160_set_regs>
 8007464:	4603      	mov	r3, r0
 8007466:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8007468:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <set_fifo_full_int>:
 *  @brief This API sets FIFO full interrupt of the sensor.This interrupt
 *  occurs when the FIFO is full and the next full data sample would cause
 *  a FIFO overflow, which may delete the old samples.
 */
static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d003      	beq.n	8007490 <set_fifo_full_int+0x1c>
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <set_fifo_full_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8007490:	23ff      	movs	r3, #255	@ 0xff
 8007492:	73fb      	strb	r3, [r7, #15]
 8007494:	e019      	b.n	80074ca <set_fifo_full_int+0x56>
    }
    else
    {
        /*enable the fifo full interrupt */
        rslt = enable_fifo_full_int(int_config, dev);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f81c 	bl	80074d6 <enable_fifo_full_int>
 800749e:	4603      	mov	r3, r0
 80074a0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80074a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10f      	bne.n	80074ca <set_fifo_full_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7fd fdf4 	bl	800509a <set_intr_pin_config>
 80074b2:	4603      	mov	r3, r0
 80074b4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80074b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d105      	bne.n	80074ca <set_fifo_full_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7fe fe01 	bl	80060c8 <map_hardware_interrupt>
 80074c6:	4603      	mov	r3, r0
 80074c8:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80074ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <enable_fifo_full_int>:

/*!
 * @brief This enable the FIFO full interrupt engine.
 */
static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80074e0:	2300      	movs	r3, #0
 80074e2:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80074e4:	f107 010e 	add.w	r1, r7, #14
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2201      	movs	r2, #1
 80074ec:	2051      	movs	r0, #81	@ 0x51
 80074ee:	f7fd f81d 	bl	800452c <bmi160_get_regs>
 80074f2:	4603      	mov	r3, r0
 80074f4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80074f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d11b      	bne.n	8007536 <enable_fifo_full_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_FULL_INT, int_config->fifo_full_int_en);
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	b25b      	sxtb	r3, r3
 8007502:	f023 0320 	bic.w	r3, r3, #32
 8007506:	b25a      	sxtb	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	7a1b      	ldrb	r3, [r3, #8]
 800750c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007510:	b2db      	uxtb	r3, r3
 8007512:	015b      	lsls	r3, r3, #5
 8007514:	b25b      	sxtb	r3, r3
 8007516:	f003 0320 	and.w	r3, r3, #32
 800751a:	b25b      	sxtb	r3, r3
 800751c:	4313      	orrs	r3, r2
 800751e:	b25b      	sxtb	r3, r3
 8007520:	b2db      	uxtb	r3, r3
 8007522:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8007524:	f107 010e 	add.w	r1, r7, #14
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2201      	movs	r2, #1
 800752c:	2051      	movs	r0, #81	@ 0x51
 800752e:	f7fd f830 	bl	8004592 <bmi160_set_regs>
 8007532:	4603      	mov	r3, r0
 8007534:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007536:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <set_fifo_watermark_int>:
 *  @brief This API sets FIFO watermark interrupt of the sensor.The FIFO
 *  watermark interrupt is fired, when the FIFO fill level is above a fifo
 *  watermark.
 */
static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->delay_ms == NULL))
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <set_fifo_watermark_int+0x1c>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755a:	2b00      	cmp	r3, #0
 800755c:	d102      	bne.n	8007564 <set_fifo_watermark_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800755e:	23ff      	movs	r3, #255	@ 0xff
 8007560:	73fb      	strb	r3, [r7, #15]
 8007562:	e019      	b.n	8007598 <set_fifo_watermark_int+0x56>
    }
    else
    {
        /* Enable fifo-watermark interrupt in Int Enable 1 register */
        rslt = enable_fifo_wtm_int(int_config, dev);
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f81c 	bl	80075a4 <enable_fifo_wtm_int>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8007570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10f      	bne.n	8007598 <set_fifo_watermark_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7fd fd8d 	bl	800509a <set_intr_pin_config>
 8007580:	4603      	mov	r3, r0
 8007582:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8007584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d105      	bne.n	8007598 <set_fifo_watermark_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7fe fd9a 	bl	80060c8 <map_hardware_interrupt>
 8007594:	4603      	mov	r3, r0
 8007596:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8007598:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <enable_fifo_wtm_int>:

/*!
 * @brief This enable the FIFO watermark interrupt engine.
 */
static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80075ae:	2300      	movs	r3, #0
 80075b0:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80075b2:	f107 010e 	add.w	r1, r7, #14
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2201      	movs	r2, #1
 80075ba:	2051      	movs	r0, #81	@ 0x51
 80075bc:	f7fc ffb6 	bl	800452c <bmi160_get_regs>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80075c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d11b      	bne.n	8007604 <enable_fifo_wtm_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_WTM_INT, int_config->fifo_wtm_int_en);
 80075cc:	7bbb      	ldrb	r3, [r7, #14]
 80075ce:	b25b      	sxtb	r3, r3
 80075d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075d4:	b25a      	sxtb	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	7a1b      	ldrb	r3, [r3, #8]
 80075da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	019b      	lsls	r3, r3, #6
 80075e2:	b25b      	sxtb	r3, r3
 80075e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e8:	b25b      	sxtb	r3, r3
 80075ea:	4313      	orrs	r3, r2
 80075ec:	b25b      	sxtb	r3, r3
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80075f2:	f107 010e 	add.w	r1, r7, #14
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2201      	movs	r2, #1
 80075fa:	2051      	movs	r0, #81	@ 0x51
 80075fc:	f7fc ffc9 	bl	8004592 <bmi160_set_regs>
 8007600:	4603      	mov	r3, r0
 8007602:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007604:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <get_foc_status>:

/*!
 *  @brief This API is used to get the FOC status from the sensor
 */
static int8_t get_foc_status(uint8_t *foc_status, struct bmi160_dev const *dev)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read the FOC status from sensor */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
 800761a:	f107 010e 	add.w	r1, r7, #14
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2201      	movs	r2, #1
 8007622:	201b      	movs	r0, #27
 8007624:	f7fc ff82 	bl	800452c <bmi160_get_regs>
 8007628:	4603      	mov	r3, r0
 800762a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800762c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d107      	bne.n	8007644 <get_foc_status+0x34>
    {
        /* Get the foc_status bit */
        *foc_status = BMI160_GET_BITS(data, BMI160_FOC_STATUS);
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	10db      	asrs	r3, r3, #3
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	b2da      	uxtb	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8007644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <configure_offset_enable>:

/*!
 *  @brief This API is used to configure the offset enable bits in the sensor
 */
static int8_t configure_offset_enable(const struct bmi160_foc_conf *foc_conf, struct bmi160_dev const *dev)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800765a:	6838      	ldr	r0, [r7, #0]
 800765c:	f7fd fd38 	bl	80050d0 <null_ptr_check>
 8007660:	4603      	mov	r3, r0
 8007662:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 8007664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <configure_offset_enable+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800766c:	23ff      	movs	r3, #255	@ 0xff
 800766e:	73fb      	strb	r3, [r7, #15]
 8007670:	e032      	b.n	80076d8 <configure_offset_enable+0x88>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8007672:	f107 010e 	add.w	r1, r7, #14
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2201      	movs	r2, #1
 800767a:	2077      	movs	r0, #119	@ 0x77
 800767c:	f7fc ff56 	bl	800452c <bmi160_get_regs>
 8007680:	4603      	mov	r3, r0
 8007682:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8007684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d125      	bne.n	80076d8 <configure_offset_enable+0x88>
        {
            /* Set the offset enable/disable for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	b25b      	sxtb	r3, r3
 8007690:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007694:	b25a      	sxtb	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	795b      	ldrb	r3, [r3, #5]
 800769a:	01db      	lsls	r3, r3, #7
 800769c:	b25b      	sxtb	r3, r3
 800769e:	4313      	orrs	r3, r2
 80076a0:	b25b      	sxtb	r3, r3
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	73bb      	strb	r3, [r7, #14]

            /* Set the offset enable/disable for accel */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	b25b      	sxtb	r3, r3
 80076aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076ae:	b25a      	sxtb	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	791b      	ldrb	r3, [r3, #4]
 80076b4:	019b      	lsls	r3, r3, #6
 80076b6:	b25b      	sxtb	r3, r3
 80076b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076bc:	b25b      	sxtb	r3, r3
 80076be:	4313      	orrs	r3, r2
 80076c0:	b25b      	sxtb	r3, r3
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	73bb      	strb	r3, [r7, #14]

            /* Set the offset config in the sensor */
            rslt = bmi160_set_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 80076c6:	f107 010e 	add.w	r1, r7, #14
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2201      	movs	r2, #1
 80076ce:	2077      	movs	r0, #119	@ 0x77
 80076d0:	f7fc ff5f 	bl	8004592 <bmi160_set_regs>
 80076d4:	4603      	mov	r3, r0
 80076d6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80076d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <trigger_foc>:

static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b088      	sub	sp, #32
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t foc_status = BMI160_ENABLE;
 80076ee:	2301      	movs	r3, #1
 80076f0:	777b      	strb	r3, [r7, #29]
    uint8_t cmd = BMI160_START_FOC_CMD;
 80076f2:	2303      	movs	r3, #3
 80076f4:	773b      	strb	r3, [r7, #28]
    uint8_t timeout = 0;
 80076f6:	2300      	movs	r3, #0
 80076f8:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[20];

    /* Start the FOC process */
    rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
 80076fa:	f107 011c 	add.w	r1, r7, #28
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2201      	movs	r2, #1
 8007702:	207e      	movs	r0, #126	@ 0x7e
 8007704:	f7fc ff45 	bl	8004592 <bmi160_set_regs>
 8007708:	4603      	mov	r3, r0
 800770a:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 800770c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d141      	bne.n	8007798 <trigger_foc+0xb4>
    {
        /* Check the FOC status*/
        rslt = get_foc_status(&foc_status, dev);
 8007714:	f107 031d 	add.w	r3, r7, #29
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff ff78 	bl	8007610 <get_foc_status>
 8007720:	4603      	mov	r3, r0
 8007722:	77fb      	strb	r3, [r7, #31]

        if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE))
 8007724:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d112      	bne.n	8007752 <trigger_foc+0x6e>
 800772c:	7f7b      	ldrb	r3, [r7, #29]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d025      	beq.n	800777e <trigger_foc+0x9a>
        {
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 8007732:	e00e      	b.n	8007752 <trigger_foc+0x6e>
            {
                /* Maximum time of 250ms is given in 10
                 * steps of 25ms each - 250ms refer datasheet 2.9.1 */
                dev->delay_ms(25);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007738:	2019      	movs	r0, #25
 800773a:	4798      	blx	r3

                /* Check the FOC status*/
                rslt = get_foc_status(&foc_status, dev);
 800773c:	f107 031d 	add.w	r3, r7, #29
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	4618      	mov	r0, r3
 8007744:	f7ff ff64 	bl	8007610 <get_foc_status>
 8007748:	4603      	mov	r3, r0
 800774a:	77fb      	strb	r3, [r7, #31]
                timeout++;
 800774c:	7fbb      	ldrb	r3, [r7, #30]
 800774e:	3301      	adds	r3, #1
 8007750:	77bb      	strb	r3, [r7, #30]
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 8007752:	7f7b      	ldrb	r3, [r7, #29]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d002      	beq.n	800775e <trigger_foc+0x7a>
 8007758:	7fbb      	ldrb	r3, [r7, #30]
 800775a:	2b1f      	cmp	r3, #31
 800775c:	d9ea      	bls.n	8007734 <trigger_foc+0x50>
            }

            if ((rslt == BMI160_OK) && (foc_status == BMI160_ENABLE))
 800775e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d109      	bne.n	800777a <trigger_foc+0x96>
 8007766:	7f7b      	ldrb	r3, [r7, #29]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d106      	bne.n	800777a <trigger_foc+0x96>
            {
                /* Get offset values from sensor */
                rslt = bmi160_get_offsets(offset, dev);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7fd f9c9 	bl	8004b06 <bmi160_get_offsets>
 8007774:	4603      	mov	r3, r0
 8007776:	77fb      	strb	r3, [r7, #31]
 8007778:	e001      	b.n	800777e <trigger_foc+0x9a>
            }
            else
            {
                /* FOC failure case */
                rslt = BMI160_E_FOC_FAILURE;
 800777a:	23f5      	movs	r3, #245	@ 0xf5
 800777c:	77fb      	strb	r3, [r7, #31]
            }
        }

        if (rslt == BMI160_OK)
 800777e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d108      	bne.n	8007798 <trigger_foc+0xb4>
        {
            /* Read registers 0x04-0x17 */
            rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 20, dev);
 8007786:	f107 0108 	add.w	r1, r7, #8
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2214      	movs	r2, #20
 800778e:	200c      	movs	r0, #12
 8007790:	f7fc fecc 	bl	800452c <bmi160_get_regs>
 8007794:	4603      	mov	r3, r0
 8007796:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8007798:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3720      	adds	r7, #32
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <BMI160_init>:
uint8_t BMI160_Ascale_bit, BMI160_Gscale_bit;

float bmi160_aRes, bmi160_gRes;

int8_t BMI160_init(BMI160_t *DataStruct)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]

	int8_t rslt;

	set_bmi160_Ares();
 80077ac:	f000 f970 	bl	8007a90 <set_bmi160_Ares>
	set_bmi160_Gres();
 80077b0:	f000 f99a 	bl	8007ae8 <set_bmi160_Gres>
	get_bmi160_Ares();
 80077b4:	f000 f9ca 	bl	8007b4c <get_bmi160_Ares>
	get_bmi160_Gres();
 80077b8:	f000 f9fe 	bl	8007bb8 <get_bmi160_Gres>

    sensor.id = 0;
 80077bc:	4b52      	ldr	r3, [pc, #328]	@ (8007908 <BMI160_init+0x164>)
 80077be:	2200      	movs	r2, #0
 80077c0:	705a      	strb	r2, [r3, #1]
    sensor.intf = BMI160_I2C_INTF;
 80077c2:	4b51      	ldr	r3, [pc, #324]	@ (8007908 <BMI160_init+0x164>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	709a      	strb	r2, [r3, #2]
    sensor.read = SensorAPI_I2Cx_Read;
 80077c8:	4b4f      	ldr	r3, [pc, #316]	@ (8007908 <BMI160_init+0x164>)
 80077ca:	4a50      	ldr	r2, [pc, #320]	@ (800790c <BMI160_init+0x168>)
 80077cc:	61da      	str	r2, [r3, #28]
    sensor.write = SensorAPI_I2Cx_Write;
 80077ce:	4b4e      	ldr	r3, [pc, #312]	@ (8007908 <BMI160_init+0x164>)
 80077d0:	4a4f      	ldr	r2, [pc, #316]	@ (8007910 <BMI160_init+0x16c>)
 80077d2:	621a      	str	r2, [r3, #32]
    sensor.delay_ms = HAL_Delay;
 80077d4:	4b4c      	ldr	r3, [pc, #304]	@ (8007908 <BMI160_init+0x164>)
 80077d6:	4a4f      	ldr	r2, [pc, #316]	@ (8007914 <BMI160_init+0x170>)
 80077d8:	625a      	str	r2, [r3, #36]	@ 0x24
    sensor.read_write_len = 32;
 80077da:	4b4b      	ldr	r3, [pc, #300]	@ (8007908 <BMI160_init+0x164>)
 80077dc:	2220      	movs	r2, #32
 80077de:	851a      	strh	r2, [r3, #40]	@ 0x28

    rslt = bmi160_soft_reset(&sensor);
 80077e0:	4849      	ldr	r0, [pc, #292]	@ (8007908 <BMI160_init+0x164>)
 80077e2:	f7fc ff87 	bl	80046f4 <bmi160_soft_reset>
 80077e6:	4603      	mov	r3, r0
 80077e8:	73fb      	strb	r3, [r7, #15]
    sensor.delay_ms(200);
 80077ea:	4b47      	ldr	r3, [pc, #284]	@ (8007908 <BMI160_init+0x164>)
 80077ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ee:	20c8      	movs	r0, #200	@ 0xc8
 80077f0:	4798      	blx	r3
    rslt = bmi160_init(&sensor);
 80077f2:	4845      	ldr	r0, [pc, #276]	@ (8007908 <BMI160_init+0x164>)
 80077f4:	f7fc ff30 	bl	8004658 <bmi160_init>
 80077f8:	4603      	mov	r3, r0
 80077fa:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    uint8_t reg_addr = BMI160_CHIP_ID_ADDR;
 80077fc:	2324      	movs	r3, #36	@ 0x24
 80077fe:	73bb      	strb	r3, [r7, #14]
    uint8_t chipID = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	72fb      	strb	r3, [r7, #11]
    uint16_t len = 1;
 8007804:	2301      	movs	r3, #1
 8007806:	81bb      	strh	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &chipID, len, &sensor);
 8007808:	89ba      	ldrh	r2, [r7, #12]
 800780a:	f107 010b 	add.w	r1, r7, #11
 800780e:	7bb8      	ldrb	r0, [r7, #14]
 8007810:	4b3d      	ldr	r3, [pc, #244]	@ (8007908 <BMI160_init+0x164>)
 8007812:	f7fc fe8b 	bl	800452c <bmi160_get_regs>
 8007816:	4603      	mov	r3, r0
 8007818:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    /* Select the Output data rate, range of accelerometer sensor */
    sensor.accel_cfg.odr = BMI160_ACCEL_ODR_800HZ; //BMI160_ACCEL_ODR_400HZ
 800781a:	4b3b      	ldr	r3, [pc, #236]	@ (8007908 <BMI160_init+0x164>)
 800781c:	220b      	movs	r2, #11
 800781e:	715a      	strb	r2, [r3, #5]
    sensor.delay_ms(100);
 8007820:	4b39      	ldr	r3, [pc, #228]	@ (8007908 <BMI160_init+0x164>)
 8007822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007824:	2064      	movs	r0, #100	@ 0x64
 8007826:	4798      	blx	r3
    sensor.accel_cfg.range = BMI160_Ascale_bit;
 8007828:	4b3b      	ldr	r3, [pc, #236]	@ (8007918 <BMI160_init+0x174>)
 800782a:	781a      	ldrb	r2, [r3, #0]
 800782c:	4b36      	ldr	r3, [pc, #216]	@ (8007908 <BMI160_init+0x164>)
 800782e:	719a      	strb	r2, [r3, #6]
    sensor.delay_ms(100);
 8007830:	4b35      	ldr	r3, [pc, #212]	@ (8007908 <BMI160_init+0x164>)
 8007832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007834:	2064      	movs	r0, #100	@ 0x64
 8007836:	4798      	blx	r3

    /* Select the power mode of accelerometer sensor */
    sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 8007838:	4b33      	ldr	r3, [pc, #204]	@ (8007908 <BMI160_init+0x164>)
 800783a:	2211      	movs	r2, #17
 800783c:	711a      	strb	r2, [r3, #4]
    sensor.delay_ms(100);
 800783e:	4b32      	ldr	r3, [pc, #200]	@ (8007908 <BMI160_init+0x164>)
 8007840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007842:	2064      	movs	r0, #100	@ 0x64
 8007844:	4798      	blx	r3
    sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4; //BMI160_ACCEL_BW_OSR2_AVG2
 8007846:	4b30      	ldr	r3, [pc, #192]	@ (8007908 <BMI160_init+0x164>)
 8007848:	2202      	movs	r2, #2
 800784a:	71da      	strb	r2, [r3, #7]
    sensor.delay_ms(100);
 800784c:	4b2e      	ldr	r3, [pc, #184]	@ (8007908 <BMI160_init+0x164>)
 800784e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007850:	2064      	movs	r0, #100	@ 0x64
 8007852:	4798      	blx	r3


    /* Select the Output data rate, range of Gyroscope sensor */
    sensor.gyro_cfg.odr = BMI160_GYRO_ODR_800HZ; //BMI160_GYRO_ODR_400HZ
 8007854:	4b2c      	ldr	r3, [pc, #176]	@ (8007908 <BMI160_init+0x164>)
 8007856:	220b      	movs	r2, #11
 8007858:	735a      	strb	r2, [r3, #13]
    sensor.delay_ms(100);
 800785a:	4b2b      	ldr	r3, [pc, #172]	@ (8007908 <BMI160_init+0x164>)
 800785c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800785e:	2064      	movs	r0, #100	@ 0x64
 8007860:	4798      	blx	r3
    sensor.gyro_cfg.range = BMI160_Gscale_bit; // BMI160_GYRO_RANGE_250_DPS
 8007862:	4b2e      	ldr	r3, [pc, #184]	@ (800791c <BMI160_init+0x178>)
 8007864:	781a      	ldrb	r2, [r3, #0]
 8007866:	4b28      	ldr	r3, [pc, #160]	@ (8007908 <BMI160_init+0x164>)
 8007868:	739a      	strb	r2, [r3, #14]
    sensor.delay_ms(100);
 800786a:	4b27      	ldr	r3, [pc, #156]	@ (8007908 <BMI160_init+0x164>)
 800786c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786e:	2064      	movs	r0, #100	@ 0x64
 8007870:	4798      	blx	r3

    /* Select the power mode of Gyroscope sensor */
    sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 8007872:	4b25      	ldr	r3, [pc, #148]	@ (8007908 <BMI160_init+0x164>)
 8007874:	2215      	movs	r2, #21
 8007876:	731a      	strb	r2, [r3, #12]
    sensor.delay_ms(100);
 8007878:	4b23      	ldr	r3, [pc, #140]	@ (8007908 <BMI160_init+0x164>)
 800787a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787c:	2064      	movs	r0, #100	@ 0x64
 800787e:	4798      	blx	r3
    sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE; //BMI160_GYRO_BW_NORMAL_MODE
 8007880:	4b21      	ldr	r3, [pc, #132]	@ (8007908 <BMI160_init+0x164>)
 8007882:	2202      	movs	r2, #2
 8007884:	73da      	strb	r2, [r3, #15]
    sensor.delay_ms(100);
 8007886:	4b20      	ldr	r3, [pc, #128]	@ (8007908 <BMI160_init+0x164>)
 8007888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788a:	2064      	movs	r0, #100	@ 0x64
 800788c:	4798      	blx	r3

    /* Set the sensor configuration */
    rslt = bmi160_set_sens_conf(&sensor);
 800788e:	481e      	ldr	r0, [pc, #120]	@ (8007908 <BMI160_init+0x164>)
 8007890:	f7fc ff6b 	bl	800476a <bmi160_set_sens_conf>
 8007894:	4603      	mov	r3, r0
 8007896:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    rslt = start_foc();
 8007898:	f000 f844 	bl	8007924 <start_foc>
 800789c:	4603      	mov	r3, r0
 800789e:	73fb      	strb	r3, [r7, #15]

	/********************************************************************/

    /* Select the Interrupt channel/pin */
    int_config.int_channel = BMI160_INT_CHANNEL_1;// Interrupt channel/pin 1
 80078a0:	4b1f      	ldr	r3, [pc, #124]	@ (8007920 <BMI160_init+0x17c>)
 80078a2:	2201      	movs	r2, #1
 80078a4:	701a      	strb	r2, [r3, #0]

    /* Select the Interrupt type */
    int_config.int_type = BMI160_ACC_GYRO_DATA_RDY_INT;// Choosing Any motion interrupt
 80078a6:	4b1e      	ldr	r3, [pc, #120]	@ (8007920 <BMI160_init+0x17c>)
 80078a8:	220a      	movs	r2, #10
 80078aa:	705a      	strb	r2, [r3, #1]
    /* Select the interrupt channel/pin settings */
    int_config.int_pin_settg.output_en = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 80078ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007920 <BMI160_init+0x17c>)
 80078ae:	7893      	ldrb	r3, [r2, #2]
 80078b0:	f043 0301 	orr.w	r3, r3, #1
 80078b4:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_mode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 80078b6:	4a1a      	ldr	r2, [pc, #104]	@ (8007920 <BMI160_init+0x17c>)
 80078b8:	7893      	ldrb	r3, [r2, #2]
 80078ba:	f36f 0341 	bfc	r3, #1, #1
 80078be:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_type = BMI160_DISABLE;// Choosing active low output
 80078c0:	4a17      	ldr	r2, [pc, #92]	@ (8007920 <BMI160_init+0x17c>)
 80078c2:	7893      	ldrb	r3, [r2, #2]
 80078c4:	f36f 0382 	bfc	r3, #2, #1
 80078c8:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.edge_ctrl = BMI160_ENABLE;// Choosing edge triggered output
 80078ca:	4a15      	ldr	r2, [pc, #84]	@ (8007920 <BMI160_init+0x17c>)
 80078cc:	7893      	ldrb	r3, [r2, #2]
 80078ce:	f043 0308 	orr.w	r3, r3, #8
 80078d2:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.input_en = BMI160_DISABLE;// Disabling interrupt pin to act as input
 80078d4:	4a12      	ldr	r2, [pc, #72]	@ (8007920 <BMI160_init+0x17c>)
 80078d6:	7893      	ldrb	r3, [r2, #2]
 80078d8:	f36f 1304 	bfc	r3, #4, #1
 80078dc:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.latch_dur = BMI160_LATCH_DUR_NONE;// non-latched output
 80078de:	4a10      	ldr	r2, [pc, #64]	@ (8007920 <BMI160_init+0x17c>)
 80078e0:	8853      	ldrh	r3, [r2, #2]
 80078e2:	f36f 1348 	bfc	r3, #5, #4
 80078e6:	8053      	strh	r3, [r2, #2]

    /* Set the Any-motion interrupt */
    rslt = bmi160_set_int_config(&int_config, &sensor); /* sensor is an instance of the structure bmi160_dev  */
 80078e8:	4907      	ldr	r1, [pc, #28]	@ (8007908 <BMI160_init+0x164>)
 80078ea:	480d      	ldr	r0, [pc, #52]	@ (8007920 <BMI160_init+0x17c>)
 80078ec:	f7fc fffe 	bl	80048ec <bmi160_set_int_config>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73fb      	strb	r3, [r7, #15]

    DataStruct->INIT_OK_i8 = rslt;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	7bfa      	ldrb	r2, [r7, #15]
 80078f8:	761a      	strb	r2, [r3, #24]
    return rslt;
 80078fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20000334 	.word	0x20000334
 800790c:	08007c75 	.word	0x08007c75
 8007910:	08007cb9 	.word	0x08007cb9
 8007914:	080090b9 	.word	0x080090b9
 8007918:	20000396 	.word	0x20000396
 800791c:	20000397 	.word	0x20000397
 8007920:	2000038c 	.word	0x2000038c

08007924 <start_foc>:

int8_t start_foc()
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
	int8_t rslt = 0;
 800792a:	2300      	movs	r3, #0
 800792c:	71fb      	strb	r3, [r7, #7]

	/* Enable FOC for accel with target values of z = 1g ; x,y as 0g */
	foc_conf.acc_off_en = BMI160_ENABLE;
 800792e:	4b13      	ldr	r3, [pc, #76]	@ (800797c <start_foc+0x58>)
 8007930:	2201      	movs	r2, #1
 8007932:	711a      	strb	r2, [r3, #4]
	foc_conf.foc_acc_x  = BMI160_FOC_ACCEL_0G;
 8007934:	4b11      	ldr	r3, [pc, #68]	@ (800797c <start_foc+0x58>)
 8007936:	2203      	movs	r2, #3
 8007938:	705a      	strb	r2, [r3, #1]
	foc_conf.foc_acc_y  = BMI160_FOC_ACCEL_0G;
 800793a:	4b10      	ldr	r3, [pc, #64]	@ (800797c <start_foc+0x58>)
 800793c:	2203      	movs	r2, #3
 800793e:	709a      	strb	r2, [r3, #2]
	foc_conf.foc_acc_z  = BMI160_FOC_ACCEL_POSITIVE_G;
 8007940:	4b0e      	ldr	r3, [pc, #56]	@ (800797c <start_foc+0x58>)
 8007942:	2201      	movs	r2, #1
 8007944:	70da      	strb	r2, [r3, #3]
	sensor.delay_ms(100);
 8007946:	4b0e      	ldr	r3, [pc, #56]	@ (8007980 <start_foc+0x5c>)
 8007948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794a:	2064      	movs	r0, #100	@ 0x64
 800794c:	4798      	blx	r3

	/* Enable FOC for gyro */
	foc_conf.foc_gyr_en = BMI160_ENABLE;
 800794e:	4b0b      	ldr	r3, [pc, #44]	@ (800797c <start_foc+0x58>)
 8007950:	2201      	movs	r2, #1
 8007952:	701a      	strb	r2, [r3, #0]
	foc_conf.gyro_off_en = BMI160_ENABLE;
 8007954:	4b09      	ldr	r3, [pc, #36]	@ (800797c <start_foc+0x58>)
 8007956:	2201      	movs	r2, #1
 8007958:	715a      	strb	r2, [r3, #5]
	sensor.delay_ms(100);
 800795a:	4b09      	ldr	r3, [pc, #36]	@ (8007980 <start_foc+0x5c>)
 800795c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800795e:	2064      	movs	r0, #100	@ 0x64
 8007960:	4798      	blx	r3

	rslt = bmi160_start_foc(&foc_conf, &offsets, &sensor);
 8007962:	4a07      	ldr	r2, [pc, #28]	@ (8007980 <start_foc+0x5c>)
 8007964:	4907      	ldr	r1, [pc, #28]	@ (8007984 <start_foc+0x60>)
 8007966:	4805      	ldr	r0, [pc, #20]	@ (800797c <start_foc+0x58>)
 8007968:	f7fd f84c 	bl	8004a04 <bmi160_start_foc>
 800796c:	4603      	mov	r3, r0
 800796e:	71fb      	strb	r3, [r7, #7]

	return rslt;
 8007970:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20000378 	.word	0x20000378
 8007980:	20000334 	.word	0x20000334
 8007984:	20000380 	.word	0x20000380

08007988 <bmi160ReadAccelGyro>:

int8_t bmi160ReadAccelGyro(BMI160_t *DataStruct)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08a      	sub	sp, #40	@ 0x28
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	float ax, ay, az, gx, gy, gz;

	rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &accel, &gyro, &sensor);
 8007990:	4b3a      	ldr	r3, [pc, #232]	@ (8007a7c <bmi160ReadAccelGyro+0xf4>)
 8007992:	4a3b      	ldr	r2, [pc, #236]	@ (8007a80 <bmi160ReadAccelGyro+0xf8>)
 8007994:	493b      	ldr	r1, [pc, #236]	@ (8007a84 <bmi160ReadAccelGyro+0xfc>)
 8007996:	2003      	movs	r0, #3
 8007998:	f7fc ff41 	bl	800481e <bmi160_get_sensor_data>
 800799c:	4603      	mov	r3, r0
 800799e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	ax = (float)accel.x / bmi160_aRes;
 80079a2:	4b38      	ldr	r3, [pc, #224]	@ (8007a84 <bmi160ReadAccelGyro+0xfc>)
 80079a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079a8:	ee07 3a90 	vmov	s15, r3
 80079ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80079b0:	4b35      	ldr	r3, [pc, #212]	@ (8007a88 <bmi160ReadAccelGyro+0x100>)
 80079b2:	ed93 7a00 	vldr	s14, [r3]
 80079b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ba:	edc7 7a08 	vstr	s15, [r7, #32]
	ay = (float)accel.y / bmi160_aRes;
 80079be:	4b31      	ldr	r3, [pc, #196]	@ (8007a84 <bmi160ReadAccelGyro+0xfc>)
 80079c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80079c4:	ee07 3a90 	vmov	s15, r3
 80079c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80079cc:	4b2e      	ldr	r3, [pc, #184]	@ (8007a88 <bmi160ReadAccelGyro+0x100>)
 80079ce:	ed93 7a00 	vldr	s14, [r3]
 80079d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079d6:	edc7 7a07 	vstr	s15, [r7, #28]
	az = (float)accel.z / bmi160_aRes;
 80079da:	4b2a      	ldr	r3, [pc, #168]	@ (8007a84 <bmi160ReadAccelGyro+0xfc>)
 80079dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80079e0:	ee07 3a90 	vmov	s15, r3
 80079e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80079e8:	4b27      	ldr	r3, [pc, #156]	@ (8007a88 <bmi160ReadAccelGyro+0x100>)
 80079ea:	ed93 7a00 	vldr	s14, [r3]
 80079ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079f2:	edc7 7a06 	vstr	s15, [r7, #24]

	gx = (float)gyro.x / bmi160_gRes;
 80079f6:	4b22      	ldr	r3, [pc, #136]	@ (8007a80 <bmi160ReadAccelGyro+0xf8>)
 80079f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079fc:	ee07 3a90 	vmov	s15, r3
 8007a00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007a04:	4b21      	ldr	r3, [pc, #132]	@ (8007a8c <bmi160ReadAccelGyro+0x104>)
 8007a06:	ed93 7a00 	vldr	s14, [r3]
 8007a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a0e:	edc7 7a05 	vstr	s15, [r7, #20]
	gy = (float)gyro.y / bmi160_gRes;
 8007a12:	4b1b      	ldr	r3, [pc, #108]	@ (8007a80 <bmi160ReadAccelGyro+0xf8>)
 8007a14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007a18:	ee07 3a90 	vmov	s15, r3
 8007a1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007a20:	4b1a      	ldr	r3, [pc, #104]	@ (8007a8c <bmi160ReadAccelGyro+0x104>)
 8007a22:	ed93 7a00 	vldr	s14, [r3]
 8007a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a2a:	edc7 7a04 	vstr	s15, [r7, #16]
	gz = (float)gyro.z / bmi160_gRes;
 8007a2e:	4b14      	ldr	r3, [pc, #80]	@ (8007a80 <bmi160ReadAccelGyro+0xf8>)
 8007a30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007a34:	ee07 3a90 	vmov	s15, r3
 8007a38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007a3c:	4b13      	ldr	r3, [pc, #76]	@ (8007a8c <bmi160ReadAccelGyro+0x104>)
 8007a3e:	ed93 7a00 	vldr	s14, [r3]
 8007a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a46:	edc7 7a03 	vstr	s15, [r7, #12]


	DataStruct->BMI160_Ax_f32 = ax;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a3a      	ldr	r2, [r7, #32]
 8007a4e:	601a      	str	r2, [r3, #0]
	DataStruct->BMI160_Ay_f32 = ay;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	605a      	str	r2, [r3, #4]
	DataStruct->BMI160_Az_f32 = az;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	609a      	str	r2, [r3, #8]

	DataStruct->BMI160_Gx_f32 = gx;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	60da      	str	r2, [r3, #12]
	DataStruct->BMI160_Gy_f32 = gy;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	611a      	str	r2, [r3, #16]
	DataStruct->BMI160_Gz_f32 = gz;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	615a      	str	r2, [r3, #20]

	return rslt;
 8007a6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3728      	adds	r7, #40	@ 0x28
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000334 	.word	0x20000334
 8007a80:	2000036c 	.word	0x2000036c
 8007a84:	20000360 	.word	0x20000360
 8007a88:	20000398 	.word	0x20000398
 8007a8c:	2000039c 	.word	0x2000039c

08007a90 <set_bmi160_Ares>:

void set_bmi160_Ares()
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
	switch (BMI160_Asens)
 8007a94:	4b12      	ldr	r3, [pc, #72]	@ (8007ae0 <set_bmi160_Ares+0x50>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d81a      	bhi.n	8007ad4 <set_bmi160_Ares+0x44>
 8007a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa4 <set_bmi160_Ares+0x14>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007ab5 	.word	0x08007ab5
 8007aa8:	08007abd 	.word	0x08007abd
 8007aac:	08007ac5 	.word	0x08007ac5
 8007ab0:	08007acd 	.word	0x08007acd
	{
		case AFS_2G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_2G;
 8007ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae4 <set_bmi160_Ares+0x54>)
 8007ab6:	2203      	movs	r2, #3
 8007ab8:	701a      	strb	r2, [r3, #0]
			break;
 8007aba:	e00b      	b.n	8007ad4 <set_bmi160_Ares+0x44>
		case AFS_4G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_4G;
 8007abc:	4b09      	ldr	r3, [pc, #36]	@ (8007ae4 <set_bmi160_Ares+0x54>)
 8007abe:	2205      	movs	r2, #5
 8007ac0:	701a      	strb	r2, [r3, #0]
			break;
 8007ac2:	e007      	b.n	8007ad4 <set_bmi160_Ares+0x44>
		case AFS_8G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_8G;
 8007ac4:	4b07      	ldr	r3, [pc, #28]	@ (8007ae4 <set_bmi160_Ares+0x54>)
 8007ac6:	2208      	movs	r2, #8
 8007ac8:	701a      	strb	r2, [r3, #0]
			break;
 8007aca:	e003      	b.n	8007ad4 <set_bmi160_Ares+0x44>
		case AFS_16G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_16G;
 8007acc:	4b05      	ldr	r3, [pc, #20]	@ (8007ae4 <set_bmi160_Ares+0x54>)
 8007ace:	220c      	movs	r2, #12
 8007ad0:	701a      	strb	r2, [r3, #0]
			break;
 8007ad2:	bf00      	nop
	}
}
 8007ad4:	bf00      	nop
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	20000018 	.word	0x20000018
 8007ae4:	20000396 	.word	0x20000396

08007ae8 <set_bmi160_Gres>:

void set_bmi160_Gres()
{
 8007ae8:	b480      	push	{r7}
 8007aea:	af00      	add	r7, sp, #0
	switch (BMI160_Gsens)
 8007aec:	4b15      	ldr	r3, [pc, #84]	@ (8007b44 <set_bmi160_Gres+0x5c>)
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	2b04      	cmp	r3, #4
 8007af4:	d820      	bhi.n	8007b38 <set_bmi160_Gres+0x50>
 8007af6:	a201      	add	r2, pc, #4	@ (adr r2, 8007afc <set_bmi160_Gres+0x14>)
 8007af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afc:	08007b11 	.word	0x08007b11
 8007b00:	08007b19 	.word	0x08007b19
 8007b04:	08007b21 	.word	0x08007b21
 8007b08:	08007b29 	.word	0x08007b29
 8007b0c:	08007b31 	.word	0x08007b31
	{
		case GFS_125DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_125_DPS;
 8007b10:	4b0d      	ldr	r3, [pc, #52]	@ (8007b48 <set_bmi160_Gres+0x60>)
 8007b12:	2204      	movs	r2, #4
 8007b14:	701a      	strb	r2, [r3, #0]
			break;
 8007b16:	e00f      	b.n	8007b38 <set_bmi160_Gres+0x50>
		case GFS_250DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_250_DPS;
 8007b18:	4b0b      	ldr	r3, [pc, #44]	@ (8007b48 <set_bmi160_Gres+0x60>)
 8007b1a:	2203      	movs	r2, #3
 8007b1c:	701a      	strb	r2, [r3, #0]
			break;
 8007b1e:	e00b      	b.n	8007b38 <set_bmi160_Gres+0x50>
		case GFS_500DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_500_DPS;
 8007b20:	4b09      	ldr	r3, [pc, #36]	@ (8007b48 <set_bmi160_Gres+0x60>)
 8007b22:	2202      	movs	r2, #2
 8007b24:	701a      	strb	r2, [r3, #0]
			break;
 8007b26:	e007      	b.n	8007b38 <set_bmi160_Gres+0x50>
		case GFS_1000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_1000_DPS;
 8007b28:	4b07      	ldr	r3, [pc, #28]	@ (8007b48 <set_bmi160_Gres+0x60>)
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	701a      	strb	r2, [r3, #0]
			break;
 8007b2e:	e003      	b.n	8007b38 <set_bmi160_Gres+0x50>
		case GFS_2000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_2000_DPS;
 8007b30:	4b05      	ldr	r3, [pc, #20]	@ (8007b48 <set_bmi160_Gres+0x60>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	701a      	strb	r2, [r3, #0]
			break;
 8007b36:	bf00      	nop
	}
}
 8007b38:	bf00      	nop
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	20000019 	.word	0x20000019
 8007b48:	20000397 	.word	0x20000397

08007b4c <get_bmi160_Ares>:

void get_bmi160_Ares()
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
	switch (BMI160_Ascale)
 8007b50:	4b17      	ldr	r3, [pc, #92]	@ (8007bb0 <get_bmi160_Ares+0x64>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d826      	bhi.n	8007ba6 <get_bmi160_Ares+0x5a>
 8007b58:	a201      	add	r2, pc, #4	@ (adr r2, 8007b60 <get_bmi160_Ares+0x14>)
 8007b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5e:	bf00      	nop
 8007b60:	08007b75 	.word	0x08007b75
 8007b64:	08007b7f 	.word	0x08007b7f
 8007b68:	08007b89 	.word	0x08007b89
 8007b6c:	08007b93 	.word	0x08007b93
 8007b70:	08007b9d 	.word	0x08007b9d
	{
		case AFS_RAW:
			bmi160_aRes = 1.0f;
 8007b74:	4b0f      	ldr	r3, [pc, #60]	@ (8007bb4 <get_bmi160_Ares+0x68>)
 8007b76:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007b7a:	601a      	str	r2, [r3, #0]
			break;
 8007b7c:	e013      	b.n	8007ba6 <get_bmi160_Ares+0x5a>
		case AFS_2G:
			bmi160_aRes = 16384.0f;
 8007b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb4 <get_bmi160_Ares+0x68>)
 8007b80:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8007b84:	601a      	str	r2, [r3, #0]
			break;
 8007b86:	e00e      	b.n	8007ba6 <get_bmi160_Ares+0x5a>
		case AFS_4G:
			bmi160_aRes = 8192.0f;
 8007b88:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb4 <get_bmi160_Ares+0x68>)
 8007b8a:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8007b8e:	601a      	str	r2, [r3, #0]
			break;
 8007b90:	e009      	b.n	8007ba6 <get_bmi160_Ares+0x5a>
		case AFS_8G:
			bmi160_aRes = 4096.0f;
 8007b92:	4b08      	ldr	r3, [pc, #32]	@ (8007bb4 <get_bmi160_Ares+0x68>)
 8007b94:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8007b98:	601a      	str	r2, [r3, #0]
			break;
 8007b9a:	e004      	b.n	8007ba6 <get_bmi160_Ares+0x5a>
		case AFS_16G:
			bmi160_aRes = 2048.0f;
 8007b9c:	4b05      	ldr	r3, [pc, #20]	@ (8007bb4 <get_bmi160_Ares+0x68>)
 8007b9e:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8007ba2:	601a      	str	r2, [r3, #0]
			break;
 8007ba4:	bf00      	nop
	}
}
 8007ba6:	bf00      	nop
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	2000001a 	.word	0x2000001a
 8007bb4:	20000398 	.word	0x20000398

08007bb8 <get_bmi160_Gres>:

void get_bmi160_Gres()
{
 8007bb8:	b480      	push	{r7}
 8007bba:	af00      	add	r7, sp, #0
	switch (BMI160_Gscale)
 8007bbc:	4b18      	ldr	r3, [pc, #96]	@ (8007c20 <get_bmi160_Gres+0x68>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b05      	cmp	r3, #5
 8007bc2:	d828      	bhi.n	8007c16 <get_bmi160_Gres+0x5e>
 8007bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bcc <get_bmi160_Gres+0x14>)
 8007bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bca:	bf00      	nop
 8007bcc:	08007be5 	.word	0x08007be5
 8007bd0:	08007bef 	.word	0x08007bef
 8007bd4:	08007bf7 	.word	0x08007bf7
 8007bd8:	08007bff 	.word	0x08007bff
 8007bdc:	08007c07 	.word	0x08007c07
 8007be0:	08007c0f 	.word	0x08007c0f
	{
		case GFS_RAW:
			bmi160_aRes = 1.0f;
 8007be4:	4b0f      	ldr	r3, [pc, #60]	@ (8007c24 <get_bmi160_Gres+0x6c>)
 8007be6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007bea:	601a      	str	r2, [r3, #0]
			break;
 8007bec:	e013      	b.n	8007c16 <get_bmi160_Gres+0x5e>
		case GFS_125DPS:
			bmi160_gRes = 262.4f;
 8007bee:	4b0e      	ldr	r3, [pc, #56]	@ (8007c28 <get_bmi160_Gres+0x70>)
 8007bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8007c2c <get_bmi160_Gres+0x74>)
 8007bf2:	601a      	str	r2, [r3, #0]
			break;
 8007bf4:	e00f      	b.n	8007c16 <get_bmi160_Gres+0x5e>
		case GFS_250DPS:
			bmi160_gRes = 131.2f;
 8007bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8007c28 <get_bmi160_Gres+0x70>)
 8007bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8007c30 <get_bmi160_Gres+0x78>)
 8007bfa:	601a      	str	r2, [r3, #0]
			break;
 8007bfc:	e00b      	b.n	8007c16 <get_bmi160_Gres+0x5e>
		case GFS_500DPS:
			bmi160_gRes = 65.6f;
 8007bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8007c28 <get_bmi160_Gres+0x70>)
 8007c00:	4a0c      	ldr	r2, [pc, #48]	@ (8007c34 <get_bmi160_Gres+0x7c>)
 8007c02:	601a      	str	r2, [r3, #0]
			break;
 8007c04:	e007      	b.n	8007c16 <get_bmi160_Gres+0x5e>
		case GFS_1000DPS:
			bmi160_gRes = 32.8f;
 8007c06:	4b08      	ldr	r3, [pc, #32]	@ (8007c28 <get_bmi160_Gres+0x70>)
 8007c08:	4a0b      	ldr	r2, [pc, #44]	@ (8007c38 <get_bmi160_Gres+0x80>)
 8007c0a:	601a      	str	r2, [r3, #0]
			break;
 8007c0c:	e003      	b.n	8007c16 <get_bmi160_Gres+0x5e>
		case GFS_2000DPS:
			bmi160_gRes = 16.4f;
 8007c0e:	4b06      	ldr	r3, [pc, #24]	@ (8007c28 <get_bmi160_Gres+0x70>)
 8007c10:	4a0a      	ldr	r2, [pc, #40]	@ (8007c3c <get_bmi160_Gres+0x84>)
 8007c12:	601a      	str	r2, [r3, #0]
			break;
 8007c14:	bf00      	nop
	}
}
 8007c16:	bf00      	nop
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	2000001b 	.word	0x2000001b
 8007c24:	20000398 	.word	0x20000398
 8007c28:	2000039c 	.word	0x2000039c
 8007c2c:	43833333 	.word	0x43833333
 8007c30:	43033333 	.word	0x43033333
 8007c34:	42833333 	.word	0x42833333
 8007c38:	42033333 	.word	0x42033333
 8007c3c:	41833333 	.word	0x41833333

08007c40 <bmi160_delay_us>:
		}
	}
}

void bmi160_delay_us(uint32_t period)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 8007c48:	e008      	b.n	8007c5c <bmi160_delay_us+0x1c>
	{
		for(i = 0; i < 84; i++)
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	e002      	b.n	8007c56 <bmi160_delay_us+0x16>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	3301      	adds	r3, #1
 8007c54:	60fb      	str	r3, [r7, #12]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2b53      	cmp	r3, #83	@ 0x53
 8007c5a:	d9f9      	bls.n	8007c50 <bmi160_delay_us+0x10>
	while(period--)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	1e5a      	subs	r2, r3, #1
 8007c60:	607a      	str	r2, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1f1      	bne.n	8007c4a <bmi160_delay_us+0xa>
		{
			;
		}
	}
}
 8007c66:	bf00      	nop
 8007c68:	bf00      	nop
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af02      	add	r7, sp, #8
 8007c7a:	603a      	str	r2, [r7, #0]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	4603      	mov	r3, r0
 8007c80:	71fb      	strb	r3, [r7, #7]
 8007c82:	460b      	mov	r3, r1
 8007c84:	71bb      	strb	r3, [r7, #6]
 8007c86:	4613      	mov	r3, r2
 8007c88:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 8007c8a:	1dba      	adds	r2, r7, #6
 8007c8c:	2364      	movs	r3, #100	@ 0x64
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	2301      	movs	r3, #1
 8007c92:	21d0      	movs	r1, #208	@ 0xd0
 8007c94:	4807      	ldr	r0, [pc, #28]	@ (8007cb4 <SensorAPI_I2Cx_Read+0x40>)
 8007c96:	f003 fb21 	bl	800b2dc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 8007c9a:	88bb      	ldrh	r3, [r7, #4]
 8007c9c:	2264      	movs	r2, #100	@ 0x64
 8007c9e:	9200      	str	r2, [sp, #0]
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	21d0      	movs	r1, #208	@ 0xd0
 8007ca4:	4803      	ldr	r0, [pc, #12]	@ (8007cb4 <SensorAPI_I2Cx_Read+0x40>)
 8007ca6:	f003 fc31 	bl	800b50c <HAL_I2C_Master_Receive>
	return 0;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20000690 	.word	0x20000690

08007cb8 <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	603a      	str	r2, [r7, #0]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	71fb      	strb	r3, [r7, #7]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	71bb      	strb	r3, [r7, #6]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 8007cce:	4a0c      	ldr	r2, [pc, #48]	@ (8007d00 <SensorAPI_I2Cx_Write+0x48>)
 8007cd0:	79bb      	ldrb	r3, [r7, #6]
 8007cd2:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 8007cd4:	88bb      	ldrh	r3, [r7, #4]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	480a      	ldr	r0, [pc, #40]	@ (8007d04 <SensorAPI_I2Cx_Write+0x4c>)
 8007cdc:	f00f f9d3 	bl	8017086 <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 8007ce0:	88bb      	ldrh	r3, [r7, #4]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	2264      	movs	r2, #100	@ 0x64
 8007ce8:	9200      	str	r2, [sp, #0]
 8007cea:	4a05      	ldr	r2, [pc, #20]	@ (8007d00 <SensorAPI_I2Cx_Write+0x48>)
 8007cec:	21d0      	movs	r1, #208	@ 0xd0
 8007cee:	4806      	ldr	r0, [pc, #24]	@ (8007d08 <SensorAPI_I2Cx_Write+0x50>)
 8007cf0:	f003 faf4 	bl	800b2dc <HAL_I2C_Master_Transmit>
	return 0;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	200003a0 	.word	0x200003a0
 8007d04:	200003a1 	.word	0x200003a1
 8007d08:	20000690 	.word	0x20000690

08007d0c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007d30:	68fb      	ldr	r3, [r7, #12]
}
 8007d32:	bf00      	nop
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b085      	sub	sp, #20
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4013      	ands	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007d62:	68fb      	ldr	r3, [r7, #12]
}
 8007d64:	bf00      	nop
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
	////this updates the X and Y axes of my joystick
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]
 8007d7c:	e00a      	b.n	8007d94 <HAL_TIM_PeriodElapsedCallback+0x24>
		  mic = (uint16_t) rawValues[0];
 8007d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8007db0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8007d80:	881a      	ldrh	r2, [r3, #0]
 8007d82:	4b0c      	ldr	r3, [pc, #48]	@ (8007db4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8007d84:	801a      	strh	r2, [r3, #0]
		  mic2 = mic;
 8007d86:	4b0b      	ldr	r3, [pc, #44]	@ (8007db4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8007d88:	881a      	ldrh	r2, [r3, #0]
 8007d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007db8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8007d8c:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	3301      	adds	r3, #1
 8007d92:	73fb      	strb	r3, [r7, #15]
 8007d94:	7bfa      	ldrb	r2, [r7, #15]
 8007d96:	4b09      	ldr	r3, [pc, #36]	@ (8007dbc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d3ef      	bcc.n	8007d7e <HAL_TIM_PeriodElapsedCallback+0xe>
	  }
	  flag = 1;
 8007d9e:	4b08      	ldr	r3, [pc, #32]	@ (8007dc0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8007da0:	2201      	movs	r2, #1
 8007da2:	701a      	strb	r2, [r3, #0]
	  sprintf(msg, "X axis: %hu, Y axis: %hu \r\n", Xaxis, Yaxis);
	  status = CDC_Transmit_FS(msg, strlen((char*)msg));
	  if (status == USBD_OK) {
	  	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin); // Example: Toggle LED on success
	  }*/
  }
 8007da4:	bf00      	nop
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	20000734 	.word	0x20000734
 8007db4:	20000730 	.word	0x20000730
 8007db8:	20000732 	.word	0x20000732
 8007dbc:	200005cc 	.word	0x200005cc
 8007dc0:	20000738 	.word	0x20000738
 8007dc4:	00000000 	.word	0x00000000

08007dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007dc8:	b590      	push	{r4, r7, lr}
 8007dca:	b0bf      	sub	sp, #252	@ 0xfc
 8007dcc:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	int8_t rslt;
	uint8_t sensor_list[2] = { BMI2_ACCEL, BMI2_GYRO };
 8007dce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007dd2:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
	struct bmi2_dev bmi;
	struct bmi2_sens_data sensor_data = { { 0 } };
 8007dd6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007dda:	2228      	movs	r2, #40	@ 0x28
 8007ddc:	2100      	movs	r1, #0
 8007dde:	4618      	mov	r0, r3
 8007de0:	f00f f8d2 	bl	8016f88 <memset>
	float acc_x = 0, acc_y = 0, acc_z = 0;
 8007de4:	f04f 0300 	mov.w	r3, #0
 8007de8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007dec:	f04f 0300 	mov.w	r3, #0
 8007df0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007df4:	f04f 0300 	mov.w	r3, #0
 8007df8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	float gyr_x = 0, gyr_y = 0, gyr_z = 0;
 8007dfc:	f04f 0300 	mov.w	r3, #0
 8007e00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e04:	f04f 0300 	mov.w	r3, #0
 8007e08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007e0c:	f04f 0300 	mov.w	r3, #0
 8007e10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e14:	f001 f8ca 	bl	8008fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e18:	f000 f982 	bl	8008120 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8007e1c:	f000 f9e4 	bl	80081e8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e20:	f000 fb28 	bl	8008474 <MX_GPIO_Init>
  MX_DMA_Init();
 8007e24:	f000 fb14 	bl	8008450 <MX_DMA_Init>
  MX_ADC1_Init();
 8007e28:	f000 fa10 	bl	800824c <MX_ADC1_Init>
  MX_TIM2_Init();
 8007e2c:	f000 fac2 	bl	80083b4 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8007e30:	f00d fcfe 	bl	8015830 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8007e34:	f000 fa7e 	bl	8008334 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ////This begins the process of storing our ADC readings into the DMA. The DMA can be thought of a temporary storage location.
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 8007e38:	2202      	movs	r2, #2
 8007e3a:	49a9      	ldr	r1, [pc, #676]	@ (80080e0 <main+0x318>)
 8007e3c:	48a9      	ldr	r0, [pc, #676]	@ (80080e4 <main+0x31c>)
 8007e3e:	f001 fc93 	bl	8009768 <HAL_ADC_Start_DMA>
    ////This begins our timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8007e42:	48a9      	ldr	r0, [pc, #676]	@ (80080e8 <main+0x320>)
 8007e44:	f008 f8d4 	bl	800fff0 <HAL_TIM_Base_Start_IT>
//  }

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8007e48:	2000      	movs	r0, #0
 8007e4a:	f000 ff3d 	bl	8008cc8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8007e4e:	2001      	movs	r0, #1
 8007e50:	f000 ff3a 	bl	8008cc8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8007e54:	2002      	movs	r0, #2
 8007e56:	f000 ff37 	bl	8008cc8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	f000 ff87 	bl	8008d70 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8007e62:	2101      	movs	r1, #1
 8007e64:	2001      	movs	r0, #1
 8007e66:	f000 ff83 	bl	8008d70 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	2002      	movs	r0, #2
 8007e6e:	f000 ff7f 	bl	8008d70 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8007e72:	4b9e      	ldr	r3, [pc, #632]	@ (80080ec <main+0x324>)
 8007e74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007e78:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8007e7a:	4b9c      	ldr	r3, [pc, #624]	@ (80080ec <main+0x324>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8007e80:	4b9a      	ldr	r3, [pc, #616]	@ (80080ec <main+0x324>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8007e86:	4b99      	ldr	r3, [pc, #612]	@ (80080ec <main+0x324>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8007e8c:	4b97      	ldr	r3, [pc, #604]	@ (80080ec <main+0x324>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8007e92:	4996      	ldr	r1, [pc, #600]	@ (80080ec <main+0x324>)
 8007e94:	2000      	movs	r0, #0
 8007e96:	f000 ffdb 	bl	8008e50 <BSP_COM_Init>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <main+0xdc>
  {
    Error_Handler();
 8007ea0:	f000 fbf1 	bl	8008686 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /*                                                                          ********************************************************************* */
  printf("Before init");
 8007ea4:	4892      	ldr	r0, [pc, #584]	@ (80080f0 <main+0x328>)
 8007ea6:	f00e ff1f 	bl	8016ce8 <iprintf>
  while (BMI160_init(imu_t) == 1); // waits for IMU to be ready
 8007eaa:	bf00      	nop
 8007eac:	4b91      	ldr	r3, [pc, #580]	@ (80080f4 <main+0x32c>)
 8007eae:	466c      	mov	r4, sp
 8007eb0:	f103 0210 	add.w	r2, r3, #16
 8007eb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8007eb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ebc:	f7ff fc72 	bl	80077a4 <BMI160_init>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d0f2      	beq.n	8007eac <main+0xe4>
  rslt = bmi2_interface_init(&bmi, BMI2_I2C_INTF);
 8007ec6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007eca:	2101      	movs	r1, #1
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fc f95f 	bl	8004190 <bmi2_interface_init>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
  bmi2_error_codes_print_result(rslt);
 8007ed8:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fc f99f 	bl	8004220 <bmi2_error_codes_print_result>
  rslt = bmi270_init(&bmi);
 8007ee2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fb f98c 	bl	8003204 <bmi270_init>
 8007eec:	4603      	mov	r3, r0
 8007eee:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
  bmi2_error_codes_print_result(rslt);
 8007ef2:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fc f992 	bl	8004220 <bmi2_error_codes_print_result>
  rslt = set_accel_gyro_config(&bmi);
 8007efc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 fae3 	bl	80084cc <set_accel_gyro_config>
 8007f06:	4603      	mov	r3, r0
 8007f08:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
  bmi2_error_codes_print_result(rslt);
 8007f0c:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fc f985 	bl	8004220 <bmi2_error_codes_print_result>
  rslt = bmi2_sensor_enable(sensor_list, 2, &bmi);
 8007f16:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8007f1a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8007f1e:	2102      	movs	r1, #2
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7f9 fa29 	bl	8001378 <bmi2_sensor_enable>
 8007f26:	4603      	mov	r3, r0
 8007f28:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
  bmi2_error_codes_print_result(rslt);
 8007f2c:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fc f975 	bl	8004220 <bmi2_error_codes_print_result>
  config.type = BMI2_ACCEL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	703b      	strb	r3, [r7, #0]

                  /* Get the accel configurations. */
                  rslt = bmi2_get_sensor_config(&config, 1, &bmi);
 8007f3a:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8007f3e:	463b      	mov	r3, r7
 8007f40:	2101      	movs	r1, #1
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7f9 fb04 	bl	8001550 <bmi2_get_sensor_config>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
                  bmi2_error_codes_print_result(rslt);
 8007f4e:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fc f964 	bl	8004220 <bmi2_error_codes_print_result>

                  printf(
 8007f58:	4867      	ldr	r0, [pc, #412]	@ (80080f8 <main+0x330>)
 8007f5a:	f00e ff35 	bl	8016dc8 <puts>
                      "\nData set, Accel Range, Acc_Raw_X, Acc_Raw_Y, Acc_Raw_Z, Acc_ms2_X, Acc_ms2_Y, Acc_ms2_Z, Gyr_Raw_X, Gyr_Raw_Y, Gyr_Raw_Z, Gyro_DPS_X, Gyro_DPS_Y, Gyro_DPS_Z\n\n");
  printf("After init");
 8007f5e:	4867      	ldr	r0, [pc, #412]	@ (80080fc <main+0x334>)
 8007f60:	f00e fec2 	bl	8016ce8 <iprintf>

  if (imu_t.INIT_OK_i8 != TRUE){
 8007f64:	4b63      	ldr	r3, [pc, #396]	@ (80080f4 <main+0x32c>)
 8007f66:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d002      	beq.n	8007f74 <main+0x1ac>
	  printf("Stuck");
 8007f6e:	4864      	ldr	r0, [pc, #400]	@ (8008100 <main+0x338>)
 8007f70:	f00e feba 	bl	8016ce8 <iprintf>
	  //HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
  }
  printf("Now entering while...");
 8007f74:	4863      	ldr	r0, [pc, #396]	@ (8008104 <main+0x33c>)
 8007f76:	f00e feb7 	bl	8016ce8 <iprintf>
  while (1)
  {
	  bmi160ReadAccelGyro(&imu_t);
 8007f7a:	485e      	ldr	r0, [pc, #376]	@ (80080f4 <main+0x32c>)
 8007f7c:	f7ff fd04 	bl	8007988 <bmi160ReadAccelGyro>
	  //printf("Whileing!");
	  rslt = bmi2_get_sensor_data(&sensor_data, &bmi);
 8007f80:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8007f84:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007f88:	4611      	mov	r1, r2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7f9 fc25 	bl	80017da <bmi2_get_sensor_data>
 8007f90:	4603      	mov	r3, r0
 8007f92:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	  bmi2_error_codes_print_result(rslt);
 8007f96:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fc f940 	bl	8004220 <bmi2_error_codes_print_result>
//	  printf("After get sensor...");
	  if (flag==1){
 8007fa0:	4b59      	ldr	r3, [pc, #356]	@ (8008108 <main+0x340>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d1e8      	bne.n	8007f7a <main+0x1b2>
		  //snprintf(msg, sizeof(msg), "a: %.2f, g: %.2f", a_f32[0], g_f32[0]);
		  //CDC_Transmit_FS((uint8_t *)msg, strlen(msg));

		  // BMI270
		  /* Converting lsb to meter per second squared for 16 bit accelerometer at 2G range. */
		  a_f32[1] = lsb_to_mps2(sensor_data.acc.x, (float)2, bmi.resolution);
 8007fa8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8007fac:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 fade 	bl	8008578 <lsb_to_mps2>
 8007fbc:	eef0 7a40 	vmov.f32	s15, s0
 8007fc0:	4b52      	ldr	r3, [pc, #328]	@ (800810c <main+0x344>)
 8007fc2:	edc3 7a01 	vstr	s15, [r3, #4]
		  a_f32[2] = lsb_to_mps2(sensor_data.acc.y, (float)2, bmi.resolution);
 8007fc6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8007fca:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8007fce:	4611      	mov	r1, r2
 8007fd0:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 facf 	bl	8008578 <lsb_to_mps2>
 8007fda:	eef0 7a40 	vmov.f32	s15, s0
 8007fde:	4b4b      	ldr	r3, [pc, #300]	@ (800810c <main+0x344>)
 8007fe0:	edc3 7a02 	vstr	s15, [r3, #8]
		  a_f32[0] = lsb_to_mps2(sensor_data.acc.z, (float)2, bmi.resolution);
 8007fe4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8007fe8:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8007fec:	4611      	mov	r1, r2
 8007fee:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 fac0 	bl	8008578 <lsb_to_mps2>
 8007ff8:	eef0 7a40 	vmov.f32	s15, s0
 8007ffc:	4b43      	ldr	r3, [pc, #268]	@ (800810c <main+0x344>)
 8007ffe:	edc3 7a00 	vstr	s15, [r3]

		  /* Converting lsb to degree per second for 16 bit gyro at 2000dps range. */
		  g_f32[1] = lsb_to_dps(sensor_data.gyr.x, (float)2000, bmi.resolution)*0.0174533;
 8008002:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8008006:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 800800a:	4611      	mov	r1, r2
 800800c:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8008110 <main+0x348>
 8008010:	4618      	mov	r0, r3
 8008012:	f000 faf9 	bl	8008608 <lsb_to_dps>
 8008016:	ee10 3a10 	vmov	r3, s0
 800801a:	4618      	mov	r0, r3
 800801c:	f7f8 fa6c 	bl	80004f8 <__aeabi_f2d>
 8008020:	a32d      	add	r3, pc, #180	@ (adr r3, 80080d8 <main+0x310>)
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	f7f8 fabf 	bl	80005a8 <__aeabi_dmul>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	4610      	mov	r0, r2
 8008030:	4619      	mov	r1, r3
 8008032:	f7f8 fd91 	bl	8000b58 <__aeabi_d2f>
 8008036:	4603      	mov	r3, r0
 8008038:	4a36      	ldr	r2, [pc, #216]	@ (8008114 <main+0x34c>)
 800803a:	6053      	str	r3, [r2, #4]
		  g_f32[2] = lsb_to_dps(sensor_data.gyr.y, (float)2000, bmi.resolution)*0.0174533;
 800803c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8008040:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8008044:	4611      	mov	r1, r2
 8008046:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8008110 <main+0x348>
 800804a:	4618      	mov	r0, r3
 800804c:	f000 fadc 	bl	8008608 <lsb_to_dps>
 8008050:	ee10 3a10 	vmov	r3, s0
 8008054:	4618      	mov	r0, r3
 8008056:	f7f8 fa4f 	bl	80004f8 <__aeabi_f2d>
 800805a:	a31f      	add	r3, pc, #124	@ (adr r3, 80080d8 <main+0x310>)
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	f7f8 faa2 	bl	80005a8 <__aeabi_dmul>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	4610      	mov	r0, r2
 800806a:	4619      	mov	r1, r3
 800806c:	f7f8 fd74 	bl	8000b58 <__aeabi_d2f>
 8008070:	4603      	mov	r3, r0
 8008072:	4a28      	ldr	r2, [pc, #160]	@ (8008114 <main+0x34c>)
 8008074:	6093      	str	r3, [r2, #8]
		  g_f32[0] = lsb_to_dps(sensor_data.gyr.z, (float)2000, bmi.resolution)*0.0174533;
 8008076:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800807a:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 800807e:	4611      	mov	r1, r2
 8008080:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8008110 <main+0x348>
 8008084:	4618      	mov	r0, r3
 8008086:	f000 fabf 	bl	8008608 <lsb_to_dps>
 800808a:	ee10 3a10 	vmov	r3, s0
 800808e:	4618      	mov	r0, r3
 8008090:	f7f8 fa32 	bl	80004f8 <__aeabi_f2d>
 8008094:	a310      	add	r3, pc, #64	@ (adr r3, 80080d8 <main+0x310>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f7f8 fa85 	bl	80005a8 <__aeabi_dmul>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4610      	mov	r0, r2
 80080a4:	4619      	mov	r1, r3
 80080a6:	f7f8 fd57 	bl	8000b58 <__aeabi_d2f>
 80080aa:	4603      	mov	r3, r0
 80080ac:	4a19      	ldr	r2, [pc, #100]	@ (8008114 <main+0x34c>)
 80080ae:	6013      	str	r3, [r2, #0]

		  prepare_data_packet_IMU(g_f32,a_f32,USB_buffer,&packet_length);
 80080b0:	4b19      	ldr	r3, [pc, #100]	@ (8008118 <main+0x350>)
 80080b2:	4a1a      	ldr	r2, [pc, #104]	@ (800811c <main+0x354>)
 80080b4:	4915      	ldr	r1, [pc, #84]	@ (800810c <main+0x344>)
 80080b6:	4817      	ldr	r0, [pc, #92]	@ (8008114 <main+0x34c>)
 80080b8:	f000 f9e9 	bl	800848e <prepare_data_packet_IMU>
		  		  CDC_Transmit_FS(USB_buffer, packet_length);
 80080bc:	4b16      	ldr	r3, [pc, #88]	@ (8008118 <main+0x350>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	4619      	mov	r1, r3
 80080c4:	4815      	ldr	r0, [pc, #84]	@ (800811c <main+0x354>)
 80080c6:	f00d fc71 	bl	80159ac <CDC_Transmit_FS>
		  		  BSP_LED_Toggle(LED_GREEN);
 80080ca:	2001      	movs	r0, #1
 80080cc:	f000 fe36 	bl	8008d3c <BSP_LED_Toggle>
//
//		  countertemp++;
//		  printf("%d\r\n",countertemp);


		  flag = 0;
 80080d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008108 <main+0x340>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	701a      	strb	r2, [r3, #0]
	  bmi160ReadAccelGyro(&imu_t);
 80080d6:	e750      	b.n	8007f7a <main+0x1b2>
 80080d8:	22d4405f 	.word	0x22d4405f
 80080dc:	3f91df47 	.word	0x3f91df47
 80080e0:	20000734 	.word	0x20000734
 80080e4:	200005cc 	.word	0x200005cc
 80080e8:	200006e4 	.word	0x200006e4
 80080ec:	200005bc 	.word	0x200005bc
 80080f0:	0801ab2c 	.word	0x0801ab2c
 80080f4:	200005a0 	.word	0x200005a0
 80080f8:	0801ab38 	.word	0x0801ab38
 80080fc:	0801abd8 	.word	0x0801abd8
 8008100:	0801abe4 	.word	0x0801abe4
 8008104:	0801abec 	.word	0x0801abec
 8008108:	20000738 	.word	0x20000738
 800810c:	2000076c 	.word	0x2000076c
 8008110:	44fa0000 	.word	0x44fa0000
 8008114:	20000760 	.word	0x20000760
 8008118:	2000075c 	.word	0x2000075c
 800811c:	2000073c 	.word	0x2000073c

08008120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b09a      	sub	sp, #104	@ 0x68
 8008124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008126:	f107 0320 	add.w	r3, r7, #32
 800812a:	2248      	movs	r2, #72	@ 0x48
 800812c:	2100      	movs	r1, #0
 800812e:	4618      	mov	r0, r3
 8008130:	f00e ff2a 	bl	8016f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008134:	1d3b      	adds	r3, r7, #4
 8008136:	2200      	movs	r2, #0
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	605a      	str	r2, [r3, #4]
 800813c:	609a      	str	r2, [r3, #8]
 800813e:	60da      	str	r2, [r3, #12]
 8008140:	611a      	str	r2, [r3, #16]
 8008142:	615a      	str	r2, [r3, #20]
 8008144:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008146:	4b27      	ldr	r3, [pc, #156]	@ (80081e4 <SystemClock_Config+0xc4>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800814e:	4a25      	ldr	r2, [pc, #148]	@ (80081e4 <SystemClock_Config+0xc4>)
 8008150:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008154:	6013      	str	r3, [r2, #0]
 8008156:	4b23      	ldr	r3, [pc, #140]	@ (80081e4 <SystemClock_Config+0xc4>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800815e:	603b      	str	r3, [r7, #0]
 8008160:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8008162:	2303      	movs	r3, #3
 8008164:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008166:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800816a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800816c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008170:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008172:	2340      	movs	r3, #64	@ 0x40
 8008174:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008176:	2302      	movs	r3, #2
 8008178:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800817a:	2303      	movs	r3, #3
 800817c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800817e:	2310      	movs	r3, #16
 8008180:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8008182:	2308      	movs	r3, #8
 8008184:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008186:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800818a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800818c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8008190:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008192:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008196:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008198:	f107 0320 	add.w	r3, r7, #32
 800819c:	4618      	mov	r0, r3
 800819e:	f006 fc97 	bl	800ead0 <HAL_RCC_OscConfig>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80081a8:	f000 fa6d 	bl	8008686 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80081ac:	236f      	movs	r3, #111	@ 0x6f
 80081ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80081b0:	2303      	movs	r3, #3
 80081b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80081b4:	2300      	movs	r3, #0
 80081b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80081b8:	2300      	movs	r3, #0
 80081ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80081bc:	2300      	movs	r3, #0
 80081be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80081c0:	2380      	movs	r3, #128	@ 0x80
 80081c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80081c4:	2300      	movs	r3, #0
 80081c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80081c8:	1d3b      	adds	r3, r7, #4
 80081ca:	2103      	movs	r1, #3
 80081cc:	4618      	mov	r0, r3
 80081ce:	f006 fff3 	bl	800f1b8 <HAL_RCC_ClockConfig>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80081d8:	f000 fa55 	bl	8008686 <Error_Handler>
  }
}
 80081dc:	bf00      	nop
 80081de:	3768      	adds	r7, #104	@ 0x68
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	58000400 	.word	0x58000400

080081e8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b094      	sub	sp, #80	@ 0x50
 80081ec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80081ee:	463b      	mov	r3, r7
 80081f0:	2250      	movs	r2, #80	@ 0x50
 80081f2:	2100      	movs	r1, #0
 80081f4:	4618      	mov	r0, r3
 80081f6:	f00e fec7 	bl	8016f88 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 80081fa:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 80081fe:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8008200:	2306      	movs	r3, #6
 8008202:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8008204:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008208:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800820a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800820e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8008210:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8008214:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8008216:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 800821a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800821c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008220:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8008222:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008226:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8008228:	2300      	movs	r3, #0
 800822a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800822c:	2300      	movs	r3, #0
 800822e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008230:	463b      	mov	r3, r7
 8008232:	4618      	mov	r0, r3
 8008234:	f007 fbfd 	bl	800fa32 <HAL_RCCEx_PeriphCLKConfig>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800823e:	f000 fa22 	bl	8008686 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8008242:	bf00      	nop
 8008244:	3750      	adds	r7, #80	@ 0x50
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
	...

0800824c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008252:	463b      	mov	r3, r7
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	605a      	str	r2, [r3, #4]
 800825a:	609a      	str	r2, [r3, #8]
 800825c:	60da      	str	r2, [r3, #12]
 800825e:	611a      	str	r2, [r3, #16]
 8008260:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8008262:	4b30      	ldr	r3, [pc, #192]	@ (8008324 <MX_ADC1_Init+0xd8>)
 8008264:	4a30      	ldr	r2, [pc, #192]	@ (8008328 <MX_ADC1_Init+0xdc>)
 8008266:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8008268:	4b2e      	ldr	r3, [pc, #184]	@ (8008324 <MX_ADC1_Init+0xd8>)
 800826a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800826e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008270:	4b2c      	ldr	r3, [pc, #176]	@ (8008324 <MX_ADC1_Init+0xd8>)
 8008272:	2200      	movs	r2, #0
 8008274:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008276:	4b2b      	ldr	r3, [pc, #172]	@ (8008324 <MX_ADC1_Init+0xd8>)
 8008278:	2200      	movs	r2, #0
 800827a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800827c:	4b29      	ldr	r3, [pc, #164]	@ (8008324 <MX_ADC1_Init+0xd8>)
 800827e:	2201      	movs	r2, #1
 8008280:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008282:	4b28      	ldr	r3, [pc, #160]	@ (8008324 <MX_ADC1_Init+0xd8>)
 8008284:	2204      	movs	r2, #4
 8008286:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008288:	4b26      	ldr	r3, [pc, #152]	@ (8008324 <MX_ADC1_Init+0xd8>)
 800828a:	2200      	movs	r2, #0
 800828c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800828e:	4b25      	ldr	r3, [pc, #148]	@ (8008324 <MX_ADC1_Init+0xd8>)
 8008290:	2201      	movs	r2, #1
 8008292:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8008294:	4b23      	ldr	r3, [pc, #140]	@ (8008324 <MX_ADC1_Init+0xd8>)
 8008296:	2202      	movs	r2, #2
 8008298:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800829a:	4b22      	ldr	r3, [pc, #136]	@ (8008324 <MX_ADC1_Init+0xd8>)
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80082a2:	4b20      	ldr	r3, [pc, #128]	@ (8008324 <MX_ADC1_Init+0xd8>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80082a8:	4b1e      	ldr	r3, [pc, #120]	@ (8008324 <MX_ADC1_Init+0xd8>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80082ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008324 <MX_ADC1_Init+0xd8>)
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80082b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008324 <MX_ADC1_Init+0xd8>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80082bc:	4b19      	ldr	r3, [pc, #100]	@ (8008324 <MX_ADC1_Init+0xd8>)
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80082c4:	4817      	ldr	r0, [pc, #92]	@ (8008324 <MX_ADC1_Init+0xd8>)
 80082c6:	f001 f903 	bl	80094d0 <HAL_ADC_Init>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80082d0:	f000 f9d9 	bl	8008686 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80082d4:	4b15      	ldr	r3, [pc, #84]	@ (800832c <MX_ADC1_Init+0xe0>)
 80082d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80082d8:	2306      	movs	r3, #6
 80082da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80082dc:	2306      	movs	r3, #6
 80082de:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80082e0:	237f      	movs	r3, #127	@ 0x7f
 80082e2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80082e4:	2304      	movs	r3, #4
 80082e6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80082ec:	463b      	mov	r3, r7
 80082ee:	4619      	mov	r1, r3
 80082f0:	480c      	ldr	r0, [pc, #48]	@ (8008324 <MX_ADC1_Init+0xd8>)
 80082f2:	f001 fc9b 	bl	8009c2c <HAL_ADC_ConfigChannel>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80082fc:	f000 f9c3 	bl	8008686 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8008300:	4b0b      	ldr	r3, [pc, #44]	@ (8008330 <MX_ADC1_Init+0xe4>)
 8008302:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8008304:	230c      	movs	r3, #12
 8008306:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008308:	463b      	mov	r3, r7
 800830a:	4619      	mov	r1, r3
 800830c:	4805      	ldr	r0, [pc, #20]	@ (8008324 <MX_ADC1_Init+0xd8>)
 800830e:	f001 fc8d 	bl	8009c2c <HAL_ADC_ConfigChannel>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8008318:	f000 f9b5 	bl	8008686 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800831c:	bf00      	nop
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	200005cc 	.word	0x200005cc
 8008328:	50040000 	.word	0x50040000
 800832c:	04300002 	.word	0x04300002
 8008330:	08600004 	.word	0x08600004

08008334 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008338:	4b1b      	ldr	r3, [pc, #108]	@ (80083a8 <MX_I2C1_Init+0x74>)
 800833a:	4a1c      	ldr	r2, [pc, #112]	@ (80083ac <MX_I2C1_Init+0x78>)
 800833c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800833e:	4b1a      	ldr	r3, [pc, #104]	@ (80083a8 <MX_I2C1_Init+0x74>)
 8008340:	4a1b      	ldr	r2, [pc, #108]	@ (80083b0 <MX_I2C1_Init+0x7c>)
 8008342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008344:	4b18      	ldr	r3, [pc, #96]	@ (80083a8 <MX_I2C1_Init+0x74>)
 8008346:	2200      	movs	r2, #0
 8008348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800834a:	4b17      	ldr	r3, [pc, #92]	@ (80083a8 <MX_I2C1_Init+0x74>)
 800834c:	2201      	movs	r2, #1
 800834e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008350:	4b15      	ldr	r3, [pc, #84]	@ (80083a8 <MX_I2C1_Init+0x74>)
 8008352:	2200      	movs	r2, #0
 8008354:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008356:	4b14      	ldr	r3, [pc, #80]	@ (80083a8 <MX_I2C1_Init+0x74>)
 8008358:	2200      	movs	r2, #0
 800835a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800835c:	4b12      	ldr	r3, [pc, #72]	@ (80083a8 <MX_I2C1_Init+0x74>)
 800835e:	2200      	movs	r2, #0
 8008360:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008362:	4b11      	ldr	r3, [pc, #68]	@ (80083a8 <MX_I2C1_Init+0x74>)
 8008364:	2200      	movs	r2, #0
 8008366:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008368:	4b0f      	ldr	r3, [pc, #60]	@ (80083a8 <MX_I2C1_Init+0x74>)
 800836a:	2200      	movs	r2, #0
 800836c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800836e:	480e      	ldr	r0, [pc, #56]	@ (80083a8 <MX_I2C1_Init+0x74>)
 8008370:	f002 ff19 	bl	800b1a6 <HAL_I2C_Init>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800837a:	f000 f984 	bl	8008686 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800837e:	2100      	movs	r1, #0
 8008380:	4809      	ldr	r0, [pc, #36]	@ (80083a8 <MX_I2C1_Init+0x74>)
 8008382:	f004 fa37 	bl	800c7f4 <HAL_I2CEx_ConfigAnalogFilter>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800838c:	f000 f97b 	bl	8008686 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008390:	2100      	movs	r1, #0
 8008392:	4805      	ldr	r0, [pc, #20]	@ (80083a8 <MX_I2C1_Init+0x74>)
 8008394:	f004 fa79 	bl	800c88a <HAL_I2CEx_ConfigDigitalFilter>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800839e:	f000 f972 	bl	8008686 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80083a2:	bf00      	nop
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20000690 	.word	0x20000690
 80083ac:	40005400 	.word	0x40005400
 80083b0:	10b17db5 	.word	0x10b17db5

080083b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80083ba:	f107 0310 	add.w	r3, r7, #16
 80083be:	2200      	movs	r2, #0
 80083c0:	601a      	str	r2, [r3, #0]
 80083c2:	605a      	str	r2, [r3, #4]
 80083c4:	609a      	str	r2, [r3, #8]
 80083c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80083c8:	1d3b      	adds	r3, r7, #4
 80083ca:	2200      	movs	r2, #0
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	605a      	str	r2, [r3, #4]
 80083d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80083d2:	4b1e      	ldr	r3, [pc, #120]	@ (800844c <MX_TIM2_Init+0x98>)
 80083d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80083d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80083da:	4b1c      	ldr	r3, [pc, #112]	@ (800844c <MX_TIM2_Init+0x98>)
 80083dc:	220a      	movs	r2, #10
 80083de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083e0:	4b1a      	ldr	r3, [pc, #104]	@ (800844c <MX_TIM2_Init+0x98>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000-1;
 80083e6:	4b19      	ldr	r3, [pc, #100]	@ (800844c <MX_TIM2_Init+0x98>)
 80083e8:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80083ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083ee:	4b17      	ldr	r3, [pc, #92]	@ (800844c <MX_TIM2_Init+0x98>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80083f4:	4b15      	ldr	r3, [pc, #84]	@ (800844c <MX_TIM2_Init+0x98>)
 80083f6:	2280      	movs	r2, #128	@ 0x80
 80083f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80083fa:	4814      	ldr	r0, [pc, #80]	@ (800844c <MX_TIM2_Init+0x98>)
 80083fc:	f007 fda0 	bl	800ff40 <HAL_TIM_Base_Init>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8008406:	f000 f93e 	bl	8008686 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800840a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800840e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008410:	f107 0310 	add.w	r3, r7, #16
 8008414:	4619      	mov	r1, r3
 8008416:	480d      	ldr	r0, [pc, #52]	@ (800844c <MX_TIM2_Init+0x98>)
 8008418:	f007 ff3f 	bl	801029a <HAL_TIM_ConfigClockSource>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8008422:	f000 f930 	bl	8008686 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008426:	2320      	movs	r3, #32
 8008428:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800842e:	1d3b      	adds	r3, r7, #4
 8008430:	4619      	mov	r1, r3
 8008432:	4806      	ldr	r0, [pc, #24]	@ (800844c <MX_TIM2_Init+0x98>)
 8008434:	f008 f92e 	bl	8010694 <HAL_TIMEx_MasterConfigSynchronization>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800843e:	f000 f922 	bl	8008686 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008442:	bf00      	nop
 8008444:	3720      	adds	r7, #32
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	200006e4 	.word	0x200006e4

08008450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008454:	2004      	movs	r0, #4
 8008456:	f7ff fc59 	bl	8007d0c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800845a:	2001      	movs	r0, #1
 800845c:	f7ff fc56 	bl	8007d0c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8008460:	2200      	movs	r2, #0
 8008462:	2100      	movs	r1, #0
 8008464:	200b      	movs	r0, #11
 8008466:	f002 f9c2 	bl	800a7ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800846a:	200b      	movs	r0, #11
 800846c:	f002 f9d9 	bl	800a822 <HAL_NVIC_EnableIRQ>

}
 8008470:	bf00      	nop
 8008472:	bd80      	pop	{r7, pc}

08008474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008478:	2004      	movs	r0, #4
 800847a:	f7ff fc60 	bl	8007d3e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800847e:	2002      	movs	r0, #2
 8008480:	f7ff fc5d 	bl	8007d3e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008484:	2001      	movs	r0, #1
 8008486:	f7ff fc5a 	bl	8007d3e <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800848a:	bf00      	nop
 800848c:	bd80      	pop	{r7, pc}

0800848e <prepare_data_packet_IMU>:
    buffer[1 + 2 * sizeof(float) * 3 + sizeof(uint16_t)] = (uint16_t)var2;*/

    // Set the total length of the packet
    *length = 1 + 2 * sizeof(float) * 3 + 2*sizeof(uint16_t);
}
void prepare_data_packet_IMU(float g_f32[3], float a_f32[3], uint8_t *buffer, size_t *length) {
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	60f8      	str	r0, [r7, #12]
 8008496:	60b9      	str	r1, [r7, #8]
 8008498:	607a      	str	r2, [r7, #4]
 800849a:	603b      	str	r3, [r7, #0]
    // Define the start byte
    buffer[0] = (uint8_t)-128;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2280      	movs	r2, #128	@ 0x80
 80084a0:	701a      	strb	r2, [r3, #0]
    memcpy(&buffer[1], g_f32, sizeof(float) * 3);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	3301      	adds	r3, #1
 80084a6:	220c      	movs	r2, #12
 80084a8:	68f9      	ldr	r1, [r7, #12]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f00e fdeb 	bl	8017086 <memcpy>
    memcpy(&buffer[1 + sizeof(float) * 3], a_f32, sizeof(float) * 3);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	330d      	adds	r3, #13
 80084b4:	220c      	movs	r2, #12
 80084b6:	68b9      	ldr	r1, [r7, #8]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f00e fde4 	bl	8017086 <memcpy>

    // Set the total length of the packet
    *length = 1 + 2 * sizeof(float) * 3;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2219      	movs	r2, #25
 80084c2:	601a      	str	r2, [r3, #0]
}
 80084c4:	bf00      	nop
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <set_accel_gyro_config>:
	send_packet_joystick(x,y);
	HAL_Delay(delay);
}

static int8_t set_accel_gyro_config(struct bmi2_dev *bmi)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b0a0      	sub	sp, #128	@ 0x80
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]

    /* Structure to define accelerometer and gyro configuration. */
    struct bmi2_sens_config config[2];

    /* Configure the type of feature. */
    config[ACCEL].type = BMI2_ACCEL;
 80084d4:	2300      	movs	r3, #0
 80084d6:	733b      	strb	r3, [r7, #12]
    config[GYRO].type = BMI2_GYRO;
 80084d8:	2301      	movs	r3, #1
 80084da:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

    /* Get default configurations for the type of feature selected. */
    rslt = bmi270_set_sensor_config(config, 2, bmi);
 80084de:	f107 030c 	add.w	r3, r7, #12
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	2102      	movs	r1, #2
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fa feea 	bl	80032c0 <bmi270_set_sensor_config>
 80084ec:	4603      	mov	r3, r0
 80084ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    bmi2_error_codes_print_result(rslt);
 80084f2:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fb fe92 	bl	8004220 <bmi2_error_codes_print_result>

    /* Map data ready interrupt to interrupt pin. */
    rslt = bmi2_map_data_int(BMI2_DRDY_INT, BMI2_INT1, bmi);
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	2101      	movs	r1, #1
 8008500:	2004      	movs	r0, #4
 8008502:	f7f9 fa2f 	bl	8001964 <bmi2_map_data_int>
 8008506:	4603      	mov	r3, r0
 8008508:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    bmi2_error_codes_print_result(rslt);
 800850c:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 8008510:	4618      	mov	r0, r3
 8008512:	f7fb fe85 	bl	8004220 <bmi2_error_codes_print_result>

    if (rslt == BMI2_OK)
 8008516:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 800851a:	2b00      	cmp	r3, #0
 800851c:	d125      	bne.n	800856a <set_accel_gyro_config+0x9e>
    {
        /* NOTE: The user can change the following configuration parameters according to their requirement. */
        /* Set Output Data Rate */
        config[ACCEL].cfg.acc.odr = BMI2_ACC_ODR_800HZ;
 800851e:	230b      	movs	r3, #11
 8008520:	743b      	strb	r3, [r7, #16]

        /* Gravity range of the sensor (+/- 2G, 4G, 8G, 16G). */
        config[ACCEL].cfg.acc.range = BMI2_ACC_RANGE_2G;
 8008522:	2300      	movs	r3, #0
 8008524:	74fb      	strb	r3, [r7, #19]
         * are averaged, resulting in 4 averaged samples.
         * Note1 : For more information, refer the datasheet.
         * Note2 : A higher number of averaged samples will result in a lower noise level of the signal, but
         * this has an adverse effect on the power consumed.
         */
        config[ACCEL].cfg.acc.bwp = BMI2_ACC_NORMAL_AVG4;
 8008526:	2302      	movs	r3, #2
 8008528:	747b      	strb	r3, [r7, #17]
         * There are two modes
         *  0 -> Ultra low power mode
         *  1 -> High performance mode(Default)
         * For more info refer datasheet.
         */
        config[ACCEL].cfg.acc.filter_perf = BMI2_PERF_OPT_MODE;
 800852a:	2301      	movs	r3, #1
 800852c:	74bb      	strb	r3, [r7, #18]

        /* The user can change the following configuration parameters according to their requirement. */
        /* Set Output Data Rate */
        config[GYRO].cfg.gyr.odr = BMI2_GYR_ODR_800HZ;
 800852e:	230b      	movs	r3, #11
 8008530:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

        /* Gyroscope Angular Rate Measurement Range.By default the range is 2000dps. */
        config[GYRO].cfg.gyr.range = BMI2_GYR_RANGE_2000;
 8008534:	2300      	movs	r3, #0
 8008536:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

        /* Gyroscope bandwidth parameters. By default the gyro bandwidth is in normal mode. */
        config[GYRO].cfg.gyr.bwp = BMI2_GYR_NORMAL_MODE;
 800853a:	2302      	movs	r3, #2
 800853c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
        /* Enable/Disable the noise performance mode for precision yaw rate sensing
         * There are two modes
         *  0 -> Ultra low power mode(Default)
         *  1 -> High performance mode
         */
        config[GYRO].cfg.gyr.noise_perf = BMI2_POWER_OPT_MODE;
 8008540:	2300      	movs	r3, #0
 8008542:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
         * will be done based on above set bandwidth and ODR.
         * There are two modes
         *  0 -> Ultra low power mode
         *  1 -> High performance mode(Default)
         */
        config[GYRO].cfg.gyr.filter_perf = BMI2_PERF_OPT_MODE;
 8008546:	2301      	movs	r3, #1
 8008548:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

        /* Set the accel and gyro configurations. */
        rslt = bmi270_set_sensor_config(config, 2, bmi);
 800854c:	f107 030c 	add.w	r3, r7, #12
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	2102      	movs	r1, #2
 8008554:	4618      	mov	r0, r3
 8008556:	f7fa feb3 	bl	80032c0 <bmi270_set_sensor_config>
 800855a:	4603      	mov	r3, r0
 800855c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        bmi2_error_codes_print_result(rslt);
 8008560:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 8008564:	4618      	mov	r0, r3
 8008566:	f7fb fe5b 	bl	8004220 <bmi2_error_codes_print_result>
    }

    return rslt;
 800856a:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
}
 800856e:	4618      	mov	r0, r3
 8008570:	3780      	adds	r7, #128	@ 0x80
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <lsb_to_mps2>:

static float lsb_to_mps2(int16_t val, float g_range, uint8_t bit_width)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	4603      	mov	r3, r0
 8008580:	ed87 0a00 	vstr	s0, [r7]
 8008584:	460a      	mov	r2, r1
 8008586:	80fb      	strh	r3, [r7, #6]
 8008588:	4613      	mov	r3, r2
 800858a:	717b      	strb	r3, [r7, #5]
    double power = 2;
 800858c:	f04f 0200 	mov.w	r2, #0
 8008590:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008594:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8008598:	797b      	ldrb	r3, [r7, #5]
 800859a:	4618      	mov	r0, r3
 800859c:	f7f7 ff8a 	bl	80004b4 <__aeabi_ui2d>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	ec43 2b11 	vmov	d1, r2, r3
 80085a8:	ed97 0b04 	vldr	d0, [r7, #16]
 80085ac:	f010 fbb0 	bl	8018d10 <pow>
 80085b0:	ec51 0b10 	vmov	r0, r1, d0
 80085b4:	f04f 0200 	mov.w	r2, #0
 80085b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80085bc:	f7f8 f91e 	bl	80007fc <__aeabi_ddiv>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	4610      	mov	r0, r2
 80085c6:	4619      	mov	r1, r3
 80085c8:	f7f8 fac6 	bl	8000b58 <__aeabi_d2f>
 80085cc:	4603      	mov	r3, r0
 80085ce:	60fb      	str	r3, [r7, #12]

    return (GRAVITY_EARTH * val * g_range) / half_scale;
 80085d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085d4:	ee07 3a90 	vmov	s15, r3
 80085d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085dc:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8008604 <lsb_to_mps2+0x8c>
 80085e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80085e4:	edd7 7a00 	vldr	s15, [r7]
 80085e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80085ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80085f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80085f4:	eef0 7a66 	vmov.f32	s15, s13
}
 80085f8:	eeb0 0a67 	vmov.f32	s0, s15
 80085fc:	3718      	adds	r7, #24
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	411ce80a 	.word	0x411ce80a

08008608 <lsb_to_dps>:
/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
static float lsb_to_dps(int16_t val, float dps, uint8_t bit_width)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	ed87 0a00 	vstr	s0, [r7]
 8008614:	460a      	mov	r2, r1
 8008616:	80fb      	strh	r3, [r7, #6]
 8008618:	4613      	mov	r3, r2
 800861a:	717b      	strb	r3, [r7, #5]
    double power = 2;
 800861c:	f04f 0200 	mov.w	r2, #0
 8008620:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008624:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8008628:	797b      	ldrb	r3, [r7, #5]
 800862a:	4618      	mov	r0, r3
 800862c:	f7f7 ff42 	bl	80004b4 <__aeabi_ui2d>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	ec43 2b11 	vmov	d1, r2, r3
 8008638:	ed97 0b04 	vldr	d0, [r7, #16]
 800863c:	f010 fb68 	bl	8018d10 <pow>
 8008640:	ec51 0b10 	vmov	r0, r1, d0
 8008644:	f04f 0200 	mov.w	r2, #0
 8008648:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800864c:	f7f8 f8d6 	bl	80007fc <__aeabi_ddiv>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4610      	mov	r0, r2
 8008656:	4619      	mov	r1, r3
 8008658:	f7f8 fa7e 	bl	8000b58 <__aeabi_d2f>
 800865c:	4603      	mov	r3, r0
 800865e:	60fb      	str	r3, [r7, #12]

    return (dps / (half_scale)) * (val);
 8008660:	edd7 6a00 	vldr	s13, [r7]
 8008664:	edd7 7a03 	vldr	s15, [r7, #12]
 8008668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800866c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008670:	ee07 3a90 	vmov	s15, r3
 8008674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008678:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800867c:	eeb0 0a67 	vmov.f32	s0, s15
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008686:	b480      	push	{r7}
 8008688:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800868a:	b672      	cpsid	i
}
 800868c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800868e:	bf00      	nop
 8008690:	e7fd      	b.n	800868e <Error_Handler+0x8>

08008692 <LL_AHB2_GRP1_EnableClock>:
{
 8008692:	b480      	push	{r7}
 8008694:	b085      	sub	sp, #20
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800869a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800869e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80086aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4013      	ands	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80086b6:	68fb      	ldr	r3, [r7, #12]
}
 80086b8:	bf00      	nop
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80086cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80086d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4313      	orrs	r3, r2
 80086da:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80086dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4013      	ands	r3, r2
 80086e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80086e8:	68fb      	ldr	r3, [r7, #12]
}
 80086ea:	bf00      	nop
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80086f6:	b480      	push	{r7}
 80086f8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80086fa:	bf00      	nop
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b088      	sub	sp, #32
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800870c:	f107 030c 	add.w	r3, r7, #12
 8008710:	2200      	movs	r2, #0
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	605a      	str	r2, [r3, #4]
 8008716:	609a      	str	r2, [r3, #8]
 8008718:	60da      	str	r2, [r3, #12]
 800871a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a26      	ldr	r2, [pc, #152]	@ (80087bc <HAL_ADC_MspInit+0xb8>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d145      	bne.n	80087b2 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8008726:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800872a:	f7ff ffb2 	bl	8008692 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800872e:	2004      	movs	r0, #4
 8008730:	f7ff ffaf 	bl	8008692 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008734:	2303      	movs	r3, #3
 8008736:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008738:	2303      	movs	r3, #3
 800873a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800873c:	2300      	movs	r3, #0
 800873e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008740:	f107 030c 	add.w	r3, r7, #12
 8008744:	4619      	mov	r1, r3
 8008746:	481e      	ldr	r0, [pc, #120]	@ (80087c0 <HAL_ADC_MspInit+0xbc>)
 8008748:	f002 fb68 	bl	800ae1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800874c:	4b1d      	ldr	r3, [pc, #116]	@ (80087c4 <HAL_ADC_MspInit+0xc0>)
 800874e:	4a1e      	ldr	r2, [pc, #120]	@ (80087c8 <HAL_ADC_MspInit+0xc4>)
 8008750:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8008752:	4b1c      	ldr	r3, [pc, #112]	@ (80087c4 <HAL_ADC_MspInit+0xc0>)
 8008754:	2205      	movs	r2, #5
 8008756:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008758:	4b1a      	ldr	r3, [pc, #104]	@ (80087c4 <HAL_ADC_MspInit+0xc0>)
 800875a:	2200      	movs	r2, #0
 800875c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800875e:	4b19      	ldr	r3, [pc, #100]	@ (80087c4 <HAL_ADC_MspInit+0xc0>)
 8008760:	2200      	movs	r2, #0
 8008762:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008764:	4b17      	ldr	r3, [pc, #92]	@ (80087c4 <HAL_ADC_MspInit+0xc0>)
 8008766:	2280      	movs	r2, #128	@ 0x80
 8008768:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800876a:	4b16      	ldr	r3, [pc, #88]	@ (80087c4 <HAL_ADC_MspInit+0xc0>)
 800876c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008770:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008772:	4b14      	ldr	r3, [pc, #80]	@ (80087c4 <HAL_ADC_MspInit+0xc0>)
 8008774:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008778:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800877a:	4b12      	ldr	r3, [pc, #72]	@ (80087c4 <HAL_ADC_MspInit+0xc0>)
 800877c:	2220      	movs	r2, #32
 800877e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008780:	4b10      	ldr	r3, [pc, #64]	@ (80087c4 <HAL_ADC_MspInit+0xc0>)
 8008782:	2200      	movs	r2, #0
 8008784:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008786:	480f      	ldr	r0, [pc, #60]	@ (80087c4 <HAL_ADC_MspInit+0xc0>)
 8008788:	f002 f866 	bl	800a858 <HAL_DMA_Init>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 8008792:	f7ff ff78 	bl	8008686 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a0a      	ldr	r2, [pc, #40]	@ (80087c4 <HAL_ADC_MspInit+0xc0>)
 800879a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800879c:	4a09      	ldr	r2, [pc, #36]	@ (80087c4 <HAL_ADC_MspInit+0xc0>)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 80087a2:	2200      	movs	r2, #0
 80087a4:	2102      	movs	r1, #2
 80087a6:	2012      	movs	r0, #18
 80087a8:	f002 f821 	bl	800a7ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80087ac:	2012      	movs	r0, #18
 80087ae:	f002 f838 	bl	800a822 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80087b2:	bf00      	nop
 80087b4:	3720      	adds	r7, #32
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	50040000 	.word	0x50040000
 80087c0:	48000800 	.word	0x48000800
 80087c4:	20000630 	.word	0x20000630
 80087c8:	40020008 	.word	0x40020008

080087cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b09c      	sub	sp, #112	@ 0x70
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	605a      	str	r2, [r3, #4]
 80087de:	609a      	str	r2, [r3, #8]
 80087e0:	60da      	str	r2, [r3, #12]
 80087e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80087e4:	f107 030c 	add.w	r3, r7, #12
 80087e8:	2250      	movs	r2, #80	@ 0x50
 80087ea:	2100      	movs	r1, #0
 80087ec:	4618      	mov	r0, r3
 80087ee:	f00e fbcb 	bl	8016f88 <memset>
  if(hi2c->Instance==I2C1)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a1f      	ldr	r2, [pc, #124]	@ (8008874 <HAL_I2C_MspInit+0xa8>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d136      	bne.n	800886a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80087fc:	2304      	movs	r3, #4
 80087fe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008800:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8008804:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008806:	f107 030c 	add.w	r3, r7, #12
 800880a:	4618      	mov	r0, r3
 800880c:	f007 f911 	bl	800fa32 <HAL_RCCEx_PeriphCLKConfig>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8008816:	f7ff ff36 	bl	8008686 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800881a:	2002      	movs	r0, #2
 800881c:	f7ff ff39 	bl	8008692 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008820:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008824:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008826:	2312      	movs	r3, #18
 8008828:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800882a:	2300      	movs	r3, #0
 800882c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800882e:	2300      	movs	r3, #0
 8008830:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008832:	2304      	movs	r3, #4
 8008834:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008836:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800883a:	4619      	mov	r1, r3
 800883c:	480e      	ldr	r0, [pc, #56]	@ (8008878 <HAL_I2C_MspInit+0xac>)
 800883e:	f002 faed 	bl	800ae1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008842:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008846:	f7ff ff3d 	bl	80086c4 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800884a:	2200      	movs	r2, #0
 800884c:	2100      	movs	r1, #0
 800884e:	201e      	movs	r0, #30
 8008850:	f001 ffcd 	bl	800a7ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8008854:	201e      	movs	r0, #30
 8008856:	f001 ffe4 	bl	800a822 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800885a:	2200      	movs	r2, #0
 800885c:	2100      	movs	r1, #0
 800885e:	201f      	movs	r0, #31
 8008860:	f001 ffc5 	bl	800a7ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8008864:	201f      	movs	r0, #31
 8008866:	f001 ffdc 	bl	800a822 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800886a:	bf00      	nop
 800886c:	3770      	adds	r7, #112	@ 0x70
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	40005400 	.word	0x40005400
 8008878:	48000400 	.word	0x48000400

0800887c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800888c:	d10a      	bne.n	80088a4 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800888e:	2001      	movs	r0, #1
 8008890:	f7ff ff18 	bl	80086c4 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008894:	2200      	movs	r2, #0
 8008896:	2100      	movs	r1, #0
 8008898:	201c      	movs	r0, #28
 800889a:	f001 ffa8 	bl	800a7ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800889e:	201c      	movs	r0, #28
 80088a0:	f001 ffbf 	bl	800a822 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80088a4:	bf00      	nop
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80088b0:	bf00      	nop
 80088b2:	e7fd      	b.n	80088b0 <NMI_Handler+0x4>

080088b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80088b4:	b480      	push	{r7}
 80088b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80088b8:	bf00      	nop
 80088ba:	e7fd      	b.n	80088b8 <HardFault_Handler+0x4>

080088bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80088bc:	b480      	push	{r7}
 80088be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80088c0:	bf00      	nop
 80088c2:	e7fd      	b.n	80088c0 <MemManage_Handler+0x4>

080088c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80088c4:	b480      	push	{r7}
 80088c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80088c8:	bf00      	nop
 80088ca:	e7fd      	b.n	80088c8 <BusFault_Handler+0x4>

080088cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80088cc:	b480      	push	{r7}
 80088ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088d0:	bf00      	nop
 80088d2:	e7fd      	b.n	80088d0 <UsageFault_Handler+0x4>

080088d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80088d4:	b480      	push	{r7}
 80088d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80088d8:	bf00      	nop
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088e2:	b480      	push	{r7}
 80088e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088e6:	bf00      	nop
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80088f0:	b480      	push	{r7}
 80088f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80088f4:	bf00      	nop
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008902:	f000 fbad 	bl	8009060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008906:	bf00      	nop
 8008908:	bd80      	pop	{r7, pc}

0800890a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 800890e:	2001      	movs	r0, #1
 8008910:	f002 fc26 	bl	800b160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008914:	bf00      	nop
 8008916:	bd80      	pop	{r7, pc}

08008918 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 800891c:	2002      	movs	r0, #2
 800891e:	f002 fc1f 	bl	800b160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8008922:	bf00      	nop
 8008924:	bd80      	pop	{r7, pc}

08008926 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 800892a:	2010      	movs	r0, #16
 800892c:	f002 fc18 	bl	800b160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8008930:	bf00      	nop
 8008932:	bd80      	pop	{r7, pc}

08008934 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008938:	4802      	ldr	r0, [pc, #8]	@ (8008944 <DMA1_Channel1_IRQHandler+0x10>)
 800893a:	f002 f90f 	bl	800ab5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800893e:	bf00      	nop
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20000630 	.word	0x20000630

08008948 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800894c:	4802      	ldr	r0, [pc, #8]	@ (8008958 <ADC1_IRQHandler+0x10>)
 800894e:	f000 ff8f 	bl	8009870 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8008952:	bf00      	nop
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	200005cc 	.word	0x200005cc

0800895c <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008960:	4802      	ldr	r0, [pc, #8]	@ (800896c <USB_HP_IRQHandler+0x10>)
 8008962:	f004 f8ce 	bl	800cb02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8008966:	bf00      	nop
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	20001cf8 	.word	0x20001cf8

08008970 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008974:	4802      	ldr	r0, [pc, #8]	@ (8008980 <USB_LP_IRQHandler+0x10>)
 8008976:	f004 f8c4 	bl	800cb02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800897a:	bf00      	nop
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	20001cf8 	.word	0x20001cf8

08008984 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008988:	4802      	ldr	r0, [pc, #8]	@ (8008994 <TIM2_IRQHandler+0x10>)
 800898a:	f007 fb7f 	bl	801008c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800898e:	bf00      	nop
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	200006e4 	.word	0x200006e4

08008998 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800899c:	4802      	ldr	r0, [pc, #8]	@ (80089a8 <I2C1_EV_IRQHandler+0x10>)
 800899e:	f002 feab 	bl	800b6f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80089a2:	bf00      	nop
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	20000690 	.word	0x20000690

080089ac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80089b0:	4802      	ldr	r0, [pc, #8]	@ (80089bc <I2C1_ER_IRQHandler+0x10>)
 80089b2:	f002 febb 	bl	800b72c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80089b6:	bf00      	nop
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	20000690 	.word	0x20000690

080089c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80089c0:	b480      	push	{r7}
 80089c2:	af00      	add	r7, sp, #0
  return 1;
 80089c4:	2301      	movs	r3, #1
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <_kill>:

int _kill(int pid, int sig)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80089da:	f00e fb27 	bl	801702c <__errno>
 80089de:	4603      	mov	r3, r0
 80089e0:	2216      	movs	r2, #22
 80089e2:	601a      	str	r2, [r3, #0]
  return -1;
 80089e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <_exit>:

void _exit (int status)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80089f8:	f04f 31ff 	mov.w	r1, #4294967295
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7ff ffe7 	bl	80089d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008a02:	bf00      	nop
 8008a04:	e7fd      	b.n	8008a02 <_exit+0x12>

08008a06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b086      	sub	sp, #24
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	60f8      	str	r0, [r7, #12]
 8008a0e:	60b9      	str	r1, [r7, #8]
 8008a10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a12:	2300      	movs	r3, #0
 8008a14:	617b      	str	r3, [r7, #20]
 8008a16:	e00a      	b.n	8008a2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008a18:	f3af 8000 	nop.w
 8008a1c:	4601      	mov	r1, r0
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	1c5a      	adds	r2, r3, #1
 8008a22:	60ba      	str	r2, [r7, #8]
 8008a24:	b2ca      	uxtb	r2, r1
 8008a26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	617b      	str	r3, [r7, #20]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	dbf0      	blt.n	8008a18 <_read+0x12>
  }

  return len;
 8008a36:	687b      	ldr	r3, [r7, #4]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	617b      	str	r3, [r7, #20]
 8008a50:	e009      	b.n	8008a66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	60ba      	str	r2, [r7, #8]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 fa5a 	bl	8008f14 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	3301      	adds	r3, #1
 8008a64:	617b      	str	r3, [r7, #20]
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	dbf1      	blt.n	8008a52 <_write+0x12>
  }
  return len;
 8008a6e:	687b      	ldr	r3, [r7, #4]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3718      	adds	r7, #24
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <_close>:

int _close(int file)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008aa0:	605a      	str	r2, [r3, #4]
  return 0;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <_isatty>:

int _isatty(int file)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008ab8:	2301      	movs	r3, #1
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b085      	sub	sp, #20
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	60f8      	str	r0, [r7, #12]
 8008ace:	60b9      	str	r1, [r7, #8]
 8008ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008ae8:	4a14      	ldr	r2, [pc, #80]	@ (8008b3c <_sbrk+0x5c>)
 8008aea:	4b15      	ldr	r3, [pc, #84]	@ (8008b40 <_sbrk+0x60>)
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008af4:	4b13      	ldr	r3, [pc, #76]	@ (8008b44 <_sbrk+0x64>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d102      	bne.n	8008b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008afc:	4b11      	ldr	r3, [pc, #68]	@ (8008b44 <_sbrk+0x64>)
 8008afe:	4a12      	ldr	r2, [pc, #72]	@ (8008b48 <_sbrk+0x68>)
 8008b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008b02:	4b10      	ldr	r3, [pc, #64]	@ (8008b44 <_sbrk+0x64>)
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4413      	add	r3, r2
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d207      	bcs.n	8008b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008b10:	f00e fa8c 	bl	801702c <__errno>
 8008b14:	4603      	mov	r3, r0
 8008b16:	220c      	movs	r2, #12
 8008b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1e:	e009      	b.n	8008b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008b20:	4b08      	ldr	r3, [pc, #32]	@ (8008b44 <_sbrk+0x64>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008b26:	4b07      	ldr	r3, [pc, #28]	@ (8008b44 <_sbrk+0x64>)
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	4a05      	ldr	r2, [pc, #20]	@ (8008b44 <_sbrk+0x64>)
 8008b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008b32:	68fb      	ldr	r3, [r7, #12]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	20030000 	.word	0x20030000
 8008b40:	00000400 	.word	0x00000400
 8008b44:	20000778 	.word	0x20000778
 8008b48:	20002340 	.word	0x20002340

08008b4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8008b50:	4b24      	ldr	r3, [pc, #144]	@ (8008be4 <SystemInit+0x98>)
 8008b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b56:	4a23      	ldr	r2, [pc, #140]	@ (8008be4 <SystemInit+0x98>)
 8008b58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b6a:	f043 0301 	orr.w	r3, r3, #1
 8008b6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8008b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b74:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8008b78:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8008b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008b84:	4b18      	ldr	r3, [pc, #96]	@ (8008be8 <SystemInit+0x9c>)
 8008b86:	4013      	ands	r3, r2
 8008b88:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8008b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b96:	f023 0305 	bic.w	r3, r3, #5
 8008b9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8008b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ba6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008baa:	f023 0301 	bic.w	r3, r3, #1
 8008bae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8008bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8008bec <SystemInit+0xa0>)
 8008bb8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8008bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bbe:	4a0b      	ldr	r2, [pc, #44]	@ (8008bec <SystemInit+0xa0>)
 8008bc0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008bcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008bd0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	619a      	str	r2, [r3, #24]
}
 8008bda:	bf00      	nop
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	e000ed00 	.word	0xe000ed00
 8008be8:	faf6fefb 	.word	0xfaf6fefb
 8008bec:	22041000 	.word	0x22041000

08008bf0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8008bf0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008bf2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008bf4:	3304      	adds	r3, #4

08008bf6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008bf6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008bf8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8008bfa:	d3f9      	bcc.n	8008bf0 <CopyDataInit>
  bx lr
 8008bfc:	4770      	bx	lr

08008bfe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8008bfe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8008c00:	3004      	adds	r0, #4

08008c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8008c02:	4288      	cmp	r0, r1
  bcc FillZerobss
 8008c04:	d3fb      	bcc.n	8008bfe <FillZerobss>
  bx lr
 8008c06:	4770      	bx	lr

08008c08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008c08:	480c      	ldr	r0, [pc, #48]	@ (8008c3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008c0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008c0c:	f7ff ff9e 	bl	8008b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8008c10:	480b      	ldr	r0, [pc, #44]	@ (8008c40 <LoopForever+0x6>)
 8008c12:	490c      	ldr	r1, [pc, #48]	@ (8008c44 <LoopForever+0xa>)
 8008c14:	4a0c      	ldr	r2, [pc, #48]	@ (8008c48 <LoopForever+0xe>)
 8008c16:	2300      	movs	r3, #0
 8008c18:	f7ff ffed 	bl	8008bf6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8008c1c:	480b      	ldr	r0, [pc, #44]	@ (8008c4c <LoopForever+0x12>)
 8008c1e:	490c      	ldr	r1, [pc, #48]	@ (8008c50 <LoopForever+0x16>)
 8008c20:	4a0c      	ldr	r2, [pc, #48]	@ (8008c54 <LoopForever+0x1a>)
 8008c22:	2300      	movs	r3, #0
 8008c24:	f7ff ffe7 	bl	8008bf6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8008c28:	480b      	ldr	r0, [pc, #44]	@ (8008c58 <LoopForever+0x1e>)
 8008c2a:	490c      	ldr	r1, [pc, #48]	@ (8008c5c <LoopForever+0x22>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f7ff ffe8 	bl	8008c02 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008c32:	f00e fa01 	bl	8017038 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008c36:	f7ff f8c7 	bl	8007dc8 <main>

08008c3a <LoopForever>:

LoopForever:
  b LoopForever
 8008c3a:	e7fe      	b.n	8008c3a <LoopForever>
  ldr   r0, =_estack
 8008c3c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8008c40:	20000008 	.word	0x20000008
 8008c44:	20000310 	.word	0x20000310
 8008c48:	0801d188 	.word	0x0801d188
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8008c4c:	20030000 	.word	0x20030000
 8008c50:	20030000 	.word	0x20030000
 8008c54:	0801d490 	.word	0x0801d490
  INIT_BSS _sbss, _ebss
 8008c58:	20000310 	.word	0x20000310
 8008c5c:	20002340 	.word	0x20002340

08008c60 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008c60:	e7fe      	b.n	8008c60 <AES1_IRQHandler>

08008c62 <LL_AHB2_GRP1_EnableClock>:
{
 8008c62:	b480      	push	{r7}
 8008c64:	b085      	sub	sp, #20
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008c6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4013      	ands	r3, r2
 8008c84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008c86:	68fb      	ldr	r3, [r7, #12]
}
 8008c88:	bf00      	nop
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8008c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ca0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008ca2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cb0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
}
 8008cba:	bf00      	nop
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
	...

08008cc8 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b088      	sub	sp, #32
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8008cd2:	f107 030c 	add.w	r3, r7, #12
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	605a      	str	r2, [r3, #4]
 8008cdc:	609a      	str	r2, [r3, #8]
 8008cde:	60da      	str	r2, [r3, #12]
 8008ce0:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8008ce2:	2002      	movs	r0, #2
 8008ce4:	f7ff ffbd 	bl	8008c62 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8008ce8:	79fb      	ldrb	r3, [r7, #7]
 8008cea:	4a12      	ldr	r2, [pc, #72]	@ (8008d34 <BSP_LED_Init+0x6c>)
 8008cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cf0:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	4a0d      	ldr	r2, [pc, #52]	@ (8008d38 <BSP_LED_Init+0x70>)
 8008d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d06:	f107 020c 	add.w	r2, r7, #12
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f002 f885 	bl	800ae1c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	4a08      	ldr	r2, [pc, #32]	@ (8008d38 <BSP_LED_Init+0x70>)
 8008d16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008d1a:	79fb      	ldrb	r3, [r7, #7]
 8008d1c:	4a05      	ldr	r2, [pc, #20]	@ (8008d34 <BSP_LED_Init+0x6c>)
 8008d1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d22:	2200      	movs	r2, #0
 8008d24:	4619      	mov	r1, r3
 8008d26:	f002 f9e9 	bl	800b0fc <HAL_GPIO_WritePin>
}
 8008d2a:	bf00      	nop
 8008d2c:	3720      	adds	r7, #32
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	0801cdac 	.word	0x0801cdac
 8008d38:	20000020 	.word	0x20000020

08008d3c <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8008d46:	79fb      	ldrb	r3, [r7, #7]
 8008d48:	4a07      	ldr	r2, [pc, #28]	@ (8008d68 <BSP_LED_Toggle+0x2c>)
 8008d4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008d4e:	79fb      	ldrb	r3, [r7, #7]
 8008d50:	4906      	ldr	r1, [pc, #24]	@ (8008d6c <BSP_LED_Toggle+0x30>)
 8008d52:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008d56:	4619      	mov	r1, r3
 8008d58:	4610      	mov	r0, r2
 8008d5a:	f002 f9e7 	bl	800b12c <HAL_GPIO_TogglePin>
}
 8008d5e:	bf00      	nop
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20000020 	.word	0x20000020
 8008d6c:	0801cdac 	.word	0x0801cdac

08008d70 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b088      	sub	sp, #32
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	460a      	mov	r2, r1
 8008d7a:	71fb      	strb	r3, [r7, #7]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8008d80:	f107 030c 	add.w	r3, r7, #12
 8008d84:	2200      	movs	r2, #0
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	605a      	str	r2, [r3, #4]
 8008d8a:	609a      	str	r2, [r3, #8]
 8008d8c:	60da      	str	r2, [r3, #12]
 8008d8e:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d103      	bne.n	8008d9e <BSP_PB_Init+0x2e>
 8008d96:	2004      	movs	r0, #4
 8008d98:	f7ff ff63 	bl	8008c62 <LL_AHB2_GRP1_EnableClock>
 8008d9c:	e00c      	b.n	8008db8 <BSP_PB_Init+0x48>
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d103      	bne.n	8008dac <BSP_PB_Init+0x3c>
 8008da4:	2008      	movs	r0, #8
 8008da6:	f7ff ff5c 	bl	8008c62 <LL_AHB2_GRP1_EnableClock>
 8008daa:	e005      	b.n	8008db8 <BSP_PB_Init+0x48>
 8008dac:	79fb      	ldrb	r3, [r7, #7]
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d102      	bne.n	8008db8 <BSP_PB_Init+0x48>
 8008db2:	2008      	movs	r0, #8
 8008db4:	f7ff ff55 	bl	8008c62 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8008db8:	79bb      	ldrb	r3, [r7, #6]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d117      	bne.n	8008dee <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8008dbe:	79fb      	ldrb	r3, [r7, #7]
 8008dc0:	4a20      	ldr	r2, [pc, #128]	@ (8008e44 <BSP_PB_Init+0xd4>)
 8008dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dc6:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8008dd4:	79fb      	ldrb	r3, [r7, #7]
 8008dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8008e48 <BSP_PB_Init+0xd8>)
 8008dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ddc:	f107 020c 	add.w	r2, r7, #12
 8008de0:	4611      	mov	r1, r2
 8008de2:	4618      	mov	r0, r3
 8008de4:	f002 f81a 	bl	800ae1c <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8008de8:	2001      	movs	r0, #1
 8008dea:	f000 f965 	bl	80090b8 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8008dee:	79bb      	ldrb	r3, [r7, #6]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d123      	bne.n	8008e3c <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8008df4:	79fb      	ldrb	r3, [r7, #7]
 8008df6:	4a13      	ldr	r2, [pc, #76]	@ (8008e44 <BSP_PB_Init+0xd4>)
 8008df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dfc:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8008e02:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8008e06:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8008e08:	79fb      	ldrb	r3, [r7, #7]
 8008e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8008e48 <BSP_PB_Init+0xd8>)
 8008e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e10:	f107 020c 	add.w	r2, r7, #12
 8008e14:	4611      	mov	r1, r2
 8008e16:	4618      	mov	r0, r3
 8008e18:	f002 f800 	bl	800ae1c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8008e1c:	79fb      	ldrb	r3, [r7, #7]
 8008e1e:	4a0b      	ldr	r2, [pc, #44]	@ (8008e4c <BSP_PB_Init+0xdc>)
 8008e20:	5cd3      	ldrb	r3, [r2, r3]
 8008e22:	b25b      	sxtb	r3, r3
 8008e24:	2200      	movs	r2, #0
 8008e26:	210f      	movs	r1, #15
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f001 fce0 	bl	800a7ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8008e2e:	79fb      	ldrb	r3, [r7, #7]
 8008e30:	4a06      	ldr	r2, [pc, #24]	@ (8008e4c <BSP_PB_Init+0xdc>)
 8008e32:	5cd3      	ldrb	r3, [r2, r3]
 8008e34:	b25b      	sxtb	r3, r3
 8008e36:	4618      	mov	r0, r3
 8008e38:	f001 fcf3 	bl	800a822 <HAL_NVIC_EnableIRQ>
  }
}
 8008e3c:	bf00      	nop
 8008e3e:	3720      	adds	r7, #32
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	0801cdb4 	.word	0x0801cdb4
 8008e48:	2000002c 	.word	0x2000002c
 8008e4c:	0801cdbc 	.word	0x0801cdbc

08008e50 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	4603      	mov	r3, r0
 8008e58:	6039      	str	r1, [r7, #0]
 8008e5a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8008e60:	79fb      	ldrb	r3, [r7, #7]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d903      	bls.n	8008e6e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008e66:	f06f 0301 	mvn.w	r3, #1
 8008e6a:	60fb      	str	r3, [r7, #12]
 8008e6c:	e018      	b.n	8008ea0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8008e6e:	79fb      	ldrb	r3, [r7, #7]
 8008e70:	2294      	movs	r2, #148	@ 0x94
 8008e72:	fb02 f303 	mul.w	r3, r2, r3
 8008e76:	4a0d      	ldr	r2, [pc, #52]	@ (8008eac <BSP_COM_Init+0x5c>)
 8008e78:	4413      	add	r3, r2
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f000 f866 	bl	8008f4c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8008e80:	79fb      	ldrb	r3, [r7, #7]
 8008e82:	2294      	movs	r2, #148	@ 0x94
 8008e84:	fb02 f303 	mul.w	r3, r2, r3
 8008e88:	4a08      	ldr	r2, [pc, #32]	@ (8008eac <BSP_COM_Init+0x5c>)
 8008e8a:	4413      	add	r3, r2
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 f80e 	bl	8008eb0 <MX_LPUART1_Init>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d002      	beq.n	8008ea0 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8008e9a:	f06f 0303 	mvn.w	r3, #3
 8008e9e:	e000      	b.n	8008ea2 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	2000077c 	.word	0x2000077c

08008eb0 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8008eba:	4b15      	ldr	r3, [pc, #84]	@ (8008f10 <MX_LPUART1_Init+0x60>)
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	220c      	movs	r2, #12
 8008ece:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	895b      	ldrh	r3, [r3, #10]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	891b      	ldrh	r3, [r3, #8]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	899b      	ldrh	r3, [r3, #12]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008efc:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f007 fc66 	bl	80107d0 <HAL_UART_Init>
 8008f04:	4603      	mov	r3, r0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20000038 	.word	0x20000038

08008f14 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8008f1c:	4b09      	ldr	r3, [pc, #36]	@ (8008f44 <__io_putchar+0x30>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	461a      	mov	r2, r3
 8008f22:	2394      	movs	r3, #148	@ 0x94
 8008f24:	fb02 f303 	mul.w	r3, r2, r3
 8008f28:	4a07      	ldr	r2, [pc, #28]	@ (8008f48 <__io_putchar+0x34>)
 8008f2a:	1898      	adds	r0, r3, r2
 8008f2c:	1d39      	adds	r1, r7, #4
 8008f2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008f32:	2201      	movs	r2, #1
 8008f34:	f007 fca6 	bl	8010884 <HAL_UART_Transmit>
  return ch;
 8008f38:	687b      	ldr	r3, [r7, #4]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	20000810 	.word	0x20000810
 8008f48:	2000077c 	.word	0x2000077c

08008f4c <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b088      	sub	sp, #32
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8008f54:	2002      	movs	r0, #2
 8008f56:	f7ff fe84 	bl	8008c62 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8008f5a:	2002      	movs	r0, #2
 8008f5c:	f7ff fe81 	bl	8008c62 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8008f60:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008f64:	f7ff fe96 	bl	8008c94 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8008f68:	2340      	movs	r3, #64	@ 0x40
 8008f6a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8008f70:	2302      	movs	r3, #2
 8008f72:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008f74:	2301      	movs	r3, #1
 8008f76:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8008f78:	2307      	movs	r3, #7
 8008f7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8008f7c:	f107 030c 	add.w	r3, r7, #12
 8008f80:	4619      	mov	r1, r3
 8008f82:	4809      	ldr	r0, [pc, #36]	@ (8008fa8 <COM1_MspInit+0x5c>)
 8008f84:	f001 ff4a 	bl	800ae1c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8008f88:	2380      	movs	r3, #128	@ 0x80
 8008f8a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8008f90:	2307      	movs	r3, #7
 8008f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8008f94:	f107 030c 	add.w	r3, r7, #12
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4803      	ldr	r0, [pc, #12]	@ (8008fa8 <COM1_MspInit+0x5c>)
 8008f9c:	f001 ff3e 	bl	800ae1c <HAL_GPIO_Init>
}
 8008fa0:	bf00      	nop
 8008fa2:	3720      	adds	r7, #32
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	48000400 	.word	0x48000400

08008fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8008fe8 <HAL_Init+0x3c>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a0b      	ldr	r2, [pc, #44]	@ (8008fe8 <HAL_Init+0x3c>)
 8008fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008fc2:	2003      	movs	r0, #3
 8008fc4:	f001 fc08 	bl	800a7d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008fc8:	2000      	movs	r0, #0
 8008fca:	f000 f80f 	bl	8008fec <HAL_InitTick>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d002      	beq.n	8008fda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	71fb      	strb	r3, [r7, #7]
 8008fd8:	e001      	b.n	8008fde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008fda:	f7ff fb8c 	bl	80086f6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008fde:	79fb      	ldrb	r3, [r7, #7]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	58004000 	.word	0x58004000

08008fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8008ff8:	4b17      	ldr	r3, [pc, #92]	@ (8009058 <HAL_InitTick+0x6c>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d024      	beq.n	800904a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009000:	f006 fa86 	bl	800f510 <HAL_RCC_GetHCLKFreq>
 8009004:	4602      	mov	r2, r0
 8009006:	4b14      	ldr	r3, [pc, #80]	@ (8009058 <HAL_InitTick+0x6c>)
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	4619      	mov	r1, r3
 800900c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009010:	fbb3 f3f1 	udiv	r3, r3, r1
 8009014:	fbb2 f3f3 	udiv	r3, r2, r3
 8009018:	4618      	mov	r0, r3
 800901a:	f001 fc10 	bl	800a83e <HAL_SYSTICK_Config>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10f      	bne.n	8009044 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b0f      	cmp	r3, #15
 8009028:	d809      	bhi.n	800903e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800902a:	2200      	movs	r2, #0
 800902c:	6879      	ldr	r1, [r7, #4]
 800902e:	f04f 30ff 	mov.w	r0, #4294967295
 8009032:	f001 fbdc 	bl	800a7ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009036:	4a09      	ldr	r2, [pc, #36]	@ (800905c <HAL_InitTick+0x70>)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6013      	str	r3, [r2, #0]
 800903c:	e007      	b.n	800904e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	73fb      	strb	r3, [r7, #15]
 8009042:	e004      	b.n	800904e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	73fb      	strb	r3, [r7, #15]
 8009048:	e001      	b.n	800904e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800904e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	20000040 	.word	0x20000040
 800905c:	2000003c 	.word	0x2000003c

08009060 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009060:	b480      	push	{r7}
 8009062:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009064:	4b06      	ldr	r3, [pc, #24]	@ (8009080 <HAL_IncTick+0x20>)
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	461a      	mov	r2, r3
 800906a:	4b06      	ldr	r3, [pc, #24]	@ (8009084 <HAL_IncTick+0x24>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4413      	add	r3, r2
 8009070:	4a04      	ldr	r2, [pc, #16]	@ (8009084 <HAL_IncTick+0x24>)
 8009072:	6013      	str	r3, [r2, #0]
}
 8009074:	bf00      	nop
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	20000040 	.word	0x20000040
 8009084:	20000814 	.word	0x20000814

08009088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009088:	b480      	push	{r7}
 800908a:	af00      	add	r7, sp, #0
  return uwTick;
 800908c:	4b03      	ldr	r3, [pc, #12]	@ (800909c <HAL_GetTick+0x14>)
 800908e:	681b      	ldr	r3, [r3, #0]
}
 8009090:	4618      	mov	r0, r3
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	20000814 	.word	0x20000814

080090a0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80090a0:	b480      	push	{r7}
 80090a2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80090a4:	4b03      	ldr	r3, [pc, #12]	@ (80090b4 <HAL_GetTickPrio+0x14>)
 80090a6:	681b      	ldr	r3, [r3, #0]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	2000003c 	.word	0x2000003c

080090b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80090c0:	f7ff ffe2 	bl	8009088 <HAL_GetTick>
 80090c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d0:	d005      	beq.n	80090de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80090d2:	4b0a      	ldr	r3, [pc, #40]	@ (80090fc <HAL_Delay+0x44>)
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	461a      	mov	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4413      	add	r3, r2
 80090dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80090de:	bf00      	nop
 80090e0:	f7ff ffd2 	bl	8009088 <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d8f7      	bhi.n	80090e0 <HAL_Delay+0x28>
  {
  }
}
 80090f0:	bf00      	nop
 80090f2:	bf00      	nop
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	20000040 	.word	0x20000040

08009100 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	431a      	orrs	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800911a:	bf00      	nop
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009126:	b480      	push	{r7}
 8009128:	b083      	sub	sp, #12
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	431a      	orrs	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	609a      	str	r2, [r3, #8]
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800915c:	4618      	mov	r0, r3
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009168:	b480      	push	{r7}
 800916a:	b087      	sub	sp, #28
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
 8009174:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	3360      	adds	r3, #96	@ 0x60
 800917a:	461a      	mov	r2, r3
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	4b08      	ldr	r3, [pc, #32]	@ (80091ac <LL_ADC_SetOffset+0x44>)
 800918a:	4013      	ands	r3, r2
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	4313      	orrs	r3, r2
 8009198:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80091a0:	bf00      	nop
 80091a2:	371c      	adds	r7, #28
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr
 80091ac:	03fff000 	.word	0x03fff000

080091b0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	3360      	adds	r3, #96	@ 0x60
 80091be:	461a      	mov	r2, r3
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80091dc:	b480      	push	{r7}
 80091de:	b087      	sub	sp, #28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	3360      	adds	r3, #96	@ 0x60
 80091ec:	461a      	mov	r2, r3
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	431a      	orrs	r2, r3
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009206:	bf00      	nop
 8009208:	371c      	adds	r7, #28
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009212:	b480      	push	{r7}
 8009214:	b083      	sub	sp, #12
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009226:	2301      	movs	r3, #1
 8009228:	e000      	b.n	800922c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800922a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800922c:	4618      	mov	r0, r3
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009238:	b480      	push	{r7}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	3330      	adds	r3, #48	@ 0x30
 8009248:	461a      	mov	r2, r3
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	0a1b      	lsrs	r3, r3, #8
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	f003 030c 	and.w	r3, r3, #12
 8009254:	4413      	add	r3, r2
 8009256:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f003 031f 	and.w	r3, r3, #31
 8009262:	211f      	movs	r1, #31
 8009264:	fa01 f303 	lsl.w	r3, r1, r3
 8009268:	43db      	mvns	r3, r3
 800926a:	401a      	ands	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	0e9b      	lsrs	r3, r3, #26
 8009270:	f003 011f 	and.w	r1, r3, #31
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f003 031f 	and.w	r3, r3, #31
 800927a:	fa01 f303 	lsl.w	r3, r1, r3
 800927e:	431a      	orrs	r2, r3
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8009284:	bf00      	nop
 8009286:	371c      	adds	r7, #28
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092b8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d101      	bne.n	80092c4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80092c0:	2301      	movs	r3, #1
 80092c2:	e000      	b.n	80092c6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b087      	sub	sp, #28
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	60b9      	str	r1, [r7, #8]
 80092dc:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	3314      	adds	r3, #20
 80092e2:	461a      	mov	r2, r3
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	0e5b      	lsrs	r3, r3, #25
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	f003 0304 	and.w	r3, r3, #4
 80092ee:	4413      	add	r3, r2
 80092f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	0d1b      	lsrs	r3, r3, #20
 80092fa:	f003 031f 	and.w	r3, r3, #31
 80092fe:	2107      	movs	r1, #7
 8009300:	fa01 f303 	lsl.w	r3, r1, r3
 8009304:	43db      	mvns	r3, r3
 8009306:	401a      	ands	r2, r3
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	0d1b      	lsrs	r3, r3, #20
 800930c:	f003 031f 	and.w	r3, r3, #31
 8009310:	6879      	ldr	r1, [r7, #4]
 8009312:	fa01 f303 	lsl.w	r3, r1, r3
 8009316:	431a      	orrs	r2, r3
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800931c:	bf00      	nop
 800931e:	371c      	adds	r7, #28
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009340:	43db      	mvns	r3, r3
 8009342:	401a      	ands	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f003 0318 	and.w	r3, r3, #24
 800934a:	4908      	ldr	r1, [pc, #32]	@ (800936c <LL_ADC_SetChannelSingleDiff+0x44>)
 800934c:	40d9      	lsrs	r1, r3
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	400b      	ands	r3, r1
 8009352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009356:	431a      	orrs	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800935e:	bf00      	nop
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	0007ffff 	.word	0x0007ffff

08009370 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8009380:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	6093      	str	r3, [r2, #8]
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093a8:	d101      	bne.n	80093ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80093aa:	2301      	movs	r3, #1
 80093ac:	e000      	b.n	80093b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80093cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80093d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093f8:	d101      	bne.n	80093fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80093fa:	2301      	movs	r3, #1
 80093fc:	e000      	b.n	8009400 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800941c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009420:	f043 0201 	orr.w	r2, r3, #1
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	2b01      	cmp	r3, #1
 8009446:	d101      	bne.n	800944c <LL_ADC_IsEnabled+0x18>
 8009448:	2301      	movs	r3, #1
 800944a:	e000      	b.n	800944e <LL_ADC_IsEnabled+0x1a>
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	370c      	adds	r7, #12
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800945a:	b480      	push	{r7}
 800945c:	b083      	sub	sp, #12
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800946a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800946e:	f043 0204 	orr.w	r2, r3, #4
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009476:	bf00      	nop
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009482:	b480      	push	{r7}
 8009484:	b083      	sub	sp, #12
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	f003 0304 	and.w	r3, r3, #4
 8009492:	2b04      	cmp	r3, #4
 8009494:	d101      	bne.n	800949a <LL_ADC_REG_IsConversionOngoing+0x18>
 8009496:	2301      	movs	r3, #1
 8009498:	e000      	b.n	800949c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f003 0308 	and.w	r3, r3, #8
 80094b8:	2b08      	cmp	r3, #8
 80094ba:	d101      	bne.n	80094c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80094bc:	2301      	movs	r3, #1
 80094be:	e000      	b.n	80094c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
	...

080094d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b088      	sub	sp, #32
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80094dc:	2300      	movs	r3, #0
 80094de:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80094e0:	2300      	movs	r3, #0
 80094e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e12e      	b.n	800974c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d109      	bne.n	8009510 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7ff f901 	bl	8008704 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4618      	mov	r0, r3
 8009516:	f7ff ff3d 	bl	8009394 <LL_ADC_IsDeepPowerDownEnabled>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d004      	beq.n	800952a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4618      	mov	r0, r3
 8009526:	f7ff ff23 	bl	8009370 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4618      	mov	r0, r3
 8009530:	f7ff ff58 	bl	80093e4 <LL_ADC_IsInternalRegulatorEnabled>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d115      	bne.n	8009566 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4618      	mov	r0, r3
 8009540:	f7ff ff3c 	bl	80093bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009544:	4b83      	ldr	r3, [pc, #524]	@ (8009754 <HAL_ADC_Init+0x284>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	099b      	lsrs	r3, r3, #6
 800954a:	4a83      	ldr	r2, [pc, #524]	@ (8009758 <HAL_ADC_Init+0x288>)
 800954c:	fba2 2303 	umull	r2, r3, r2, r3
 8009550:	099b      	lsrs	r3, r3, #6
 8009552:	3301      	adds	r3, #1
 8009554:	005b      	lsls	r3, r3, #1
 8009556:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009558:	e002      	b.n	8009560 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	3b01      	subs	r3, #1
 800955e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1f9      	bne.n	800955a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4618      	mov	r0, r3
 800956c:	f7ff ff3a 	bl	80093e4 <LL_ADC_IsInternalRegulatorEnabled>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10d      	bne.n	8009592 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800957a:	f043 0210 	orr.w	r2, r3, #16
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009586:	f043 0201 	orr.w	r2, r3, #1
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4618      	mov	r0, r3
 8009598:	f7ff ff73 	bl	8009482 <LL_ADC_REG_IsConversionOngoing>
 800959c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095a2:	f003 0310 	and.w	r3, r3, #16
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f040 80c7 	bne.w	800973a <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f040 80c3 	bne.w	800973a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80095bc:	f043 0202 	orr.w	r2, r3, #2
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7ff ff33 	bl	8009434 <LL_ADC_IsEnabled>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10b      	bne.n	80095ec <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80095d4:	4861      	ldr	r0, [pc, #388]	@ (800975c <HAL_ADC_Init+0x28c>)
 80095d6:	f7ff ff2d 	bl	8009434 <LL_ADC_IsEnabled>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d105      	bne.n	80095ec <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	4619      	mov	r1, r3
 80095e6:	485e      	ldr	r0, [pc, #376]	@ (8009760 <HAL_ADC_Init+0x290>)
 80095e8:	f7ff fd8a 	bl	8009100 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	7e5b      	ldrb	r3, [r3, #25]
 80095f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80095f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80095fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8009602:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 3020 	ldrb.w	r3, [r3, #32]
 800960a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800960c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800960e:	69ba      	ldr	r2, [r7, #24]
 8009610:	4313      	orrs	r3, r2
 8009612:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 3020 	ldrb.w	r3, [r3, #32]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d106      	bne.n	800962c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009622:	3b01      	subs	r3, #1
 8009624:	045b      	lsls	r3, r3, #17
 8009626:	69ba      	ldr	r2, [r7, #24]
 8009628:	4313      	orrs	r3, r2
 800962a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009630:	2b00      	cmp	r3, #0
 8009632:	d009      	beq.n	8009648 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009638:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009640:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009642:	69ba      	ldr	r2, [r7, #24]
 8009644:	4313      	orrs	r3, r2
 8009646:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68da      	ldr	r2, [r3, #12]
 800964e:	4b45      	ldr	r3, [pc, #276]	@ (8009764 <HAL_ADC_Init+0x294>)
 8009650:	4013      	ands	r3, r2
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	6812      	ldr	r2, [r2, #0]
 8009656:	69b9      	ldr	r1, [r7, #24]
 8009658:	430b      	orrs	r3, r1
 800965a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff ff0e 	bl	8009482 <LL_ADC_REG_IsConversionOngoing>
 8009666:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4618      	mov	r0, r3
 800966e:	f7ff ff1b 	bl	80094a8 <LL_ADC_INJ_IsConversionOngoing>
 8009672:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d13d      	bne.n	80096f6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d13a      	bne.n	80096f6 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8009684:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800968c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800968e:	4313      	orrs	r3, r2
 8009690:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800969c:	f023 0302 	bic.w	r3, r3, #2
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	6812      	ldr	r2, [r2, #0]
 80096a4:	69b9      	ldr	r1, [r7, #24]
 80096a6:	430b      	orrs	r3, r1
 80096a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d118      	bne.n	80096e6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80096be:	f023 0304 	bic.w	r3, r3, #4
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80096ca:	4311      	orrs	r1, r2
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80096d0:	4311      	orrs	r1, r2
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80096d6:	430a      	orrs	r2, r1
 80096d8:	431a      	orrs	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f042 0201 	orr.w	r2, r2, #1
 80096e2:	611a      	str	r2, [r3, #16]
 80096e4:	e007      	b.n	80096f6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	691a      	ldr	r2, [r3, #16]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f022 0201 	bic.w	r2, r2, #1
 80096f4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d10c      	bne.n	8009718 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009704:	f023 010f 	bic.w	r1, r3, #15
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	1e5a      	subs	r2, r3, #1
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	631a      	str	r2, [r3, #48]	@ 0x30
 8009716:	e007      	b.n	8009728 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f022 020f 	bic.w	r2, r2, #15
 8009726:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800972c:	f023 0303 	bic.w	r3, r3, #3
 8009730:	f043 0201 	orr.w	r2, r3, #1
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	655a      	str	r2, [r3, #84]	@ 0x54
 8009738:	e007      	b.n	800974a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800973e:	f043 0210 	orr.w	r2, r3, #16
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800974a:	7ffb      	ldrb	r3, [r7, #31]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3720      	adds	r7, #32
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	2000001c 	.word	0x2000001c
 8009758:	053e2d63 	.word	0x053e2d63
 800975c:	50040000 	.word	0x50040000
 8009760:	50040300 	.word	0x50040300
 8009764:	fff0c007 	.word	0xfff0c007

08009768 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4618      	mov	r0, r3
 800977a:	f7ff fe82 	bl	8009482 <LL_ADC_REG_IsConversionOngoing>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d167      	bne.n	8009854 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800978a:	2b01      	cmp	r3, #1
 800978c:	d101      	bne.n	8009792 <HAL_ADC_Start_DMA+0x2a>
 800978e:	2302      	movs	r3, #2
 8009790:	e063      	b.n	800985a <HAL_ADC_Start_DMA+0xf2>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 fe0c 	bl	800a3b8 <ADC_Enable>
 80097a0:	4603      	mov	r3, r0
 80097a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d14f      	bne.n	800984a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80097b2:	f023 0301 	bic.w	r3, r3, #1
 80097b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d006      	beq.n	80097d8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ce:	f023 0206 	bic.w	r2, r3, #6
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80097d6:	e002      	b.n	80097de <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097e2:	4a20      	ldr	r2, [pc, #128]	@ (8009864 <HAL_ADC_Start_DMA+0xfc>)
 80097e4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097ea:	4a1f      	ldr	r2, [pc, #124]	@ (8009868 <HAL_ADC_Start_DMA+0x100>)
 80097ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097f2:	4a1e      	ldr	r2, [pc, #120]	@ (800986c <HAL_ADC_Start_DMA+0x104>)
 80097f4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	221c      	movs	r2, #28
 80097fc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f042 0210 	orr.w	r2, r2, #16
 8009814:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68da      	ldr	r2, [r3, #12]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f042 0201 	orr.w	r2, r2, #1
 8009824:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3340      	adds	r3, #64	@ 0x40
 8009830:	4619      	mov	r1, r3
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f001 f8b7 	bl	800a9a8 <HAL_DMA_Start_IT>
 800983a:	4603      	mov	r3, r0
 800983c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4618      	mov	r0, r3
 8009844:	f7ff fe09 	bl	800945a <LL_ADC_REG_StartConversion>
 8009848:	e006      	b.n	8009858 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8009852:	e001      	b.n	8009858 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009854:	2302      	movs	r3, #2
 8009856:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009858:	7dfb      	ldrb	r3, [r7, #23]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3718      	adds	r7, #24
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	0800a4ad 	.word	0x0800a4ad
 8009868:	0800a585 	.word	0x0800a585
 800986c:	0800a5a1 	.word	0x0800a5a1

08009870 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b088      	sub	sp, #32
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009878:	2300      	movs	r3, #0
 800987a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	d017      	beq.n	80098c6 <HAL_ADC_IRQHandler+0x56>
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f003 0302 	and.w	r3, r3, #2
 800989c:	2b00      	cmp	r3, #0
 800989e:	d012      	beq.n	80098c6 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098a4:	f003 0310 	and.w	r3, r3, #16
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d105      	bne.n	80098b8 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098b0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 feb3 	bl	800a624 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2202      	movs	r2, #2
 80098c4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d004      	beq.n	80098da <HAL_ADC_IRQHandler+0x6a>
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f003 0304 	and.w	r3, r3, #4
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d109      	bne.n	80098ee <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d05d      	beq.n	80099a0 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	f003 0308 	and.w	r3, r3, #8
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d058      	beq.n	80099a0 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098f2:	f003 0310 	and.w	r3, r3, #16
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d105      	bne.n	8009906 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4618      	mov	r0, r3
 800990c:	f7ff fc81 	bl	8009212 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d03d      	beq.n	8009992 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009920:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009924:	d035      	beq.n	8009992 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 0308 	and.w	r3, r3, #8
 8009930:	2b08      	cmp	r3, #8
 8009932:	d12e      	bne.n	8009992 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff fda2 	bl	8009482 <LL_ADC_REG_IsConversionOngoing>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d11a      	bne.n	800997a <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	685a      	ldr	r2, [r3, #4]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f022 020c 	bic.w	r2, r2, #12
 8009952:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009958:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009964:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009968:	2b00      	cmp	r3, #0
 800996a:	d112      	bne.n	8009992 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009970:	f043 0201 	orr.w	r2, r3, #1
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	655a      	str	r2, [r3, #84]	@ 0x54
 8009978:	e00b      	b.n	8009992 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800997e:	f043 0210 	orr.w	r2, r3, #16
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800998a:	f043 0201 	orr.w	r2, r3, #1
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f922 	bl	8009bdc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	220c      	movs	r2, #12
 800999e:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	f003 0320 	and.w	r3, r3, #32
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d004      	beq.n	80099b4 <HAL_ADC_IRQHandler+0x144>
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f003 0320 	and.w	r3, r3, #32
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d109      	bne.n	80099c8 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d074      	beq.n	8009aa8 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d06f      	beq.n	8009aa8 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099cc:	f003 0310 	and.w	r3, r3, #16
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d105      	bne.n	80099e0 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099d8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7ff fc61 	bl	80092ac <LL_ADC_INJ_IsTriggerSourceSWStart>
 80099ea:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7ff fc0e 	bl	8009212 <LL_ADC_REG_IsTriggerSourceSWStart>
 80099f6:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d049      	beq.n	8009a9a <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d007      	beq.n	8009a20 <HAL_ADC_IRQHandler+0x1b0>
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d041      	beq.n	8009a9a <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d13c      	bne.n	8009a9a <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a2a:	2b40      	cmp	r3, #64	@ 0x40
 8009a2c:	d135      	bne.n	8009a9a <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d12e      	bne.n	8009a9a <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7ff fd31 	bl	80094a8 <LL_ADC_INJ_IsConversionOngoing>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d11a      	bne.n	8009a82 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009a5a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d112      	bne.n	8009a9a <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a78:	f043 0201 	orr.w	r2, r3, #1
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	655a      	str	r2, [r3, #84]	@ 0x54
 8009a80:	e00b      	b.n	8009a9a <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a86:	f043 0210 	orr.w	r2, r3, #16
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a92:	f043 0201 	orr.w	r2, r3, #1
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fd9a 	bl	800a5d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2260      	movs	r2, #96	@ 0x60
 8009aa6:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d011      	beq.n	8009ad6 <HAL_ADC_IRQHandler+0x266>
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00c      	beq.n	8009ad6 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ac0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f89b 	bl	8009c04 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2280      	movs	r2, #128	@ 0x80
 8009ad4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d012      	beq.n	8009b06 <HAL_ADC_IRQHandler+0x296>
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00d      	beq.n	8009b06 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 fd80 	bl	800a5fc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d012      	beq.n	8009b36 <HAL_ADC_IRQHandler+0x2c6>
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00d      	beq.n	8009b36 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b1e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fd72 	bl	800a610 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	f003 0310 	and.w	r3, r3, #16
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d02b      	beq.n	8009b98 <HAL_ADC_IRQHandler+0x328>
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	f003 0310 	and.w	r3, r3, #16
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d026      	beq.n	8009b98 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d102      	bne.n	8009b58 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8009b52:	2301      	movs	r3, #1
 8009b54:	61fb      	str	r3, [r7, #28]
 8009b56:	e009      	b.n	8009b6c <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7ff fb97 	bl	8009290 <LL_ADC_REG_GetDMATransfer>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d10e      	bne.n	8009b90 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b76:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b82:	f043 0202 	orr.w	r2, r3, #2
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f844 	bl	8009c18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2210      	movs	r2, #16
 8009b96:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d018      	beq.n	8009bd4 <HAL_ADC_IRQHandler+0x364>
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d013      	beq.n	8009bd4 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bb0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bbc:	f043 0208 	orr.w	r2, r3, #8
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009bcc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fd0a 	bl	800a5e8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8009bd4:	bf00      	nop
 8009bd6:	3720      	adds	r7, #32
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b0b6      	sub	sp, #216	@ 0xd8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d101      	bne.n	8009c4e <HAL_ADC_ConfigChannel+0x22>
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	e39f      	b.n	800a38e <HAL_ADC_ConfigChannel+0x762>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7ff fc11 	bl	8009482 <LL_ADC_REG_IsConversionOngoing>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f040 8384 	bne.w	800a370 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6818      	ldr	r0, [r3, #0]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	6859      	ldr	r1, [r3, #4]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	461a      	mov	r2, r3
 8009c76:	f7ff fadf 	bl	8009238 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff fbff 	bl	8009482 <LL_ADC_REG_IsConversionOngoing>
 8009c84:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7ff fc0b 	bl	80094a8 <LL_ADC_INJ_IsConversionOngoing>
 8009c92:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009c96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f040 81a6 	bne.w	8009fec <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009ca0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f040 81a1 	bne.w	8009fec <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6818      	ldr	r0, [r3, #0]
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	6819      	ldr	r1, [r3, #0]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	f7ff fb0b 	bl	80092d2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	695a      	ldr	r2, [r3, #20]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	08db      	lsrs	r3, r3, #3
 8009cc8:	f003 0303 	and.w	r3, r3, #3
 8009ccc:	005b      	lsls	r3, r3, #1
 8009cce:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	2b04      	cmp	r3, #4
 8009cdc:	d00a      	beq.n	8009cf4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	6919      	ldr	r1, [r3, #16]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009cee:	f7ff fa3b 	bl	8009168 <LL_ADC_SetOffset>
 8009cf2:	e17b      	b.n	8009fec <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7ff fa58 	bl	80091b0 <LL_ADC_GetOffsetChannel>
 8009d00:	4603      	mov	r3, r0
 8009d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10a      	bne.n	8009d20 <HAL_ADC_ConfigChannel+0xf4>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2100      	movs	r1, #0
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7ff fa4d 	bl	80091b0 <LL_ADC_GetOffsetChannel>
 8009d16:	4603      	mov	r3, r0
 8009d18:	0e9b      	lsrs	r3, r3, #26
 8009d1a:	f003 021f 	and.w	r2, r3, #31
 8009d1e:	e01e      	b.n	8009d5e <HAL_ADC_ConfigChannel+0x132>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2100      	movs	r1, #0
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7ff fa42 	bl	80091b0 <LL_ADC_GetOffsetChannel>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009d36:	fa93 f3a3 	rbit	r3, r3
 8009d3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009d3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009d42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009d46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8009d4e:	2320      	movs	r3, #32
 8009d50:	e004      	b.n	8009d5c <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8009d52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009d56:	fab3 f383 	clz	r3, r3
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d105      	bne.n	8009d76 <HAL_ADC_ConfigChannel+0x14a>
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	0e9b      	lsrs	r3, r3, #26
 8009d70:	f003 031f 	and.w	r3, r3, #31
 8009d74:	e018      	b.n	8009da8 <HAL_ADC_ConfigChannel+0x17c>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009d82:	fa93 f3a3 	rbit	r3, r3
 8009d86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8009d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8009d92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d101      	bne.n	8009d9e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8009d9a:	2320      	movs	r3, #32
 8009d9c:	e004      	b.n	8009da8 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8009d9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009da2:	fab3 f383 	clz	r3, r3
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d106      	bne.n	8009dba <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2200      	movs	r2, #0
 8009db2:	2100      	movs	r1, #0
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7ff fa11 	bl	80091dc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7ff f9f5 	bl	80091b0 <LL_ADC_GetOffsetChannel>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10a      	bne.n	8009de6 <HAL_ADC_ConfigChannel+0x1ba>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2101      	movs	r1, #1
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7ff f9ea 	bl	80091b0 <LL_ADC_GetOffsetChannel>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	0e9b      	lsrs	r3, r3, #26
 8009de0:	f003 021f 	and.w	r2, r3, #31
 8009de4:	e01e      	b.n	8009e24 <HAL_ADC_ConfigChannel+0x1f8>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2101      	movs	r1, #1
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7ff f9df 	bl	80091b0 <LL_ADC_GetOffsetChannel>
 8009df2:	4603      	mov	r3, r0
 8009df4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009df8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009dfc:	fa93 f3a3 	rbit	r3, r3
 8009e00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8009e04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8009e0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8009e14:	2320      	movs	r3, #32
 8009e16:	e004      	b.n	8009e22 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8009e18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e1c:	fab3 f383 	clz	r3, r3
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	461a      	mov	r2, r3
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d105      	bne.n	8009e3c <HAL_ADC_ConfigChannel+0x210>
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	0e9b      	lsrs	r3, r3, #26
 8009e36:	f003 031f 	and.w	r3, r3, #31
 8009e3a:	e018      	b.n	8009e6e <HAL_ADC_ConfigChannel+0x242>
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e48:	fa93 f3a3 	rbit	r3, r3
 8009e4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8009e50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8009e58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d101      	bne.n	8009e64 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8009e60:	2320      	movs	r3, #32
 8009e62:	e004      	b.n	8009e6e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8009e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e68:	fab3 f383 	clz	r3, r3
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d106      	bne.n	8009e80 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2200      	movs	r2, #0
 8009e78:	2101      	movs	r1, #1
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7ff f9ae 	bl	80091dc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2102      	movs	r1, #2
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7ff f992 	bl	80091b0 <LL_ADC_GetOffsetChannel>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10a      	bne.n	8009eac <HAL_ADC_ConfigChannel+0x280>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2102      	movs	r1, #2
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7ff f987 	bl	80091b0 <LL_ADC_GetOffsetChannel>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	0e9b      	lsrs	r3, r3, #26
 8009ea6:	f003 021f 	and.w	r2, r3, #31
 8009eaa:	e01e      	b.n	8009eea <HAL_ADC_ConfigChannel+0x2be>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2102      	movs	r1, #2
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7ff f97c 	bl	80091b0 <LL_ADC_GetOffsetChannel>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ec2:	fa93 f3a3 	rbit	r3, r3
 8009ec6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8009eca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ece:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8009ed2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8009eda:	2320      	movs	r3, #32
 8009edc:	e004      	b.n	8009ee8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8009ede:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ee2:	fab3 f383 	clz	r3, r3
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	461a      	mov	r2, r3
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d105      	bne.n	8009f02 <HAL_ADC_ConfigChannel+0x2d6>
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	0e9b      	lsrs	r3, r3, #26
 8009efc:	f003 031f 	and.w	r3, r3, #31
 8009f00:	e016      	b.n	8009f30 <HAL_ADC_ConfigChannel+0x304>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009f0e:	fa93 f3a3 	rbit	r3, r3
 8009f12:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8009f14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8009f1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8009f22:	2320      	movs	r3, #32
 8009f24:	e004      	b.n	8009f30 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8009f26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f2a:	fab3 f383 	clz	r3, r3
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d106      	bne.n	8009f42 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	2102      	movs	r1, #2
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7ff f94d 	bl	80091dc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2103      	movs	r1, #3
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7ff f931 	bl	80091b0 <LL_ADC_GetOffsetChannel>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10a      	bne.n	8009f6e <HAL_ADC_ConfigChannel+0x342>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2103      	movs	r1, #3
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7ff f926 	bl	80091b0 <LL_ADC_GetOffsetChannel>
 8009f64:	4603      	mov	r3, r0
 8009f66:	0e9b      	lsrs	r3, r3, #26
 8009f68:	f003 021f 	and.w	r2, r3, #31
 8009f6c:	e017      	b.n	8009f9e <HAL_ADC_ConfigChannel+0x372>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2103      	movs	r1, #3
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7ff f91b 	bl	80091b0 <LL_ADC_GetOffsetChannel>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f80:	fa93 f3a3 	rbit	r3, r3
 8009f84:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8009f86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f88:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8009f8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d101      	bne.n	8009f94 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8009f90:	2320      	movs	r3, #32
 8009f92:	e003      	b.n	8009f9c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8009f94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f96:	fab3 f383 	clz	r3, r3
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d105      	bne.n	8009fb6 <HAL_ADC_ConfigChannel+0x38a>
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	0e9b      	lsrs	r3, r3, #26
 8009fb0:	f003 031f 	and.w	r3, r3, #31
 8009fb4:	e011      	b.n	8009fda <HAL_ADC_ConfigChannel+0x3ae>
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fbe:	fa93 f3a3 	rbit	r3, r3
 8009fc2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8009fc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8009fc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8009fce:	2320      	movs	r3, #32
 8009fd0:	e003      	b.n	8009fda <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8009fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fd4:	fab3 f383 	clz	r3, r3
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d106      	bne.n	8009fec <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	2103      	movs	r1, #3
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff f8f8 	bl	80091dc <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7ff fa1f 	bl	8009434 <LL_ADC_IsEnabled>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f040 81c2 	bne.w	800a382 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6818      	ldr	r0, [r3, #0]
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	6819      	ldr	r1, [r3, #0]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	461a      	mov	r2, r3
 800a00c:	f7ff f98c 	bl	8009328 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	4a8e      	ldr	r2, [pc, #568]	@ (800a250 <HAL_ADC_ConfigChannel+0x624>)
 800a016:	4293      	cmp	r3, r2
 800a018:	f040 8130 	bne.w	800a27c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10b      	bne.n	800a044 <HAL_ADC_ConfigChannel+0x418>
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	0e9b      	lsrs	r3, r3, #26
 800a032:	3301      	adds	r3, #1
 800a034:	f003 031f 	and.w	r3, r3, #31
 800a038:	2b09      	cmp	r3, #9
 800a03a:	bf94      	ite	ls
 800a03c:	2301      	movls	r3, #1
 800a03e:	2300      	movhi	r3, #0
 800a040:	b2db      	uxtb	r3, r3
 800a042:	e019      	b.n	800a078 <HAL_ADC_ConfigChannel+0x44c>
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a04a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a04c:	fa93 f3a3 	rbit	r3, r3
 800a050:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800a052:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a054:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800a056:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d101      	bne.n	800a060 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800a05c:	2320      	movs	r3, #32
 800a05e:	e003      	b.n	800a068 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800a060:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a062:	fab3 f383 	clz	r3, r3
 800a066:	b2db      	uxtb	r3, r3
 800a068:	3301      	adds	r3, #1
 800a06a:	f003 031f 	and.w	r3, r3, #31
 800a06e:	2b09      	cmp	r3, #9
 800a070:	bf94      	ite	ls
 800a072:	2301      	movls	r3, #1
 800a074:	2300      	movhi	r3, #0
 800a076:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d079      	beq.n	800a170 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a084:	2b00      	cmp	r3, #0
 800a086:	d107      	bne.n	800a098 <HAL_ADC_ConfigChannel+0x46c>
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	0e9b      	lsrs	r3, r3, #26
 800a08e:	3301      	adds	r3, #1
 800a090:	069b      	lsls	r3, r3, #26
 800a092:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a096:	e015      	b.n	800a0c4 <HAL_ADC_ConfigChannel+0x498>
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a09e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0a0:	fa93 f3a3 	rbit	r3, r3
 800a0a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800a0a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800a0aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800a0b0:	2320      	movs	r3, #32
 800a0b2:	e003      	b.n	800a0bc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800a0b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0b6:	fab3 f383 	clz	r3, r3
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	3301      	adds	r3, #1
 800a0be:	069b      	lsls	r3, r3, #26
 800a0c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d109      	bne.n	800a0e4 <HAL_ADC_ConfigChannel+0x4b8>
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	0e9b      	lsrs	r3, r3, #26
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	f003 031f 	and.w	r3, r3, #31
 800a0dc:	2101      	movs	r1, #1
 800a0de:	fa01 f303 	lsl.w	r3, r1, r3
 800a0e2:	e017      	b.n	800a114 <HAL_ADC_ConfigChannel+0x4e8>
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0ec:	fa93 f3a3 	rbit	r3, r3
 800a0f0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800a0f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800a0f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800a0fc:	2320      	movs	r3, #32
 800a0fe:	e003      	b.n	800a108 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800a100:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a102:	fab3 f383 	clz	r3, r3
 800a106:	b2db      	uxtb	r3, r3
 800a108:	3301      	adds	r3, #1
 800a10a:	f003 031f 	and.w	r3, r3, #31
 800a10e:	2101      	movs	r1, #1
 800a110:	fa01 f303 	lsl.w	r3, r1, r3
 800a114:	ea42 0103 	orr.w	r1, r2, r3
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10a      	bne.n	800a13a <HAL_ADC_ConfigChannel+0x50e>
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	0e9b      	lsrs	r3, r3, #26
 800a12a:	3301      	adds	r3, #1
 800a12c:	f003 021f 	and.w	r2, r3, #31
 800a130:	4613      	mov	r3, r2
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	4413      	add	r3, r2
 800a136:	051b      	lsls	r3, r3, #20
 800a138:	e018      	b.n	800a16c <HAL_ADC_ConfigChannel+0x540>
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a142:	fa93 f3a3 	rbit	r3, r3
 800a146:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800a148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800a14c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800a152:	2320      	movs	r3, #32
 800a154:	e003      	b.n	800a15e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800a156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a158:	fab3 f383 	clz	r3, r3
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	3301      	adds	r3, #1
 800a160:	f003 021f 	and.w	r2, r3, #31
 800a164:	4613      	mov	r3, r2
 800a166:	005b      	lsls	r3, r3, #1
 800a168:	4413      	add	r3, r2
 800a16a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a16c:	430b      	orrs	r3, r1
 800a16e:	e080      	b.n	800a272 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d107      	bne.n	800a18c <HAL_ADC_ConfigChannel+0x560>
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	0e9b      	lsrs	r3, r3, #26
 800a182:	3301      	adds	r3, #1
 800a184:	069b      	lsls	r3, r3, #26
 800a186:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a18a:	e015      	b.n	800a1b8 <HAL_ADC_ConfigChannel+0x58c>
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a194:	fa93 f3a3 	rbit	r3, r3
 800a198:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800a19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800a19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800a1a4:	2320      	movs	r3, #32
 800a1a6:	e003      	b.n	800a1b0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1aa:	fab3 f383 	clz	r3, r3
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	069b      	lsls	r3, r3, #26
 800a1b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d109      	bne.n	800a1d8 <HAL_ADC_ConfigChannel+0x5ac>
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	0e9b      	lsrs	r3, r3, #26
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	f003 031f 	and.w	r3, r3, #31
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1d6:	e017      	b.n	800a208 <HAL_ADC_ConfigChannel+0x5dc>
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1de:	6a3b      	ldr	r3, [r7, #32]
 800a1e0:	fa93 f3a3 	rbit	r3, r3
 800a1e4:	61fb      	str	r3, [r7, #28]
  return result;
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800a1f0:	2320      	movs	r3, #32
 800a1f2:	e003      	b.n	800a1fc <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f6:	fab3 f383 	clz	r3, r3
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	f003 031f 	and.w	r3, r3, #31
 800a202:	2101      	movs	r1, #1
 800a204:	fa01 f303 	lsl.w	r3, r1, r3
 800a208:	ea42 0103 	orr.w	r1, r2, r3
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10d      	bne.n	800a234 <HAL_ADC_ConfigChannel+0x608>
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	0e9b      	lsrs	r3, r3, #26
 800a21e:	3301      	adds	r3, #1
 800a220:	f003 021f 	and.w	r2, r3, #31
 800a224:	4613      	mov	r3, r2
 800a226:	005b      	lsls	r3, r3, #1
 800a228:	4413      	add	r3, r2
 800a22a:	3b1e      	subs	r3, #30
 800a22c:	051b      	lsls	r3, r3, #20
 800a22e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a232:	e01d      	b.n	800a270 <HAL_ADC_ConfigChannel+0x644>
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	fa93 f3a3 	rbit	r3, r3
 800a240:	613b      	str	r3, [r7, #16]
  return result;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d103      	bne.n	800a254 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800a24c:	2320      	movs	r3, #32
 800a24e:	e005      	b.n	800a25c <HAL_ADC_ConfigChannel+0x630>
 800a250:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	fab3 f383 	clz	r3, r3
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	3301      	adds	r3, #1
 800a25e:	f003 021f 	and.w	r2, r3, #31
 800a262:	4613      	mov	r3, r2
 800a264:	005b      	lsls	r3, r3, #1
 800a266:	4413      	add	r3, r2
 800a268:	3b1e      	subs	r3, #30
 800a26a:	051b      	lsls	r3, r3, #20
 800a26c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a270:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a276:	4619      	mov	r1, r3
 800a278:	f7ff f82b 	bl	80092d2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	4b45      	ldr	r3, [pc, #276]	@ (800a398 <HAL_ADC_ConfigChannel+0x76c>)
 800a282:	4013      	ands	r3, r2
 800a284:	2b00      	cmp	r3, #0
 800a286:	d07c      	beq.n	800a382 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a288:	4844      	ldr	r0, [pc, #272]	@ (800a39c <HAL_ADC_ConfigChannel+0x770>)
 800a28a:	f7fe ff5f 	bl	800914c <LL_ADC_GetCommonPathInternalCh>
 800a28e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a292:	4843      	ldr	r0, [pc, #268]	@ (800a3a0 <HAL_ADC_ConfigChannel+0x774>)
 800a294:	f7ff f8ce 	bl	8009434 <LL_ADC_IsEnabled>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d15e      	bne.n	800a35c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a40      	ldr	r2, [pc, #256]	@ (800a3a4 <HAL_ADC_ConfigChannel+0x778>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d127      	bne.n	800a2f8 <HAL_ADC_ConfigChannel+0x6cc>
 800a2a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a2ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d121      	bne.n	800a2f8 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a39      	ldr	r2, [pc, #228]	@ (800a3a0 <HAL_ADC_ConfigChannel+0x774>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d161      	bne.n	800a382 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800a2be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a2c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	4834      	ldr	r0, [pc, #208]	@ (800a39c <HAL_ADC_ConfigChannel+0x770>)
 800a2ca:	f7fe ff2c 	bl	8009126 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a2ce:	4b36      	ldr	r3, [pc, #216]	@ (800a3a8 <HAL_ADC_ConfigChannel+0x77c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	099b      	lsrs	r3, r3, #6
 800a2d4:	4a35      	ldr	r2, [pc, #212]	@ (800a3ac <HAL_ADC_ConfigChannel+0x780>)
 800a2d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a2da:	099b      	lsrs	r3, r3, #6
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	4613      	mov	r3, r2
 800a2e0:	005b      	lsls	r3, r3, #1
 800a2e2:	4413      	add	r3, r2
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800a2e8:	e002      	b.n	800a2f0 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1f9      	bne.n	800a2ea <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a2f6:	e044      	b.n	800a382 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a2c      	ldr	r2, [pc, #176]	@ (800a3b0 <HAL_ADC_ConfigChannel+0x784>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d113      	bne.n	800a32a <HAL_ADC_ConfigChannel+0x6fe>
 800a302:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a306:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d10d      	bne.n	800a32a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a23      	ldr	r2, [pc, #140]	@ (800a3a0 <HAL_ADC_ConfigChannel+0x774>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d134      	bne.n	800a382 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800a318:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a31c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a320:	4619      	mov	r1, r3
 800a322:	481e      	ldr	r0, [pc, #120]	@ (800a39c <HAL_ADC_ConfigChannel+0x770>)
 800a324:	f7fe feff 	bl	8009126 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a328:	e02b      	b.n	800a382 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a21      	ldr	r2, [pc, #132]	@ (800a3b4 <HAL_ADC_ConfigChannel+0x788>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d126      	bne.n	800a382 <HAL_ADC_ConfigChannel+0x756>
 800a334:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a338:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d120      	bne.n	800a382 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a16      	ldr	r2, [pc, #88]	@ (800a3a0 <HAL_ADC_ConfigChannel+0x774>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d11b      	bne.n	800a382 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800a34a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a34e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a352:	4619      	mov	r1, r3
 800a354:	4811      	ldr	r0, [pc, #68]	@ (800a39c <HAL_ADC_ConfigChannel+0x770>)
 800a356:	f7fe fee6 	bl	8009126 <LL_ADC_SetCommonPathInternalCh>
 800a35a:	e012      	b.n	800a382 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a360:	f043 0220 	orr.w	r2, r3, #32
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800a36e:	e008      	b.n	800a382 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a374:	f043 0220 	orr.w	r2, r3, #32
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800a38a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800a38e:	4618      	mov	r0, r3
 800a390:	37d8      	adds	r7, #216	@ 0xd8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	80080000 	.word	0x80080000
 800a39c:	50040300 	.word	0x50040300
 800a3a0:	50040000 	.word	0x50040000
 800a3a4:	c7520000 	.word	0xc7520000
 800a3a8:	2000001c 	.word	0x2000001c
 800a3ac:	053e2d63 	.word	0x053e2d63
 800a3b0:	cb840000 	.word	0xcb840000
 800a3b4:	80000001 	.word	0x80000001

0800a3b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7ff f833 	bl	8009434 <LL_ADC_IsEnabled>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d15e      	bne.n	800a492 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689a      	ldr	r2, [r3, #8]
 800a3da:	4b30      	ldr	r3, [pc, #192]	@ (800a49c <ADC_Enable+0xe4>)
 800a3dc:	4013      	ands	r3, r2
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00d      	beq.n	800a3fe <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3e6:	f043 0210 	orr.w	r2, r3, #16
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3f2:	f043 0201 	orr.w	r2, r3, #1
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e04a      	b.n	800a494 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4618      	mov	r0, r3
 800a404:	f7ff f802 	bl	800940c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800a408:	4825      	ldr	r0, [pc, #148]	@ (800a4a0 <ADC_Enable+0xe8>)
 800a40a:	f7fe fe9f 	bl	800914c <LL_ADC_GetCommonPathInternalCh>
 800a40e:	4603      	mov	r3, r0
 800a410:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d00f      	beq.n	800a438 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a418:	4b22      	ldr	r3, [pc, #136]	@ (800a4a4 <ADC_Enable+0xec>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	099b      	lsrs	r3, r3, #6
 800a41e:	4a22      	ldr	r2, [pc, #136]	@ (800a4a8 <ADC_Enable+0xf0>)
 800a420:	fba2 2303 	umull	r2, r3, r2, r3
 800a424:	099b      	lsrs	r3, r3, #6
 800a426:	3301      	adds	r3, #1
 800a428:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800a42a:	e002      	b.n	800a432 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	3b01      	subs	r3, #1
 800a430:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1f9      	bne.n	800a42c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800a438:	f7fe fe26 	bl	8009088 <HAL_GetTick>
 800a43c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a43e:	e021      	b.n	800a484 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4618      	mov	r0, r3
 800a446:	f7fe fff5 	bl	8009434 <LL_ADC_IsEnabled>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d104      	bne.n	800a45a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4618      	mov	r0, r3
 800a456:	f7fe ffd9 	bl	800940c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a45a:	f7fe fe15 	bl	8009088 <HAL_GetTick>
 800a45e:	4602      	mov	r2, r0
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	2b02      	cmp	r3, #2
 800a466:	d90d      	bls.n	800a484 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a46c:	f043 0210 	orr.w	r2, r3, #16
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a478:	f043 0201 	orr.w	r2, r3, #1
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e007      	b.n	800a494 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d1d6      	bne.n	800a440 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	8000003f 	.word	0x8000003f
 800a4a0:	50040300 	.word	0x50040300
 800a4a4:	2000001c 	.word	0x2000001c
 800a4a8:	053e2d63 	.word	0x053e2d63

0800a4ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4be:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d14b      	bne.n	800a55e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 0308 	and.w	r3, r3, #8
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d021      	beq.n	800a524 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fe fe94 	bl	8009212 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d032      	beq.n	800a556 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d12b      	bne.n	800a556 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a502:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a50e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a512:	2b00      	cmp	r3, #0
 800a514:	d11f      	bne.n	800a556 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a51a:	f043 0201 	orr.w	r2, r3, #1
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	655a      	str	r2, [r3, #84]	@ 0x54
 800a522:	e018      	b.n	800a556 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	f003 0302 	and.w	r3, r3, #2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d111      	bne.n	800a556 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a536:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a542:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a546:	2b00      	cmp	r3, #0
 800a548:	d105      	bne.n	800a556 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a54e:	f043 0201 	orr.w	r2, r3, #1
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f7ff fb40 	bl	8009bdc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a55c:	e00e      	b.n	800a57c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a562:	f003 0310 	and.w	r3, r3, #16
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f7ff fb54 	bl	8009c18 <HAL_ADC_ErrorCallback>
}
 800a570:	e004      	b.n	800a57c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	4798      	blx	r3
}
 800a57c:	bf00      	nop
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a590:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f7ff fb2c 	bl	8009bf0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a598:	bf00      	nop
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5be:	f043 0204 	orr.w	r2, r3, #4
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f7ff fb26 	bl	8009c18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a5cc:	bf00      	nop
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800a5dc:	bf00      	nop
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800a604:	bf00      	nop
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f003 0307 	and.w	r3, r3, #7
 800a646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a648:	4b0c      	ldr	r3, [pc, #48]	@ (800a67c <__NVIC_SetPriorityGrouping+0x44>)
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a654:	4013      	ands	r3, r2
 800a656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a660:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a66a:	4a04      	ldr	r2, [pc, #16]	@ (800a67c <__NVIC_SetPriorityGrouping+0x44>)
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	60d3      	str	r3, [r2, #12]
}
 800a670:	bf00      	nop
 800a672:	3714      	adds	r7, #20
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr
 800a67c:	e000ed00 	.word	0xe000ed00

0800a680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a680:	b480      	push	{r7}
 800a682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a684:	4b04      	ldr	r3, [pc, #16]	@ (800a698 <__NVIC_GetPriorityGrouping+0x18>)
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	0a1b      	lsrs	r3, r3, #8
 800a68a:	f003 0307 	and.w	r3, r3, #7
}
 800a68e:	4618      	mov	r0, r3
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr
 800a698:	e000ed00 	.word	0xe000ed00

0800a69c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a6a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	db0b      	blt.n	800a6c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a6ae:	79fb      	ldrb	r3, [r7, #7]
 800a6b0:	f003 021f 	and.w	r2, r3, #31
 800a6b4:	4907      	ldr	r1, [pc, #28]	@ (800a6d4 <__NVIC_EnableIRQ+0x38>)
 800a6b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6ba:	095b      	lsrs	r3, r3, #5
 800a6bc:	2001      	movs	r0, #1
 800a6be:	fa00 f202 	lsl.w	r2, r0, r2
 800a6c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a6c6:	bf00      	nop
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	e000e100 	.word	0xe000e100

0800a6d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	4603      	mov	r3, r0
 800a6e0:	6039      	str	r1, [r7, #0]
 800a6e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a6e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	db0a      	blt.n	800a702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	b2da      	uxtb	r2, r3
 800a6f0:	490c      	ldr	r1, [pc, #48]	@ (800a724 <__NVIC_SetPriority+0x4c>)
 800a6f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6f6:	0112      	lsls	r2, r2, #4
 800a6f8:	b2d2      	uxtb	r2, r2
 800a6fa:	440b      	add	r3, r1
 800a6fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a700:	e00a      	b.n	800a718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	b2da      	uxtb	r2, r3
 800a706:	4908      	ldr	r1, [pc, #32]	@ (800a728 <__NVIC_SetPriority+0x50>)
 800a708:	79fb      	ldrb	r3, [r7, #7]
 800a70a:	f003 030f 	and.w	r3, r3, #15
 800a70e:	3b04      	subs	r3, #4
 800a710:	0112      	lsls	r2, r2, #4
 800a712:	b2d2      	uxtb	r2, r2
 800a714:	440b      	add	r3, r1
 800a716:	761a      	strb	r2, [r3, #24]
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr
 800a724:	e000e100 	.word	0xe000e100
 800a728:	e000ed00 	.word	0xe000ed00

0800a72c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b089      	sub	sp, #36	@ 0x24
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f003 0307 	and.w	r3, r3, #7
 800a73e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	f1c3 0307 	rsb	r3, r3, #7
 800a746:	2b04      	cmp	r3, #4
 800a748:	bf28      	it	cs
 800a74a:	2304      	movcs	r3, #4
 800a74c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	3304      	adds	r3, #4
 800a752:	2b06      	cmp	r3, #6
 800a754:	d902      	bls.n	800a75c <NVIC_EncodePriority+0x30>
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	3b03      	subs	r3, #3
 800a75a:	e000      	b.n	800a75e <NVIC_EncodePriority+0x32>
 800a75c:	2300      	movs	r3, #0
 800a75e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a760:	f04f 32ff 	mov.w	r2, #4294967295
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	fa02 f303 	lsl.w	r3, r2, r3
 800a76a:	43da      	mvns	r2, r3
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	401a      	ands	r2, r3
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a774:	f04f 31ff 	mov.w	r1, #4294967295
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	fa01 f303 	lsl.w	r3, r1, r3
 800a77e:	43d9      	mvns	r1, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a784:	4313      	orrs	r3, r2
         );
}
 800a786:	4618      	mov	r0, r3
 800a788:	3724      	adds	r7, #36	@ 0x24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
	...

0800a794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7a4:	d301      	bcc.n	800a7aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e00f      	b.n	800a7ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a7aa:	4a0a      	ldr	r2, [pc, #40]	@ (800a7d4 <SysTick_Config+0x40>)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a7b2:	210f      	movs	r1, #15
 800a7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b8:	f7ff ff8e 	bl	800a6d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a7bc:	4b05      	ldr	r3, [pc, #20]	@ (800a7d4 <SysTick_Config+0x40>)
 800a7be:	2200      	movs	r2, #0
 800a7c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a7c2:	4b04      	ldr	r3, [pc, #16]	@ (800a7d4 <SysTick_Config+0x40>)
 800a7c4:	2207      	movs	r2, #7
 800a7c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	e000e010 	.word	0xe000e010

0800a7d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f7ff ff29 	bl	800a638 <__NVIC_SetPriorityGrouping>
}
 800a7e6:	bf00      	nop
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b086      	sub	sp, #24
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	60b9      	str	r1, [r7, #8]
 800a7f8:	607a      	str	r2, [r7, #4]
 800a7fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a7fc:	f7ff ff40 	bl	800a680 <__NVIC_GetPriorityGrouping>
 800a800:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	68b9      	ldr	r1, [r7, #8]
 800a806:	6978      	ldr	r0, [r7, #20]
 800a808:	f7ff ff90 	bl	800a72c <NVIC_EncodePriority>
 800a80c:	4602      	mov	r2, r0
 800a80e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a812:	4611      	mov	r1, r2
 800a814:	4618      	mov	r0, r3
 800a816:	f7ff ff5f 	bl	800a6d8 <__NVIC_SetPriority>
}
 800a81a:	bf00      	nop
 800a81c:	3718      	adds	r7, #24
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b082      	sub	sp, #8
 800a826:	af00      	add	r7, sp, #0
 800a828:	4603      	mov	r3, r0
 800a82a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a82c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a830:	4618      	mov	r0, r3
 800a832:	f7ff ff33 	bl	800a69c <__NVIC_EnableIRQ>
}
 800a836:	bf00      	nop
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b082      	sub	sp, #8
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7ff ffa4 	bl	800a794 <SysTick_Config>
 800a84c:	4603      	mov	r3, r0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
	...

0800a858 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d101      	bne.n	800a86a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e08e      	b.n	800a988 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	4b47      	ldr	r3, [pc, #284]	@ (800a990 <HAL_DMA_Init+0x138>)
 800a872:	429a      	cmp	r2, r3
 800a874:	d80f      	bhi.n	800a896 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	461a      	mov	r2, r3
 800a87c:	4b45      	ldr	r3, [pc, #276]	@ (800a994 <HAL_DMA_Init+0x13c>)
 800a87e:	4413      	add	r3, r2
 800a880:	4a45      	ldr	r2, [pc, #276]	@ (800a998 <HAL_DMA_Init+0x140>)
 800a882:	fba2 2303 	umull	r2, r3, r2, r3
 800a886:	091b      	lsrs	r3, r3, #4
 800a888:	009a      	lsls	r2, r3, #2
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a42      	ldr	r2, [pc, #264]	@ (800a99c <HAL_DMA_Init+0x144>)
 800a892:	641a      	str	r2, [r3, #64]	@ 0x40
 800a894:	e00e      	b.n	800a8b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	461a      	mov	r2, r3
 800a89c:	4b40      	ldr	r3, [pc, #256]	@ (800a9a0 <HAL_DMA_Init+0x148>)
 800a89e:	4413      	add	r3, r2
 800a8a0:	4a3d      	ldr	r2, [pc, #244]	@ (800a998 <HAL_DMA_Init+0x140>)
 800a8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8a6:	091b      	lsrs	r3, r3, #4
 800a8a8:	009a      	lsls	r2, r3, #2
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a3c      	ldr	r2, [pc, #240]	@ (800a9a4 <HAL_DMA_Init+0x14c>)
 800a8b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a8ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a8d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a8e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	699b      	ldr	r3, [r3, #24]
 800a8ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a8f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
 800a8f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fa24 	bl	800ad54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a914:	d102      	bne.n	800a91c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685a      	ldr	r2, [r3, #4]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a924:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800a928:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a932:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d010      	beq.n	800a95e <HAL_DMA_Init+0x106>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	2b04      	cmp	r3, #4
 800a942:	d80c      	bhi.n	800a95e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 fa43 	bl	800add0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a94e:	2200      	movs	r2, #0
 800a950:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a95a:	605a      	str	r2, [r3, #4]
 800a95c:	e008      	b.n	800a970 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2201      	movs	r2, #1
 800a97a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}
 800a990:	40020407 	.word	0x40020407
 800a994:	bffdfff8 	.word	0xbffdfff8
 800a998:	cccccccd 	.word	0xcccccccd
 800a99c:	40020000 	.word	0x40020000
 800a9a0:	bffdfbf8 	.word	0xbffdfbf8
 800a9a4:	40020400 	.word	0x40020400

0800a9a8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
 800a9b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d101      	bne.n	800a9c8 <HAL_DMA_Start_IT+0x20>
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	e066      	b.n	800aa96 <HAL_DMA_Start_IT+0xee>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d155      	bne.n	800aa88 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2202      	movs	r2, #2
 800a9e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f022 0201 	bic.w	r2, r2, #1
 800a9f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	68b9      	ldr	r1, [r7, #8]
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f000 f968 	bl	800acd6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d008      	beq.n	800aa20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f042 020e 	orr.w	r2, r2, #14
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	e00f      	b.n	800aa40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f022 0204 	bic.w	r2, r2, #4
 800aa2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f042 020a 	orr.w	r2, r2, #10
 800aa3e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d007      	beq.n	800aa5e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa5c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d007      	beq.n	800aa76 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa74:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f042 0201 	orr.w	r2, r2, #1
 800aa84:	601a      	str	r2, [r3, #0]
 800aa86:	e005      	b.n	800aa94 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800aa90:	2302      	movs	r3, #2
 800aa92:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800aa94:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b084      	sub	sp, #16
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d005      	beq.n	800aac2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2204      	movs	r2, #4
 800aaba:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	73fb      	strb	r3, [r7, #15]
 800aac0:	e047      	b.n	800ab52 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f022 020e 	bic.w	r2, r2, #14
 800aad0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f022 0201 	bic.w	r2, r2, #1
 800aae0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aaec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aaf0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaf6:	f003 021c 	and.w	r2, r3, #28
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aafe:	2101      	movs	r1, #1
 800ab00:	fa01 f202 	lsl.w	r2, r1, r2
 800ab04:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ab0e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00c      	beq.n	800ab32 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ab26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ab30:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d003      	beq.n	800ab52 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	4798      	blx	r3
    }
  }
  return status;
 800ab52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab78:	f003 031c 	and.w	r3, r3, #28
 800ab7c:	2204      	movs	r2, #4
 800ab7e:	409a      	lsls	r2, r3
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	4013      	ands	r3, r2
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d026      	beq.n	800abd6 <HAL_DMA_IRQHandler+0x7a>
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	f003 0304 	and.w	r3, r3, #4
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d021      	beq.n	800abd6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 0320 	and.w	r3, r3, #32
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d107      	bne.n	800abb0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f022 0204 	bic.w	r2, r2, #4
 800abae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abb4:	f003 021c 	and.w	r2, r3, #28
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abbc:	2104      	movs	r1, #4
 800abbe:	fa01 f202 	lsl.w	r2, r1, r2
 800abc2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d071      	beq.n	800acb0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800abd4:	e06c      	b.n	800acb0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abda:	f003 031c 	and.w	r3, r3, #28
 800abde:	2202      	movs	r2, #2
 800abe0:	409a      	lsls	r2, r3
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	4013      	ands	r3, r2
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d02e      	beq.n	800ac48 <HAL_DMA_IRQHandler+0xec>
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	f003 0302 	and.w	r3, r3, #2
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d029      	beq.n	800ac48 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 0320 	and.w	r3, r3, #32
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10b      	bne.n	800ac1a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f022 020a 	bic.w	r2, r2, #10
 800ac10:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac1e:	f003 021c 	and.w	r2, r3, #28
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac26:	2102      	movs	r1, #2
 800ac28:	fa01 f202 	lsl.w	r2, r1, r2
 800ac2c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d038      	beq.n	800acb0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800ac46:	e033      	b.n	800acb0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac4c:	f003 031c 	and.w	r3, r3, #28
 800ac50:	2208      	movs	r2, #8
 800ac52:	409a      	lsls	r2, r3
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	4013      	ands	r3, r2
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d02a      	beq.n	800acb2 <HAL_DMA_IRQHandler+0x156>
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	f003 0308 	and.w	r3, r3, #8
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d025      	beq.n	800acb2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f022 020e 	bic.w	r2, r2, #14
 800ac74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac7a:	f003 021c 	and.w	r2, r3, #28
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac82:	2101      	movs	r1, #1
 800ac84:	fa01 f202 	lsl.w	r2, r1, r2
 800ac88:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d004      	beq.n	800acb2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800acb0:	bf00      	nop
 800acb2:	bf00      	nop
}
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800acba:	b480      	push	{r7}
 800acbc:	b083      	sub	sp, #12
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800acc8:	b2db      	uxtb	r3, r3
}
 800acca:	4618      	mov	r0, r3
 800accc:	370c      	adds	r7, #12
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800acd6:	b480      	push	{r7}
 800acd8:	b085      	sub	sp, #20
 800acda:	af00      	add	r7, sp, #0
 800acdc:	60f8      	str	r0, [r7, #12]
 800acde:	60b9      	str	r1, [r7, #8]
 800ace0:	607a      	str	r2, [r7, #4]
 800ace2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800acec:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d004      	beq.n	800ad00 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800acfe:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad04:	f003 021c 	and.w	r2, r3, #28
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	fa01 f202 	lsl.w	r2, r1, r2
 800ad12:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	683a      	ldr	r2, [r7, #0]
 800ad1a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	2b10      	cmp	r3, #16
 800ad22:	d108      	bne.n	800ad36 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ad34:	e007      	b.n	800ad46 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	60da      	str	r2, [r3, #12]
}
 800ad46:	bf00      	nop
 800ad48:	3714      	adds	r7, #20
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
	...

0800ad54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	461a      	mov	r2, r3
 800ad62:	4b17      	ldr	r3, [pc, #92]	@ (800adc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d80a      	bhi.n	800ad7e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad6c:	089b      	lsrs	r3, r3, #2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad74:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	6493      	str	r3, [r2, #72]	@ 0x48
 800ad7c:	e007      	b.n	800ad8e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad82:	089b      	lsrs	r3, r3, #2
 800ad84:	009a      	lsls	r2, r3, #2
 800ad86:	4b0f      	ldr	r3, [pc, #60]	@ (800adc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800ad88:	4413      	add	r3, r2
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	3b08      	subs	r3, #8
 800ad96:	4a0c      	ldr	r2, [pc, #48]	@ (800adc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800ad98:	fba2 2303 	umull	r2, r3, r2, r3
 800ad9c:	091b      	lsrs	r3, r3, #4
 800ad9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a0a      	ldr	r2, [pc, #40]	@ (800adcc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800ada4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f003 031f 	and.w	r3, r3, #31
 800adac:	2201      	movs	r2, #1
 800adae:	409a      	lsls	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800adb4:	bf00      	nop
 800adb6:	3714      	adds	r7, #20
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr
 800adc0:	40020407 	.word	0x40020407
 800adc4:	4002081c 	.word	0x4002081c
 800adc8:	cccccccd 	.word	0xcccccccd
 800adcc:	40020880 	.word	0x40020880

0800add0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ade0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	4b0b      	ldr	r3, [pc, #44]	@ (800ae14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800ade6:	4413      	add	r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	461a      	mov	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a09      	ldr	r2, [pc, #36]	@ (800ae18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800adf4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	f003 0303 	and.w	r3, r3, #3
 800adfe:	2201      	movs	r2, #1
 800ae00:	409a      	lsls	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800ae06:	bf00      	nop
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	1000823f 	.word	0x1000823f
 800ae18:	40020940 	.word	0x40020940

0800ae1c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b087      	sub	sp, #28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ae26:	2300      	movs	r3, #0
 800ae28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ae2a:	e14c      	b.n	800b0c6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	2101      	movs	r1, #1
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	fa01 f303 	lsl.w	r3, r1, r3
 800ae38:	4013      	ands	r3, r2
 800ae3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f000 813e 	beq.w	800b0c0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	f003 0303 	and.w	r3, r3, #3
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d005      	beq.n	800ae5c <HAL_GPIO_Init+0x40>
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	f003 0303 	and.w	r3, r3, #3
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d130      	bne.n	800aebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	005b      	lsls	r3, r3, #1
 800ae66:	2203      	movs	r2, #3
 800ae68:	fa02 f303 	lsl.w	r3, r2, r3
 800ae6c:	43db      	mvns	r3, r3
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	4013      	ands	r3, r2
 800ae72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	68da      	ldr	r2, [r3, #12]
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	005b      	lsls	r3, r3, #1
 800ae7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ae92:	2201      	movs	r2, #1
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	fa02 f303 	lsl.w	r3, r2, r3
 800ae9a:	43db      	mvns	r3, r3
 800ae9c:	693a      	ldr	r2, [r7, #16]
 800ae9e:	4013      	ands	r3, r2
 800aea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	091b      	lsrs	r3, r3, #4
 800aea8:	f003 0201 	and.w	r2, r3, #1
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	f003 0303 	and.w	r3, r3, #3
 800aec6:	2b03      	cmp	r3, #3
 800aec8:	d017      	beq.n	800aefa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	2203      	movs	r2, #3
 800aed6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeda:	43db      	mvns	r3, r3
 800aedc:	693a      	ldr	r2, [r7, #16]
 800aede:	4013      	ands	r3, r2
 800aee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	689a      	ldr	r2, [r3, #8]
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	005b      	lsls	r3, r3, #1
 800aeea:	fa02 f303 	lsl.w	r3, r2, r3
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	f003 0303 	and.w	r3, r3, #3
 800af02:	2b02      	cmp	r3, #2
 800af04:	d123      	bne.n	800af4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	08da      	lsrs	r2, r3, #3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3208      	adds	r2, #8
 800af0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	f003 0307 	and.w	r3, r3, #7
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	220f      	movs	r2, #15
 800af1e:	fa02 f303 	lsl.w	r3, r2, r3
 800af22:	43db      	mvns	r3, r3
 800af24:	693a      	ldr	r2, [r7, #16]
 800af26:	4013      	ands	r3, r2
 800af28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	691a      	ldr	r2, [r3, #16]
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	f003 0307 	and.w	r3, r3, #7
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	fa02 f303 	lsl.w	r3, r2, r3
 800af3a:	693a      	ldr	r2, [r7, #16]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	08da      	lsrs	r2, r3, #3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	3208      	adds	r2, #8
 800af48:	6939      	ldr	r1, [r7, #16]
 800af4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	005b      	lsls	r3, r3, #1
 800af58:	2203      	movs	r2, #3
 800af5a:	fa02 f303 	lsl.w	r3, r2, r3
 800af5e:	43db      	mvns	r3, r3
 800af60:	693a      	ldr	r2, [r7, #16]
 800af62:	4013      	ands	r3, r2
 800af64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	f003 0203 	and.w	r2, r3, #3
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	005b      	lsls	r3, r3, #1
 800af72:	fa02 f303 	lsl.w	r3, r2, r3
 800af76:	693a      	ldr	r2, [r7, #16]
 800af78:	4313      	orrs	r3, r2
 800af7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	693a      	ldr	r2, [r7, #16]
 800af80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f000 8098 	beq.w	800b0c0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800af90:	4a54      	ldr	r2, [pc, #336]	@ (800b0e4 <HAL_GPIO_Init+0x2c8>)
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	089b      	lsrs	r3, r3, #2
 800af96:	3302      	adds	r3, #2
 800af98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	f003 0303 	and.w	r3, r3, #3
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	220f      	movs	r2, #15
 800afa8:	fa02 f303 	lsl.w	r3, r2, r3
 800afac:	43db      	mvns	r3, r3
 800afae:	693a      	ldr	r2, [r7, #16]
 800afb0:	4013      	ands	r3, r2
 800afb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800afba:	d019      	beq.n	800aff0 <HAL_GPIO_Init+0x1d4>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4a4a      	ldr	r2, [pc, #296]	@ (800b0e8 <HAL_GPIO_Init+0x2cc>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d013      	beq.n	800afec <HAL_GPIO_Init+0x1d0>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4a49      	ldr	r2, [pc, #292]	@ (800b0ec <HAL_GPIO_Init+0x2d0>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d00d      	beq.n	800afe8 <HAL_GPIO_Init+0x1cc>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4a48      	ldr	r2, [pc, #288]	@ (800b0f0 <HAL_GPIO_Init+0x2d4>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d007      	beq.n	800afe4 <HAL_GPIO_Init+0x1c8>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a47      	ldr	r2, [pc, #284]	@ (800b0f4 <HAL_GPIO_Init+0x2d8>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d101      	bne.n	800afe0 <HAL_GPIO_Init+0x1c4>
 800afdc:	2304      	movs	r3, #4
 800afde:	e008      	b.n	800aff2 <HAL_GPIO_Init+0x1d6>
 800afe0:	2307      	movs	r3, #7
 800afe2:	e006      	b.n	800aff2 <HAL_GPIO_Init+0x1d6>
 800afe4:	2303      	movs	r3, #3
 800afe6:	e004      	b.n	800aff2 <HAL_GPIO_Init+0x1d6>
 800afe8:	2302      	movs	r3, #2
 800afea:	e002      	b.n	800aff2 <HAL_GPIO_Init+0x1d6>
 800afec:	2301      	movs	r3, #1
 800afee:	e000      	b.n	800aff2 <HAL_GPIO_Init+0x1d6>
 800aff0:	2300      	movs	r3, #0
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	f002 0203 	and.w	r2, r2, #3
 800aff8:	0092      	lsls	r2, r2, #2
 800affa:	4093      	lsls	r3, r2
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	4313      	orrs	r3, r2
 800b000:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b002:	4938      	ldr	r1, [pc, #224]	@ (800b0e4 <HAL_GPIO_Init+0x2c8>)
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	089b      	lsrs	r3, r3, #2
 800b008:	3302      	adds	r3, #2
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b010:	4b39      	ldr	r3, [pc, #228]	@ (800b0f8 <HAL_GPIO_Init+0x2dc>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	43db      	mvns	r3, r3
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	4013      	ands	r3, r2
 800b01e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d003      	beq.n	800b034 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	4313      	orrs	r3, r2
 800b032:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b034:	4a30      	ldr	r2, [pc, #192]	@ (800b0f8 <HAL_GPIO_Init+0x2dc>)
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b03a:	4b2f      	ldr	r3, [pc, #188]	@ (800b0f8 <HAL_GPIO_Init+0x2dc>)
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	43db      	mvns	r3, r3
 800b044:	693a      	ldr	r2, [r7, #16]
 800b046:	4013      	ands	r3, r2
 800b048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d003      	beq.n	800b05e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800b056:	693a      	ldr	r2, [r7, #16]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b05e:	4a26      	ldr	r2, [pc, #152]	@ (800b0f8 <HAL_GPIO_Init+0x2dc>)
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b064:	4b24      	ldr	r3, [pc, #144]	@ (800b0f8 <HAL_GPIO_Init+0x2dc>)
 800b066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b06a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	43db      	mvns	r3, r3
 800b070:	693a      	ldr	r2, [r7, #16]
 800b072:	4013      	ands	r3, r2
 800b074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d003      	beq.n	800b08a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800b082:	693a      	ldr	r2, [r7, #16]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	4313      	orrs	r3, r2
 800b088:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b08a:	4a1b      	ldr	r2, [pc, #108]	@ (800b0f8 <HAL_GPIO_Init+0x2dc>)
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800b092:	4b19      	ldr	r3, [pc, #100]	@ (800b0f8 <HAL_GPIO_Init+0x2dc>)
 800b094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	43db      	mvns	r3, r3
 800b09e:	693a      	ldr	r2, [r7, #16]
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d003      	beq.n	800b0b8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800b0b0:	693a      	ldr	r2, [r7, #16]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b0b8:	4a0f      	ldr	r2, [pc, #60]	@ (800b0f8 <HAL_GPIO_Init+0x2dc>)
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f47f aeab 	bne.w	800ae2c <HAL_GPIO_Init+0x10>
  }
}
 800b0d6:	bf00      	nop
 800b0d8:	bf00      	nop
 800b0da:	371c      	adds	r7, #28
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	40010000 	.word	0x40010000
 800b0e8:	48000400 	.word	0x48000400
 800b0ec:	48000800 	.word	0x48000800
 800b0f0:	48000c00 	.word	0x48000c00
 800b0f4:	48001000 	.word	0x48001000
 800b0f8:	58000800 	.word	0x58000800

0800b0fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	460b      	mov	r3, r1
 800b106:	807b      	strh	r3, [r7, #2]
 800b108:	4613      	mov	r3, r2
 800b10a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b10c:	787b      	ldrb	r3, [r7, #1]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b112:	887a      	ldrh	r2, [r7, #2]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b118:	e002      	b.n	800b120 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b11a:	887a      	ldrh	r2, [r7, #2]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b120:	bf00      	nop
 800b122:	370c      	adds	r7, #12
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	460b      	mov	r3, r1
 800b136:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	695b      	ldr	r3, [r3, #20]
 800b13c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b13e:	887a      	ldrh	r2, [r7, #2]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	4013      	ands	r3, r2
 800b144:	041a      	lsls	r2, r3, #16
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	43d9      	mvns	r1, r3
 800b14a:	887b      	ldrh	r3, [r7, #2]
 800b14c:	400b      	ands	r3, r1
 800b14e:	431a      	orrs	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	619a      	str	r2, [r3, #24]
}
 800b154:	bf00      	nop
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	4603      	mov	r3, r0
 800b168:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800b16a:	4b08      	ldr	r3, [pc, #32]	@ (800b18c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b16c:	68da      	ldr	r2, [r3, #12]
 800b16e:	88fb      	ldrh	r3, [r7, #6]
 800b170:	4013      	ands	r3, r2
 800b172:	2b00      	cmp	r3, #0
 800b174:	d006      	beq.n	800b184 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b176:	4a05      	ldr	r2, [pc, #20]	@ (800b18c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b178:	88fb      	ldrh	r3, [r7, #6]
 800b17a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b17c:	88fb      	ldrh	r3, [r7, #6]
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 f806 	bl	800b190 <HAL_GPIO_EXTI_Callback>
  }
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	58000800 	.word	0x58000800

0800b190 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	4603      	mov	r3, r0
 800b198:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800b19a:	bf00      	nop
 800b19c:	370c      	adds	r7, #12
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b082      	sub	sp, #8
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d101      	bne.n	800b1b8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e08d      	b.n	800b2d4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d106      	bne.n	800b1d2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7fd fafd 	bl	80087cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2224      	movs	r2, #36	@ 0x24
 800b1d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f022 0201 	bic.w	r2, r2, #1
 800b1e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b1f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	689a      	ldr	r2, [r3, #8]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b206:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d107      	bne.n	800b220 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	689a      	ldr	r2, [r3, #8]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b21c:	609a      	str	r2, [r3, #8]
 800b21e:	e006      	b.n	800b22e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	689a      	ldr	r2, [r3, #8]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b22c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	2b02      	cmp	r3, #2
 800b234:	d108      	bne.n	800b248 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	685a      	ldr	r2, [r3, #4]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b244:	605a      	str	r2, [r3, #4]
 800b246:	e007      	b.n	800b258 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	685a      	ldr	r2, [r3, #4]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b256:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	6812      	ldr	r2, [r2, #0]
 800b262:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b26a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68da      	ldr	r2, [r3, #12]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b27a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	691a      	ldr	r2, [r3, #16]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	695b      	ldr	r3, [r3, #20]
 800b284:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	430a      	orrs	r2, r1
 800b294:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	69d9      	ldr	r1, [r3, #28]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a1a      	ldr	r2, [r3, #32]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	430a      	orrs	r2, r1
 800b2a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f042 0201 	orr.w	r2, r2, #1
 800b2b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2220      	movs	r2, #32
 800b2c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800b2d2:	2300      	movs	r3, #0
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b088      	sub	sp, #32
 800b2e0:	af02      	add	r7, sp, #8
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	607a      	str	r2, [r7, #4]
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	817b      	strh	r3, [r7, #10]
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	2b20      	cmp	r3, #32
 800b2fa:	f040 80fd 	bne.w	800b4f8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b304:	2b01      	cmp	r3, #1
 800b306:	d101      	bne.n	800b30c <HAL_I2C_Master_Transmit+0x30>
 800b308:	2302      	movs	r3, #2
 800b30a:	e0f6      	b.n	800b4fa <HAL_I2C_Master_Transmit+0x21e>
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b314:	f7fd feb8 	bl	8009088 <HAL_GetTick>
 800b318:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	2319      	movs	r3, #25
 800b320:	2201      	movs	r2, #1
 800b322:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f000 ff85 	bl	800c236 <I2C_WaitOnFlagUntilTimeout>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d001      	beq.n	800b336 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e0e1      	b.n	800b4fa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2221      	movs	r2, #33	@ 0x21
 800b33a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2210      	movs	r2, #16
 800b342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	893a      	ldrh	r2, [r7, #8]
 800b356:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2200      	movs	r2, #0
 800b35c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b362:	b29b      	uxth	r3, r3
 800b364:	2bff      	cmp	r3, #255	@ 0xff
 800b366:	d906      	bls.n	800b376 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	22ff      	movs	r2, #255	@ 0xff
 800b36c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800b36e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b372:	617b      	str	r3, [r7, #20]
 800b374:	e007      	b.n	800b386 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b380:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b384:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d024      	beq.n	800b3d8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b392:	781a      	ldrb	r2, [r3, #0]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b39e:	1c5a      	adds	r2, r3, #1
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	b2da      	uxtb	r2, r3
 800b3c8:	8979      	ldrh	r1, [r7, #10]
 800b3ca:	4b4e      	ldr	r3, [pc, #312]	@ (800b504 <HAL_I2C_Master_Transmit+0x228>)
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f001 f97f 	bl	800c6d4 <I2C_TransferConfig>
 800b3d6:	e066      	b.n	800b4a6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3dc:	b2da      	uxtb	r2, r3
 800b3de:	8979      	ldrh	r1, [r7, #10]
 800b3e0:	4b48      	ldr	r3, [pc, #288]	@ (800b504 <HAL_I2C_Master_Transmit+0x228>)
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f001 f974 	bl	800c6d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800b3ec:	e05b      	b.n	800b4a6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3ee:	693a      	ldr	r2, [r7, #16]
 800b3f0:	6a39      	ldr	r1, [r7, #32]
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f000 ff78 	bl	800c2e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e07b      	b.n	800b4fa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b406:	781a      	ldrb	r2, [r3, #0]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b412:	1c5a      	adds	r2, r3, #1
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	3b01      	subs	r3, #1
 800b420:	b29a      	uxth	r2, r3
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b42a:	3b01      	subs	r3, #1
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b436:	b29b      	uxth	r3, r3
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d034      	beq.n	800b4a6 <HAL_I2C_Master_Transmit+0x1ca>
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b440:	2b00      	cmp	r3, #0
 800b442:	d130      	bne.n	800b4a6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	6a3b      	ldr	r3, [r7, #32]
 800b44a:	2200      	movs	r2, #0
 800b44c:	2180      	movs	r1, #128	@ 0x80
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f000 fef1 	bl	800c236 <I2C_WaitOnFlagUntilTimeout>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d001      	beq.n	800b45e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e04d      	b.n	800b4fa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b462:	b29b      	uxth	r3, r3
 800b464:	2bff      	cmp	r3, #255	@ 0xff
 800b466:	d90e      	bls.n	800b486 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	22ff      	movs	r2, #255	@ 0xff
 800b46c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b472:	b2da      	uxtb	r2, r3
 800b474:	8979      	ldrh	r1, [r7, #10]
 800b476:	2300      	movs	r3, #0
 800b478:	9300      	str	r3, [sp, #0]
 800b47a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f001 f928 	bl	800c6d4 <I2C_TransferConfig>
 800b484:	e00f      	b.n	800b4a6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b494:	b2da      	uxtb	r2, r3
 800b496:	8979      	ldrh	r1, [r7, #10]
 800b498:	2300      	movs	r3, #0
 800b49a:	9300      	str	r3, [sp, #0]
 800b49c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b4a0:	68f8      	ldr	r0, [r7, #12]
 800b4a2:	f001 f917 	bl	800c6d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d19e      	bne.n	800b3ee <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4b0:	693a      	ldr	r2, [r7, #16]
 800b4b2:	6a39      	ldr	r1, [r7, #32]
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f000 ff5e 	bl	800c376 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d001      	beq.n	800b4c4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e01a      	b.n	800b4fa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2220      	movs	r2, #32
 800b4ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	6859      	ldr	r1, [r3, #4]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b508 <HAL_I2C_Master_Transmit+0x22c>)
 800b4d8:	400b      	ands	r3, r1
 800b4da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2220      	movs	r2, #32
 800b4e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	e000      	b.n	800b4fa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800b4f8:	2302      	movs	r3, #2
  }
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3718      	adds	r7, #24
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	80002000 	.word	0x80002000
 800b508:	fe00e800 	.word	0xfe00e800

0800b50c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b088      	sub	sp, #32
 800b510:	af02      	add	r7, sp, #8
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	607a      	str	r2, [r7, #4]
 800b516:	461a      	mov	r2, r3
 800b518:	460b      	mov	r3, r1
 800b51a:	817b      	strh	r3, [r7, #10]
 800b51c:	4613      	mov	r3, r2
 800b51e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b526:	b2db      	uxtb	r3, r3
 800b528:	2b20      	cmp	r3, #32
 800b52a:	f040 80db 	bne.w	800b6e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b534:	2b01      	cmp	r3, #1
 800b536:	d101      	bne.n	800b53c <HAL_I2C_Master_Receive+0x30>
 800b538:	2302      	movs	r3, #2
 800b53a:	e0d4      	b.n	800b6e6 <HAL_I2C_Master_Receive+0x1da>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2201      	movs	r2, #1
 800b540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b544:	f7fd fda0 	bl	8009088 <HAL_GetTick>
 800b548:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	9300      	str	r3, [sp, #0]
 800b54e:	2319      	movs	r3, #25
 800b550:	2201      	movs	r2, #1
 800b552:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f000 fe6d 	bl	800c236 <I2C_WaitOnFlagUntilTimeout>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d001      	beq.n	800b566 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	e0bf      	b.n	800b6e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2222      	movs	r2, #34	@ 0x22
 800b56a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2210      	movs	r2, #16
 800b572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	893a      	ldrh	r2, [r7, #8]
 800b586:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2200      	movs	r2, #0
 800b58c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b592:	b29b      	uxth	r3, r3
 800b594:	2bff      	cmp	r3, #255	@ 0xff
 800b596:	d90e      	bls.n	800b5b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	22ff      	movs	r2, #255	@ 0xff
 800b59c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b5a2:	b2da      	uxtb	r2, r3
 800b5a4:	8979      	ldrh	r1, [r7, #10]
 800b5a6:	4b52      	ldr	r3, [pc, #328]	@ (800b6f0 <HAL_I2C_Master_Receive+0x1e4>)
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f001 f890 	bl	800c6d4 <I2C_TransferConfig>
 800b5b4:	e06d      	b.n	800b692 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b5c4:	b2da      	uxtb	r2, r3
 800b5c6:	8979      	ldrh	r1, [r7, #10]
 800b5c8:	4b49      	ldr	r3, [pc, #292]	@ (800b6f0 <HAL_I2C_Master_Receive+0x1e4>)
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f001 f87f 	bl	800c6d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800b5d6:	e05c      	b.n	800b692 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5d8:	697a      	ldr	r2, [r7, #20]
 800b5da:	6a39      	ldr	r1, [r7, #32]
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f000 ff0d 	bl	800c3fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e07c      	b.n	800b6e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f6:	b2d2      	uxtb	r2, r2
 800b5f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5fe:	1c5a      	adds	r2, r3, #1
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b608:	3b01      	subs	r3, #1
 800b60a:	b29a      	uxth	r2, r3
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b614:	b29b      	uxth	r3, r3
 800b616:	3b01      	subs	r3, #1
 800b618:	b29a      	uxth	r2, r3
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b622:	b29b      	uxth	r3, r3
 800b624:	2b00      	cmp	r3, #0
 800b626:	d034      	beq.n	800b692 <HAL_I2C_Master_Receive+0x186>
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d130      	bne.n	800b692 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	6a3b      	ldr	r3, [r7, #32]
 800b636:	2200      	movs	r2, #0
 800b638:	2180      	movs	r1, #128	@ 0x80
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f000 fdfb 	bl	800c236 <I2C_WaitOnFlagUntilTimeout>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	e04d      	b.n	800b6e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b64e:	b29b      	uxth	r3, r3
 800b650:	2bff      	cmp	r3, #255	@ 0xff
 800b652:	d90e      	bls.n	800b672 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	22ff      	movs	r2, #255	@ 0xff
 800b658:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b65e:	b2da      	uxtb	r2, r3
 800b660:	8979      	ldrh	r1, [r7, #10]
 800b662:	2300      	movs	r3, #0
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f001 f832 	bl	800c6d4 <I2C_TransferConfig>
 800b670:	e00f      	b.n	800b692 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b676:	b29a      	uxth	r2, r3
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b680:	b2da      	uxtb	r2, r3
 800b682:	8979      	ldrh	r1, [r7, #10]
 800b684:	2300      	movs	r3, #0
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f001 f821 	bl	800c6d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b696:	b29b      	uxth	r3, r3
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d19d      	bne.n	800b5d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b69c:	697a      	ldr	r2, [r7, #20]
 800b69e:	6a39      	ldr	r1, [r7, #32]
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f000 fe68 	bl	800c376 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d001      	beq.n	800b6b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e01a      	b.n	800b6e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2220      	movs	r2, #32
 800b6b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	6859      	ldr	r1, [r3, #4]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b6f4 <HAL_I2C_Master_Receive+0x1e8>)
 800b6c4:	400b      	ands	r3, r1
 800b6c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2220      	movs	r2, #32
 800b6cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	e000      	b.n	800b6e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b6e4:	2302      	movs	r3, #2
  }
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3718      	adds	r7, #24
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	80002400 	.word	0x80002400
 800b6f4:	fe00e800 	.word	0xfe00e800

0800b6f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	699b      	ldr	r3, [r3, #24]
 800b706:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b714:	2b00      	cmp	r3, #0
 800b716:	d005      	beq.n	800b724 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	68f9      	ldr	r1, [r7, #12]
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	4798      	blx	r3
  }
}
 800b724:	bf00      	nop
 800b726:	3710      	adds	r7, #16
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b086      	sub	sp, #24
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	699b      	ldr	r3, [r3, #24]
 800b73a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00f      	beq.n	800b76e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b754:	2b00      	cmp	r3, #0
 800b756:	d00a      	beq.n	800b76e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b75c:	f043 0201 	orr.w	r2, r3, #1
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b76c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00f      	beq.n	800b798 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00a      	beq.n	800b798 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b786:	f043 0208 	orr.w	r2, r3, #8
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b796:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00f      	beq.n	800b7c2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00a      	beq.n	800b7c2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7b0:	f043 0202 	orr.w	r2, r3, #2
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b7c0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7c6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f003 030b 	and.w	r3, r3, #11
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800b7d2:	68f9      	ldr	r1, [r7, #12]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fbd5 	bl	800bf84 <I2C_ITError>
  }
}
 800b7da:	bf00      	nop
 800b7dc:	3718      	adds	r7, #24
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b7e2:	b480      	push	{r7}
 800b7e4:	b083      	sub	sp, #12
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b7ea:	bf00      	nop
 800b7ec:	370c      	adds	r7, #12
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b083      	sub	sp, #12
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b7fe:	bf00      	nop
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b083      	sub	sp, #12
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
 800b812:	460b      	mov	r3, r1
 800b814:	70fb      	strb	r3, [r7, #3]
 800b816:	4613      	mov	r3, r2
 800b818:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b81a:	bf00      	nop
 800b81c:	370c      	adds	r7, #12
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr

0800b826 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b826:	b480      	push	{r7}
 800b828:	b083      	sub	sp, #12
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b82e:	bf00      	nop
 800b830:	370c      	adds	r7, #12
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr

0800b83a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b83a:	b480      	push	{r7}
 800b83c:	b083      	sub	sp, #12
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b842:	bf00      	nop
 800b844:	370c      	adds	r7, #12
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr

0800b84e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b84e:	b480      	push	{r7}
 800b850:	b083      	sub	sp, #12
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b856:	bf00      	nop
 800b858:	370c      	adds	r7, #12
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr

0800b862 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b086      	sub	sp, #24
 800b866:	af00      	add	r7, sp, #0
 800b868:	60f8      	str	r0, [r7, #12]
 800b86a:	60b9      	str	r1, [r7, #8]
 800b86c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b872:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d101      	bne.n	800b886 <I2C_Slave_ISR_IT+0x24>
 800b882:	2302      	movs	r3, #2
 800b884:	e0e2      	b.n	800ba4c <I2C_Slave_ISR_IT+0x1ea>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2201      	movs	r2, #1
 800b88a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	f003 0320 	and.w	r3, r3, #32
 800b894:	2b00      	cmp	r3, #0
 800b896:	d009      	beq.n	800b8ac <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d004      	beq.n	800b8ac <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b8a2:	6939      	ldr	r1, [r7, #16]
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f000 f9b5 	bl	800bc14 <I2C_ITSlaveCplt>
 800b8aa:	e0ca      	b.n	800ba42 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	f003 0310 	and.w	r3, r3, #16
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d04b      	beq.n	800b94e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d046      	beq.n	800b94e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d128      	bne.n	800b91c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b28      	cmp	r3, #40	@ 0x28
 800b8d4:	d108      	bne.n	800b8e8 <I2C_Slave_ISR_IT+0x86>
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b8dc:	d104      	bne.n	800b8e8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b8de:	6939      	ldr	r1, [r7, #16]
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f000 fafb 	bl	800bedc <I2C_ITListenCplt>
 800b8e6:	e031      	b.n	800b94c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	2b29      	cmp	r3, #41	@ 0x29
 800b8f2:	d10e      	bne.n	800b912 <I2C_Slave_ISR_IT+0xb0>
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b8fa:	d00a      	beq.n	800b912 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2210      	movs	r2, #16
 800b902:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	f000 fc54 	bl	800c1b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	f000 f926 	bl	800bb5c <I2C_ITSlaveSeqCplt>
 800b910:	e01c      	b.n	800b94c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2210      	movs	r2, #16
 800b918:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800b91a:	e08f      	b.n	800ba3c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2210      	movs	r2, #16
 800b922:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b928:	f043 0204 	orr.w	r2, r3, #4
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d003      	beq.n	800b93e <I2C_Slave_ISR_IT+0xdc>
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b93c:	d17e      	bne.n	800ba3c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b942:	4619      	mov	r1, r3
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f000 fb1d 	bl	800bf84 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b94a:	e077      	b.n	800ba3c <I2C_Slave_ISR_IT+0x1da>
 800b94c:	e076      	b.n	800ba3c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	f003 0304 	and.w	r3, r3, #4
 800b954:	2b00      	cmp	r3, #0
 800b956:	d02f      	beq.n	800b9b8 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d02a      	beq.n	800b9b8 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b966:	b29b      	uxth	r3, r3
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d018      	beq.n	800b99e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b976:	b2d2      	uxtb	r2, r2
 800b978:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b97e:	1c5a      	adds	r2, r3, #1
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b988:	3b01      	subs	r3, #1
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b994:	b29b      	uxth	r3, r3
 800b996:	3b01      	subs	r3, #1
 800b998:	b29a      	uxth	r2, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d14b      	bne.n	800ba40 <I2C_Slave_ISR_IT+0x1de>
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b9ae:	d047      	beq.n	800ba40 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800b9b0:	68f8      	ldr	r0, [r7, #12]
 800b9b2:	f000 f8d3 	bl	800bb5c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800b9b6:	e043      	b.n	800ba40 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	f003 0308 	and.w	r3, r3, #8
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d009      	beq.n	800b9d6 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d004      	beq.n	800b9d6 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800b9cc:	6939      	ldr	r1, [r7, #16]
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f000 f840 	bl	800ba54 <I2C_ITAddrCplt>
 800b9d4:	e035      	b.n	800ba42 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	f003 0302 	and.w	r3, r3, #2
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d030      	beq.n	800ba42 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d02b      	beq.n	800ba42 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d018      	beq.n	800ba26 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9f8:	781a      	ldrb	r2, [r3, #0]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba04:	1c5a      	adds	r2, r3, #1
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	3b01      	subs	r3, #1
 800ba12:	b29a      	uxth	r2, r3
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ba24:	e00d      	b.n	800ba42 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba2c:	d002      	beq.n	800ba34 <I2C_Slave_ISR_IT+0x1d2>
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d106      	bne.n	800ba42 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f000 f891 	bl	800bb5c <I2C_ITSlaveSeqCplt>
 800ba3a:	e002      	b.n	800ba42 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800ba3c:	bf00      	nop
 800ba3e:	e000      	b.n	800ba42 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800ba40:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3718      	adds	r7, #24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ba6a:	2b28      	cmp	r3, #40	@ 0x28
 800ba6c:	d16a      	bne.n	800bb44 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	0c1b      	lsrs	r3, r3, #16
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	f003 0301 	and.w	r3, r3, #1
 800ba7c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	0c1b      	lsrs	r3, r3, #16
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800ba8c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba9a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800baa8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d138      	bne.n	800bb24 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800bab2:	897b      	ldrh	r3, [r7, #10]
 800bab4:	09db      	lsrs	r3, r3, #7
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	89bb      	ldrh	r3, [r7, #12]
 800baba:	4053      	eors	r3, r2
 800babc:	b29b      	uxth	r3, r3
 800babe:	f003 0306 	and.w	r3, r3, #6
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d11c      	bne.n	800bb00 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800bac6:	897b      	ldrh	r3, [r7, #10]
 800bac8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bace:	1c5a      	adds	r2, r3, #1
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bad8:	2b02      	cmp	r3, #2
 800bada:	d13b      	bne.n	800bb54 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2208      	movs	r2, #8
 800bae8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800baf2:	89ba      	ldrh	r2, [r7, #12]
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
 800baf6:	4619      	mov	r1, r3
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f7ff fe86 	bl	800b80a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800bafe:	e029      	b.n	800bb54 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800bb00:	893b      	ldrh	r3, [r7, #8]
 800bb02:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bb04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fe15 	bl	800c738 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bb16:	89ba      	ldrh	r2, [r7, #12]
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7ff fe74 	bl	800b80a <HAL_I2C_AddrCallback>
}
 800bb22:	e017      	b.n	800bb54 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800bb24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 fe05 	bl	800c738 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800bb36:	89ba      	ldrh	r2, [r7, #12]
 800bb38:	7bfb      	ldrb	r3, [r7, #15]
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f7ff fe64 	bl	800b80a <HAL_I2C_AddrCallback>
}
 800bb42:	e007      	b.n	800bb54 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2208      	movs	r2, #8
 800bb4a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800bb54:	bf00      	nop
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d008      	beq.n	800bb90 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bb8c:	601a      	str	r2, [r3, #0]
 800bb8e:	e00c      	b.n	800bbaa <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d007      	beq.n	800bbaa <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bba8:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b29      	cmp	r3, #41	@ 0x29
 800bbb4:	d112      	bne.n	800bbdc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2228      	movs	r2, #40	@ 0x28
 800bbba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2221      	movs	r2, #33	@ 0x21
 800bbc2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fdb6 	bl	800c738 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f7ff fe04 	bl	800b7e2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bbda:	e017      	b.n	800bc0c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbe6:	d111      	bne.n	800bc0c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2228      	movs	r2, #40	@ 0x28
 800bbec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2222      	movs	r2, #34	@ 0x22
 800bbf4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bbf6:	2102      	movs	r1, #2
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 fd9d 	bl	800c738 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f7ff fdf5 	bl	800b7f6 <HAL_I2C_SlaveRxCpltCallback>
}
 800bc0c:	bf00      	nop
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b086      	sub	sp, #24
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc36:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2220      	movs	r2, #32
 800bc3e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bc40:	7afb      	ldrb	r3, [r7, #11]
 800bc42:	2b21      	cmp	r3, #33	@ 0x21
 800bc44:	d002      	beq.n	800bc4c <I2C_ITSlaveCplt+0x38>
 800bc46:	7afb      	ldrb	r3, [r7, #11]
 800bc48:	2b29      	cmp	r3, #41	@ 0x29
 800bc4a:	d108      	bne.n	800bc5e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800bc4c:	f248 0101 	movw	r1, #32769	@ 0x8001
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 fd71 	bl	800c738 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2221      	movs	r2, #33	@ 0x21
 800bc5a:	631a      	str	r2, [r3, #48]	@ 0x30
 800bc5c:	e019      	b.n	800bc92 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bc5e:	7afb      	ldrb	r3, [r7, #11]
 800bc60:	2b22      	cmp	r3, #34	@ 0x22
 800bc62:	d002      	beq.n	800bc6a <I2C_ITSlaveCplt+0x56>
 800bc64:	7afb      	ldrb	r3, [r7, #11]
 800bc66:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc68:	d108      	bne.n	800bc7c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800bc6a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 fd62 	bl	800c738 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2222      	movs	r2, #34	@ 0x22
 800bc78:	631a      	str	r2, [r3, #48]	@ 0x30
 800bc7a:	e00a      	b.n	800bc92 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800bc7c:	7afb      	ldrb	r3, [r7, #11]
 800bc7e:	2b28      	cmp	r3, #40	@ 0x28
 800bc80:	d107      	bne.n	800bc92 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800bc82:	f248 0103 	movw	r1, #32771	@ 0x8003
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 fd56 	bl	800c738 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bca0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	6859      	ldr	r1, [r3, #4]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	4b89      	ldr	r3, [pc, #548]	@ (800bed4 <I2C_ITSlaveCplt+0x2c0>)
 800bcae:	400b      	ands	r3, r1
 800bcb0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 fa7d 	bl	800c1b2 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d013      	beq.n	800bcea <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bcd0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d01f      	beq.n	800bd1a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	b29a      	uxth	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bce8:	e017      	b.n	800bd1a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d012      	beq.n	800bd1a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bd02:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d006      	beq.n	800bd1a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	b29a      	uxth	r2, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	f003 0304 	and.w	r3, r3, #4
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d020      	beq.n	800bd66 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	f023 0304 	bic.w	r3, r3, #4
 800bd2a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd36:	b2d2      	uxtb	r2, r2
 800bd38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd3e:	1c5a      	adds	r2, r3, #1
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00c      	beq.n	800bd66 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd50:	3b01      	subs	r3, #1
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d005      	beq.n	800bd7c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd74:	f043 0204 	orr.w	r2, r3, #4
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	f003 0310 	and.w	r3, r3, #16
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d049      	beq.n	800be1a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d044      	beq.n	800be1a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d128      	bne.n	800bdec <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	2b28      	cmp	r3, #40	@ 0x28
 800bda4:	d108      	bne.n	800bdb8 <I2C_ITSlaveCplt+0x1a4>
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bdac:	d104      	bne.n	800bdb8 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800bdae:	6979      	ldr	r1, [r7, #20]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 f893 	bl	800bedc <I2C_ITListenCplt>
 800bdb6:	e030      	b.n	800be1a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	2b29      	cmp	r3, #41	@ 0x29
 800bdc2:	d10e      	bne.n	800bde2 <I2C_ITSlaveCplt+0x1ce>
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bdca:	d00a      	beq.n	800bde2 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2210      	movs	r2, #16
 800bdd2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 f9ec 	bl	800c1b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f7ff febe 	bl	800bb5c <I2C_ITSlaveSeqCplt>
 800bde0:	e01b      	b.n	800be1a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2210      	movs	r2, #16
 800bde8:	61da      	str	r2, [r3, #28]
 800bdea:	e016      	b.n	800be1a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2210      	movs	r2, #16
 800bdf2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdf8:	f043 0204 	orr.w	r2, r3, #4
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d003      	beq.n	800be0e <I2C_ITSlaveCplt+0x1fa>
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be0c:	d105      	bne.n	800be1a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be12:	4619      	mov	r1, r3
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 f8b5 	bl	800bf84 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2200      	movs	r2, #0
 800be1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d010      	beq.n	800be52 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be34:	4619      	mov	r1, r3
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f8a4 	bl	800bf84 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be42:	b2db      	uxtb	r3, r3
 800be44:	2b28      	cmp	r3, #40	@ 0x28
 800be46:	d141      	bne.n	800becc <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800be48:	6979      	ldr	r1, [r7, #20]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 f846 	bl	800bedc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800be50:	e03c      	b.n	800becc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be56:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800be5a:	d014      	beq.n	800be86 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f7ff fe7d 	bl	800bb5c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4a1c      	ldr	r2, [pc, #112]	@ (800bed8 <I2C_ITSlaveCplt+0x2c4>)
 800be66:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2220      	movs	r2, #32
 800be6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f7ff fcd1 	bl	800b826 <HAL_I2C_ListenCpltCallback>
}
 800be84:	e022      	b.n	800becc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	2b22      	cmp	r3, #34	@ 0x22
 800be90:	d10e      	bne.n	800beb0 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2220      	movs	r2, #32
 800be96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f7ff fca4 	bl	800b7f6 <HAL_I2C_SlaveRxCpltCallback>
}
 800beae:	e00d      	b.n	800becc <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2220      	movs	r2, #32
 800beb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7ff fc8b 	bl	800b7e2 <HAL_I2C_SlaveTxCpltCallback>
}
 800becc:	bf00      	nop
 800bece:	3718      	adds	r7, #24
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	fe00e800 	.word	0xfe00e800
 800bed8:	ffff0000 	.word	0xffff0000

0800bedc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4a25      	ldr	r2, [pc, #148]	@ (800bf80 <I2C_ITListenCplt+0xa4>)
 800beea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2220      	movs	r2, #32
 800bef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	f003 0304 	and.w	r3, r3, #4
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d022      	beq.n	800bf58 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf1c:	b2d2      	uxtb	r2, r2
 800bf1e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf24:	1c5a      	adds	r2, r3, #1
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d012      	beq.n	800bf58 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf36:	3b01      	subs	r3, #1
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	3b01      	subs	r3, #1
 800bf46:	b29a      	uxth	r2, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf50:	f043 0204 	orr.w	r2, r3, #4
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bf58:	f248 0103 	movw	r1, #32771	@ 0x8003
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fbeb 	bl	800c738 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2210      	movs	r2, #16
 800bf68:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7ff fc57 	bl	800b826 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800bf78:	bf00      	nop
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	ffff0000 	.word	0xffff0000

0800bf84 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bf94:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	4a6d      	ldr	r2, [pc, #436]	@ (800c158 <I2C_ITError+0x1d4>)
 800bfa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	431a      	orrs	r2, r3
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800bfb6:	7bfb      	ldrb	r3, [r7, #15]
 800bfb8:	2b28      	cmp	r3, #40	@ 0x28
 800bfba:	d005      	beq.n	800bfc8 <I2C_ITError+0x44>
 800bfbc:	7bfb      	ldrb	r3, [r7, #15]
 800bfbe:	2b29      	cmp	r3, #41	@ 0x29
 800bfc0:	d002      	beq.n	800bfc8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
 800bfc4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfc6:	d10b      	bne.n	800bfe0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bfc8:	2103      	movs	r1, #3
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fbb4 	bl	800c738 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2228      	movs	r2, #40	@ 0x28
 800bfd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4a60      	ldr	r2, [pc, #384]	@ (800c15c <I2C_ITError+0x1d8>)
 800bfdc:	635a      	str	r2, [r3, #52]	@ 0x34
 800bfde:	e030      	b.n	800c042 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bfe0:	f248 0103 	movw	r1, #32771	@ 0x8003
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 fba7 	bl	800c738 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 f8e1 	bl	800c1b2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	2b60      	cmp	r3, #96	@ 0x60
 800bffa:	d01f      	beq.n	800c03c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2220      	movs	r2, #32
 800c000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	699b      	ldr	r3, [r3, #24]
 800c00a:	f003 0320 	and.w	r3, r3, #32
 800c00e:	2b20      	cmp	r3, #32
 800c010:	d114      	bne.n	800c03c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	699b      	ldr	r3, [r3, #24]
 800c018:	f003 0310 	and.w	r3, r3, #16
 800c01c:	2b10      	cmp	r3, #16
 800c01e:	d109      	bne.n	800c034 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2210      	movs	r2, #16
 800c026:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c02c:	f043 0204 	orr.w	r2, r3, #4
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2220      	movs	r2, #32
 800c03a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c046:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d039      	beq.n	800c0c4 <I2C_ITError+0x140>
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	2b11      	cmp	r3, #17
 800c054:	d002      	beq.n	800c05c <I2C_ITError+0xd8>
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	2b21      	cmp	r3, #33	@ 0x21
 800c05a:	d133      	bne.n	800c0c4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c066:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c06a:	d107      	bne.n	800c07c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c07a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c080:	4618      	mov	r0, r3
 800c082:	f7fe fe1a 	bl	800acba <HAL_DMA_GetState>
 800c086:	4603      	mov	r3, r0
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d017      	beq.n	800c0bc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c090:	4a33      	ldr	r2, [pc, #204]	@ (800c160 <I2C_ITError+0x1dc>)
 800c092:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7fe fcfc 	bl	800aa9e <HAL_DMA_Abort_IT>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d04d      	beq.n	800c148 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c0b6:	4610      	mov	r0, r2
 800c0b8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c0ba:	e045      	b.n	800c148 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 f851 	bl	800c164 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c0c2:	e041      	b.n	800c148 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d039      	beq.n	800c140 <I2C_ITError+0x1bc>
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	2b12      	cmp	r3, #18
 800c0d0:	d002      	beq.n	800c0d8 <I2C_ITError+0x154>
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	2b22      	cmp	r3, #34	@ 0x22
 800c0d6:	d133      	bne.n	800c140 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c0e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c0e6:	d107      	bne.n	800c0f8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c0f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7fe fddc 	bl	800acba <HAL_DMA_GetState>
 800c102:	4603      	mov	r3, r0
 800c104:	2b01      	cmp	r3, #1
 800c106:	d017      	beq.n	800c138 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c10c:	4a14      	ldr	r2, [pc, #80]	@ (800c160 <I2C_ITError+0x1dc>)
 800c10e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fe fcbe 	bl	800aa9e <HAL_DMA_Abort_IT>
 800c122:	4603      	mov	r3, r0
 800c124:	2b00      	cmp	r3, #0
 800c126:	d011      	beq.n	800c14c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c132:	4610      	mov	r0, r2
 800c134:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c136:	e009      	b.n	800c14c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 f813 	bl	800c164 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c13e:	e005      	b.n	800c14c <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 f80f 	bl	800c164 <I2C_TreatErrorCallback>
  }
}
 800c146:	e002      	b.n	800c14e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c148:	bf00      	nop
 800c14a:	e000      	b.n	800c14e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c14c:	bf00      	nop
}
 800c14e:	bf00      	nop
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	ffff0000 	.word	0xffff0000
 800c15c:	0800b863 	.word	0x0800b863
 800c160:	0800c1fb 	.word	0x0800c1fb

0800c164 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c172:	b2db      	uxtb	r3, r3
 800c174:	2b60      	cmp	r3, #96	@ 0x60
 800c176:	d10e      	bne.n	800c196 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2220      	movs	r2, #32
 800c17c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f7ff fb5d 	bl	800b84e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c194:	e009      	b.n	800c1aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f7ff fb48 	bl	800b83a <HAL_I2C_ErrorCallback>
}
 800c1aa:	bf00      	nop
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c1b2:	b480      	push	{r7}
 800c1b4:	b083      	sub	sp, #12
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	699b      	ldr	r3, [r3, #24]
 800c1c0:	f003 0302 	and.w	r3, r3, #2
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	d103      	bne.n	800c1d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	699b      	ldr	r3, [r3, #24]
 800c1d6:	f003 0301 	and.w	r3, r3, #1
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d007      	beq.n	800c1ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	699a      	ldr	r2, [r3, #24]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f042 0201 	orr.w	r2, r2, #1
 800c1ec:	619a      	str	r2, [r3, #24]
  }
}
 800c1ee:	bf00      	nop
 800c1f0:	370c      	adds	r7, #12
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr

0800c1fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b084      	sub	sp, #16
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c206:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d003      	beq.n	800c218 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c214:	2200      	movs	r2, #0
 800c216:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d003      	beq.n	800c228 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c224:	2200      	movs	r2, #0
 800c226:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	f7ff ff9b 	bl	800c164 <I2C_TreatErrorCallback>
}
 800c22e:	bf00      	nop
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b084      	sub	sp, #16
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	60f8      	str	r0, [r7, #12]
 800c23e:	60b9      	str	r1, [r7, #8]
 800c240:	603b      	str	r3, [r7, #0]
 800c242:	4613      	mov	r3, r2
 800c244:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c246:	e03b      	b.n	800c2c0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c248:	69ba      	ldr	r2, [r7, #24]
 800c24a:	6839      	ldr	r1, [r7, #0]
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f000 f961 	bl	800c514 <I2C_IsErrorOccurred>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d001      	beq.n	800c25c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800c258:	2301      	movs	r3, #1
 800c25a:	e041      	b.n	800c2e0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c262:	d02d      	beq.n	800c2c0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c264:	f7fc ff10 	bl	8009088 <HAL_GetTick>
 800c268:	4602      	mov	r2, r0
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	1ad3      	subs	r3, r2, r3
 800c26e:	683a      	ldr	r2, [r7, #0]
 800c270:	429a      	cmp	r2, r3
 800c272:	d302      	bcc.n	800c27a <I2C_WaitOnFlagUntilTimeout+0x44>
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d122      	bne.n	800c2c0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	699a      	ldr	r2, [r3, #24]
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	4013      	ands	r3, r2
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	429a      	cmp	r2, r3
 800c288:	bf0c      	ite	eq
 800c28a:	2301      	moveq	r3, #1
 800c28c:	2300      	movne	r3, #0
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	461a      	mov	r2, r3
 800c292:	79fb      	ldrb	r3, [r7, #7]
 800c294:	429a      	cmp	r2, r3
 800c296:	d113      	bne.n	800c2c0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c29c:	f043 0220 	orr.w	r2, r3, #32
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2220      	movs	r2, #32
 800c2a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	e00f      	b.n	800c2e0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	699a      	ldr	r2, [r3, #24]
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	4013      	ands	r3, r2
 800c2ca:	68ba      	ldr	r2, [r7, #8]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	bf0c      	ite	eq
 800c2d0:	2301      	moveq	r3, #1
 800c2d2:	2300      	movne	r3, #0
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	79fb      	ldrb	r3, [r7, #7]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d0b4      	beq.n	800c248 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c2de:	2300      	movs	r3, #0
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3710      	adds	r7, #16
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c2f4:	e033      	b.n	800c35e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	68b9      	ldr	r1, [r7, #8]
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	f000 f90a 	bl	800c514 <I2C_IsErrorOccurred>
 800c300:	4603      	mov	r3, r0
 800c302:	2b00      	cmp	r3, #0
 800c304:	d001      	beq.n	800c30a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	e031      	b.n	800c36e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c310:	d025      	beq.n	800c35e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c312:	f7fc feb9 	bl	8009088 <HAL_GetTick>
 800c316:	4602      	mov	r2, r0
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	1ad3      	subs	r3, r2, r3
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d302      	bcc.n	800c328 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d11a      	bne.n	800c35e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	699b      	ldr	r3, [r3, #24]
 800c32e:	f003 0302 	and.w	r3, r3, #2
 800c332:	2b02      	cmp	r3, #2
 800c334:	d013      	beq.n	800c35e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c33a:	f043 0220 	orr.w	r2, r3, #32
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2220      	movs	r2, #32
 800c346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2200      	movs	r2, #0
 800c34e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2200      	movs	r2, #0
 800c356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800c35a:	2301      	movs	r3, #1
 800c35c:	e007      	b.n	800c36e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	699b      	ldr	r3, [r3, #24]
 800c364:	f003 0302 	and.w	r3, r3, #2
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d1c4      	bne.n	800c2f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b084      	sub	sp, #16
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	60b9      	str	r1, [r7, #8]
 800c380:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c382:	e02f      	b.n	800c3e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	68b9      	ldr	r1, [r7, #8]
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f000 f8c3 	bl	800c514 <I2C_IsErrorOccurred>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d001      	beq.n	800c398 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	e02d      	b.n	800c3f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c398:	f7fc fe76 	bl	8009088 <HAL_GetTick>
 800c39c:	4602      	mov	r2, r0
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	68ba      	ldr	r2, [r7, #8]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d302      	bcc.n	800c3ae <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d11a      	bne.n	800c3e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	699b      	ldr	r3, [r3, #24]
 800c3b4:	f003 0320 	and.w	r3, r3, #32
 800c3b8:	2b20      	cmp	r3, #32
 800c3ba:	d013      	beq.n	800c3e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3c0:	f043 0220 	orr.w	r2, r3, #32
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2220      	movs	r2, #32
 800c3cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e007      	b.n	800c3f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	699b      	ldr	r3, [r3, #24]
 800c3ea:	f003 0320 	and.w	r3, r3, #32
 800c3ee:	2b20      	cmp	r3, #32
 800c3f0:	d1c8      	bne.n	800c384 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b086      	sub	sp, #24
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c408:	2300      	movs	r3, #0
 800c40a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800c40c:	e071      	b.n	800c4f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	68b9      	ldr	r1, [r7, #8]
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	f000 f87e 	bl	800c514 <I2C_IsErrorOccurred>
 800c418:	4603      	mov	r3, r0
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d001      	beq.n	800c422 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	699b      	ldr	r3, [r3, #24]
 800c428:	f003 0320 	and.w	r3, r3, #32
 800c42c:	2b20      	cmp	r3, #32
 800c42e:	d13b      	bne.n	800c4a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800c430:	7dfb      	ldrb	r3, [r7, #23]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d138      	bne.n	800c4a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	699b      	ldr	r3, [r3, #24]
 800c43c:	f003 0304 	and.w	r3, r3, #4
 800c440:	2b04      	cmp	r3, #4
 800c442:	d105      	bne.n	800c450 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d001      	beq.n	800c450 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800c44c:	2300      	movs	r3, #0
 800c44e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	699b      	ldr	r3, [r3, #24]
 800c456:	f003 0310 	and.w	r3, r3, #16
 800c45a:	2b10      	cmp	r3, #16
 800c45c:	d121      	bne.n	800c4a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2210      	movs	r2, #16
 800c464:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2204      	movs	r2, #4
 800c46a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2220      	movs	r2, #32
 800c472:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	6859      	ldr	r1, [r3, #4]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	4b24      	ldr	r3, [pc, #144]	@ (800c510 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800c480:	400b      	ands	r3, r1
 800c482:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2220      	movs	r2, #32
 800c488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2200      	movs	r2, #0
 800c490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2200      	movs	r2, #0
 800c498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800c49c:	2301      	movs	r3, #1
 800c49e:	75fb      	strb	r3, [r7, #23]
 800c4a0:	e002      	b.n	800c4a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800c4a8:	f7fc fdee 	bl	8009088 <HAL_GetTick>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	1ad3      	subs	r3, r2, r3
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d302      	bcc.n	800c4be <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d119      	bne.n	800c4f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800c4be:	7dfb      	ldrb	r3, [r7, #23]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d116      	bne.n	800c4f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	699b      	ldr	r3, [r3, #24]
 800c4ca:	f003 0304 	and.w	r3, r3, #4
 800c4ce:	2b04      	cmp	r3, #4
 800c4d0:	d00f      	beq.n	800c4f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4d6:	f043 0220 	orr.w	r2, r3, #32
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2220      	movs	r2, #32
 800c4e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	f003 0304 	and.w	r3, r3, #4
 800c4fc:	2b04      	cmp	r3, #4
 800c4fe:	d002      	beq.n	800c506 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800c500:	7dfb      	ldrb	r3, [r7, #23]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d083      	beq.n	800c40e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800c506:	7dfb      	ldrb	r3, [r7, #23]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3718      	adds	r7, #24
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	fe00e800 	.word	0xfe00e800

0800c514 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b08a      	sub	sp, #40	@ 0x28
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c520:	2300      	movs	r3, #0
 800c522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	699b      	ldr	r3, [r3, #24]
 800c52c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c52e:	2300      	movs	r3, #0
 800c530:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	f003 0310 	and.w	r3, r3, #16
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d068      	beq.n	800c612 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2210      	movs	r2, #16
 800c546:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c548:	e049      	b.n	800c5de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c550:	d045      	beq.n	800c5de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c552:	f7fc fd99 	bl	8009088 <HAL_GetTick>
 800c556:	4602      	mov	r2, r0
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	1ad3      	subs	r3, r2, r3
 800c55c:	68ba      	ldr	r2, [r7, #8]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d302      	bcc.n	800c568 <I2C_IsErrorOccurred+0x54>
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d13a      	bne.n	800c5de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c572:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c57a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	699b      	ldr	r3, [r3, #24]
 800c582:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c58a:	d121      	bne.n	800c5d0 <I2C_IsErrorOccurred+0xbc>
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c592:	d01d      	beq.n	800c5d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c594:	7cfb      	ldrb	r3, [r7, #19]
 800c596:	2b20      	cmp	r3, #32
 800c598:	d01a      	beq.n	800c5d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	685a      	ldr	r2, [r3, #4]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c5a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c5aa:	f7fc fd6d 	bl	8009088 <HAL_GetTick>
 800c5ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c5b0:	e00e      	b.n	800c5d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c5b2:	f7fc fd69 	bl	8009088 <HAL_GetTick>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	1ad3      	subs	r3, r2, r3
 800c5bc:	2b19      	cmp	r3, #25
 800c5be:	d907      	bls.n	800c5d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c5c0:	6a3b      	ldr	r3, [r7, #32]
 800c5c2:	f043 0320 	orr.w	r3, r3, #32
 800c5c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800c5ce:	e006      	b.n	800c5de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	699b      	ldr	r3, [r3, #24]
 800c5d6:	f003 0320 	and.w	r3, r3, #32
 800c5da:	2b20      	cmp	r3, #32
 800c5dc:	d1e9      	bne.n	800c5b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	699b      	ldr	r3, [r3, #24]
 800c5e4:	f003 0320 	and.w	r3, r3, #32
 800c5e8:	2b20      	cmp	r3, #32
 800c5ea:	d003      	beq.n	800c5f4 <I2C_IsErrorOccurred+0xe0>
 800c5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d0aa      	beq.n	800c54a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c5f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d103      	bne.n	800c604 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2220      	movs	r2, #32
 800c602:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c604:	6a3b      	ldr	r3, [r7, #32]
 800c606:	f043 0304 	orr.w	r3, r3, #4
 800c60a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c60c:	2301      	movs	r3, #1
 800c60e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	699b      	ldr	r3, [r3, #24]
 800c618:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c61a:	69bb      	ldr	r3, [r7, #24]
 800c61c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c620:	2b00      	cmp	r3, #0
 800c622:	d00b      	beq.n	800c63c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c624:	6a3b      	ldr	r3, [r7, #32]
 800c626:	f043 0301 	orr.w	r3, r3, #1
 800c62a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c634:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c636:	2301      	movs	r3, #1
 800c638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c63c:	69bb      	ldr	r3, [r7, #24]
 800c63e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00b      	beq.n	800c65e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c646:	6a3b      	ldr	r3, [r7, #32]
 800c648:	f043 0308 	orr.w	r3, r3, #8
 800c64c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c656:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c65e:	69bb      	ldr	r3, [r7, #24]
 800c660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00b      	beq.n	800c680 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c668:	6a3b      	ldr	r3, [r7, #32]
 800c66a:	f043 0302 	orr.w	r3, r3, #2
 800c66e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c678:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c67a:	2301      	movs	r3, #1
 800c67c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800c680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c684:	2b00      	cmp	r3, #0
 800c686:	d01c      	beq.n	800c6c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c688:	68f8      	ldr	r0, [r7, #12]
 800c68a:	f7ff fd92 	bl	800c1b2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	6859      	ldr	r1, [r3, #4]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	4b0d      	ldr	r3, [pc, #52]	@ (800c6d0 <I2C_IsErrorOccurred+0x1bc>)
 800c69a:	400b      	ands	r3, r1
 800c69c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c6a2:	6a3b      	ldr	r3, [r7, #32]
 800c6a4:	431a      	orrs	r2, r3
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2220      	movs	r2, #32
 800c6ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800c6c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3728      	adds	r7, #40	@ 0x28
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	fe00e800 	.word	0xfe00e800

0800c6d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b087      	sub	sp, #28
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	607b      	str	r3, [r7, #4]
 800c6de:	460b      	mov	r3, r1
 800c6e0:	817b      	strh	r3, [r7, #10]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c6e6:	897b      	ldrh	r3, [r7, #10]
 800c6e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c6ec:	7a7b      	ldrb	r3, [r7, #9]
 800c6ee:	041b      	lsls	r3, r3, #16
 800c6f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c6f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c6fa:	6a3b      	ldr	r3, [r7, #32]
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c702:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	685a      	ldr	r2, [r3, #4]
 800c70a:	6a3b      	ldr	r3, [r7, #32]
 800c70c:	0d5b      	lsrs	r3, r3, #21
 800c70e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800c712:	4b08      	ldr	r3, [pc, #32]	@ (800c734 <I2C_TransferConfig+0x60>)
 800c714:	430b      	orrs	r3, r1
 800c716:	43db      	mvns	r3, r3
 800c718:	ea02 0103 	and.w	r1, r2, r3
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	697a      	ldr	r2, [r7, #20]
 800c722:	430a      	orrs	r2, r1
 800c724:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c726:	bf00      	nop
 800c728:	371c      	adds	r7, #28
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr
 800c732:	bf00      	nop
 800c734:	03ff63ff 	.word	0x03ff63ff

0800c738 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c738:	b480      	push	{r7}
 800c73a:	b085      	sub	sp, #20
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	460b      	mov	r3, r1
 800c742:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800c744:	2300      	movs	r3, #0
 800c746:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c748:	887b      	ldrh	r3, [r7, #2]
 800c74a:	f003 0301 	and.w	r3, r3, #1
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00f      	beq.n	800c772 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800c758:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c760:	b2db      	uxtb	r3, r3
 800c762:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c766:	2b28      	cmp	r3, #40	@ 0x28
 800c768:	d003      	beq.n	800c772 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800c770:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c772:	887b      	ldrh	r3, [r7, #2]
 800c774:	f003 0302 	and.w	r3, r3, #2
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d00f      	beq.n	800c79c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800c782:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c790:	2b28      	cmp	r3, #40	@ 0x28
 800c792:	d003      	beq.n	800c79c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800c79a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c79c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	da03      	bge.n	800c7ac <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800c7aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c7ac:	887b      	ldrh	r3, [r7, #2]
 800c7ae:	2b10      	cmp	r3, #16
 800c7b0:	d103      	bne.n	800c7ba <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800c7b8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c7ba:	887b      	ldrh	r3, [r7, #2]
 800c7bc:	2b20      	cmp	r3, #32
 800c7be:	d103      	bne.n	800c7c8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f043 0320 	orr.w	r3, r3, #32
 800c7c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c7c8:	887b      	ldrh	r3, [r7, #2]
 800c7ca:	2b40      	cmp	r3, #64	@ 0x40
 800c7cc:	d103      	bne.n	800c7d6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7d4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	6819      	ldr	r1, [r3, #0]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	43da      	mvns	r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	400a      	ands	r2, r1
 800c7e6:	601a      	str	r2, [r3, #0]
}
 800c7e8:	bf00      	nop
 800c7ea:	3714      	adds	r7, #20
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c804:	b2db      	uxtb	r3, r3
 800c806:	2b20      	cmp	r3, #32
 800c808:	d138      	bne.n	800c87c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c810:	2b01      	cmp	r3, #1
 800c812:	d101      	bne.n	800c818 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c814:	2302      	movs	r3, #2
 800c816:	e032      	b.n	800c87e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2224      	movs	r2, #36	@ 0x24
 800c824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f022 0201 	bic.w	r2, r2, #1
 800c836:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c846:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6819      	ldr	r1, [r3, #0]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	683a      	ldr	r2, [r7, #0]
 800c854:	430a      	orrs	r2, r1
 800c856:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f042 0201 	orr.w	r2, r2, #1
 800c866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2220      	movs	r2, #32
 800c86c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c878:	2300      	movs	r3, #0
 800c87a:	e000      	b.n	800c87e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c87c:	2302      	movs	r3, #2
  }
}
 800c87e:	4618      	mov	r0, r3
 800c880:	370c      	adds	r7, #12
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr

0800c88a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c88a:	b480      	push	{r7}
 800c88c:	b085      	sub	sp, #20
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	2b20      	cmp	r3, #32
 800c89e:	d139      	bne.n	800c914 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d101      	bne.n	800c8ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c8aa:	2302      	movs	r3, #2
 800c8ac:	e033      	b.n	800c916 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2224      	movs	r2, #36	@ 0x24
 800c8ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f022 0201 	bic.w	r2, r2, #1
 800c8cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c8dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	021b      	lsls	r3, r3, #8
 800c8e2:	68fa      	ldr	r2, [r7, #12]
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f042 0201 	orr.w	r2, r2, #1
 800c8fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2220      	movs	r2, #32
 800c904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c910:	2300      	movs	r3, #0
 800c912:	e000      	b.n	800c916 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c914:	2302      	movs	r3, #2
  }
}
 800c916:	4618      	mov	r0, r3
 800c918:	3714      	adds	r7, #20
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr

0800c922 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b084      	sub	sp, #16
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d101      	bne.n	800c934 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c930:	2301      	movs	r3, #1
 800c932:	e0c0      	b.n	800cab6 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d106      	bne.n	800c94e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f009 f9a9 	bl	8015ca0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2203      	movs	r2, #3
 800c952:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4618      	mov	r0, r3
 800c95c:	f004 fc7e 	bl	801125c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c960:	2300      	movs	r3, #0
 800c962:	73fb      	strb	r3, [r7, #15]
 800c964:	e03e      	b.n	800c9e4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c966:	7bfa      	ldrb	r2, [r7, #15]
 800c968:	6879      	ldr	r1, [r7, #4]
 800c96a:	4613      	mov	r3, r2
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	4413      	add	r3, r2
 800c970:	00db      	lsls	r3, r3, #3
 800c972:	440b      	add	r3, r1
 800c974:	3311      	adds	r3, #17
 800c976:	2201      	movs	r2, #1
 800c978:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c97a:	7bfa      	ldrb	r2, [r7, #15]
 800c97c:	6879      	ldr	r1, [r7, #4]
 800c97e:	4613      	mov	r3, r2
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	4413      	add	r3, r2
 800c984:	00db      	lsls	r3, r3, #3
 800c986:	440b      	add	r3, r1
 800c988:	3310      	adds	r3, #16
 800c98a:	7bfa      	ldrb	r2, [r7, #15]
 800c98c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c98e:	7bfa      	ldrb	r2, [r7, #15]
 800c990:	6879      	ldr	r1, [r7, #4]
 800c992:	4613      	mov	r3, r2
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	4413      	add	r3, r2
 800c998:	00db      	lsls	r3, r3, #3
 800c99a:	440b      	add	r3, r1
 800c99c:	3313      	adds	r3, #19
 800c99e:	2200      	movs	r2, #0
 800c9a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c9a2:	7bfa      	ldrb	r2, [r7, #15]
 800c9a4:	6879      	ldr	r1, [r7, #4]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	4413      	add	r3, r2
 800c9ac:	00db      	lsls	r3, r3, #3
 800c9ae:	440b      	add	r3, r1
 800c9b0:	3320      	adds	r3, #32
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c9b6:	7bfa      	ldrb	r2, [r7, #15]
 800c9b8:	6879      	ldr	r1, [r7, #4]
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	4413      	add	r3, r2
 800c9c0:	00db      	lsls	r3, r3, #3
 800c9c2:	440b      	add	r3, r1
 800c9c4:	3324      	adds	r3, #36	@ 0x24
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c9ca:	7bfb      	ldrb	r3, [r7, #15]
 800c9cc:	6879      	ldr	r1, [r7, #4]
 800c9ce:	1c5a      	adds	r2, r3, #1
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	4413      	add	r3, r2
 800c9d6:	00db      	lsls	r3, r3, #3
 800c9d8:	440b      	add	r3, r1
 800c9da:	2200      	movs	r2, #0
 800c9dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	73fb      	strb	r3, [r7, #15]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	791b      	ldrb	r3, [r3, #4]
 800c9e8:	7bfa      	ldrb	r2, [r7, #15]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d3bb      	bcc.n	800c966 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	73fb      	strb	r3, [r7, #15]
 800c9f2:	e044      	b.n	800ca7e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c9f4:	7bfa      	ldrb	r2, [r7, #15]
 800c9f6:	6879      	ldr	r1, [r7, #4]
 800c9f8:	4613      	mov	r3, r2
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	4413      	add	r3, r2
 800c9fe:	00db      	lsls	r3, r3, #3
 800ca00:	440b      	add	r3, r1
 800ca02:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800ca06:	2200      	movs	r2, #0
 800ca08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ca0a:	7bfa      	ldrb	r2, [r7, #15]
 800ca0c:	6879      	ldr	r1, [r7, #4]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	00db      	lsls	r3, r3, #3
 800ca16:	440b      	add	r3, r1
 800ca18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ca1c:	7bfa      	ldrb	r2, [r7, #15]
 800ca1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ca20:	7bfa      	ldrb	r2, [r7, #15]
 800ca22:	6879      	ldr	r1, [r7, #4]
 800ca24:	4613      	mov	r3, r2
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	4413      	add	r3, r2
 800ca2a:	00db      	lsls	r3, r3, #3
 800ca2c:	440b      	add	r3, r1
 800ca2e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800ca32:	2200      	movs	r2, #0
 800ca34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ca36:	7bfa      	ldrb	r2, [r7, #15]
 800ca38:	6879      	ldr	r1, [r7, #4]
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	4413      	add	r3, r2
 800ca40:	00db      	lsls	r3, r3, #3
 800ca42:	440b      	add	r3, r1
 800ca44:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800ca48:	2200      	movs	r2, #0
 800ca4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ca4c:	7bfa      	ldrb	r2, [r7, #15]
 800ca4e:	6879      	ldr	r1, [r7, #4]
 800ca50:	4613      	mov	r3, r2
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	4413      	add	r3, r2
 800ca56:	00db      	lsls	r3, r3, #3
 800ca58:	440b      	add	r3, r1
 800ca5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ca62:	7bfa      	ldrb	r2, [r7, #15]
 800ca64:	6879      	ldr	r1, [r7, #4]
 800ca66:	4613      	mov	r3, r2
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	4413      	add	r3, r2
 800ca6c:	00db      	lsls	r3, r3, #3
 800ca6e:	440b      	add	r3, r1
 800ca70:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800ca74:	2200      	movs	r2, #0
 800ca76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca78:	7bfb      	ldrb	r3, [r7, #15]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	73fb      	strb	r3, [r7, #15]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	791b      	ldrb	r3, [r3, #4]
 800ca82:	7bfa      	ldrb	r2, [r7, #15]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d3b5      	bcc.n	800c9f4 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6818      	ldr	r0, [r3, #0]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	3304      	adds	r3, #4
 800ca90:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ca94:	f004 fbfd 	bl	8011292 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2201      	movs	r2, #1
 800caa2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	7a9b      	ldrb	r3, [r3, #10]
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d102      	bne.n	800cab4 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f001 fc40 	bl	800e334 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b082      	sub	sp, #8
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d101      	bne.n	800cad4 <HAL_PCD_Start+0x16>
 800cad0:	2302      	movs	r3, #2
 800cad2:	e012      	b.n	800cafa <HAL_PCD_Start+0x3c>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2201      	movs	r2, #1
 800cad8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4618      	mov	r0, r3
 800cae2:	f004 fba4 	bl	801122e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4618      	mov	r0, r3
 800caec:	f006 fe65 	bl	80137ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b084      	sub	sp, #16
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f006 fe6a 	bl	80137e8 <USB_ReadInterrupts>
 800cb14:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d003      	beq.n	800cb28 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 fb04 	bl	800d12e <PCD_EP_ISR_Handler>

    return;
 800cb26:	e110      	b.n	800cd4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d013      	beq.n	800cb5a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cb44:	b292      	uxth	r2, r2
 800cb46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f009 f93d 	bl	8015dca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800cb50:	2100      	movs	r1, #0
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 f8fc 	bl	800cd50 <HAL_PCD_SetAddress>

    return;
 800cb58:	e0f7      	b.n	800cd4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00c      	beq.n	800cb7e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cb6c:	b29a      	uxth	r2, r3
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cb76:	b292      	uxth	r2, r2
 800cb78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800cb7c:	e0e5      	b.n	800cd4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00c      	beq.n	800cba2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cb9a:	b292      	uxth	r2, r2
 800cb9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800cba0:	e0d3      	b.n	800cd4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d034      	beq.n	800cc16 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f022 0204 	bic.w	r2, r2, #4
 800cbbe:	b292      	uxth	r2, r2
 800cbc0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f022 0208 	bic.w	r2, r2, #8
 800cbd6:	b292      	uxth	r2, r2
 800cbd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d107      	bne.n	800cbf6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cbee:	2100      	movs	r1, #0
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f009 fadf 	bl	80161b4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f009 f920 	bl	8015e3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cc04:	b29a      	uxth	r2, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cc0e:	b292      	uxth	r2, r2
 800cc10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800cc14:	e099      	b.n	800cd4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d027      	beq.n	800cc70 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cc28:	b29a      	uxth	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f042 0208 	orr.w	r2, r2, #8
 800cc32:	b292      	uxth	r2, r2
 800cc34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cc40:	b29a      	uxth	r2, r3
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cc4a:	b292      	uxth	r2, r2
 800cc4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f042 0204 	orr.w	r2, r2, #4
 800cc62:	b292      	uxth	r2, r2
 800cc64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f009 f8cd 	bl	8015e08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800cc6e:	e06c      	b.n	800cd4a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d040      	beq.n	800ccfc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cc82:	b29a      	uxth	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc8c:	b292      	uxth	r2, r2
 800cc8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d12b      	bne.n	800ccf4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f042 0204 	orr.w	r2, r2, #4
 800ccae:	b292      	uxth	r2, r2
 800ccb0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f042 0208 	orr.w	r2, r2, #8
 800ccc6:	b292      	uxth	r2, r2
 800ccc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	089b      	lsrs	r3, r3, #2
 800cce0:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800ccea:	2101      	movs	r1, #1
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f009 fa61 	bl	80161b4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800ccf2:	e02a      	b.n	800cd4a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f009 f887 	bl	8015e08 <HAL_PCD_SuspendCallback>
    return;
 800ccfa:	e026      	b.n	800cd4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d00f      	beq.n	800cd26 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cd0e:	b29a      	uxth	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800cd18:	b292      	uxth	r2, r2
 800cd1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f009 f845 	bl	8015dae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800cd24:	e011      	b.n	800cd4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d00c      	beq.n	800cd4a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cd38:	b29a      	uxth	r2, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd42:	b292      	uxth	r2, r2
 800cd44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800cd48:	bf00      	nop
  }
}
 800cd4a:	3710      	adds	r7, #16
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	460b      	mov	r3, r1
 800cd5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d101      	bne.n	800cd6a <HAL_PCD_SetAddress+0x1a>
 800cd66:	2302      	movs	r3, #2
 800cd68:	e012      	b.n	800cd90 <HAL_PCD_SetAddress+0x40>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	78fa      	ldrb	r2, [r7, #3]
 800cd76:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	78fa      	ldrb	r2, [r7, #3]
 800cd7e:	4611      	mov	r1, r2
 800cd80:	4618      	mov	r0, r3
 800cd82:	f006 fd06 	bl	8013792 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800cd8e:	2300      	movs	r3, #0
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3708      	adds	r7, #8
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	4608      	mov	r0, r1
 800cda2:	4611      	mov	r1, r2
 800cda4:	461a      	mov	r2, r3
 800cda6:	4603      	mov	r3, r0
 800cda8:	70fb      	strb	r3, [r7, #3]
 800cdaa:	460b      	mov	r3, r1
 800cdac:	803b      	strh	r3, [r7, #0]
 800cdae:	4613      	mov	r3, r2
 800cdb0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cdb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	da0e      	bge.n	800cddc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cdbe:	78fb      	ldrb	r3, [r7, #3]
 800cdc0:	f003 0207 	and.w	r2, r3, #7
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	4413      	add	r3, r2
 800cdca:	00db      	lsls	r3, r3, #3
 800cdcc:	3310      	adds	r3, #16
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	705a      	strb	r2, [r3, #1]
 800cdda:	e00e      	b.n	800cdfa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cddc:	78fb      	ldrb	r3, [r7, #3]
 800cdde:	f003 0207 	and.w	r2, r3, #7
 800cde2:	4613      	mov	r3, r2
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	4413      	add	r3, r2
 800cde8:	00db      	lsls	r3, r3, #3
 800cdea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cdfa:	78fb      	ldrb	r3, [r7, #3]
 800cdfc:	f003 0307 	and.w	r3, r3, #7
 800ce00:	b2da      	uxtb	r2, r3
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ce06:	883a      	ldrh	r2, [r7, #0]
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	78ba      	ldrb	r2, [r7, #2]
 800ce10:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ce12:	78bb      	ldrb	r3, [r7, #2]
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d102      	bne.n	800ce1e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d101      	bne.n	800ce2c <HAL_PCD_EP_Open+0x94>
 800ce28:	2302      	movs	r3, #2
 800ce2a:	e00e      	b.n	800ce4a <HAL_PCD_EP_Open+0xb2>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	68f9      	ldr	r1, [r7, #12]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f004 fa48 	bl	80112d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2200      	movs	r2, #0
 800ce44:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800ce48:	7afb      	ldrb	r3, [r7, #11]
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b084      	sub	sp, #16
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ce5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	da0e      	bge.n	800ce84 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce66:	78fb      	ldrb	r3, [r7, #3]
 800ce68:	f003 0207 	and.w	r2, r3, #7
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	4413      	add	r3, r2
 800ce72:	00db      	lsls	r3, r3, #3
 800ce74:	3310      	adds	r3, #16
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	4413      	add	r3, r2
 800ce7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	705a      	strb	r2, [r3, #1]
 800ce82:	e00e      	b.n	800cea2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ce84:	78fb      	ldrb	r3, [r7, #3]
 800ce86:	f003 0207 	and.w	r2, r3, #7
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	4413      	add	r3, r2
 800ce90:	00db      	lsls	r3, r3, #3
 800ce92:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	4413      	add	r3, r2
 800ce9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800cea2:	78fb      	ldrb	r3, [r7, #3]
 800cea4:	f003 0307 	and.w	r3, r3, #7
 800cea8:	b2da      	uxtb	r2, r3
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d101      	bne.n	800cebc <HAL_PCD_EP_Close+0x6a>
 800ceb8:	2302      	movs	r3, #2
 800ceba:	e00e      	b.n	800ceda <HAL_PCD_EP_Close+0x88>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	68f9      	ldr	r1, [r7, #12]
 800ceca:	4618      	mov	r0, r3
 800cecc:	f004 fdc4 	bl	8011a58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800ced8:	2300      	movs	r3, #0
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3710      	adds	r7, #16
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b086      	sub	sp, #24
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	60f8      	str	r0, [r7, #12]
 800ceea:	607a      	str	r2, [r7, #4]
 800ceec:	603b      	str	r3, [r7, #0]
 800ceee:	460b      	mov	r3, r1
 800cef0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cef2:	7afb      	ldrb	r3, [r7, #11]
 800cef4:	f003 0207 	and.w	r2, r3, #7
 800cef8:	4613      	mov	r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	4413      	add	r3, r2
 800cefe:	00db      	lsls	r3, r3, #3
 800cf00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cf04:	68fa      	ldr	r2, [r7, #12]
 800cf06:	4413      	add	r3, r2
 800cf08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	683a      	ldr	r2, [r7, #0]
 800cf14:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cf22:	7afb      	ldrb	r3, [r7, #11]
 800cf24:	f003 0307 	and.w	r3, r3, #7
 800cf28:	b2da      	uxtb	r2, r3
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	6979      	ldr	r1, [r7, #20]
 800cf34:	4618      	mov	r0, r3
 800cf36:	f004 ff7c 	bl	8011e32 <USB_EPStartXfer>

  return HAL_OK;
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3718      	adds	r7, #24
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800cf50:	78fb      	ldrb	r3, [r7, #3]
 800cf52:	f003 0207 	and.w	r2, r3, #7
 800cf56:	6879      	ldr	r1, [r7, #4]
 800cf58:	4613      	mov	r3, r2
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	4413      	add	r3, r2
 800cf5e:	00db      	lsls	r3, r3, #3
 800cf60:	440b      	add	r3, r1
 800cf62:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800cf66:	681b      	ldr	r3, [r3, #0]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b086      	sub	sp, #24
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	607a      	str	r2, [r7, #4]
 800cf7e:	603b      	str	r3, [r7, #0]
 800cf80:	460b      	mov	r3, r1
 800cf82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf84:	7afb      	ldrb	r3, [r7, #11]
 800cf86:	f003 0207 	and.w	r2, r3, #7
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	4413      	add	r3, r2
 800cf90:	00db      	lsls	r3, r3, #3
 800cf92:	3310      	adds	r3, #16
 800cf94:	68fa      	ldr	r2, [r7, #12]
 800cf96:	4413      	add	r3, r2
 800cf98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	683a      	ldr	r2, [r7, #0]
 800cfa4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	683a      	ldr	r2, [r7, #0]
 800cfb2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cfc0:	7afb      	ldrb	r3, [r7, #11]
 800cfc2:	f003 0307 	and.w	r3, r3, #7
 800cfc6:	b2da      	uxtb	r2, r3
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6979      	ldr	r1, [r7, #20]
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f004 ff2d 	bl	8011e32 <USB_EPStartXfer>

  return HAL_OK;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3718      	adds	r7, #24
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b084      	sub	sp, #16
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
 800cfea:	460b      	mov	r3, r1
 800cfec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cfee:	78fb      	ldrb	r3, [r7, #3]
 800cff0:	f003 0307 	and.w	r3, r3, #7
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	7912      	ldrb	r2, [r2, #4]
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d901      	bls.n	800d000 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cffc:	2301      	movs	r3, #1
 800cffe:	e03e      	b.n	800d07e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d000:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d004:	2b00      	cmp	r3, #0
 800d006:	da0e      	bge.n	800d026 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d008:	78fb      	ldrb	r3, [r7, #3]
 800d00a:	f003 0207 	and.w	r2, r3, #7
 800d00e:	4613      	mov	r3, r2
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	4413      	add	r3, r2
 800d014:	00db      	lsls	r3, r3, #3
 800d016:	3310      	adds	r3, #16
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	4413      	add	r3, r2
 800d01c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2201      	movs	r2, #1
 800d022:	705a      	strb	r2, [r3, #1]
 800d024:	e00c      	b.n	800d040 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d026:	78fa      	ldrb	r2, [r7, #3]
 800d028:	4613      	mov	r3, r2
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	4413      	add	r3, r2
 800d02e:	00db      	lsls	r3, r3, #3
 800d030:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	4413      	add	r3, r2
 800d038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2200      	movs	r2, #0
 800d03e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2201      	movs	r2, #1
 800d044:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d046:	78fb      	ldrb	r3, [r7, #3]
 800d048:	f003 0307 	and.w	r3, r3, #7
 800d04c:	b2da      	uxtb	r2, r3
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d101      	bne.n	800d060 <HAL_PCD_EP_SetStall+0x7e>
 800d05c:	2302      	movs	r3, #2
 800d05e:	e00e      	b.n	800d07e <HAL_PCD_EP_SetStall+0x9c>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2201      	movs	r2, #1
 800d064:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	68f9      	ldr	r1, [r7, #12]
 800d06e:	4618      	mov	r0, r3
 800d070:	f006 fa90 	bl	8013594 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800d07c:	2300      	movs	r3, #0
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b084      	sub	sp, #16
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	460b      	mov	r3, r1
 800d090:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d092:	78fb      	ldrb	r3, [r7, #3]
 800d094:	f003 030f 	and.w	r3, r3, #15
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	7912      	ldrb	r2, [r2, #4]
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d901      	bls.n	800d0a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	e040      	b.n	800d126 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d0a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	da0e      	bge.n	800d0ca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d0ac:	78fb      	ldrb	r3, [r7, #3]
 800d0ae:	f003 0207 	and.w	r2, r3, #7
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4413      	add	r3, r2
 800d0b8:	00db      	lsls	r3, r3, #3
 800d0ba:	3310      	adds	r3, #16
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	4413      	add	r3, r2
 800d0c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	705a      	strb	r2, [r3, #1]
 800d0c8:	e00e      	b.n	800d0e8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d0ca:	78fb      	ldrb	r3, [r7, #3]
 800d0cc:	f003 0207 	and.w	r2, r3, #7
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	4413      	add	r3, r2
 800d0d6:	00db      	lsls	r3, r3, #3
 800d0d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	4413      	add	r3, r2
 800d0e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d0ee:	78fb      	ldrb	r3, [r7, #3]
 800d0f0:	f003 0307 	and.w	r3, r3, #7
 800d0f4:	b2da      	uxtb	r2, r3
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800d100:	2b01      	cmp	r3, #1
 800d102:	d101      	bne.n	800d108 <HAL_PCD_EP_ClrStall+0x82>
 800d104:	2302      	movs	r3, #2
 800d106:	e00e      	b.n	800d126 <HAL_PCD_EP_ClrStall+0xa0>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2201      	movs	r2, #1
 800d10c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	68f9      	ldr	r1, [r7, #12]
 800d116:	4618      	mov	r0, r3
 800d118:	f006 fa8d 	bl	8013636 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2200      	movs	r2, #0
 800d120:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800d124:	2300      	movs	r3, #0
}
 800d126:	4618      	mov	r0, r3
 800d128:	3710      	adds	r7, #16
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}

0800d12e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800d12e:	b580      	push	{r7, lr}
 800d130:	b096      	sub	sp, #88	@ 0x58
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800d136:	e3ad      	b.n	800d894 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d140:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800d144:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	f003 030f 	and.w	r3, r3, #15
 800d14e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800d152:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800d156:	2b00      	cmp	r3, #0
 800d158:	f040 816f 	bne.w	800d43a <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800d15c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d160:	f003 0310 	and.w	r3, r3, #16
 800d164:	2b00      	cmp	r3, #0
 800d166:	d14c      	bne.n	800d202 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	881b      	ldrh	r3, [r3, #0]
 800d16e:	b29b      	uxth	r3, r3
 800d170:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800d174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d178:	81fb      	strh	r3, [r7, #14]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	89fb      	ldrh	r3, [r7, #14]
 800d180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d188:	b29b      	uxth	r3, r3
 800d18a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	3310      	adds	r3, #16
 800d190:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	461a      	mov	r2, r3
 800d19e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	00db      	lsls	r3, r3, #3
 800d1a4:	4413      	add	r3, r2
 800d1a6:	687a      	ldr	r2, [r7, #4]
 800d1a8:	6812      	ldr	r2, [r2, #0]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d1b0:	881b      	ldrh	r3, [r3, #0]
 800d1b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800d1b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800d1ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1bc:	695a      	ldr	r2, [r3, #20]
 800d1be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1c0:	69db      	ldr	r3, [r3, #28]
 800d1c2:	441a      	add	r2, r3
 800d1c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1c6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f008 fdd5 	bl	8015d7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	7b1b      	ldrb	r3, [r3, #12]
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f000 835c 	beq.w	800d894 <PCD_EP_ISR_Handler+0x766>
 800d1dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1de:	699b      	ldr	r3, [r3, #24]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	f040 8357 	bne.w	800d894 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	7b1b      	ldrb	r3, [r3, #12]
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d1f0:	b2da      	uxtb	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	731a      	strb	r2, [r3, #12]
 800d200:	e348      	b.n	800d894 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d208:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	881b      	ldrh	r3, [r3, #0]
 800d210:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800d214:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800d218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d032      	beq.n	800d286 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d228:	b29b      	uxth	r3, r3
 800d22a:	461a      	mov	r2, r3
 800d22c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	00db      	lsls	r3, r3, #3
 800d232:	4413      	add	r3, r2
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	6812      	ldr	r2, [r2, #0]
 800d238:	4413      	add	r3, r2
 800d23a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d23e:	881b      	ldrh	r3, [r3, #0]
 800d240:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800d244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d246:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6818      	ldr	r0, [r3, #0]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800d252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d254:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800d256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d258:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	f006 fb16 	bl	801388c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	881b      	ldrh	r3, [r3, #0]
 800d266:	b29a      	uxth	r2, r3
 800d268:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800d26c:	4013      	ands	r3, r2
 800d26e:	823b      	strh	r3, [r7, #16]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	8a3a      	ldrh	r2, [r7, #16]
 800d276:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d27a:	b292      	uxth	r2, r2
 800d27c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f008 fd4e 	bl	8015d20 <HAL_PCD_SetupStageCallback>
 800d284:	e306      	b.n	800d894 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d286:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f280 8302 	bge.w	800d894 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	881b      	ldrh	r3, [r3, #0]
 800d296:	b29a      	uxth	r2, r3
 800d298:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800d29c:	4013      	ands	r3, r2
 800d29e:	83fb      	strh	r3, [r7, #30]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	8bfa      	ldrh	r2, [r7, #30]
 800d2a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d2aa:	b292      	uxth	r2, r2
 800d2ac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	00db      	lsls	r3, r3, #3
 800d2c0:	4413      	add	r3, r2
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	6812      	ldr	r2, [r2, #0]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d2cc:	881b      	ldrh	r3, [r3, #0]
 800d2ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800d2d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2d4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800d2d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2d8:	69db      	ldr	r3, [r3, #28]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d019      	beq.n	800d312 <PCD_EP_ISR_Handler+0x1e4>
 800d2de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2e0:	695b      	ldr	r3, [r3, #20]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d015      	beq.n	800d312 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6818      	ldr	r0, [r3, #0]
 800d2ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2ec:	6959      	ldr	r1, [r3, #20]
 800d2ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2f0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800d2f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2f4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	f006 fac8 	bl	801388c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800d2fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2fe:	695a      	ldr	r2, [r3, #20]
 800d300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d302:	69db      	ldr	r3, [r3, #28]
 800d304:	441a      	add	r2, r3
 800d306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d308:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800d30a:	2100      	movs	r1, #0
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f008 fd19 	bl	8015d44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	881b      	ldrh	r3, [r3, #0]
 800d318:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800d31c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800d320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d324:	2b00      	cmp	r3, #0
 800d326:	f040 82b5 	bne.w	800d894 <PCD_EP_ISR_Handler+0x766>
 800d32a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800d32e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d332:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d336:	f000 82ad 	beq.w	800d894 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	61bb      	str	r3, [r7, #24]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d348:	b29b      	uxth	r3, r3
 800d34a:	461a      	mov	r2, r3
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	4413      	add	r3, r2
 800d350:	61bb      	str	r3, [r7, #24]
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d358:	617b      	str	r3, [r7, #20]
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	881b      	ldrh	r3, [r3, #0]
 800d35e:	b29b      	uxth	r3, r3
 800d360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d364:	b29a      	uxth	r2, r3
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	801a      	strh	r2, [r3, #0]
 800d36a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d36c:	691b      	ldr	r3, [r3, #16]
 800d36e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d370:	d91d      	bls.n	800d3ae <PCD_EP_ISR_Handler+0x280>
 800d372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d374:	691b      	ldr	r3, [r3, #16]
 800d376:	095b      	lsrs	r3, r3, #5
 800d378:	647b      	str	r3, [r7, #68]	@ 0x44
 800d37a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d37c:	691b      	ldr	r3, [r3, #16]
 800d37e:	f003 031f 	and.w	r3, r3, #31
 800d382:	2b00      	cmp	r3, #0
 800d384:	d102      	bne.n	800d38c <PCD_EP_ISR_Handler+0x25e>
 800d386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d388:	3b01      	subs	r3, #1
 800d38a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	881b      	ldrh	r3, [r3, #0]
 800d390:	b29a      	uxth	r2, r3
 800d392:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d394:	b29b      	uxth	r3, r3
 800d396:	029b      	lsls	r3, r3, #10
 800d398:	b29b      	uxth	r3, r3
 800d39a:	4313      	orrs	r3, r2
 800d39c:	b29b      	uxth	r3, r3
 800d39e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3a6:	b29a      	uxth	r2, r3
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	801a      	strh	r2, [r3, #0]
 800d3ac:	e026      	b.n	800d3fc <PCD_EP_ISR_Handler+0x2ce>
 800d3ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3b0:	691b      	ldr	r3, [r3, #16]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10a      	bne.n	800d3cc <PCD_EP_ISR_Handler+0x29e>
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	881b      	ldrh	r3, [r3, #0]
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3c4:	b29a      	uxth	r2, r3
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	801a      	strh	r2, [r3, #0]
 800d3ca:	e017      	b.n	800d3fc <PCD_EP_ISR_Handler+0x2ce>
 800d3cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	085b      	lsrs	r3, r3, #1
 800d3d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3d6:	691b      	ldr	r3, [r3, #16]
 800d3d8:	f003 0301 	and.w	r3, r3, #1
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d002      	beq.n	800d3e6 <PCD_EP_ISR_Handler+0x2b8>
 800d3e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	881b      	ldrh	r3, [r3, #0]
 800d3ea:	b29a      	uxth	r2, r3
 800d3ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	029b      	lsls	r3, r3, #10
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	881b      	ldrh	r3, [r3, #0]
 800d402:	b29b      	uxth	r3, r3
 800d404:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d40c:	827b      	strh	r3, [r7, #18]
 800d40e:	8a7b      	ldrh	r3, [r7, #18]
 800d410:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d414:	827b      	strh	r3, [r7, #18]
 800d416:	8a7b      	ldrh	r3, [r7, #18]
 800d418:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d41c:	827b      	strh	r3, [r7, #18]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	8a7b      	ldrh	r3, [r7, #18]
 800d424:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d428:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d42c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d434:	b29b      	uxth	r3, r3
 800d436:	8013      	strh	r3, [r2, #0]
 800d438:	e22c      	b.n	800d894 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	461a      	mov	r2, r3
 800d440:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	4413      	add	r3, r2
 800d448:	881b      	ldrh	r3, [r3, #0]
 800d44a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d44e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800d452:	2b00      	cmp	r3, #0
 800d454:	f280 80f6 	bge.w	800d644 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	461a      	mov	r2, r3
 800d45e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800d462:	009b      	lsls	r3, r3, #2
 800d464:	4413      	add	r3, r2
 800d466:	881b      	ldrh	r3, [r3, #0]
 800d468:	b29a      	uxth	r2, r3
 800d46a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800d46e:	4013      	ands	r3, r2
 800d470:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	461a      	mov	r2, r3
 800d47a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	4413      	add	r3, r2
 800d482:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800d486:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d48a:	b292      	uxth	r2, r2
 800d48c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800d48e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800d492:	4613      	mov	r3, r2
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	4413      	add	r3, r2
 800d498:	00db      	lsls	r3, r3, #3
 800d49a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800d4a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4a6:	7b1b      	ldrb	r3, [r3, #12]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d123      	bne.n	800d4f4 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	00db      	lsls	r3, r3, #3
 800d4be:	4413      	add	r3, r2
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	6812      	ldr	r2, [r2, #0]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d4ca:	881b      	ldrh	r3, [r3, #0]
 800d4cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d4d0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800d4d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	f000 808e 	beq.w	800d5fa <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6818      	ldr	r0, [r3, #0]
 800d4e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4e4:	6959      	ldr	r1, [r3, #20]
 800d4e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4e8:	88da      	ldrh	r2, [r3, #6]
 800d4ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800d4ee:	f006 f9cd 	bl	801388c <USB_ReadPMA>
 800d4f2:	e082      	b.n	800d5fa <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800d4f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4f6:	78db      	ldrb	r3, [r3, #3]
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	d10a      	bne.n	800d512 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800d4fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800d500:	461a      	mov	r2, r3
 800d502:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 f9d3 	bl	800d8b0 <HAL_PCD_EP_DB_Receive>
 800d50a:	4603      	mov	r3, r0
 800d50c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800d510:	e073      	b.n	800d5fa <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	461a      	mov	r2, r3
 800d518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	009b      	lsls	r3, r3, #2
 800d51e:	4413      	add	r3, r2
 800d520:	881b      	ldrh	r3, [r3, #0]
 800d522:	b29b      	uxth	r3, r3
 800d524:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d52c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	461a      	mov	r2, r3
 800d536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	441a      	add	r2, r3
 800d53e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800d542:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d546:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d54a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d54e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d552:	b29b      	uxth	r3, r3
 800d554:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	461a      	mov	r2, r3
 800d55c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	009b      	lsls	r3, r3, #2
 800d562:	4413      	add	r3, r2
 800d564:	881b      	ldrh	r3, [r3, #0]
 800d566:	b29b      	uxth	r3, r3
 800d568:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d022      	beq.n	800d5b6 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d578:	b29b      	uxth	r3, r3
 800d57a:	461a      	mov	r2, r3
 800d57c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	00db      	lsls	r3, r3, #3
 800d582:	4413      	add	r3, r2
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	6812      	ldr	r2, [r2, #0]
 800d588:	4413      	add	r3, r2
 800d58a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d58e:	881b      	ldrh	r3, [r3, #0]
 800d590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d594:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800d598:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d02c      	beq.n	800d5fa <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6818      	ldr	r0, [r3, #0]
 800d5a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5a6:	6959      	ldr	r1, [r3, #20]
 800d5a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5aa:	891a      	ldrh	r2, [r3, #8]
 800d5ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800d5b0:	f006 f96c 	bl	801388c <USB_ReadPMA>
 800d5b4:	e021      	b.n	800d5fa <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	00db      	lsls	r3, r3, #3
 800d5c8:	4413      	add	r3, r2
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	6812      	ldr	r2, [r2, #0]
 800d5ce:	4413      	add	r3, r2
 800d5d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d5d4:	881b      	ldrh	r3, [r3, #0]
 800d5d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d5da:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800d5de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d009      	beq.n	800d5fa <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6818      	ldr	r0, [r3, #0]
 800d5ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5ec:	6959      	ldr	r1, [r3, #20]
 800d5ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5f0:	895a      	ldrh	r2, [r3, #10]
 800d5f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800d5f6:	f006 f949 	bl	801388c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800d5fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5fc:	69da      	ldr	r2, [r3, #28]
 800d5fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800d602:	441a      	add	r2, r3
 800d604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d606:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800d608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d60a:	695a      	ldr	r2, [r3, #20]
 800d60c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800d610:	441a      	add	r2, r3
 800d612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d614:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800d616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d618:	699b      	ldr	r3, [r3, #24]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d005      	beq.n	800d62a <PCD_EP_ISR_Handler+0x4fc>
 800d61e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800d622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	429a      	cmp	r2, r3
 800d628:	d206      	bcs.n	800d638 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800d62a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	4619      	mov	r1, r3
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f008 fb87 	bl	8015d44 <HAL_PCD_DataOutStageCallback>
 800d636:	e005      	b.n	800d644 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d63e:	4618      	mov	r0, r3
 800d640:	f004 fbf7 	bl	8011e32 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800d644:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800d648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	f000 8121 	beq.w	800d894 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800d652:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800d656:	4613      	mov	r3, r2
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	4413      	add	r3, r2
 800d65c:	00db      	lsls	r3, r3, #3
 800d65e:	3310      	adds	r3, #16
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	4413      	add	r3, r2
 800d664:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	461a      	mov	r2, r3
 800d66c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4413      	add	r3, r2
 800d674:	881b      	ldrh	r3, [r3, #0]
 800d676:	b29b      	uxth	r3, r3
 800d678:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800d67c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d680:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	461a      	mov	r2, r3
 800d68a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	441a      	add	r2, r3
 800d692:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d69a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800d6a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6a4:	78db      	ldrb	r3, [r3, #3]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	f040 80a2 	bne.w	800d7f0 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800d6ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800d6b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6b4:	7b1b      	ldrb	r3, [r3, #12]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f000 8093 	beq.w	800d7e2 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d6bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800d6c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d046      	beq.n	800d756 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d6c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6ca:	785b      	ldrb	r3, [r3, #1]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d126      	bne.n	800d71e <PCD_EP_ISR_Handler+0x5f0>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e4:	4413      	add	r3, r2
 800d6e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	00da      	lsls	r2, r3, #3
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f0:	4413      	add	r3, r2
 800d6f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d6f6:	623b      	str	r3, [r7, #32]
 800d6f8:	6a3b      	ldr	r3, [r7, #32]
 800d6fa:	881b      	ldrh	r3, [r3, #0]
 800d6fc:	b29b      	uxth	r3, r3
 800d6fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d702:	b29a      	uxth	r2, r3
 800d704:	6a3b      	ldr	r3, [r7, #32]
 800d706:	801a      	strh	r2, [r3, #0]
 800d708:	6a3b      	ldr	r3, [r7, #32]
 800d70a:	881b      	ldrh	r3, [r3, #0]
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d716:	b29a      	uxth	r2, r3
 800d718:	6a3b      	ldr	r3, [r7, #32]
 800d71a:	801a      	strh	r2, [r3, #0]
 800d71c:	e061      	b.n	800d7e2 <PCD_EP_ISR_Handler+0x6b4>
 800d71e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d720:	785b      	ldrb	r3, [r3, #1]
 800d722:	2b01      	cmp	r3, #1
 800d724:	d15d      	bne.n	800d7e2 <PCD_EP_ISR_Handler+0x6b4>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d734:	b29b      	uxth	r3, r3
 800d736:	461a      	mov	r2, r3
 800d738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73a:	4413      	add	r3, r2
 800d73c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d73e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	00da      	lsls	r2, r3, #3
 800d744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d746:	4413      	add	r3, r2
 800d748:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d74c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d750:	2200      	movs	r2, #0
 800d752:	801a      	strh	r2, [r3, #0]
 800d754:	e045      	b.n	800d7e2 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d75c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d75e:	785b      	ldrb	r3, [r3, #1]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d126      	bne.n	800d7b2 <PCD_EP_ISR_Handler+0x684>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	637b      	str	r3, [r7, #52]	@ 0x34
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d772:	b29b      	uxth	r3, r3
 800d774:	461a      	mov	r2, r3
 800d776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d778:	4413      	add	r3, r2
 800d77a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d77c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	00da      	lsls	r2, r3, #3
 800d782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d784:	4413      	add	r3, r2
 800d786:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d78a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d78e:	881b      	ldrh	r3, [r3, #0]
 800d790:	b29b      	uxth	r3, r3
 800d792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d796:	b29a      	uxth	r2, r3
 800d798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79a:	801a      	strh	r2, [r3, #0]
 800d79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79e:	881b      	ldrh	r3, [r3, #0]
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ae:	801a      	strh	r2, [r3, #0]
 800d7b0:	e017      	b.n	800d7e2 <PCD_EP_ISR_Handler+0x6b4>
 800d7b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7b4:	785b      	ldrb	r3, [r3, #1]
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d113      	bne.n	800d7e2 <PCD_EP_ISR_Handler+0x6b4>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7c8:	4413      	add	r3, r2
 800d7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	00da      	lsls	r2, r3, #3
 800d7d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7d4:	4413      	add	r3, r2
 800d7d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d7da:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7de:	2200      	movs	r2, #0
 800d7e0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d7e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f008 fac6 	bl	8015d7a <HAL_PCD_DataInStageCallback>
 800d7ee:	e051      	b.n	800d894 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800d7f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800d7f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d144      	bne.n	800d886 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d804:	b29b      	uxth	r3, r3
 800d806:	461a      	mov	r2, r3
 800d808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	00db      	lsls	r3, r3, #3
 800d80e:	4413      	add	r3, r2
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	6812      	ldr	r2, [r2, #0]
 800d814:	4413      	add	r3, r2
 800d816:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d81a:	881b      	ldrh	r3, [r3, #0]
 800d81c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d820:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800d824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d826:	699a      	ldr	r2, [r3, #24]
 800d828:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d907      	bls.n	800d840 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800d830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d832:	699a      	ldr	r2, [r3, #24]
 800d834:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d838:	1ad2      	subs	r2, r2, r3
 800d83a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d83c:	619a      	str	r2, [r3, #24]
 800d83e:	e002      	b.n	800d846 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800d840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d842:	2200      	movs	r2, #0
 800d844:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800d846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d848:	699b      	ldr	r3, [r3, #24]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d106      	bne.n	800d85c <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d84e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	4619      	mov	r1, r3
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f008 fa90 	bl	8015d7a <HAL_PCD_DataInStageCallback>
 800d85a:	e01b      	b.n	800d894 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800d85c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d85e:	695a      	ldr	r2, [r3, #20]
 800d860:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d864:	441a      	add	r2, r3
 800d866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d868:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800d86a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d86c:	69da      	ldr	r2, [r3, #28]
 800d86e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d872:	441a      	add	r2, r3
 800d874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d876:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d87e:	4618      	mov	r0, r3
 800d880:	f004 fad7 	bl	8011e32 <USB_EPStartXfer>
 800d884:	e006      	b.n	800d894 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800d886:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800d88a:	461a      	mov	r2, r3
 800d88c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 f917 	bl	800dac2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d89c:	b29b      	uxth	r3, r3
 800d89e:	b21b      	sxth	r3, r3
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	f6ff ac49 	blt.w	800d138 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800d8a6:	2300      	movs	r3, #0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3758      	adds	r7, #88	@ 0x58
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b088      	sub	sp, #32
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d8be:	88fb      	ldrh	r3, [r7, #6]
 800d8c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d07c      	beq.n	800d9c2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	00db      	lsls	r3, r3, #3
 800d8da:	4413      	add	r3, r2
 800d8dc:	68fa      	ldr	r2, [r7, #12]
 800d8de:	6812      	ldr	r2, [r2, #0]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d8e6:	881b      	ldrh	r3, [r3, #0]
 800d8e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d8ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	699a      	ldr	r2, [r3, #24]
 800d8f2:	8b7b      	ldrh	r3, [r7, #26]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d306      	bcc.n	800d906 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	699a      	ldr	r2, [r3, #24]
 800d8fc:	8b7b      	ldrh	r3, [r7, #26]
 800d8fe:	1ad2      	subs	r2, r2, r3
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	619a      	str	r2, [r3, #24]
 800d904:	e002      	b.n	800d90c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	2200      	movs	r2, #0
 800d90a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	699b      	ldr	r3, [r3, #24]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d123      	bne.n	800d95c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	461a      	mov	r2, r3
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	009b      	lsls	r3, r3, #2
 800d920:	4413      	add	r3, r2
 800d922:	881b      	ldrh	r3, [r3, #0]
 800d924:	b29b      	uxth	r3, r3
 800d926:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d92a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d92e:	833b      	strh	r3, [r7, #24]
 800d930:	8b3b      	ldrh	r3, [r7, #24]
 800d932:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d936:	833b      	strh	r3, [r7, #24]
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	461a      	mov	r2, r3
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	009b      	lsls	r3, r3, #2
 800d944:	441a      	add	r2, r3
 800d946:	8b3b      	ldrh	r3, [r7, #24]
 800d948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d94c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d958:	b29b      	uxth	r3, r3
 800d95a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d95c:	88fb      	ldrh	r3, [r7, #6]
 800d95e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d962:	2b00      	cmp	r3, #0
 800d964:	d01f      	beq.n	800d9a6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	461a      	mov	r2, r3
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	4413      	add	r3, r2
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	b29b      	uxth	r3, r3
 800d978:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d97c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d980:	82fb      	strh	r3, [r7, #22]
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	461a      	mov	r2, r3
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	441a      	add	r2, r3
 800d990:	8afb      	ldrh	r3, [r7, #22]
 800d992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d99a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d99e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800d9a6:	8b7b      	ldrh	r3, [r7, #26]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f000 8085 	beq.w	800dab8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	6818      	ldr	r0, [r3, #0]
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	6959      	ldr	r1, [r3, #20]
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	891a      	ldrh	r2, [r3, #8]
 800d9ba:	8b7b      	ldrh	r3, [r7, #26]
 800d9bc:	f005 ff66 	bl	801388c <USB_ReadPMA>
 800d9c0:	e07a      	b.n	800dab8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	00db      	lsls	r3, r3, #3
 800d9d4:	4413      	add	r3, r2
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	6812      	ldr	r2, [r2, #0]
 800d9da:	4413      	add	r3, r2
 800d9dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d9e0:	881b      	ldrh	r3, [r3, #0]
 800d9e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d9e6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	699a      	ldr	r2, [r3, #24]
 800d9ec:	8b7b      	ldrh	r3, [r7, #26]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d306      	bcc.n	800da00 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	699a      	ldr	r2, [r3, #24]
 800d9f6:	8b7b      	ldrh	r3, [r7, #26]
 800d9f8:	1ad2      	subs	r2, r2, r3
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	619a      	str	r2, [r3, #24]
 800d9fe:	e002      	b.n	800da06 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	2200      	movs	r2, #0
 800da04:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	699b      	ldr	r3, [r3, #24]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d123      	bne.n	800da56 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	461a      	mov	r2, r3
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	009b      	lsls	r3, r3, #2
 800da1a:	4413      	add	r3, r2
 800da1c:	881b      	ldrh	r3, [r3, #0]
 800da1e:	b29b      	uxth	r3, r3
 800da20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800da24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da28:	83fb      	strh	r3, [r7, #30]
 800da2a:	8bfb      	ldrh	r3, [r7, #30]
 800da2c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800da30:	83fb      	strh	r3, [r7, #30]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	461a      	mov	r2, r3
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	009b      	lsls	r3, r3, #2
 800da3e:	441a      	add	r2, r3
 800da40:	8bfb      	ldrh	r3, [r7, #30]
 800da42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da52:	b29b      	uxth	r3, r3
 800da54:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800da56:	88fb      	ldrh	r3, [r7, #6]
 800da58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d11f      	bne.n	800daa0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	461a      	mov	r2, r3
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	4413      	add	r3, r2
 800da6e:	881b      	ldrh	r3, [r3, #0]
 800da70:	b29b      	uxth	r3, r3
 800da72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da7a:	83bb      	strh	r3, [r7, #28]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	461a      	mov	r2, r3
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	441a      	add	r2, r3
 800da8a:	8bbb      	ldrh	r3, [r7, #28]
 800da8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800daa0:	8b7b      	ldrh	r3, [r7, #26]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d008      	beq.n	800dab8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	6818      	ldr	r0, [r3, #0]
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	6959      	ldr	r1, [r3, #20]
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	895a      	ldrh	r2, [r3, #10]
 800dab2:	8b7b      	ldrh	r3, [r7, #26]
 800dab4:	f005 feea 	bl	801388c <USB_ReadPMA>
    }
  }

  return count;
 800dab8:	8b7b      	ldrh	r3, [r7, #26]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3720      	adds	r7, #32
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b0a4      	sub	sp, #144	@ 0x90
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	60f8      	str	r0, [r7, #12]
 800daca:	60b9      	str	r1, [r7, #8]
 800dacc:	4613      	mov	r3, r2
 800dace:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800dad0:	88fb      	ldrh	r3, [r7, #6]
 800dad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	f000 81db 	beq.w	800de92 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dae4:	b29b      	uxth	r3, r3
 800dae6:	461a      	mov	r2, r3
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	00db      	lsls	r3, r3, #3
 800daee:	4413      	add	r3, r2
 800daf0:	68fa      	ldr	r2, [r7, #12]
 800daf2:	6812      	ldr	r2, [r2, #0]
 800daf4:	4413      	add	r3, r2
 800daf6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dafa:	881b      	ldrh	r3, [r3, #0]
 800dafc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db00:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	699a      	ldr	r2, [r3, #24]
 800db08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d907      	bls.n	800db20 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	699a      	ldr	r2, [r3, #24]
 800db14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800db18:	1ad2      	subs	r2, r2, r3
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	619a      	str	r2, [r3, #24]
 800db1e:	e002      	b.n	800db26 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	2200      	movs	r2, #0
 800db24:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	699b      	ldr	r3, [r3, #24]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f040 80b9 	bne.w	800dca2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	785b      	ldrb	r3, [r3, #1]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d126      	bne.n	800db86 <HAL_PCD_EP_DB_Transmit+0xc4>
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db46:	b29b      	uxth	r3, r3
 800db48:	461a      	mov	r2, r3
 800db4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db4c:	4413      	add	r3, r2
 800db4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	00da      	lsls	r2, r3, #3
 800db56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db58:	4413      	add	r3, r2
 800db5a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800db5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db62:	881b      	ldrh	r3, [r3, #0]
 800db64:	b29b      	uxth	r3, r3
 800db66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db6e:	801a      	strh	r2, [r3, #0]
 800db70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db72:	881b      	ldrh	r3, [r3, #0]
 800db74:	b29b      	uxth	r3, r3
 800db76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db7e:	b29a      	uxth	r2, r3
 800db80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db82:	801a      	strh	r2, [r3, #0]
 800db84:	e01a      	b.n	800dbbc <HAL_PCD_EP_DB_Transmit+0xfa>
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	785b      	ldrb	r3, [r3, #1]
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d116      	bne.n	800dbbc <HAL_PCD_EP_DB_Transmit+0xfa>
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	637b      	str	r3, [r7, #52]	@ 0x34
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	461a      	mov	r2, r3
 800dba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dba2:	4413      	add	r3, r2
 800dba4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	00da      	lsls	r2, r3, #3
 800dbac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbae:	4413      	add	r3, r2
 800dbb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dbb4:	633b      	str	r3, [r7, #48]	@ 0x30
 800dbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb8:	2200      	movs	r2, #0
 800dbba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	785b      	ldrb	r3, [r3, #1]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d126      	bne.n	800dc18 <HAL_PCD_EP_DB_Transmit+0x156>
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	61fb      	str	r3, [r7, #28]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	461a      	mov	r2, r3
 800dbdc:	69fb      	ldr	r3, [r7, #28]
 800dbde:	4413      	add	r3, r2
 800dbe0:	61fb      	str	r3, [r7, #28]
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	00da      	lsls	r2, r3, #3
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	4413      	add	r3, r2
 800dbec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dbf0:	61bb      	str	r3, [r7, #24]
 800dbf2:	69bb      	ldr	r3, [r7, #24]
 800dbf4:	881b      	ldrh	r3, [r3, #0]
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dbfc:	b29a      	uxth	r2, r3
 800dbfe:	69bb      	ldr	r3, [r7, #24]
 800dc00:	801a      	strh	r2, [r3, #0]
 800dc02:	69bb      	ldr	r3, [r7, #24]
 800dc04:	881b      	ldrh	r3, [r3, #0]
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc10:	b29a      	uxth	r2, r3
 800dc12:	69bb      	ldr	r3, [r7, #24]
 800dc14:	801a      	strh	r2, [r3, #0]
 800dc16:	e017      	b.n	800dc48 <HAL_PCD_EP_DB_Transmit+0x186>
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	785b      	ldrb	r3, [r3, #1]
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d113      	bne.n	800dc48 <HAL_PCD_EP_DB_Transmit+0x186>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc2e:	4413      	add	r3, r2
 800dc30:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	00da      	lsls	r2, r3, #3
 800dc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc3a:	4413      	add	r3, r2
 800dc3c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dc40:	623b      	str	r3, [r7, #32]
 800dc42:	6a3b      	ldr	r3, [r7, #32]
 800dc44:	2200      	movs	r2, #0
 800dc46:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f008 f893 	bl	8015d7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800dc54:	88fb      	ldrh	r3, [r7, #6]
 800dc56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	f000 82fa 	beq.w	800e254 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	461a      	mov	r2, r3
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	4413      	add	r3, r2
 800dc6e:	881b      	ldrh	r3, [r3, #0]
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc7a:	82fb      	strh	r3, [r7, #22]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	461a      	mov	r2, r3
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	009b      	lsls	r3, r3, #2
 800dc88:	441a      	add	r2, r3
 800dc8a:	8afb      	ldrh	r3, [r7, #22]
 800dc8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dc98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc9c:	b29b      	uxth	r3, r3
 800dc9e:	8013      	strh	r3, [r2, #0]
 800dca0:	e2d8      	b.n	800e254 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800dca2:	88fb      	ldrh	r3, [r7, #6]
 800dca4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d021      	beq.n	800dcf0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	009b      	lsls	r3, r3, #2
 800dcb8:	4413      	add	r3, r2
 800dcba:	881b      	ldrh	r3, [r3, #0]
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dcc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcc6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	461a      	mov	r2, r3
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	009b      	lsls	r3, r3, #2
 800dcd6:	441a      	add	r2, r3
 800dcd8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dcdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dce0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dce4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	f040 82ac 	bne.w	800e254 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	695a      	ldr	r2, [r3, #20]
 800dd00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800dd04:	441a      	add	r2, r3
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	69da      	ldr	r2, [r3, #28]
 800dd0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800dd12:	441a      	add	r2, r3
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	6a1a      	ldr	r2, [r3, #32]
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	691b      	ldr	r3, [r3, #16]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d30b      	bcc.n	800dd3c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	691b      	ldr	r3, [r3, #16]
 800dd28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	6a1a      	ldr	r2, [r3, #32]
 800dd30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dd34:	1ad2      	subs	r2, r2, r3
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	621a      	str	r2, [r3, #32]
 800dd3a:	e017      	b.n	800dd6c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	6a1b      	ldr	r3, [r3, #32]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d108      	bne.n	800dd56 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800dd44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800dd48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800dd54:	e00a      	b.n	800dd6c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	6a1b      	ldr	r3, [r3, #32]
 800dd62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	785b      	ldrb	r3, [r3, #1]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d165      	bne.n	800de40 <HAL_PCD_EP_DB_Transmit+0x37e>
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	461a      	mov	r2, r3
 800dd86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd88:	4413      	add	r3, r2
 800dd8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	00da      	lsls	r2, r3, #3
 800dd92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd94:	4413      	add	r3, r2
 800dd96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dd9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd9e:	881b      	ldrh	r3, [r3, #0]
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dda6:	b29a      	uxth	r2, r3
 800dda8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddaa:	801a      	strh	r2, [r3, #0]
 800ddac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ddb0:	2b3e      	cmp	r3, #62	@ 0x3e
 800ddb2:	d91d      	bls.n	800ddf0 <HAL_PCD_EP_DB_Transmit+0x32e>
 800ddb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ddb8:	095b      	lsrs	r3, r3, #5
 800ddba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ddbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ddc0:	f003 031f 	and.w	r3, r3, #31
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d102      	bne.n	800ddce <HAL_PCD_EP_DB_Transmit+0x30c>
 800ddc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ddca:	3b01      	subs	r3, #1
 800ddcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ddce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddd0:	881b      	ldrh	r3, [r3, #0]
 800ddd2:	b29a      	uxth	r2, r3
 800ddd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	029b      	lsls	r3, r3, #10
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	4313      	orrs	r3, r2
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dde4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dde8:	b29a      	uxth	r2, r3
 800ddea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddec:	801a      	strh	r2, [r3, #0]
 800ddee:	e044      	b.n	800de7a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800ddf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d10a      	bne.n	800de0e <HAL_PCD_EP_DB_Transmit+0x34c>
 800ddf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddfa:	881b      	ldrh	r3, [r3, #0]
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de06:	b29a      	uxth	r2, r3
 800de08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de0a:	801a      	strh	r2, [r3, #0]
 800de0c:	e035      	b.n	800de7a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800de0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de12:	085b      	lsrs	r3, r3, #1
 800de14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de1a:	f003 0301 	and.w	r3, r3, #1
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d002      	beq.n	800de28 <HAL_PCD_EP_DB_Transmit+0x366>
 800de22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de24:	3301      	adds	r3, #1
 800de26:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de2a:	881b      	ldrh	r3, [r3, #0]
 800de2c:	b29a      	uxth	r2, r3
 800de2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de30:	b29b      	uxth	r3, r3
 800de32:	029b      	lsls	r3, r3, #10
 800de34:	b29b      	uxth	r3, r3
 800de36:	4313      	orrs	r3, r2
 800de38:	b29a      	uxth	r2, r3
 800de3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de3c:	801a      	strh	r2, [r3, #0]
 800de3e:	e01c      	b.n	800de7a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	785b      	ldrb	r3, [r3, #1]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d118      	bne.n	800de7a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de56:	b29b      	uxth	r3, r3
 800de58:	461a      	mov	r2, r3
 800de5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de5c:	4413      	add	r3, r2
 800de5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	00da      	lsls	r2, r3, #3
 800de66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de68:	4413      	add	r3, r2
 800de6a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800de6e:	643b      	str	r3, [r7, #64]	@ 0x40
 800de70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de74:	b29a      	uxth	r2, r3
 800de76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de78:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	6818      	ldr	r0, [r3, #0]
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	6959      	ldr	r1, [r3, #20]
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	891a      	ldrh	r2, [r3, #8]
 800de86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de8a:	b29b      	uxth	r3, r3
 800de8c:	f005 fcbc 	bl	8013808 <USB_WritePMA>
 800de90:	e1e0      	b.n	800e254 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	461a      	mov	r2, r3
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	00db      	lsls	r3, r3, #3
 800dea4:	4413      	add	r3, r2
 800dea6:	68fa      	ldr	r2, [r7, #12]
 800dea8:	6812      	ldr	r2, [r2, #0]
 800deaa:	4413      	add	r3, r2
 800deac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800deb0:	881b      	ldrh	r3, [r3, #0]
 800deb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800deb6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	699a      	ldr	r2, [r3, #24]
 800debe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d307      	bcc.n	800ded6 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	699a      	ldr	r2, [r3, #24]
 800deca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800dece:	1ad2      	subs	r2, r2, r3
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	619a      	str	r2, [r3, #24]
 800ded4:	e002      	b.n	800dedc <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	2200      	movs	r2, #0
 800deda:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	699b      	ldr	r3, [r3, #24]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	f040 80c0 	bne.w	800e066 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	785b      	ldrb	r3, [r3, #1]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d126      	bne.n	800df3c <HAL_PCD_EP_DB_Transmit+0x47a>
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800defc:	b29b      	uxth	r3, r3
 800defe:	461a      	mov	r2, r3
 800df00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800df02:	4413      	add	r3, r2
 800df04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	00da      	lsls	r2, r3, #3
 800df0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800df0e:	4413      	add	r3, r2
 800df10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800df14:	67bb      	str	r3, [r7, #120]	@ 0x78
 800df16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df18:	881b      	ldrh	r3, [r3, #0]
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df20:	b29a      	uxth	r2, r3
 800df22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df24:	801a      	strh	r2, [r3, #0]
 800df26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df28:	881b      	ldrh	r3, [r3, #0]
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df34:	b29a      	uxth	r2, r3
 800df36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df38:	801a      	strh	r2, [r3, #0]
 800df3a:	e01a      	b.n	800df72 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	785b      	ldrb	r3, [r3, #1]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d116      	bne.n	800df72 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	667b      	str	r3, [r7, #100]	@ 0x64
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df52:	b29b      	uxth	r3, r3
 800df54:	461a      	mov	r2, r3
 800df56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df58:	4413      	add	r3, r2
 800df5a:	667b      	str	r3, [r7, #100]	@ 0x64
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	00da      	lsls	r2, r3, #3
 800df62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df64:	4413      	add	r3, r2
 800df66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800df6a:	663b      	str	r3, [r7, #96]	@ 0x60
 800df6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df6e:	2200      	movs	r2, #0
 800df70:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	677b      	str	r3, [r7, #116]	@ 0x74
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	785b      	ldrb	r3, [r3, #1]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d12b      	bne.n	800dfd8 <HAL_PCD_EP_DB_Transmit+0x516>
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df8e:	b29b      	uxth	r3, r3
 800df90:	461a      	mov	r2, r3
 800df92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df94:	4413      	add	r3, r2
 800df96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	00da      	lsls	r2, r3, #3
 800df9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfa0:	4413      	add	r3, r2
 800dfa2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dfa6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dfaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dfae:	881b      	ldrh	r3, [r3, #0]
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dfb6:	b29a      	uxth	r2, r3
 800dfb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dfbc:	801a      	strh	r2, [r3, #0]
 800dfbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dfc2:	881b      	ldrh	r3, [r3, #0]
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dfd4:	801a      	strh	r2, [r3, #0]
 800dfd6:	e017      	b.n	800e008 <HAL_PCD_EP_DB_Transmit+0x546>
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	785b      	ldrb	r3, [r3, #1]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d113      	bne.n	800e008 <HAL_PCD_EP_DB_Transmit+0x546>
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	461a      	mov	r2, r3
 800dfec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dfee:	4413      	add	r3, r2
 800dff0:	677b      	str	r3, [r7, #116]	@ 0x74
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	00da      	lsls	r2, r3, #3
 800dff8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dffa:	4413      	add	r3, r2
 800dffc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e000:	673b      	str	r3, [r7, #112]	@ 0x70
 800e002:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e004:	2200      	movs	r2, #0
 800e006:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	4619      	mov	r1, r3
 800e00e:	68f8      	ldr	r0, [r7, #12]
 800e010:	f007 feb3 	bl	8015d7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800e014:	88fb      	ldrh	r3, [r7, #6]
 800e016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f040 811a 	bne.w	800e254 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	461a      	mov	r2, r3
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	009b      	lsls	r3, r3, #2
 800e02c:	4413      	add	r3, r2
 800e02e:	881b      	ldrh	r3, [r3, #0]
 800e030:	b29b      	uxth	r3, r3
 800e032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e03a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	461a      	mov	r2, r3
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	441a      	add	r2, r3
 800e04c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800e050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e058:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e05c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e060:	b29b      	uxth	r3, r3
 800e062:	8013      	strh	r3, [r2, #0]
 800e064:	e0f6      	b.n	800e254 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800e066:	88fb      	ldrh	r3, [r7, #6]
 800e068:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d121      	bne.n	800e0b4 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	461a      	mov	r2, r3
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	009b      	lsls	r3, r3, #2
 800e07c:	4413      	add	r3, r2
 800e07e:	881b      	ldrh	r3, [r3, #0]
 800e080:	b29b      	uxth	r3, r3
 800e082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e08a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	461a      	mov	r2, r3
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	441a      	add	r2, r3
 800e09c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e0a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e0ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	f040 80ca 	bne.w	800e254 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	695a      	ldr	r2, [r3, #20]
 800e0c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800e0c8:	441a      	add	r2, r3
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	69da      	ldr	r2, [r3, #28]
 800e0d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800e0d6:	441a      	add	r2, r3
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	6a1a      	ldr	r2, [r3, #32]
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	691b      	ldr	r3, [r3, #16]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d30b      	bcc.n	800e100 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	691b      	ldr	r3, [r3, #16]
 800e0ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	6a1a      	ldr	r2, [r3, #32]
 800e0f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e0f8:	1ad2      	subs	r2, r2, r3
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	621a      	str	r2, [r3, #32]
 800e0fe:	e017      	b.n	800e130 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	6a1b      	ldr	r3, [r3, #32]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d108      	bne.n	800e11a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800e108:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800e10c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	2200      	movs	r2, #0
 800e114:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800e118:	e00a      	b.n	800e130 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	6a1b      	ldr	r3, [r3, #32]
 800e11e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	2200      	movs	r2, #0
 800e126:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	2200      	movs	r2, #0
 800e12c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	657b      	str	r3, [r7, #84]	@ 0x54
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	785b      	ldrb	r3, [r3, #1]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d165      	bne.n	800e20a <HAL_PCD_EP_DB_Transmit+0x748>
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	461a      	mov	r2, r3
 800e150:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e152:	4413      	add	r3, r2
 800e154:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	00da      	lsls	r2, r3, #3
 800e15c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e15e:	4413      	add	r3, r2
 800e160:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e164:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e166:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e168:	881b      	ldrh	r3, [r3, #0]
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e170:	b29a      	uxth	r2, r3
 800e172:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e174:	801a      	strh	r2, [r3, #0]
 800e176:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e17a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e17c:	d91d      	bls.n	800e1ba <HAL_PCD_EP_DB_Transmit+0x6f8>
 800e17e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e182:	095b      	lsrs	r3, r3, #5
 800e184:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e186:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e18a:	f003 031f 	and.w	r3, r3, #31
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d102      	bne.n	800e198 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800e192:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e194:	3b01      	subs	r3, #1
 800e196:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e198:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e19a:	881b      	ldrh	r3, [r3, #0]
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	029b      	lsls	r3, r3, #10
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	4313      	orrs	r3, r2
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1b2:	b29a      	uxth	r2, r3
 800e1b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e1b6:	801a      	strh	r2, [r3, #0]
 800e1b8:	e041      	b.n	800e23e <HAL_PCD_EP_DB_Transmit+0x77c>
 800e1ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d10a      	bne.n	800e1d8 <HAL_PCD_EP_DB_Transmit+0x716>
 800e1c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e1c4:	881b      	ldrh	r3, [r3, #0]
 800e1c6:	b29b      	uxth	r3, r3
 800e1c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1d0:	b29a      	uxth	r2, r3
 800e1d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e1d4:	801a      	strh	r2, [r3, #0]
 800e1d6:	e032      	b.n	800e23e <HAL_PCD_EP_DB_Transmit+0x77c>
 800e1d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e1dc:	085b      	lsrs	r3, r3, #1
 800e1de:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e1e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e1e4:	f003 0301 	and.w	r3, r3, #1
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d002      	beq.n	800e1f2 <HAL_PCD_EP_DB_Transmit+0x730>
 800e1ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e1f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e1f4:	881b      	ldrh	r3, [r3, #0]
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	029b      	lsls	r3, r3, #10
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	4313      	orrs	r3, r2
 800e202:	b29a      	uxth	r2, r3
 800e204:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e206:	801a      	strh	r2, [r3, #0]
 800e208:	e019      	b.n	800e23e <HAL_PCD_EP_DB_Transmit+0x77c>
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	785b      	ldrb	r3, [r3, #1]
 800e20e:	2b01      	cmp	r3, #1
 800e210:	d115      	bne.n	800e23e <HAL_PCD_EP_DB_Transmit+0x77c>
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	461a      	mov	r2, r3
 800e21e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e220:	4413      	add	r3, r2
 800e222:	657b      	str	r3, [r7, #84]	@ 0x54
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	00da      	lsls	r2, r3, #3
 800e22a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e22c:	4413      	add	r3, r2
 800e22e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e232:	653b      	str	r3, [r7, #80]	@ 0x50
 800e234:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e238:	b29a      	uxth	r2, r3
 800e23a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e23c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	6818      	ldr	r0, [r3, #0]
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	6959      	ldr	r1, [r3, #20]
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	895a      	ldrh	r2, [r3, #10]
 800e24a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e24e:	b29b      	uxth	r3, r3
 800e250:	f005 fada 	bl	8013808 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	461a      	mov	r2, r3
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	009b      	lsls	r3, r3, #2
 800e260:	4413      	add	r3, r2
 800e262:	881b      	ldrh	r3, [r3, #0]
 800e264:	b29b      	uxth	r3, r3
 800e266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e26a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e26e:	82bb      	strh	r3, [r7, #20]
 800e270:	8abb      	ldrh	r3, [r7, #20]
 800e272:	f083 0310 	eor.w	r3, r3, #16
 800e276:	82bb      	strh	r3, [r7, #20]
 800e278:	8abb      	ldrh	r3, [r7, #20]
 800e27a:	f083 0320 	eor.w	r3, r3, #32
 800e27e:	82bb      	strh	r3, [r7, #20]
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	461a      	mov	r2, r3
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	441a      	add	r2, r3
 800e28e:	8abb      	ldrh	r3, [r7, #20]
 800e290:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e294:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e298:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e29c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800e2a4:	2300      	movs	r3, #0
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3790      	adds	r7, #144	@ 0x90
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}

0800e2ae <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800e2ae:	b480      	push	{r7}
 800e2b0:	b087      	sub	sp, #28
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	60f8      	str	r0, [r7, #12]
 800e2b6:	607b      	str	r3, [r7, #4]
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	817b      	strh	r3, [r7, #10]
 800e2bc:	4613      	mov	r3, r2
 800e2be:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800e2c0:	897b      	ldrh	r3, [r7, #10]
 800e2c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d00b      	beq.n	800e2e4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e2cc:	897b      	ldrh	r3, [r7, #10]
 800e2ce:	f003 0207 	and.w	r2, r3, #7
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	4413      	add	r3, r2
 800e2d8:	00db      	lsls	r3, r3, #3
 800e2da:	3310      	adds	r3, #16
 800e2dc:	68fa      	ldr	r2, [r7, #12]
 800e2de:	4413      	add	r3, r2
 800e2e0:	617b      	str	r3, [r7, #20]
 800e2e2:	e009      	b.n	800e2f8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e2e4:	897a      	ldrh	r2, [r7, #10]
 800e2e6:	4613      	mov	r3, r2
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	4413      	add	r3, r2
 800e2ec:	00db      	lsls	r3, r3, #3
 800e2ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e2f2:	68fa      	ldr	r2, [r7, #12]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800e2f8:	893b      	ldrh	r3, [r7, #8]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d107      	bne.n	800e30e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	2200      	movs	r2, #0
 800e302:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	b29a      	uxth	r2, r3
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	80da      	strh	r2, [r3, #6]
 800e30c:	e00b      	b.n	800e326 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	2201      	movs	r2, #1
 800e312:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	b29a      	uxth	r2, r3
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	0c1b      	lsrs	r3, r3, #16
 800e320:	b29a      	uxth	r2, r3
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e326:	2300      	movs	r3, #0
}
 800e328:	4618      	mov	r0, r3
 800e32a:	371c      	adds	r7, #28
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr

0800e334 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e334:	b480      	push	{r7}
 800e336:	b085      	sub	sp, #20
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2201      	movs	r2, #1
 800e346:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2200      	movs	r2, #0
 800e34e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800e358:	b29b      	uxth	r3, r3
 800e35a:	f043 0301 	orr.w	r3, r3, #1
 800e35e:	b29a      	uxth	r2, r3
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	f043 0302 	orr.w	r3, r3, #2
 800e372:	b29a      	uxth	r2, r3
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800e37a:	2300      	movs	r3, #0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3714      	adds	r7, #20
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr

0800e388 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800e388:	b480      	push	{r7}
 800e38a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e38c:	4b05      	ldr	r3, [pc, #20]	@ (800e3a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a04      	ldr	r2, [pc, #16]	@ (800e3a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e396:	6013      	str	r3, [r2, #0]
}
 800e398:	bf00      	nop
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr
 800e3a2:	bf00      	nop
 800e3a4:	58000400 	.word	0x58000400

0800e3a8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800e3ac:	4b04      	ldr	r3, [pc, #16]	@ (800e3c0 <HAL_PWREx_GetVoltageRange+0x18>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr
 800e3be:	bf00      	nop
 800e3c0:	58000400 	.word	0x58000400

0800e3c4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800e3c8:	4b05      	ldr	r3, [pc, #20]	@ (800e3e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	4a04      	ldr	r2, [pc, #16]	@ (800e3e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800e3ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e3d2:	6053      	str	r3, [r2, #4]
}
 800e3d4:	bf00      	nop
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr
 800e3de:	bf00      	nop
 800e3e0:	58000400 	.word	0x58000400

0800e3e4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800e3e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e3f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e3f6:	d101      	bne.n	800e3fc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	e000      	b.n	800e3fe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800e3fc:	2300      	movs	r3, #0
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr

0800e408 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800e408:	b480      	push	{r7}
 800e40a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800e40c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e416:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e41a:	6013      	str	r3, [r2, #0]
}
 800e41c:	bf00      	nop
 800e41e:	46bd      	mov	sp, r7
 800e420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e424:	4770      	bx	lr

0800e426 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800e426:	b480      	push	{r7}
 800e428:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800e42a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e438:	6013      	str	r3, [r2, #0]
}
 800e43a:	bf00      	nop
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800e444:	b480      	push	{r7}
 800e446:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800e448:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e452:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e456:	d101      	bne.n	800e45c <LL_RCC_HSE_IsReady+0x18>
 800e458:	2301      	movs	r3, #1
 800e45a:	e000      	b.n	800e45e <LL_RCC_HSE_IsReady+0x1a>
 800e45c:	2300      	movs	r3, #0
}
 800e45e:	4618      	mov	r0, r3
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800e468:	b480      	push	{r7}
 800e46a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800e46c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e47a:	6013      	str	r3, [r2, #0]
}
 800e47c:	bf00      	nop
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr

0800e486 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800e486:	b480      	push	{r7}
 800e488:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800e48a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e494:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e498:	6013      	str	r3, [r2, #0]
}
 800e49a:	bf00      	nop
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr

0800e4a4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e4a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e4b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e4b6:	d101      	bne.n	800e4bc <LL_RCC_HSI_IsReady+0x18>
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	e000      	b.n	800e4be <LL_RCC_HSI_IsReady+0x1a>
 800e4bc:	2300      	movs	r3, #0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr

0800e4c8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800e4d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	061b      	lsls	r3, r3, #24
 800e4de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e4e2:	4313      	orrs	r3, r2
 800e4e4:	604b      	str	r3, [r1, #4]
}
 800e4e6:	bf00      	nop
 800e4e8:	370c      	adds	r7, #12
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr

0800e4f2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800e4f2:	b480      	push	{r7}
 800e4f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800e4f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e4fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e502:	f043 0301 	orr.w	r3, r3, #1
 800e506:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800e50a:	bf00      	nop
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr

0800e514 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800e514:	b480      	push	{r7}
 800e516:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800e518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e51c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e520:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e524:	f023 0301 	bic.w	r3, r3, #1
 800e528:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800e52c:	bf00      	nop
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr

0800e536 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800e536:	b480      	push	{r7}
 800e538:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800e53a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e53e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e542:	f003 0302 	and.w	r3, r3, #2
 800e546:	2b02      	cmp	r3, #2
 800e548:	d101      	bne.n	800e54e <LL_RCC_HSI48_IsReady+0x18>
 800e54a:	2301      	movs	r3, #1
 800e54c:	e000      	b.n	800e550 <LL_RCC_HSI48_IsReady+0x1a>
 800e54e:	2300      	movs	r3, #0
}
 800e550:	4618      	mov	r0, r3
 800e552:	46bd      	mov	sp, r7
 800e554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e558:	4770      	bx	lr

0800e55a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800e55a:	b480      	push	{r7}
 800e55c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e55e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e566:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e56a:	f043 0301 	orr.w	r3, r3, #1
 800e56e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e572:	bf00      	nop
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr

0800e57c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800e57c:	b480      	push	{r7}
 800e57e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e588:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e58c:	f023 0301 	bic.w	r3, r3, #1
 800e590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e594:	bf00      	nop
 800e596:	46bd      	mov	sp, r7
 800e598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59c:	4770      	bx	lr

0800e59e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800e59e:	b480      	push	{r7}
 800e5a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e5a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e5ae:	f043 0304 	orr.w	r3, r3, #4
 800e5b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e5b6:	bf00      	nop
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e5c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e5d0:	f023 0304 	bic.w	r3, r3, #4
 800e5d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e5d8:	bf00      	nop
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e0:	4770      	bx	lr

0800e5e2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800e5e2:	b480      	push	{r7}
 800e5e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e5e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5ee:	f003 0302 	and.w	r3, r3, #2
 800e5f2:	2b02      	cmp	r3, #2
 800e5f4:	d101      	bne.n	800e5fa <LL_RCC_LSE_IsReady+0x18>
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	e000      	b.n	800e5fc <LL_RCC_LSE_IsReady+0x1a>
 800e5fa:	2300      	movs	r3, #0
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr

0800e606 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800e606:	b480      	push	{r7}
 800e608:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e60a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e60e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e612:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e616:	f043 0301 	orr.w	r3, r3, #1
 800e61a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e61e:	bf00      	nop
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800e628:	b480      	push	{r7}
 800e62a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e62c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e630:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e634:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e638:	f023 0301 	bic.w	r3, r3, #1
 800e63c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e640:	bf00      	nop
 800e642:	46bd      	mov	sp, r7
 800e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e648:	4770      	bx	lr

0800e64a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800e64a:	b480      	push	{r7}
 800e64c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800e64e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e656:	f003 0302 	and.w	r3, r3, #2
 800e65a:	2b02      	cmp	r3, #2
 800e65c:	d101      	bne.n	800e662 <LL_RCC_LSI1_IsReady+0x18>
 800e65e:	2301      	movs	r3, #1
 800e660:	e000      	b.n	800e664 <LL_RCC_LSI1_IsReady+0x1a>
 800e662:	2300      	movs	r3, #0
}
 800e664:	4618      	mov	r0, r3
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr

0800e66e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800e66e:	b480      	push	{r7}
 800e670:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e67a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e67e:	f043 0304 	orr.w	r3, r3, #4
 800e682:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e686:	bf00      	nop
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr

0800e690 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800e690:	b480      	push	{r7}
 800e692:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e698:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e69c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e6a0:	f023 0304 	bic.w	r3, r3, #4
 800e6a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800e6a8:	bf00      	nop
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr

0800e6b2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800e6b2:	b480      	push	{r7}
 800e6b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800e6b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e6be:	f003 0308 	and.w	r3, r3, #8
 800e6c2:	2b08      	cmp	r3, #8
 800e6c4:	d101      	bne.n	800e6ca <LL_RCC_LSI2_IsReady+0x18>
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e000      	b.n	800e6cc <LL_RCC_LSI2_IsReady+0x1a>
 800e6ca:	2300      	movs	r3, #0
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d4:	4770      	bx	lr

0800e6d6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800e6d6:	b480      	push	{r7}
 800e6d8:	b083      	sub	sp, #12
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800e6de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e6e6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	021b      	lsls	r3, r3, #8
 800e6ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800e6f8:	bf00      	nop
 800e6fa:	370c      	adds	r7, #12
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e702:	4770      	bx	lr

0800e704 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800e704:	b480      	push	{r7}
 800e706:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800e708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e712:	f043 0301 	orr.w	r3, r3, #1
 800e716:	6013      	str	r3, [r2, #0]
}
 800e718:	bf00      	nop
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr

0800e722 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800e722:	b480      	push	{r7}
 800e724:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800e726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e730:	f023 0301 	bic.w	r3, r3, #1
 800e734:	6013      	str	r3, [r2, #0]
}
 800e736:	bf00      	nop
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr

0800e740 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800e740:	b480      	push	{r7}
 800e742:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800e744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f003 0302 	and.w	r3, r3, #2
 800e74e:	2b02      	cmp	r3, #2
 800e750:	d101      	bne.n	800e756 <LL_RCC_MSI_IsReady+0x16>
 800e752:	2301      	movs	r3, #1
 800e754:	e000      	b.n	800e758 <LL_RCC_MSI_IsReady+0x18>
 800e756:	2300      	movs	r3, #0
}
 800e758:	4618      	mov	r0, r3
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr

0800e762 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800e762:	b480      	push	{r7}
 800e764:	b083      	sub	sp, #12
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800e76a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e774:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	4313      	orrs	r3, r2
 800e77c:	600b      	str	r3, [r1, #0]
}
 800e77e:	bf00      	nop
 800e780:	370c      	adds	r7, #12
 800e782:	46bd      	mov	sp, r7
 800e784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e788:	4770      	bx	lr

0800e78a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800e78a:	b480      	push	{r7}
 800e78c:	b083      	sub	sp, #12
 800e78e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800e790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e79a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2bb0      	cmp	r3, #176	@ 0xb0
 800e7a0:	d901      	bls.n	800e7a6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800e7a2:	23b0      	movs	r3, #176	@ 0xb0
 800e7a4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800e7a6:	687b      	ldr	r3, [r7, #4]
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	370c      	adds	r7, #12
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b2:	4770      	bx	lr

0800e7b4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800e7bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	021b      	lsls	r3, r3, #8
 800e7ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e7ce:	4313      	orrs	r3, r2
 800e7d0:	604b      	str	r3, [r1, #4]
}
 800e7d2:	bf00      	nop
 800e7d4:	370c      	adds	r7, #12
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr

0800e7de <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800e7de:	b480      	push	{r7}
 800e7e0:	b083      	sub	sp, #12
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800e7e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	f023 0203 	bic.w	r2, r3, #3
 800e7f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	4313      	orrs	r3, r2
 800e7f8:	608b      	str	r3, [r1, #8]
}
 800e7fa:	bf00      	nop
 800e7fc:	370c      	adds	r7, #12
 800e7fe:	46bd      	mov	sp, r7
 800e800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e804:	4770      	bx	lr

0800e806 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800e806:	b480      	push	{r7}
 800e808:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e80a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	f003 030c 	and.w	r3, r3, #12
}
 800e814:	4618      	mov	r0, r3
 800e816:	46bd      	mov	sp, r7
 800e818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81c:	4770      	bx	lr

0800e81e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800e81e:	b480      	push	{r7}
 800e820:	b083      	sub	sp, #12
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800e826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e82a:	689b      	ldr	r3, [r3, #8]
 800e82c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e830:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4313      	orrs	r3, r2
 800e838:	608b      	str	r3, [r1, #8]
}
 800e83a:	bf00      	nop
 800e83c:	370c      	adds	r7, #12
 800e83e:	46bd      	mov	sp, r7
 800e840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e844:	4770      	bx	lr

0800e846 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800e846:	b480      	push	{r7}
 800e848:	b083      	sub	sp, #12
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800e84e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e852:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e856:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e85a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	4313      	orrs	r3, r2
 800e862:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800e866:	bf00      	nop
 800e868:	370c      	adds	r7, #12
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr

0800e872 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800e872:	b480      	push	{r7}
 800e874:	b083      	sub	sp, #12
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800e87a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e87e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e882:	f023 020f 	bic.w	r2, r3, #15
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	091b      	lsrs	r3, r3, #4
 800e88a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e88e:	4313      	orrs	r3, r2
 800e890:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800e894:	bf00      	nop
 800e896:	370c      	adds	r7, #12
 800e898:	46bd      	mov	sp, r7
 800e89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89e:	4770      	bx	lr

0800e8a0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800e8a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e8ac:	689b      	ldr	r3, [r3, #8]
 800e8ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e8b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	4313      	orrs	r3, r2
 800e8ba:	608b      	str	r3, [r1, #8]
}
 800e8bc:	bf00      	nop
 800e8be:	370c      	adds	r7, #12
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800e8d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e8d4:	689b      	ldr	r3, [r3, #8]
 800e8d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800e8da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	4313      	orrs	r3, r2
 800e8e2:	608b      	str	r3, [r1, #8]
}
 800e8e4:	bf00      	nop
 800e8e6:	370c      	adds	r7, #12
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr

0800e8f0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800e8f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e8f8:	689b      	ldr	r3, [r3, #8]
 800e8fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr

0800e908 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800e908:	b480      	push	{r7}
 800e90a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800e90c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e910:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e914:	011b      	lsls	r3, r3, #4
 800e916:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr

0800e924 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800e924:	b480      	push	{r7}
 800e926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800e928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e92c:	689b      	ldr	r3, [r3, #8]
 800e92e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800e932:	4618      	mov	r0, r3
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr

0800e93c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800e93c:	b480      	push	{r7}
 800e93e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800e940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e944:	689b      	ldr	r3, [r3, #8]
 800e946:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr

0800e954 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800e954:	b480      	push	{r7}
 800e956:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800e958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e966:	6013      	str	r3, [r2, #0]
}
 800e968:	bf00      	nop
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr

0800e972 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800e972:	b480      	push	{r7}
 800e974:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800e976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e980:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e984:	6013      	str	r3, [r2, #0]
}
 800e986:	bf00      	nop
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr

0800e990 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800e990:	b480      	push	{r7}
 800e992:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800e994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e99e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e9a2:	d101      	bne.n	800e9a8 <LL_RCC_PLL_IsReady+0x18>
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	e000      	b.n	800e9aa <LL_RCC_PLL_IsReady+0x1a>
 800e9a8:	2300      	movs	r3, #0
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800e9b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	0a1b      	lsrs	r3, r3, #8
 800e9c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9cc:	4770      	bx	lr

0800e9ce <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800e9ce:	b480      	push	{r7}
 800e9d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800e9d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e9d6:	68db      	ldr	r3, [r3, #12]
 800e9d8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr

0800e9e6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800e9e6:	b480      	push	{r7}
 800e9e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800e9ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e9ee:	68db      	ldr	r3, [r3, #12]
 800e9f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fc:	4770      	bx	lr

0800e9fe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800e9fe:	b480      	push	{r7}
 800ea00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ea02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	f003 0303 	and.w	r3, r3, #3
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr

0800ea16 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800ea16:	b480      	push	{r7}
 800ea18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800ea1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea1e:	689b      	ldr	r3, [r3, #8]
 800ea20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea28:	d101      	bne.n	800ea2e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	e000      	b.n	800ea30 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800ea2e:	2300      	movs	r3, #0
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr

0800ea3a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800ea3a:	b480      	push	{r7}
 800ea3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800ea3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea42:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ea46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ea4e:	d101      	bne.n	800ea54 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800ea50:	2301      	movs	r3, #1
 800ea52:	e000      	b.n	800ea56 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800ea54:	2300      	movs	r3, #0
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr

0800ea60 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800ea60:	b480      	push	{r7}
 800ea62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800ea64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea68:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ea6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea74:	d101      	bne.n	800ea7a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800ea76:	2301      	movs	r3, #1
 800ea78:	e000      	b.n	800ea7c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800ea7a:	2300      	movs	r3, #0
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea84:	4770      	bx	lr

0800ea86 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800ea86:	b480      	push	{r7}
 800ea88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800ea8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea8e:	689b      	ldr	r3, [r3, #8]
 800ea90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ea98:	d101      	bne.n	800ea9e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	e000      	b.n	800eaa0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800ea9e:	2300      	movs	r3, #0
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr

0800eaaa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800eaaa:	b480      	push	{r7}
 800eaac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800eaae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eab2:	689b      	ldr	r3, [r3, #8]
 800eab4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800eab8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800eabc:	d101      	bne.n	800eac2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800eabe:	2301      	movs	r3, #1
 800eac0:	e000      	b.n	800eac4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800eac2:	2300      	movs	r3, #0
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr
	...

0800ead0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ead0:	b590      	push	{r4, r7, lr}
 800ead2:	b08d      	sub	sp, #52	@ 0x34
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d101      	bne.n	800eae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800eade:	2301      	movs	r3, #1
 800eae0:	e363      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f003 0320 	and.w	r3, r3, #32
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	f000 808d 	beq.w	800ec0a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eaf0:	f7ff fe89 	bl	800e806 <LL_RCC_GetSysClkSource>
 800eaf4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800eaf6:	f7ff ff82 	bl	800e9fe <LL_RCC_PLL_GetMainSource>
 800eafa:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800eafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d005      	beq.n	800eb0e <HAL_RCC_OscConfig+0x3e>
 800eb02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb04:	2b0c      	cmp	r3, #12
 800eb06:	d147      	bne.n	800eb98 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800eb08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d144      	bne.n	800eb98 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	69db      	ldr	r3, [r3, #28]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d101      	bne.n	800eb1a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800eb16:	2301      	movs	r3, #1
 800eb18:	e347      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800eb1e:	f7ff fe34 	bl	800e78a <LL_RCC_MSI_GetRange>
 800eb22:	4603      	mov	r3, r0
 800eb24:	429c      	cmp	r4, r3
 800eb26:	d914      	bls.n	800eb52 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f000 fd2f 	bl	800f590 <RCC_SetFlashLatencyFromMSIRange>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d001      	beq.n	800eb3c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	e336      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb40:	4618      	mov	r0, r3
 800eb42:	f7ff fe0e 	bl	800e762 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6a1b      	ldr	r3, [r3, #32]
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7ff fe32 	bl	800e7b4 <LL_RCC_MSI_SetCalibTrimming>
 800eb50:	e013      	b.n	800eb7a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7ff fe03 	bl	800e762 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6a1b      	ldr	r3, [r3, #32]
 800eb60:	4618      	mov	r0, r3
 800eb62:	f7ff fe27 	bl	800e7b4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f000 fd10 	bl	800f590 <RCC_SetFlashLatencyFromMSIRange>
 800eb70:	4603      	mov	r3, r0
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d001      	beq.n	800eb7a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800eb76:	2301      	movs	r3, #1
 800eb78:	e317      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800eb7a:	f000 fcc9 	bl	800f510 <HAL_RCC_GetHCLKFreq>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	4aa4      	ldr	r2, [pc, #656]	@ (800ee14 <HAL_RCC_OscConfig+0x344>)
 800eb82:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800eb84:	4ba4      	ldr	r3, [pc, #656]	@ (800ee18 <HAL_RCC_OscConfig+0x348>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fa fa2f 	bl	8008fec <HAL_InitTick>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d039      	beq.n	800ec08 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800eb94:	2301      	movs	r3, #1
 800eb96:	e308      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	69db      	ldr	r3, [r3, #28]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d01e      	beq.n	800ebde <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800eba0:	f7ff fdb0 	bl	800e704 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800eba4:	f7fa fa70 	bl	8009088 <HAL_GetTick>
 800eba8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800ebaa:	e008      	b.n	800ebbe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ebac:	f7fa fa6c 	bl	8009088 <HAL_GetTick>
 800ebb0:	4602      	mov	r2, r0
 800ebb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebb4:	1ad3      	subs	r3, r2, r3
 800ebb6:	2b02      	cmp	r3, #2
 800ebb8:	d901      	bls.n	800ebbe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800ebba:	2303      	movs	r3, #3
 800ebbc:	e2f5      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800ebbe:	f7ff fdbf 	bl	800e740 <LL_RCC_MSI_IsReady>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d0f1      	beq.n	800ebac <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7ff fdc8 	bl	800e762 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6a1b      	ldr	r3, [r3, #32]
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7ff fdec 	bl	800e7b4 <LL_RCC_MSI_SetCalibTrimming>
 800ebdc:	e015      	b.n	800ec0a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ebde:	f7ff fda0 	bl	800e722 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ebe2:	f7fa fa51 	bl	8009088 <HAL_GetTick>
 800ebe6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800ebe8:	e008      	b.n	800ebfc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ebea:	f7fa fa4d 	bl	8009088 <HAL_GetTick>
 800ebee:	4602      	mov	r2, r0
 800ebf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebf2:	1ad3      	subs	r3, r2, r3
 800ebf4:	2b02      	cmp	r3, #2
 800ebf6:	d901      	bls.n	800ebfc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800ebf8:	2303      	movs	r3, #3
 800ebfa:	e2d6      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800ebfc:	f7ff fda0 	bl	800e740 <LL_RCC_MSI_IsReady>
 800ec00:	4603      	mov	r3, r0
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d1f1      	bne.n	800ebea <HAL_RCC_OscConfig+0x11a>
 800ec06:	e000      	b.n	800ec0a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800ec08:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f003 0301 	and.w	r3, r3, #1
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d047      	beq.n	800eca6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ec16:	f7ff fdf6 	bl	800e806 <LL_RCC_GetSysClkSource>
 800ec1a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ec1c:	f7ff feef 	bl	800e9fe <LL_RCC_PLL_GetMainSource>
 800ec20:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800ec22:	6a3b      	ldr	r3, [r7, #32]
 800ec24:	2b08      	cmp	r3, #8
 800ec26:	d005      	beq.n	800ec34 <HAL_RCC_OscConfig+0x164>
 800ec28:	6a3b      	ldr	r3, [r7, #32]
 800ec2a:	2b0c      	cmp	r3, #12
 800ec2c:	d108      	bne.n	800ec40 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	2b03      	cmp	r3, #3
 800ec32:	d105      	bne.n	800ec40 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d134      	bne.n	800eca6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	e2b4      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec48:	d102      	bne.n	800ec50 <HAL_RCC_OscConfig+0x180>
 800ec4a:	f7ff fbdd 	bl	800e408 <LL_RCC_HSE_Enable>
 800ec4e:	e001      	b.n	800ec54 <HAL_RCC_OscConfig+0x184>
 800ec50:	f7ff fbe9 	bl	800e426 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d012      	beq.n	800ec82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec5c:	f7fa fa14 	bl	8009088 <HAL_GetTick>
 800ec60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800ec62:	e008      	b.n	800ec76 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ec64:	f7fa fa10 	bl	8009088 <HAL_GetTick>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec6c:	1ad3      	subs	r3, r2, r3
 800ec6e:	2b64      	cmp	r3, #100	@ 0x64
 800ec70:	d901      	bls.n	800ec76 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ec72:	2303      	movs	r3, #3
 800ec74:	e299      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800ec76:	f7ff fbe5 	bl	800e444 <LL_RCC_HSE_IsReady>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d0f1      	beq.n	800ec64 <HAL_RCC_OscConfig+0x194>
 800ec80:	e011      	b.n	800eca6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec82:	f7fa fa01 	bl	8009088 <HAL_GetTick>
 800ec86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800ec88:	e008      	b.n	800ec9c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ec8a:	f7fa f9fd 	bl	8009088 <HAL_GetTick>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec92:	1ad3      	subs	r3, r2, r3
 800ec94:	2b64      	cmp	r3, #100	@ 0x64
 800ec96:	d901      	bls.n	800ec9c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ec98:	2303      	movs	r3, #3
 800ec9a:	e286      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800ec9c:	f7ff fbd2 	bl	800e444 <LL_RCC_HSE_IsReady>
 800eca0:	4603      	mov	r3, r0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d1f1      	bne.n	800ec8a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f003 0302 	and.w	r3, r3, #2
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d04c      	beq.n	800ed4c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ecb2:	f7ff fda8 	bl	800e806 <LL_RCC_GetSysClkSource>
 800ecb6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ecb8:	f7ff fea1 	bl	800e9fe <LL_RCC_PLL_GetMainSource>
 800ecbc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800ecbe:	69bb      	ldr	r3, [r7, #24]
 800ecc0:	2b04      	cmp	r3, #4
 800ecc2:	d005      	beq.n	800ecd0 <HAL_RCC_OscConfig+0x200>
 800ecc4:	69bb      	ldr	r3, [r7, #24]
 800ecc6:	2b0c      	cmp	r3, #12
 800ecc8:	d10e      	bne.n	800ece8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	2b02      	cmp	r3, #2
 800ecce:	d10b      	bne.n	800ece8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d101      	bne.n	800ecdc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e266      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	691b      	ldr	r3, [r3, #16]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7ff fbf1 	bl	800e4c8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800ece6:	e031      	b.n	800ed4c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	68db      	ldr	r3, [r3, #12]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d019      	beq.n	800ed24 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ecf0:	f7ff fbba 	bl	800e468 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ecf4:	f7fa f9c8 	bl	8009088 <HAL_GetTick>
 800ecf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800ecfa:	e008      	b.n	800ed0e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ecfc:	f7fa f9c4 	bl	8009088 <HAL_GetTick>
 800ed00:	4602      	mov	r2, r0
 800ed02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed04:	1ad3      	subs	r3, r2, r3
 800ed06:	2b02      	cmp	r3, #2
 800ed08:	d901      	bls.n	800ed0e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800ed0a:	2303      	movs	r3, #3
 800ed0c:	e24d      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800ed0e:	f7ff fbc9 	bl	800e4a4 <LL_RCC_HSI_IsReady>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d0f1      	beq.n	800ecfc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	691b      	ldr	r3, [r3, #16]
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7ff fbd3 	bl	800e4c8 <LL_RCC_HSI_SetCalibTrimming>
 800ed22:	e013      	b.n	800ed4c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ed24:	f7ff fbaf 	bl	800e486 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed28:	f7fa f9ae 	bl	8009088 <HAL_GetTick>
 800ed2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800ed2e:	e008      	b.n	800ed42 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ed30:	f7fa f9aa 	bl	8009088 <HAL_GetTick>
 800ed34:	4602      	mov	r2, r0
 800ed36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed38:	1ad3      	subs	r3, r2, r3
 800ed3a:	2b02      	cmp	r3, #2
 800ed3c:	d901      	bls.n	800ed42 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800ed3e:	2303      	movs	r3, #3
 800ed40:	e233      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800ed42:	f7ff fbaf 	bl	800e4a4 <LL_RCC_HSI_IsReady>
 800ed46:	4603      	mov	r3, r0
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d1f1      	bne.n	800ed30 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f003 0308 	and.w	r3, r3, #8
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d106      	bne.n	800ed66 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	f000 80a3 	beq.w	800eeac <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	695b      	ldr	r3, [r3, #20]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d076      	beq.n	800ee5c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f003 0310 	and.w	r3, r3, #16
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d046      	beq.n	800ee08 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800ed7a:	f7ff fc66 	bl	800e64a <LL_RCC_LSI1_IsReady>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d113      	bne.n	800edac <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800ed84:	f7ff fc3f 	bl	800e606 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ed88:	f7fa f97e 	bl	8009088 <HAL_GetTick>
 800ed8c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800ed8e:	e008      	b.n	800eda2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ed90:	f7fa f97a 	bl	8009088 <HAL_GetTick>
 800ed94:	4602      	mov	r2, r0
 800ed96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed98:	1ad3      	subs	r3, r2, r3
 800ed9a:	2b02      	cmp	r3, #2
 800ed9c:	d901      	bls.n	800eda2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800ed9e:	2303      	movs	r3, #3
 800eda0:	e203      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800eda2:	f7ff fc52 	bl	800e64a <LL_RCC_LSI1_IsReady>
 800eda6:	4603      	mov	r3, r0
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d0f1      	beq.n	800ed90 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800edac:	f7ff fc5f 	bl	800e66e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800edb0:	f7fa f96a 	bl	8009088 <HAL_GetTick>
 800edb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800edb6:	e008      	b.n	800edca <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800edb8:	f7fa f966 	bl	8009088 <HAL_GetTick>
 800edbc:	4602      	mov	r2, r0
 800edbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edc0:	1ad3      	subs	r3, r2, r3
 800edc2:	2b03      	cmp	r3, #3
 800edc4:	d901      	bls.n	800edca <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800edc6:	2303      	movs	r3, #3
 800edc8:	e1ef      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800edca:	f7ff fc72 	bl	800e6b2 <LL_RCC_LSI2_IsReady>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d0f1      	beq.n	800edb8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	699b      	ldr	r3, [r3, #24]
 800edd8:	4618      	mov	r0, r3
 800edda:	f7ff fc7c 	bl	800e6d6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800edde:	f7ff fc23 	bl	800e628 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ede2:	f7fa f951 	bl	8009088 <HAL_GetTick>
 800ede6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ede8:	e008      	b.n	800edfc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800edea:	f7fa f94d 	bl	8009088 <HAL_GetTick>
 800edee:	4602      	mov	r2, r0
 800edf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edf2:	1ad3      	subs	r3, r2, r3
 800edf4:	2b02      	cmp	r3, #2
 800edf6:	d901      	bls.n	800edfc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800edf8:	2303      	movs	r3, #3
 800edfa:	e1d6      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800edfc:	f7ff fc25 	bl	800e64a <LL_RCC_LSI1_IsReady>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d1f1      	bne.n	800edea <HAL_RCC_OscConfig+0x31a>
 800ee06:	e051      	b.n	800eeac <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800ee08:	f7ff fbfd 	bl	800e606 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ee0c:	f7fa f93c 	bl	8009088 <HAL_GetTick>
 800ee10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ee12:	e00c      	b.n	800ee2e <HAL_RCC_OscConfig+0x35e>
 800ee14:	2000001c 	.word	0x2000001c
 800ee18:	2000003c 	.word	0x2000003c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ee1c:	f7fa f934 	bl	8009088 <HAL_GetTick>
 800ee20:	4602      	mov	r2, r0
 800ee22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee24:	1ad3      	subs	r3, r2, r3
 800ee26:	2b02      	cmp	r3, #2
 800ee28:	d901      	bls.n	800ee2e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800ee2a:	2303      	movs	r3, #3
 800ee2c:	e1bd      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ee2e:	f7ff fc0c 	bl	800e64a <LL_RCC_LSI1_IsReady>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d0f1      	beq.n	800ee1c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800ee38:	f7ff fc2a 	bl	800e690 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ee3c:	e008      	b.n	800ee50 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ee3e:	f7fa f923 	bl	8009088 <HAL_GetTick>
 800ee42:	4602      	mov	r2, r0
 800ee44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee46:	1ad3      	subs	r3, r2, r3
 800ee48:	2b03      	cmp	r3, #3
 800ee4a:	d901      	bls.n	800ee50 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800ee4c:	2303      	movs	r3, #3
 800ee4e:	e1ac      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ee50:	f7ff fc2f 	bl	800e6b2 <LL_RCC_LSI2_IsReady>
 800ee54:	4603      	mov	r3, r0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d1f1      	bne.n	800ee3e <HAL_RCC_OscConfig+0x36e>
 800ee5a:	e027      	b.n	800eeac <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800ee5c:	f7ff fc18 	bl	800e690 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee60:	f7fa f912 	bl	8009088 <HAL_GetTick>
 800ee64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ee66:	e008      	b.n	800ee7a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ee68:	f7fa f90e 	bl	8009088 <HAL_GetTick>
 800ee6c:	4602      	mov	r2, r0
 800ee6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee70:	1ad3      	subs	r3, r2, r3
 800ee72:	2b03      	cmp	r3, #3
 800ee74:	d901      	bls.n	800ee7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800ee76:	2303      	movs	r3, #3
 800ee78:	e197      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ee7a:	f7ff fc1a 	bl	800e6b2 <LL_RCC_LSI2_IsReady>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d1f1      	bne.n	800ee68 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800ee84:	f7ff fbd0 	bl	800e628 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee88:	f7fa f8fe 	bl	8009088 <HAL_GetTick>
 800ee8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ee8e:	e008      	b.n	800eea2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ee90:	f7fa f8fa 	bl	8009088 <HAL_GetTick>
 800ee94:	4602      	mov	r2, r0
 800ee96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee98:	1ad3      	subs	r3, r2, r3
 800ee9a:	2b02      	cmp	r3, #2
 800ee9c:	d901      	bls.n	800eea2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800ee9e:	2303      	movs	r3, #3
 800eea0:	e183      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800eea2:	f7ff fbd2 	bl	800e64a <LL_RCC_LSI1_IsReady>
 800eea6:	4603      	mov	r3, r0
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d1f1      	bne.n	800ee90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f003 0304 	and.w	r3, r3, #4
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d05b      	beq.n	800ef70 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800eeb8:	4ba7      	ldr	r3, [pc, #668]	@ (800f158 <HAL_RCC_OscConfig+0x688>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d114      	bne.n	800eeee <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800eec4:	f7ff fa60 	bl	800e388 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800eec8:	f7fa f8de 	bl	8009088 <HAL_GetTick>
 800eecc:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800eece:	e008      	b.n	800eee2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eed0:	f7fa f8da 	bl	8009088 <HAL_GetTick>
 800eed4:	4602      	mov	r2, r0
 800eed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eed8:	1ad3      	subs	r3, r2, r3
 800eeda:	2b02      	cmp	r3, #2
 800eedc:	d901      	bls.n	800eee2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800eede:	2303      	movs	r3, #3
 800eee0:	e163      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800eee2:	4b9d      	ldr	r3, [pc, #628]	@ (800f158 <HAL_RCC_OscConfig+0x688>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d0f0      	beq.n	800eed0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	689b      	ldr	r3, [r3, #8]
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	d102      	bne.n	800eefc <HAL_RCC_OscConfig+0x42c>
 800eef6:	f7ff fb30 	bl	800e55a <LL_RCC_LSE_Enable>
 800eefa:	e00c      	b.n	800ef16 <HAL_RCC_OscConfig+0x446>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	689b      	ldr	r3, [r3, #8]
 800ef00:	2b05      	cmp	r3, #5
 800ef02:	d104      	bne.n	800ef0e <HAL_RCC_OscConfig+0x43e>
 800ef04:	f7ff fb4b 	bl	800e59e <LL_RCC_LSE_EnableBypass>
 800ef08:	f7ff fb27 	bl	800e55a <LL_RCC_LSE_Enable>
 800ef0c:	e003      	b.n	800ef16 <HAL_RCC_OscConfig+0x446>
 800ef0e:	f7ff fb35 	bl	800e57c <LL_RCC_LSE_Disable>
 800ef12:	f7ff fb55 	bl	800e5c0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	689b      	ldr	r3, [r3, #8]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d014      	beq.n	800ef48 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef1e:	f7fa f8b3 	bl	8009088 <HAL_GetTick>
 800ef22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800ef24:	e00a      	b.n	800ef3c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef26:	f7fa f8af 	bl	8009088 <HAL_GetTick>
 800ef2a:	4602      	mov	r2, r0
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef2e:	1ad3      	subs	r3, r2, r3
 800ef30:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d901      	bls.n	800ef3c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800ef38:	2303      	movs	r3, #3
 800ef3a:	e136      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800ef3c:	f7ff fb51 	bl	800e5e2 <LL_RCC_LSE_IsReady>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d0ef      	beq.n	800ef26 <HAL_RCC_OscConfig+0x456>
 800ef46:	e013      	b.n	800ef70 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef48:	f7fa f89e 	bl	8009088 <HAL_GetTick>
 800ef4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800ef4e:	e00a      	b.n	800ef66 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef50:	f7fa f89a 	bl	8009088 <HAL_GetTick>
 800ef54:	4602      	mov	r2, r0
 800ef56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef58:	1ad3      	subs	r3, r2, r3
 800ef5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d901      	bls.n	800ef66 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800ef62:	2303      	movs	r3, #3
 800ef64:	e121      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800ef66:	f7ff fb3c 	bl	800e5e2 <LL_RCC_LSE_IsReady>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d1ef      	bne.n	800ef50 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d02c      	beq.n	800efd6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d014      	beq.n	800efae <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ef84:	f7ff fab5 	bl	800e4f2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef88:	f7fa f87e 	bl	8009088 <HAL_GetTick>
 800ef8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ef8e:	e008      	b.n	800efa2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ef90:	f7fa f87a 	bl	8009088 <HAL_GetTick>
 800ef94:	4602      	mov	r2, r0
 800ef96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef98:	1ad3      	subs	r3, r2, r3
 800ef9a:	2b02      	cmp	r3, #2
 800ef9c:	d901      	bls.n	800efa2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800ef9e:	2303      	movs	r3, #3
 800efa0:	e103      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800efa2:	f7ff fac8 	bl	800e536 <LL_RCC_HSI48_IsReady>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d0f1      	beq.n	800ef90 <HAL_RCC_OscConfig+0x4c0>
 800efac:	e013      	b.n	800efd6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800efae:	f7ff fab1 	bl	800e514 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800efb2:	f7fa f869 	bl	8009088 <HAL_GetTick>
 800efb6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800efb8:	e008      	b.n	800efcc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800efba:	f7fa f865 	bl	8009088 <HAL_GetTick>
 800efbe:	4602      	mov	r2, r0
 800efc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efc2:	1ad3      	subs	r3, r2, r3
 800efc4:	2b02      	cmp	r3, #2
 800efc6:	d901      	bls.n	800efcc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800efc8:	2303      	movs	r3, #3
 800efca:	e0ee      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800efcc:	f7ff fab3 	bl	800e536 <LL_RCC_HSI48_IsReady>
 800efd0:	4603      	mov	r3, r0
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d1f1      	bne.n	800efba <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efda:	2b00      	cmp	r3, #0
 800efdc:	f000 80e4 	beq.w	800f1a8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800efe0:	f7ff fc11 	bl	800e806 <LL_RCC_GetSysClkSource>
 800efe4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800efe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eff2:	2b02      	cmp	r3, #2
 800eff4:	f040 80b4 	bne.w	800f160 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f003 0203 	and.w	r2, r3, #3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f002:	429a      	cmp	r2, r3
 800f004:	d123      	bne.n	800f04e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f010:	429a      	cmp	r2, r3
 800f012:	d11c      	bne.n	800f04e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	0a1b      	lsrs	r3, r3, #8
 800f018:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f020:	429a      	cmp	r2, r3
 800f022:	d114      	bne.n	800f04e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800f02e:	429a      	cmp	r2, r3
 800f030:	d10d      	bne.n	800f04e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d106      	bne.n	800f04e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d05d      	beq.n	800f10a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	2b0c      	cmp	r3, #12
 800f052:	d058      	beq.n	800f106 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800f054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d001      	beq.n	800f066 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800f062:	2301      	movs	r3, #1
 800f064:	e0a1      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800f066:	f7ff fc84 	bl	800e972 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f06a:	f7fa f80d 	bl	8009088 <HAL_GetTick>
 800f06e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f070:	e008      	b.n	800f084 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f072:	f7fa f809 	bl	8009088 <HAL_GetTick>
 800f076:	4602      	mov	r2, r0
 800f078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f07a:	1ad3      	subs	r3, r2, r3
 800f07c:	2b02      	cmp	r3, #2
 800f07e:	d901      	bls.n	800f084 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800f080:	2303      	movs	r3, #3
 800f082:	e092      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d1ef      	bne.n	800f072 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f092:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f096:	68da      	ldr	r2, [r3, #12]
 800f098:	4b30      	ldr	r3, [pc, #192]	@ (800f15c <HAL_RCC_OscConfig+0x68c>)
 800f09a:	4013      	ands	r3, r2
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f0a4:	4311      	orrs	r1, r2
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800f0aa:	0212      	lsls	r2, r2, #8
 800f0ac:	4311      	orrs	r1, r2
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800f0b2:	4311      	orrs	r1, r2
 800f0b4:	687a      	ldr	r2, [r7, #4]
 800f0b6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800f0b8:	4311      	orrs	r1, r2
 800f0ba:	687a      	ldr	r2, [r7, #4]
 800f0bc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800f0be:	430a      	orrs	r2, r1
 800f0c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f0c4:	4313      	orrs	r3, r2
 800f0c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800f0c8:	f7ff fc44 	bl	800e954 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f0cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f0d0:	68db      	ldr	r3, [r3, #12]
 800f0d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f0d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f0da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f0dc:	f7f9 ffd4 	bl	8009088 <HAL_GetTick>
 800f0e0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f0e2:	e008      	b.n	800f0f6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f0e4:	f7f9 ffd0 	bl	8009088 <HAL_GetTick>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ec:	1ad3      	subs	r3, r2, r3
 800f0ee:	2b02      	cmp	r3, #2
 800f0f0:	d901      	bls.n	800f0f6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800f0f2:	2303      	movs	r3, #3
 800f0f4:	e059      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f0f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f100:	2b00      	cmp	r3, #0
 800f102:	d0ef      	beq.n	800f0e4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f104:	e050      	b.n	800f1a8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800f106:	2301      	movs	r3, #1
 800f108:	e04f      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f10a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f114:	2b00      	cmp	r3, #0
 800f116:	d147      	bne.n	800f1a8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800f118:	f7ff fc1c 	bl	800e954 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f11c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f120:	68db      	ldr	r3, [r3, #12]
 800f122:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f12a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f12c:	f7f9 ffac 	bl	8009088 <HAL_GetTick>
 800f130:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f132:	e008      	b.n	800f146 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f134:	f7f9 ffa8 	bl	8009088 <HAL_GetTick>
 800f138:	4602      	mov	r2, r0
 800f13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d901      	bls.n	800f146 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800f142:	2303      	movs	r3, #3
 800f144:	e031      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f150:	2b00      	cmp	r3, #0
 800f152:	d0ef      	beq.n	800f134 <HAL_RCC_OscConfig+0x664>
 800f154:	e028      	b.n	800f1a8 <HAL_RCC_OscConfig+0x6d8>
 800f156:	bf00      	nop
 800f158:	58000400 	.word	0x58000400
 800f15c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	2b0c      	cmp	r3, #12
 800f164:	d01e      	beq.n	800f1a4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f166:	f7ff fc04 	bl	800e972 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f16a:	f7f9 ff8d 	bl	8009088 <HAL_GetTick>
 800f16e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f170:	e008      	b.n	800f184 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f172:	f7f9 ff89 	bl	8009088 <HAL_GetTick>
 800f176:	4602      	mov	r2, r0
 800f178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f17a:	1ad3      	subs	r3, r2, r3
 800f17c:	2b02      	cmp	r3, #2
 800f17e:	d901      	bls.n	800f184 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800f180:	2303      	movs	r3, #3
 800f182:	e012      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d1ef      	bne.n	800f172 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800f192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f196:	68da      	ldr	r2, [r3, #12]
 800f198:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f19c:	4b05      	ldr	r3, [pc, #20]	@ (800f1b4 <HAL_RCC_OscConfig+0x6e4>)
 800f19e:	4013      	ands	r3, r2
 800f1a0:	60cb      	str	r3, [r1, #12]
 800f1a2:	e001      	b.n	800f1a8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	e000      	b.n	800f1aa <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800f1a8:	2300      	movs	r3, #0
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3734      	adds	r7, #52	@ 0x34
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd90      	pop	{r4, r7, pc}
 800f1b2:	bf00      	nop
 800f1b4:	eefefffc 	.word	0xeefefffc

0800f1b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d101      	bne.n	800f1cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	e12d      	b.n	800f428 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f1cc:	4b98      	ldr	r3, [pc, #608]	@ (800f430 <HAL_RCC_ClockConfig+0x278>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	f003 0307 	and.w	r3, r3, #7
 800f1d4:	683a      	ldr	r2, [r7, #0]
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d91b      	bls.n	800f212 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f1da:	4b95      	ldr	r3, [pc, #596]	@ (800f430 <HAL_RCC_ClockConfig+0x278>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f023 0207 	bic.w	r2, r3, #7
 800f1e2:	4993      	ldr	r1, [pc, #588]	@ (800f430 <HAL_RCC_ClockConfig+0x278>)
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f1ea:	f7f9 ff4d 	bl	8009088 <HAL_GetTick>
 800f1ee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f1f0:	e008      	b.n	800f204 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f1f2:	f7f9 ff49 	bl	8009088 <HAL_GetTick>
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	1ad3      	subs	r3, r2, r3
 800f1fc:	2b02      	cmp	r3, #2
 800f1fe:	d901      	bls.n	800f204 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800f200:	2303      	movs	r3, #3
 800f202:	e111      	b.n	800f428 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f204:	4b8a      	ldr	r3, [pc, #552]	@ (800f430 <HAL_RCC_ClockConfig+0x278>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f003 0307 	and.w	r3, r3, #7
 800f20c:	683a      	ldr	r2, [r7, #0]
 800f20e:	429a      	cmp	r2, r3
 800f210:	d1ef      	bne.n	800f1f2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f003 0302 	and.w	r3, r3, #2
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d016      	beq.n	800f24c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	689b      	ldr	r3, [r3, #8]
 800f222:	4618      	mov	r0, r3
 800f224:	f7ff fafb 	bl	800e81e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f228:	f7f9 ff2e 	bl	8009088 <HAL_GetTick>
 800f22c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800f22e:	e008      	b.n	800f242 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f230:	f7f9 ff2a 	bl	8009088 <HAL_GetTick>
 800f234:	4602      	mov	r2, r0
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	1ad3      	subs	r3, r2, r3
 800f23a:	2b02      	cmp	r3, #2
 800f23c:	d901      	bls.n	800f242 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800f23e:	2303      	movs	r3, #3
 800f240:	e0f2      	b.n	800f428 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800f242:	f7ff fbe8 	bl	800ea16 <LL_RCC_IsActiveFlag_HPRE>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d0f1      	beq.n	800f230 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f003 0320 	and.w	r3, r3, #32
 800f254:	2b00      	cmp	r3, #0
 800f256:	d016      	beq.n	800f286 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	695b      	ldr	r3, [r3, #20]
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7ff faf2 	bl	800e846 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f262:	f7f9 ff11 	bl	8009088 <HAL_GetTick>
 800f266:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800f268:	e008      	b.n	800f27c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f26a:	f7f9 ff0d 	bl	8009088 <HAL_GetTick>
 800f26e:	4602      	mov	r2, r0
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	1ad3      	subs	r3, r2, r3
 800f274:	2b02      	cmp	r3, #2
 800f276:	d901      	bls.n	800f27c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800f278:	2303      	movs	r3, #3
 800f27a:	e0d5      	b.n	800f428 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800f27c:	f7ff fbdd 	bl	800ea3a <LL_RCC_IsActiveFlag_C2HPRE>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d0f1      	beq.n	800f26a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d016      	beq.n	800f2c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	699b      	ldr	r3, [r3, #24]
 800f296:	4618      	mov	r0, r3
 800f298:	f7ff faeb 	bl	800e872 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f29c:	f7f9 fef4 	bl	8009088 <HAL_GetTick>
 800f2a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800f2a2:	e008      	b.n	800f2b6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f2a4:	f7f9 fef0 	bl	8009088 <HAL_GetTick>
 800f2a8:	4602      	mov	r2, r0
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	1ad3      	subs	r3, r2, r3
 800f2ae:	2b02      	cmp	r3, #2
 800f2b0:	d901      	bls.n	800f2b6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800f2b2:	2303      	movs	r3, #3
 800f2b4:	e0b8      	b.n	800f428 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800f2b6:	f7ff fbd3 	bl	800ea60 <LL_RCC_IsActiveFlag_SHDHPRE>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d0f1      	beq.n	800f2a4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f003 0304 	and.w	r3, r3, #4
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d016      	beq.n	800f2fa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	68db      	ldr	r3, [r3, #12]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7ff fae5 	bl	800e8a0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f2d6:	f7f9 fed7 	bl	8009088 <HAL_GetTick>
 800f2da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800f2dc:	e008      	b.n	800f2f0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f2de:	f7f9 fed3 	bl	8009088 <HAL_GetTick>
 800f2e2:	4602      	mov	r2, r0
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	1ad3      	subs	r3, r2, r3
 800f2e8:	2b02      	cmp	r3, #2
 800f2ea:	d901      	bls.n	800f2f0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800f2ec:	2303      	movs	r3, #3
 800f2ee:	e09b      	b.n	800f428 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800f2f0:	f7ff fbc9 	bl	800ea86 <LL_RCC_IsActiveFlag_PPRE1>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d0f1      	beq.n	800f2de <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f003 0308 	and.w	r3, r3, #8
 800f302:	2b00      	cmp	r3, #0
 800f304:	d017      	beq.n	800f336 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	691b      	ldr	r3, [r3, #16]
 800f30a:	00db      	lsls	r3, r3, #3
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7ff fadb 	bl	800e8c8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f312:	f7f9 feb9 	bl	8009088 <HAL_GetTick>
 800f316:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800f318:	e008      	b.n	800f32c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f31a:	f7f9 feb5 	bl	8009088 <HAL_GetTick>
 800f31e:	4602      	mov	r2, r0
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	1ad3      	subs	r3, r2, r3
 800f324:	2b02      	cmp	r3, #2
 800f326:	d901      	bls.n	800f32c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800f328:	2303      	movs	r3, #3
 800f32a:	e07d      	b.n	800f428 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800f32c:	f7ff fbbd 	bl	800eaaa <LL_RCC_IsActiveFlag_PPRE2>
 800f330:	4603      	mov	r3, r0
 800f332:	2b00      	cmp	r3, #0
 800f334:	d0f1      	beq.n	800f31a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f003 0301 	and.w	r3, r3, #1
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d043      	beq.n	800f3ca <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	685b      	ldr	r3, [r3, #4]
 800f346:	2b02      	cmp	r3, #2
 800f348:	d106      	bne.n	800f358 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800f34a:	f7ff f87b 	bl	800e444 <LL_RCC_HSE_IsReady>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b00      	cmp	r3, #0
 800f352:	d11e      	bne.n	800f392 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f354:	2301      	movs	r3, #1
 800f356:	e067      	b.n	800f428 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	2b03      	cmp	r3, #3
 800f35e:	d106      	bne.n	800f36e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800f360:	f7ff fb16 	bl	800e990 <LL_RCC_PLL_IsReady>
 800f364:	4603      	mov	r3, r0
 800f366:	2b00      	cmp	r3, #0
 800f368:	d113      	bne.n	800f392 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f36a:	2301      	movs	r3, #1
 800f36c:	e05c      	b.n	800f428 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	685b      	ldr	r3, [r3, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d106      	bne.n	800f384 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800f376:	f7ff f9e3 	bl	800e740 <LL_RCC_MSI_IsReady>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d108      	bne.n	800f392 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f380:	2301      	movs	r3, #1
 800f382:	e051      	b.n	800f428 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800f384:	f7ff f88e 	bl	800e4a4 <LL_RCC_HSI_IsReady>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d101      	bne.n	800f392 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f38e:	2301      	movs	r3, #1
 800f390:	e04a      	b.n	800f428 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	4618      	mov	r0, r3
 800f398:	f7ff fa21 	bl	800e7de <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f39c:	f7f9 fe74 	bl	8009088 <HAL_GetTick>
 800f3a0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f3a2:	e00a      	b.n	800f3ba <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f3a4:	f7f9 fe70 	bl	8009088 <HAL_GetTick>
 800f3a8:	4602      	mov	r2, r0
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	1ad3      	subs	r3, r2, r3
 800f3ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d901      	bls.n	800f3ba <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800f3b6:	2303      	movs	r3, #3
 800f3b8:	e036      	b.n	800f428 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f3ba:	f7ff fa24 	bl	800e806 <LL_RCC_GetSysClkSource>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	009b      	lsls	r3, r3, #2
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d1ec      	bne.n	800f3a4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f3ca:	4b19      	ldr	r3, [pc, #100]	@ (800f430 <HAL_RCC_ClockConfig+0x278>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f003 0307 	and.w	r3, r3, #7
 800f3d2:	683a      	ldr	r2, [r7, #0]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d21b      	bcs.n	800f410 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f3d8:	4b15      	ldr	r3, [pc, #84]	@ (800f430 <HAL_RCC_ClockConfig+0x278>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	f023 0207 	bic.w	r2, r3, #7
 800f3e0:	4913      	ldr	r1, [pc, #76]	@ (800f430 <HAL_RCC_ClockConfig+0x278>)
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f3e8:	f7f9 fe4e 	bl	8009088 <HAL_GetTick>
 800f3ec:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f3ee:	e008      	b.n	800f402 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f3f0:	f7f9 fe4a 	bl	8009088 <HAL_GetTick>
 800f3f4:	4602      	mov	r2, r0
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	1ad3      	subs	r3, r2, r3
 800f3fa:	2b02      	cmp	r3, #2
 800f3fc:	d901      	bls.n	800f402 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800f3fe:	2303      	movs	r3, #3
 800f400:	e012      	b.n	800f428 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f402:	4b0b      	ldr	r3, [pc, #44]	@ (800f430 <HAL_RCC_ClockConfig+0x278>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f003 0307 	and.w	r3, r3, #7
 800f40a:	683a      	ldr	r2, [r7, #0]
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d1ef      	bne.n	800f3f0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800f410:	f000 f87e 	bl	800f510 <HAL_RCC_GetHCLKFreq>
 800f414:	4603      	mov	r3, r0
 800f416:	4a07      	ldr	r2, [pc, #28]	@ (800f434 <HAL_RCC_ClockConfig+0x27c>)
 800f418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800f41a:	f7f9 fe41 	bl	80090a0 <HAL_GetTickPrio>
 800f41e:	4603      	mov	r3, r0
 800f420:	4618      	mov	r0, r3
 800f422:	f7f9 fde3 	bl	8008fec <HAL_InitTick>
 800f426:	4603      	mov	r3, r0
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3710      	adds	r7, #16
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	58004000 	.word	0x58004000
 800f434:	2000001c 	.word	0x2000001c

0800f438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f438:	b590      	push	{r4, r7, lr}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f43e:	f7ff f9e2 	bl	800e806 <LL_RCC_GetSysClkSource>
 800f442:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d10a      	bne.n	800f460 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800f44a:	f7ff f99e 	bl	800e78a <LL_RCC_MSI_GetRange>
 800f44e:	4603      	mov	r3, r0
 800f450:	091b      	lsrs	r3, r3, #4
 800f452:	f003 030f 	and.w	r3, r3, #15
 800f456:	4a2b      	ldr	r2, [pc, #172]	@ (800f504 <HAL_RCC_GetSysClockFreq+0xcc>)
 800f458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f45c:	60fb      	str	r3, [r7, #12]
 800f45e:	e04b      	b.n	800f4f8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2b04      	cmp	r3, #4
 800f464:	d102      	bne.n	800f46c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800f466:	4b28      	ldr	r3, [pc, #160]	@ (800f508 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f468:	60fb      	str	r3, [r7, #12]
 800f46a:	e045      	b.n	800f4f8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2b08      	cmp	r3, #8
 800f470:	d10a      	bne.n	800f488 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800f472:	f7fe ffb7 	bl	800e3e4 <LL_RCC_HSE_IsEnabledDiv2>
 800f476:	4603      	mov	r3, r0
 800f478:	2b01      	cmp	r3, #1
 800f47a:	d102      	bne.n	800f482 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800f47c:	4b22      	ldr	r3, [pc, #136]	@ (800f508 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f47e:	60fb      	str	r3, [r7, #12]
 800f480:	e03a      	b.n	800f4f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800f482:	4b22      	ldr	r3, [pc, #136]	@ (800f50c <HAL_RCC_GetSysClockFreq+0xd4>)
 800f484:	60fb      	str	r3, [r7, #12]
 800f486:	e037      	b.n	800f4f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800f488:	f7ff fab9 	bl	800e9fe <LL_RCC_PLL_GetMainSource>
 800f48c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	2b02      	cmp	r3, #2
 800f492:	d003      	beq.n	800f49c <HAL_RCC_GetSysClockFreq+0x64>
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	2b03      	cmp	r3, #3
 800f498:	d003      	beq.n	800f4a2 <HAL_RCC_GetSysClockFreq+0x6a>
 800f49a:	e00d      	b.n	800f4b8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800f49c:	4b1a      	ldr	r3, [pc, #104]	@ (800f508 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f49e:	60bb      	str	r3, [r7, #8]
        break;
 800f4a0:	e015      	b.n	800f4ce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800f4a2:	f7fe ff9f 	bl	800e3e4 <LL_RCC_HSE_IsEnabledDiv2>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	d102      	bne.n	800f4b2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800f4ac:	4b16      	ldr	r3, [pc, #88]	@ (800f508 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f4ae:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800f4b0:	e00d      	b.n	800f4ce <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800f4b2:	4b16      	ldr	r3, [pc, #88]	@ (800f50c <HAL_RCC_GetSysClockFreq+0xd4>)
 800f4b4:	60bb      	str	r3, [r7, #8]
        break;
 800f4b6:	e00a      	b.n	800f4ce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800f4b8:	f7ff f967 	bl	800e78a <LL_RCC_MSI_GetRange>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	091b      	lsrs	r3, r3, #4
 800f4c0:	f003 030f 	and.w	r3, r3, #15
 800f4c4:	4a0f      	ldr	r2, [pc, #60]	@ (800f504 <HAL_RCC_GetSysClockFreq+0xcc>)
 800f4c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4ca:	60bb      	str	r3, [r7, #8]
        break;
 800f4cc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800f4ce:	f7ff fa71 	bl	800e9b4 <LL_RCC_PLL_GetN>
 800f4d2:	4602      	mov	r2, r0
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	fb03 f402 	mul.w	r4, r3, r2
 800f4da:	f7ff fa84 	bl	800e9e6 <LL_RCC_PLL_GetDivider>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	091b      	lsrs	r3, r3, #4
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	fbb4 f4f3 	udiv	r4, r4, r3
 800f4e8:	f7ff fa71 	bl	800e9ce <LL_RCC_PLL_GetR>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	0f5b      	lsrs	r3, r3, #29
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	fbb4 f3f3 	udiv	r3, r4, r3
 800f4f6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3714      	adds	r7, #20
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd90      	pop	{r4, r7, pc}
 800f502:	bf00      	nop
 800f504:	0801cd6c 	.word	0x0801cd6c
 800f508:	00f42400 	.word	0x00f42400
 800f50c:	01e84800 	.word	0x01e84800

0800f510 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f510:	b598      	push	{r3, r4, r7, lr}
 800f512:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800f514:	f7ff ff90 	bl	800f438 <HAL_RCC_GetSysClockFreq>
 800f518:	4604      	mov	r4, r0
 800f51a:	f7ff f9e9 	bl	800e8f0 <LL_RCC_GetAHBPrescaler>
 800f51e:	4603      	mov	r3, r0
 800f520:	091b      	lsrs	r3, r3, #4
 800f522:	f003 030f 	and.w	r3, r3, #15
 800f526:	4a03      	ldr	r2, [pc, #12]	@ (800f534 <HAL_RCC_GetHCLKFreq+0x24>)
 800f528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f52c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800f530:	4618      	mov	r0, r3
 800f532:	bd98      	pop	{r3, r4, r7, pc}
 800f534:	0801cd0c 	.word	0x0801cd0c

0800f538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f538:	b598      	push	{r3, r4, r7, lr}
 800f53a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800f53c:	f7ff ffe8 	bl	800f510 <HAL_RCC_GetHCLKFreq>
 800f540:	4604      	mov	r4, r0
 800f542:	f7ff f9ef 	bl	800e924 <LL_RCC_GetAPB1Prescaler>
 800f546:	4603      	mov	r3, r0
 800f548:	0a1b      	lsrs	r3, r3, #8
 800f54a:	f003 0307 	and.w	r3, r3, #7
 800f54e:	4a04      	ldr	r2, [pc, #16]	@ (800f560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f554:	f003 031f 	and.w	r3, r3, #31
 800f558:	fa24 f303 	lsr.w	r3, r4, r3
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	bd98      	pop	{r3, r4, r7, pc}
 800f560:	0801cd4c 	.word	0x0801cd4c

0800f564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f564:	b598      	push	{r3, r4, r7, lr}
 800f566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800f568:	f7ff ffd2 	bl	800f510 <HAL_RCC_GetHCLKFreq>
 800f56c:	4604      	mov	r4, r0
 800f56e:	f7ff f9e5 	bl	800e93c <LL_RCC_GetAPB2Prescaler>
 800f572:	4603      	mov	r3, r0
 800f574:	0adb      	lsrs	r3, r3, #11
 800f576:	f003 0307 	and.w	r3, r3, #7
 800f57a:	4a04      	ldr	r2, [pc, #16]	@ (800f58c <HAL_RCC_GetPCLK2Freq+0x28>)
 800f57c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f580:	f003 031f 	and.w	r3, r3, #31
 800f584:	fa24 f303 	lsr.w	r3, r4, r3
}
 800f588:	4618      	mov	r0, r3
 800f58a:	bd98      	pop	{r3, r4, r7, pc}
 800f58c:	0801cd4c 	.word	0x0801cd4c

0800f590 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800f590:	b590      	push	{r4, r7, lr}
 800f592:	b085      	sub	sp, #20
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2bb0      	cmp	r3, #176	@ 0xb0
 800f59c:	d903      	bls.n	800f5a6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800f59e:	4b15      	ldr	r3, [pc, #84]	@ (800f5f4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800f5a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5a2:	60fb      	str	r3, [r7, #12]
 800f5a4:	e007      	b.n	800f5b6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	091b      	lsrs	r3, r3, #4
 800f5aa:	f003 030f 	and.w	r3, r3, #15
 800f5ae:	4a11      	ldr	r2, [pc, #68]	@ (800f5f4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800f5b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5b4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800f5b6:	f7ff f9a7 	bl	800e908 <LL_RCC_GetAHB4Prescaler>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	091b      	lsrs	r3, r3, #4
 800f5be:	f003 030f 	and.w	r3, r3, #15
 800f5c2:	4a0d      	ldr	r2, [pc, #52]	@ (800f5f8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800f5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5c8:	68fa      	ldr	r2, [r7, #12]
 800f5ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5ce:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	4a0a      	ldr	r2, [pc, #40]	@ (800f5fc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800f5d4:	fba2 2303 	umull	r2, r3, r2, r3
 800f5d8:	0c9c      	lsrs	r4, r3, #18
 800f5da:	f7fe fee5 	bl	800e3a8 <HAL_PWREx_GetVoltageRange>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	f000 f80c 	bl	800f600 <RCC_SetFlashLatency>
 800f5e8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3714      	adds	r7, #20
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd90      	pop	{r4, r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	0801cd6c 	.word	0x0801cd6c
 800f5f8:	0801cd0c 	.word	0x0801cd0c
 800f5fc:	431bde83 	.word	0x431bde83

0800f600 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800f600:	b590      	push	{r4, r7, lr}
 800f602:	b093      	sub	sp, #76	@ 0x4c
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800f60a:	4b37      	ldr	r3, [pc, #220]	@ (800f6e8 <RCC_SetFlashLatency+0xe8>)
 800f60c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800f610:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f612:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800f616:	4a35      	ldr	r2, [pc, #212]	@ (800f6ec <RCC_SetFlashLatency+0xec>)
 800f618:	f107 031c 	add.w	r3, r7, #28
 800f61c:	ca07      	ldmia	r2, {r0, r1, r2}
 800f61e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800f622:	4b33      	ldr	r3, [pc, #204]	@ (800f6f0 <RCC_SetFlashLatency+0xf0>)
 800f624:	f107 040c 	add.w	r4, r7, #12
 800f628:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f62a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800f62e:	2300      	movs	r3, #0
 800f630:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f638:	d11a      	bne.n	800f670 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800f63a:	2300      	movs	r3, #0
 800f63c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f63e:	e013      	b.n	800f668 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800f640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f642:	009b      	lsls	r3, r3, #2
 800f644:	3348      	adds	r3, #72	@ 0x48
 800f646:	443b      	add	r3, r7
 800f648:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d807      	bhi.n	800f662 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800f652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f654:	009b      	lsls	r3, r3, #2
 800f656:	3348      	adds	r3, #72	@ 0x48
 800f658:	443b      	add	r3, r7
 800f65a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f65e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800f660:	e020      	b.n	800f6a4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800f662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f664:	3301      	adds	r3, #1
 800f666:	643b      	str	r3, [r7, #64]	@ 0x40
 800f668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f66a:	2b03      	cmp	r3, #3
 800f66c:	d9e8      	bls.n	800f640 <RCC_SetFlashLatency+0x40>
 800f66e:	e019      	b.n	800f6a4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800f670:	2300      	movs	r3, #0
 800f672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f674:	e013      	b.n	800f69e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800f676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f678:	009b      	lsls	r3, r3, #2
 800f67a:	3348      	adds	r3, #72	@ 0x48
 800f67c:	443b      	add	r3, r7
 800f67e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800f682:	687a      	ldr	r2, [r7, #4]
 800f684:	429a      	cmp	r2, r3
 800f686:	d807      	bhi.n	800f698 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800f688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f68a:	009b      	lsls	r3, r3, #2
 800f68c:	3348      	adds	r3, #72	@ 0x48
 800f68e:	443b      	add	r3, r7
 800f690:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f694:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800f696:	e005      	b.n	800f6a4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800f698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f69a:	3301      	adds	r3, #1
 800f69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f69e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6a0:	2b02      	cmp	r3, #2
 800f6a2:	d9e8      	bls.n	800f676 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800f6a4:	4b13      	ldr	r3, [pc, #76]	@ (800f6f4 <RCC_SetFlashLatency+0xf4>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	f023 0207 	bic.w	r2, r3, #7
 800f6ac:	4911      	ldr	r1, [pc, #68]	@ (800f6f4 <RCC_SetFlashLatency+0xf4>)
 800f6ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f6b0:	4313      	orrs	r3, r2
 800f6b2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f6b4:	f7f9 fce8 	bl	8009088 <HAL_GetTick>
 800f6b8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800f6ba:	e008      	b.n	800f6ce <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f6bc:	f7f9 fce4 	bl	8009088 <HAL_GetTick>
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6c4:	1ad3      	subs	r3, r2, r3
 800f6c6:	2b02      	cmp	r3, #2
 800f6c8:	d901      	bls.n	800f6ce <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800f6ca:	2303      	movs	r3, #3
 800f6cc:	e007      	b.n	800f6de <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800f6ce:	4b09      	ldr	r3, [pc, #36]	@ (800f6f4 <RCC_SetFlashLatency+0xf4>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f003 0307 	and.w	r3, r3, #7
 800f6d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d1ef      	bne.n	800f6bc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	374c      	adds	r7, #76	@ 0x4c
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd90      	pop	{r4, r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	0801ac04 	.word	0x0801ac04
 800f6ec:	0801ac14 	.word	0x0801ac14
 800f6f0:	0801ac20 	.word	0x0801ac20
 800f6f4:	58004000 	.word	0x58004000

0800f6f8 <LL_RCC_LSE_IsEnabled>:
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800f6fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f704:	f003 0301 	and.w	r3, r3, #1
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d101      	bne.n	800f710 <LL_RCC_LSE_IsEnabled+0x18>
 800f70c:	2301      	movs	r3, #1
 800f70e:	e000      	b.n	800f712 <LL_RCC_LSE_IsEnabled+0x1a>
 800f710:	2300      	movs	r3, #0
}
 800f712:	4618      	mov	r0, r3
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <LL_RCC_LSE_IsReady>:
{
 800f71c:	b480      	push	{r7}
 800f71e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f728:	f003 0302 	and.w	r3, r3, #2
 800f72c:	2b02      	cmp	r3, #2
 800f72e:	d101      	bne.n	800f734 <LL_RCC_LSE_IsReady+0x18>
 800f730:	2301      	movs	r3, #1
 800f732:	e000      	b.n	800f736 <LL_RCC_LSE_IsReady+0x1a>
 800f734:	2300      	movs	r3, #0
}
 800f736:	4618      	mov	r0, r3
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr

0800f740 <LL_RCC_SetRFWKPClockSource>:
{
 800f740:	b480      	push	{r7}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800f748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f74c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f750:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800f754:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	4313      	orrs	r3, r2
 800f75c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800f760:	bf00      	nop
 800f762:	370c      	adds	r7, #12
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <LL_RCC_SetSMPSClockSource>:
{
 800f76c:	b480      	push	{r7}
 800f76e:	b083      	sub	sp, #12
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800f774:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f77a:	f023 0203 	bic.w	r2, r3, #3
 800f77e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	4313      	orrs	r3, r2
 800f786:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800f788:	bf00      	nop
 800f78a:	370c      	adds	r7, #12
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr

0800f794 <LL_RCC_SetSMPSPrescaler>:
{
 800f794:	b480      	push	{r7}
 800f796:	b083      	sub	sp, #12
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800f79c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7a2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800f7a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	4313      	orrs	r3, r2
 800f7ae:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800f7b0:	bf00      	nop
 800f7b2:	370c      	adds	r7, #12
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr

0800f7bc <LL_RCC_SetUSARTClockSource>:
{
 800f7bc:	b480      	push	{r7}
 800f7be:	b083      	sub	sp, #12
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800f7c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7cc:	f023 0203 	bic.w	r2, r3, #3
 800f7d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f7dc:	bf00      	nop
 800f7de:	370c      	adds	r7, #12
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr

0800f7e8 <LL_RCC_SetLPUARTClockSource>:
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b083      	sub	sp, #12
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800f7f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f7fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	4313      	orrs	r3, r2
 800f804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f808:	bf00      	nop
 800f80a:	370c      	adds	r7, #12
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr

0800f814 <LL_RCC_SetI2CClockSource>:
{
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800f81c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f820:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	091b      	lsrs	r3, r3, #4
 800f828:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800f82c:	43db      	mvns	r3, r3
 800f82e:	401a      	ands	r2, r3
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	011b      	lsls	r3, r3, #4
 800f834:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800f838:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f83c:	4313      	orrs	r3, r2
 800f83e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f842:	bf00      	nop
 800f844:	370c      	adds	r7, #12
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr

0800f84e <LL_RCC_SetLPTIMClockSource>:
{
 800f84e:	b480      	push	{r7}
 800f850:	b083      	sub	sp, #12
 800f852:	af00      	add	r7, sp, #0
 800f854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800f856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f85a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	0c1b      	lsrs	r3, r3, #16
 800f862:	041b      	lsls	r3, r3, #16
 800f864:	43db      	mvns	r3, r3
 800f866:	401a      	ands	r2, r3
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	041b      	lsls	r3, r3, #16
 800f86c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f870:	4313      	orrs	r3, r2
 800f872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f876:	bf00      	nop
 800f878:	370c      	adds	r7, #12
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr

0800f882 <LL_RCC_SetSAIClockSource>:
{
 800f882:	b480      	push	{r7}
 800f884:	b083      	sub	sp, #12
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800f88a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f88e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f892:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800f896:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	4313      	orrs	r3, r2
 800f89e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f8a2:	bf00      	nop
 800f8a4:	370c      	adds	r7, #12
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ac:	4770      	bx	lr

0800f8ae <LL_RCC_SetRNGClockSource>:
{
 800f8ae:	b480      	push	{r7}
 800f8b0:	b083      	sub	sp, #12
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800f8b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f8be:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800f8c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f8ce:	bf00      	nop
 800f8d0:	370c      	adds	r7, #12
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d8:	4770      	bx	lr

0800f8da <LL_RCC_SetCLK48ClockSource>:
{
 800f8da:	b480      	push	{r7}
 800f8dc:	b083      	sub	sp, #12
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800f8e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f8ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f8ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f8fa:	bf00      	nop
 800f8fc:	370c      	adds	r7, #12
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr

0800f906 <LL_RCC_SetUSBClockSource>:
{
 800f906:	b580      	push	{r7, lr}
 800f908:	b082      	sub	sp, #8
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f7ff ffe3 	bl	800f8da <LL_RCC_SetCLK48ClockSource>
}
 800f914:	bf00      	nop
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <LL_RCC_SetADCClockSource>:
{
 800f91c:	b480      	push	{r7}
 800f91e:	b083      	sub	sp, #12
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800f924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f92c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800f930:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	4313      	orrs	r3, r2
 800f938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800f93c:	bf00      	nop
 800f93e:	370c      	adds	r7, #12
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr

0800f948 <LL_RCC_SetRTCClockSource>:
{
 800f948:	b480      	push	{r7}
 800f94a:	b083      	sub	sp, #12
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800f950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f958:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f95c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4313      	orrs	r3, r2
 800f964:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800f968:	bf00      	nop
 800f96a:	370c      	adds	r7, #12
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr

0800f974 <LL_RCC_GetRTCClockSource>:
{
 800f974:	b480      	push	{r7}
 800f976:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800f978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f97c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f980:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800f984:	4618      	mov	r0, r3
 800f986:	46bd      	mov	sp, r7
 800f988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98c:	4770      	bx	lr

0800f98e <LL_RCC_ForceBackupDomainReset>:
{
 800f98e:	b480      	push	{r7}
 800f990:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f99a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f99e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f9a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f9a6:	bf00      	nop
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr

0800f9b0 <LL_RCC_ReleaseBackupDomainReset>:
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f9b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f9c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f9c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800f9c8:	bf00      	nop
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d0:	4770      	bx	lr

0800f9d2 <LL_RCC_PLLSAI1_Enable>:
{
 800f9d2:	b480      	push	{r7}
 800f9d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f9d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f9e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f9e4:	6013      	str	r3, [r2, #0]
}
 800f9e6:	bf00      	nop
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr

0800f9f0 <LL_RCC_PLLSAI1_Disable>:
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f9f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f9fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fa02:	6013      	str	r3, [r2, #0]
}
 800fa04:	bf00      	nop
 800fa06:	46bd      	mov	sp, r7
 800fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0c:	4770      	bx	lr

0800fa0e <LL_RCC_PLLSAI1_IsReady>:
{
 800fa0e:	b480      	push	{r7}
 800fa10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800fa12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fa1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fa20:	d101      	bne.n	800fa26 <LL_RCC_PLLSAI1_IsReady+0x18>
 800fa22:	2301      	movs	r3, #1
 800fa24:	e000      	b.n	800fa28 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800fa26:	2300      	movs	r3, #0
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa30:	4770      	bx	lr

0800fa32 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800fa32:	b580      	push	{r7, lr}
 800fa34:	b088      	sub	sp, #32
 800fa36:	af00      	add	r7, sp, #0
 800fa38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800fa3e:	2300      	movs	r3, #0
 800fa40:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d034      	beq.n	800fab8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800fa56:	d021      	beq.n	800fa9c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800fa58:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800fa5c:	d81b      	bhi.n	800fa96 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800fa5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fa62:	d01d      	beq.n	800faa0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800fa64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fa68:	d815      	bhi.n	800fa96 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d00b      	beq.n	800fa86 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800fa6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fa72:	d110      	bne.n	800fa96 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800fa74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fa7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fa82:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800fa84:	e00d      	b.n	800faa2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	3304      	adds	r3, #4
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f000 f947 	bl	800fd1e <RCCEx_PLLSAI1_ConfigNP>
 800fa90:	4603      	mov	r3, r0
 800fa92:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800fa94:	e005      	b.n	800faa2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800fa96:	2301      	movs	r3, #1
 800fa98:	77fb      	strb	r3, [r7, #31]
        break;
 800fa9a:	e002      	b.n	800faa2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800fa9c:	bf00      	nop
 800fa9e:	e000      	b.n	800faa2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800faa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800faa2:	7ffb      	ldrb	r3, [r7, #31]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d105      	bne.n	800fab4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800faac:	4618      	mov	r0, r3
 800faae:	f7ff fee8 	bl	800f882 <LL_RCC_SetSAIClockSource>
 800fab2:	e001      	b.n	800fab8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fab4:	7ffb      	ldrb	r3, [r7, #31]
 800fab6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d046      	beq.n	800fb52 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800fac4:	f7ff ff56 	bl	800f974 <LL_RCC_GetRTCClockSource>
 800fac8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800face:	69ba      	ldr	r2, [r7, #24]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d03c      	beq.n	800fb4e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800fad4:	f7fe fc58 	bl	800e388 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800fad8:	69bb      	ldr	r3, [r7, #24]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d105      	bne.n	800faea <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7ff ff30 	bl	800f948 <LL_RCC_SetRTCClockSource>
 800fae8:	e02e      	b.n	800fb48 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800faea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800faee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800faf2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800faf4:	f7ff ff4b 	bl	800f98e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800faf8:	f7ff ff5a 	bl	800f9b0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb06:	4313      	orrs	r3, r2
 800fb08:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800fb0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800fb14:	f7ff fdf0 	bl	800f6f8 <LL_RCC_LSE_IsEnabled>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d114      	bne.n	800fb48 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800fb1e:	f7f9 fab3 	bl	8009088 <HAL_GetTick>
 800fb22:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800fb24:	e00b      	b.n	800fb3e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fb26:	f7f9 faaf 	bl	8009088 <HAL_GetTick>
 800fb2a:	4602      	mov	r2, r0
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	1ad3      	subs	r3, r2, r3
 800fb30:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d902      	bls.n	800fb3e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800fb38:	2303      	movs	r3, #3
 800fb3a:	77fb      	strb	r3, [r7, #31]
              break;
 800fb3c:	e004      	b.n	800fb48 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800fb3e:	f7ff fded 	bl	800f71c <LL_RCC_LSE_IsReady>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d1ee      	bne.n	800fb26 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800fb48:	7ffb      	ldrb	r3, [r7, #31]
 800fb4a:	77bb      	strb	r3, [r7, #30]
 800fb4c:	e001      	b.n	800fb52 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb4e:	7ffb      	ldrb	r3, [r7, #31]
 800fb50:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	f003 0301 	and.w	r3, r3, #1
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d004      	beq.n	800fb68 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	699b      	ldr	r3, [r3, #24]
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7ff fe2a 	bl	800f7bc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	f003 0302 	and.w	r3, r3, #2
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d004      	beq.n	800fb7e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	69db      	ldr	r3, [r3, #28]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7ff fe35 	bl	800f7e8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	f003 0310 	and.w	r3, r3, #16
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d004      	beq.n	800fb94 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7ff fe5d 	bl	800f84e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f003 0320 	and.w	r3, r3, #32
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d004      	beq.n	800fbaa <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7ff fe52 	bl	800f84e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	f003 0304 	and.w	r3, r3, #4
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d004      	beq.n	800fbc0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6a1b      	ldr	r3, [r3, #32]
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7ff fe2a 	bl	800f814 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f003 0308 	and.w	r3, r3, #8
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d004      	beq.n	800fbd6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7ff fe1f 	bl	800f814 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d022      	beq.n	800fc28 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7ff fe8d 	bl	800f906 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fbf4:	d107      	bne.n	800fc06 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800fbf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fbfa:	68db      	ldr	r3, [r3, #12]
 800fbfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fc00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fc04:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fc0e:	d10b      	bne.n	800fc28 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	3304      	adds	r3, #4
 800fc14:	4618      	mov	r0, r3
 800fc16:	f000 f8dd 	bl	800fdd4 <RCCEx_PLLSAI1_ConfigNQ>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800fc1e:	7ffb      	ldrb	r3, [r7, #31]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d001      	beq.n	800fc28 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800fc24:	7ffb      	ldrb	r3, [r7, #31]
 800fc26:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d02b      	beq.n	800fc8c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc3c:	d008      	beq.n	800fc50 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fc46:	d003      	beq.n	800fc50 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d105      	bne.n	800fc5c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc54:	4618      	mov	r0, r3
 800fc56:	f7ff fe2a 	bl	800f8ae <LL_RCC_SetRNGClockSource>
 800fc5a:	e00a      	b.n	800fc72 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fc64:	60fb      	str	r3, [r7, #12]
 800fc66:	2000      	movs	r0, #0
 800fc68:	f7ff fe21 	bl	800f8ae <LL_RCC_SetRNGClockSource>
 800fc6c:	68f8      	ldr	r0, [r7, #12]
 800fc6e:	f7ff fe34 	bl	800f8da <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc76:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800fc7a:	d107      	bne.n	800fc8c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800fc7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fc80:	68db      	ldr	r3, [r3, #12]
 800fc82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fc86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fc8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d022      	beq.n	800fcde <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7ff fe3d 	bl	800f91c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fca6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fcaa:	d107      	bne.n	800fcbc <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800fcac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fcb0:	68db      	ldr	r3, [r3, #12]
 800fcb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800fcb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fcba:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fcc4:	d10b      	bne.n	800fcde <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	3304      	adds	r3, #4
 800fcca:	4618      	mov	r0, r3
 800fccc:	f000 f8dd 	bl	800fe8a <RCCEx_PLLSAI1_ConfigNR>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800fcd4:	7ffb      	ldrb	r3, [r7, #31]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d001      	beq.n	800fcde <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800fcda:	7ffb      	ldrb	r3, [r7, #31]
 800fcdc:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d004      	beq.n	800fcf4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7ff fd26 	bl	800f740 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d009      	beq.n	800fd14 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7ff fd45 	bl	800f794 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7ff fd2c 	bl	800f76c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800fd14:	7fbb      	ldrb	r3, [r7, #30]
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3720      	adds	r7, #32
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}

0800fd1e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fd1e:	b580      	push	{r7, lr}
 800fd20:	b084      	sub	sp, #16
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fd26:	2300      	movs	r3, #0
 800fd28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fd2a:	f7ff fe61 	bl	800f9f0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fd2e:	f7f9 f9ab 	bl	8009088 <HAL_GetTick>
 800fd32:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fd34:	e009      	b.n	800fd4a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fd36:	f7f9 f9a7 	bl	8009088 <HAL_GetTick>
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	1ad3      	subs	r3, r2, r3
 800fd40:	2b02      	cmp	r3, #2
 800fd42:	d902      	bls.n	800fd4a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800fd44:	2303      	movs	r3, #3
 800fd46:	73fb      	strb	r3, [r7, #15]
      break;
 800fd48:	e004      	b.n	800fd54 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fd4a:	f7ff fe60 	bl	800fa0e <LL_RCC_PLLSAI1_IsReady>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d1f0      	bne.n	800fd36 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800fd54:	7bfb      	ldrb	r3, [r7, #15]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d137      	bne.n	800fdca <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fd5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fd5e:	691b      	ldr	r3, [r3, #16]
 800fd60:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	021b      	lsls	r3, r3, #8
 800fd6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800fd72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fd76:	691b      	ldr	r3, [r3, #16]
 800fd78:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	685b      	ldr	r3, [r3, #4]
 800fd80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fd84:	4313      	orrs	r3, r2
 800fd86:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800fd88:	f7ff fe23 	bl	800f9d2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd8c:	f7f9 f97c 	bl	8009088 <HAL_GetTick>
 800fd90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fd92:	e009      	b.n	800fda8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fd94:	f7f9 f978 	bl	8009088 <HAL_GetTick>
 800fd98:	4602      	mov	r2, r0
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	1ad3      	subs	r3, r2, r3
 800fd9e:	2b02      	cmp	r3, #2
 800fda0:	d902      	bls.n	800fda8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800fda2:	2303      	movs	r3, #3
 800fda4:	73fb      	strb	r3, [r7, #15]
        break;
 800fda6:	e004      	b.n	800fdb2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fda8:	f7ff fe31 	bl	800fa0e <LL_RCC_PLLSAI1_IsReady>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	d1f0      	bne.n	800fd94 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800fdb2:	7bfb      	ldrb	r3, [r7, #15]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d108      	bne.n	800fdca <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fdb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fdbc:	691a      	ldr	r2, [r3, #16]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	691b      	ldr	r3, [r3, #16]
 800fdc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fdc6:	4313      	orrs	r3, r2
 800fdc8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fdca:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3710      	adds	r7, #16
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}

0800fdd4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b084      	sub	sp, #16
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fddc:	2300      	movs	r3, #0
 800fdde:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fde0:	f7ff fe06 	bl	800f9f0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fde4:	f7f9 f950 	bl	8009088 <HAL_GetTick>
 800fde8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fdea:	e009      	b.n	800fe00 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fdec:	f7f9 f94c 	bl	8009088 <HAL_GetTick>
 800fdf0:	4602      	mov	r2, r0
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	1ad3      	subs	r3, r2, r3
 800fdf6:	2b02      	cmp	r3, #2
 800fdf8:	d902      	bls.n	800fe00 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800fdfa:	2303      	movs	r3, #3
 800fdfc:	73fb      	strb	r3, [r7, #15]
      break;
 800fdfe:	e004      	b.n	800fe0a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fe00:	f7ff fe05 	bl	800fa0e <LL_RCC_PLLSAI1_IsReady>
 800fe04:	4603      	mov	r3, r0
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d1f0      	bne.n	800fdec <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800fe0a:	7bfb      	ldrb	r3, [r7, #15]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d137      	bne.n	800fe80 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fe10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fe14:	691b      	ldr	r3, [r3, #16]
 800fe16:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	021b      	lsls	r3, r3, #8
 800fe20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fe24:	4313      	orrs	r3, r2
 800fe26:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800fe28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fe2c:	691b      	ldr	r3, [r3, #16]
 800fe2e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	689b      	ldr	r3, [r3, #8]
 800fe36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800fe3e:	f7ff fdc8 	bl	800f9d2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fe42:	f7f9 f921 	bl	8009088 <HAL_GetTick>
 800fe46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fe48:	e009      	b.n	800fe5e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fe4a:	f7f9 f91d 	bl	8009088 <HAL_GetTick>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	1ad3      	subs	r3, r2, r3
 800fe54:	2b02      	cmp	r3, #2
 800fe56:	d902      	bls.n	800fe5e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800fe58:	2303      	movs	r3, #3
 800fe5a:	73fb      	strb	r3, [r7, #15]
        break;
 800fe5c:	e004      	b.n	800fe68 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fe5e:	f7ff fdd6 	bl	800fa0e <LL_RCC_PLLSAI1_IsReady>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d1f0      	bne.n	800fe4a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800fe68:	7bfb      	ldrb	r3, [r7, #15]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d108      	bne.n	800fe80 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fe6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fe72:	691a      	ldr	r2, [r3, #16]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	691b      	ldr	r3, [r3, #16]
 800fe78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fe7c:	4313      	orrs	r3, r2
 800fe7e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fe80:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3710      	adds	r7, #16
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}

0800fe8a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fe8a:	b580      	push	{r7, lr}
 800fe8c:	b084      	sub	sp, #16
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fe92:	2300      	movs	r3, #0
 800fe94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fe96:	f7ff fdab 	bl	800f9f0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fe9a:	f7f9 f8f5 	bl	8009088 <HAL_GetTick>
 800fe9e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fea0:	e009      	b.n	800feb6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fea2:	f7f9 f8f1 	bl	8009088 <HAL_GetTick>
 800fea6:	4602      	mov	r2, r0
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	1ad3      	subs	r3, r2, r3
 800feac:	2b02      	cmp	r3, #2
 800feae:	d902      	bls.n	800feb6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800feb0:	2303      	movs	r3, #3
 800feb2:	73fb      	strb	r3, [r7, #15]
      break;
 800feb4:	e004      	b.n	800fec0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800feb6:	f7ff fdaa 	bl	800fa0e <LL_RCC_PLLSAI1_IsReady>
 800feba:	4603      	mov	r3, r0
 800febc:	2b00      	cmp	r3, #0
 800febe:	d1f0      	bne.n	800fea2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800fec0:	7bfb      	ldrb	r3, [r7, #15]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d137      	bne.n	800ff36 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800feca:	691b      	ldr	r3, [r3, #16]
 800fecc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	021b      	lsls	r3, r3, #8
 800fed6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800feda:	4313      	orrs	r3, r2
 800fedc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800fede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fee2:	691b      	ldr	r3, [r3, #16]
 800fee4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	68db      	ldr	r3, [r3, #12]
 800feec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fef0:	4313      	orrs	r3, r2
 800fef2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800fef4:	f7ff fd6d 	bl	800f9d2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fef8:	f7f9 f8c6 	bl	8009088 <HAL_GetTick>
 800fefc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fefe:	e009      	b.n	800ff14 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ff00:	f7f9 f8c2 	bl	8009088 <HAL_GetTick>
 800ff04:	4602      	mov	r2, r0
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	1ad3      	subs	r3, r2, r3
 800ff0a:	2b02      	cmp	r3, #2
 800ff0c:	d902      	bls.n	800ff14 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800ff0e:	2303      	movs	r3, #3
 800ff10:	73fb      	strb	r3, [r7, #15]
        break;
 800ff12:	e004      	b.n	800ff1e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ff14:	f7ff fd7b 	bl	800fa0e <LL_RCC_PLLSAI1_IsReady>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	2b01      	cmp	r3, #1
 800ff1c:	d1f0      	bne.n	800ff00 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800ff1e:	7bfb      	ldrb	r3, [r7, #15]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d108      	bne.n	800ff36 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ff24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ff28:	691a      	ldr	r2, [r3, #16]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	691b      	ldr	r3, [r3, #16]
 800ff2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ff32:	4313      	orrs	r3, r2
 800ff34:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ff36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3710      	adds	r7, #16
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d101      	bne.n	800ff52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ff4e:	2301      	movs	r3, #1
 800ff50:	e049      	b.n	800ffe6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ff58:	b2db      	uxtb	r3, r3
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d106      	bne.n	800ff6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2200      	movs	r2, #0
 800ff62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f7f8 fc88 	bl	800887c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2202      	movs	r2, #2
 800ff70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681a      	ldr	r2, [r3, #0]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	3304      	adds	r3, #4
 800ff7c:	4619      	mov	r1, r3
 800ff7e:	4610      	mov	r0, r2
 800ff80:	f000 fa7c 	bl	801047c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2201      	movs	r2, #1
 800ff88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2201      	movs	r2, #1
 800ff90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2201      	movs	r2, #1
 800ff98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2201      	movs	r2, #1
 800ffb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2201      	movs	r2, #1
 800ffb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2201      	movs	r2, #1
 800ffc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2201      	movs	r2, #1
 800ffd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2201      	movs	r2, #1
 800ffe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ffe4:	2300      	movs	r3, #0
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3708      	adds	r7, #8
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
	...

0800fff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b085      	sub	sp, #20
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	2b01      	cmp	r3, #1
 8010002:	d001      	beq.n	8010008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010004:	2301      	movs	r3, #1
 8010006:	e036      	b.n	8010076 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2202      	movs	r2, #2
 801000c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	68da      	ldr	r2, [r3, #12]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	f042 0201 	orr.w	r2, r2, #1
 801001e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	4a17      	ldr	r2, [pc, #92]	@ (8010084 <HAL_TIM_Base_Start_IT+0x94>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d004      	beq.n	8010034 <HAL_TIM_Base_Start_IT+0x44>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010032:	d115      	bne.n	8010060 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	689a      	ldr	r2, [r3, #8]
 801003a:	4b13      	ldr	r3, [pc, #76]	@ (8010088 <HAL_TIM_Base_Start_IT+0x98>)
 801003c:	4013      	ands	r3, r2
 801003e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2b06      	cmp	r3, #6
 8010044:	d015      	beq.n	8010072 <HAL_TIM_Base_Start_IT+0x82>
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801004c:	d011      	beq.n	8010072 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	681a      	ldr	r2, [r3, #0]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f042 0201 	orr.w	r2, r2, #1
 801005c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801005e:	e008      	b.n	8010072 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	681a      	ldr	r2, [r3, #0]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f042 0201 	orr.w	r2, r2, #1
 801006e:	601a      	str	r2, [r3, #0]
 8010070:	e000      	b.n	8010074 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010072:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010074:	2300      	movs	r3, #0
}
 8010076:	4618      	mov	r0, r3
 8010078:	3714      	adds	r7, #20
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr
 8010082:	bf00      	nop
 8010084:	40012c00 	.word	0x40012c00
 8010088:	00010007 	.word	0x00010007

0801008c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b084      	sub	sp, #16
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	68db      	ldr	r3, [r3, #12]
 801009a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	691b      	ldr	r3, [r3, #16]
 80100a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	f003 0302 	and.w	r3, r3, #2
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d020      	beq.n	80100f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	f003 0302 	and.w	r3, r3, #2
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d01b      	beq.n	80100f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f06f 0202 	mvn.w	r2, #2
 80100c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2201      	movs	r2, #1
 80100c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	699b      	ldr	r3, [r3, #24]
 80100ce:	f003 0303 	and.w	r3, r3, #3
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d003      	beq.n	80100de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f000 f9b2 	bl	8010440 <HAL_TIM_IC_CaptureCallback>
 80100dc:	e005      	b.n	80100ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f000 f9a4 	bl	801042c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f000 f9b5 	bl	8010454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2200      	movs	r2, #0
 80100ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	f003 0304 	and.w	r3, r3, #4
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d020      	beq.n	801013c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	f003 0304 	and.w	r3, r3, #4
 8010100:	2b00      	cmp	r3, #0
 8010102:	d01b      	beq.n	801013c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	f06f 0204 	mvn.w	r2, #4
 801010c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	2202      	movs	r2, #2
 8010112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	699b      	ldr	r3, [r3, #24]
 801011a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801011e:	2b00      	cmp	r3, #0
 8010120:	d003      	beq.n	801012a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f000 f98c 	bl	8010440 <HAL_TIM_IC_CaptureCallback>
 8010128:	e005      	b.n	8010136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f000 f97e 	bl	801042c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f000 f98f 	bl	8010454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2200      	movs	r2, #0
 801013a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	f003 0308 	and.w	r3, r3, #8
 8010142:	2b00      	cmp	r3, #0
 8010144:	d020      	beq.n	8010188 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	f003 0308 	and.w	r3, r3, #8
 801014c:	2b00      	cmp	r3, #0
 801014e:	d01b      	beq.n	8010188 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	f06f 0208 	mvn.w	r2, #8
 8010158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2204      	movs	r2, #4
 801015e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	69db      	ldr	r3, [r3, #28]
 8010166:	f003 0303 	and.w	r3, r3, #3
 801016a:	2b00      	cmp	r3, #0
 801016c:	d003      	beq.n	8010176 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f000 f966 	bl	8010440 <HAL_TIM_IC_CaptureCallback>
 8010174:	e005      	b.n	8010182 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f000 f958 	bl	801042c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f000 f969 	bl	8010454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2200      	movs	r2, #0
 8010186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	f003 0310 	and.w	r3, r3, #16
 801018e:	2b00      	cmp	r3, #0
 8010190:	d020      	beq.n	80101d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	f003 0310 	and.w	r3, r3, #16
 8010198:	2b00      	cmp	r3, #0
 801019a:	d01b      	beq.n	80101d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	f06f 0210 	mvn.w	r2, #16
 80101a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2208      	movs	r2, #8
 80101aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	69db      	ldr	r3, [r3, #28]
 80101b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d003      	beq.n	80101c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f000 f940 	bl	8010440 <HAL_TIM_IC_CaptureCallback>
 80101c0:	e005      	b.n	80101ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f000 f932 	bl	801042c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f000 f943 	bl	8010454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2200      	movs	r2, #0
 80101d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	f003 0301 	and.w	r3, r3, #1
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d00c      	beq.n	80101f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	f003 0301 	and.w	r3, r3, #1
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d007      	beq.n	80101f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f06f 0201 	mvn.w	r2, #1
 80101f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f7f7 fdbc 	bl	8007d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d104      	bne.n	801020c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00c      	beq.n	8010226 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010212:	2b00      	cmp	r3, #0
 8010214:	d007      	beq.n	8010226 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801021e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 faa1 	bl	8010768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801022c:	2b00      	cmp	r3, #0
 801022e:	d00c      	beq.n	801024a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010236:	2b00      	cmp	r3, #0
 8010238:	d007      	beq.n	801024a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8010242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f000 fa99 	bl	801077c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010250:	2b00      	cmp	r3, #0
 8010252:	d00c      	beq.n	801026e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801025a:	2b00      	cmp	r3, #0
 801025c:	d007      	beq.n	801026e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f000 f8fd 	bl	8010468 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	f003 0320 	and.w	r3, r3, #32
 8010274:	2b00      	cmp	r3, #0
 8010276:	d00c      	beq.n	8010292 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	f003 0320 	and.w	r3, r3, #32
 801027e:	2b00      	cmp	r3, #0
 8010280:	d007      	beq.n	8010292 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	f06f 0220 	mvn.w	r2, #32
 801028a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f000 fa61 	bl	8010754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010292:	bf00      	nop
 8010294:	3710      	adds	r7, #16
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}

0801029a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801029a:	b580      	push	{r7, lr}
 801029c:	b084      	sub	sp, #16
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
 80102a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80102a4:	2300      	movs	r3, #0
 80102a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d101      	bne.n	80102b6 <HAL_TIM_ConfigClockSource+0x1c>
 80102b2:	2302      	movs	r3, #2
 80102b4:	e0b6      	b.n	8010424 <HAL_TIM_ConfigClockSource+0x18a>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2201      	movs	r2, #1
 80102ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2202      	movs	r2, #2
 80102c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	689b      	ldr	r3, [r3, #8]
 80102cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80102d4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80102d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80102e0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	68ba      	ldr	r2, [r7, #8]
 80102e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80102f2:	d03e      	beq.n	8010372 <HAL_TIM_ConfigClockSource+0xd8>
 80102f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80102f8:	f200 8087 	bhi.w	801040a <HAL_TIM_ConfigClockSource+0x170>
 80102fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010300:	f000 8086 	beq.w	8010410 <HAL_TIM_ConfigClockSource+0x176>
 8010304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010308:	d87f      	bhi.n	801040a <HAL_TIM_ConfigClockSource+0x170>
 801030a:	2b70      	cmp	r3, #112	@ 0x70
 801030c:	d01a      	beq.n	8010344 <HAL_TIM_ConfigClockSource+0xaa>
 801030e:	2b70      	cmp	r3, #112	@ 0x70
 8010310:	d87b      	bhi.n	801040a <HAL_TIM_ConfigClockSource+0x170>
 8010312:	2b60      	cmp	r3, #96	@ 0x60
 8010314:	d050      	beq.n	80103b8 <HAL_TIM_ConfigClockSource+0x11e>
 8010316:	2b60      	cmp	r3, #96	@ 0x60
 8010318:	d877      	bhi.n	801040a <HAL_TIM_ConfigClockSource+0x170>
 801031a:	2b50      	cmp	r3, #80	@ 0x50
 801031c:	d03c      	beq.n	8010398 <HAL_TIM_ConfigClockSource+0xfe>
 801031e:	2b50      	cmp	r3, #80	@ 0x50
 8010320:	d873      	bhi.n	801040a <HAL_TIM_ConfigClockSource+0x170>
 8010322:	2b40      	cmp	r3, #64	@ 0x40
 8010324:	d058      	beq.n	80103d8 <HAL_TIM_ConfigClockSource+0x13e>
 8010326:	2b40      	cmp	r3, #64	@ 0x40
 8010328:	d86f      	bhi.n	801040a <HAL_TIM_ConfigClockSource+0x170>
 801032a:	2b30      	cmp	r3, #48	@ 0x30
 801032c:	d064      	beq.n	80103f8 <HAL_TIM_ConfigClockSource+0x15e>
 801032e:	2b30      	cmp	r3, #48	@ 0x30
 8010330:	d86b      	bhi.n	801040a <HAL_TIM_ConfigClockSource+0x170>
 8010332:	2b20      	cmp	r3, #32
 8010334:	d060      	beq.n	80103f8 <HAL_TIM_ConfigClockSource+0x15e>
 8010336:	2b20      	cmp	r3, #32
 8010338:	d867      	bhi.n	801040a <HAL_TIM_ConfigClockSource+0x170>
 801033a:	2b00      	cmp	r3, #0
 801033c:	d05c      	beq.n	80103f8 <HAL_TIM_ConfigClockSource+0x15e>
 801033e:	2b10      	cmp	r3, #16
 8010340:	d05a      	beq.n	80103f8 <HAL_TIM_ConfigClockSource+0x15e>
 8010342:	e062      	b.n	801040a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010354:	f000 f97e 	bl	8010654 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	689b      	ldr	r3, [r3, #8]
 801035e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010366:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	68ba      	ldr	r2, [r7, #8]
 801036e:	609a      	str	r2, [r3, #8]
      break;
 8010370:	e04f      	b.n	8010412 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010382:	f000 f967 	bl	8010654 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	689a      	ldr	r2, [r3, #8]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010394:	609a      	str	r2, [r3, #8]
      break;
 8010396:	e03c      	b.n	8010412 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80103a4:	461a      	mov	r2, r3
 80103a6:	f000 f8d9 	bl	801055c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	2150      	movs	r1, #80	@ 0x50
 80103b0:	4618      	mov	r0, r3
 80103b2:	f000 f932 	bl	801061a <TIM_ITRx_SetConfig>
      break;
 80103b6:	e02c      	b.n	8010412 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80103c4:	461a      	mov	r2, r3
 80103c6:	f000 f8f8 	bl	80105ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2160      	movs	r1, #96	@ 0x60
 80103d0:	4618      	mov	r0, r3
 80103d2:	f000 f922 	bl	801061a <TIM_ITRx_SetConfig>
      break;
 80103d6:	e01c      	b.n	8010412 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80103e4:	461a      	mov	r2, r3
 80103e6:	f000 f8b9 	bl	801055c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	2140      	movs	r1, #64	@ 0x40
 80103f0:	4618      	mov	r0, r3
 80103f2:	f000 f912 	bl	801061a <TIM_ITRx_SetConfig>
      break;
 80103f6:	e00c      	b.n	8010412 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	4619      	mov	r1, r3
 8010402:	4610      	mov	r0, r2
 8010404:	f000 f909 	bl	801061a <TIM_ITRx_SetConfig>
      break;
 8010408:	e003      	b.n	8010412 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801040a:	2301      	movs	r3, #1
 801040c:	73fb      	strb	r3, [r7, #15]
      break;
 801040e:	e000      	b.n	8010412 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8010410:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2201      	movs	r2, #1
 8010416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2200      	movs	r2, #0
 801041e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010422:	7bfb      	ldrb	r3, [r7, #15]
}
 8010424:	4618      	mov	r0, r3
 8010426:	3710      	adds	r7, #16
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801042c:	b480      	push	{r7}
 801042e:	b083      	sub	sp, #12
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010434:	bf00      	nop
 8010436:	370c      	adds	r7, #12
 8010438:	46bd      	mov	sp, r7
 801043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043e:	4770      	bx	lr

08010440 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010440:	b480      	push	{r7}
 8010442:	b083      	sub	sp, #12
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010448:	bf00      	nop
 801044a:	370c      	adds	r7, #12
 801044c:	46bd      	mov	sp, r7
 801044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010452:	4770      	bx	lr

08010454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010454:	b480      	push	{r7}
 8010456:	b083      	sub	sp, #12
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801045c:	bf00      	nop
 801045e:	370c      	adds	r7, #12
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr

08010468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010468:	b480      	push	{r7}
 801046a:	b083      	sub	sp, #12
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010470:	bf00      	nop
 8010472:	370c      	adds	r7, #12
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr

0801047c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801047c:	b480      	push	{r7}
 801047e:	b085      	sub	sp, #20
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	4a30      	ldr	r2, [pc, #192]	@ (8010550 <TIM_Base_SetConfig+0xd4>)
 8010490:	4293      	cmp	r3, r2
 8010492:	d003      	beq.n	801049c <TIM_Base_SetConfig+0x20>
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801049a:	d108      	bne.n	80104ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80104a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	685b      	ldr	r3, [r3, #4]
 80104a8:	68fa      	ldr	r2, [r7, #12]
 80104aa:	4313      	orrs	r3, r2
 80104ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	4a27      	ldr	r2, [pc, #156]	@ (8010550 <TIM_Base_SetConfig+0xd4>)
 80104b2:	4293      	cmp	r3, r2
 80104b4:	d00b      	beq.n	80104ce <TIM_Base_SetConfig+0x52>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80104bc:	d007      	beq.n	80104ce <TIM_Base_SetConfig+0x52>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	4a24      	ldr	r2, [pc, #144]	@ (8010554 <TIM_Base_SetConfig+0xd8>)
 80104c2:	4293      	cmp	r3, r2
 80104c4:	d003      	beq.n	80104ce <TIM_Base_SetConfig+0x52>
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	4a23      	ldr	r2, [pc, #140]	@ (8010558 <TIM_Base_SetConfig+0xdc>)
 80104ca:	4293      	cmp	r3, r2
 80104cc:	d108      	bne.n	80104e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80104d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	68db      	ldr	r3, [r3, #12]
 80104da:	68fa      	ldr	r2, [r7, #12]
 80104dc:	4313      	orrs	r3, r2
 80104de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	695b      	ldr	r3, [r3, #20]
 80104ea:	4313      	orrs	r3, r2
 80104ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	68fa      	ldr	r2, [r7, #12]
 80104f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	689a      	ldr	r2, [r3, #8]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	681a      	ldr	r2, [r3, #0]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	4a12      	ldr	r2, [pc, #72]	@ (8010550 <TIM_Base_SetConfig+0xd4>)
 8010508:	4293      	cmp	r3, r2
 801050a:	d007      	beq.n	801051c <TIM_Base_SetConfig+0xa0>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	4a11      	ldr	r2, [pc, #68]	@ (8010554 <TIM_Base_SetConfig+0xd8>)
 8010510:	4293      	cmp	r3, r2
 8010512:	d003      	beq.n	801051c <TIM_Base_SetConfig+0xa0>
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	4a10      	ldr	r2, [pc, #64]	@ (8010558 <TIM_Base_SetConfig+0xdc>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d103      	bne.n	8010524 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	691a      	ldr	r2, [r3, #16]
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2201      	movs	r2, #1
 8010528:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	691b      	ldr	r3, [r3, #16]
 801052e:	f003 0301 	and.w	r3, r3, #1
 8010532:	2b01      	cmp	r3, #1
 8010534:	d105      	bne.n	8010542 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	691b      	ldr	r3, [r3, #16]
 801053a:	f023 0201 	bic.w	r2, r3, #1
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	611a      	str	r2, [r3, #16]
  }
}
 8010542:	bf00      	nop
 8010544:	3714      	adds	r7, #20
 8010546:	46bd      	mov	sp, r7
 8010548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054c:	4770      	bx	lr
 801054e:	bf00      	nop
 8010550:	40012c00 	.word	0x40012c00
 8010554:	40014400 	.word	0x40014400
 8010558:	40014800 	.word	0x40014800

0801055c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801055c:	b480      	push	{r7}
 801055e:	b087      	sub	sp, #28
 8010560:	af00      	add	r7, sp, #0
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	60b9      	str	r1, [r7, #8]
 8010566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	6a1b      	ldr	r3, [r3, #32]
 801056c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	6a1b      	ldr	r3, [r3, #32]
 8010572:	f023 0201 	bic.w	r2, r3, #1
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	699b      	ldr	r3, [r3, #24]
 801057e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	011b      	lsls	r3, r3, #4
 801058c:	693a      	ldr	r2, [r7, #16]
 801058e:	4313      	orrs	r3, r2
 8010590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	f023 030a 	bic.w	r3, r3, #10
 8010598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801059a:	697a      	ldr	r2, [r7, #20]
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	4313      	orrs	r3, r2
 80105a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	693a      	ldr	r2, [r7, #16]
 80105a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	697a      	ldr	r2, [r7, #20]
 80105ac:	621a      	str	r2, [r3, #32]
}
 80105ae:	bf00      	nop
 80105b0:	371c      	adds	r7, #28
 80105b2:	46bd      	mov	sp, r7
 80105b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b8:	4770      	bx	lr

080105ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80105ba:	b480      	push	{r7}
 80105bc:	b087      	sub	sp, #28
 80105be:	af00      	add	r7, sp, #0
 80105c0:	60f8      	str	r0, [r7, #12]
 80105c2:	60b9      	str	r1, [r7, #8]
 80105c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	6a1b      	ldr	r3, [r3, #32]
 80105ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	6a1b      	ldr	r3, [r3, #32]
 80105d0:	f023 0210 	bic.w	r2, r3, #16
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	699b      	ldr	r3, [r3, #24]
 80105dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80105e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	031b      	lsls	r3, r3, #12
 80105ea:	693a      	ldr	r2, [r7, #16]
 80105ec:	4313      	orrs	r3, r2
 80105ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80105f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	011b      	lsls	r3, r3, #4
 80105fc:	697a      	ldr	r2, [r7, #20]
 80105fe:	4313      	orrs	r3, r2
 8010600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	693a      	ldr	r2, [r7, #16]
 8010606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	697a      	ldr	r2, [r7, #20]
 801060c:	621a      	str	r2, [r3, #32]
}
 801060e:	bf00      	nop
 8010610:	371c      	adds	r7, #28
 8010612:	46bd      	mov	sp, r7
 8010614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010618:	4770      	bx	lr

0801061a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801061a:	b480      	push	{r7}
 801061c:	b085      	sub	sp, #20
 801061e:	af00      	add	r7, sp, #0
 8010620:	6078      	str	r0, [r7, #4]
 8010622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	689b      	ldr	r3, [r3, #8]
 8010628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8010630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010634:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010636:	683a      	ldr	r2, [r7, #0]
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	4313      	orrs	r3, r2
 801063c:	f043 0307 	orr.w	r3, r3, #7
 8010640:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	68fa      	ldr	r2, [r7, #12]
 8010646:	609a      	str	r2, [r3, #8]
}
 8010648:	bf00      	nop
 801064a:	3714      	adds	r7, #20
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr

08010654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010654:	b480      	push	{r7}
 8010656:	b087      	sub	sp, #28
 8010658:	af00      	add	r7, sp, #0
 801065a:	60f8      	str	r0, [r7, #12]
 801065c:	60b9      	str	r1, [r7, #8]
 801065e:	607a      	str	r2, [r7, #4]
 8010660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	689b      	ldr	r3, [r3, #8]
 8010666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801066e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	021a      	lsls	r2, r3, #8
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	431a      	orrs	r2, r3
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	4313      	orrs	r3, r2
 801067c:	697a      	ldr	r2, [r7, #20]
 801067e:	4313      	orrs	r3, r2
 8010680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	697a      	ldr	r2, [r7, #20]
 8010686:	609a      	str	r2, [r3, #8]
}
 8010688:	bf00      	nop
 801068a:	371c      	adds	r7, #28
 801068c:	46bd      	mov	sp, r7
 801068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010692:	4770      	bx	lr

08010694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010694:	b480      	push	{r7}
 8010696:	b085      	sub	sp, #20
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d101      	bne.n	80106ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80106a8:	2302      	movs	r3, #2
 80106aa:	e04a      	b.n	8010742 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2201      	movs	r2, #1
 80106b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2202      	movs	r2, #2
 80106b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	689b      	ldr	r3, [r3, #8]
 80106ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	4a1f      	ldr	r2, [pc, #124]	@ (8010750 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d108      	bne.n	80106e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80106dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	685b      	ldr	r3, [r3, #4]
 80106e2:	68fa      	ldr	r2, [r7, #12]
 80106e4:	4313      	orrs	r3, r2
 80106e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80106ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	68fa      	ldr	r2, [r7, #12]
 80106f6:	4313      	orrs	r3, r2
 80106f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	68fa      	ldr	r2, [r7, #12]
 8010700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	4a12      	ldr	r2, [pc, #72]	@ (8010750 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8010708:	4293      	cmp	r3, r2
 801070a:	d004      	beq.n	8010716 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010714:	d10c      	bne.n	8010730 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801071c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	689b      	ldr	r3, [r3, #8]
 8010722:	68ba      	ldr	r2, [r7, #8]
 8010724:	4313      	orrs	r3, r2
 8010726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	68ba      	ldr	r2, [r7, #8]
 801072e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2201      	movs	r2, #1
 8010734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2200      	movs	r2, #0
 801073c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010740:	2300      	movs	r3, #0
}
 8010742:	4618      	mov	r0, r3
 8010744:	3714      	adds	r7, #20
 8010746:	46bd      	mov	sp, r7
 8010748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074c:	4770      	bx	lr
 801074e:	bf00      	nop
 8010750:	40012c00 	.word	0x40012c00

08010754 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010754:	b480      	push	{r7}
 8010756:	b083      	sub	sp, #12
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801075c:	bf00      	nop
 801075e:	370c      	adds	r7, #12
 8010760:	46bd      	mov	sp, r7
 8010762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010766:	4770      	bx	lr

08010768 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010768:	b480      	push	{r7}
 801076a:	b083      	sub	sp, #12
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010770:	bf00      	nop
 8010772:	370c      	adds	r7, #12
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr

0801077c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801077c:	b480      	push	{r7}
 801077e:	b083      	sub	sp, #12
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010784:	bf00      	nop
 8010786:	370c      	adds	r7, #12
 8010788:	46bd      	mov	sp, r7
 801078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078e:	4770      	bx	lr

08010790 <LL_RCC_GetUSARTClockSource>:
{
 8010790:	b480      	push	{r7}
 8010792:	b083      	sub	sp, #12
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8010798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801079c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	4013      	ands	r3, r2
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	370c      	adds	r7, #12
 80107a8:	46bd      	mov	sp, r7
 80107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ae:	4770      	bx	lr

080107b0 <LL_RCC_GetLPUARTClockSource>:
{
 80107b0:	b480      	push	{r7}
 80107b2:	b083      	sub	sp, #12
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80107b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80107bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	4013      	ands	r3, r2
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	370c      	adds	r7, #12
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr

080107d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d101      	bne.n	80107e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80107de:	2301      	movs	r3, #1
 80107e0:	e042      	b.n	8010868 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d106      	bne.n	80107fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2200      	movs	r2, #0
 80107f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f000 f83b 	bl	8010870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2224      	movs	r2, #36	@ 0x24
 80107fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	f022 0201 	bic.w	r2, r2, #1
 8010810:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010816:	2b00      	cmp	r3, #0
 8010818:	d002      	beq.n	8010820 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f000 fae8 	bl	8010df0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f000 f8bd 	bl	80109a0 <UART_SetConfig>
 8010826:	4603      	mov	r3, r0
 8010828:	2b01      	cmp	r3, #1
 801082a:	d101      	bne.n	8010830 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801082c:	2301      	movs	r3, #1
 801082e:	e01b      	b.n	8010868 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	685a      	ldr	r2, [r3, #4]
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801083e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	689a      	ldr	r2, [r3, #8]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801084e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	681a      	ldr	r2, [r3, #0]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f042 0201 	orr.w	r2, r2, #1
 801085e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f000 fb67 	bl	8010f34 <UART_CheckIdleState>
 8010866:	4603      	mov	r3, r0
}
 8010868:	4618      	mov	r0, r3
 801086a:	3708      	adds	r7, #8
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8010870:	b480      	push	{r7}
 8010872:	b083      	sub	sp, #12
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8010878:	bf00      	nop
 801087a:	370c      	adds	r7, #12
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b08a      	sub	sp, #40	@ 0x28
 8010888:	af02      	add	r7, sp, #8
 801088a:	60f8      	str	r0, [r7, #12]
 801088c:	60b9      	str	r1, [r7, #8]
 801088e:	603b      	str	r3, [r7, #0]
 8010890:	4613      	mov	r3, r2
 8010892:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801089a:	2b20      	cmp	r3, #32
 801089c:	d17b      	bne.n	8010996 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d002      	beq.n	80108aa <HAL_UART_Transmit+0x26>
 80108a4:	88fb      	ldrh	r3, [r7, #6]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d101      	bne.n	80108ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80108aa:	2301      	movs	r3, #1
 80108ac:	e074      	b.n	8010998 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	2200      	movs	r2, #0
 80108b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	2221      	movs	r2, #33	@ 0x21
 80108ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80108be:	f7f8 fbe3 	bl	8009088 <HAL_GetTick>
 80108c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	88fa      	ldrh	r2, [r7, #6]
 80108c8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	88fa      	ldrh	r2, [r7, #6]
 80108d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	689b      	ldr	r3, [r3, #8]
 80108d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80108dc:	d108      	bne.n	80108f0 <HAL_UART_Transmit+0x6c>
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	691b      	ldr	r3, [r3, #16]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d104      	bne.n	80108f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80108e6:	2300      	movs	r3, #0
 80108e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	61bb      	str	r3, [r7, #24]
 80108ee:	e003      	b.n	80108f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80108f4:	2300      	movs	r3, #0
 80108f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80108f8:	e030      	b.n	801095c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	9300      	str	r3, [sp, #0]
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	2200      	movs	r2, #0
 8010902:	2180      	movs	r1, #128	@ 0x80
 8010904:	68f8      	ldr	r0, [r7, #12]
 8010906:	f000 fbbf 	bl	8011088 <UART_WaitOnFlagUntilTimeout>
 801090a:	4603      	mov	r3, r0
 801090c:	2b00      	cmp	r3, #0
 801090e:	d005      	beq.n	801091c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	2220      	movs	r2, #32
 8010914:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8010918:	2303      	movs	r3, #3
 801091a:	e03d      	b.n	8010998 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d10b      	bne.n	801093a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010922:	69bb      	ldr	r3, [r7, #24]
 8010924:	881b      	ldrh	r3, [r3, #0]
 8010926:	461a      	mov	r2, r3
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010930:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8010932:	69bb      	ldr	r3, [r7, #24]
 8010934:	3302      	adds	r3, #2
 8010936:	61bb      	str	r3, [r7, #24]
 8010938:	e007      	b.n	801094a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801093a:	69fb      	ldr	r3, [r7, #28]
 801093c:	781a      	ldrb	r2, [r3, #0]
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8010944:	69fb      	ldr	r3, [r7, #28]
 8010946:	3301      	adds	r3, #1
 8010948:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010950:	b29b      	uxth	r3, r3
 8010952:	3b01      	subs	r3, #1
 8010954:	b29a      	uxth	r2, r3
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010962:	b29b      	uxth	r3, r3
 8010964:	2b00      	cmp	r3, #0
 8010966:	d1c8      	bne.n	80108fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	9300      	str	r3, [sp, #0]
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	2200      	movs	r2, #0
 8010970:	2140      	movs	r1, #64	@ 0x40
 8010972:	68f8      	ldr	r0, [r7, #12]
 8010974:	f000 fb88 	bl	8011088 <UART_WaitOnFlagUntilTimeout>
 8010978:	4603      	mov	r3, r0
 801097a:	2b00      	cmp	r3, #0
 801097c:	d005      	beq.n	801098a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	2220      	movs	r2, #32
 8010982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8010986:	2303      	movs	r3, #3
 8010988:	e006      	b.n	8010998 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2220      	movs	r2, #32
 801098e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8010992:	2300      	movs	r3, #0
 8010994:	e000      	b.n	8010998 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010996:	2302      	movs	r3, #2
  }
}
 8010998:	4618      	mov	r0, r3
 801099a:	3720      	adds	r7, #32
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}

080109a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80109a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80109a4:	b08c      	sub	sp, #48	@ 0x30
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80109aa:	2300      	movs	r3, #0
 80109ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	689a      	ldr	r2, [r3, #8]
 80109b4:	697b      	ldr	r3, [r7, #20]
 80109b6:	691b      	ldr	r3, [r3, #16]
 80109b8:	431a      	orrs	r2, r3
 80109ba:	697b      	ldr	r3, [r7, #20]
 80109bc:	695b      	ldr	r3, [r3, #20]
 80109be:	431a      	orrs	r2, r3
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	69db      	ldr	r3, [r3, #28]
 80109c4:	4313      	orrs	r3, r2
 80109c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	4baf      	ldr	r3, [pc, #700]	@ (8010c8c <UART_SetConfig+0x2ec>)
 80109d0:	4013      	ands	r3, r2
 80109d2:	697a      	ldr	r2, [r7, #20]
 80109d4:	6812      	ldr	r2, [r2, #0]
 80109d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80109d8:	430b      	orrs	r3, r1
 80109da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	685b      	ldr	r3, [r3, #4]
 80109e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	68da      	ldr	r2, [r3, #12]
 80109ea:	697b      	ldr	r3, [r7, #20]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	430a      	orrs	r2, r1
 80109f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	699b      	ldr	r3, [r3, #24]
 80109f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	4aa4      	ldr	r2, [pc, #656]	@ (8010c90 <UART_SetConfig+0x2f0>)
 80109fe:	4293      	cmp	r3, r2
 8010a00:	d004      	beq.n	8010a0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	6a1b      	ldr	r3, [r3, #32]
 8010a06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a08:	4313      	orrs	r3, r2
 8010a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	689b      	ldr	r3, [r3, #8]
 8010a12:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8010a16:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8010a1a:	697a      	ldr	r2, [r7, #20]
 8010a1c:	6812      	ldr	r2, [r2, #0]
 8010a1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010a20:	430b      	orrs	r3, r1
 8010a22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a2a:	f023 010f 	bic.w	r1, r3, #15
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	430a      	orrs	r2, r1
 8010a38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	4a95      	ldr	r2, [pc, #596]	@ (8010c94 <UART_SetConfig+0x2f4>)
 8010a40:	4293      	cmp	r3, r2
 8010a42:	d125      	bne.n	8010a90 <UART_SetConfig+0xf0>
 8010a44:	2003      	movs	r0, #3
 8010a46:	f7ff fea3 	bl	8010790 <LL_RCC_GetUSARTClockSource>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	2b03      	cmp	r3, #3
 8010a4e:	d81b      	bhi.n	8010a88 <UART_SetConfig+0xe8>
 8010a50:	a201      	add	r2, pc, #4	@ (adr r2, 8010a58 <UART_SetConfig+0xb8>)
 8010a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a56:	bf00      	nop
 8010a58:	08010a69 	.word	0x08010a69
 8010a5c:	08010a79 	.word	0x08010a79
 8010a60:	08010a71 	.word	0x08010a71
 8010a64:	08010a81 	.word	0x08010a81
 8010a68:	2301      	movs	r3, #1
 8010a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a6e:	e042      	b.n	8010af6 <UART_SetConfig+0x156>
 8010a70:	2302      	movs	r3, #2
 8010a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a76:	e03e      	b.n	8010af6 <UART_SetConfig+0x156>
 8010a78:	2304      	movs	r3, #4
 8010a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a7e:	e03a      	b.n	8010af6 <UART_SetConfig+0x156>
 8010a80:	2308      	movs	r3, #8
 8010a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a86:	e036      	b.n	8010af6 <UART_SetConfig+0x156>
 8010a88:	2310      	movs	r3, #16
 8010a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a8e:	e032      	b.n	8010af6 <UART_SetConfig+0x156>
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4a7e      	ldr	r2, [pc, #504]	@ (8010c90 <UART_SetConfig+0x2f0>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d12a      	bne.n	8010af0 <UART_SetConfig+0x150>
 8010a9a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8010a9e:	f7ff fe87 	bl	80107b0 <LL_RCC_GetLPUARTClockSource>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010aa8:	d01a      	beq.n	8010ae0 <UART_SetConfig+0x140>
 8010aaa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010aae:	d81b      	bhi.n	8010ae8 <UART_SetConfig+0x148>
 8010ab0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010ab4:	d00c      	beq.n	8010ad0 <UART_SetConfig+0x130>
 8010ab6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010aba:	d815      	bhi.n	8010ae8 <UART_SetConfig+0x148>
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d003      	beq.n	8010ac8 <UART_SetConfig+0x128>
 8010ac0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010ac4:	d008      	beq.n	8010ad8 <UART_SetConfig+0x138>
 8010ac6:	e00f      	b.n	8010ae8 <UART_SetConfig+0x148>
 8010ac8:	2300      	movs	r3, #0
 8010aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ace:	e012      	b.n	8010af6 <UART_SetConfig+0x156>
 8010ad0:	2302      	movs	r3, #2
 8010ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ad6:	e00e      	b.n	8010af6 <UART_SetConfig+0x156>
 8010ad8:	2304      	movs	r3, #4
 8010ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ade:	e00a      	b.n	8010af6 <UART_SetConfig+0x156>
 8010ae0:	2308      	movs	r3, #8
 8010ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ae6:	e006      	b.n	8010af6 <UART_SetConfig+0x156>
 8010ae8:	2310      	movs	r3, #16
 8010aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010aee:	e002      	b.n	8010af6 <UART_SetConfig+0x156>
 8010af0:	2310      	movs	r3, #16
 8010af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4a65      	ldr	r2, [pc, #404]	@ (8010c90 <UART_SetConfig+0x2f0>)
 8010afc:	4293      	cmp	r3, r2
 8010afe:	f040 8097 	bne.w	8010c30 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010b02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010b06:	2b08      	cmp	r3, #8
 8010b08:	d823      	bhi.n	8010b52 <UART_SetConfig+0x1b2>
 8010b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8010b10 <UART_SetConfig+0x170>)
 8010b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b10:	08010b35 	.word	0x08010b35
 8010b14:	08010b53 	.word	0x08010b53
 8010b18:	08010b3d 	.word	0x08010b3d
 8010b1c:	08010b53 	.word	0x08010b53
 8010b20:	08010b43 	.word	0x08010b43
 8010b24:	08010b53 	.word	0x08010b53
 8010b28:	08010b53 	.word	0x08010b53
 8010b2c:	08010b53 	.word	0x08010b53
 8010b30:	08010b4b 	.word	0x08010b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010b34:	f7fe fd00 	bl	800f538 <HAL_RCC_GetPCLK1Freq>
 8010b38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010b3a:	e010      	b.n	8010b5e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010b3c:	4b56      	ldr	r3, [pc, #344]	@ (8010c98 <UART_SetConfig+0x2f8>)
 8010b3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010b40:	e00d      	b.n	8010b5e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010b42:	f7fe fc79 	bl	800f438 <HAL_RCC_GetSysClockFreq>
 8010b46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010b48:	e009      	b.n	8010b5e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010b4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010b50:	e005      	b.n	8010b5e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8010b52:	2300      	movs	r3, #0
 8010b54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010b56:	2301      	movs	r3, #1
 8010b58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010b5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f000 812b 	beq.w	8010dbc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010b66:	697b      	ldr	r3, [r7, #20]
 8010b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b6a:	4a4c      	ldr	r2, [pc, #304]	@ (8010c9c <UART_SetConfig+0x2fc>)
 8010b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b70:	461a      	mov	r2, r3
 8010b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	685a      	ldr	r2, [r3, #4]
 8010b7e:	4613      	mov	r3, r2
 8010b80:	005b      	lsls	r3, r3, #1
 8010b82:	4413      	add	r3, r2
 8010b84:	69ba      	ldr	r2, [r7, #24]
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d305      	bcc.n	8010b96 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	685b      	ldr	r3, [r3, #4]
 8010b8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010b90:	69ba      	ldr	r2, [r7, #24]
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d903      	bls.n	8010b9e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8010b96:	2301      	movs	r3, #1
 8010b98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010b9c:	e10e      	b.n	8010dbc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	60bb      	str	r3, [r7, #8]
 8010ba4:	60fa      	str	r2, [r7, #12]
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010baa:	4a3c      	ldr	r2, [pc, #240]	@ (8010c9c <UART_SetConfig+0x2fc>)
 8010bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	603b      	str	r3, [r7, #0]
 8010bb6:	607a      	str	r2, [r7, #4]
 8010bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010bc0:	f7f0 f81a 	bl	8000bf8 <__aeabi_uldivmod>
 8010bc4:	4602      	mov	r2, r0
 8010bc6:	460b      	mov	r3, r1
 8010bc8:	4610      	mov	r0, r2
 8010bca:	4619      	mov	r1, r3
 8010bcc:	f04f 0200 	mov.w	r2, #0
 8010bd0:	f04f 0300 	mov.w	r3, #0
 8010bd4:	020b      	lsls	r3, r1, #8
 8010bd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010bda:	0202      	lsls	r2, r0, #8
 8010bdc:	6979      	ldr	r1, [r7, #20]
 8010bde:	6849      	ldr	r1, [r1, #4]
 8010be0:	0849      	lsrs	r1, r1, #1
 8010be2:	2000      	movs	r0, #0
 8010be4:	460c      	mov	r4, r1
 8010be6:	4605      	mov	r5, r0
 8010be8:	eb12 0804 	adds.w	r8, r2, r4
 8010bec:	eb43 0905 	adc.w	r9, r3, r5
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	685b      	ldr	r3, [r3, #4]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	469a      	mov	sl, r3
 8010bf8:	4693      	mov	fp, r2
 8010bfa:	4652      	mov	r2, sl
 8010bfc:	465b      	mov	r3, fp
 8010bfe:	4640      	mov	r0, r8
 8010c00:	4649      	mov	r1, r9
 8010c02:	f7ef fff9 	bl	8000bf8 <__aeabi_uldivmod>
 8010c06:	4602      	mov	r2, r0
 8010c08:	460b      	mov	r3, r1
 8010c0a:	4613      	mov	r3, r2
 8010c0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010c0e:	6a3b      	ldr	r3, [r7, #32]
 8010c10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010c14:	d308      	bcc.n	8010c28 <UART_SetConfig+0x288>
 8010c16:	6a3b      	ldr	r3, [r7, #32]
 8010c18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010c1c:	d204      	bcs.n	8010c28 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	6a3a      	ldr	r2, [r7, #32]
 8010c24:	60da      	str	r2, [r3, #12]
 8010c26:	e0c9      	b.n	8010dbc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8010c28:	2301      	movs	r3, #1
 8010c2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010c2e:	e0c5      	b.n	8010dbc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	69db      	ldr	r3, [r3, #28]
 8010c34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c38:	d16d      	bne.n	8010d16 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8010c3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010c3e:	3b01      	subs	r3, #1
 8010c40:	2b07      	cmp	r3, #7
 8010c42:	d82d      	bhi.n	8010ca0 <UART_SetConfig+0x300>
 8010c44:	a201      	add	r2, pc, #4	@ (adr r2, 8010c4c <UART_SetConfig+0x2ac>)
 8010c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c4a:	bf00      	nop
 8010c4c:	08010c6d 	.word	0x08010c6d
 8010c50:	08010c75 	.word	0x08010c75
 8010c54:	08010ca1 	.word	0x08010ca1
 8010c58:	08010c7b 	.word	0x08010c7b
 8010c5c:	08010ca1 	.word	0x08010ca1
 8010c60:	08010ca1 	.word	0x08010ca1
 8010c64:	08010ca1 	.word	0x08010ca1
 8010c68:	08010c83 	.word	0x08010c83
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c6c:	f7fe fc7a 	bl	800f564 <HAL_RCC_GetPCLK2Freq>
 8010c70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010c72:	e01b      	b.n	8010cac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010c74:	4b08      	ldr	r3, [pc, #32]	@ (8010c98 <UART_SetConfig+0x2f8>)
 8010c76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010c78:	e018      	b.n	8010cac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010c7a:	f7fe fbdd 	bl	800f438 <HAL_RCC_GetSysClockFreq>
 8010c7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010c80:	e014      	b.n	8010cac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010c86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010c88:	e010      	b.n	8010cac <UART_SetConfig+0x30c>
 8010c8a:	bf00      	nop
 8010c8c:	cfff69f3 	.word	0xcfff69f3
 8010c90:	40008000 	.word	0x40008000
 8010c94:	40013800 	.word	0x40013800
 8010c98:	00f42400 	.word	0x00f42400
 8010c9c:	0801cdc0 	.word	0x0801cdc0
      default:
        pclk = 0U;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010caa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	f000 8084 	beq.w	8010dbc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8010de8 <UART_SetConfig+0x448>)
 8010cba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8010cc6:	005a      	lsls	r2, r3, #1
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	685b      	ldr	r3, [r3, #4]
 8010ccc:	085b      	lsrs	r3, r3, #1
 8010cce:	441a      	add	r2, r3
 8010cd0:	697b      	ldr	r3, [r7, #20]
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cd8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010cda:	6a3b      	ldr	r3, [r7, #32]
 8010cdc:	2b0f      	cmp	r3, #15
 8010cde:	d916      	bls.n	8010d0e <UART_SetConfig+0x36e>
 8010ce0:	6a3b      	ldr	r3, [r7, #32]
 8010ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010ce6:	d212      	bcs.n	8010d0e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010ce8:	6a3b      	ldr	r3, [r7, #32]
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	f023 030f 	bic.w	r3, r3, #15
 8010cf0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010cf2:	6a3b      	ldr	r3, [r7, #32]
 8010cf4:	085b      	lsrs	r3, r3, #1
 8010cf6:	b29b      	uxth	r3, r3
 8010cf8:	f003 0307 	and.w	r3, r3, #7
 8010cfc:	b29a      	uxth	r2, r3
 8010cfe:	8bfb      	ldrh	r3, [r7, #30]
 8010d00:	4313      	orrs	r3, r2
 8010d02:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	8bfa      	ldrh	r2, [r7, #30]
 8010d0a:	60da      	str	r2, [r3, #12]
 8010d0c:	e056      	b.n	8010dbc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8010d0e:	2301      	movs	r3, #1
 8010d10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010d14:	e052      	b.n	8010dbc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010d16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010d1a:	3b01      	subs	r3, #1
 8010d1c:	2b07      	cmp	r3, #7
 8010d1e:	d822      	bhi.n	8010d66 <UART_SetConfig+0x3c6>
 8010d20:	a201      	add	r2, pc, #4	@ (adr r2, 8010d28 <UART_SetConfig+0x388>)
 8010d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d26:	bf00      	nop
 8010d28:	08010d49 	.word	0x08010d49
 8010d2c:	08010d51 	.word	0x08010d51
 8010d30:	08010d67 	.word	0x08010d67
 8010d34:	08010d57 	.word	0x08010d57
 8010d38:	08010d67 	.word	0x08010d67
 8010d3c:	08010d67 	.word	0x08010d67
 8010d40:	08010d67 	.word	0x08010d67
 8010d44:	08010d5f 	.word	0x08010d5f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d48:	f7fe fc0c 	bl	800f564 <HAL_RCC_GetPCLK2Freq>
 8010d4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010d4e:	e010      	b.n	8010d72 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010d50:	4b26      	ldr	r3, [pc, #152]	@ (8010dec <UART_SetConfig+0x44c>)
 8010d52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010d54:	e00d      	b.n	8010d72 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010d56:	f7fe fb6f 	bl	800f438 <HAL_RCC_GetSysClockFreq>
 8010d5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010d5c:	e009      	b.n	8010d72 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010d62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010d64:	e005      	b.n	8010d72 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8010d66:	2300      	movs	r3, #0
 8010d68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010d70:	bf00      	nop
    }

    if (pclk != 0U)
 8010d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d021      	beq.n	8010dbc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8010de8 <UART_SetConfig+0x448>)
 8010d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d82:	461a      	mov	r2, r3
 8010d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d86:	fbb3 f2f2 	udiv	r2, r3, r2
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	085b      	lsrs	r3, r3, #1
 8010d90:	441a      	add	r2, r3
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010d9c:	6a3b      	ldr	r3, [r7, #32]
 8010d9e:	2b0f      	cmp	r3, #15
 8010da0:	d909      	bls.n	8010db6 <UART_SetConfig+0x416>
 8010da2:	6a3b      	ldr	r3, [r7, #32]
 8010da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010da8:	d205      	bcs.n	8010db6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010daa:	6a3b      	ldr	r3, [r7, #32]
 8010dac:	b29a      	uxth	r2, r3
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	60da      	str	r2, [r3, #12]
 8010db4:	e002      	b.n	8010dbc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8010db6:	2301      	movs	r3, #1
 8010db8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	2201      	movs	r2, #1
 8010dc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010dd8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3730      	adds	r7, #48	@ 0x30
 8010de0:	46bd      	mov	sp, r7
 8010de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010de6:	bf00      	nop
 8010de8:	0801cdc0 	.word	0x0801cdc0
 8010dec:	00f42400 	.word	0x00f42400

08010df0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010df0:	b480      	push	{r7}
 8010df2:	b083      	sub	sp, #12
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010dfc:	f003 0308 	and.w	r3, r3, #8
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d00a      	beq.n	8010e1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	430a      	orrs	r2, r1
 8010e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e1e:	f003 0301 	and.w	r3, r3, #1
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d00a      	beq.n	8010e3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	685b      	ldr	r3, [r3, #4]
 8010e2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	430a      	orrs	r2, r1
 8010e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e40:	f003 0302 	and.w	r3, r3, #2
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d00a      	beq.n	8010e5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	430a      	orrs	r2, r1
 8010e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e62:	f003 0304 	and.w	r3, r3, #4
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d00a      	beq.n	8010e80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	685b      	ldr	r3, [r3, #4]
 8010e70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	430a      	orrs	r2, r1
 8010e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e84:	f003 0310 	and.w	r3, r3, #16
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d00a      	beq.n	8010ea2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	689b      	ldr	r3, [r3, #8]
 8010e92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	430a      	orrs	r2, r1
 8010ea0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ea6:	f003 0320 	and.w	r3, r3, #32
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d00a      	beq.n	8010ec4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	689b      	ldr	r3, [r3, #8]
 8010eb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	430a      	orrs	r2, r1
 8010ec2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d01a      	beq.n	8010f06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	685b      	ldr	r3, [r3, #4]
 8010ed6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	430a      	orrs	r2, r1
 8010ee4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010eea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010eee:	d10a      	bne.n	8010f06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	685b      	ldr	r3, [r3, #4]
 8010ef6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	430a      	orrs	r2, r1
 8010f04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d00a      	beq.n	8010f28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	430a      	orrs	r2, r1
 8010f26:	605a      	str	r2, [r3, #4]
  }
}
 8010f28:	bf00      	nop
 8010f2a:	370c      	adds	r7, #12
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f32:	4770      	bx	lr

08010f34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b098      	sub	sp, #96	@ 0x60
 8010f38:	af02      	add	r7, sp, #8
 8010f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2200      	movs	r2, #0
 8010f40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010f44:	f7f8 f8a0 	bl	8009088 <HAL_GetTick>
 8010f48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	f003 0308 	and.w	r3, r3, #8
 8010f54:	2b08      	cmp	r3, #8
 8010f56:	d12f      	bne.n	8010fb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010f58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010f5c:	9300      	str	r3, [sp, #0]
 8010f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010f60:	2200      	movs	r2, #0
 8010f62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f000 f88e 	bl	8011088 <UART_WaitOnFlagUntilTimeout>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d022      	beq.n	8010fb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f7a:	e853 3f00 	ldrex	r3, [r3]
 8010f7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010f86:	653b      	str	r3, [r7, #80]	@ 0x50
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010f96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010f98:	e841 2300 	strex	r3, r2, [r1]
 8010f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d1e6      	bne.n	8010f72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2220      	movs	r2, #32
 8010fa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010fb4:	2303      	movs	r3, #3
 8010fb6:	e063      	b.n	8011080 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	f003 0304 	and.w	r3, r3, #4
 8010fc2:	2b04      	cmp	r3, #4
 8010fc4:	d149      	bne.n	801105a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010fc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010fca:	9300      	str	r3, [sp, #0]
 8010fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010fce:	2200      	movs	r2, #0
 8010fd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f000 f857 	bl	8011088 <UART_WaitOnFlagUntilTimeout>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d03c      	beq.n	801105a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fe8:	e853 3f00 	ldrex	r3, [r3]
 8010fec:	623b      	str	r3, [r7, #32]
   return(result);
 8010fee:	6a3b      	ldr	r3, [r7, #32]
 8010ff0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	461a      	mov	r2, r3
 8010ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ffe:	633b      	str	r3, [r7, #48]	@ 0x30
 8011000:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011002:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011006:	e841 2300 	strex	r3, r2, [r1]
 801100a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801100c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801100e:	2b00      	cmp	r3, #0
 8011010:	d1e6      	bne.n	8010fe0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	3308      	adds	r3, #8
 8011018:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	e853 3f00 	ldrex	r3, [r3]
 8011020:	60fb      	str	r3, [r7, #12]
   return(result);
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	f023 0301 	bic.w	r3, r3, #1
 8011028:	64bb      	str	r3, [r7, #72]	@ 0x48
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	3308      	adds	r3, #8
 8011030:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011032:	61fa      	str	r2, [r7, #28]
 8011034:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011036:	69b9      	ldr	r1, [r7, #24]
 8011038:	69fa      	ldr	r2, [r7, #28]
 801103a:	e841 2300 	strex	r3, r2, [r1]
 801103e:	617b      	str	r3, [r7, #20]
   return(result);
 8011040:	697b      	ldr	r3, [r7, #20]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d1e5      	bne.n	8011012 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2220      	movs	r2, #32
 801104a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2200      	movs	r2, #0
 8011052:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011056:	2303      	movs	r3, #3
 8011058:	e012      	b.n	8011080 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2220      	movs	r2, #32
 801105e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2220      	movs	r2, #32
 8011066:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2200      	movs	r2, #0
 801106e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2200      	movs	r2, #0
 8011074:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2200      	movs	r2, #0
 801107a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801107e:	2300      	movs	r3, #0
}
 8011080:	4618      	mov	r0, r3
 8011082:	3758      	adds	r7, #88	@ 0x58
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}

08011088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b084      	sub	sp, #16
 801108c:	af00      	add	r7, sp, #0
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	603b      	str	r3, [r7, #0]
 8011094:	4613      	mov	r3, r2
 8011096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011098:	e04f      	b.n	801113a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801109a:	69bb      	ldr	r3, [r7, #24]
 801109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110a0:	d04b      	beq.n	801113a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80110a2:	f7f7 fff1 	bl	8009088 <HAL_GetTick>
 80110a6:	4602      	mov	r2, r0
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	1ad3      	subs	r3, r2, r3
 80110ac:	69ba      	ldr	r2, [r7, #24]
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d302      	bcc.n	80110b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80110b2:	69bb      	ldr	r3, [r7, #24]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d101      	bne.n	80110bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80110b8:	2303      	movs	r3, #3
 80110ba:	e04e      	b.n	801115a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	f003 0304 	and.w	r3, r3, #4
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d037      	beq.n	801113a <UART_WaitOnFlagUntilTimeout+0xb2>
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	2b80      	cmp	r3, #128	@ 0x80
 80110ce:	d034      	beq.n	801113a <UART_WaitOnFlagUntilTimeout+0xb2>
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	2b40      	cmp	r3, #64	@ 0x40
 80110d4:	d031      	beq.n	801113a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	69db      	ldr	r3, [r3, #28]
 80110dc:	f003 0308 	and.w	r3, r3, #8
 80110e0:	2b08      	cmp	r3, #8
 80110e2:	d110      	bne.n	8011106 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	2208      	movs	r2, #8
 80110ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80110ec:	68f8      	ldr	r0, [r7, #12]
 80110ee:	f000 f838 	bl	8011162 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	2208      	movs	r2, #8
 80110f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	2200      	movs	r2, #0
 80110fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011102:	2301      	movs	r3, #1
 8011104:	e029      	b.n	801115a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	69db      	ldr	r3, [r3, #28]
 801110c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011114:	d111      	bne.n	801113a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801111e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011120:	68f8      	ldr	r0, [r7, #12]
 8011122:	f000 f81e 	bl	8011162 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	2220      	movs	r2, #32
 801112a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	2200      	movs	r2, #0
 8011132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011136:	2303      	movs	r3, #3
 8011138:	e00f      	b.n	801115a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	69da      	ldr	r2, [r3, #28]
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	4013      	ands	r3, r2
 8011144:	68ba      	ldr	r2, [r7, #8]
 8011146:	429a      	cmp	r2, r3
 8011148:	bf0c      	ite	eq
 801114a:	2301      	moveq	r3, #1
 801114c:	2300      	movne	r3, #0
 801114e:	b2db      	uxtb	r3, r3
 8011150:	461a      	mov	r2, r3
 8011152:	79fb      	ldrb	r3, [r7, #7]
 8011154:	429a      	cmp	r2, r3
 8011156:	d0a0      	beq.n	801109a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011158:	2300      	movs	r3, #0
}
 801115a:	4618      	mov	r0, r3
 801115c:	3710      	adds	r7, #16
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}

08011162 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011162:	b480      	push	{r7}
 8011164:	b095      	sub	sp, #84	@ 0x54
 8011166:	af00      	add	r7, sp, #0
 8011168:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011172:	e853 3f00 	ldrex	r3, [r3]
 8011176:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801117a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801117e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	461a      	mov	r2, r3
 8011186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011188:	643b      	str	r3, [r7, #64]	@ 0x40
 801118a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801118c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801118e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011190:	e841 2300 	strex	r3, r2, [r1]
 8011194:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011198:	2b00      	cmp	r3, #0
 801119a:	d1e6      	bne.n	801116a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	3308      	adds	r3, #8
 80111a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111a4:	6a3b      	ldr	r3, [r7, #32]
 80111a6:	e853 3f00 	ldrex	r3, [r3]
 80111aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80111ac:	69fb      	ldr	r3, [r7, #28]
 80111ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80111b2:	f023 0301 	bic.w	r3, r3, #1
 80111b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	3308      	adds	r3, #8
 80111be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80111c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80111c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80111c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80111c8:	e841 2300 	strex	r3, r2, [r1]
 80111cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80111ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d1e3      	bne.n	801119c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111d8:	2b01      	cmp	r3, #1
 80111da:	d118      	bne.n	801120e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	e853 3f00 	ldrex	r3, [r3]
 80111e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	f023 0310 	bic.w	r3, r3, #16
 80111f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	461a      	mov	r2, r3
 80111f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80111fa:	61bb      	str	r3, [r7, #24]
 80111fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111fe:	6979      	ldr	r1, [r7, #20]
 8011200:	69ba      	ldr	r2, [r7, #24]
 8011202:	e841 2300 	strex	r3, r2, [r1]
 8011206:	613b      	str	r3, [r7, #16]
   return(result);
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d1e6      	bne.n	80111dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2220      	movs	r2, #32
 8011212:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2200      	movs	r2, #0
 801121a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2200      	movs	r2, #0
 8011220:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011222:	bf00      	nop
 8011224:	3754      	adds	r7, #84	@ 0x54
 8011226:	46bd      	mov	sp, r7
 8011228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122c:	4770      	bx	lr

0801122e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801122e:	b480      	push	{r7}
 8011230:	b085      	sub	sp, #20
 8011232:	af00      	add	r7, sp, #0
 8011234:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2200      	movs	r2, #0
 801123a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801123e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8011242:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	b29a      	uxth	r2, r3
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 801124e:	2300      	movs	r3, #0
}
 8011250:	4618      	mov	r0, r3
 8011252:	3714      	adds	r7, #20
 8011254:	46bd      	mov	sp, r7
 8011256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125a:	4770      	bx	lr

0801125c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801125c:	b480      	push	{r7}
 801125e:	b085      	sub	sp, #20
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011264:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8011268:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8011270:	b29a      	uxth	r2, r3
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	b29b      	uxth	r3, r3
 8011276:	43db      	mvns	r3, r3
 8011278:	b29b      	uxth	r3, r3
 801127a:	4013      	ands	r3, r2
 801127c:	b29a      	uxth	r2, r3
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8011284:	2300      	movs	r3, #0
}
 8011286:	4618      	mov	r0, r3
 8011288:	3714      	adds	r7, #20
 801128a:	46bd      	mov	sp, r7
 801128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011290:	4770      	bx	lr

08011292 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8011292:	b480      	push	{r7}
 8011294:	b085      	sub	sp, #20
 8011296:	af00      	add	r7, sp, #0
 8011298:	60f8      	str	r0, [r7, #12]
 801129a:	1d3b      	adds	r3, r7, #4
 801129c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	2201      	movs	r2, #1
 80112a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	2200      	movs	r2, #0
 80112ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	2200      	movs	r2, #0
 80112b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	2200      	movs	r2, #0
 80112bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80112c0:	2300      	movs	r3, #0
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3714      	adds	r7, #20
 80112c6:	46bd      	mov	sp, r7
 80112c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112cc:	4770      	bx	lr
	...

080112d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80112d0:	b480      	push	{r7}
 80112d2:	b09d      	sub	sp, #116	@ 0x74
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
 80112d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80112da:	2300      	movs	r3, #0
 80112dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80112e0:	687a      	ldr	r2, [r7, #4]
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	781b      	ldrb	r3, [r3, #0]
 80112e6:	009b      	lsls	r3, r3, #2
 80112e8:	4413      	add	r3, r2
 80112ea:	881b      	ldrh	r3, [r3, #0]
 80112ec:	b29b      	uxth	r3, r3
 80112ee:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80112f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80112f6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	78db      	ldrb	r3, [r3, #3]
 80112fe:	2b03      	cmp	r3, #3
 8011300:	d81f      	bhi.n	8011342 <USB_ActivateEndpoint+0x72>
 8011302:	a201      	add	r2, pc, #4	@ (adr r2, 8011308 <USB_ActivateEndpoint+0x38>)
 8011304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011308:	08011319 	.word	0x08011319
 801130c:	08011335 	.word	0x08011335
 8011310:	0801134b 	.word	0x0801134b
 8011314:	08011327 	.word	0x08011327
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011318:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801131c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011320:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8011324:	e012      	b.n	801134c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8011326:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801132a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 801132e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8011332:	e00b      	b.n	801134c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8011334:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8011338:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801133c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8011340:	e004      	b.n	801134c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8011342:	2301      	movs	r3, #1
 8011344:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8011348:	e000      	b.n	801134c <USB_ActivateEndpoint+0x7c>
      break;
 801134a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801134c:	687a      	ldr	r2, [r7, #4]
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	009b      	lsls	r3, r3, #2
 8011354:	441a      	add	r2, r3
 8011356:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801135a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801135e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801136a:	b29b      	uxth	r3, r3
 801136c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801136e:	687a      	ldr	r2, [r7, #4]
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	009b      	lsls	r3, r3, #2
 8011376:	4413      	add	r3, r2
 8011378:	881b      	ldrh	r3, [r3, #0]
 801137a:	b29b      	uxth	r3, r3
 801137c:	b21b      	sxth	r3, r3
 801137e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011386:	b21a      	sxth	r2, r3
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	b21b      	sxth	r3, r3
 801138e:	4313      	orrs	r3, r2
 8011390:	b21b      	sxth	r3, r3
 8011392:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8011396:	687a      	ldr	r2, [r7, #4]
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	009b      	lsls	r3, r3, #2
 801139e:	441a      	add	r2, r3
 80113a0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80113a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80113a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80113ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80113b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	7b1b      	ldrb	r3, [r3, #12]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	f040 8178 	bne.w	80116b2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	785b      	ldrb	r3, [r3, #1]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	f000 8084 	beq.w	80114d4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	61bb      	str	r3, [r7, #24]
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80113d6:	b29b      	uxth	r3, r3
 80113d8:	461a      	mov	r2, r3
 80113da:	69bb      	ldr	r3, [r7, #24]
 80113dc:	4413      	add	r3, r2
 80113de:	61bb      	str	r3, [r7, #24]
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	781b      	ldrb	r3, [r3, #0]
 80113e4:	00da      	lsls	r2, r3, #3
 80113e6:	69bb      	ldr	r3, [r7, #24]
 80113e8:	4413      	add	r3, r2
 80113ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80113ee:	617b      	str	r3, [r7, #20]
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	88db      	ldrh	r3, [r3, #6]
 80113f4:	085b      	lsrs	r3, r3, #1
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	005b      	lsls	r3, r3, #1
 80113fa:	b29a      	uxth	r2, r3
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011400:	687a      	ldr	r2, [r7, #4]
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	009b      	lsls	r3, r3, #2
 8011408:	4413      	add	r3, r2
 801140a:	881b      	ldrh	r3, [r3, #0]
 801140c:	827b      	strh	r3, [r7, #18]
 801140e:	8a7b      	ldrh	r3, [r7, #18]
 8011410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011414:	2b00      	cmp	r3, #0
 8011416:	d01b      	beq.n	8011450 <USB_ActivateEndpoint+0x180>
 8011418:	687a      	ldr	r2, [r7, #4]
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	009b      	lsls	r3, r3, #2
 8011420:	4413      	add	r3, r2
 8011422:	881b      	ldrh	r3, [r3, #0]
 8011424:	b29b      	uxth	r3, r3
 8011426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801142a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801142e:	823b      	strh	r3, [r7, #16]
 8011430:	687a      	ldr	r2, [r7, #4]
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	781b      	ldrb	r3, [r3, #0]
 8011436:	009b      	lsls	r3, r3, #2
 8011438:	441a      	add	r2, r3
 801143a:	8a3b      	ldrh	r3, [r7, #16]
 801143c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011440:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011444:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011448:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801144c:	b29b      	uxth	r3, r3
 801144e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	78db      	ldrb	r3, [r3, #3]
 8011454:	2b01      	cmp	r3, #1
 8011456:	d020      	beq.n	801149a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011458:	687a      	ldr	r2, [r7, #4]
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	781b      	ldrb	r3, [r3, #0]
 801145e:	009b      	lsls	r3, r3, #2
 8011460:	4413      	add	r3, r2
 8011462:	881b      	ldrh	r3, [r3, #0]
 8011464:	b29b      	uxth	r3, r3
 8011466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801146a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801146e:	81bb      	strh	r3, [r7, #12]
 8011470:	89bb      	ldrh	r3, [r7, #12]
 8011472:	f083 0320 	eor.w	r3, r3, #32
 8011476:	81bb      	strh	r3, [r7, #12]
 8011478:	687a      	ldr	r2, [r7, #4]
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	781b      	ldrb	r3, [r3, #0]
 801147e:	009b      	lsls	r3, r3, #2
 8011480:	441a      	add	r2, r3
 8011482:	89bb      	ldrh	r3, [r7, #12]
 8011484:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011488:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801148c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011494:	b29b      	uxth	r3, r3
 8011496:	8013      	strh	r3, [r2, #0]
 8011498:	e2d5      	b.n	8011a46 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801149a:	687a      	ldr	r2, [r7, #4]
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	009b      	lsls	r3, r3, #2
 80114a2:	4413      	add	r3, r2
 80114a4:	881b      	ldrh	r3, [r3, #0]
 80114a6:	b29b      	uxth	r3, r3
 80114a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80114ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80114b0:	81fb      	strh	r3, [r7, #14]
 80114b2:	687a      	ldr	r2, [r7, #4]
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	009b      	lsls	r3, r3, #2
 80114ba:	441a      	add	r2, r3
 80114bc:	89fb      	ldrh	r3, [r7, #14]
 80114be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80114c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80114c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80114ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	8013      	strh	r3, [r2, #0]
 80114d2:	e2b8      	b.n	8011a46 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80114de:	b29b      	uxth	r3, r3
 80114e0:	461a      	mov	r2, r3
 80114e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114e4:	4413      	add	r3, r2
 80114e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	781b      	ldrb	r3, [r3, #0]
 80114ec:	00da      	lsls	r2, r3, #3
 80114ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114f0:	4413      	add	r3, r2
 80114f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80114f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	88db      	ldrh	r3, [r3, #6]
 80114fc:	085b      	lsrs	r3, r3, #1
 80114fe:	b29b      	uxth	r3, r3
 8011500:	005b      	lsls	r3, r3, #1
 8011502:	b29a      	uxth	r2, r3
 8011504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011506:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011512:	b29b      	uxth	r3, r3
 8011514:	461a      	mov	r2, r3
 8011516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011518:	4413      	add	r3, r2
 801151a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	00da      	lsls	r2, r3, #3
 8011522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011524:	4413      	add	r3, r2
 8011526:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801152a:	627b      	str	r3, [r7, #36]	@ 0x24
 801152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801152e:	881b      	ldrh	r3, [r3, #0]
 8011530:	b29b      	uxth	r3, r3
 8011532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011536:	b29a      	uxth	r2, r3
 8011538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801153a:	801a      	strh	r2, [r3, #0]
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	691b      	ldr	r3, [r3, #16]
 8011540:	2b3e      	cmp	r3, #62	@ 0x3e
 8011542:	d91d      	bls.n	8011580 <USB_ActivateEndpoint+0x2b0>
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	691b      	ldr	r3, [r3, #16]
 8011548:	095b      	lsrs	r3, r3, #5
 801154a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	691b      	ldr	r3, [r3, #16]
 8011550:	f003 031f 	and.w	r3, r3, #31
 8011554:	2b00      	cmp	r3, #0
 8011556:	d102      	bne.n	801155e <USB_ActivateEndpoint+0x28e>
 8011558:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801155a:	3b01      	subs	r3, #1
 801155c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011560:	881b      	ldrh	r3, [r3, #0]
 8011562:	b29a      	uxth	r2, r3
 8011564:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011566:	b29b      	uxth	r3, r3
 8011568:	029b      	lsls	r3, r3, #10
 801156a:	b29b      	uxth	r3, r3
 801156c:	4313      	orrs	r3, r2
 801156e:	b29b      	uxth	r3, r3
 8011570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011578:	b29a      	uxth	r2, r3
 801157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801157c:	801a      	strh	r2, [r3, #0]
 801157e:	e026      	b.n	80115ce <USB_ActivateEndpoint+0x2fe>
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	691b      	ldr	r3, [r3, #16]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d10a      	bne.n	801159e <USB_ActivateEndpoint+0x2ce>
 8011588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801158a:	881b      	ldrh	r3, [r3, #0]
 801158c:	b29b      	uxth	r3, r3
 801158e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011596:	b29a      	uxth	r2, r3
 8011598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801159a:	801a      	strh	r2, [r3, #0]
 801159c:	e017      	b.n	80115ce <USB_ActivateEndpoint+0x2fe>
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	691b      	ldr	r3, [r3, #16]
 80115a2:	085b      	lsrs	r3, r3, #1
 80115a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	691b      	ldr	r3, [r3, #16]
 80115aa:	f003 0301 	and.w	r3, r3, #1
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d002      	beq.n	80115b8 <USB_ActivateEndpoint+0x2e8>
 80115b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80115b4:	3301      	adds	r3, #1
 80115b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80115b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ba:	881b      	ldrh	r3, [r3, #0]
 80115bc:	b29a      	uxth	r2, r3
 80115be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80115c0:	b29b      	uxth	r3, r3
 80115c2:	029b      	lsls	r3, r3, #10
 80115c4:	b29b      	uxth	r3, r3
 80115c6:	4313      	orrs	r3, r2
 80115c8:	b29a      	uxth	r2, r3
 80115ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80115ce:	687a      	ldr	r2, [r7, #4]
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	009b      	lsls	r3, r3, #2
 80115d6:	4413      	add	r3, r2
 80115d8:	881b      	ldrh	r3, [r3, #0]
 80115da:	847b      	strh	r3, [r7, #34]	@ 0x22
 80115dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80115de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d01b      	beq.n	801161e <USB_ActivateEndpoint+0x34e>
 80115e6:	687a      	ldr	r2, [r7, #4]
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	781b      	ldrb	r3, [r3, #0]
 80115ec:	009b      	lsls	r3, r3, #2
 80115ee:	4413      	add	r3, r2
 80115f0:	881b      	ldrh	r3, [r3, #0]
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80115f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80115fc:	843b      	strh	r3, [r7, #32]
 80115fe:	687a      	ldr	r2, [r7, #4]
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	781b      	ldrb	r3, [r3, #0]
 8011604:	009b      	lsls	r3, r3, #2
 8011606:	441a      	add	r2, r3
 8011608:	8c3b      	ldrh	r3, [r7, #32]
 801160a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801160e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011612:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801161a:	b29b      	uxth	r3, r3
 801161c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d124      	bne.n	8011670 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011626:	687a      	ldr	r2, [r7, #4]
 8011628:	683b      	ldr	r3, [r7, #0]
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	009b      	lsls	r3, r3, #2
 801162e:	4413      	add	r3, r2
 8011630:	881b      	ldrh	r3, [r3, #0]
 8011632:	b29b      	uxth	r3, r3
 8011634:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801163c:	83bb      	strh	r3, [r7, #28]
 801163e:	8bbb      	ldrh	r3, [r7, #28]
 8011640:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011644:	83bb      	strh	r3, [r7, #28]
 8011646:	8bbb      	ldrh	r3, [r7, #28]
 8011648:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801164c:	83bb      	strh	r3, [r7, #28]
 801164e:	687a      	ldr	r2, [r7, #4]
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	441a      	add	r2, r3
 8011658:	8bbb      	ldrh	r3, [r7, #28]
 801165a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801165e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801166a:	b29b      	uxth	r3, r3
 801166c:	8013      	strh	r3, [r2, #0]
 801166e:	e1ea      	b.n	8011a46 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8011670:	687a      	ldr	r2, [r7, #4]
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	781b      	ldrb	r3, [r3, #0]
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	4413      	add	r3, r2
 801167a:	881b      	ldrh	r3, [r3, #0]
 801167c:	b29b      	uxth	r3, r3
 801167e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011686:	83fb      	strh	r3, [r7, #30]
 8011688:	8bfb      	ldrh	r3, [r7, #30]
 801168a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801168e:	83fb      	strh	r3, [r7, #30]
 8011690:	687a      	ldr	r2, [r7, #4]
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	781b      	ldrb	r3, [r3, #0]
 8011696:	009b      	lsls	r3, r3, #2
 8011698:	441a      	add	r2, r3
 801169a:	8bfb      	ldrh	r3, [r7, #30]
 801169c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80116a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80116a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80116a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116ac:	b29b      	uxth	r3, r3
 80116ae:	8013      	strh	r3, [r2, #0]
 80116b0:	e1c9      	b.n	8011a46 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	78db      	ldrb	r3, [r3, #3]
 80116b6:	2b02      	cmp	r3, #2
 80116b8:	d11e      	bne.n	80116f8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80116ba:	687a      	ldr	r2, [r7, #4]
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	781b      	ldrb	r3, [r3, #0]
 80116c0:	009b      	lsls	r3, r3, #2
 80116c2:	4413      	add	r3, r2
 80116c4:	881b      	ldrh	r3, [r3, #0]
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80116cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80116d0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80116d4:	687a      	ldr	r2, [r7, #4]
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	009b      	lsls	r3, r3, #2
 80116dc:	441a      	add	r2, r3
 80116de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80116e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80116e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80116ea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80116ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	8013      	strh	r3, [r2, #0]
 80116f6:	e01d      	b.n	8011734 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	009b      	lsls	r3, r3, #2
 8011700:	4413      	add	r3, r2
 8011702:	881b      	ldrh	r3, [r3, #0]
 8011704:	b29b      	uxth	r3, r3
 8011706:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 801170a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801170e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011712:	687a      	ldr	r2, [r7, #4]
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	009b      	lsls	r3, r3, #2
 801171a:	441a      	add	r2, r3
 801171c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011728:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801172c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011730:	b29b      	uxth	r3, r3
 8011732:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801173e:	b29b      	uxth	r3, r3
 8011740:	461a      	mov	r2, r3
 8011742:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011744:	4413      	add	r3, r2
 8011746:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	781b      	ldrb	r3, [r3, #0]
 801174c:	00da      	lsls	r2, r3, #3
 801174e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011750:	4413      	add	r3, r2
 8011752:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011756:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	891b      	ldrh	r3, [r3, #8]
 801175c:	085b      	lsrs	r3, r3, #1
 801175e:	b29b      	uxth	r3, r3
 8011760:	005b      	lsls	r3, r3, #1
 8011762:	b29a      	uxth	r2, r3
 8011764:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011766:	801a      	strh	r2, [r3, #0]
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	657b      	str	r3, [r7, #84]	@ 0x54
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011772:	b29b      	uxth	r3, r3
 8011774:	461a      	mov	r2, r3
 8011776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011778:	4413      	add	r3, r2
 801177a:	657b      	str	r3, [r7, #84]	@ 0x54
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	00da      	lsls	r2, r3, #3
 8011782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011784:	4413      	add	r3, r2
 8011786:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801178a:	653b      	str	r3, [r7, #80]	@ 0x50
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	895b      	ldrh	r3, [r3, #10]
 8011790:	085b      	lsrs	r3, r3, #1
 8011792:	b29b      	uxth	r3, r3
 8011794:	005b      	lsls	r3, r3, #1
 8011796:	b29a      	uxth	r2, r3
 8011798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801179a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	785b      	ldrb	r3, [r3, #1]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	f040 8093 	bne.w	80118cc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80117a6:	687a      	ldr	r2, [r7, #4]
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	781b      	ldrb	r3, [r3, #0]
 80117ac:	009b      	lsls	r3, r3, #2
 80117ae:	4413      	add	r3, r2
 80117b0:	881b      	ldrh	r3, [r3, #0]
 80117b2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80117b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80117ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d01b      	beq.n	80117fa <USB_ActivateEndpoint+0x52a>
 80117c2:	687a      	ldr	r2, [r7, #4]
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	009b      	lsls	r3, r3, #2
 80117ca:	4413      	add	r3, r2
 80117cc:	881b      	ldrh	r3, [r3, #0]
 80117ce:	b29b      	uxth	r3, r3
 80117d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80117d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80117d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80117da:	687a      	ldr	r2, [r7, #4]
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	781b      	ldrb	r3, [r3, #0]
 80117e0:	009b      	lsls	r3, r3, #2
 80117e2:	441a      	add	r2, r3
 80117e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80117e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80117ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80117ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80117f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80117fa:	687a      	ldr	r2, [r7, #4]
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	781b      	ldrb	r3, [r3, #0]
 8011800:	009b      	lsls	r3, r3, #2
 8011802:	4413      	add	r3, r2
 8011804:	881b      	ldrh	r3, [r3, #0]
 8011806:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8011808:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801180a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801180e:	2b00      	cmp	r3, #0
 8011810:	d01b      	beq.n	801184a <USB_ActivateEndpoint+0x57a>
 8011812:	687a      	ldr	r2, [r7, #4]
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	009b      	lsls	r3, r3, #2
 801181a:	4413      	add	r3, r2
 801181c:	881b      	ldrh	r3, [r3, #0]
 801181e:	b29b      	uxth	r3, r3
 8011820:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011824:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011828:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	009b      	lsls	r3, r3, #2
 8011832:	441a      	add	r2, r3
 8011834:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011836:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801183a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801183e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011842:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011846:	b29b      	uxth	r3, r3
 8011848:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801184a:	687a      	ldr	r2, [r7, #4]
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	009b      	lsls	r3, r3, #2
 8011852:	4413      	add	r3, r2
 8011854:	881b      	ldrh	r3, [r3, #0]
 8011856:	b29b      	uxth	r3, r3
 8011858:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801185c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011860:	873b      	strh	r3, [r7, #56]	@ 0x38
 8011862:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8011864:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011868:	873b      	strh	r3, [r7, #56]	@ 0x38
 801186a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801186c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011870:	873b      	strh	r3, [r7, #56]	@ 0x38
 8011872:	687a      	ldr	r2, [r7, #4]
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	781b      	ldrb	r3, [r3, #0]
 8011878:	009b      	lsls	r3, r3, #2
 801187a:	441a      	add	r2, r3
 801187c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801187e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011882:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011886:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801188a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801188e:	b29b      	uxth	r3, r3
 8011890:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011892:	687a      	ldr	r2, [r7, #4]
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	781b      	ldrb	r3, [r3, #0]
 8011898:	009b      	lsls	r3, r3, #2
 801189a:	4413      	add	r3, r2
 801189c:	881b      	ldrh	r3, [r3, #0]
 801189e:	b29b      	uxth	r3, r3
 80118a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80118a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80118a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80118aa:	687a      	ldr	r2, [r7, #4]
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	009b      	lsls	r3, r3, #2
 80118b2:	441a      	add	r2, r3
 80118b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80118b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80118ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80118be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80118c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	8013      	strh	r3, [r2, #0]
 80118ca:	e0bc      	b.n	8011a46 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80118cc:	687a      	ldr	r2, [r7, #4]
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	009b      	lsls	r3, r3, #2
 80118d4:	4413      	add	r3, r2
 80118d6:	881b      	ldrh	r3, [r3, #0]
 80118d8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80118dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80118e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d01d      	beq.n	8011924 <USB_ActivateEndpoint+0x654>
 80118e8:	687a      	ldr	r2, [r7, #4]
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	781b      	ldrb	r3, [r3, #0]
 80118ee:	009b      	lsls	r3, r3, #2
 80118f0:	4413      	add	r3, r2
 80118f2:	881b      	ldrh	r3, [r3, #0]
 80118f4:	b29b      	uxth	r3, r3
 80118f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80118fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80118fe:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8011902:	687a      	ldr	r2, [r7, #4]
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	009b      	lsls	r3, r3, #2
 801190a:	441a      	add	r2, r3
 801190c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8011910:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011914:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011918:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801191c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011920:	b29b      	uxth	r3, r3
 8011922:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011924:	687a      	ldr	r2, [r7, #4]
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	781b      	ldrb	r3, [r3, #0]
 801192a:	009b      	lsls	r3, r3, #2
 801192c:	4413      	add	r3, r2
 801192e:	881b      	ldrh	r3, [r3, #0]
 8011930:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8011934:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8011938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801193c:	2b00      	cmp	r3, #0
 801193e:	d01d      	beq.n	801197c <USB_ActivateEndpoint+0x6ac>
 8011940:	687a      	ldr	r2, [r7, #4]
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	009b      	lsls	r3, r3, #2
 8011948:	4413      	add	r3, r2
 801194a:	881b      	ldrh	r3, [r3, #0]
 801194c:	b29b      	uxth	r3, r3
 801194e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011956:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	781b      	ldrb	r3, [r3, #0]
 8011960:	009b      	lsls	r3, r3, #2
 8011962:	441a      	add	r2, r3
 8011964:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8011968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801196c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011974:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011978:	b29b      	uxth	r3, r3
 801197a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	78db      	ldrb	r3, [r3, #3]
 8011980:	2b01      	cmp	r3, #1
 8011982:	d024      	beq.n	80119ce <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011984:	687a      	ldr	r2, [r7, #4]
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	009b      	lsls	r3, r3, #2
 801198c:	4413      	add	r3, r2
 801198e:	881b      	ldrh	r3, [r3, #0]
 8011990:	b29b      	uxth	r3, r3
 8011992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011996:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801199a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 801199e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80119a2:	f083 0320 	eor.w	r3, r3, #32
 80119a6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80119aa:	687a      	ldr	r2, [r7, #4]
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	781b      	ldrb	r3, [r3, #0]
 80119b0:	009b      	lsls	r3, r3, #2
 80119b2:	441a      	add	r2, r3
 80119b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80119b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80119bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80119c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80119c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80119c8:	b29b      	uxth	r3, r3
 80119ca:	8013      	strh	r3, [r2, #0]
 80119cc:	e01d      	b.n	8011a0a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80119ce:	687a      	ldr	r2, [r7, #4]
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	009b      	lsls	r3, r3, #2
 80119d6:	4413      	add	r3, r2
 80119d8:	881b      	ldrh	r3, [r3, #0]
 80119da:	b29b      	uxth	r3, r3
 80119dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80119e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80119e4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80119e8:	687a      	ldr	r2, [r7, #4]
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	781b      	ldrb	r3, [r3, #0]
 80119ee:	009b      	lsls	r3, r3, #2
 80119f0:	441a      	add	r2, r3
 80119f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80119f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80119fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80119fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a06:	b29b      	uxth	r3, r3
 8011a08:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011a0a:	687a      	ldr	r2, [r7, #4]
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	009b      	lsls	r3, r3, #2
 8011a12:	4413      	add	r3, r2
 8011a14:	881b      	ldrh	r3, [r3, #0]
 8011a16:	b29b      	uxth	r3, r3
 8011a18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a20:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8011a24:	687a      	ldr	r2, [r7, #4]
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	009b      	lsls	r3, r3, #2
 8011a2c:	441a      	add	r2, r3
 8011a2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a42:	b29b      	uxth	r3, r3
 8011a44:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011a46:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3774      	adds	r7, #116	@ 0x74
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a54:	4770      	bx	lr
 8011a56:	bf00      	nop

08011a58 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b08d      	sub	sp, #52	@ 0x34
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	7b1b      	ldrb	r3, [r3, #12]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	f040 808e 	bne.w	8011b88 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	785b      	ldrb	r3, [r3, #1]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d044      	beq.n	8011afe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011a74:	687a      	ldr	r2, [r7, #4]
 8011a76:	683b      	ldr	r3, [r7, #0]
 8011a78:	781b      	ldrb	r3, [r3, #0]
 8011a7a:	009b      	lsls	r3, r3, #2
 8011a7c:	4413      	add	r3, r2
 8011a7e:	881b      	ldrh	r3, [r3, #0]
 8011a80:	81bb      	strh	r3, [r7, #12]
 8011a82:	89bb      	ldrh	r3, [r7, #12]
 8011a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d01b      	beq.n	8011ac4 <USB_DeactivateEndpoint+0x6c>
 8011a8c:	687a      	ldr	r2, [r7, #4]
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	781b      	ldrb	r3, [r3, #0]
 8011a92:	009b      	lsls	r3, r3, #2
 8011a94:	4413      	add	r3, r2
 8011a96:	881b      	ldrh	r3, [r3, #0]
 8011a98:	b29b      	uxth	r3, r3
 8011a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011aa2:	817b      	strh	r3, [r7, #10]
 8011aa4:	687a      	ldr	r2, [r7, #4]
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	781b      	ldrb	r3, [r3, #0]
 8011aaa:	009b      	lsls	r3, r3, #2
 8011aac:	441a      	add	r2, r3
 8011aae:	897b      	ldrh	r3, [r7, #10]
 8011ab0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ab4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ab8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011abc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011ac4:	687a      	ldr	r2, [r7, #4]
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	009b      	lsls	r3, r3, #2
 8011acc:	4413      	add	r3, r2
 8011ace:	881b      	ldrh	r3, [r3, #0]
 8011ad0:	b29b      	uxth	r3, r3
 8011ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ad6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011ada:	813b      	strh	r3, [r7, #8]
 8011adc:	687a      	ldr	r2, [r7, #4]
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	009b      	lsls	r3, r3, #2
 8011ae4:	441a      	add	r2, r3
 8011ae6:	893b      	ldrh	r3, [r7, #8]
 8011ae8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011aec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011af0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	8013      	strh	r3, [r2, #0]
 8011afc:	e192      	b.n	8011e24 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011afe:	687a      	ldr	r2, [r7, #4]
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	009b      	lsls	r3, r3, #2
 8011b06:	4413      	add	r3, r2
 8011b08:	881b      	ldrh	r3, [r3, #0]
 8011b0a:	827b      	strh	r3, [r7, #18]
 8011b0c:	8a7b      	ldrh	r3, [r7, #18]
 8011b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d01b      	beq.n	8011b4e <USB_DeactivateEndpoint+0xf6>
 8011b16:	687a      	ldr	r2, [r7, #4]
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	781b      	ldrb	r3, [r3, #0]
 8011b1c:	009b      	lsls	r3, r3, #2
 8011b1e:	4413      	add	r3, r2
 8011b20:	881b      	ldrh	r3, [r3, #0]
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b2c:	823b      	strh	r3, [r7, #16]
 8011b2e:	687a      	ldr	r2, [r7, #4]
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	781b      	ldrb	r3, [r3, #0]
 8011b34:	009b      	lsls	r3, r3, #2
 8011b36:	441a      	add	r2, r3
 8011b38:	8a3b      	ldrh	r3, [r7, #16]
 8011b3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b4a:	b29b      	uxth	r3, r3
 8011b4c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011b4e:	687a      	ldr	r2, [r7, #4]
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	781b      	ldrb	r3, [r3, #0]
 8011b54:	009b      	lsls	r3, r3, #2
 8011b56:	4413      	add	r3, r2
 8011b58:	881b      	ldrh	r3, [r3, #0]
 8011b5a:	b29b      	uxth	r3, r3
 8011b5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b64:	81fb      	strh	r3, [r7, #14]
 8011b66:	687a      	ldr	r2, [r7, #4]
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	009b      	lsls	r3, r3, #2
 8011b6e:	441a      	add	r2, r3
 8011b70:	89fb      	ldrh	r3, [r7, #14]
 8011b72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b82:	b29b      	uxth	r3, r3
 8011b84:	8013      	strh	r3, [r2, #0]
 8011b86:	e14d      	b.n	8011e24 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	785b      	ldrb	r3, [r3, #1]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	f040 80a5 	bne.w	8011cdc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011b92:	687a      	ldr	r2, [r7, #4]
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	781b      	ldrb	r3, [r3, #0]
 8011b98:	009b      	lsls	r3, r3, #2
 8011b9a:	4413      	add	r3, r2
 8011b9c:	881b      	ldrh	r3, [r3, #0]
 8011b9e:	843b      	strh	r3, [r7, #32]
 8011ba0:	8c3b      	ldrh	r3, [r7, #32]
 8011ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d01b      	beq.n	8011be2 <USB_DeactivateEndpoint+0x18a>
 8011baa:	687a      	ldr	r2, [r7, #4]
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	781b      	ldrb	r3, [r3, #0]
 8011bb0:	009b      	lsls	r3, r3, #2
 8011bb2:	4413      	add	r3, r2
 8011bb4:	881b      	ldrh	r3, [r3, #0]
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011bc0:	83fb      	strh	r3, [r7, #30]
 8011bc2:	687a      	ldr	r2, [r7, #4]
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	781b      	ldrb	r3, [r3, #0]
 8011bc8:	009b      	lsls	r3, r3, #2
 8011bca:	441a      	add	r2, r3
 8011bcc:	8bfb      	ldrh	r3, [r7, #30]
 8011bce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011bd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011bd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bde:	b29b      	uxth	r3, r3
 8011be0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011be2:	687a      	ldr	r2, [r7, #4]
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	009b      	lsls	r3, r3, #2
 8011bea:	4413      	add	r3, r2
 8011bec:	881b      	ldrh	r3, [r3, #0]
 8011bee:	83bb      	strh	r3, [r7, #28]
 8011bf0:	8bbb      	ldrh	r3, [r7, #28]
 8011bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d01b      	beq.n	8011c32 <USB_DeactivateEndpoint+0x1da>
 8011bfa:	687a      	ldr	r2, [r7, #4]
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	4413      	add	r3, r2
 8011c04:	881b      	ldrh	r3, [r3, #0]
 8011c06:	b29b      	uxth	r3, r3
 8011c08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c10:	837b      	strh	r3, [r7, #26]
 8011c12:	687a      	ldr	r2, [r7, #4]
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	009b      	lsls	r3, r3, #2
 8011c1a:	441a      	add	r2, r3
 8011c1c:	8b7b      	ldrh	r3, [r7, #26]
 8011c1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011c2e:	b29b      	uxth	r3, r3
 8011c30:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011c32:	687a      	ldr	r2, [r7, #4]
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	781b      	ldrb	r3, [r3, #0]
 8011c38:	009b      	lsls	r3, r3, #2
 8011c3a:	4413      	add	r3, r2
 8011c3c:	881b      	ldrh	r3, [r3, #0]
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c48:	833b      	strh	r3, [r7, #24]
 8011c4a:	687a      	ldr	r2, [r7, #4]
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	781b      	ldrb	r3, [r3, #0]
 8011c50:	009b      	lsls	r3, r3, #2
 8011c52:	441a      	add	r2, r3
 8011c54:	8b3b      	ldrh	r3, [r7, #24]
 8011c56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011c66:	b29b      	uxth	r3, r3
 8011c68:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011c6a:	687a      	ldr	r2, [r7, #4]
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	009b      	lsls	r3, r3, #2
 8011c72:	4413      	add	r3, r2
 8011c74:	881b      	ldrh	r3, [r3, #0]
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011c7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c80:	82fb      	strh	r3, [r7, #22]
 8011c82:	687a      	ldr	r2, [r7, #4]
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	009b      	lsls	r3, r3, #2
 8011c8a:	441a      	add	r2, r3
 8011c8c:	8afb      	ldrh	r3, [r7, #22]
 8011c8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	009b      	lsls	r3, r3, #2
 8011caa:	4413      	add	r3, r2
 8011cac:	881b      	ldrh	r3, [r3, #0]
 8011cae:	b29b      	uxth	r3, r3
 8011cb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011cb8:	82bb      	strh	r3, [r7, #20]
 8011cba:	687a      	ldr	r2, [r7, #4]
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	781b      	ldrb	r3, [r3, #0]
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	441a      	add	r2, r3
 8011cc4:	8abb      	ldrh	r3, [r7, #20]
 8011cc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011cca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011cce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	8013      	strh	r3, [r2, #0]
 8011cda:	e0a3      	b.n	8011e24 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011cdc:	687a      	ldr	r2, [r7, #4]
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	781b      	ldrb	r3, [r3, #0]
 8011ce2:	009b      	lsls	r3, r3, #2
 8011ce4:	4413      	add	r3, r2
 8011ce6:	881b      	ldrh	r3, [r3, #0]
 8011ce8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8011cea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011cec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d01b      	beq.n	8011d2c <USB_DeactivateEndpoint+0x2d4>
 8011cf4:	687a      	ldr	r2, [r7, #4]
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	781b      	ldrb	r3, [r3, #0]
 8011cfa:	009b      	lsls	r3, r3, #2
 8011cfc:	4413      	add	r3, r2
 8011cfe:	881b      	ldrh	r3, [r3, #0]
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d0a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8011d0c:	687a      	ldr	r2, [r7, #4]
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	441a      	add	r2, r3
 8011d16:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011d18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d28:	b29b      	uxth	r3, r3
 8011d2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011d2c:	687a      	ldr	r2, [r7, #4]
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	009b      	lsls	r3, r3, #2
 8011d34:	4413      	add	r3, r2
 8011d36:	881b      	ldrh	r3, [r3, #0]
 8011d38:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8011d3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d01b      	beq.n	8011d7c <USB_DeactivateEndpoint+0x324>
 8011d44:	687a      	ldr	r2, [r7, #4]
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	781b      	ldrb	r3, [r3, #0]
 8011d4a:	009b      	lsls	r3, r3, #2
 8011d4c:	4413      	add	r3, r2
 8011d4e:	881b      	ldrh	r3, [r3, #0]
 8011d50:	b29b      	uxth	r3, r3
 8011d52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d5a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011d5c:	687a      	ldr	r2, [r7, #4]
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	781b      	ldrb	r3, [r3, #0]
 8011d62:	009b      	lsls	r3, r3, #2
 8011d64:	441a      	add	r2, r3
 8011d66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011d68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011d78:	b29b      	uxth	r3, r3
 8011d7a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011d7c:	687a      	ldr	r2, [r7, #4]
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	781b      	ldrb	r3, [r3, #0]
 8011d82:	009b      	lsls	r3, r3, #2
 8011d84:	4413      	add	r3, r2
 8011d86:	881b      	ldrh	r3, [r3, #0]
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d92:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011d94:	687a      	ldr	r2, [r7, #4]
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	009b      	lsls	r3, r3, #2
 8011d9c:	441a      	add	r2, r3
 8011d9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011da0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011da4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011da8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011db0:	b29b      	uxth	r3, r3
 8011db2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011db4:	687a      	ldr	r2, [r7, #4]
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	4413      	add	r3, r2
 8011dbe:	881b      	ldrh	r3, [r3, #0]
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011dc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011dca:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011dcc:	687a      	ldr	r2, [r7, #4]
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	781b      	ldrb	r3, [r3, #0]
 8011dd2:	009b      	lsls	r3, r3, #2
 8011dd4:	441a      	add	r2, r3
 8011dd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011dd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ddc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011de0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	009b      	lsls	r3, r3, #2
 8011df4:	4413      	add	r3, r2
 8011df6:	881b      	ldrh	r3, [r3, #0]
 8011df8:	b29b      	uxth	r3, r3
 8011dfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e02:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	009b      	lsls	r3, r3, #2
 8011e0c:	441a      	add	r2, r3
 8011e0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011e10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e20:	b29b      	uxth	r3, r3
 8011e22:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011e24:	2300      	movs	r3, #0
}
 8011e26:	4618      	mov	r0, r3
 8011e28:	3734      	adds	r7, #52	@ 0x34
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e30:	4770      	bx	lr

08011e32 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011e32:	b580      	push	{r7, lr}
 8011e34:	b0c2      	sub	sp, #264	@ 0x108
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011e40:	6018      	str	r0, [r3, #0]
 8011e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011e4a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	785b      	ldrb	r3, [r3, #1]
 8011e58:	2b01      	cmp	r3, #1
 8011e5a:	f040 86b7 	bne.w	8012bcc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8011e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	699a      	ldr	r2, [r3, #24]
 8011e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	691b      	ldr	r3, [r3, #16]
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d908      	bls.n	8011e8c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8011e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	691b      	ldr	r3, [r3, #16]
 8011e86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8011e8a:	e007      	b.n	8011e9c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8011e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	699b      	ldr	r3, [r3, #24]
 8011e98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	7b1b      	ldrb	r3, [r3, #12]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d13a      	bne.n	8011f22 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	6959      	ldr	r1, [r3, #20]
 8011eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	88da      	ldrh	r2, [r3, #6]
 8011ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ec8:	b29b      	uxth	r3, r3
 8011eca:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8011ece:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8011ed2:	6800      	ldr	r0, [r0, #0]
 8011ed4:	f001 fc98 	bl	8013808 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011edc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	613b      	str	r3, [r7, #16]
 8011ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011ee8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011ef2:	b29b      	uxth	r3, r3
 8011ef4:	461a      	mov	r2, r3
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	4413      	add	r3, r2
 8011efa:	613b      	str	r3, [r7, #16]
 8011efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	781b      	ldrb	r3, [r3, #0]
 8011f08:	00da      	lsls	r2, r3, #3
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	4413      	add	r3, r2
 8011f0e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011f12:	60fb      	str	r3, [r7, #12]
 8011f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f18:	b29a      	uxth	r2, r3
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	801a      	strh	r2, [r3, #0]
 8011f1e:	f000 be1f 	b.w	8012b60 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	78db      	ldrb	r3, [r3, #3]
 8011f2e:	2b02      	cmp	r3, #2
 8011f30:	f040 8462 	bne.w	80127f8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	6a1a      	ldr	r2, [r3, #32]
 8011f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	691b      	ldr	r3, [r3, #16]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	f240 83df 	bls.w	8012710 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011f56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011f5a:	681a      	ldr	r2, [r3, #0]
 8011f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	781b      	ldrb	r3, [r3, #0]
 8011f68:	009b      	lsls	r3, r3, #2
 8011f6a:	4413      	add	r3, r2
 8011f6c:	881b      	ldrh	r3, [r3, #0]
 8011f6e:	b29b      	uxth	r3, r3
 8011f70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f78:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8011f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011f80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011f84:	681a      	ldr	r2, [r3, #0]
 8011f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	441a      	add	r2, r3
 8011f96:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8011f9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011fa2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8011fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011fb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	6a1a      	ldr	r2, [r3, #32]
 8011fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fbe:	1ad2      	subs	r2, r2, r3
 8011fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011fd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011fd4:	681a      	ldr	r2, [r3, #0]
 8011fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	009b      	lsls	r3, r3, #2
 8011fe4:	4413      	add	r3, r2
 8011fe6:	881b      	ldrh	r3, [r3, #0]
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	f000 81c7 	beq.w	8012382 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011ff8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	633b      	str	r3, [r7, #48]	@ 0x30
 8012000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	785b      	ldrb	r3, [r3, #1]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d177      	bne.n	8012100 <USB_EPStartXfer+0x2ce>
 8012010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012014:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801201c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012020:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801202a:	b29b      	uxth	r3, r3
 801202c:	461a      	mov	r2, r3
 801202e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012030:	4413      	add	r3, r2
 8012032:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	781b      	ldrb	r3, [r3, #0]
 8012040:	00da      	lsls	r2, r3, #3
 8012042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012044:	4413      	add	r3, r2
 8012046:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801204a:	627b      	str	r3, [r7, #36]	@ 0x24
 801204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801204e:	881b      	ldrh	r3, [r3, #0]
 8012050:	b29b      	uxth	r3, r3
 8012052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012056:	b29a      	uxth	r2, r3
 8012058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801205a:	801a      	strh	r2, [r3, #0]
 801205c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012060:	2b3e      	cmp	r3, #62	@ 0x3e
 8012062:	d921      	bls.n	80120a8 <USB_EPStartXfer+0x276>
 8012064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012068:	095b      	lsrs	r3, r3, #5
 801206a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801206e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012072:	f003 031f 	and.w	r3, r3, #31
 8012076:	2b00      	cmp	r3, #0
 8012078:	d104      	bne.n	8012084 <USB_EPStartXfer+0x252>
 801207a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801207e:	3b01      	subs	r3, #1
 8012080:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8012084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012086:	881b      	ldrh	r3, [r3, #0]
 8012088:	b29a      	uxth	r2, r3
 801208a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801208e:	b29b      	uxth	r3, r3
 8012090:	029b      	lsls	r3, r3, #10
 8012092:	b29b      	uxth	r3, r3
 8012094:	4313      	orrs	r3, r2
 8012096:	b29b      	uxth	r3, r3
 8012098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801209c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120a0:	b29a      	uxth	r2, r3
 80120a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120a4:	801a      	strh	r2, [r3, #0]
 80120a6:	e050      	b.n	801214a <USB_EPStartXfer+0x318>
 80120a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d10a      	bne.n	80120c6 <USB_EPStartXfer+0x294>
 80120b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120b2:	881b      	ldrh	r3, [r3, #0]
 80120b4:	b29b      	uxth	r3, r3
 80120b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120be:	b29a      	uxth	r2, r3
 80120c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120c2:	801a      	strh	r2, [r3, #0]
 80120c4:	e041      	b.n	801214a <USB_EPStartXfer+0x318>
 80120c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120ca:	085b      	lsrs	r3, r3, #1
 80120cc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80120d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120d4:	f003 0301 	and.w	r3, r3, #1
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d004      	beq.n	80120e6 <USB_EPStartXfer+0x2b4>
 80120dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80120e0:	3301      	adds	r3, #1
 80120e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80120e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120e8:	881b      	ldrh	r3, [r3, #0]
 80120ea:	b29a      	uxth	r2, r3
 80120ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80120f0:	b29b      	uxth	r3, r3
 80120f2:	029b      	lsls	r3, r3, #10
 80120f4:	b29b      	uxth	r3, r3
 80120f6:	4313      	orrs	r3, r2
 80120f8:	b29a      	uxth	r2, r3
 80120fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120fc:	801a      	strh	r2, [r3, #0]
 80120fe:	e024      	b.n	801214a <USB_EPStartXfer+0x318>
 8012100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	785b      	ldrb	r3, [r3, #1]
 801210c:	2b01      	cmp	r3, #1
 801210e:	d11c      	bne.n	801214a <USB_EPStartXfer+0x318>
 8012110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012114:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801211e:	b29b      	uxth	r3, r3
 8012120:	461a      	mov	r2, r3
 8012122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012124:	4413      	add	r3, r2
 8012126:	633b      	str	r3, [r7, #48]	@ 0x30
 8012128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801212c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	781b      	ldrb	r3, [r3, #0]
 8012134:	00da      	lsls	r2, r3, #3
 8012136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012138:	4413      	add	r3, r2
 801213a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801213e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012144:	b29a      	uxth	r2, r3
 8012146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012148:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801214a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801214e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	895b      	ldrh	r3, [r3, #10]
 8012156:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801215a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801215e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	6959      	ldr	r1, [r3, #20]
 8012166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801216a:	b29b      	uxth	r3, r3
 801216c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012170:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8012174:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8012178:	6800      	ldr	r0, [r0, #0]
 801217a:	f001 fb45 	bl	8013808 <USB_WritePMA>
            ep->xfer_buff += len;
 801217e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	695a      	ldr	r2, [r3, #20]
 801218a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801218e:	441a      	add	r2, r3
 8012190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801219c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80121a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	6a1a      	ldr	r2, [r3, #32]
 80121a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80121ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	691b      	ldr	r3, [r3, #16]
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d90f      	bls.n	80121d8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80121b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80121bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	6a1a      	ldr	r2, [r3, #32]
 80121c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121c8:	1ad2      	subs	r2, r2, r3
 80121ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80121ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	621a      	str	r2, [r3, #32]
 80121d6:	e00e      	b.n	80121f6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80121d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80121dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	6a1b      	ldr	r3, [r3, #32]
 80121e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80121e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80121ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	2200      	movs	r2, #0
 80121f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80121f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80121fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	785b      	ldrb	r3, [r3, #1]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d177      	bne.n	80122f6 <USB_EPStartXfer+0x4c4>
 8012206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801220a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	61bb      	str	r3, [r7, #24]
 8012212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012216:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012220:	b29b      	uxth	r3, r3
 8012222:	461a      	mov	r2, r3
 8012224:	69bb      	ldr	r3, [r7, #24]
 8012226:	4413      	add	r3, r2
 8012228:	61bb      	str	r3, [r7, #24]
 801222a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801222e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	00da      	lsls	r2, r3, #3
 8012238:	69bb      	ldr	r3, [r7, #24]
 801223a:	4413      	add	r3, r2
 801223c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012240:	617b      	str	r3, [r7, #20]
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	881b      	ldrh	r3, [r3, #0]
 8012246:	b29b      	uxth	r3, r3
 8012248:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801224c:	b29a      	uxth	r2, r3
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	801a      	strh	r2, [r3, #0]
 8012252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012256:	2b3e      	cmp	r3, #62	@ 0x3e
 8012258:	d921      	bls.n	801229e <USB_EPStartXfer+0x46c>
 801225a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801225e:	095b      	lsrs	r3, r3, #5
 8012260:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8012264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012268:	f003 031f 	and.w	r3, r3, #31
 801226c:	2b00      	cmp	r3, #0
 801226e:	d104      	bne.n	801227a <USB_EPStartXfer+0x448>
 8012270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012274:	3b01      	subs	r3, #1
 8012276:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	881b      	ldrh	r3, [r3, #0]
 801227e:	b29a      	uxth	r2, r3
 8012280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012284:	b29b      	uxth	r3, r3
 8012286:	029b      	lsls	r3, r3, #10
 8012288:	b29b      	uxth	r3, r3
 801228a:	4313      	orrs	r3, r2
 801228c:	b29b      	uxth	r3, r3
 801228e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012296:	b29a      	uxth	r2, r3
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	801a      	strh	r2, [r3, #0]
 801229c:	e056      	b.n	801234c <USB_EPStartXfer+0x51a>
 801229e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d10a      	bne.n	80122bc <USB_EPStartXfer+0x48a>
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	881b      	ldrh	r3, [r3, #0]
 80122aa:	b29b      	uxth	r3, r3
 80122ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80122b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80122b4:	b29a      	uxth	r2, r3
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	801a      	strh	r2, [r3, #0]
 80122ba:	e047      	b.n	801234c <USB_EPStartXfer+0x51a>
 80122bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122c0:	085b      	lsrs	r3, r3, #1
 80122c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80122c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122ca:	f003 0301 	and.w	r3, r3, #1
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d004      	beq.n	80122dc <USB_EPStartXfer+0x4aa>
 80122d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80122d6:	3301      	adds	r3, #1
 80122d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	881b      	ldrh	r3, [r3, #0]
 80122e0:	b29a      	uxth	r2, r3
 80122e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80122e6:	b29b      	uxth	r3, r3
 80122e8:	029b      	lsls	r3, r3, #10
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	4313      	orrs	r3, r2
 80122ee:	b29a      	uxth	r2, r3
 80122f0:	697b      	ldr	r3, [r7, #20]
 80122f2:	801a      	strh	r2, [r3, #0]
 80122f4:	e02a      	b.n	801234c <USB_EPStartXfer+0x51a>
 80122f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80122fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	785b      	ldrb	r3, [r3, #1]
 8012302:	2b01      	cmp	r3, #1
 8012304:	d122      	bne.n	801234c <USB_EPStartXfer+0x51a>
 8012306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801230a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	623b      	str	r3, [r7, #32]
 8012312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012316:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012320:	b29b      	uxth	r3, r3
 8012322:	461a      	mov	r2, r3
 8012324:	6a3b      	ldr	r3, [r7, #32]
 8012326:	4413      	add	r3, r2
 8012328:	623b      	str	r3, [r7, #32]
 801232a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801232e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	781b      	ldrb	r3, [r3, #0]
 8012336:	00da      	lsls	r2, r3, #3
 8012338:	6a3b      	ldr	r3, [r7, #32]
 801233a:	4413      	add	r3, r2
 801233c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012340:	61fb      	str	r3, [r7, #28]
 8012342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012346:	b29a      	uxth	r2, r3
 8012348:	69fb      	ldr	r3, [r7, #28]
 801234a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801234c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	891b      	ldrh	r3, [r3, #8]
 8012358:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801235c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	6959      	ldr	r1, [r3, #20]
 8012368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801236c:	b29b      	uxth	r3, r3
 801236e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012372:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8012376:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 801237a:	6800      	ldr	r0, [r0, #0]
 801237c:	f001 fa44 	bl	8013808 <USB_WritePMA>
 8012380:	e3ee      	b.n	8012b60 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	785b      	ldrb	r3, [r3, #1]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d177      	bne.n	8012482 <USB_EPStartXfer+0x650>
 8012392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012396:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801239e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80123a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80123ac:	b29b      	uxth	r3, r3
 80123ae:	461a      	mov	r2, r3
 80123b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80123b2:	4413      	add	r3, r2
 80123b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80123b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80123ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	781b      	ldrb	r3, [r3, #0]
 80123c2:	00da      	lsls	r2, r3, #3
 80123c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80123c6:	4413      	add	r3, r2
 80123c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80123cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80123ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123d0:	881b      	ldrh	r3, [r3, #0]
 80123d2:	b29b      	uxth	r3, r3
 80123d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80123d8:	b29a      	uxth	r2, r3
 80123da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123dc:	801a      	strh	r2, [r3, #0]
 80123de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80123e4:	d921      	bls.n	801242a <USB_EPStartXfer+0x5f8>
 80123e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123ea:	095b      	lsrs	r3, r3, #5
 80123ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80123f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123f4:	f003 031f 	and.w	r3, r3, #31
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d104      	bne.n	8012406 <USB_EPStartXfer+0x5d4>
 80123fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012400:	3b01      	subs	r3, #1
 8012402:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8012406:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012408:	881b      	ldrh	r3, [r3, #0]
 801240a:	b29a      	uxth	r2, r3
 801240c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012410:	b29b      	uxth	r3, r3
 8012412:	029b      	lsls	r3, r3, #10
 8012414:	b29b      	uxth	r3, r3
 8012416:	4313      	orrs	r3, r2
 8012418:	b29b      	uxth	r3, r3
 801241a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801241e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012422:	b29a      	uxth	r2, r3
 8012424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012426:	801a      	strh	r2, [r3, #0]
 8012428:	e056      	b.n	80124d8 <USB_EPStartXfer+0x6a6>
 801242a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801242e:	2b00      	cmp	r3, #0
 8012430:	d10a      	bne.n	8012448 <USB_EPStartXfer+0x616>
 8012432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012434:	881b      	ldrh	r3, [r3, #0]
 8012436:	b29b      	uxth	r3, r3
 8012438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801243c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012440:	b29a      	uxth	r2, r3
 8012442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012444:	801a      	strh	r2, [r3, #0]
 8012446:	e047      	b.n	80124d8 <USB_EPStartXfer+0x6a6>
 8012448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801244c:	085b      	lsrs	r3, r3, #1
 801244e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8012452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012456:	f003 0301 	and.w	r3, r3, #1
 801245a:	2b00      	cmp	r3, #0
 801245c:	d004      	beq.n	8012468 <USB_EPStartXfer+0x636>
 801245e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012462:	3301      	adds	r3, #1
 8012464:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8012468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801246a:	881b      	ldrh	r3, [r3, #0]
 801246c:	b29a      	uxth	r2, r3
 801246e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012472:	b29b      	uxth	r3, r3
 8012474:	029b      	lsls	r3, r3, #10
 8012476:	b29b      	uxth	r3, r3
 8012478:	4313      	orrs	r3, r2
 801247a:	b29a      	uxth	r2, r3
 801247c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801247e:	801a      	strh	r2, [r3, #0]
 8012480:	e02a      	b.n	80124d8 <USB_EPStartXfer+0x6a6>
 8012482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	785b      	ldrb	r3, [r3, #1]
 801248e:	2b01      	cmp	r3, #1
 8012490:	d122      	bne.n	80124d8 <USB_EPStartXfer+0x6a6>
 8012492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012496:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	653b      	str	r3, [r7, #80]	@ 0x50
 801249e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80124a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80124ac:	b29b      	uxth	r3, r3
 80124ae:	461a      	mov	r2, r3
 80124b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80124b2:	4413      	add	r3, r2
 80124b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80124b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80124ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	781b      	ldrb	r3, [r3, #0]
 80124c2:	00da      	lsls	r2, r3, #3
 80124c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80124c6:	4413      	add	r3, r2
 80124c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80124cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80124ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124d2:	b29a      	uxth	r2, r3
 80124d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80124d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80124dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	891b      	ldrh	r3, [r3, #8]
 80124e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80124e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80124ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	6959      	ldr	r1, [r3, #20]
 80124f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80124fe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8012502:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8012506:	6800      	ldr	r0, [r0, #0]
 8012508:	f001 f97e 	bl	8013808 <USB_WritePMA>
            ep->xfer_buff += len;
 801250c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	695a      	ldr	r2, [r3, #20]
 8012518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801251c:	441a      	add	r2, r3
 801251e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801252a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801252e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	6a1a      	ldr	r2, [r3, #32]
 8012536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801253a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	691b      	ldr	r3, [r3, #16]
 8012542:	429a      	cmp	r2, r3
 8012544:	d90f      	bls.n	8012566 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8012546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801254a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	6a1a      	ldr	r2, [r3, #32]
 8012552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012556:	1ad2      	subs	r2, r2, r3
 8012558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801255c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	621a      	str	r2, [r3, #32]
 8012564:	e00e      	b.n	8012584 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8012566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801256a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	6a1b      	ldr	r3, [r3, #32]
 8012572:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8012576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801257a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	2200      	movs	r2, #0
 8012582:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012588:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	785b      	ldrb	r3, [r3, #1]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d177      	bne.n	8012690 <USB_EPStartXfer+0x85e>
 80125a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80125a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80125ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80125b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80125ba:	b29b      	uxth	r3, r3
 80125bc:	461a      	mov	r2, r3
 80125be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125c0:	4413      	add	r3, r2
 80125c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80125c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80125c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	781b      	ldrb	r3, [r3, #0]
 80125d0:	00da      	lsls	r2, r3, #3
 80125d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125d4:	4413      	add	r3, r2
 80125d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80125da:	637b      	str	r3, [r7, #52]	@ 0x34
 80125dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125de:	881b      	ldrh	r3, [r3, #0]
 80125e0:	b29b      	uxth	r3, r3
 80125e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80125e6:	b29a      	uxth	r2, r3
 80125e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125ea:	801a      	strh	r2, [r3, #0]
 80125ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80125f2:	d921      	bls.n	8012638 <USB_EPStartXfer+0x806>
 80125f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125f8:	095b      	lsrs	r3, r3, #5
 80125fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80125fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012602:	f003 031f 	and.w	r3, r3, #31
 8012606:	2b00      	cmp	r3, #0
 8012608:	d104      	bne.n	8012614 <USB_EPStartXfer+0x7e2>
 801260a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801260e:	3b01      	subs	r3, #1
 8012610:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8012614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012616:	881b      	ldrh	r3, [r3, #0]
 8012618:	b29a      	uxth	r2, r3
 801261a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801261e:	b29b      	uxth	r3, r3
 8012620:	029b      	lsls	r3, r3, #10
 8012622:	b29b      	uxth	r3, r3
 8012624:	4313      	orrs	r3, r2
 8012626:	b29b      	uxth	r3, r3
 8012628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801262c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012630:	b29a      	uxth	r2, r3
 8012632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012634:	801a      	strh	r2, [r3, #0]
 8012636:	e050      	b.n	80126da <USB_EPStartXfer+0x8a8>
 8012638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801263c:	2b00      	cmp	r3, #0
 801263e:	d10a      	bne.n	8012656 <USB_EPStartXfer+0x824>
 8012640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012642:	881b      	ldrh	r3, [r3, #0]
 8012644:	b29b      	uxth	r3, r3
 8012646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801264a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801264e:	b29a      	uxth	r2, r3
 8012650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012652:	801a      	strh	r2, [r3, #0]
 8012654:	e041      	b.n	80126da <USB_EPStartXfer+0x8a8>
 8012656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801265a:	085b      	lsrs	r3, r3, #1
 801265c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8012660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012664:	f003 0301 	and.w	r3, r3, #1
 8012668:	2b00      	cmp	r3, #0
 801266a:	d004      	beq.n	8012676 <USB_EPStartXfer+0x844>
 801266c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012670:	3301      	adds	r3, #1
 8012672:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8012676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012678:	881b      	ldrh	r3, [r3, #0]
 801267a:	b29a      	uxth	r2, r3
 801267c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012680:	b29b      	uxth	r3, r3
 8012682:	029b      	lsls	r3, r3, #10
 8012684:	b29b      	uxth	r3, r3
 8012686:	4313      	orrs	r3, r2
 8012688:	b29a      	uxth	r2, r3
 801268a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801268c:	801a      	strh	r2, [r3, #0]
 801268e:	e024      	b.n	80126da <USB_EPStartXfer+0x8a8>
 8012690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	785b      	ldrb	r3, [r3, #1]
 801269c:	2b01      	cmp	r3, #1
 801269e:	d11c      	bne.n	80126da <USB_EPStartXfer+0x8a8>
 80126a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80126a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80126ae:	b29b      	uxth	r3, r3
 80126b0:	461a      	mov	r2, r3
 80126b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80126b4:	4413      	add	r3, r2
 80126b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80126b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80126bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	00da      	lsls	r2, r3, #3
 80126c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80126c8:	4413      	add	r3, r2
 80126ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80126ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80126d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126d4:	b29a      	uxth	r2, r3
 80126d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80126da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80126de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	895b      	ldrh	r3, [r3, #10]
 80126e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80126ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80126ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	6959      	ldr	r1, [r3, #20]
 80126f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012700:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8012704:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8012708:	6800      	ldr	r0, [r0, #0]
 801270a:	f001 f87d 	bl	8013808 <USB_WritePMA>
 801270e:	e227      	b.n	8012b60 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	6a1b      	ldr	r3, [r3, #32]
 801271c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8012720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012724:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012728:	681a      	ldr	r2, [r3, #0]
 801272a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801272e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	781b      	ldrb	r3, [r3, #0]
 8012736:	009b      	lsls	r3, r3, #2
 8012738:	4413      	add	r3, r2
 801273a:	881b      	ldrh	r3, [r3, #0]
 801273c:	b29b      	uxth	r3, r3
 801273e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8012742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012746:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 801274a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801274e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012752:	681a      	ldr	r2, [r3, #0]
 8012754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	009b      	lsls	r3, r3, #2
 8012762:	441a      	add	r2, r3
 8012764:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8012768:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801276c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012770:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012778:	b29b      	uxth	r3, r3
 801277a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801277c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012780:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801278c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012796:	b29b      	uxth	r3, r3
 8012798:	461a      	mov	r2, r3
 801279a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801279c:	4413      	add	r3, r2
 801279e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80127a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80127a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	00da      	lsls	r2, r3, #3
 80127ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80127b0:	4413      	add	r3, r2
 80127b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80127b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80127b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127bc:	b29a      	uxth	r2, r3
 80127be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80127c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80127c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80127c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	891b      	ldrh	r3, [r3, #8]
 80127ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80127d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80127d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	6959      	ldr	r1, [r3, #20]
 80127de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127e2:	b29b      	uxth	r3, r3
 80127e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80127e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80127ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80127f0:	6800      	ldr	r0, [r0, #0]
 80127f2:	f001 f809 	bl	8013808 <USB_WritePMA>
 80127f6:	e1b3      	b.n	8012b60 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80127f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80127fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	6a1a      	ldr	r2, [r3, #32]
 8012804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012808:	1ad2      	subs	r2, r2, r3
 801280a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801280e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801281a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801281e:	681a      	ldr	r2, [r3, #0]
 8012820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	009b      	lsls	r3, r3, #2
 801282e:	4413      	add	r3, r2
 8012830:	881b      	ldrh	r3, [r3, #0]
 8012832:	b29b      	uxth	r3, r3
 8012834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012838:	2b00      	cmp	r3, #0
 801283a:	f000 80c6 	beq.w	80129ca <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801283e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012842:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	673b      	str	r3, [r7, #112]	@ 0x70
 801284a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801284e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	785b      	ldrb	r3, [r3, #1]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d177      	bne.n	801294a <USB_EPStartXfer+0xb18>
 801285a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801285e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801286a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012874:	b29b      	uxth	r3, r3
 8012876:	461a      	mov	r2, r3
 8012878:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801287a:	4413      	add	r3, r2
 801287c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801287e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	00da      	lsls	r2, r3, #3
 801288c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801288e:	4413      	add	r3, r2
 8012890:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012894:	667b      	str	r3, [r7, #100]	@ 0x64
 8012896:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012898:	881b      	ldrh	r3, [r3, #0]
 801289a:	b29b      	uxth	r3, r3
 801289c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80128a0:	b29a      	uxth	r2, r3
 80128a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80128a4:	801a      	strh	r2, [r3, #0]
 80128a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80128ac:	d921      	bls.n	80128f2 <USB_EPStartXfer+0xac0>
 80128ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128b2:	095b      	lsrs	r3, r3, #5
 80128b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80128b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128bc:	f003 031f 	and.w	r3, r3, #31
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d104      	bne.n	80128ce <USB_EPStartXfer+0xa9c>
 80128c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80128c8:	3b01      	subs	r3, #1
 80128ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80128ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80128d0:	881b      	ldrh	r3, [r3, #0]
 80128d2:	b29a      	uxth	r2, r3
 80128d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80128d8:	b29b      	uxth	r3, r3
 80128da:	029b      	lsls	r3, r3, #10
 80128dc:	b29b      	uxth	r3, r3
 80128de:	4313      	orrs	r3, r2
 80128e0:	b29b      	uxth	r3, r3
 80128e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80128e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80128ea:	b29a      	uxth	r2, r3
 80128ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80128ee:	801a      	strh	r2, [r3, #0]
 80128f0:	e050      	b.n	8012994 <USB_EPStartXfer+0xb62>
 80128f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d10a      	bne.n	8012910 <USB_EPStartXfer+0xade>
 80128fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80128fc:	881b      	ldrh	r3, [r3, #0]
 80128fe:	b29b      	uxth	r3, r3
 8012900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012908:	b29a      	uxth	r2, r3
 801290a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801290c:	801a      	strh	r2, [r3, #0]
 801290e:	e041      	b.n	8012994 <USB_EPStartXfer+0xb62>
 8012910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012914:	085b      	lsrs	r3, r3, #1
 8012916:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801291a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801291e:	f003 0301 	and.w	r3, r3, #1
 8012922:	2b00      	cmp	r3, #0
 8012924:	d004      	beq.n	8012930 <USB_EPStartXfer+0xafe>
 8012926:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801292a:	3301      	adds	r3, #1
 801292c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8012930:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012932:	881b      	ldrh	r3, [r3, #0]
 8012934:	b29a      	uxth	r2, r3
 8012936:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801293a:	b29b      	uxth	r3, r3
 801293c:	029b      	lsls	r3, r3, #10
 801293e:	b29b      	uxth	r3, r3
 8012940:	4313      	orrs	r3, r2
 8012942:	b29a      	uxth	r2, r3
 8012944:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012946:	801a      	strh	r2, [r3, #0]
 8012948:	e024      	b.n	8012994 <USB_EPStartXfer+0xb62>
 801294a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801294e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	785b      	ldrb	r3, [r3, #1]
 8012956:	2b01      	cmp	r3, #1
 8012958:	d11c      	bne.n	8012994 <USB_EPStartXfer+0xb62>
 801295a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801295e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012968:	b29b      	uxth	r3, r3
 801296a:	461a      	mov	r2, r3
 801296c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801296e:	4413      	add	r3, r2
 8012970:	673b      	str	r3, [r7, #112]	@ 0x70
 8012972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	781b      	ldrb	r3, [r3, #0]
 801297e:	00da      	lsls	r2, r3, #3
 8012980:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012982:	4413      	add	r3, r2
 8012984:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012988:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801298a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801298e:	b29a      	uxth	r2, r3
 8012990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012992:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	895b      	ldrh	r3, [r3, #10]
 80129a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80129a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80129a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	6959      	ldr	r1, [r3, #20]
 80129b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129b4:	b29b      	uxth	r3, r3
 80129b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80129ba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80129be:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80129c2:	6800      	ldr	r0, [r0, #0]
 80129c4:	f000 ff20 	bl	8013808 <USB_WritePMA>
 80129c8:	e0ca      	b.n	8012b60 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80129ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80129ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	785b      	ldrb	r3, [r3, #1]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d177      	bne.n	8012aca <USB_EPStartXfer+0xc98>
 80129da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80129de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80129e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80129ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80129f4:	b29b      	uxth	r3, r3
 80129f6:	461a      	mov	r2, r3
 80129f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80129fa:	4413      	add	r3, r2
 80129fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80129fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	781b      	ldrb	r3, [r3, #0]
 8012a0a:	00da      	lsls	r2, r3, #3
 8012a0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012a0e:	4413      	add	r3, r2
 8012a10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012a14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012a16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a18:	881b      	ldrh	r3, [r3, #0]
 8012a1a:	b29b      	uxth	r3, r3
 8012a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012a20:	b29a      	uxth	r2, r3
 8012a22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a24:	801a      	strh	r2, [r3, #0]
 8012a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a2a:	2b3e      	cmp	r3, #62	@ 0x3e
 8012a2c:	d921      	bls.n	8012a72 <USB_EPStartXfer+0xc40>
 8012a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a32:	095b      	lsrs	r3, r3, #5
 8012a34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8012a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a3c:	f003 031f 	and.w	r3, r3, #31
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d104      	bne.n	8012a4e <USB_EPStartXfer+0xc1c>
 8012a44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8012a48:	3b01      	subs	r3, #1
 8012a4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8012a4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a50:	881b      	ldrh	r3, [r3, #0]
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8012a58:	b29b      	uxth	r3, r3
 8012a5a:	029b      	lsls	r3, r3, #10
 8012a5c:	b29b      	uxth	r3, r3
 8012a5e:	4313      	orrs	r3, r2
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a6a:	b29a      	uxth	r2, r3
 8012a6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a6e:	801a      	strh	r2, [r3, #0]
 8012a70:	e05c      	b.n	8012b2c <USB_EPStartXfer+0xcfa>
 8012a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d10a      	bne.n	8012a90 <USB_EPStartXfer+0xc5e>
 8012a7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a7c:	881b      	ldrh	r3, [r3, #0]
 8012a7e:	b29b      	uxth	r3, r3
 8012a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a88:	b29a      	uxth	r2, r3
 8012a8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a8c:	801a      	strh	r2, [r3, #0]
 8012a8e:	e04d      	b.n	8012b2c <USB_EPStartXfer+0xcfa>
 8012a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a94:	085b      	lsrs	r3, r3, #1
 8012a96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8012a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a9e:	f003 0301 	and.w	r3, r3, #1
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d004      	beq.n	8012ab0 <USB_EPStartXfer+0xc7e>
 8012aa6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8012aaa:	3301      	adds	r3, #1
 8012aac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8012ab0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012ab2:	881b      	ldrh	r3, [r3, #0]
 8012ab4:	b29a      	uxth	r2, r3
 8012ab6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8012aba:	b29b      	uxth	r3, r3
 8012abc:	029b      	lsls	r3, r3, #10
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	4313      	orrs	r3, r2
 8012ac2:	b29a      	uxth	r2, r3
 8012ac4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012ac6:	801a      	strh	r2, [r3, #0]
 8012ac8:	e030      	b.n	8012b2c <USB_EPStartXfer+0xcfa>
 8012aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	785b      	ldrb	r3, [r3, #1]
 8012ad6:	2b01      	cmp	r3, #1
 8012ad8:	d128      	bne.n	8012b2c <USB_EPStartXfer+0xcfa>
 8012ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012ade:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012aec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012af6:	b29b      	uxth	r3, r3
 8012af8:	461a      	mov	r2, r3
 8012afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012afe:	4413      	add	r3, r2
 8012b00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	781b      	ldrb	r3, [r3, #0]
 8012b10:	00da      	lsls	r2, r3, #3
 8012b12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012b16:	4413      	add	r3, r2
 8012b18:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012b1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b24:	b29a      	uxth	r2, r3
 8012b26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012b2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012b30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	891b      	ldrh	r3, [r3, #8]
 8012b38:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	6959      	ldr	r1, [r3, #20]
 8012b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b4c:	b29b      	uxth	r3, r3
 8012b4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012b52:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8012b56:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8012b5a:	6800      	ldr	r0, [r0, #0]
 8012b5c:	f000 fe54 	bl	8013808 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012b64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012b68:	681a      	ldr	r2, [r3, #0]
 8012b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012b6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	781b      	ldrb	r3, [r3, #0]
 8012b76:	009b      	lsls	r3, r3, #2
 8012b78:	4413      	add	r3, r2
 8012b7a:	881b      	ldrh	r3, [r3, #0]
 8012b7c:	b29b      	uxth	r3, r3
 8012b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012b82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012b86:	817b      	strh	r3, [r7, #10]
 8012b88:	897b      	ldrh	r3, [r7, #10]
 8012b8a:	f083 0310 	eor.w	r3, r3, #16
 8012b8e:	817b      	strh	r3, [r7, #10]
 8012b90:	897b      	ldrh	r3, [r7, #10]
 8012b92:	f083 0320 	eor.w	r3, r3, #32
 8012b96:	817b      	strh	r3, [r7, #10]
 8012b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012b9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012ba0:	681a      	ldr	r2, [r3, #0]
 8012ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	781b      	ldrb	r3, [r3, #0]
 8012bae:	009b      	lsls	r3, r3, #2
 8012bb0:	441a      	add	r2, r3
 8012bb2:	897b      	ldrh	r3, [r7, #10]
 8012bb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012bb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012bbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012bc4:	b29b      	uxth	r3, r3
 8012bc6:	8013      	strh	r3, [r2, #0]
 8012bc8:	f000 bcde 	b.w	8013588 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	7b1b      	ldrb	r3, [r3, #12]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	f040 80bb 	bne.w	8012d54 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	699a      	ldr	r2, [r3, #24]
 8012bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	691b      	ldr	r3, [r3, #16]
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d917      	bls.n	8012c2a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8012bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012bfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	691b      	ldr	r3, [r3, #16]
 8012c06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8012c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012c0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	699a      	ldr	r2, [r3, #24]
 8012c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c1a:	1ad2      	subs	r2, r2, r3
 8012c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	619a      	str	r2, [r3, #24]
 8012c28:	e00e      	b.n	8012c48 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8012c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	699b      	ldr	r3, [r3, #24]
 8012c36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8012c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	2200      	movs	r2, #0
 8012c46:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8012c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012c4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012c64:	b29b      	uxth	r3, r3
 8012c66:	461a      	mov	r2, r3
 8012c68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012c6c:	4413      	add	r3, r2
 8012c6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012c76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	781b      	ldrb	r3, [r3, #0]
 8012c7e:	00da      	lsls	r2, r3, #3
 8012c80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012c84:	4413      	add	r3, r2
 8012c86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012c8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012c92:	881b      	ldrh	r3, [r3, #0]
 8012c94:	b29b      	uxth	r3, r3
 8012c96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012c9a:	b29a      	uxth	r2, r3
 8012c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012ca0:	801a      	strh	r2, [r3, #0]
 8012ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ca6:	2b3e      	cmp	r3, #62	@ 0x3e
 8012ca8:	d924      	bls.n	8012cf4 <USB_EPStartXfer+0xec2>
 8012caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cae:	095b      	lsrs	r3, r3, #5
 8012cb0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8012cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cb8:	f003 031f 	and.w	r3, r3, #31
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d104      	bne.n	8012cca <USB_EPStartXfer+0xe98>
 8012cc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012cc4:	3b01      	subs	r3, #1
 8012cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8012cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012cce:	881b      	ldrh	r3, [r3, #0]
 8012cd0:	b29a      	uxth	r2, r3
 8012cd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012cd6:	b29b      	uxth	r3, r3
 8012cd8:	029b      	lsls	r3, r3, #10
 8012cda:	b29b      	uxth	r3, r3
 8012cdc:	4313      	orrs	r3, r2
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012ce8:	b29a      	uxth	r2, r3
 8012cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012cee:	801a      	strh	r2, [r3, #0]
 8012cf0:	f000 bc10 	b.w	8013514 <USB_EPStartXfer+0x16e2>
 8012cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d10c      	bne.n	8012d16 <USB_EPStartXfer+0xee4>
 8012cfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012d00:	881b      	ldrh	r3, [r3, #0]
 8012d02:	b29b      	uxth	r3, r3
 8012d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012d0c:	b29a      	uxth	r2, r3
 8012d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012d12:	801a      	strh	r2, [r3, #0]
 8012d14:	e3fe      	b.n	8013514 <USB_EPStartXfer+0x16e2>
 8012d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d1a:	085b      	lsrs	r3, r3, #1
 8012d1c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8012d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d24:	f003 0301 	and.w	r3, r3, #1
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d004      	beq.n	8012d36 <USB_EPStartXfer+0xf04>
 8012d2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012d30:	3301      	adds	r3, #1
 8012d32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8012d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012d3a:	881b      	ldrh	r3, [r3, #0]
 8012d3c:	b29a      	uxth	r2, r3
 8012d3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012d42:	b29b      	uxth	r3, r3
 8012d44:	029b      	lsls	r3, r3, #10
 8012d46:	b29b      	uxth	r3, r3
 8012d48:	4313      	orrs	r3, r2
 8012d4a:	b29a      	uxth	r2, r3
 8012d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012d50:	801a      	strh	r2, [r3, #0]
 8012d52:	e3df      	b.n	8013514 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	78db      	ldrb	r3, [r3, #3]
 8012d60:	2b02      	cmp	r3, #2
 8012d62:	f040 8218 	bne.w	8013196 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8012d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	785b      	ldrb	r3, [r3, #1]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	f040 809d 	bne.w	8012eb2 <USB_EPStartXfer+0x1080>
 8012d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012d7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012d8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012d94:	b29b      	uxth	r3, r3
 8012d96:	461a      	mov	r2, r3
 8012d98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012d9c:	4413      	add	r3, r2
 8012d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	781b      	ldrb	r3, [r3, #0]
 8012dae:	00da      	lsls	r2, r3, #3
 8012db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012db4:	4413      	add	r3, r2
 8012db6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012dba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012dbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012dc2:	881b      	ldrh	r3, [r3, #0]
 8012dc4:	b29b      	uxth	r3, r3
 8012dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012dca:	b29a      	uxth	r2, r3
 8012dcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012dd0:	801a      	strh	r2, [r3, #0]
 8012dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	691b      	ldr	r3, [r3, #16]
 8012dde:	2b3e      	cmp	r3, #62	@ 0x3e
 8012de0:	d92b      	bls.n	8012e3a <USB_EPStartXfer+0x1008>
 8012de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	691b      	ldr	r3, [r3, #16]
 8012dee:	095b      	lsrs	r3, r3, #5
 8012df0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	691b      	ldr	r3, [r3, #16]
 8012e00:	f003 031f 	and.w	r3, r3, #31
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d104      	bne.n	8012e12 <USB_EPStartXfer+0xfe0>
 8012e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012e0c:	3b01      	subs	r3, #1
 8012e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012e12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012e16:	881b      	ldrh	r3, [r3, #0]
 8012e18:	b29a      	uxth	r2, r3
 8012e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012e1e:	b29b      	uxth	r3, r3
 8012e20:	029b      	lsls	r3, r3, #10
 8012e22:	b29b      	uxth	r3, r3
 8012e24:	4313      	orrs	r3, r2
 8012e26:	b29b      	uxth	r3, r3
 8012e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012e30:	b29a      	uxth	r2, r3
 8012e32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012e36:	801a      	strh	r2, [r3, #0]
 8012e38:	e070      	b.n	8012f1c <USB_EPStartXfer+0x10ea>
 8012e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012e3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	691b      	ldr	r3, [r3, #16]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d10c      	bne.n	8012e64 <USB_EPStartXfer+0x1032>
 8012e4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012e4e:	881b      	ldrh	r3, [r3, #0]
 8012e50:	b29b      	uxth	r3, r3
 8012e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012e5a:	b29a      	uxth	r2, r3
 8012e5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012e60:	801a      	strh	r2, [r3, #0]
 8012e62:	e05b      	b.n	8012f1c <USB_EPStartXfer+0x10ea>
 8012e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	691b      	ldr	r3, [r3, #16]
 8012e70:	085b      	lsrs	r3, r3, #1
 8012e72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	691b      	ldr	r3, [r3, #16]
 8012e82:	f003 0301 	and.w	r3, r3, #1
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d004      	beq.n	8012e94 <USB_EPStartXfer+0x1062>
 8012e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012e8e:	3301      	adds	r3, #1
 8012e90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012e94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012e98:	881b      	ldrh	r3, [r3, #0]
 8012e9a:	b29a      	uxth	r2, r3
 8012e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012ea0:	b29b      	uxth	r3, r3
 8012ea2:	029b      	lsls	r3, r3, #10
 8012ea4:	b29b      	uxth	r3, r3
 8012ea6:	4313      	orrs	r3, r2
 8012ea8:	b29a      	uxth	r2, r3
 8012eaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012eae:	801a      	strh	r2, [r3, #0]
 8012eb0:	e034      	b.n	8012f1c <USB_EPStartXfer+0x10ea>
 8012eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	785b      	ldrb	r3, [r3, #1]
 8012ebe:	2b01      	cmp	r3, #1
 8012ec0:	d12c      	bne.n	8012f1c <USB_EPStartXfer+0x10ea>
 8012ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012ec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012ed4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012ede:	b29b      	uxth	r3, r3
 8012ee0:	461a      	mov	r2, r3
 8012ee2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012ee6:	4413      	add	r3, r2
 8012ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	781b      	ldrb	r3, [r3, #0]
 8012ef8:	00da      	lsls	r2, r3, #3
 8012efa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012efe:	4413      	add	r3, r2
 8012f00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012f04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	691b      	ldr	r3, [r3, #16]
 8012f14:	b29a      	uxth	r2, r3
 8012f16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012f1a:	801a      	strh	r2, [r3, #0]
 8012f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012f20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	785b      	ldrb	r3, [r3, #1]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	f040 809d 	bne.w	8013076 <USB_EPStartXfer+0x1244>
 8012f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012f40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012f4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012f58:	b29b      	uxth	r3, r3
 8012f5a:	461a      	mov	r2, r3
 8012f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012f60:	4413      	add	r3, r2
 8012f62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	781b      	ldrb	r3, [r3, #0]
 8012f72:	00da      	lsls	r2, r3, #3
 8012f74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012f78:	4413      	add	r3, r2
 8012f7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012f7e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012f82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012f86:	881b      	ldrh	r3, [r3, #0]
 8012f88:	b29b      	uxth	r3, r3
 8012f8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012f8e:	b29a      	uxth	r2, r3
 8012f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012f94:	801a      	strh	r2, [r3, #0]
 8012f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	691b      	ldr	r3, [r3, #16]
 8012fa2:	2b3e      	cmp	r3, #62	@ 0x3e
 8012fa4:	d92b      	bls.n	8012ffe <USB_EPStartXfer+0x11cc>
 8012fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	691b      	ldr	r3, [r3, #16]
 8012fb2:	095b      	lsrs	r3, r3, #5
 8012fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	691b      	ldr	r3, [r3, #16]
 8012fc4:	f003 031f 	and.w	r3, r3, #31
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d104      	bne.n	8012fd6 <USB_EPStartXfer+0x11a4>
 8012fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012fd0:	3b01      	subs	r3, #1
 8012fd2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012fd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012fda:	881b      	ldrh	r3, [r3, #0]
 8012fdc:	b29a      	uxth	r2, r3
 8012fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012fe2:	b29b      	uxth	r3, r3
 8012fe4:	029b      	lsls	r3, r3, #10
 8012fe6:	b29b      	uxth	r3, r3
 8012fe8:	4313      	orrs	r3, r2
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012ff4:	b29a      	uxth	r2, r3
 8012ff6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012ffa:	801a      	strh	r2, [r3, #0]
 8012ffc:	e069      	b.n	80130d2 <USB_EPStartXfer+0x12a0>
 8012ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	691b      	ldr	r3, [r3, #16]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d10c      	bne.n	8013028 <USB_EPStartXfer+0x11f6>
 801300e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013012:	881b      	ldrh	r3, [r3, #0]
 8013014:	b29b      	uxth	r3, r3
 8013016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801301a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801301e:	b29a      	uxth	r2, r3
 8013020:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013024:	801a      	strh	r2, [r3, #0]
 8013026:	e054      	b.n	80130d2 <USB_EPStartXfer+0x12a0>
 8013028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801302c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	691b      	ldr	r3, [r3, #16]
 8013034:	085b      	lsrs	r3, r3, #1
 8013036:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801303a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801303e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	691b      	ldr	r3, [r3, #16]
 8013046:	f003 0301 	and.w	r3, r3, #1
 801304a:	2b00      	cmp	r3, #0
 801304c:	d004      	beq.n	8013058 <USB_EPStartXfer+0x1226>
 801304e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013052:	3301      	adds	r3, #1
 8013054:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8013058:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801305c:	881b      	ldrh	r3, [r3, #0]
 801305e:	b29a      	uxth	r2, r3
 8013060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013064:	b29b      	uxth	r3, r3
 8013066:	029b      	lsls	r3, r3, #10
 8013068:	b29b      	uxth	r3, r3
 801306a:	4313      	orrs	r3, r2
 801306c:	b29a      	uxth	r2, r3
 801306e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013072:	801a      	strh	r2, [r3, #0]
 8013074:	e02d      	b.n	80130d2 <USB_EPStartXfer+0x12a0>
 8013076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801307a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	785b      	ldrb	r3, [r3, #1]
 8013082:	2b01      	cmp	r3, #1
 8013084:	d125      	bne.n	80130d2 <USB_EPStartXfer+0x12a0>
 8013086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801308a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8013094:	b29b      	uxth	r3, r3
 8013096:	461a      	mov	r2, r3
 8013098:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801309c:	4413      	add	r3, r2
 801309e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80130a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80130a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	00da      	lsls	r2, r3, #3
 80130b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80130b4:	4413      	add	r3, r2
 80130b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80130ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80130be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80130c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	691b      	ldr	r3, [r3, #16]
 80130ca:	b29a      	uxth	r2, r3
 80130cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80130d0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80130d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80130d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	69db      	ldr	r3, [r3, #28]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	f000 8218 	beq.w	8013514 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80130e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80130e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80130ec:	681a      	ldr	r2, [r3, #0]
 80130ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80130f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	781b      	ldrb	r3, [r3, #0]
 80130fa:	009b      	lsls	r3, r3, #2
 80130fc:	4413      	add	r3, r2
 80130fe:	881b      	ldrh	r3, [r3, #0]
 8013100:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013104:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8013108:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801310c:	2b00      	cmp	r3, #0
 801310e:	d005      	beq.n	801311c <USB_EPStartXfer+0x12ea>
 8013110:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8013114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013118:	2b00      	cmp	r3, #0
 801311a:	d10d      	bne.n	8013138 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801311c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8013120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013124:	2b00      	cmp	r3, #0
 8013126:	f040 81f5 	bne.w	8013514 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801312a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 801312e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013132:	2b00      	cmp	r3, #0
 8013134:	f040 81ee 	bne.w	8013514 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8013138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801313c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013140:	681a      	ldr	r2, [r3, #0]
 8013142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	781b      	ldrb	r3, [r3, #0]
 801314e:	009b      	lsls	r3, r3, #2
 8013150:	4413      	add	r3, r2
 8013152:	881b      	ldrh	r3, [r3, #0]
 8013154:	b29b      	uxth	r3, r3
 8013156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801315a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801315e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8013162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013166:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801316a:	681a      	ldr	r2, [r3, #0]
 801316c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	009b      	lsls	r3, r3, #2
 801317a:	441a      	add	r2, r3
 801317c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8013180:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013184:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013188:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801318c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8013190:	b29b      	uxth	r3, r3
 8013192:	8013      	strh	r3, [r2, #0]
 8013194:	e1be      	b.n	8013514 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8013196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801319a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	78db      	ldrb	r3, [r3, #3]
 80131a2:	2b01      	cmp	r3, #1
 80131a4:	f040 81b4 	bne.w	8013510 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80131a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80131ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	699a      	ldr	r2, [r3, #24]
 80131b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80131b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	691b      	ldr	r3, [r3, #16]
 80131c0:	429a      	cmp	r2, r3
 80131c2:	d917      	bls.n	80131f4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80131c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80131c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	691b      	ldr	r3, [r3, #16]
 80131d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80131d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80131d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	699a      	ldr	r2, [r3, #24]
 80131e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131e4:	1ad2      	subs	r2, r2, r3
 80131e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80131ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	619a      	str	r2, [r3, #24]
 80131f2:	e00e      	b.n	8013212 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80131f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80131f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	699b      	ldr	r3, [r3, #24]
 8013200:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8013204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	2200      	movs	r2, #0
 8013210:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8013212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	785b      	ldrb	r3, [r3, #1]
 801321e:	2b00      	cmp	r3, #0
 8013220:	f040 8085 	bne.w	801332e <USB_EPStartXfer+0x14fc>
 8013224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8013232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013236:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8013240:	b29b      	uxth	r3, r3
 8013242:	461a      	mov	r2, r3
 8013244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8013248:	4413      	add	r3, r2
 801324a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801324e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	781b      	ldrb	r3, [r3, #0]
 801325a:	00da      	lsls	r2, r3, #3
 801325c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8013260:	4413      	add	r3, r2
 8013262:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8013266:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801326a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801326e:	881b      	ldrh	r3, [r3, #0]
 8013270:	b29b      	uxth	r3, r3
 8013272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013276:	b29a      	uxth	r2, r3
 8013278:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801327c:	801a      	strh	r2, [r3, #0]
 801327e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013282:	2b3e      	cmp	r3, #62	@ 0x3e
 8013284:	d923      	bls.n	80132ce <USB_EPStartXfer+0x149c>
 8013286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801328a:	095b      	lsrs	r3, r3, #5
 801328c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8013290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013294:	f003 031f 	and.w	r3, r3, #31
 8013298:	2b00      	cmp	r3, #0
 801329a:	d104      	bne.n	80132a6 <USB_EPStartXfer+0x1474>
 801329c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80132a0:	3b01      	subs	r3, #1
 80132a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80132a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80132aa:	881b      	ldrh	r3, [r3, #0]
 80132ac:	b29a      	uxth	r2, r3
 80132ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80132b2:	b29b      	uxth	r3, r3
 80132b4:	029b      	lsls	r3, r3, #10
 80132b6:	b29b      	uxth	r3, r3
 80132b8:	4313      	orrs	r3, r2
 80132ba:	b29b      	uxth	r3, r3
 80132bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80132c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80132c4:	b29a      	uxth	r2, r3
 80132c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80132ca:	801a      	strh	r2, [r3, #0]
 80132cc:	e060      	b.n	8013390 <USB_EPStartXfer+0x155e>
 80132ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d10c      	bne.n	80132f0 <USB_EPStartXfer+0x14be>
 80132d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80132da:	881b      	ldrh	r3, [r3, #0]
 80132dc:	b29b      	uxth	r3, r3
 80132de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80132e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80132e6:	b29a      	uxth	r2, r3
 80132e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80132ec:	801a      	strh	r2, [r3, #0]
 80132ee:	e04f      	b.n	8013390 <USB_EPStartXfer+0x155e>
 80132f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132f4:	085b      	lsrs	r3, r3, #1
 80132f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80132fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132fe:	f003 0301 	and.w	r3, r3, #1
 8013302:	2b00      	cmp	r3, #0
 8013304:	d004      	beq.n	8013310 <USB_EPStartXfer+0x14de>
 8013306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801330a:	3301      	adds	r3, #1
 801330c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8013310:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8013314:	881b      	ldrh	r3, [r3, #0]
 8013316:	b29a      	uxth	r2, r3
 8013318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801331c:	b29b      	uxth	r3, r3
 801331e:	029b      	lsls	r3, r3, #10
 8013320:	b29b      	uxth	r3, r3
 8013322:	4313      	orrs	r3, r2
 8013324:	b29a      	uxth	r2, r3
 8013326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801332a:	801a      	strh	r2, [r3, #0]
 801332c:	e030      	b.n	8013390 <USB_EPStartXfer+0x155e>
 801332e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	785b      	ldrb	r3, [r3, #1]
 801333a:	2b01      	cmp	r3, #1
 801333c:	d128      	bne.n	8013390 <USB_EPStartXfer+0x155e>
 801333e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013342:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801334c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013350:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801335a:	b29b      	uxth	r3, r3
 801335c:	461a      	mov	r2, r3
 801335e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013362:	4413      	add	r3, r2
 8013364:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8013368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801336c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	781b      	ldrb	r3, [r3, #0]
 8013374:	00da      	lsls	r2, r3, #3
 8013376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801337a:	4413      	add	r3, r2
 801337c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8013380:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013388:	b29a      	uxth	r2, r3
 801338a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801338e:	801a      	strh	r2, [r3, #0]
 8013390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801339e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80133a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	785b      	ldrb	r3, [r3, #1]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	f040 8085 	bne.w	80134ba <USB_EPStartXfer+0x1688>
 80133b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80133b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80133be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80133c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80133cc:	b29b      	uxth	r3, r3
 80133ce:	461a      	mov	r2, r3
 80133d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80133d4:	4413      	add	r3, r2
 80133d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80133da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80133de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	781b      	ldrb	r3, [r3, #0]
 80133e6:	00da      	lsls	r2, r3, #3
 80133e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80133ec:	4413      	add	r3, r2
 80133ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80133f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80133f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80133fa:	881b      	ldrh	r3, [r3, #0]
 80133fc:	b29b      	uxth	r3, r3
 80133fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013402:	b29a      	uxth	r2, r3
 8013404:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013408:	801a      	strh	r2, [r3, #0]
 801340a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801340e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013410:	d923      	bls.n	801345a <USB_EPStartXfer+0x1628>
 8013412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013416:	095b      	lsrs	r3, r3, #5
 8013418:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801341c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013420:	f003 031f 	and.w	r3, r3, #31
 8013424:	2b00      	cmp	r3, #0
 8013426:	d104      	bne.n	8013432 <USB_EPStartXfer+0x1600>
 8013428:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801342c:	3b01      	subs	r3, #1
 801342e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8013432:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013436:	881b      	ldrh	r3, [r3, #0]
 8013438:	b29a      	uxth	r2, r3
 801343a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801343e:	b29b      	uxth	r3, r3
 8013440:	029b      	lsls	r3, r3, #10
 8013442:	b29b      	uxth	r3, r3
 8013444:	4313      	orrs	r3, r2
 8013446:	b29b      	uxth	r3, r3
 8013448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801344c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013450:	b29a      	uxth	r2, r3
 8013452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013456:	801a      	strh	r2, [r3, #0]
 8013458:	e05c      	b.n	8013514 <USB_EPStartXfer+0x16e2>
 801345a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801345e:	2b00      	cmp	r3, #0
 8013460:	d10c      	bne.n	801347c <USB_EPStartXfer+0x164a>
 8013462:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013466:	881b      	ldrh	r3, [r3, #0]
 8013468:	b29b      	uxth	r3, r3
 801346a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801346e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013472:	b29a      	uxth	r2, r3
 8013474:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013478:	801a      	strh	r2, [r3, #0]
 801347a:	e04b      	b.n	8013514 <USB_EPStartXfer+0x16e2>
 801347c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013480:	085b      	lsrs	r3, r3, #1
 8013482:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8013486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801348a:	f003 0301 	and.w	r3, r3, #1
 801348e:	2b00      	cmp	r3, #0
 8013490:	d004      	beq.n	801349c <USB_EPStartXfer+0x166a>
 8013492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013496:	3301      	adds	r3, #1
 8013498:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801349c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80134a0:	881b      	ldrh	r3, [r3, #0]
 80134a2:	b29a      	uxth	r2, r3
 80134a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80134a8:	b29b      	uxth	r3, r3
 80134aa:	029b      	lsls	r3, r3, #10
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	4313      	orrs	r3, r2
 80134b0:	b29a      	uxth	r2, r3
 80134b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80134b6:	801a      	strh	r2, [r3, #0]
 80134b8:	e02c      	b.n	8013514 <USB_EPStartXfer+0x16e2>
 80134ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80134be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	785b      	ldrb	r3, [r3, #1]
 80134c6:	2b01      	cmp	r3, #1
 80134c8:	d124      	bne.n	8013514 <USB_EPStartXfer+0x16e2>
 80134ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80134ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80134d8:	b29b      	uxth	r3, r3
 80134da:	461a      	mov	r2, r3
 80134dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80134e0:	4413      	add	r3, r2
 80134e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80134e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80134ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	781b      	ldrb	r3, [r3, #0]
 80134f2:	00da      	lsls	r2, r3, #3
 80134f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80134f8:	4413      	add	r3, r2
 80134fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80134fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8013502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013506:	b29a      	uxth	r2, r3
 8013508:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801350c:	801a      	strh	r2, [r3, #0]
 801350e:	e001      	b.n	8013514 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8013510:	2301      	movs	r3, #1
 8013512:	e03a      	b.n	801358a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013518:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801351c:	681a      	ldr	r2, [r3, #0]
 801351e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	009b      	lsls	r3, r3, #2
 801352c:	4413      	add	r3, r2
 801352e:	881b      	ldrh	r3, [r3, #0]
 8013530:	b29b      	uxth	r3, r3
 8013532:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8013536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801353a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 801353e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8013542:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8013546:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 801354a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801354e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8013552:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8013556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801355a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801355e:	681a      	ldr	r2, [r3, #0]
 8013560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	781b      	ldrb	r3, [r3, #0]
 801356c:	009b      	lsls	r3, r3, #2
 801356e:	441a      	add	r2, r3
 8013570:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8013574:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013578:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801357c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013584:	b29b      	uxth	r3, r3
 8013586:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8013588:	2300      	movs	r3, #0
}
 801358a:	4618      	mov	r0, r3
 801358c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}

08013594 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013594:	b480      	push	{r7}
 8013596:	b085      	sub	sp, #20
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	785b      	ldrb	r3, [r3, #1]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d020      	beq.n	80135e8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80135a6:	687a      	ldr	r2, [r7, #4]
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	009b      	lsls	r3, r3, #2
 80135ae:	4413      	add	r3, r2
 80135b0:	881b      	ldrh	r3, [r3, #0]
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80135b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80135bc:	81bb      	strh	r3, [r7, #12]
 80135be:	89bb      	ldrh	r3, [r7, #12]
 80135c0:	f083 0310 	eor.w	r3, r3, #16
 80135c4:	81bb      	strh	r3, [r7, #12]
 80135c6:	687a      	ldr	r2, [r7, #4]
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	781b      	ldrb	r3, [r3, #0]
 80135cc:	009b      	lsls	r3, r3, #2
 80135ce:	441a      	add	r2, r3
 80135d0:	89bb      	ldrh	r3, [r7, #12]
 80135d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80135d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80135da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80135de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80135e2:	b29b      	uxth	r3, r3
 80135e4:	8013      	strh	r3, [r2, #0]
 80135e6:	e01f      	b.n	8013628 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80135e8:	687a      	ldr	r2, [r7, #4]
 80135ea:	683b      	ldr	r3, [r7, #0]
 80135ec:	781b      	ldrb	r3, [r3, #0]
 80135ee:	009b      	lsls	r3, r3, #2
 80135f0:	4413      	add	r3, r2
 80135f2:	881b      	ldrh	r3, [r3, #0]
 80135f4:	b29b      	uxth	r3, r3
 80135f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80135fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80135fe:	81fb      	strh	r3, [r7, #14]
 8013600:	89fb      	ldrh	r3, [r7, #14]
 8013602:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8013606:	81fb      	strh	r3, [r7, #14]
 8013608:	687a      	ldr	r2, [r7, #4]
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	009b      	lsls	r3, r3, #2
 8013610:	441a      	add	r2, r3
 8013612:	89fb      	ldrh	r3, [r7, #14]
 8013614:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013618:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801361c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013624:	b29b      	uxth	r3, r3
 8013626:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8013628:	2300      	movs	r3, #0
}
 801362a:	4618      	mov	r0, r3
 801362c:	3714      	adds	r7, #20
 801362e:	46bd      	mov	sp, r7
 8013630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013634:	4770      	bx	lr

08013636 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013636:	b480      	push	{r7}
 8013638:	b087      	sub	sp, #28
 801363a:	af00      	add	r7, sp, #0
 801363c:	6078      	str	r0, [r7, #4]
 801363e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	7b1b      	ldrb	r3, [r3, #12]
 8013644:	2b00      	cmp	r3, #0
 8013646:	f040 809d 	bne.w	8013784 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	785b      	ldrb	r3, [r3, #1]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d04c      	beq.n	80136ec <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013652:	687a      	ldr	r2, [r7, #4]
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	781b      	ldrb	r3, [r3, #0]
 8013658:	009b      	lsls	r3, r3, #2
 801365a:	4413      	add	r3, r2
 801365c:	881b      	ldrh	r3, [r3, #0]
 801365e:	823b      	strh	r3, [r7, #16]
 8013660:	8a3b      	ldrh	r3, [r7, #16]
 8013662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013666:	2b00      	cmp	r3, #0
 8013668:	d01b      	beq.n	80136a2 <USB_EPClearStall+0x6c>
 801366a:	687a      	ldr	r2, [r7, #4]
 801366c:	683b      	ldr	r3, [r7, #0]
 801366e:	781b      	ldrb	r3, [r3, #0]
 8013670:	009b      	lsls	r3, r3, #2
 8013672:	4413      	add	r3, r2
 8013674:	881b      	ldrh	r3, [r3, #0]
 8013676:	b29b      	uxth	r3, r3
 8013678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801367c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013680:	81fb      	strh	r3, [r7, #14]
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	009b      	lsls	r3, r3, #2
 801368a:	441a      	add	r2, r3
 801368c:	89fb      	ldrh	r3, [r7, #14]
 801368e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801369a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801369e:	b29b      	uxth	r3, r3
 80136a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80136a2:	683b      	ldr	r3, [r7, #0]
 80136a4:	78db      	ldrb	r3, [r3, #3]
 80136a6:	2b01      	cmp	r3, #1
 80136a8:	d06c      	beq.n	8013784 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80136aa:	687a      	ldr	r2, [r7, #4]
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	781b      	ldrb	r3, [r3, #0]
 80136b0:	009b      	lsls	r3, r3, #2
 80136b2:	4413      	add	r3, r2
 80136b4:	881b      	ldrh	r3, [r3, #0]
 80136b6:	b29b      	uxth	r3, r3
 80136b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80136bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80136c0:	81bb      	strh	r3, [r7, #12]
 80136c2:	89bb      	ldrh	r3, [r7, #12]
 80136c4:	f083 0320 	eor.w	r3, r3, #32
 80136c8:	81bb      	strh	r3, [r7, #12]
 80136ca:	687a      	ldr	r2, [r7, #4]
 80136cc:	683b      	ldr	r3, [r7, #0]
 80136ce:	781b      	ldrb	r3, [r3, #0]
 80136d0:	009b      	lsls	r3, r3, #2
 80136d2:	441a      	add	r2, r3
 80136d4:	89bb      	ldrh	r3, [r7, #12]
 80136d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80136da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80136de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80136e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80136e6:	b29b      	uxth	r3, r3
 80136e8:	8013      	strh	r3, [r2, #0]
 80136ea:	e04b      	b.n	8013784 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80136ec:	687a      	ldr	r2, [r7, #4]
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	781b      	ldrb	r3, [r3, #0]
 80136f2:	009b      	lsls	r3, r3, #2
 80136f4:	4413      	add	r3, r2
 80136f6:	881b      	ldrh	r3, [r3, #0]
 80136f8:	82fb      	strh	r3, [r7, #22]
 80136fa:	8afb      	ldrh	r3, [r7, #22]
 80136fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013700:	2b00      	cmp	r3, #0
 8013702:	d01b      	beq.n	801373c <USB_EPClearStall+0x106>
 8013704:	687a      	ldr	r2, [r7, #4]
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	781b      	ldrb	r3, [r3, #0]
 801370a:	009b      	lsls	r3, r3, #2
 801370c:	4413      	add	r3, r2
 801370e:	881b      	ldrh	r3, [r3, #0]
 8013710:	b29b      	uxth	r3, r3
 8013712:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801371a:	82bb      	strh	r3, [r7, #20]
 801371c:	687a      	ldr	r2, [r7, #4]
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	781b      	ldrb	r3, [r3, #0]
 8013722:	009b      	lsls	r3, r3, #2
 8013724:	441a      	add	r2, r3
 8013726:	8abb      	ldrh	r3, [r7, #20]
 8013728:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801372c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013730:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8013734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013738:	b29b      	uxth	r3, r3
 801373a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801373c:	687a      	ldr	r2, [r7, #4]
 801373e:	683b      	ldr	r3, [r7, #0]
 8013740:	781b      	ldrb	r3, [r3, #0]
 8013742:	009b      	lsls	r3, r3, #2
 8013744:	4413      	add	r3, r2
 8013746:	881b      	ldrh	r3, [r3, #0]
 8013748:	b29b      	uxth	r3, r3
 801374a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801374e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013752:	827b      	strh	r3, [r7, #18]
 8013754:	8a7b      	ldrh	r3, [r7, #18]
 8013756:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801375a:	827b      	strh	r3, [r7, #18]
 801375c:	8a7b      	ldrh	r3, [r7, #18]
 801375e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8013762:	827b      	strh	r3, [r7, #18]
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	781b      	ldrb	r3, [r3, #0]
 801376a:	009b      	lsls	r3, r3, #2
 801376c:	441a      	add	r2, r3
 801376e:	8a7b      	ldrh	r3, [r7, #18]
 8013770:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013774:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801377c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013780:	b29b      	uxth	r3, r3
 8013782:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8013784:	2300      	movs	r3, #0
}
 8013786:	4618      	mov	r0, r3
 8013788:	371c      	adds	r7, #28
 801378a:	46bd      	mov	sp, r7
 801378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013790:	4770      	bx	lr

08013792 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8013792:	b480      	push	{r7}
 8013794:	b083      	sub	sp, #12
 8013796:	af00      	add	r7, sp, #0
 8013798:	6078      	str	r0, [r7, #4]
 801379a:	460b      	mov	r3, r1
 801379c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 801379e:	78fb      	ldrb	r3, [r7, #3]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d103      	bne.n	80137ac <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	2280      	movs	r2, #128	@ 0x80
 80137a8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80137ac:	2300      	movs	r3, #0
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	370c      	adds	r7, #12
 80137b2:	46bd      	mov	sp, r7
 80137b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b8:	4770      	bx	lr

080137ba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80137ba:	b480      	push	{r7}
 80137bc:	b083      	sub	sp, #12
 80137be:	af00      	add	r7, sp, #0
 80137c0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80137c8:	b29b      	uxth	r3, r3
 80137ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80137ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80137d2:	b29a      	uxth	r2, r3
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80137da:	2300      	movs	r3, #0
}
 80137dc:	4618      	mov	r0, r3
 80137de:	370c      	adds	r7, #12
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr

080137e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80137e8:	b480      	push	{r7}
 80137ea:	b085      	sub	sp, #20
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80137f6:	b29b      	uxth	r3, r3
 80137f8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80137fa:	68fb      	ldr	r3, [r7, #12]
}
 80137fc:	4618      	mov	r0, r3
 80137fe:	3714      	adds	r7, #20
 8013800:	46bd      	mov	sp, r7
 8013802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013806:	4770      	bx	lr

08013808 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013808:	b480      	push	{r7}
 801380a:	b08b      	sub	sp, #44	@ 0x2c
 801380c:	af00      	add	r7, sp, #0
 801380e:	60f8      	str	r0, [r7, #12]
 8013810:	60b9      	str	r1, [r7, #8]
 8013812:	4611      	mov	r1, r2
 8013814:	461a      	mov	r2, r3
 8013816:	460b      	mov	r3, r1
 8013818:	80fb      	strh	r3, [r7, #6]
 801381a:	4613      	mov	r3, r2
 801381c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801381e:	88bb      	ldrh	r3, [r7, #4]
 8013820:	3301      	adds	r3, #1
 8013822:	085b      	lsrs	r3, r3, #1
 8013824:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801382a:	68bb      	ldr	r3, [r7, #8]
 801382c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801382e:	88fa      	ldrh	r2, [r7, #6]
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	4413      	add	r3, r2
 8013834:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8013838:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801383a:	69bb      	ldr	r3, [r7, #24]
 801383c:	627b      	str	r3, [r7, #36]	@ 0x24
 801383e:	e01b      	b.n	8013878 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8013840:	69fb      	ldr	r3, [r7, #28]
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8013846:	69fb      	ldr	r3, [r7, #28]
 8013848:	3301      	adds	r3, #1
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	021b      	lsls	r3, r3, #8
 801384e:	b21a      	sxth	r2, r3
 8013850:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013854:	4313      	orrs	r3, r2
 8013856:	b21b      	sxth	r3, r3
 8013858:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 801385a:	6a3b      	ldr	r3, [r7, #32]
 801385c:	8a7a      	ldrh	r2, [r7, #18]
 801385e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8013860:	6a3b      	ldr	r3, [r7, #32]
 8013862:	3302      	adds	r3, #2
 8013864:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8013866:	69fb      	ldr	r3, [r7, #28]
 8013868:	3301      	adds	r3, #1
 801386a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801386c:	69fb      	ldr	r3, [r7, #28]
 801386e:	3301      	adds	r3, #1
 8013870:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8013872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013874:	3b01      	subs	r3, #1
 8013876:	627b      	str	r3, [r7, #36]	@ 0x24
 8013878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801387a:	2b00      	cmp	r3, #0
 801387c:	d1e0      	bne.n	8013840 <USB_WritePMA+0x38>
  }
}
 801387e:	bf00      	nop
 8013880:	bf00      	nop
 8013882:	372c      	adds	r7, #44	@ 0x2c
 8013884:	46bd      	mov	sp, r7
 8013886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388a:	4770      	bx	lr

0801388c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801388c:	b480      	push	{r7}
 801388e:	b08b      	sub	sp, #44	@ 0x2c
 8013890:	af00      	add	r7, sp, #0
 8013892:	60f8      	str	r0, [r7, #12]
 8013894:	60b9      	str	r1, [r7, #8]
 8013896:	4611      	mov	r1, r2
 8013898:	461a      	mov	r2, r3
 801389a:	460b      	mov	r3, r1
 801389c:	80fb      	strh	r3, [r7, #6]
 801389e:	4613      	mov	r3, r2
 80138a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80138a2:	88bb      	ldrh	r3, [r7, #4]
 80138a4:	085b      	lsrs	r3, r3, #1
 80138a6:	b29b      	uxth	r3, r3
 80138a8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80138b2:	88fa      	ldrh	r2, [r7, #6]
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	4413      	add	r3, r2
 80138b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80138bc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80138be:	69bb      	ldr	r3, [r7, #24]
 80138c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80138c2:	e018      	b.n	80138f6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80138c4:	6a3b      	ldr	r3, [r7, #32]
 80138c6:	881b      	ldrh	r3, [r3, #0]
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80138cc:	6a3b      	ldr	r3, [r7, #32]
 80138ce:	3302      	adds	r3, #2
 80138d0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80138d2:	693b      	ldr	r3, [r7, #16]
 80138d4:	b2da      	uxtb	r2, r3
 80138d6:	69fb      	ldr	r3, [r7, #28]
 80138d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80138da:	69fb      	ldr	r3, [r7, #28]
 80138dc:	3301      	adds	r3, #1
 80138de:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80138e0:	693b      	ldr	r3, [r7, #16]
 80138e2:	0a1b      	lsrs	r3, r3, #8
 80138e4:	b2da      	uxtb	r2, r3
 80138e6:	69fb      	ldr	r3, [r7, #28]
 80138e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80138ea:	69fb      	ldr	r3, [r7, #28]
 80138ec:	3301      	adds	r3, #1
 80138ee:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80138f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138f2:	3b01      	subs	r3, #1
 80138f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80138f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d1e3      	bne.n	80138c4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80138fc:	88bb      	ldrh	r3, [r7, #4]
 80138fe:	f003 0301 	and.w	r3, r3, #1
 8013902:	b29b      	uxth	r3, r3
 8013904:	2b00      	cmp	r3, #0
 8013906:	d007      	beq.n	8013918 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8013908:	6a3b      	ldr	r3, [r7, #32]
 801390a:	881b      	ldrh	r3, [r3, #0]
 801390c:	b29b      	uxth	r3, r3
 801390e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8013910:	693b      	ldr	r3, [r7, #16]
 8013912:	b2da      	uxtb	r2, r3
 8013914:	69fb      	ldr	r3, [r7, #28]
 8013916:	701a      	strb	r2, [r3, #0]
  }
}
 8013918:	bf00      	nop
 801391a:	372c      	adds	r7, #44	@ 0x2c
 801391c:	46bd      	mov	sp, r7
 801391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013922:	4770      	bx	lr

08013924 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b084      	sub	sp, #16
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
 801392c:	460b      	mov	r3, r1
 801392e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013930:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8013934:	f002 fc74 	bl	8016220 <USBD_static_malloc>
 8013938:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d109      	bne.n	8013954 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	32b0      	adds	r2, #176	@ 0xb0
 801394a:	2100      	movs	r1, #0
 801394c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013950:	2302      	movs	r3, #2
 8013952:	e0d4      	b.n	8013afe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8013954:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8013958:	2100      	movs	r1, #0
 801395a:	68f8      	ldr	r0, [r7, #12]
 801395c:	f003 fb14 	bl	8016f88 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	32b0      	adds	r2, #176	@ 0xb0
 801396a:	68f9      	ldr	r1, [r7, #12]
 801396c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	32b0      	adds	r2, #176	@ 0xb0
 801397a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	7c1b      	ldrb	r3, [r3, #16]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d138      	bne.n	80139fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801398c:	4b5e      	ldr	r3, [pc, #376]	@ (8013b08 <USBD_CDC_Init+0x1e4>)
 801398e:	7819      	ldrb	r1, [r3, #0]
 8013990:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013994:	2202      	movs	r2, #2
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f002 fae9 	bl	8015f6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801399c:	4b5a      	ldr	r3, [pc, #360]	@ (8013b08 <USBD_CDC_Init+0x1e4>)
 801399e:	781b      	ldrb	r3, [r3, #0]
 80139a0:	f003 020f 	and.w	r2, r3, #15
 80139a4:	6879      	ldr	r1, [r7, #4]
 80139a6:	4613      	mov	r3, r2
 80139a8:	009b      	lsls	r3, r3, #2
 80139aa:	4413      	add	r3, r2
 80139ac:	009b      	lsls	r3, r3, #2
 80139ae:	440b      	add	r3, r1
 80139b0:	3324      	adds	r3, #36	@ 0x24
 80139b2:	2201      	movs	r2, #1
 80139b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80139b6:	4b55      	ldr	r3, [pc, #340]	@ (8013b0c <USBD_CDC_Init+0x1e8>)
 80139b8:	7819      	ldrb	r1, [r3, #0]
 80139ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80139be:	2202      	movs	r2, #2
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f002 fad4 	bl	8015f6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80139c6:	4b51      	ldr	r3, [pc, #324]	@ (8013b0c <USBD_CDC_Init+0x1e8>)
 80139c8:	781b      	ldrb	r3, [r3, #0]
 80139ca:	f003 020f 	and.w	r2, r3, #15
 80139ce:	6879      	ldr	r1, [r7, #4]
 80139d0:	4613      	mov	r3, r2
 80139d2:	009b      	lsls	r3, r3, #2
 80139d4:	4413      	add	r3, r2
 80139d6:	009b      	lsls	r3, r3, #2
 80139d8:	440b      	add	r3, r1
 80139da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80139de:	2201      	movs	r2, #1
 80139e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80139e2:	4b4b      	ldr	r3, [pc, #300]	@ (8013b10 <USBD_CDC_Init+0x1ec>)
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	f003 020f 	and.w	r2, r3, #15
 80139ea:	6879      	ldr	r1, [r7, #4]
 80139ec:	4613      	mov	r3, r2
 80139ee:	009b      	lsls	r3, r3, #2
 80139f0:	4413      	add	r3, r2
 80139f2:	009b      	lsls	r3, r3, #2
 80139f4:	440b      	add	r3, r1
 80139f6:	3326      	adds	r3, #38	@ 0x26
 80139f8:	2210      	movs	r2, #16
 80139fa:	801a      	strh	r2, [r3, #0]
 80139fc:	e035      	b.n	8013a6a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80139fe:	4b42      	ldr	r3, [pc, #264]	@ (8013b08 <USBD_CDC_Init+0x1e4>)
 8013a00:	7819      	ldrb	r1, [r3, #0]
 8013a02:	2340      	movs	r3, #64	@ 0x40
 8013a04:	2202      	movs	r2, #2
 8013a06:	6878      	ldr	r0, [r7, #4]
 8013a08:	f002 fab1 	bl	8015f6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013a0c:	4b3e      	ldr	r3, [pc, #248]	@ (8013b08 <USBD_CDC_Init+0x1e4>)
 8013a0e:	781b      	ldrb	r3, [r3, #0]
 8013a10:	f003 020f 	and.w	r2, r3, #15
 8013a14:	6879      	ldr	r1, [r7, #4]
 8013a16:	4613      	mov	r3, r2
 8013a18:	009b      	lsls	r3, r3, #2
 8013a1a:	4413      	add	r3, r2
 8013a1c:	009b      	lsls	r3, r3, #2
 8013a1e:	440b      	add	r3, r1
 8013a20:	3324      	adds	r3, #36	@ 0x24
 8013a22:	2201      	movs	r2, #1
 8013a24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013a26:	4b39      	ldr	r3, [pc, #228]	@ (8013b0c <USBD_CDC_Init+0x1e8>)
 8013a28:	7819      	ldrb	r1, [r3, #0]
 8013a2a:	2340      	movs	r3, #64	@ 0x40
 8013a2c:	2202      	movs	r2, #2
 8013a2e:	6878      	ldr	r0, [r7, #4]
 8013a30:	f002 fa9d 	bl	8015f6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013a34:	4b35      	ldr	r3, [pc, #212]	@ (8013b0c <USBD_CDC_Init+0x1e8>)
 8013a36:	781b      	ldrb	r3, [r3, #0]
 8013a38:	f003 020f 	and.w	r2, r3, #15
 8013a3c:	6879      	ldr	r1, [r7, #4]
 8013a3e:	4613      	mov	r3, r2
 8013a40:	009b      	lsls	r3, r3, #2
 8013a42:	4413      	add	r3, r2
 8013a44:	009b      	lsls	r3, r3, #2
 8013a46:	440b      	add	r3, r1
 8013a48:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013a4c:	2201      	movs	r2, #1
 8013a4e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013a50:	4b2f      	ldr	r3, [pc, #188]	@ (8013b10 <USBD_CDC_Init+0x1ec>)
 8013a52:	781b      	ldrb	r3, [r3, #0]
 8013a54:	f003 020f 	and.w	r2, r3, #15
 8013a58:	6879      	ldr	r1, [r7, #4]
 8013a5a:	4613      	mov	r3, r2
 8013a5c:	009b      	lsls	r3, r3, #2
 8013a5e:	4413      	add	r3, r2
 8013a60:	009b      	lsls	r3, r3, #2
 8013a62:	440b      	add	r3, r1
 8013a64:	3326      	adds	r3, #38	@ 0x26
 8013a66:	2210      	movs	r2, #16
 8013a68:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013a6a:	4b29      	ldr	r3, [pc, #164]	@ (8013b10 <USBD_CDC_Init+0x1ec>)
 8013a6c:	7819      	ldrb	r1, [r3, #0]
 8013a6e:	2308      	movs	r3, #8
 8013a70:	2203      	movs	r2, #3
 8013a72:	6878      	ldr	r0, [r7, #4]
 8013a74:	f002 fa7b 	bl	8015f6e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8013a78:	4b25      	ldr	r3, [pc, #148]	@ (8013b10 <USBD_CDC_Init+0x1ec>)
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	f003 020f 	and.w	r2, r3, #15
 8013a80:	6879      	ldr	r1, [r7, #4]
 8013a82:	4613      	mov	r3, r2
 8013a84:	009b      	lsls	r3, r3, #2
 8013a86:	4413      	add	r3, r2
 8013a88:	009b      	lsls	r3, r3, #2
 8013a8a:	440b      	add	r3, r1
 8013a8c:	3324      	adds	r3, #36	@ 0x24
 8013a8e:	2201      	movs	r2, #1
 8013a90:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	2200      	movs	r2, #0
 8013a96:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013aa0:	687a      	ldr	r2, [r7, #4]
 8013aa2:	33b0      	adds	r3, #176	@ 0xb0
 8013aa4:	009b      	lsls	r3, r3, #2
 8013aa6:	4413      	add	r3, r2
 8013aa8:	685b      	ldr	r3, [r3, #4]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d101      	bne.n	8013acc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8013ac8:	2302      	movs	r3, #2
 8013aca:	e018      	b.n	8013afe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	7c1b      	ldrb	r3, [r3, #16]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d10a      	bne.n	8013aea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8013b0c <USBD_CDC_Init+0x1e8>)
 8013ad6:	7819      	ldrb	r1, [r3, #0]
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013ade:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	f002 fb32 	bl	801614c <USBD_LL_PrepareReceive>
 8013ae8:	e008      	b.n	8013afc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013aea:	4b08      	ldr	r3, [pc, #32]	@ (8013b0c <USBD_CDC_Init+0x1e8>)
 8013aec:	7819      	ldrb	r1, [r3, #0]
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013af4:	2340      	movs	r3, #64	@ 0x40
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	f002 fb28 	bl	801614c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013afc:	2300      	movs	r3, #0
}
 8013afe:	4618      	mov	r0, r3
 8013b00:	3710      	adds	r7, #16
 8013b02:	46bd      	mov	sp, r7
 8013b04:	bd80      	pop	{r7, pc}
 8013b06:	bf00      	nop
 8013b08:	200000cb 	.word	0x200000cb
 8013b0c:	200000cc 	.word	0x200000cc
 8013b10:	200000cd 	.word	0x200000cd

08013b14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b082      	sub	sp, #8
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
 8013b1c:	460b      	mov	r3, r1
 8013b1e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013b20:	4b3a      	ldr	r3, [pc, #232]	@ (8013c0c <USBD_CDC_DeInit+0xf8>)
 8013b22:	781b      	ldrb	r3, [r3, #0]
 8013b24:	4619      	mov	r1, r3
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f002 fa47 	bl	8015fba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013b2c:	4b37      	ldr	r3, [pc, #220]	@ (8013c0c <USBD_CDC_DeInit+0xf8>)
 8013b2e:	781b      	ldrb	r3, [r3, #0]
 8013b30:	f003 020f 	and.w	r2, r3, #15
 8013b34:	6879      	ldr	r1, [r7, #4]
 8013b36:	4613      	mov	r3, r2
 8013b38:	009b      	lsls	r3, r3, #2
 8013b3a:	4413      	add	r3, r2
 8013b3c:	009b      	lsls	r3, r3, #2
 8013b3e:	440b      	add	r3, r1
 8013b40:	3324      	adds	r3, #36	@ 0x24
 8013b42:	2200      	movs	r2, #0
 8013b44:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8013b46:	4b32      	ldr	r3, [pc, #200]	@ (8013c10 <USBD_CDC_DeInit+0xfc>)
 8013b48:	781b      	ldrb	r3, [r3, #0]
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	6878      	ldr	r0, [r7, #4]
 8013b4e:	f002 fa34 	bl	8015fba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8013b52:	4b2f      	ldr	r3, [pc, #188]	@ (8013c10 <USBD_CDC_DeInit+0xfc>)
 8013b54:	781b      	ldrb	r3, [r3, #0]
 8013b56:	f003 020f 	and.w	r2, r3, #15
 8013b5a:	6879      	ldr	r1, [r7, #4]
 8013b5c:	4613      	mov	r3, r2
 8013b5e:	009b      	lsls	r3, r3, #2
 8013b60:	4413      	add	r3, r2
 8013b62:	009b      	lsls	r3, r3, #2
 8013b64:	440b      	add	r3, r1
 8013b66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8013b6e:	4b29      	ldr	r3, [pc, #164]	@ (8013c14 <USBD_CDC_DeInit+0x100>)
 8013b70:	781b      	ldrb	r3, [r3, #0]
 8013b72:	4619      	mov	r1, r3
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	f002 fa20 	bl	8015fba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8013b7a:	4b26      	ldr	r3, [pc, #152]	@ (8013c14 <USBD_CDC_DeInit+0x100>)
 8013b7c:	781b      	ldrb	r3, [r3, #0]
 8013b7e:	f003 020f 	and.w	r2, r3, #15
 8013b82:	6879      	ldr	r1, [r7, #4]
 8013b84:	4613      	mov	r3, r2
 8013b86:	009b      	lsls	r3, r3, #2
 8013b88:	4413      	add	r3, r2
 8013b8a:	009b      	lsls	r3, r3, #2
 8013b8c:	440b      	add	r3, r1
 8013b8e:	3324      	adds	r3, #36	@ 0x24
 8013b90:	2200      	movs	r2, #0
 8013b92:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8013b94:	4b1f      	ldr	r3, [pc, #124]	@ (8013c14 <USBD_CDC_DeInit+0x100>)
 8013b96:	781b      	ldrb	r3, [r3, #0]
 8013b98:	f003 020f 	and.w	r2, r3, #15
 8013b9c:	6879      	ldr	r1, [r7, #4]
 8013b9e:	4613      	mov	r3, r2
 8013ba0:	009b      	lsls	r3, r3, #2
 8013ba2:	4413      	add	r3, r2
 8013ba4:	009b      	lsls	r3, r3, #2
 8013ba6:	440b      	add	r3, r1
 8013ba8:	3326      	adds	r3, #38	@ 0x26
 8013baa:	2200      	movs	r2, #0
 8013bac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	32b0      	adds	r2, #176	@ 0xb0
 8013bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d01f      	beq.n	8013c00 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013bc6:	687a      	ldr	r2, [r7, #4]
 8013bc8:	33b0      	adds	r3, #176	@ 0xb0
 8013bca:	009b      	lsls	r3, r3, #2
 8013bcc:	4413      	add	r3, r2
 8013bce:	685b      	ldr	r3, [r3, #4]
 8013bd0:	685b      	ldr	r3, [r3, #4]
 8013bd2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	32b0      	adds	r2, #176	@ 0xb0
 8013bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013be2:	4618      	mov	r0, r3
 8013be4:	f002 fb2a 	bl	801623c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	32b0      	adds	r2, #176	@ 0xb0
 8013bf2:	2100      	movs	r1, #0
 8013bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013c00:	2300      	movs	r3, #0
}
 8013c02:	4618      	mov	r0, r3
 8013c04:	3708      	adds	r7, #8
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bd80      	pop	{r7, pc}
 8013c0a:	bf00      	nop
 8013c0c:	200000cb 	.word	0x200000cb
 8013c10:	200000cc 	.word	0x200000cc
 8013c14:	200000cd 	.word	0x200000cd

08013c18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b086      	sub	sp, #24
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
 8013c20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	32b0      	adds	r2, #176	@ 0xb0
 8013c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c30:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013c32:	2300      	movs	r3, #0
 8013c34:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013c36:	2300      	movs	r3, #0
 8013c38:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d101      	bne.n	8013c48 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013c44:	2303      	movs	r3, #3
 8013c46:	e0bf      	b.n	8013dc8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013c48:	683b      	ldr	r3, [r7, #0]
 8013c4a:	781b      	ldrb	r3, [r3, #0]
 8013c4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d050      	beq.n	8013cf6 <USBD_CDC_Setup+0xde>
 8013c54:	2b20      	cmp	r3, #32
 8013c56:	f040 80af 	bne.w	8013db8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	88db      	ldrh	r3, [r3, #6]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d03a      	beq.n	8013cd8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	781b      	ldrb	r3, [r3, #0]
 8013c66:	b25b      	sxtb	r3, r3
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	da1b      	bge.n	8013ca4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013c72:	687a      	ldr	r2, [r7, #4]
 8013c74:	33b0      	adds	r3, #176	@ 0xb0
 8013c76:	009b      	lsls	r3, r3, #2
 8013c78:	4413      	add	r3, r2
 8013c7a:	685b      	ldr	r3, [r3, #4]
 8013c7c:	689b      	ldr	r3, [r3, #8]
 8013c7e:	683a      	ldr	r2, [r7, #0]
 8013c80:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8013c82:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013c84:	683a      	ldr	r2, [r7, #0]
 8013c86:	88d2      	ldrh	r2, [r2, #6]
 8013c88:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	88db      	ldrh	r3, [r3, #6]
 8013c8e:	2b07      	cmp	r3, #7
 8013c90:	bf28      	it	cs
 8013c92:	2307      	movcs	r3, #7
 8013c94:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013c96:	693b      	ldr	r3, [r7, #16]
 8013c98:	89fa      	ldrh	r2, [r7, #14]
 8013c9a:	4619      	mov	r1, r3
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f001 fd47 	bl	8015730 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8013ca2:	e090      	b.n	8013dc6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	785a      	ldrb	r2, [r3, #1]
 8013ca8:	693b      	ldr	r3, [r7, #16]
 8013caa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	88db      	ldrh	r3, [r3, #6]
 8013cb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8013cb4:	d803      	bhi.n	8013cbe <USBD_CDC_Setup+0xa6>
 8013cb6:	683b      	ldr	r3, [r7, #0]
 8013cb8:	88db      	ldrh	r3, [r3, #6]
 8013cba:	b2da      	uxtb	r2, r3
 8013cbc:	e000      	b.n	8013cc0 <USBD_CDC_Setup+0xa8>
 8013cbe:	2240      	movs	r2, #64	@ 0x40
 8013cc0:	693b      	ldr	r3, [r7, #16]
 8013cc2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8013cc6:	6939      	ldr	r1, [r7, #16]
 8013cc8:	693b      	ldr	r3, [r7, #16]
 8013cca:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8013cce:	461a      	mov	r2, r3
 8013cd0:	6878      	ldr	r0, [r7, #4]
 8013cd2:	f001 fd59 	bl	8015788 <USBD_CtlPrepareRx>
      break;
 8013cd6:	e076      	b.n	8013dc6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013cde:	687a      	ldr	r2, [r7, #4]
 8013ce0:	33b0      	adds	r3, #176	@ 0xb0
 8013ce2:	009b      	lsls	r3, r3, #2
 8013ce4:	4413      	add	r3, r2
 8013ce6:	685b      	ldr	r3, [r3, #4]
 8013ce8:	689b      	ldr	r3, [r3, #8]
 8013cea:	683a      	ldr	r2, [r7, #0]
 8013cec:	7850      	ldrb	r0, [r2, #1]
 8013cee:	2200      	movs	r2, #0
 8013cf0:	6839      	ldr	r1, [r7, #0]
 8013cf2:	4798      	blx	r3
      break;
 8013cf4:	e067      	b.n	8013dc6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	785b      	ldrb	r3, [r3, #1]
 8013cfa:	2b0b      	cmp	r3, #11
 8013cfc:	d851      	bhi.n	8013da2 <USBD_CDC_Setup+0x18a>
 8013cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8013d04 <USBD_CDC_Setup+0xec>)
 8013d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d04:	08013d35 	.word	0x08013d35
 8013d08:	08013db1 	.word	0x08013db1
 8013d0c:	08013da3 	.word	0x08013da3
 8013d10:	08013da3 	.word	0x08013da3
 8013d14:	08013da3 	.word	0x08013da3
 8013d18:	08013da3 	.word	0x08013da3
 8013d1c:	08013da3 	.word	0x08013da3
 8013d20:	08013da3 	.word	0x08013da3
 8013d24:	08013da3 	.word	0x08013da3
 8013d28:	08013da3 	.word	0x08013da3
 8013d2c:	08013d5f 	.word	0x08013d5f
 8013d30:	08013d89 	.word	0x08013d89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d3a:	b2db      	uxtb	r3, r3
 8013d3c:	2b03      	cmp	r3, #3
 8013d3e:	d107      	bne.n	8013d50 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013d40:	f107 030a 	add.w	r3, r7, #10
 8013d44:	2202      	movs	r2, #2
 8013d46:	4619      	mov	r1, r3
 8013d48:	6878      	ldr	r0, [r7, #4]
 8013d4a:	f001 fcf1 	bl	8015730 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013d4e:	e032      	b.n	8013db6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013d50:	6839      	ldr	r1, [r7, #0]
 8013d52:	6878      	ldr	r0, [r7, #4]
 8013d54:	f001 fc6f 	bl	8015636 <USBD_CtlError>
            ret = USBD_FAIL;
 8013d58:	2303      	movs	r3, #3
 8013d5a:	75fb      	strb	r3, [r7, #23]
          break;
 8013d5c:	e02b      	b.n	8013db6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d64:	b2db      	uxtb	r3, r3
 8013d66:	2b03      	cmp	r3, #3
 8013d68:	d107      	bne.n	8013d7a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013d6a:	f107 030d 	add.w	r3, r7, #13
 8013d6e:	2201      	movs	r2, #1
 8013d70:	4619      	mov	r1, r3
 8013d72:	6878      	ldr	r0, [r7, #4]
 8013d74:	f001 fcdc 	bl	8015730 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013d78:	e01d      	b.n	8013db6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013d7a:	6839      	ldr	r1, [r7, #0]
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f001 fc5a 	bl	8015636 <USBD_CtlError>
            ret = USBD_FAIL;
 8013d82:	2303      	movs	r3, #3
 8013d84:	75fb      	strb	r3, [r7, #23]
          break;
 8013d86:	e016      	b.n	8013db6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d8e:	b2db      	uxtb	r3, r3
 8013d90:	2b03      	cmp	r3, #3
 8013d92:	d00f      	beq.n	8013db4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8013d94:	6839      	ldr	r1, [r7, #0]
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	f001 fc4d 	bl	8015636 <USBD_CtlError>
            ret = USBD_FAIL;
 8013d9c:	2303      	movs	r3, #3
 8013d9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013da0:	e008      	b.n	8013db4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013da2:	6839      	ldr	r1, [r7, #0]
 8013da4:	6878      	ldr	r0, [r7, #4]
 8013da6:	f001 fc46 	bl	8015636 <USBD_CtlError>
          ret = USBD_FAIL;
 8013daa:	2303      	movs	r3, #3
 8013dac:	75fb      	strb	r3, [r7, #23]
          break;
 8013dae:	e002      	b.n	8013db6 <USBD_CDC_Setup+0x19e>
          break;
 8013db0:	bf00      	nop
 8013db2:	e008      	b.n	8013dc6 <USBD_CDC_Setup+0x1ae>
          break;
 8013db4:	bf00      	nop
      }
      break;
 8013db6:	e006      	b.n	8013dc6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8013db8:	6839      	ldr	r1, [r7, #0]
 8013dba:	6878      	ldr	r0, [r7, #4]
 8013dbc:	f001 fc3b 	bl	8015636 <USBD_CtlError>
      ret = USBD_FAIL;
 8013dc0:	2303      	movs	r3, #3
 8013dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8013dc4:	bf00      	nop
  }

  return (uint8_t)ret;
 8013dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dc8:	4618      	mov	r0, r3
 8013dca:	3718      	adds	r7, #24
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}

08013dd0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b084      	sub	sp, #16
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
 8013dd8:	460b      	mov	r3, r1
 8013dda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013de2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	32b0      	adds	r2, #176	@ 0xb0
 8013dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d101      	bne.n	8013dfa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8013df6:	2303      	movs	r3, #3
 8013df8:	e065      	b.n	8013ec6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	32b0      	adds	r2, #176	@ 0xb0
 8013e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013e0a:	78fb      	ldrb	r3, [r7, #3]
 8013e0c:	f003 020f 	and.w	r2, r3, #15
 8013e10:	6879      	ldr	r1, [r7, #4]
 8013e12:	4613      	mov	r3, r2
 8013e14:	009b      	lsls	r3, r3, #2
 8013e16:	4413      	add	r3, r2
 8013e18:	009b      	lsls	r3, r3, #2
 8013e1a:	440b      	add	r3, r1
 8013e1c:	3318      	adds	r3, #24
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d02f      	beq.n	8013e84 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013e24:	78fb      	ldrb	r3, [r7, #3]
 8013e26:	f003 020f 	and.w	r2, r3, #15
 8013e2a:	6879      	ldr	r1, [r7, #4]
 8013e2c:	4613      	mov	r3, r2
 8013e2e:	009b      	lsls	r3, r3, #2
 8013e30:	4413      	add	r3, r2
 8013e32:	009b      	lsls	r3, r3, #2
 8013e34:	440b      	add	r3, r1
 8013e36:	3318      	adds	r3, #24
 8013e38:	681a      	ldr	r2, [r3, #0]
 8013e3a:	78fb      	ldrb	r3, [r7, #3]
 8013e3c:	f003 010f 	and.w	r1, r3, #15
 8013e40:	68f8      	ldr	r0, [r7, #12]
 8013e42:	460b      	mov	r3, r1
 8013e44:	009b      	lsls	r3, r3, #2
 8013e46:	440b      	add	r3, r1
 8013e48:	00db      	lsls	r3, r3, #3
 8013e4a:	4403      	add	r3, r0
 8013e4c:	3320      	adds	r3, #32
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	fbb2 f1f3 	udiv	r1, r2, r3
 8013e54:	fb01 f303 	mul.w	r3, r1, r3
 8013e58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d112      	bne.n	8013e84 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8013e5e:	78fb      	ldrb	r3, [r7, #3]
 8013e60:	f003 020f 	and.w	r2, r3, #15
 8013e64:	6879      	ldr	r1, [r7, #4]
 8013e66:	4613      	mov	r3, r2
 8013e68:	009b      	lsls	r3, r3, #2
 8013e6a:	4413      	add	r3, r2
 8013e6c:	009b      	lsls	r3, r3, #2
 8013e6e:	440b      	add	r3, r1
 8013e70:	3318      	adds	r3, #24
 8013e72:	2200      	movs	r2, #0
 8013e74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013e76:	78f9      	ldrb	r1, [r7, #3]
 8013e78:	2300      	movs	r3, #0
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f002 f944 	bl	801610a <USBD_LL_Transmit>
 8013e82:	e01f      	b.n	8013ec4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	2200      	movs	r2, #0
 8013e88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013e92:	687a      	ldr	r2, [r7, #4]
 8013e94:	33b0      	adds	r3, #176	@ 0xb0
 8013e96:	009b      	lsls	r3, r3, #2
 8013e98:	4413      	add	r3, r2
 8013e9a:	685b      	ldr	r3, [r3, #4]
 8013e9c:	691b      	ldr	r3, [r3, #16]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d010      	beq.n	8013ec4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013ea8:	687a      	ldr	r2, [r7, #4]
 8013eaa:	33b0      	adds	r3, #176	@ 0xb0
 8013eac:	009b      	lsls	r3, r3, #2
 8013eae:	4413      	add	r3, r2
 8013eb0:	685b      	ldr	r3, [r3, #4]
 8013eb2:	691b      	ldr	r3, [r3, #16]
 8013eb4:	68ba      	ldr	r2, [r7, #8]
 8013eb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8013eba:	68ba      	ldr	r2, [r7, #8]
 8013ebc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8013ec0:	78fa      	ldrb	r2, [r7, #3]
 8013ec2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013ec4:	2300      	movs	r3, #0
}
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	3710      	adds	r7, #16
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	bd80      	pop	{r7, pc}

08013ece <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013ece:	b580      	push	{r7, lr}
 8013ed0:	b084      	sub	sp, #16
 8013ed2:	af00      	add	r7, sp, #0
 8013ed4:	6078      	str	r0, [r7, #4]
 8013ed6:	460b      	mov	r3, r1
 8013ed8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	32b0      	adds	r2, #176	@ 0xb0
 8013ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ee8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	32b0      	adds	r2, #176	@ 0xb0
 8013ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d101      	bne.n	8013f00 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013efc:	2303      	movs	r3, #3
 8013efe:	e01a      	b.n	8013f36 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013f00:	78fb      	ldrb	r3, [r7, #3]
 8013f02:	4619      	mov	r1, r3
 8013f04:	6878      	ldr	r0, [r7, #4]
 8013f06:	f002 f942 	bl	801618e <USBD_LL_GetRxDataSize>
 8013f0a:	4602      	mov	r2, r0
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013f18:	687a      	ldr	r2, [r7, #4]
 8013f1a:	33b0      	adds	r3, #176	@ 0xb0
 8013f1c:	009b      	lsls	r3, r3, #2
 8013f1e:	4413      	add	r3, r2
 8013f20:	685b      	ldr	r3, [r3, #4]
 8013f22:	68db      	ldr	r3, [r3, #12]
 8013f24:	68fa      	ldr	r2, [r7, #12]
 8013f26:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8013f2a:	68fa      	ldr	r2, [r7, #12]
 8013f2c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8013f30:	4611      	mov	r1, r2
 8013f32:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013f34:	2300      	movs	r3, #0
}
 8013f36:	4618      	mov	r0, r3
 8013f38:	3710      	adds	r7, #16
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}

08013f3e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013f3e:	b580      	push	{r7, lr}
 8013f40:	b084      	sub	sp, #16
 8013f42:	af00      	add	r7, sp, #0
 8013f44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	32b0      	adds	r2, #176	@ 0xb0
 8013f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d101      	bne.n	8013f60 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013f5c:	2303      	movs	r3, #3
 8013f5e:	e024      	b.n	8013faa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013f66:	687a      	ldr	r2, [r7, #4]
 8013f68:	33b0      	adds	r3, #176	@ 0xb0
 8013f6a:	009b      	lsls	r3, r3, #2
 8013f6c:	4413      	add	r3, r2
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d019      	beq.n	8013fa8 <USBD_CDC_EP0_RxReady+0x6a>
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8013f7a:	2bff      	cmp	r3, #255	@ 0xff
 8013f7c:	d014      	beq.n	8013fa8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013f84:	687a      	ldr	r2, [r7, #4]
 8013f86:	33b0      	adds	r3, #176	@ 0xb0
 8013f88:	009b      	lsls	r3, r3, #2
 8013f8a:	4413      	add	r3, r2
 8013f8c:	685b      	ldr	r3, [r3, #4]
 8013f8e:	689b      	ldr	r3, [r3, #8]
 8013f90:	68fa      	ldr	r2, [r7, #12]
 8013f92:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8013f96:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013f98:	68fa      	ldr	r2, [r7, #12]
 8013f9a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013f9e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	22ff      	movs	r2, #255	@ 0xff
 8013fa4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8013fa8:	2300      	movs	r3, #0
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	3710      	adds	r7, #16
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}
	...

08013fb4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b086      	sub	sp, #24
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013fbc:	2182      	movs	r1, #130	@ 0x82
 8013fbe:	4818      	ldr	r0, [pc, #96]	@ (8014020 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013fc0:	f000 fcd9 	bl	8014976 <USBD_GetEpDesc>
 8013fc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013fc6:	2101      	movs	r1, #1
 8013fc8:	4815      	ldr	r0, [pc, #84]	@ (8014020 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013fca:	f000 fcd4 	bl	8014976 <USBD_GetEpDesc>
 8013fce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013fd0:	2181      	movs	r1, #129	@ 0x81
 8013fd2:	4813      	ldr	r0, [pc, #76]	@ (8014020 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013fd4:	f000 fccf 	bl	8014976 <USBD_GetEpDesc>
 8013fd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013fda:	697b      	ldr	r3, [r7, #20]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d002      	beq.n	8013fe6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013fe0:	697b      	ldr	r3, [r7, #20]
 8013fe2:	2210      	movs	r2, #16
 8013fe4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013fe6:	693b      	ldr	r3, [r7, #16]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d006      	beq.n	8013ffa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013fec:	693b      	ldr	r3, [r7, #16]
 8013fee:	2200      	movs	r2, #0
 8013ff0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013ff4:	711a      	strb	r2, [r3, #4]
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d006      	beq.n	801400e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	2200      	movs	r2, #0
 8014004:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014008:	711a      	strb	r2, [r3, #4]
 801400a:	2200      	movs	r2, #0
 801400c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2243      	movs	r2, #67	@ 0x43
 8014012:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014014:	4b02      	ldr	r3, [pc, #8]	@ (8014020 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014016:	4618      	mov	r0, r3
 8014018:	3718      	adds	r7, #24
 801401a:	46bd      	mov	sp, r7
 801401c:	bd80      	pop	{r7, pc}
 801401e:	bf00      	nop
 8014020:	20000088 	.word	0x20000088

08014024 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b086      	sub	sp, #24
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801402c:	2182      	movs	r1, #130	@ 0x82
 801402e:	4818      	ldr	r0, [pc, #96]	@ (8014090 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014030:	f000 fca1 	bl	8014976 <USBD_GetEpDesc>
 8014034:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014036:	2101      	movs	r1, #1
 8014038:	4815      	ldr	r0, [pc, #84]	@ (8014090 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801403a:	f000 fc9c 	bl	8014976 <USBD_GetEpDesc>
 801403e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014040:	2181      	movs	r1, #129	@ 0x81
 8014042:	4813      	ldr	r0, [pc, #76]	@ (8014090 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014044:	f000 fc97 	bl	8014976 <USBD_GetEpDesc>
 8014048:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801404a:	697b      	ldr	r3, [r7, #20]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d002      	beq.n	8014056 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	2210      	movs	r2, #16
 8014054:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014056:	693b      	ldr	r3, [r7, #16]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d006      	beq.n	801406a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801405c:	693b      	ldr	r3, [r7, #16]
 801405e:	2200      	movs	r2, #0
 8014060:	711a      	strb	r2, [r3, #4]
 8014062:	2200      	movs	r2, #0
 8014064:	f042 0202 	orr.w	r2, r2, #2
 8014068:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d006      	beq.n	801407e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	2200      	movs	r2, #0
 8014074:	711a      	strb	r2, [r3, #4]
 8014076:	2200      	movs	r2, #0
 8014078:	f042 0202 	orr.w	r2, r2, #2
 801407c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	2243      	movs	r2, #67	@ 0x43
 8014082:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014084:	4b02      	ldr	r3, [pc, #8]	@ (8014090 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014086:	4618      	mov	r0, r3
 8014088:	3718      	adds	r7, #24
 801408a:	46bd      	mov	sp, r7
 801408c:	bd80      	pop	{r7, pc}
 801408e:	bf00      	nop
 8014090:	20000088 	.word	0x20000088

08014094 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b086      	sub	sp, #24
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801409c:	2182      	movs	r1, #130	@ 0x82
 801409e:	4818      	ldr	r0, [pc, #96]	@ (8014100 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80140a0:	f000 fc69 	bl	8014976 <USBD_GetEpDesc>
 80140a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80140a6:	2101      	movs	r1, #1
 80140a8:	4815      	ldr	r0, [pc, #84]	@ (8014100 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80140aa:	f000 fc64 	bl	8014976 <USBD_GetEpDesc>
 80140ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80140b0:	2181      	movs	r1, #129	@ 0x81
 80140b2:	4813      	ldr	r0, [pc, #76]	@ (8014100 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80140b4:	f000 fc5f 	bl	8014976 <USBD_GetEpDesc>
 80140b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80140ba:	697b      	ldr	r3, [r7, #20]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d002      	beq.n	80140c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	2210      	movs	r2, #16
 80140c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d006      	beq.n	80140da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80140cc:	693b      	ldr	r3, [r7, #16]
 80140ce:	2200      	movs	r2, #0
 80140d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80140d4:	711a      	strb	r2, [r3, #4]
 80140d6:	2200      	movs	r2, #0
 80140d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d006      	beq.n	80140ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	2200      	movs	r2, #0
 80140e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80140e8:	711a      	strb	r2, [r3, #4]
 80140ea:	2200      	movs	r2, #0
 80140ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	2243      	movs	r2, #67	@ 0x43
 80140f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80140f4:	4b02      	ldr	r3, [pc, #8]	@ (8014100 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80140f6:	4618      	mov	r0, r3
 80140f8:	3718      	adds	r7, #24
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	20000088 	.word	0x20000088

08014104 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014104:	b480      	push	{r7}
 8014106:	b083      	sub	sp, #12
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	220a      	movs	r2, #10
 8014110:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014112:	4b03      	ldr	r3, [pc, #12]	@ (8014120 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014114:	4618      	mov	r0, r3
 8014116:	370c      	adds	r7, #12
 8014118:	46bd      	mov	sp, r7
 801411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411e:	4770      	bx	lr
 8014120:	20000044 	.word	0x20000044

08014124 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014124:	b480      	push	{r7}
 8014126:	b083      	sub	sp, #12
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
 801412c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801412e:	683b      	ldr	r3, [r7, #0]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d101      	bne.n	8014138 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014134:	2303      	movs	r3, #3
 8014136:	e009      	b.n	801414c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801413e:	687a      	ldr	r2, [r7, #4]
 8014140:	33b0      	adds	r3, #176	@ 0xb0
 8014142:	009b      	lsls	r3, r3, #2
 8014144:	4413      	add	r3, r2
 8014146:	683a      	ldr	r2, [r7, #0]
 8014148:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801414a:	2300      	movs	r3, #0
}
 801414c:	4618      	mov	r0, r3
 801414e:	370c      	adds	r7, #12
 8014150:	46bd      	mov	sp, r7
 8014152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014156:	4770      	bx	lr

08014158 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014158:	b480      	push	{r7}
 801415a:	b087      	sub	sp, #28
 801415c:	af00      	add	r7, sp, #0
 801415e:	60f8      	str	r0, [r7, #12]
 8014160:	60b9      	str	r1, [r7, #8]
 8014162:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	32b0      	adds	r2, #176	@ 0xb0
 801416e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014172:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014174:	697b      	ldr	r3, [r7, #20]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d101      	bne.n	801417e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801417a:	2303      	movs	r3, #3
 801417c:	e008      	b.n	8014190 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801417e:	697b      	ldr	r3, [r7, #20]
 8014180:	68ba      	ldr	r2, [r7, #8]
 8014182:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8014186:	697b      	ldr	r3, [r7, #20]
 8014188:	687a      	ldr	r2, [r7, #4]
 801418a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801418e:	2300      	movs	r3, #0
}
 8014190:	4618      	mov	r0, r3
 8014192:	371c      	adds	r7, #28
 8014194:	46bd      	mov	sp, r7
 8014196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419a:	4770      	bx	lr

0801419c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801419c:	b480      	push	{r7}
 801419e:	b085      	sub	sp, #20
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
 80141a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	32b0      	adds	r2, #176	@ 0xb0
 80141b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d101      	bne.n	80141c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80141bc:	2303      	movs	r3, #3
 80141be:	e004      	b.n	80141ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	683a      	ldr	r2, [r7, #0]
 80141c4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80141c8:	2300      	movs	r3, #0
}
 80141ca:	4618      	mov	r0, r3
 80141cc:	3714      	adds	r7, #20
 80141ce:	46bd      	mov	sp, r7
 80141d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d4:	4770      	bx	lr
	...

080141d8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b084      	sub	sp, #16
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	32b0      	adds	r2, #176	@ 0xb0
 80141ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141ee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80141f0:	2301      	movs	r3, #1
 80141f2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d101      	bne.n	80141fe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80141fa:	2303      	movs	r3, #3
 80141fc:	e025      	b.n	801424a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014204:	2b00      	cmp	r3, #0
 8014206:	d11f      	bne.n	8014248 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	2201      	movs	r2, #1
 801420c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014210:	4b10      	ldr	r3, [pc, #64]	@ (8014254 <USBD_CDC_TransmitPacket+0x7c>)
 8014212:	781b      	ldrb	r3, [r3, #0]
 8014214:	f003 020f 	and.w	r2, r3, #15
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	4613      	mov	r3, r2
 8014222:	009b      	lsls	r3, r3, #2
 8014224:	4413      	add	r3, r2
 8014226:	009b      	lsls	r3, r3, #2
 8014228:	4403      	add	r3, r0
 801422a:	3318      	adds	r3, #24
 801422c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801422e:	4b09      	ldr	r3, [pc, #36]	@ (8014254 <USBD_CDC_TransmitPacket+0x7c>)
 8014230:	7819      	ldrb	r1, [r3, #0]
 8014232:	68bb      	ldr	r3, [r7, #8]
 8014234:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f001 ff63 	bl	801610a <USBD_LL_Transmit>

    ret = USBD_OK;
 8014244:	2300      	movs	r3, #0
 8014246:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014248:	7bfb      	ldrb	r3, [r7, #15]
}
 801424a:	4618      	mov	r0, r3
 801424c:	3710      	adds	r7, #16
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}
 8014252:	bf00      	nop
 8014254:	200000cb 	.word	0x200000cb

08014258 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b084      	sub	sp, #16
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	32b0      	adds	r2, #176	@ 0xb0
 801426a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801426e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	32b0      	adds	r2, #176	@ 0xb0
 801427a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d101      	bne.n	8014286 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014282:	2303      	movs	r3, #3
 8014284:	e018      	b.n	80142b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	7c1b      	ldrb	r3, [r3, #16]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d10a      	bne.n	80142a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801428e:	4b0c      	ldr	r3, [pc, #48]	@ (80142c0 <USBD_CDC_ReceivePacket+0x68>)
 8014290:	7819      	ldrb	r1, [r3, #0]
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014298:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801429c:	6878      	ldr	r0, [r7, #4]
 801429e:	f001 ff55 	bl	801614c <USBD_LL_PrepareReceive>
 80142a2:	e008      	b.n	80142b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80142a4:	4b06      	ldr	r3, [pc, #24]	@ (80142c0 <USBD_CDC_ReceivePacket+0x68>)
 80142a6:	7819      	ldrb	r1, [r3, #0]
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80142ae:	2340      	movs	r3, #64	@ 0x40
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f001 ff4b 	bl	801614c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80142b6:	2300      	movs	r3, #0
}
 80142b8:	4618      	mov	r0, r3
 80142ba:	3710      	adds	r7, #16
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}
 80142c0:	200000cc 	.word	0x200000cc

080142c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b086      	sub	sp, #24
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	60f8      	str	r0, [r7, #12]
 80142cc:	60b9      	str	r1, [r7, #8]
 80142ce:	4613      	mov	r3, r2
 80142d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d10a      	bne.n	80142ee <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80142d8:	4817      	ldr	r0, [pc, #92]	@ (8014338 <USBD_Init+0x74>)
 80142da:	f002 fd05 	bl	8016ce8 <iprintf>
 80142de:	4817      	ldr	r0, [pc, #92]	@ (801433c <USBD_Init+0x78>)
 80142e0:	f002 fd02 	bl	8016ce8 <iprintf>
 80142e4:	200a      	movs	r0, #10
 80142e6:	f002 fd11 	bl	8016d0c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80142ea:	2303      	movs	r3, #3
 80142ec:	e01f      	b.n	801432e <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	2200      	movs	r2, #0
 80142f2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	2200      	movs	r2, #0
 80142fa:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	2200      	movs	r2, #0
 8014302:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014306:	68bb      	ldr	r3, [r7, #8]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d003      	beq.n	8014314 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	68ba      	ldr	r2, [r7, #8]
 8014310:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	2201      	movs	r2, #1
 8014318:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	79fa      	ldrb	r2, [r7, #7]
 8014320:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014322:	68f8      	ldr	r0, [r7, #12]
 8014324:	f001 fda6 	bl	8015e74 <USBD_LL_Init>
 8014328:	4603      	mov	r3, r0
 801432a:	75fb      	strb	r3, [r7, #23]

  return ret;
 801432c:	7dfb      	ldrb	r3, [r7, #23]
}
 801432e:	4618      	mov	r0, r3
 8014330:	3718      	adds	r7, #24
 8014332:	46bd      	mov	sp, r7
 8014334:	bd80      	pop	{r7, pc}
 8014336:	bf00      	nop
 8014338:	0801ac30 	.word	0x0801ac30
 801433c:	0801ac38 	.word	0x0801ac38

08014340 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b084      	sub	sp, #16
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
 8014348:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801434a:	2300      	movs	r3, #0
 801434c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d10a      	bne.n	801436a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8014354:	481a      	ldr	r0, [pc, #104]	@ (80143c0 <USBD_RegisterClass+0x80>)
 8014356:	f002 fcc7 	bl	8016ce8 <iprintf>
 801435a:	481a      	ldr	r0, [pc, #104]	@ (80143c4 <USBD_RegisterClass+0x84>)
 801435c:	f002 fcc4 	bl	8016ce8 <iprintf>
 8014360:	200a      	movs	r0, #10
 8014362:	f002 fcd3 	bl	8016d0c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014366:	2303      	movs	r3, #3
 8014368:	e025      	b.n	80143b6 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	683a      	ldr	r2, [r7, #0]
 801436e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	32ae      	adds	r2, #174	@ 0xae
 801437c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014382:	2b00      	cmp	r3, #0
 8014384:	d00f      	beq.n	80143a6 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	32ae      	adds	r2, #174	@ 0xae
 8014390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014396:	f107 020e 	add.w	r2, r7, #14
 801439a:	4610      	mov	r0, r2
 801439c:	4798      	blx	r3
 801439e:	4602      	mov	r2, r0
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80143ac:	1c5a      	adds	r2, r3, #1
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80143b4:	2300      	movs	r3, #0
}
 80143b6:	4618      	mov	r0, r3
 80143b8:	3710      	adds	r7, #16
 80143ba:	46bd      	mov	sp, r7
 80143bc:	bd80      	pop	{r7, pc}
 80143be:	bf00      	nop
 80143c0:	0801ac30 	.word	0x0801ac30
 80143c4:	0801ac50 	.word	0x0801ac50

080143c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b082      	sub	sp, #8
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80143d0:	6878      	ldr	r0, [r7, #4]
 80143d2:	f001 fdb1 	bl	8015f38 <USBD_LL_Start>
 80143d6:	4603      	mov	r3, r0
}
 80143d8:	4618      	mov	r0, r3
 80143da:	3708      	adds	r7, #8
 80143dc:	46bd      	mov	sp, r7
 80143de:	bd80      	pop	{r7, pc}

080143e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80143e0:	b480      	push	{r7}
 80143e2:	b083      	sub	sp, #12
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80143e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	370c      	adds	r7, #12
 80143ee:	46bd      	mov	sp, r7
 80143f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f4:	4770      	bx	lr

080143f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80143f6:	b580      	push	{r7, lr}
 80143f8:	b084      	sub	sp, #16
 80143fa:	af00      	add	r7, sp, #0
 80143fc:	6078      	str	r0, [r7, #4]
 80143fe:	460b      	mov	r3, r1
 8014400:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014402:	2300      	movs	r3, #0
 8014404:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801440c:	2b00      	cmp	r3, #0
 801440e:	d009      	beq.n	8014424 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	78fa      	ldrb	r2, [r7, #3]
 801441a:	4611      	mov	r1, r2
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	4798      	blx	r3
 8014420:	4603      	mov	r3, r0
 8014422:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014424:	7bfb      	ldrb	r3, [r7, #15]
}
 8014426:	4618      	mov	r0, r3
 8014428:	3710      	adds	r7, #16
 801442a:	46bd      	mov	sp, r7
 801442c:	bd80      	pop	{r7, pc}

0801442e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801442e:	b580      	push	{r7, lr}
 8014430:	b084      	sub	sp, #16
 8014432:	af00      	add	r7, sp, #0
 8014434:	6078      	str	r0, [r7, #4]
 8014436:	460b      	mov	r3, r1
 8014438:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801443a:	2300      	movs	r3, #0
 801443c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014444:	685b      	ldr	r3, [r3, #4]
 8014446:	78fa      	ldrb	r2, [r7, #3]
 8014448:	4611      	mov	r1, r2
 801444a:	6878      	ldr	r0, [r7, #4]
 801444c:	4798      	blx	r3
 801444e:	4603      	mov	r3, r0
 8014450:	2b00      	cmp	r3, #0
 8014452:	d001      	beq.n	8014458 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014454:	2303      	movs	r3, #3
 8014456:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014458:	7bfb      	ldrb	r3, [r7, #15]
}
 801445a:	4618      	mov	r0, r3
 801445c:	3710      	adds	r7, #16
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}

08014462 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014462:	b580      	push	{r7, lr}
 8014464:	b084      	sub	sp, #16
 8014466:	af00      	add	r7, sp, #0
 8014468:	6078      	str	r0, [r7, #4]
 801446a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014472:	6839      	ldr	r1, [r7, #0]
 8014474:	4618      	mov	r0, r3
 8014476:	f001 f8a4 	bl	80155c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	2201      	movs	r2, #1
 801447e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8014488:	461a      	mov	r2, r3
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014496:	f003 031f 	and.w	r3, r3, #31
 801449a:	2b02      	cmp	r3, #2
 801449c:	d01a      	beq.n	80144d4 <USBD_LL_SetupStage+0x72>
 801449e:	2b02      	cmp	r3, #2
 80144a0:	d822      	bhi.n	80144e8 <USBD_LL_SetupStage+0x86>
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d002      	beq.n	80144ac <USBD_LL_SetupStage+0x4a>
 80144a6:	2b01      	cmp	r3, #1
 80144a8:	d00a      	beq.n	80144c0 <USBD_LL_SetupStage+0x5e>
 80144aa:	e01d      	b.n	80144e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80144b2:	4619      	mov	r1, r3
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	f000 fad1 	bl	8014a5c <USBD_StdDevReq>
 80144ba:	4603      	mov	r3, r0
 80144bc:	73fb      	strb	r3, [r7, #15]
      break;
 80144be:	e020      	b.n	8014502 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80144c6:	4619      	mov	r1, r3
 80144c8:	6878      	ldr	r0, [r7, #4]
 80144ca:	f000 fb39 	bl	8014b40 <USBD_StdItfReq>
 80144ce:	4603      	mov	r3, r0
 80144d0:	73fb      	strb	r3, [r7, #15]
      break;
 80144d2:	e016      	b.n	8014502 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80144da:	4619      	mov	r1, r3
 80144dc:	6878      	ldr	r0, [r7, #4]
 80144de:	f000 fb9b 	bl	8014c18 <USBD_StdEPReq>
 80144e2:	4603      	mov	r3, r0
 80144e4:	73fb      	strb	r3, [r7, #15]
      break;
 80144e6:	e00c      	b.n	8014502 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80144ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80144f2:	b2db      	uxtb	r3, r3
 80144f4:	4619      	mov	r1, r3
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f001 fd7e 	bl	8015ff8 <USBD_LL_StallEP>
 80144fc:	4603      	mov	r3, r0
 80144fe:	73fb      	strb	r3, [r7, #15]
      break;
 8014500:	bf00      	nop
  }

  return ret;
 8014502:	7bfb      	ldrb	r3, [r7, #15]
}
 8014504:	4618      	mov	r0, r3
 8014506:	3710      	adds	r7, #16
 8014508:	46bd      	mov	sp, r7
 801450a:	bd80      	pop	{r7, pc}

0801450c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b086      	sub	sp, #24
 8014510:	af00      	add	r7, sp, #0
 8014512:	60f8      	str	r0, [r7, #12]
 8014514:	460b      	mov	r3, r1
 8014516:	607a      	str	r2, [r7, #4]
 8014518:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801451a:	2300      	movs	r3, #0
 801451c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801451e:	7afb      	ldrb	r3, [r7, #11]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d16e      	bne.n	8014602 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801452a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014532:	2b03      	cmp	r3, #3
 8014534:	f040 8098 	bne.w	8014668 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014538:	693b      	ldr	r3, [r7, #16]
 801453a:	689a      	ldr	r2, [r3, #8]
 801453c:	693b      	ldr	r3, [r7, #16]
 801453e:	68db      	ldr	r3, [r3, #12]
 8014540:	429a      	cmp	r2, r3
 8014542:	d913      	bls.n	801456c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014544:	693b      	ldr	r3, [r7, #16]
 8014546:	689a      	ldr	r2, [r3, #8]
 8014548:	693b      	ldr	r3, [r7, #16]
 801454a:	68db      	ldr	r3, [r3, #12]
 801454c:	1ad2      	subs	r2, r2, r3
 801454e:	693b      	ldr	r3, [r7, #16]
 8014550:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014552:	693b      	ldr	r3, [r7, #16]
 8014554:	68da      	ldr	r2, [r3, #12]
 8014556:	693b      	ldr	r3, [r7, #16]
 8014558:	689b      	ldr	r3, [r3, #8]
 801455a:	4293      	cmp	r3, r2
 801455c:	bf28      	it	cs
 801455e:	4613      	movcs	r3, r2
 8014560:	461a      	mov	r2, r3
 8014562:	6879      	ldr	r1, [r7, #4]
 8014564:	68f8      	ldr	r0, [r7, #12]
 8014566:	f001 f92c 	bl	80157c2 <USBD_CtlContinueRx>
 801456a:	e07d      	b.n	8014668 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014572:	f003 031f 	and.w	r3, r3, #31
 8014576:	2b02      	cmp	r3, #2
 8014578:	d014      	beq.n	80145a4 <USBD_LL_DataOutStage+0x98>
 801457a:	2b02      	cmp	r3, #2
 801457c:	d81d      	bhi.n	80145ba <USBD_LL_DataOutStage+0xae>
 801457e:	2b00      	cmp	r3, #0
 8014580:	d002      	beq.n	8014588 <USBD_LL_DataOutStage+0x7c>
 8014582:	2b01      	cmp	r3, #1
 8014584:	d003      	beq.n	801458e <USBD_LL_DataOutStage+0x82>
 8014586:	e018      	b.n	80145ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014588:	2300      	movs	r3, #0
 801458a:	75bb      	strb	r3, [r7, #22]
            break;
 801458c:	e018      	b.n	80145c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8014594:	b2db      	uxtb	r3, r3
 8014596:	4619      	mov	r1, r3
 8014598:	68f8      	ldr	r0, [r7, #12]
 801459a:	f000 f9d2 	bl	8014942 <USBD_CoreFindIF>
 801459e:	4603      	mov	r3, r0
 80145a0:	75bb      	strb	r3, [r7, #22]
            break;
 80145a2:	e00d      	b.n	80145c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80145aa:	b2db      	uxtb	r3, r3
 80145ac:	4619      	mov	r1, r3
 80145ae:	68f8      	ldr	r0, [r7, #12]
 80145b0:	f000 f9d4 	bl	801495c <USBD_CoreFindEP>
 80145b4:	4603      	mov	r3, r0
 80145b6:	75bb      	strb	r3, [r7, #22]
            break;
 80145b8:	e002      	b.n	80145c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80145ba:	2300      	movs	r3, #0
 80145bc:	75bb      	strb	r3, [r7, #22]
            break;
 80145be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80145c0:	7dbb      	ldrb	r3, [r7, #22]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d119      	bne.n	80145fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80145cc:	b2db      	uxtb	r3, r3
 80145ce:	2b03      	cmp	r3, #3
 80145d0:	d113      	bne.n	80145fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80145d2:	7dba      	ldrb	r2, [r7, #22]
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	32ae      	adds	r2, #174	@ 0xae
 80145d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145dc:	691b      	ldr	r3, [r3, #16]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d00b      	beq.n	80145fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80145e2:	7dba      	ldrb	r2, [r7, #22]
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80145ea:	7dba      	ldrb	r2, [r7, #22]
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	32ae      	adds	r2, #174	@ 0xae
 80145f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145f4:	691b      	ldr	r3, [r3, #16]
 80145f6:	68f8      	ldr	r0, [r7, #12]
 80145f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80145fa:	68f8      	ldr	r0, [r7, #12]
 80145fc:	f001 f8f2 	bl	80157e4 <USBD_CtlSendStatus>
 8014600:	e032      	b.n	8014668 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014602:	7afb      	ldrb	r3, [r7, #11]
 8014604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014608:	b2db      	uxtb	r3, r3
 801460a:	4619      	mov	r1, r3
 801460c:	68f8      	ldr	r0, [r7, #12]
 801460e:	f000 f9a5 	bl	801495c <USBD_CoreFindEP>
 8014612:	4603      	mov	r3, r0
 8014614:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014616:	7dbb      	ldrb	r3, [r7, #22]
 8014618:	2bff      	cmp	r3, #255	@ 0xff
 801461a:	d025      	beq.n	8014668 <USBD_LL_DataOutStage+0x15c>
 801461c:	7dbb      	ldrb	r3, [r7, #22]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d122      	bne.n	8014668 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014628:	b2db      	uxtb	r3, r3
 801462a:	2b03      	cmp	r3, #3
 801462c:	d117      	bne.n	801465e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801462e:	7dba      	ldrb	r2, [r7, #22]
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	32ae      	adds	r2, #174	@ 0xae
 8014634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014638:	699b      	ldr	r3, [r3, #24]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d00f      	beq.n	801465e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801463e:	7dba      	ldrb	r2, [r7, #22]
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014646:	7dba      	ldrb	r2, [r7, #22]
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	32ae      	adds	r2, #174	@ 0xae
 801464c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014650:	699b      	ldr	r3, [r3, #24]
 8014652:	7afa      	ldrb	r2, [r7, #11]
 8014654:	4611      	mov	r1, r2
 8014656:	68f8      	ldr	r0, [r7, #12]
 8014658:	4798      	blx	r3
 801465a:	4603      	mov	r3, r0
 801465c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801465e:	7dfb      	ldrb	r3, [r7, #23]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d001      	beq.n	8014668 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014664:	7dfb      	ldrb	r3, [r7, #23]
 8014666:	e000      	b.n	801466a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014668:	2300      	movs	r3, #0
}
 801466a:	4618      	mov	r0, r3
 801466c:	3718      	adds	r7, #24
 801466e:	46bd      	mov	sp, r7
 8014670:	bd80      	pop	{r7, pc}

08014672 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014672:	b580      	push	{r7, lr}
 8014674:	b086      	sub	sp, #24
 8014676:	af00      	add	r7, sp, #0
 8014678:	60f8      	str	r0, [r7, #12]
 801467a:	460b      	mov	r3, r1
 801467c:	607a      	str	r2, [r7, #4]
 801467e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014680:	7afb      	ldrb	r3, [r7, #11]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d16f      	bne.n	8014766 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	3314      	adds	r3, #20
 801468a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014692:	2b02      	cmp	r3, #2
 8014694:	d15a      	bne.n	801474c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014696:	693b      	ldr	r3, [r7, #16]
 8014698:	689a      	ldr	r2, [r3, #8]
 801469a:	693b      	ldr	r3, [r7, #16]
 801469c:	68db      	ldr	r3, [r3, #12]
 801469e:	429a      	cmp	r2, r3
 80146a0:	d914      	bls.n	80146cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80146a2:	693b      	ldr	r3, [r7, #16]
 80146a4:	689a      	ldr	r2, [r3, #8]
 80146a6:	693b      	ldr	r3, [r7, #16]
 80146a8:	68db      	ldr	r3, [r3, #12]
 80146aa:	1ad2      	subs	r2, r2, r3
 80146ac:	693b      	ldr	r3, [r7, #16]
 80146ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80146b0:	693b      	ldr	r3, [r7, #16]
 80146b2:	689b      	ldr	r3, [r3, #8]
 80146b4:	461a      	mov	r2, r3
 80146b6:	6879      	ldr	r1, [r7, #4]
 80146b8:	68f8      	ldr	r0, [r7, #12]
 80146ba:	f001 f854 	bl	8015766 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80146be:	2300      	movs	r3, #0
 80146c0:	2200      	movs	r2, #0
 80146c2:	2100      	movs	r1, #0
 80146c4:	68f8      	ldr	r0, [r7, #12]
 80146c6:	f001 fd41 	bl	801614c <USBD_LL_PrepareReceive>
 80146ca:	e03f      	b.n	801474c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80146cc:	693b      	ldr	r3, [r7, #16]
 80146ce:	68da      	ldr	r2, [r3, #12]
 80146d0:	693b      	ldr	r3, [r7, #16]
 80146d2:	689b      	ldr	r3, [r3, #8]
 80146d4:	429a      	cmp	r2, r3
 80146d6:	d11c      	bne.n	8014712 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80146d8:	693b      	ldr	r3, [r7, #16]
 80146da:	685a      	ldr	r2, [r3, #4]
 80146dc:	693b      	ldr	r3, [r7, #16]
 80146de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d316      	bcc.n	8014712 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80146e4:	693b      	ldr	r3, [r7, #16]
 80146e6:	685a      	ldr	r2, [r3, #4]
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80146ee:	429a      	cmp	r2, r3
 80146f0:	d20f      	bcs.n	8014712 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80146f2:	2200      	movs	r2, #0
 80146f4:	2100      	movs	r1, #0
 80146f6:	68f8      	ldr	r0, [r7, #12]
 80146f8:	f001 f835 	bl	8015766 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	2200      	movs	r2, #0
 8014700:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014704:	2300      	movs	r3, #0
 8014706:	2200      	movs	r2, #0
 8014708:	2100      	movs	r1, #0
 801470a:	68f8      	ldr	r0, [r7, #12]
 801470c:	f001 fd1e 	bl	801614c <USBD_LL_PrepareReceive>
 8014710:	e01c      	b.n	801474c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014718:	b2db      	uxtb	r3, r3
 801471a:	2b03      	cmp	r3, #3
 801471c:	d10f      	bne.n	801473e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014724:	68db      	ldr	r3, [r3, #12]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d009      	beq.n	801473e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	2200      	movs	r2, #0
 801472e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014738:	68db      	ldr	r3, [r3, #12]
 801473a:	68f8      	ldr	r0, [r7, #12]
 801473c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801473e:	2180      	movs	r1, #128	@ 0x80
 8014740:	68f8      	ldr	r0, [r7, #12]
 8014742:	f001 fc59 	bl	8015ff8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014746:	68f8      	ldr	r0, [r7, #12]
 8014748:	f001 f85f 	bl	801580a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8014752:	2b00      	cmp	r3, #0
 8014754:	d03a      	beq.n	80147cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014756:	68f8      	ldr	r0, [r7, #12]
 8014758:	f7ff fe42 	bl	80143e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	2200      	movs	r2, #0
 8014760:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8014764:	e032      	b.n	80147cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014766:	7afb      	ldrb	r3, [r7, #11]
 8014768:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801476c:	b2db      	uxtb	r3, r3
 801476e:	4619      	mov	r1, r3
 8014770:	68f8      	ldr	r0, [r7, #12]
 8014772:	f000 f8f3 	bl	801495c <USBD_CoreFindEP>
 8014776:	4603      	mov	r3, r0
 8014778:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801477a:	7dfb      	ldrb	r3, [r7, #23]
 801477c:	2bff      	cmp	r3, #255	@ 0xff
 801477e:	d025      	beq.n	80147cc <USBD_LL_DataInStage+0x15a>
 8014780:	7dfb      	ldrb	r3, [r7, #23]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d122      	bne.n	80147cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801478c:	b2db      	uxtb	r3, r3
 801478e:	2b03      	cmp	r3, #3
 8014790:	d11c      	bne.n	80147cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014792:	7dfa      	ldrb	r2, [r7, #23]
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	32ae      	adds	r2, #174	@ 0xae
 8014798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801479c:	695b      	ldr	r3, [r3, #20]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d014      	beq.n	80147cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80147a2:	7dfa      	ldrb	r2, [r7, #23]
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80147aa:	7dfa      	ldrb	r2, [r7, #23]
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	32ae      	adds	r2, #174	@ 0xae
 80147b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147b4:	695b      	ldr	r3, [r3, #20]
 80147b6:	7afa      	ldrb	r2, [r7, #11]
 80147b8:	4611      	mov	r1, r2
 80147ba:	68f8      	ldr	r0, [r7, #12]
 80147bc:	4798      	blx	r3
 80147be:	4603      	mov	r3, r0
 80147c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80147c2:	7dbb      	ldrb	r3, [r7, #22]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d001      	beq.n	80147cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80147c8:	7dbb      	ldrb	r3, [r7, #22]
 80147ca:	e000      	b.n	80147ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80147cc:	2300      	movs	r3, #0
}
 80147ce:	4618      	mov	r0, r3
 80147d0:	3718      	adds	r7, #24
 80147d2:	46bd      	mov	sp, r7
 80147d4:	bd80      	pop	{r7, pc}

080147d6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80147d6:	b580      	push	{r7, lr}
 80147d8:	b084      	sub	sp, #16
 80147da:	af00      	add	r7, sp, #0
 80147dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80147de:	2300      	movs	r3, #0
 80147e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	2201      	movs	r2, #1
 80147e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	2200      	movs	r2, #0
 80147ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	2200      	movs	r2, #0
 80147f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	2200      	movs	r2, #0
 80147fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2200      	movs	r2, #0
 8014804:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801480e:	2b00      	cmp	r3, #0
 8014810:	d014      	beq.n	801483c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014818:	685b      	ldr	r3, [r3, #4]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d00e      	beq.n	801483c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014824:	685b      	ldr	r3, [r3, #4]
 8014826:	687a      	ldr	r2, [r7, #4]
 8014828:	6852      	ldr	r2, [r2, #4]
 801482a:	b2d2      	uxtb	r2, r2
 801482c:	4611      	mov	r1, r2
 801482e:	6878      	ldr	r0, [r7, #4]
 8014830:	4798      	blx	r3
 8014832:	4603      	mov	r3, r0
 8014834:	2b00      	cmp	r3, #0
 8014836:	d001      	beq.n	801483c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014838:	2303      	movs	r3, #3
 801483a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801483c:	2340      	movs	r3, #64	@ 0x40
 801483e:	2200      	movs	r2, #0
 8014840:	2100      	movs	r1, #0
 8014842:	6878      	ldr	r0, [r7, #4]
 8014844:	f001 fb93 	bl	8015f6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	2201      	movs	r2, #1
 801484c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	2240      	movs	r2, #64	@ 0x40
 8014854:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014858:	2340      	movs	r3, #64	@ 0x40
 801485a:	2200      	movs	r2, #0
 801485c:	2180      	movs	r1, #128	@ 0x80
 801485e:	6878      	ldr	r0, [r7, #4]
 8014860:	f001 fb85 	bl	8015f6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2201      	movs	r2, #1
 8014868:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2240      	movs	r2, #64	@ 0x40
 801486e:	621a      	str	r2, [r3, #32]

  return ret;
 8014870:	7bfb      	ldrb	r3, [r7, #15]
}
 8014872:	4618      	mov	r0, r3
 8014874:	3710      	adds	r7, #16
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}

0801487a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801487a:	b480      	push	{r7}
 801487c:	b083      	sub	sp, #12
 801487e:	af00      	add	r7, sp, #0
 8014880:	6078      	str	r0, [r7, #4]
 8014882:	460b      	mov	r3, r1
 8014884:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	78fa      	ldrb	r2, [r7, #3]
 801488a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801488c:	2300      	movs	r3, #0
}
 801488e:	4618      	mov	r0, r3
 8014890:	370c      	adds	r7, #12
 8014892:	46bd      	mov	sp, r7
 8014894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014898:	4770      	bx	lr

0801489a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801489a:	b480      	push	{r7}
 801489c:	b083      	sub	sp, #12
 801489e:	af00      	add	r7, sp, #0
 80148a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80148a8:	b2db      	uxtb	r3, r3
 80148aa:	2b04      	cmp	r3, #4
 80148ac:	d006      	beq.n	80148bc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80148b4:	b2da      	uxtb	r2, r3
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2204      	movs	r2, #4
 80148c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80148c4:	2300      	movs	r3, #0
}
 80148c6:	4618      	mov	r0, r3
 80148c8:	370c      	adds	r7, #12
 80148ca:	46bd      	mov	sp, r7
 80148cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d0:	4770      	bx	lr

080148d2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80148d2:	b480      	push	{r7}
 80148d4:	b083      	sub	sp, #12
 80148d6:	af00      	add	r7, sp, #0
 80148d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80148e0:	b2db      	uxtb	r3, r3
 80148e2:	2b04      	cmp	r3, #4
 80148e4:	d106      	bne.n	80148f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80148ec:	b2da      	uxtb	r2, r3
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80148f4:	2300      	movs	r3, #0
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	370c      	adds	r7, #12
 80148fa:	46bd      	mov	sp, r7
 80148fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014900:	4770      	bx	lr

08014902 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014902:	b580      	push	{r7, lr}
 8014904:	b082      	sub	sp, #8
 8014906:	af00      	add	r7, sp, #0
 8014908:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014910:	b2db      	uxtb	r3, r3
 8014912:	2b03      	cmp	r3, #3
 8014914:	d110      	bne.n	8014938 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801491c:	2b00      	cmp	r3, #0
 801491e:	d00b      	beq.n	8014938 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014926:	69db      	ldr	r3, [r3, #28]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d005      	beq.n	8014938 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014932:	69db      	ldr	r3, [r3, #28]
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8014938:	2300      	movs	r3, #0
}
 801493a:	4618      	mov	r0, r3
 801493c:	3708      	adds	r7, #8
 801493e:	46bd      	mov	sp, r7
 8014940:	bd80      	pop	{r7, pc}

08014942 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014942:	b480      	push	{r7}
 8014944:	b083      	sub	sp, #12
 8014946:	af00      	add	r7, sp, #0
 8014948:	6078      	str	r0, [r7, #4]
 801494a:	460b      	mov	r3, r1
 801494c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801494e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014950:	4618      	mov	r0, r3
 8014952:	370c      	adds	r7, #12
 8014954:	46bd      	mov	sp, r7
 8014956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495a:	4770      	bx	lr

0801495c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801495c:	b480      	push	{r7}
 801495e:	b083      	sub	sp, #12
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
 8014964:	460b      	mov	r3, r1
 8014966:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014968:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801496a:	4618      	mov	r0, r3
 801496c:	370c      	adds	r7, #12
 801496e:	46bd      	mov	sp, r7
 8014970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014974:	4770      	bx	lr

08014976 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8014976:	b580      	push	{r7, lr}
 8014978:	b086      	sub	sp, #24
 801497a:	af00      	add	r7, sp, #0
 801497c:	6078      	str	r0, [r7, #4]
 801497e:	460b      	mov	r3, r1
 8014980:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801498a:	2300      	movs	r3, #0
 801498c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	885b      	ldrh	r3, [r3, #2]
 8014992:	b29b      	uxth	r3, r3
 8014994:	68fa      	ldr	r2, [r7, #12]
 8014996:	7812      	ldrb	r2, [r2, #0]
 8014998:	4293      	cmp	r3, r2
 801499a:	d91f      	bls.n	80149dc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	781b      	ldrb	r3, [r3, #0]
 80149a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80149a2:	e013      	b.n	80149cc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80149a4:	f107 030a 	add.w	r3, r7, #10
 80149a8:	4619      	mov	r1, r3
 80149aa:	6978      	ldr	r0, [r7, #20]
 80149ac:	f000 f81b 	bl	80149e6 <USBD_GetNextDesc>
 80149b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80149b2:	697b      	ldr	r3, [r7, #20]
 80149b4:	785b      	ldrb	r3, [r3, #1]
 80149b6:	2b05      	cmp	r3, #5
 80149b8:	d108      	bne.n	80149cc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80149ba:	697b      	ldr	r3, [r7, #20]
 80149bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80149be:	693b      	ldr	r3, [r7, #16]
 80149c0:	789b      	ldrb	r3, [r3, #2]
 80149c2:	78fa      	ldrb	r2, [r7, #3]
 80149c4:	429a      	cmp	r2, r3
 80149c6:	d008      	beq.n	80149da <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80149c8:	2300      	movs	r3, #0
 80149ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	885b      	ldrh	r3, [r3, #2]
 80149d0:	b29a      	uxth	r2, r3
 80149d2:	897b      	ldrh	r3, [r7, #10]
 80149d4:	429a      	cmp	r2, r3
 80149d6:	d8e5      	bhi.n	80149a4 <USBD_GetEpDesc+0x2e>
 80149d8:	e000      	b.n	80149dc <USBD_GetEpDesc+0x66>
          break;
 80149da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80149dc:	693b      	ldr	r3, [r7, #16]
}
 80149de:	4618      	mov	r0, r3
 80149e0:	3718      	adds	r7, #24
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}

080149e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80149e6:	b480      	push	{r7}
 80149e8:	b085      	sub	sp, #20
 80149ea:	af00      	add	r7, sp, #0
 80149ec:	6078      	str	r0, [r7, #4]
 80149ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	881b      	ldrh	r3, [r3, #0]
 80149f8:	68fa      	ldr	r2, [r7, #12]
 80149fa:	7812      	ldrb	r2, [r2, #0]
 80149fc:	4413      	add	r3, r2
 80149fe:	b29a      	uxth	r2, r3
 8014a00:	683b      	ldr	r3, [r7, #0]
 8014a02:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	781b      	ldrb	r3, [r3, #0]
 8014a08:	461a      	mov	r2, r3
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	4413      	add	r3, r2
 8014a0e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014a10:	68fb      	ldr	r3, [r7, #12]
}
 8014a12:	4618      	mov	r0, r3
 8014a14:	3714      	adds	r7, #20
 8014a16:	46bd      	mov	sp, r7
 8014a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1c:	4770      	bx	lr

08014a1e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014a1e:	b480      	push	{r7}
 8014a20:	b087      	sub	sp, #28
 8014a22:	af00      	add	r7, sp, #0
 8014a24:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014a2a:	697b      	ldr	r3, [r7, #20]
 8014a2c:	781b      	ldrb	r3, [r3, #0]
 8014a2e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014a30:	697b      	ldr	r3, [r7, #20]
 8014a32:	3301      	adds	r3, #1
 8014a34:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014a36:	697b      	ldr	r3, [r7, #20]
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014a3c:	8a3b      	ldrh	r3, [r7, #16]
 8014a3e:	021b      	lsls	r3, r3, #8
 8014a40:	b21a      	sxth	r2, r3
 8014a42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014a46:	4313      	orrs	r3, r2
 8014a48:	b21b      	sxth	r3, r3
 8014a4a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014a4c:	89fb      	ldrh	r3, [r7, #14]
}
 8014a4e:	4618      	mov	r0, r3
 8014a50:	371c      	adds	r7, #28
 8014a52:	46bd      	mov	sp, r7
 8014a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a58:	4770      	bx	lr
	...

08014a5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b084      	sub	sp, #16
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
 8014a64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a66:	2300      	movs	r3, #0
 8014a68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014a6a:	683b      	ldr	r3, [r7, #0]
 8014a6c:	781b      	ldrb	r3, [r3, #0]
 8014a6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014a72:	2b40      	cmp	r3, #64	@ 0x40
 8014a74:	d005      	beq.n	8014a82 <USBD_StdDevReq+0x26>
 8014a76:	2b40      	cmp	r3, #64	@ 0x40
 8014a78:	d857      	bhi.n	8014b2a <USBD_StdDevReq+0xce>
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d00f      	beq.n	8014a9e <USBD_StdDevReq+0x42>
 8014a7e:	2b20      	cmp	r3, #32
 8014a80:	d153      	bne.n	8014b2a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	32ae      	adds	r2, #174	@ 0xae
 8014a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a90:	689b      	ldr	r3, [r3, #8]
 8014a92:	6839      	ldr	r1, [r7, #0]
 8014a94:	6878      	ldr	r0, [r7, #4]
 8014a96:	4798      	blx	r3
 8014a98:	4603      	mov	r3, r0
 8014a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8014a9c:	e04a      	b.n	8014b34 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	785b      	ldrb	r3, [r3, #1]
 8014aa2:	2b09      	cmp	r3, #9
 8014aa4:	d83b      	bhi.n	8014b1e <USBD_StdDevReq+0xc2>
 8014aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8014aac <USBD_StdDevReq+0x50>)
 8014aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014aac:	08014b01 	.word	0x08014b01
 8014ab0:	08014b15 	.word	0x08014b15
 8014ab4:	08014b1f 	.word	0x08014b1f
 8014ab8:	08014b0b 	.word	0x08014b0b
 8014abc:	08014b1f 	.word	0x08014b1f
 8014ac0:	08014adf 	.word	0x08014adf
 8014ac4:	08014ad5 	.word	0x08014ad5
 8014ac8:	08014b1f 	.word	0x08014b1f
 8014acc:	08014af7 	.word	0x08014af7
 8014ad0:	08014ae9 	.word	0x08014ae9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014ad4:	6839      	ldr	r1, [r7, #0]
 8014ad6:	6878      	ldr	r0, [r7, #4]
 8014ad8:	f000 fa3c 	bl	8014f54 <USBD_GetDescriptor>
          break;
 8014adc:	e024      	b.n	8014b28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014ade:	6839      	ldr	r1, [r7, #0]
 8014ae0:	6878      	ldr	r0, [r7, #4]
 8014ae2:	f000 fbcb 	bl	801527c <USBD_SetAddress>
          break;
 8014ae6:	e01f      	b.n	8014b28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014ae8:	6839      	ldr	r1, [r7, #0]
 8014aea:	6878      	ldr	r0, [r7, #4]
 8014aec:	f000 fc0a 	bl	8015304 <USBD_SetConfig>
 8014af0:	4603      	mov	r3, r0
 8014af2:	73fb      	strb	r3, [r7, #15]
          break;
 8014af4:	e018      	b.n	8014b28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014af6:	6839      	ldr	r1, [r7, #0]
 8014af8:	6878      	ldr	r0, [r7, #4]
 8014afa:	f000 fcad 	bl	8015458 <USBD_GetConfig>
          break;
 8014afe:	e013      	b.n	8014b28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014b00:	6839      	ldr	r1, [r7, #0]
 8014b02:	6878      	ldr	r0, [r7, #4]
 8014b04:	f000 fcde 	bl	80154c4 <USBD_GetStatus>
          break;
 8014b08:	e00e      	b.n	8014b28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014b0a:	6839      	ldr	r1, [r7, #0]
 8014b0c:	6878      	ldr	r0, [r7, #4]
 8014b0e:	f000 fd0d 	bl	801552c <USBD_SetFeature>
          break;
 8014b12:	e009      	b.n	8014b28 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014b14:	6839      	ldr	r1, [r7, #0]
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f000 fd31 	bl	801557e <USBD_ClrFeature>
          break;
 8014b1c:	e004      	b.n	8014b28 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8014b1e:	6839      	ldr	r1, [r7, #0]
 8014b20:	6878      	ldr	r0, [r7, #4]
 8014b22:	f000 fd88 	bl	8015636 <USBD_CtlError>
          break;
 8014b26:	bf00      	nop
      }
      break;
 8014b28:	e004      	b.n	8014b34 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014b2a:	6839      	ldr	r1, [r7, #0]
 8014b2c:	6878      	ldr	r0, [r7, #4]
 8014b2e:	f000 fd82 	bl	8015636 <USBD_CtlError>
      break;
 8014b32:	bf00      	nop
  }

  return ret;
 8014b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b36:	4618      	mov	r0, r3
 8014b38:	3710      	adds	r7, #16
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}
 8014b3e:	bf00      	nop

08014b40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b084      	sub	sp, #16
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
 8014b48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014b56:	2b40      	cmp	r3, #64	@ 0x40
 8014b58:	d005      	beq.n	8014b66 <USBD_StdItfReq+0x26>
 8014b5a:	2b40      	cmp	r3, #64	@ 0x40
 8014b5c:	d852      	bhi.n	8014c04 <USBD_StdItfReq+0xc4>
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d001      	beq.n	8014b66 <USBD_StdItfReq+0x26>
 8014b62:	2b20      	cmp	r3, #32
 8014b64:	d14e      	bne.n	8014c04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014b6c:	b2db      	uxtb	r3, r3
 8014b6e:	3b01      	subs	r3, #1
 8014b70:	2b02      	cmp	r3, #2
 8014b72:	d840      	bhi.n	8014bf6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	889b      	ldrh	r3, [r3, #4]
 8014b78:	b2db      	uxtb	r3, r3
 8014b7a:	2b01      	cmp	r3, #1
 8014b7c:	d836      	bhi.n	8014bec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	889b      	ldrh	r3, [r3, #4]
 8014b82:	b2db      	uxtb	r3, r3
 8014b84:	4619      	mov	r1, r3
 8014b86:	6878      	ldr	r0, [r7, #4]
 8014b88:	f7ff fedb 	bl	8014942 <USBD_CoreFindIF>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014b90:	7bbb      	ldrb	r3, [r7, #14]
 8014b92:	2bff      	cmp	r3, #255	@ 0xff
 8014b94:	d01d      	beq.n	8014bd2 <USBD_StdItfReq+0x92>
 8014b96:	7bbb      	ldrb	r3, [r7, #14]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d11a      	bne.n	8014bd2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014b9c:	7bba      	ldrb	r2, [r7, #14]
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	32ae      	adds	r2, #174	@ 0xae
 8014ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ba6:	689b      	ldr	r3, [r3, #8]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d00f      	beq.n	8014bcc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014bac:	7bba      	ldrb	r2, [r7, #14]
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014bb4:	7bba      	ldrb	r2, [r7, #14]
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	32ae      	adds	r2, #174	@ 0xae
 8014bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bbe:	689b      	ldr	r3, [r3, #8]
 8014bc0:	6839      	ldr	r1, [r7, #0]
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	4798      	blx	r3
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014bca:	e004      	b.n	8014bd6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014bcc:	2303      	movs	r3, #3
 8014bce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014bd0:	e001      	b.n	8014bd6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014bd2:	2303      	movs	r3, #3
 8014bd4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014bd6:	683b      	ldr	r3, [r7, #0]
 8014bd8:	88db      	ldrh	r3, [r3, #6]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d110      	bne.n	8014c00 <USBD_StdItfReq+0xc0>
 8014bde:	7bfb      	ldrb	r3, [r7, #15]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d10d      	bne.n	8014c00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014be4:	6878      	ldr	r0, [r7, #4]
 8014be6:	f000 fdfd 	bl	80157e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014bea:	e009      	b.n	8014c00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014bec:	6839      	ldr	r1, [r7, #0]
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	f000 fd21 	bl	8015636 <USBD_CtlError>
          break;
 8014bf4:	e004      	b.n	8014c00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014bf6:	6839      	ldr	r1, [r7, #0]
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f000 fd1c 	bl	8015636 <USBD_CtlError>
          break;
 8014bfe:	e000      	b.n	8014c02 <USBD_StdItfReq+0xc2>
          break;
 8014c00:	bf00      	nop
      }
      break;
 8014c02:	e004      	b.n	8014c0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014c04:	6839      	ldr	r1, [r7, #0]
 8014c06:	6878      	ldr	r0, [r7, #4]
 8014c08:	f000 fd15 	bl	8015636 <USBD_CtlError>
      break;
 8014c0c:	bf00      	nop
  }

  return ret;
 8014c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c10:	4618      	mov	r0, r3
 8014c12:	3710      	adds	r7, #16
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}

08014c18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b084      	sub	sp, #16
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
 8014c20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014c22:	2300      	movs	r3, #0
 8014c24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014c26:	683b      	ldr	r3, [r7, #0]
 8014c28:	889b      	ldrh	r3, [r3, #4]
 8014c2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014c2c:	683b      	ldr	r3, [r7, #0]
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014c34:	2b40      	cmp	r3, #64	@ 0x40
 8014c36:	d007      	beq.n	8014c48 <USBD_StdEPReq+0x30>
 8014c38:	2b40      	cmp	r3, #64	@ 0x40
 8014c3a:	f200 817f 	bhi.w	8014f3c <USBD_StdEPReq+0x324>
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d02a      	beq.n	8014c98 <USBD_StdEPReq+0x80>
 8014c42:	2b20      	cmp	r3, #32
 8014c44:	f040 817a 	bne.w	8014f3c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014c48:	7bbb      	ldrb	r3, [r7, #14]
 8014c4a:	4619      	mov	r1, r3
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	f7ff fe85 	bl	801495c <USBD_CoreFindEP>
 8014c52:	4603      	mov	r3, r0
 8014c54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014c56:	7b7b      	ldrb	r3, [r7, #13]
 8014c58:	2bff      	cmp	r3, #255	@ 0xff
 8014c5a:	f000 8174 	beq.w	8014f46 <USBD_StdEPReq+0x32e>
 8014c5e:	7b7b      	ldrb	r3, [r7, #13]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	f040 8170 	bne.w	8014f46 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014c66:	7b7a      	ldrb	r2, [r7, #13]
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014c6e:	7b7a      	ldrb	r2, [r7, #13]
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	32ae      	adds	r2, #174	@ 0xae
 8014c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c78:	689b      	ldr	r3, [r3, #8]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	f000 8163 	beq.w	8014f46 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014c80:	7b7a      	ldrb	r2, [r7, #13]
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	32ae      	adds	r2, #174	@ 0xae
 8014c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c8a:	689b      	ldr	r3, [r3, #8]
 8014c8c:	6839      	ldr	r1, [r7, #0]
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	4798      	blx	r3
 8014c92:	4603      	mov	r3, r0
 8014c94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014c96:	e156      	b.n	8014f46 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014c98:	683b      	ldr	r3, [r7, #0]
 8014c9a:	785b      	ldrb	r3, [r3, #1]
 8014c9c:	2b03      	cmp	r3, #3
 8014c9e:	d008      	beq.n	8014cb2 <USBD_StdEPReq+0x9a>
 8014ca0:	2b03      	cmp	r3, #3
 8014ca2:	f300 8145 	bgt.w	8014f30 <USBD_StdEPReq+0x318>
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	f000 809b 	beq.w	8014de2 <USBD_StdEPReq+0x1ca>
 8014cac:	2b01      	cmp	r3, #1
 8014cae:	d03c      	beq.n	8014d2a <USBD_StdEPReq+0x112>
 8014cb0:	e13e      	b.n	8014f30 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014cb8:	b2db      	uxtb	r3, r3
 8014cba:	2b02      	cmp	r3, #2
 8014cbc:	d002      	beq.n	8014cc4 <USBD_StdEPReq+0xac>
 8014cbe:	2b03      	cmp	r3, #3
 8014cc0:	d016      	beq.n	8014cf0 <USBD_StdEPReq+0xd8>
 8014cc2:	e02c      	b.n	8014d1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014cc4:	7bbb      	ldrb	r3, [r7, #14]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d00d      	beq.n	8014ce6 <USBD_StdEPReq+0xce>
 8014cca:	7bbb      	ldrb	r3, [r7, #14]
 8014ccc:	2b80      	cmp	r3, #128	@ 0x80
 8014cce:	d00a      	beq.n	8014ce6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014cd0:	7bbb      	ldrb	r3, [r7, #14]
 8014cd2:	4619      	mov	r1, r3
 8014cd4:	6878      	ldr	r0, [r7, #4]
 8014cd6:	f001 f98f 	bl	8015ff8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014cda:	2180      	movs	r1, #128	@ 0x80
 8014cdc:	6878      	ldr	r0, [r7, #4]
 8014cde:	f001 f98b 	bl	8015ff8 <USBD_LL_StallEP>
 8014ce2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014ce4:	e020      	b.n	8014d28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014ce6:	6839      	ldr	r1, [r7, #0]
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f000 fca4 	bl	8015636 <USBD_CtlError>
              break;
 8014cee:	e01b      	b.n	8014d28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	885b      	ldrh	r3, [r3, #2]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d10e      	bne.n	8014d16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014cf8:	7bbb      	ldrb	r3, [r7, #14]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d00b      	beq.n	8014d16 <USBD_StdEPReq+0xfe>
 8014cfe:	7bbb      	ldrb	r3, [r7, #14]
 8014d00:	2b80      	cmp	r3, #128	@ 0x80
 8014d02:	d008      	beq.n	8014d16 <USBD_StdEPReq+0xfe>
 8014d04:	683b      	ldr	r3, [r7, #0]
 8014d06:	88db      	ldrh	r3, [r3, #6]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d104      	bne.n	8014d16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014d0c:	7bbb      	ldrb	r3, [r7, #14]
 8014d0e:	4619      	mov	r1, r3
 8014d10:	6878      	ldr	r0, [r7, #4]
 8014d12:	f001 f971 	bl	8015ff8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	f000 fd64 	bl	80157e4 <USBD_CtlSendStatus>

              break;
 8014d1c:	e004      	b.n	8014d28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014d1e:	6839      	ldr	r1, [r7, #0]
 8014d20:	6878      	ldr	r0, [r7, #4]
 8014d22:	f000 fc88 	bl	8015636 <USBD_CtlError>
              break;
 8014d26:	bf00      	nop
          }
          break;
 8014d28:	e107      	b.n	8014f3a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014d30:	b2db      	uxtb	r3, r3
 8014d32:	2b02      	cmp	r3, #2
 8014d34:	d002      	beq.n	8014d3c <USBD_StdEPReq+0x124>
 8014d36:	2b03      	cmp	r3, #3
 8014d38:	d016      	beq.n	8014d68 <USBD_StdEPReq+0x150>
 8014d3a:	e04b      	b.n	8014dd4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014d3c:	7bbb      	ldrb	r3, [r7, #14]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d00d      	beq.n	8014d5e <USBD_StdEPReq+0x146>
 8014d42:	7bbb      	ldrb	r3, [r7, #14]
 8014d44:	2b80      	cmp	r3, #128	@ 0x80
 8014d46:	d00a      	beq.n	8014d5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014d48:	7bbb      	ldrb	r3, [r7, #14]
 8014d4a:	4619      	mov	r1, r3
 8014d4c:	6878      	ldr	r0, [r7, #4]
 8014d4e:	f001 f953 	bl	8015ff8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014d52:	2180      	movs	r1, #128	@ 0x80
 8014d54:	6878      	ldr	r0, [r7, #4]
 8014d56:	f001 f94f 	bl	8015ff8 <USBD_LL_StallEP>
 8014d5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014d5c:	e040      	b.n	8014de0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8014d5e:	6839      	ldr	r1, [r7, #0]
 8014d60:	6878      	ldr	r0, [r7, #4]
 8014d62:	f000 fc68 	bl	8015636 <USBD_CtlError>
              break;
 8014d66:	e03b      	b.n	8014de0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014d68:	683b      	ldr	r3, [r7, #0]
 8014d6a:	885b      	ldrh	r3, [r3, #2]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d136      	bne.n	8014dde <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014d70:	7bbb      	ldrb	r3, [r7, #14]
 8014d72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d004      	beq.n	8014d84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014d7a:	7bbb      	ldrb	r3, [r7, #14]
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	6878      	ldr	r0, [r7, #4]
 8014d80:	f001 f959 	bl	8016036 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014d84:	6878      	ldr	r0, [r7, #4]
 8014d86:	f000 fd2d 	bl	80157e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014d8a:	7bbb      	ldrb	r3, [r7, #14]
 8014d8c:	4619      	mov	r1, r3
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f7ff fde4 	bl	801495c <USBD_CoreFindEP>
 8014d94:	4603      	mov	r3, r0
 8014d96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014d98:	7b7b      	ldrb	r3, [r7, #13]
 8014d9a:	2bff      	cmp	r3, #255	@ 0xff
 8014d9c:	d01f      	beq.n	8014dde <USBD_StdEPReq+0x1c6>
 8014d9e:	7b7b      	ldrb	r3, [r7, #13]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d11c      	bne.n	8014dde <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014da4:	7b7a      	ldrb	r2, [r7, #13]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014dac:	7b7a      	ldrb	r2, [r7, #13]
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	32ae      	adds	r2, #174	@ 0xae
 8014db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014db6:	689b      	ldr	r3, [r3, #8]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d010      	beq.n	8014dde <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014dbc:	7b7a      	ldrb	r2, [r7, #13]
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	32ae      	adds	r2, #174	@ 0xae
 8014dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dc6:	689b      	ldr	r3, [r3, #8]
 8014dc8:	6839      	ldr	r1, [r7, #0]
 8014dca:	6878      	ldr	r0, [r7, #4]
 8014dcc:	4798      	blx	r3
 8014dce:	4603      	mov	r3, r0
 8014dd0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014dd2:	e004      	b.n	8014dde <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014dd4:	6839      	ldr	r1, [r7, #0]
 8014dd6:	6878      	ldr	r0, [r7, #4]
 8014dd8:	f000 fc2d 	bl	8015636 <USBD_CtlError>
              break;
 8014ddc:	e000      	b.n	8014de0 <USBD_StdEPReq+0x1c8>
              break;
 8014dde:	bf00      	nop
          }
          break;
 8014de0:	e0ab      	b.n	8014f3a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014de8:	b2db      	uxtb	r3, r3
 8014dea:	2b02      	cmp	r3, #2
 8014dec:	d002      	beq.n	8014df4 <USBD_StdEPReq+0x1dc>
 8014dee:	2b03      	cmp	r3, #3
 8014df0:	d032      	beq.n	8014e58 <USBD_StdEPReq+0x240>
 8014df2:	e097      	b.n	8014f24 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014df4:	7bbb      	ldrb	r3, [r7, #14]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d007      	beq.n	8014e0a <USBD_StdEPReq+0x1f2>
 8014dfa:	7bbb      	ldrb	r3, [r7, #14]
 8014dfc:	2b80      	cmp	r3, #128	@ 0x80
 8014dfe:	d004      	beq.n	8014e0a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014e00:	6839      	ldr	r1, [r7, #0]
 8014e02:	6878      	ldr	r0, [r7, #4]
 8014e04:	f000 fc17 	bl	8015636 <USBD_CtlError>
                break;
 8014e08:	e091      	b.n	8014f2e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014e0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	da0b      	bge.n	8014e2a <USBD_StdEPReq+0x212>
 8014e12:	7bbb      	ldrb	r3, [r7, #14]
 8014e14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014e18:	4613      	mov	r3, r2
 8014e1a:	009b      	lsls	r3, r3, #2
 8014e1c:	4413      	add	r3, r2
 8014e1e:	009b      	lsls	r3, r3, #2
 8014e20:	3310      	adds	r3, #16
 8014e22:	687a      	ldr	r2, [r7, #4]
 8014e24:	4413      	add	r3, r2
 8014e26:	3304      	adds	r3, #4
 8014e28:	e00b      	b.n	8014e42 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014e2a:	7bbb      	ldrb	r3, [r7, #14]
 8014e2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014e30:	4613      	mov	r3, r2
 8014e32:	009b      	lsls	r3, r3, #2
 8014e34:	4413      	add	r3, r2
 8014e36:	009b      	lsls	r3, r3, #2
 8014e38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014e3c:	687a      	ldr	r2, [r7, #4]
 8014e3e:	4413      	add	r3, r2
 8014e40:	3304      	adds	r3, #4
 8014e42:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014e44:	68bb      	ldr	r3, [r7, #8]
 8014e46:	2200      	movs	r2, #0
 8014e48:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014e4a:	68bb      	ldr	r3, [r7, #8]
 8014e4c:	2202      	movs	r2, #2
 8014e4e:	4619      	mov	r1, r3
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f000 fc6d 	bl	8015730 <USBD_CtlSendData>
              break;
 8014e56:	e06a      	b.n	8014f2e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	da11      	bge.n	8014e84 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014e60:	7bbb      	ldrb	r3, [r7, #14]
 8014e62:	f003 020f 	and.w	r2, r3, #15
 8014e66:	6879      	ldr	r1, [r7, #4]
 8014e68:	4613      	mov	r3, r2
 8014e6a:	009b      	lsls	r3, r3, #2
 8014e6c:	4413      	add	r3, r2
 8014e6e:	009b      	lsls	r3, r3, #2
 8014e70:	440b      	add	r3, r1
 8014e72:	3324      	adds	r3, #36	@ 0x24
 8014e74:	881b      	ldrh	r3, [r3, #0]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d117      	bne.n	8014eaa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014e7a:	6839      	ldr	r1, [r7, #0]
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f000 fbda 	bl	8015636 <USBD_CtlError>
                  break;
 8014e82:	e054      	b.n	8014f2e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014e84:	7bbb      	ldrb	r3, [r7, #14]
 8014e86:	f003 020f 	and.w	r2, r3, #15
 8014e8a:	6879      	ldr	r1, [r7, #4]
 8014e8c:	4613      	mov	r3, r2
 8014e8e:	009b      	lsls	r3, r3, #2
 8014e90:	4413      	add	r3, r2
 8014e92:	009b      	lsls	r3, r3, #2
 8014e94:	440b      	add	r3, r1
 8014e96:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014e9a:	881b      	ldrh	r3, [r3, #0]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d104      	bne.n	8014eaa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014ea0:	6839      	ldr	r1, [r7, #0]
 8014ea2:	6878      	ldr	r0, [r7, #4]
 8014ea4:	f000 fbc7 	bl	8015636 <USBD_CtlError>
                  break;
 8014ea8:	e041      	b.n	8014f2e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014eaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	da0b      	bge.n	8014eca <USBD_StdEPReq+0x2b2>
 8014eb2:	7bbb      	ldrb	r3, [r7, #14]
 8014eb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014eb8:	4613      	mov	r3, r2
 8014eba:	009b      	lsls	r3, r3, #2
 8014ebc:	4413      	add	r3, r2
 8014ebe:	009b      	lsls	r3, r3, #2
 8014ec0:	3310      	adds	r3, #16
 8014ec2:	687a      	ldr	r2, [r7, #4]
 8014ec4:	4413      	add	r3, r2
 8014ec6:	3304      	adds	r3, #4
 8014ec8:	e00b      	b.n	8014ee2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014eca:	7bbb      	ldrb	r3, [r7, #14]
 8014ecc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ed0:	4613      	mov	r3, r2
 8014ed2:	009b      	lsls	r3, r3, #2
 8014ed4:	4413      	add	r3, r2
 8014ed6:	009b      	lsls	r3, r3, #2
 8014ed8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014edc:	687a      	ldr	r2, [r7, #4]
 8014ede:	4413      	add	r3, r2
 8014ee0:	3304      	adds	r3, #4
 8014ee2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014ee4:	7bbb      	ldrb	r3, [r7, #14]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d002      	beq.n	8014ef0 <USBD_StdEPReq+0x2d8>
 8014eea:	7bbb      	ldrb	r3, [r7, #14]
 8014eec:	2b80      	cmp	r3, #128	@ 0x80
 8014eee:	d103      	bne.n	8014ef8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	601a      	str	r2, [r3, #0]
 8014ef6:	e00e      	b.n	8014f16 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014ef8:	7bbb      	ldrb	r3, [r7, #14]
 8014efa:	4619      	mov	r1, r3
 8014efc:	6878      	ldr	r0, [r7, #4]
 8014efe:	f001 f8b9 	bl	8016074 <USBD_LL_IsStallEP>
 8014f02:	4603      	mov	r3, r0
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d003      	beq.n	8014f10 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	2201      	movs	r2, #1
 8014f0c:	601a      	str	r2, [r3, #0]
 8014f0e:	e002      	b.n	8014f16 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014f10:	68bb      	ldr	r3, [r7, #8]
 8014f12:	2200      	movs	r2, #0
 8014f14:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	2202      	movs	r2, #2
 8014f1a:	4619      	mov	r1, r3
 8014f1c:	6878      	ldr	r0, [r7, #4]
 8014f1e:	f000 fc07 	bl	8015730 <USBD_CtlSendData>
              break;
 8014f22:	e004      	b.n	8014f2e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014f24:	6839      	ldr	r1, [r7, #0]
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f000 fb85 	bl	8015636 <USBD_CtlError>
              break;
 8014f2c:	bf00      	nop
          }
          break;
 8014f2e:	e004      	b.n	8014f3a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014f30:	6839      	ldr	r1, [r7, #0]
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	f000 fb7f 	bl	8015636 <USBD_CtlError>
          break;
 8014f38:	bf00      	nop
      }
      break;
 8014f3a:	e005      	b.n	8014f48 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014f3c:	6839      	ldr	r1, [r7, #0]
 8014f3e:	6878      	ldr	r0, [r7, #4]
 8014f40:	f000 fb79 	bl	8015636 <USBD_CtlError>
      break;
 8014f44:	e000      	b.n	8014f48 <USBD_StdEPReq+0x330>
      break;
 8014f46:	bf00      	nop
  }

  return ret;
 8014f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3710      	adds	r7, #16
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}
	...

08014f54 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b084      	sub	sp, #16
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
 8014f5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014f62:	2300      	movs	r3, #0
 8014f64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014f66:	2300      	movs	r3, #0
 8014f68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014f6a:	683b      	ldr	r3, [r7, #0]
 8014f6c:	885b      	ldrh	r3, [r3, #2]
 8014f6e:	0a1b      	lsrs	r3, r3, #8
 8014f70:	b29b      	uxth	r3, r3
 8014f72:	3b01      	subs	r3, #1
 8014f74:	2b0e      	cmp	r3, #14
 8014f76:	f200 8152 	bhi.w	801521e <USBD_GetDescriptor+0x2ca>
 8014f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8014f80 <USBD_GetDescriptor+0x2c>)
 8014f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f80:	08014ff1 	.word	0x08014ff1
 8014f84:	08015009 	.word	0x08015009
 8014f88:	08015049 	.word	0x08015049
 8014f8c:	0801521f 	.word	0x0801521f
 8014f90:	0801521f 	.word	0x0801521f
 8014f94:	080151bf 	.word	0x080151bf
 8014f98:	080151eb 	.word	0x080151eb
 8014f9c:	0801521f 	.word	0x0801521f
 8014fa0:	0801521f 	.word	0x0801521f
 8014fa4:	0801521f 	.word	0x0801521f
 8014fa8:	0801521f 	.word	0x0801521f
 8014fac:	0801521f 	.word	0x0801521f
 8014fb0:	0801521f 	.word	0x0801521f
 8014fb4:	0801521f 	.word	0x0801521f
 8014fb8:	08014fbd 	.word	0x08014fbd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014fc2:	69db      	ldr	r3, [r3, #28]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d00b      	beq.n	8014fe0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014fce:	69db      	ldr	r3, [r3, #28]
 8014fd0:	687a      	ldr	r2, [r7, #4]
 8014fd2:	7c12      	ldrb	r2, [r2, #16]
 8014fd4:	f107 0108 	add.w	r1, r7, #8
 8014fd8:	4610      	mov	r0, r2
 8014fda:	4798      	blx	r3
 8014fdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014fde:	e126      	b.n	801522e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014fe0:	6839      	ldr	r1, [r7, #0]
 8014fe2:	6878      	ldr	r0, [r7, #4]
 8014fe4:	f000 fb27 	bl	8015636 <USBD_CtlError>
        err++;
 8014fe8:	7afb      	ldrb	r3, [r7, #11]
 8014fea:	3301      	adds	r3, #1
 8014fec:	72fb      	strb	r3, [r7, #11]
      break;
 8014fee:	e11e      	b.n	801522e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	687a      	ldr	r2, [r7, #4]
 8014ffa:	7c12      	ldrb	r2, [r2, #16]
 8014ffc:	f107 0108 	add.w	r1, r7, #8
 8015000:	4610      	mov	r0, r2
 8015002:	4798      	blx	r3
 8015004:	60f8      	str	r0, [r7, #12]
      break;
 8015006:	e112      	b.n	801522e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	7c1b      	ldrb	r3, [r3, #16]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d10d      	bne.n	801502c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015018:	f107 0208 	add.w	r2, r7, #8
 801501c:	4610      	mov	r0, r2
 801501e:	4798      	blx	r3
 8015020:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	3301      	adds	r3, #1
 8015026:	2202      	movs	r2, #2
 8015028:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801502a:	e100      	b.n	801522e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015034:	f107 0208 	add.w	r2, r7, #8
 8015038:	4610      	mov	r0, r2
 801503a:	4798      	blx	r3
 801503c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	3301      	adds	r3, #1
 8015042:	2202      	movs	r2, #2
 8015044:	701a      	strb	r2, [r3, #0]
      break;
 8015046:	e0f2      	b.n	801522e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015048:	683b      	ldr	r3, [r7, #0]
 801504a:	885b      	ldrh	r3, [r3, #2]
 801504c:	b2db      	uxtb	r3, r3
 801504e:	2b05      	cmp	r3, #5
 8015050:	f200 80ac 	bhi.w	80151ac <USBD_GetDescriptor+0x258>
 8015054:	a201      	add	r2, pc, #4	@ (adr r2, 801505c <USBD_GetDescriptor+0x108>)
 8015056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801505a:	bf00      	nop
 801505c:	08015075 	.word	0x08015075
 8015060:	080150a9 	.word	0x080150a9
 8015064:	080150dd 	.word	0x080150dd
 8015068:	08015111 	.word	0x08015111
 801506c:	08015145 	.word	0x08015145
 8015070:	08015179 	.word	0x08015179
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801507a:	685b      	ldr	r3, [r3, #4]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d00b      	beq.n	8015098 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015086:	685b      	ldr	r3, [r3, #4]
 8015088:	687a      	ldr	r2, [r7, #4]
 801508a:	7c12      	ldrb	r2, [r2, #16]
 801508c:	f107 0108 	add.w	r1, r7, #8
 8015090:	4610      	mov	r0, r2
 8015092:	4798      	blx	r3
 8015094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015096:	e091      	b.n	80151bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015098:	6839      	ldr	r1, [r7, #0]
 801509a:	6878      	ldr	r0, [r7, #4]
 801509c:	f000 facb 	bl	8015636 <USBD_CtlError>
            err++;
 80150a0:	7afb      	ldrb	r3, [r7, #11]
 80150a2:	3301      	adds	r3, #1
 80150a4:	72fb      	strb	r3, [r7, #11]
          break;
 80150a6:	e089      	b.n	80151bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80150ae:	689b      	ldr	r3, [r3, #8]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d00b      	beq.n	80150cc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80150ba:	689b      	ldr	r3, [r3, #8]
 80150bc:	687a      	ldr	r2, [r7, #4]
 80150be:	7c12      	ldrb	r2, [r2, #16]
 80150c0:	f107 0108 	add.w	r1, r7, #8
 80150c4:	4610      	mov	r0, r2
 80150c6:	4798      	blx	r3
 80150c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80150ca:	e077      	b.n	80151bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80150cc:	6839      	ldr	r1, [r7, #0]
 80150ce:	6878      	ldr	r0, [r7, #4]
 80150d0:	f000 fab1 	bl	8015636 <USBD_CtlError>
            err++;
 80150d4:	7afb      	ldrb	r3, [r7, #11]
 80150d6:	3301      	adds	r3, #1
 80150d8:	72fb      	strb	r3, [r7, #11]
          break;
 80150da:	e06f      	b.n	80151bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80150e2:	68db      	ldr	r3, [r3, #12]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d00b      	beq.n	8015100 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80150ee:	68db      	ldr	r3, [r3, #12]
 80150f0:	687a      	ldr	r2, [r7, #4]
 80150f2:	7c12      	ldrb	r2, [r2, #16]
 80150f4:	f107 0108 	add.w	r1, r7, #8
 80150f8:	4610      	mov	r0, r2
 80150fa:	4798      	blx	r3
 80150fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80150fe:	e05d      	b.n	80151bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015100:	6839      	ldr	r1, [r7, #0]
 8015102:	6878      	ldr	r0, [r7, #4]
 8015104:	f000 fa97 	bl	8015636 <USBD_CtlError>
            err++;
 8015108:	7afb      	ldrb	r3, [r7, #11]
 801510a:	3301      	adds	r3, #1
 801510c:	72fb      	strb	r3, [r7, #11]
          break;
 801510e:	e055      	b.n	80151bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015116:	691b      	ldr	r3, [r3, #16]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d00b      	beq.n	8015134 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015122:	691b      	ldr	r3, [r3, #16]
 8015124:	687a      	ldr	r2, [r7, #4]
 8015126:	7c12      	ldrb	r2, [r2, #16]
 8015128:	f107 0108 	add.w	r1, r7, #8
 801512c:	4610      	mov	r0, r2
 801512e:	4798      	blx	r3
 8015130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015132:	e043      	b.n	80151bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015134:	6839      	ldr	r1, [r7, #0]
 8015136:	6878      	ldr	r0, [r7, #4]
 8015138:	f000 fa7d 	bl	8015636 <USBD_CtlError>
            err++;
 801513c:	7afb      	ldrb	r3, [r7, #11]
 801513e:	3301      	adds	r3, #1
 8015140:	72fb      	strb	r3, [r7, #11]
          break;
 8015142:	e03b      	b.n	80151bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801514a:	695b      	ldr	r3, [r3, #20]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d00b      	beq.n	8015168 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015156:	695b      	ldr	r3, [r3, #20]
 8015158:	687a      	ldr	r2, [r7, #4]
 801515a:	7c12      	ldrb	r2, [r2, #16]
 801515c:	f107 0108 	add.w	r1, r7, #8
 8015160:	4610      	mov	r0, r2
 8015162:	4798      	blx	r3
 8015164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015166:	e029      	b.n	80151bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015168:	6839      	ldr	r1, [r7, #0]
 801516a:	6878      	ldr	r0, [r7, #4]
 801516c:	f000 fa63 	bl	8015636 <USBD_CtlError>
            err++;
 8015170:	7afb      	ldrb	r3, [r7, #11]
 8015172:	3301      	adds	r3, #1
 8015174:	72fb      	strb	r3, [r7, #11]
          break;
 8015176:	e021      	b.n	80151bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801517e:	699b      	ldr	r3, [r3, #24]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d00b      	beq.n	801519c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801518a:	699b      	ldr	r3, [r3, #24]
 801518c:	687a      	ldr	r2, [r7, #4]
 801518e:	7c12      	ldrb	r2, [r2, #16]
 8015190:	f107 0108 	add.w	r1, r7, #8
 8015194:	4610      	mov	r0, r2
 8015196:	4798      	blx	r3
 8015198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801519a:	e00f      	b.n	80151bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801519c:	6839      	ldr	r1, [r7, #0]
 801519e:	6878      	ldr	r0, [r7, #4]
 80151a0:	f000 fa49 	bl	8015636 <USBD_CtlError>
            err++;
 80151a4:	7afb      	ldrb	r3, [r7, #11]
 80151a6:	3301      	adds	r3, #1
 80151a8:	72fb      	strb	r3, [r7, #11]
          break;
 80151aa:	e007      	b.n	80151bc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80151ac:	6839      	ldr	r1, [r7, #0]
 80151ae:	6878      	ldr	r0, [r7, #4]
 80151b0:	f000 fa41 	bl	8015636 <USBD_CtlError>
          err++;
 80151b4:	7afb      	ldrb	r3, [r7, #11]
 80151b6:	3301      	adds	r3, #1
 80151b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80151ba:	bf00      	nop
      }
      break;
 80151bc:	e037      	b.n	801522e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	7c1b      	ldrb	r3, [r3, #16]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d109      	bne.n	80151da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80151cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80151ce:	f107 0208 	add.w	r2, r7, #8
 80151d2:	4610      	mov	r0, r2
 80151d4:	4798      	blx	r3
 80151d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80151d8:	e029      	b.n	801522e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80151da:	6839      	ldr	r1, [r7, #0]
 80151dc:	6878      	ldr	r0, [r7, #4]
 80151de:	f000 fa2a 	bl	8015636 <USBD_CtlError>
        err++;
 80151e2:	7afb      	ldrb	r3, [r7, #11]
 80151e4:	3301      	adds	r3, #1
 80151e6:	72fb      	strb	r3, [r7, #11]
      break;
 80151e8:	e021      	b.n	801522e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	7c1b      	ldrb	r3, [r3, #16]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d10d      	bne.n	801520e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80151f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80151fa:	f107 0208 	add.w	r2, r7, #8
 80151fe:	4610      	mov	r0, r2
 8015200:	4798      	blx	r3
 8015202:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	3301      	adds	r3, #1
 8015208:	2207      	movs	r2, #7
 801520a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801520c:	e00f      	b.n	801522e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801520e:	6839      	ldr	r1, [r7, #0]
 8015210:	6878      	ldr	r0, [r7, #4]
 8015212:	f000 fa10 	bl	8015636 <USBD_CtlError>
        err++;
 8015216:	7afb      	ldrb	r3, [r7, #11]
 8015218:	3301      	adds	r3, #1
 801521a:	72fb      	strb	r3, [r7, #11]
      break;
 801521c:	e007      	b.n	801522e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801521e:	6839      	ldr	r1, [r7, #0]
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f000 fa08 	bl	8015636 <USBD_CtlError>
      err++;
 8015226:	7afb      	ldrb	r3, [r7, #11]
 8015228:	3301      	adds	r3, #1
 801522a:	72fb      	strb	r3, [r7, #11]
      break;
 801522c:	bf00      	nop
  }

  if (err != 0U)
 801522e:	7afb      	ldrb	r3, [r7, #11]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d11e      	bne.n	8015272 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	88db      	ldrh	r3, [r3, #6]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d016      	beq.n	801526a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801523c:	893b      	ldrh	r3, [r7, #8]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d00e      	beq.n	8015260 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	88da      	ldrh	r2, [r3, #6]
 8015246:	893b      	ldrh	r3, [r7, #8]
 8015248:	4293      	cmp	r3, r2
 801524a:	bf28      	it	cs
 801524c:	4613      	movcs	r3, r2
 801524e:	b29b      	uxth	r3, r3
 8015250:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015252:	893b      	ldrh	r3, [r7, #8]
 8015254:	461a      	mov	r2, r3
 8015256:	68f9      	ldr	r1, [r7, #12]
 8015258:	6878      	ldr	r0, [r7, #4]
 801525a:	f000 fa69 	bl	8015730 <USBD_CtlSendData>
 801525e:	e009      	b.n	8015274 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015260:	6839      	ldr	r1, [r7, #0]
 8015262:	6878      	ldr	r0, [r7, #4]
 8015264:	f000 f9e7 	bl	8015636 <USBD_CtlError>
 8015268:	e004      	b.n	8015274 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801526a:	6878      	ldr	r0, [r7, #4]
 801526c:	f000 faba 	bl	80157e4 <USBD_CtlSendStatus>
 8015270:	e000      	b.n	8015274 <USBD_GetDescriptor+0x320>
    return;
 8015272:	bf00      	nop
  }
}
 8015274:	3710      	adds	r7, #16
 8015276:	46bd      	mov	sp, r7
 8015278:	bd80      	pop	{r7, pc}
 801527a:	bf00      	nop

0801527c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b084      	sub	sp, #16
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
 8015284:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015286:	683b      	ldr	r3, [r7, #0]
 8015288:	889b      	ldrh	r3, [r3, #4]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d131      	bne.n	80152f2 <USBD_SetAddress+0x76>
 801528e:	683b      	ldr	r3, [r7, #0]
 8015290:	88db      	ldrh	r3, [r3, #6]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d12d      	bne.n	80152f2 <USBD_SetAddress+0x76>
 8015296:	683b      	ldr	r3, [r7, #0]
 8015298:	885b      	ldrh	r3, [r3, #2]
 801529a:	2b7f      	cmp	r3, #127	@ 0x7f
 801529c:	d829      	bhi.n	80152f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	885b      	ldrh	r3, [r3, #2]
 80152a2:	b2db      	uxtb	r3, r3
 80152a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80152a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80152b0:	b2db      	uxtb	r3, r3
 80152b2:	2b03      	cmp	r3, #3
 80152b4:	d104      	bne.n	80152c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80152b6:	6839      	ldr	r1, [r7, #0]
 80152b8:	6878      	ldr	r0, [r7, #4]
 80152ba:	f000 f9bc 	bl	8015636 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152be:	e01d      	b.n	80152fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	7bfa      	ldrb	r2, [r7, #15]
 80152c4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80152c8:	7bfb      	ldrb	r3, [r7, #15]
 80152ca:	4619      	mov	r1, r3
 80152cc:	6878      	ldr	r0, [r7, #4]
 80152ce:	f000 fefd 	bl	80160cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80152d2:	6878      	ldr	r0, [r7, #4]
 80152d4:	f000 fa86 	bl	80157e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80152d8:	7bfb      	ldrb	r3, [r7, #15]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d004      	beq.n	80152e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	2202      	movs	r2, #2
 80152e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152e6:	e009      	b.n	80152fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2201      	movs	r2, #1
 80152ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152f0:	e004      	b.n	80152fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80152f2:	6839      	ldr	r1, [r7, #0]
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f000 f99e 	bl	8015636 <USBD_CtlError>
  }
}
 80152fa:	bf00      	nop
 80152fc:	bf00      	nop
 80152fe:	3710      	adds	r7, #16
 8015300:	46bd      	mov	sp, r7
 8015302:	bd80      	pop	{r7, pc}

08015304 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015304:	b580      	push	{r7, lr}
 8015306:	b084      	sub	sp, #16
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
 801530c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801530e:	2300      	movs	r3, #0
 8015310:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015312:	683b      	ldr	r3, [r7, #0]
 8015314:	885b      	ldrh	r3, [r3, #2]
 8015316:	b2da      	uxtb	r2, r3
 8015318:	4b4e      	ldr	r3, [pc, #312]	@ (8015454 <USBD_SetConfig+0x150>)
 801531a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801531c:	4b4d      	ldr	r3, [pc, #308]	@ (8015454 <USBD_SetConfig+0x150>)
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	2b01      	cmp	r3, #1
 8015322:	d905      	bls.n	8015330 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015324:	6839      	ldr	r1, [r7, #0]
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f000 f985 	bl	8015636 <USBD_CtlError>
    return USBD_FAIL;
 801532c:	2303      	movs	r3, #3
 801532e:	e08c      	b.n	801544a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015336:	b2db      	uxtb	r3, r3
 8015338:	2b02      	cmp	r3, #2
 801533a:	d002      	beq.n	8015342 <USBD_SetConfig+0x3e>
 801533c:	2b03      	cmp	r3, #3
 801533e:	d029      	beq.n	8015394 <USBD_SetConfig+0x90>
 8015340:	e075      	b.n	801542e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015342:	4b44      	ldr	r3, [pc, #272]	@ (8015454 <USBD_SetConfig+0x150>)
 8015344:	781b      	ldrb	r3, [r3, #0]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d020      	beq.n	801538c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801534a:	4b42      	ldr	r3, [pc, #264]	@ (8015454 <USBD_SetConfig+0x150>)
 801534c:	781b      	ldrb	r3, [r3, #0]
 801534e:	461a      	mov	r2, r3
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015354:	4b3f      	ldr	r3, [pc, #252]	@ (8015454 <USBD_SetConfig+0x150>)
 8015356:	781b      	ldrb	r3, [r3, #0]
 8015358:	4619      	mov	r1, r3
 801535a:	6878      	ldr	r0, [r7, #4]
 801535c:	f7ff f84b 	bl	80143f6 <USBD_SetClassConfig>
 8015360:	4603      	mov	r3, r0
 8015362:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015364:	7bfb      	ldrb	r3, [r7, #15]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d008      	beq.n	801537c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801536a:	6839      	ldr	r1, [r7, #0]
 801536c:	6878      	ldr	r0, [r7, #4]
 801536e:	f000 f962 	bl	8015636 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	2202      	movs	r2, #2
 8015376:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801537a:	e065      	b.n	8015448 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801537c:	6878      	ldr	r0, [r7, #4]
 801537e:	f000 fa31 	bl	80157e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	2203      	movs	r2, #3
 8015386:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801538a:	e05d      	b.n	8015448 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801538c:	6878      	ldr	r0, [r7, #4]
 801538e:	f000 fa29 	bl	80157e4 <USBD_CtlSendStatus>
      break;
 8015392:	e059      	b.n	8015448 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015394:	4b2f      	ldr	r3, [pc, #188]	@ (8015454 <USBD_SetConfig+0x150>)
 8015396:	781b      	ldrb	r3, [r3, #0]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d112      	bne.n	80153c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	2202      	movs	r2, #2
 80153a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80153a4:	4b2b      	ldr	r3, [pc, #172]	@ (8015454 <USBD_SetConfig+0x150>)
 80153a6:	781b      	ldrb	r3, [r3, #0]
 80153a8:	461a      	mov	r2, r3
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80153ae:	4b29      	ldr	r3, [pc, #164]	@ (8015454 <USBD_SetConfig+0x150>)
 80153b0:	781b      	ldrb	r3, [r3, #0]
 80153b2:	4619      	mov	r1, r3
 80153b4:	6878      	ldr	r0, [r7, #4]
 80153b6:	f7ff f83a 	bl	801442e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80153ba:	6878      	ldr	r0, [r7, #4]
 80153bc:	f000 fa12 	bl	80157e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80153c0:	e042      	b.n	8015448 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80153c2:	4b24      	ldr	r3, [pc, #144]	@ (8015454 <USBD_SetConfig+0x150>)
 80153c4:	781b      	ldrb	r3, [r3, #0]
 80153c6:	461a      	mov	r2, r3
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	685b      	ldr	r3, [r3, #4]
 80153cc:	429a      	cmp	r2, r3
 80153ce:	d02a      	beq.n	8015426 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	685b      	ldr	r3, [r3, #4]
 80153d4:	b2db      	uxtb	r3, r3
 80153d6:	4619      	mov	r1, r3
 80153d8:	6878      	ldr	r0, [r7, #4]
 80153da:	f7ff f828 	bl	801442e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80153de:	4b1d      	ldr	r3, [pc, #116]	@ (8015454 <USBD_SetConfig+0x150>)
 80153e0:	781b      	ldrb	r3, [r3, #0]
 80153e2:	461a      	mov	r2, r3
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80153e8:	4b1a      	ldr	r3, [pc, #104]	@ (8015454 <USBD_SetConfig+0x150>)
 80153ea:	781b      	ldrb	r3, [r3, #0]
 80153ec:	4619      	mov	r1, r3
 80153ee:	6878      	ldr	r0, [r7, #4]
 80153f0:	f7ff f801 	bl	80143f6 <USBD_SetClassConfig>
 80153f4:	4603      	mov	r3, r0
 80153f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80153f8:	7bfb      	ldrb	r3, [r7, #15]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d00f      	beq.n	801541e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80153fe:	6839      	ldr	r1, [r7, #0]
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	f000 f918 	bl	8015636 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	685b      	ldr	r3, [r3, #4]
 801540a:	b2db      	uxtb	r3, r3
 801540c:	4619      	mov	r1, r3
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f7ff f80d 	bl	801442e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	2202      	movs	r2, #2
 8015418:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801541c:	e014      	b.n	8015448 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f000 f9e0 	bl	80157e4 <USBD_CtlSendStatus>
      break;
 8015424:	e010      	b.n	8015448 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f000 f9dc 	bl	80157e4 <USBD_CtlSendStatus>
      break;
 801542c:	e00c      	b.n	8015448 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801542e:	6839      	ldr	r1, [r7, #0]
 8015430:	6878      	ldr	r0, [r7, #4]
 8015432:	f000 f900 	bl	8015636 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015436:	4b07      	ldr	r3, [pc, #28]	@ (8015454 <USBD_SetConfig+0x150>)
 8015438:	781b      	ldrb	r3, [r3, #0]
 801543a:	4619      	mov	r1, r3
 801543c:	6878      	ldr	r0, [r7, #4]
 801543e:	f7fe fff6 	bl	801442e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015442:	2303      	movs	r3, #3
 8015444:	73fb      	strb	r3, [r7, #15]
      break;
 8015446:	bf00      	nop
  }

  return ret;
 8015448:	7bfb      	ldrb	r3, [r7, #15]
}
 801544a:	4618      	mov	r0, r3
 801544c:	3710      	adds	r7, #16
 801544e:	46bd      	mov	sp, r7
 8015450:	bd80      	pop	{r7, pc}
 8015452:	bf00      	nop
 8015454:	20000818 	.word	0x20000818

08015458 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b082      	sub	sp, #8
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
 8015460:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015462:	683b      	ldr	r3, [r7, #0]
 8015464:	88db      	ldrh	r3, [r3, #6]
 8015466:	2b01      	cmp	r3, #1
 8015468:	d004      	beq.n	8015474 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801546a:	6839      	ldr	r1, [r7, #0]
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f000 f8e2 	bl	8015636 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015472:	e023      	b.n	80154bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801547a:	b2db      	uxtb	r3, r3
 801547c:	2b02      	cmp	r3, #2
 801547e:	dc02      	bgt.n	8015486 <USBD_GetConfig+0x2e>
 8015480:	2b00      	cmp	r3, #0
 8015482:	dc03      	bgt.n	801548c <USBD_GetConfig+0x34>
 8015484:	e015      	b.n	80154b2 <USBD_GetConfig+0x5a>
 8015486:	2b03      	cmp	r3, #3
 8015488:	d00b      	beq.n	80154a2 <USBD_GetConfig+0x4a>
 801548a:	e012      	b.n	80154b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	2200      	movs	r2, #0
 8015490:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	3308      	adds	r3, #8
 8015496:	2201      	movs	r2, #1
 8015498:	4619      	mov	r1, r3
 801549a:	6878      	ldr	r0, [r7, #4]
 801549c:	f000 f948 	bl	8015730 <USBD_CtlSendData>
        break;
 80154a0:	e00c      	b.n	80154bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	3304      	adds	r3, #4
 80154a6:	2201      	movs	r2, #1
 80154a8:	4619      	mov	r1, r3
 80154aa:	6878      	ldr	r0, [r7, #4]
 80154ac:	f000 f940 	bl	8015730 <USBD_CtlSendData>
        break;
 80154b0:	e004      	b.n	80154bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80154b2:	6839      	ldr	r1, [r7, #0]
 80154b4:	6878      	ldr	r0, [r7, #4]
 80154b6:	f000 f8be 	bl	8015636 <USBD_CtlError>
        break;
 80154ba:	bf00      	nop
}
 80154bc:	bf00      	nop
 80154be:	3708      	adds	r7, #8
 80154c0:	46bd      	mov	sp, r7
 80154c2:	bd80      	pop	{r7, pc}

080154c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b082      	sub	sp, #8
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
 80154cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80154d4:	b2db      	uxtb	r3, r3
 80154d6:	3b01      	subs	r3, #1
 80154d8:	2b02      	cmp	r3, #2
 80154da:	d81e      	bhi.n	801551a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80154dc:	683b      	ldr	r3, [r7, #0]
 80154de:	88db      	ldrh	r3, [r3, #6]
 80154e0:	2b02      	cmp	r3, #2
 80154e2:	d004      	beq.n	80154ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80154e4:	6839      	ldr	r1, [r7, #0]
 80154e6:	6878      	ldr	r0, [r7, #4]
 80154e8:	f000 f8a5 	bl	8015636 <USBD_CtlError>
        break;
 80154ec:	e01a      	b.n	8015524 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	2201      	movs	r2, #1
 80154f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d005      	beq.n	801550a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	68db      	ldr	r3, [r3, #12]
 8015502:	f043 0202 	orr.w	r2, r3, #2
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	330c      	adds	r3, #12
 801550e:	2202      	movs	r2, #2
 8015510:	4619      	mov	r1, r3
 8015512:	6878      	ldr	r0, [r7, #4]
 8015514:	f000 f90c 	bl	8015730 <USBD_CtlSendData>
      break;
 8015518:	e004      	b.n	8015524 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801551a:	6839      	ldr	r1, [r7, #0]
 801551c:	6878      	ldr	r0, [r7, #4]
 801551e:	f000 f88a 	bl	8015636 <USBD_CtlError>
      break;
 8015522:	bf00      	nop
  }
}
 8015524:	bf00      	nop
 8015526:	3708      	adds	r7, #8
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}

0801552c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015536:	683b      	ldr	r3, [r7, #0]
 8015538:	885b      	ldrh	r3, [r3, #2]
 801553a:	2b01      	cmp	r3, #1
 801553c:	d107      	bne.n	801554e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	2201      	movs	r2, #1
 8015542:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f000 f94c 	bl	80157e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801554c:	e013      	b.n	8015576 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801554e:	683b      	ldr	r3, [r7, #0]
 8015550:	885b      	ldrh	r3, [r3, #2]
 8015552:	2b02      	cmp	r3, #2
 8015554:	d10b      	bne.n	801556e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	889b      	ldrh	r3, [r3, #4]
 801555a:	0a1b      	lsrs	r3, r3, #8
 801555c:	b29b      	uxth	r3, r3
 801555e:	b2da      	uxtb	r2, r3
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015566:	6878      	ldr	r0, [r7, #4]
 8015568:	f000 f93c 	bl	80157e4 <USBD_CtlSendStatus>
}
 801556c:	e003      	b.n	8015576 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801556e:	6839      	ldr	r1, [r7, #0]
 8015570:	6878      	ldr	r0, [r7, #4]
 8015572:	f000 f860 	bl	8015636 <USBD_CtlError>
}
 8015576:	bf00      	nop
 8015578:	3708      	adds	r7, #8
 801557a:	46bd      	mov	sp, r7
 801557c:	bd80      	pop	{r7, pc}

0801557e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801557e:	b580      	push	{r7, lr}
 8015580:	b082      	sub	sp, #8
 8015582:	af00      	add	r7, sp, #0
 8015584:	6078      	str	r0, [r7, #4]
 8015586:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801558e:	b2db      	uxtb	r3, r3
 8015590:	3b01      	subs	r3, #1
 8015592:	2b02      	cmp	r3, #2
 8015594:	d80b      	bhi.n	80155ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	885b      	ldrh	r3, [r3, #2]
 801559a:	2b01      	cmp	r3, #1
 801559c:	d10c      	bne.n	80155b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	2200      	movs	r2, #0
 80155a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80155a6:	6878      	ldr	r0, [r7, #4]
 80155a8:	f000 f91c 	bl	80157e4 <USBD_CtlSendStatus>
      }
      break;
 80155ac:	e004      	b.n	80155b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80155ae:	6839      	ldr	r1, [r7, #0]
 80155b0:	6878      	ldr	r0, [r7, #4]
 80155b2:	f000 f840 	bl	8015636 <USBD_CtlError>
      break;
 80155b6:	e000      	b.n	80155ba <USBD_ClrFeature+0x3c>
      break;
 80155b8:	bf00      	nop
  }
}
 80155ba:	bf00      	nop
 80155bc:	3708      	adds	r7, #8
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}

080155c2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80155c2:	b580      	push	{r7, lr}
 80155c4:	b084      	sub	sp, #16
 80155c6:	af00      	add	r7, sp, #0
 80155c8:	6078      	str	r0, [r7, #4]
 80155ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80155cc:	683b      	ldr	r3, [r7, #0]
 80155ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	781a      	ldrb	r2, [r3, #0]
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	3301      	adds	r3, #1
 80155dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	781a      	ldrb	r2, [r3, #0]
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	3301      	adds	r3, #1
 80155ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80155ec:	68f8      	ldr	r0, [r7, #12]
 80155ee:	f7ff fa16 	bl	8014a1e <SWAPBYTE>
 80155f2:	4603      	mov	r3, r0
 80155f4:	461a      	mov	r2, r3
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	3301      	adds	r3, #1
 80155fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	3301      	adds	r3, #1
 8015604:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015606:	68f8      	ldr	r0, [r7, #12]
 8015608:	f7ff fa09 	bl	8014a1e <SWAPBYTE>
 801560c:	4603      	mov	r3, r0
 801560e:	461a      	mov	r2, r3
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	3301      	adds	r3, #1
 8015618:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	3301      	adds	r3, #1
 801561e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015620:	68f8      	ldr	r0, [r7, #12]
 8015622:	f7ff f9fc 	bl	8014a1e <SWAPBYTE>
 8015626:	4603      	mov	r3, r0
 8015628:	461a      	mov	r2, r3
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	80da      	strh	r2, [r3, #6]
}
 801562e:	bf00      	nop
 8015630:	3710      	adds	r7, #16
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}

08015636 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015636:	b580      	push	{r7, lr}
 8015638:	b082      	sub	sp, #8
 801563a:	af00      	add	r7, sp, #0
 801563c:	6078      	str	r0, [r7, #4]
 801563e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015640:	2180      	movs	r1, #128	@ 0x80
 8015642:	6878      	ldr	r0, [r7, #4]
 8015644:	f000 fcd8 	bl	8015ff8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015648:	2100      	movs	r1, #0
 801564a:	6878      	ldr	r0, [r7, #4]
 801564c:	f000 fcd4 	bl	8015ff8 <USBD_LL_StallEP>
}
 8015650:	bf00      	nop
 8015652:	3708      	adds	r7, #8
 8015654:	46bd      	mov	sp, r7
 8015656:	bd80      	pop	{r7, pc}

08015658 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b086      	sub	sp, #24
 801565c:	af00      	add	r7, sp, #0
 801565e:	60f8      	str	r0, [r7, #12]
 8015660:	60b9      	str	r1, [r7, #8]
 8015662:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015664:	2300      	movs	r3, #0
 8015666:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d042      	beq.n	80156f4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8015672:	6938      	ldr	r0, [r7, #16]
 8015674:	f000 f842 	bl	80156fc <USBD_GetLen>
 8015678:	4603      	mov	r3, r0
 801567a:	3301      	adds	r3, #1
 801567c:	005b      	lsls	r3, r3, #1
 801567e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015682:	d808      	bhi.n	8015696 <USBD_GetString+0x3e>
 8015684:	6938      	ldr	r0, [r7, #16]
 8015686:	f000 f839 	bl	80156fc <USBD_GetLen>
 801568a:	4603      	mov	r3, r0
 801568c:	3301      	adds	r3, #1
 801568e:	b29b      	uxth	r3, r3
 8015690:	005b      	lsls	r3, r3, #1
 8015692:	b29a      	uxth	r2, r3
 8015694:	e001      	b.n	801569a <USBD_GetString+0x42>
 8015696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801569e:	7dfb      	ldrb	r3, [r7, #23]
 80156a0:	68ba      	ldr	r2, [r7, #8]
 80156a2:	4413      	add	r3, r2
 80156a4:	687a      	ldr	r2, [r7, #4]
 80156a6:	7812      	ldrb	r2, [r2, #0]
 80156a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80156aa:	7dfb      	ldrb	r3, [r7, #23]
 80156ac:	3301      	adds	r3, #1
 80156ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80156b0:	7dfb      	ldrb	r3, [r7, #23]
 80156b2:	68ba      	ldr	r2, [r7, #8]
 80156b4:	4413      	add	r3, r2
 80156b6:	2203      	movs	r2, #3
 80156b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80156ba:	7dfb      	ldrb	r3, [r7, #23]
 80156bc:	3301      	adds	r3, #1
 80156be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80156c0:	e013      	b.n	80156ea <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80156c2:	7dfb      	ldrb	r3, [r7, #23]
 80156c4:	68ba      	ldr	r2, [r7, #8]
 80156c6:	4413      	add	r3, r2
 80156c8:	693a      	ldr	r2, [r7, #16]
 80156ca:	7812      	ldrb	r2, [r2, #0]
 80156cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80156ce:	693b      	ldr	r3, [r7, #16]
 80156d0:	3301      	adds	r3, #1
 80156d2:	613b      	str	r3, [r7, #16]
    idx++;
 80156d4:	7dfb      	ldrb	r3, [r7, #23]
 80156d6:	3301      	adds	r3, #1
 80156d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80156da:	7dfb      	ldrb	r3, [r7, #23]
 80156dc:	68ba      	ldr	r2, [r7, #8]
 80156de:	4413      	add	r3, r2
 80156e0:	2200      	movs	r2, #0
 80156e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80156e4:	7dfb      	ldrb	r3, [r7, #23]
 80156e6:	3301      	adds	r3, #1
 80156e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	781b      	ldrb	r3, [r3, #0]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d1e7      	bne.n	80156c2 <USBD_GetString+0x6a>
 80156f2:	e000      	b.n	80156f6 <USBD_GetString+0x9e>
    return;
 80156f4:	bf00      	nop
  }
}
 80156f6:	3718      	adds	r7, #24
 80156f8:	46bd      	mov	sp, r7
 80156fa:	bd80      	pop	{r7, pc}

080156fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80156fc:	b480      	push	{r7}
 80156fe:	b085      	sub	sp, #20
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015704:	2300      	movs	r3, #0
 8015706:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801570c:	e005      	b.n	801571a <USBD_GetLen+0x1e>
  {
    len++;
 801570e:	7bfb      	ldrb	r3, [r7, #15]
 8015710:	3301      	adds	r3, #1
 8015712:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015714:	68bb      	ldr	r3, [r7, #8]
 8015716:	3301      	adds	r3, #1
 8015718:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801571a:	68bb      	ldr	r3, [r7, #8]
 801571c:	781b      	ldrb	r3, [r3, #0]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d1f5      	bne.n	801570e <USBD_GetLen+0x12>
  }

  return len;
 8015722:	7bfb      	ldrb	r3, [r7, #15]
}
 8015724:	4618      	mov	r0, r3
 8015726:	3714      	adds	r7, #20
 8015728:	46bd      	mov	sp, r7
 801572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572e:	4770      	bx	lr

08015730 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b084      	sub	sp, #16
 8015734:	af00      	add	r7, sp, #0
 8015736:	60f8      	str	r0, [r7, #12]
 8015738:	60b9      	str	r1, [r7, #8]
 801573a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	2202      	movs	r2, #2
 8015740:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	687a      	ldr	r2, [r7, #4]
 8015748:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	687a      	ldr	r2, [r7, #4]
 801574e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	68ba      	ldr	r2, [r7, #8]
 8015754:	2100      	movs	r1, #0
 8015756:	68f8      	ldr	r0, [r7, #12]
 8015758:	f000 fcd7 	bl	801610a <USBD_LL_Transmit>

  return USBD_OK;
 801575c:	2300      	movs	r3, #0
}
 801575e:	4618      	mov	r0, r3
 8015760:	3710      	adds	r7, #16
 8015762:	46bd      	mov	sp, r7
 8015764:	bd80      	pop	{r7, pc}

08015766 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015766:	b580      	push	{r7, lr}
 8015768:	b084      	sub	sp, #16
 801576a:	af00      	add	r7, sp, #0
 801576c:	60f8      	str	r0, [r7, #12]
 801576e:	60b9      	str	r1, [r7, #8]
 8015770:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	68ba      	ldr	r2, [r7, #8]
 8015776:	2100      	movs	r1, #0
 8015778:	68f8      	ldr	r0, [r7, #12]
 801577a:	f000 fcc6 	bl	801610a <USBD_LL_Transmit>

  return USBD_OK;
 801577e:	2300      	movs	r3, #0
}
 8015780:	4618      	mov	r0, r3
 8015782:	3710      	adds	r7, #16
 8015784:	46bd      	mov	sp, r7
 8015786:	bd80      	pop	{r7, pc}

08015788 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b084      	sub	sp, #16
 801578c:	af00      	add	r7, sp, #0
 801578e:	60f8      	str	r0, [r7, #12]
 8015790:	60b9      	str	r1, [r7, #8]
 8015792:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	2203      	movs	r2, #3
 8015798:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	687a      	ldr	r2, [r7, #4]
 80157a0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	687a      	ldr	r2, [r7, #4]
 80157a8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	68ba      	ldr	r2, [r7, #8]
 80157b0:	2100      	movs	r1, #0
 80157b2:	68f8      	ldr	r0, [r7, #12]
 80157b4:	f000 fcca 	bl	801614c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80157b8:	2300      	movs	r3, #0
}
 80157ba:	4618      	mov	r0, r3
 80157bc:	3710      	adds	r7, #16
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}

080157c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80157c2:	b580      	push	{r7, lr}
 80157c4:	b084      	sub	sp, #16
 80157c6:	af00      	add	r7, sp, #0
 80157c8:	60f8      	str	r0, [r7, #12]
 80157ca:	60b9      	str	r1, [r7, #8]
 80157cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	68ba      	ldr	r2, [r7, #8]
 80157d2:	2100      	movs	r1, #0
 80157d4:	68f8      	ldr	r0, [r7, #12]
 80157d6:	f000 fcb9 	bl	801614c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80157da:	2300      	movs	r3, #0
}
 80157dc:	4618      	mov	r0, r3
 80157de:	3710      	adds	r7, #16
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}

080157e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b082      	sub	sp, #8
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	2204      	movs	r2, #4
 80157f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80157f4:	2300      	movs	r3, #0
 80157f6:	2200      	movs	r2, #0
 80157f8:	2100      	movs	r1, #0
 80157fa:	6878      	ldr	r0, [r7, #4]
 80157fc:	f000 fc85 	bl	801610a <USBD_LL_Transmit>

  return USBD_OK;
 8015800:	2300      	movs	r3, #0
}
 8015802:	4618      	mov	r0, r3
 8015804:	3708      	adds	r7, #8
 8015806:	46bd      	mov	sp, r7
 8015808:	bd80      	pop	{r7, pc}

0801580a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801580a:	b580      	push	{r7, lr}
 801580c:	b082      	sub	sp, #8
 801580e:	af00      	add	r7, sp, #0
 8015810:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	2205      	movs	r2, #5
 8015816:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801581a:	2300      	movs	r3, #0
 801581c:	2200      	movs	r2, #0
 801581e:	2100      	movs	r1, #0
 8015820:	6878      	ldr	r0, [r7, #4]
 8015822:	f000 fc93 	bl	801614c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015826:	2300      	movs	r3, #0
}
 8015828:	4618      	mov	r0, r3
 801582a:	3708      	adds	r7, #8
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}

08015830 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8015834:	2200      	movs	r2, #0
 8015836:	4912      	ldr	r1, [pc, #72]	@ (8015880 <MX_USB_Device_Init+0x50>)
 8015838:	4812      	ldr	r0, [pc, #72]	@ (8015884 <MX_USB_Device_Init+0x54>)
 801583a:	f7fe fd43 	bl	80142c4 <USBD_Init>
 801583e:	4603      	mov	r3, r0
 8015840:	2b00      	cmp	r3, #0
 8015842:	d001      	beq.n	8015848 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8015844:	f7f2 ff1f 	bl	8008686 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8015848:	490f      	ldr	r1, [pc, #60]	@ (8015888 <MX_USB_Device_Init+0x58>)
 801584a:	480e      	ldr	r0, [pc, #56]	@ (8015884 <MX_USB_Device_Init+0x54>)
 801584c:	f7fe fd78 	bl	8014340 <USBD_RegisterClass>
 8015850:	4603      	mov	r3, r0
 8015852:	2b00      	cmp	r3, #0
 8015854:	d001      	beq.n	801585a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8015856:	f7f2 ff16 	bl	8008686 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801585a:	490c      	ldr	r1, [pc, #48]	@ (801588c <MX_USB_Device_Init+0x5c>)
 801585c:	4809      	ldr	r0, [pc, #36]	@ (8015884 <MX_USB_Device_Init+0x54>)
 801585e:	f7fe fc61 	bl	8014124 <USBD_CDC_RegisterInterface>
 8015862:	4603      	mov	r3, r0
 8015864:	2b00      	cmp	r3, #0
 8015866:	d001      	beq.n	801586c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8015868:	f7f2 ff0d 	bl	8008686 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801586c:	4805      	ldr	r0, [pc, #20]	@ (8015884 <MX_USB_Device_Init+0x54>)
 801586e:	f7fe fdab 	bl	80143c8 <USBD_Start>
 8015872:	4603      	mov	r3, r0
 8015874:	2b00      	cmp	r3, #0
 8015876:	d001      	beq.n	801587c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8015878:	f7f2 ff05 	bl	8008686 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801587c:	bf00      	nop
 801587e:	bd80      	pop	{r7, pc}
 8015880:	200000e4 	.word	0x200000e4
 8015884:	2000081c 	.word	0x2000081c
 8015888:	20000050 	.word	0x20000050
 801588c:	200000d0 	.word	0x200000d0

08015890 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015894:	2200      	movs	r2, #0
 8015896:	4905      	ldr	r1, [pc, #20]	@ (80158ac <CDC_Init_FS+0x1c>)
 8015898:	4805      	ldr	r0, [pc, #20]	@ (80158b0 <CDC_Init_FS+0x20>)
 801589a:	f7fe fc5d 	bl	8014158 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801589e:	4905      	ldr	r1, [pc, #20]	@ (80158b4 <CDC_Init_FS+0x24>)
 80158a0:	4803      	ldr	r0, [pc, #12]	@ (80158b0 <CDC_Init_FS+0x20>)
 80158a2:	f7fe fc7b 	bl	801419c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80158a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80158a8:	4618      	mov	r0, r3
 80158aa:	bd80      	pop	{r7, pc}
 80158ac:	200012f8 	.word	0x200012f8
 80158b0:	2000081c 	.word	0x2000081c
 80158b4:	20000af8 	.word	0x20000af8

080158b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80158b8:	b480      	push	{r7}
 80158ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80158bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80158be:	4618      	mov	r0, r3
 80158c0:	46bd      	mov	sp, r7
 80158c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c6:	4770      	bx	lr

080158c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80158c8:	b480      	push	{r7}
 80158ca:	b083      	sub	sp, #12
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	4603      	mov	r3, r0
 80158d0:	6039      	str	r1, [r7, #0]
 80158d2:	71fb      	strb	r3, [r7, #7]
 80158d4:	4613      	mov	r3, r2
 80158d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80158d8:	79fb      	ldrb	r3, [r7, #7]
 80158da:	2b23      	cmp	r3, #35	@ 0x23
 80158dc:	d84a      	bhi.n	8015974 <CDC_Control_FS+0xac>
 80158de:	a201      	add	r2, pc, #4	@ (adr r2, 80158e4 <CDC_Control_FS+0x1c>)
 80158e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158e4:	08015975 	.word	0x08015975
 80158e8:	08015975 	.word	0x08015975
 80158ec:	08015975 	.word	0x08015975
 80158f0:	08015975 	.word	0x08015975
 80158f4:	08015975 	.word	0x08015975
 80158f8:	08015975 	.word	0x08015975
 80158fc:	08015975 	.word	0x08015975
 8015900:	08015975 	.word	0x08015975
 8015904:	08015975 	.word	0x08015975
 8015908:	08015975 	.word	0x08015975
 801590c:	08015975 	.word	0x08015975
 8015910:	08015975 	.word	0x08015975
 8015914:	08015975 	.word	0x08015975
 8015918:	08015975 	.word	0x08015975
 801591c:	08015975 	.word	0x08015975
 8015920:	08015975 	.word	0x08015975
 8015924:	08015975 	.word	0x08015975
 8015928:	08015975 	.word	0x08015975
 801592c:	08015975 	.word	0x08015975
 8015930:	08015975 	.word	0x08015975
 8015934:	08015975 	.word	0x08015975
 8015938:	08015975 	.word	0x08015975
 801593c:	08015975 	.word	0x08015975
 8015940:	08015975 	.word	0x08015975
 8015944:	08015975 	.word	0x08015975
 8015948:	08015975 	.word	0x08015975
 801594c:	08015975 	.word	0x08015975
 8015950:	08015975 	.word	0x08015975
 8015954:	08015975 	.word	0x08015975
 8015958:	08015975 	.word	0x08015975
 801595c:	08015975 	.word	0x08015975
 8015960:	08015975 	.word	0x08015975
 8015964:	08015975 	.word	0x08015975
 8015968:	08015975 	.word	0x08015975
 801596c:	08015975 	.word	0x08015975
 8015970:	08015975 	.word	0x08015975
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015974:	bf00      	nop
  }

  return (USBD_OK);
 8015976:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015978:	4618      	mov	r0, r3
 801597a:	370c      	adds	r7, #12
 801597c:	46bd      	mov	sp, r7
 801597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015982:	4770      	bx	lr

08015984 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b082      	sub	sp, #8
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
 801598c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801598e:	6879      	ldr	r1, [r7, #4]
 8015990:	4805      	ldr	r0, [pc, #20]	@ (80159a8 <CDC_Receive_FS+0x24>)
 8015992:	f7fe fc03 	bl	801419c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015996:	4804      	ldr	r0, [pc, #16]	@ (80159a8 <CDC_Receive_FS+0x24>)
 8015998:	f7fe fc5e 	bl	8014258 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801599c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801599e:	4618      	mov	r0, r3
 80159a0:	3708      	adds	r7, #8
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}
 80159a6:	bf00      	nop
 80159a8:	2000081c 	.word	0x2000081c

080159ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b084      	sub	sp, #16
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
 80159b4:	460b      	mov	r3, r1
 80159b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80159b8:	2300      	movs	r3, #0
 80159ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80159bc:	4b0d      	ldr	r3, [pc, #52]	@ (80159f4 <CDC_Transmit_FS+0x48>)
 80159be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80159c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d001      	beq.n	80159d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80159ce:	2301      	movs	r3, #1
 80159d0:	e00b      	b.n	80159ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80159d2:	887b      	ldrh	r3, [r7, #2]
 80159d4:	461a      	mov	r2, r3
 80159d6:	6879      	ldr	r1, [r7, #4]
 80159d8:	4806      	ldr	r0, [pc, #24]	@ (80159f4 <CDC_Transmit_FS+0x48>)
 80159da:	f7fe fbbd 	bl	8014158 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80159de:	4805      	ldr	r0, [pc, #20]	@ (80159f4 <CDC_Transmit_FS+0x48>)
 80159e0:	f7fe fbfa 	bl	80141d8 <USBD_CDC_TransmitPacket>
 80159e4:	4603      	mov	r3, r0
 80159e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80159e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80159ea:	4618      	mov	r0, r3
 80159ec:	3710      	adds	r7, #16
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}
 80159f2:	bf00      	nop
 80159f4:	2000081c 	.word	0x2000081c

080159f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80159f8:	b480      	push	{r7}
 80159fa:	b087      	sub	sp, #28
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	60f8      	str	r0, [r7, #12]
 8015a00:	60b9      	str	r1, [r7, #8]
 8015a02:	4613      	mov	r3, r2
 8015a04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015a06:	2300      	movs	r3, #0
 8015a08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015a0e:	4618      	mov	r0, r3
 8015a10:	371c      	adds	r7, #28
 8015a12:	46bd      	mov	sp, r7
 8015a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a18:	4770      	bx	lr
	...

08015a1c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a1c:	b480      	push	{r7}
 8015a1e:	b083      	sub	sp, #12
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	4603      	mov	r3, r0
 8015a24:	6039      	str	r1, [r7, #0]
 8015a26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8015a28:	683b      	ldr	r3, [r7, #0]
 8015a2a:	2212      	movs	r2, #18
 8015a2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8015a2e:	4b03      	ldr	r3, [pc, #12]	@ (8015a3c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8015a30:	4618      	mov	r0, r3
 8015a32:	370c      	adds	r7, #12
 8015a34:	46bd      	mov	sp, r7
 8015a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3a:	4770      	bx	lr
 8015a3c:	20000104 	.word	0x20000104

08015a40 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a40:	b480      	push	{r7}
 8015a42:	b083      	sub	sp, #12
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	4603      	mov	r3, r0
 8015a48:	6039      	str	r1, [r7, #0]
 8015a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015a4c:	683b      	ldr	r3, [r7, #0]
 8015a4e:	2204      	movs	r2, #4
 8015a50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015a52:	4b03      	ldr	r3, [pc, #12]	@ (8015a60 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8015a54:	4618      	mov	r0, r3
 8015a56:	370c      	adds	r7, #12
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5e:	4770      	bx	lr
 8015a60:	20000118 	.word	0x20000118

08015a64 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b082      	sub	sp, #8
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	6039      	str	r1, [r7, #0]
 8015a6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015a70:	79fb      	ldrb	r3, [r7, #7]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d105      	bne.n	8015a82 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015a76:	683a      	ldr	r2, [r7, #0]
 8015a78:	4907      	ldr	r1, [pc, #28]	@ (8015a98 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015a7a:	4808      	ldr	r0, [pc, #32]	@ (8015a9c <USBD_CDC_ProductStrDescriptor+0x38>)
 8015a7c:	f7ff fdec 	bl	8015658 <USBD_GetString>
 8015a80:	e004      	b.n	8015a8c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015a82:	683a      	ldr	r2, [r7, #0]
 8015a84:	4904      	ldr	r1, [pc, #16]	@ (8015a98 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015a86:	4805      	ldr	r0, [pc, #20]	@ (8015a9c <USBD_CDC_ProductStrDescriptor+0x38>)
 8015a88:	f7ff fde6 	bl	8015658 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015a8c:	4b02      	ldr	r3, [pc, #8]	@ (8015a98 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3708      	adds	r7, #8
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}
 8015a96:	bf00      	nop
 8015a98:	20001af8 	.word	0x20001af8
 8015a9c:	0801ac68 	.word	0x0801ac68

08015aa0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b082      	sub	sp, #8
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	6039      	str	r1, [r7, #0]
 8015aaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015aac:	683a      	ldr	r2, [r7, #0]
 8015aae:	4904      	ldr	r1, [pc, #16]	@ (8015ac0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8015ab0:	4804      	ldr	r0, [pc, #16]	@ (8015ac4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8015ab2:	f7ff fdd1 	bl	8015658 <USBD_GetString>
  return USBD_StrDesc;
 8015ab6:	4b02      	ldr	r3, [pc, #8]	@ (8015ac0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8015ab8:	4618      	mov	r0, r3
 8015aba:	3708      	adds	r7, #8
 8015abc:	46bd      	mov	sp, r7
 8015abe:	bd80      	pop	{r7, pc}
 8015ac0:	20001af8 	.word	0x20001af8
 8015ac4:	0801ac80 	.word	0x0801ac80

08015ac8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b082      	sub	sp, #8
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	4603      	mov	r3, r0
 8015ad0:	6039      	str	r1, [r7, #0]
 8015ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	221a      	movs	r2, #26
 8015ad8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015ada:	f000 f843 	bl	8015b64 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8015ade:	4b02      	ldr	r3, [pc, #8]	@ (8015ae8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	3708      	adds	r7, #8
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	bd80      	pop	{r7, pc}
 8015ae8:	2000011c 	.word	0x2000011c

08015aec <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b082      	sub	sp, #8
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	4603      	mov	r3, r0
 8015af4:	6039      	str	r1, [r7, #0]
 8015af6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015af8:	79fb      	ldrb	r3, [r7, #7]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d105      	bne.n	8015b0a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8015afe:	683a      	ldr	r2, [r7, #0]
 8015b00:	4907      	ldr	r1, [pc, #28]	@ (8015b20 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8015b02:	4808      	ldr	r0, [pc, #32]	@ (8015b24 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015b04:	f7ff fda8 	bl	8015658 <USBD_GetString>
 8015b08:	e004      	b.n	8015b14 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8015b0a:	683a      	ldr	r2, [r7, #0]
 8015b0c:	4904      	ldr	r1, [pc, #16]	@ (8015b20 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8015b0e:	4805      	ldr	r0, [pc, #20]	@ (8015b24 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015b10:	f7ff fda2 	bl	8015658 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015b14:	4b02      	ldr	r3, [pc, #8]	@ (8015b20 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8015b16:	4618      	mov	r0, r3
 8015b18:	3708      	adds	r7, #8
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	bd80      	pop	{r7, pc}
 8015b1e:	bf00      	nop
 8015b20:	20001af8 	.word	0x20001af8
 8015b24:	0801ac94 	.word	0x0801ac94

08015b28 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b082      	sub	sp, #8
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	4603      	mov	r3, r0
 8015b30:	6039      	str	r1, [r7, #0]
 8015b32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015b34:	79fb      	ldrb	r3, [r7, #7]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d105      	bne.n	8015b46 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015b3a:	683a      	ldr	r2, [r7, #0]
 8015b3c:	4907      	ldr	r1, [pc, #28]	@ (8015b5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015b3e:	4808      	ldr	r0, [pc, #32]	@ (8015b60 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015b40:	f7ff fd8a 	bl	8015658 <USBD_GetString>
 8015b44:	e004      	b.n	8015b50 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015b46:	683a      	ldr	r2, [r7, #0]
 8015b48:	4904      	ldr	r1, [pc, #16]	@ (8015b5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015b4a:	4805      	ldr	r0, [pc, #20]	@ (8015b60 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015b4c:	f7ff fd84 	bl	8015658 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015b50:	4b02      	ldr	r3, [pc, #8]	@ (8015b5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8015b52:	4618      	mov	r0, r3
 8015b54:	3708      	adds	r7, #8
 8015b56:	46bd      	mov	sp, r7
 8015b58:	bd80      	pop	{r7, pc}
 8015b5a:	bf00      	nop
 8015b5c:	20001af8 	.word	0x20001af8
 8015b60:	0801aca0 	.word	0x0801aca0

08015b64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b084      	sub	sp, #16
 8015b68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8015ba8 <Get_SerialNum+0x44>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015b70:	4b0e      	ldr	r3, [pc, #56]	@ (8015bac <Get_SerialNum+0x48>)
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015b76:	4b0e      	ldr	r3, [pc, #56]	@ (8015bb0 <Get_SerialNum+0x4c>)
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015b7c:	68fa      	ldr	r2, [r7, #12]
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	4413      	add	r3, r2
 8015b82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d009      	beq.n	8015b9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015b8a:	2208      	movs	r2, #8
 8015b8c:	4909      	ldr	r1, [pc, #36]	@ (8015bb4 <Get_SerialNum+0x50>)
 8015b8e:	68f8      	ldr	r0, [r7, #12]
 8015b90:	f000 f814 	bl	8015bbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015b94:	2204      	movs	r2, #4
 8015b96:	4908      	ldr	r1, [pc, #32]	@ (8015bb8 <Get_SerialNum+0x54>)
 8015b98:	68b8      	ldr	r0, [r7, #8]
 8015b9a:	f000 f80f 	bl	8015bbc <IntToUnicode>
  }
}
 8015b9e:	bf00      	nop
 8015ba0:	3710      	adds	r7, #16
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	1fff7590 	.word	0x1fff7590
 8015bac:	1fff7594 	.word	0x1fff7594
 8015bb0:	1fff7598 	.word	0x1fff7598
 8015bb4:	2000011e 	.word	0x2000011e
 8015bb8:	2000012e 	.word	0x2000012e

08015bbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015bbc:	b480      	push	{r7}
 8015bbe:	b087      	sub	sp, #28
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	60f8      	str	r0, [r7, #12]
 8015bc4:	60b9      	str	r1, [r7, #8]
 8015bc6:	4613      	mov	r3, r2
 8015bc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015bca:	2300      	movs	r3, #0
 8015bcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015bce:	2300      	movs	r3, #0
 8015bd0:	75fb      	strb	r3, [r7, #23]
 8015bd2:	e027      	b.n	8015c24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	0f1b      	lsrs	r3, r3, #28
 8015bd8:	2b09      	cmp	r3, #9
 8015bda:	d80b      	bhi.n	8015bf4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	0f1b      	lsrs	r3, r3, #28
 8015be0:	b2da      	uxtb	r2, r3
 8015be2:	7dfb      	ldrb	r3, [r7, #23]
 8015be4:	005b      	lsls	r3, r3, #1
 8015be6:	4619      	mov	r1, r3
 8015be8:	68bb      	ldr	r3, [r7, #8]
 8015bea:	440b      	add	r3, r1
 8015bec:	3230      	adds	r2, #48	@ 0x30
 8015bee:	b2d2      	uxtb	r2, r2
 8015bf0:	701a      	strb	r2, [r3, #0]
 8015bf2:	e00a      	b.n	8015c0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	0f1b      	lsrs	r3, r3, #28
 8015bf8:	b2da      	uxtb	r2, r3
 8015bfa:	7dfb      	ldrb	r3, [r7, #23]
 8015bfc:	005b      	lsls	r3, r3, #1
 8015bfe:	4619      	mov	r1, r3
 8015c00:	68bb      	ldr	r3, [r7, #8]
 8015c02:	440b      	add	r3, r1
 8015c04:	3237      	adds	r2, #55	@ 0x37
 8015c06:	b2d2      	uxtb	r2, r2
 8015c08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	011b      	lsls	r3, r3, #4
 8015c0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015c10:	7dfb      	ldrb	r3, [r7, #23]
 8015c12:	005b      	lsls	r3, r3, #1
 8015c14:	3301      	adds	r3, #1
 8015c16:	68ba      	ldr	r2, [r7, #8]
 8015c18:	4413      	add	r3, r2
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015c1e:	7dfb      	ldrb	r3, [r7, #23]
 8015c20:	3301      	adds	r3, #1
 8015c22:	75fb      	strb	r3, [r7, #23]
 8015c24:	7dfa      	ldrb	r2, [r7, #23]
 8015c26:	79fb      	ldrb	r3, [r7, #7]
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	d3d3      	bcc.n	8015bd4 <IntToUnicode+0x18>
  }
}
 8015c2c:	bf00      	nop
 8015c2e:	bf00      	nop
 8015c30:	371c      	adds	r7, #28
 8015c32:	46bd      	mov	sp, r7
 8015c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c38:	4770      	bx	lr

08015c3a <LL_AHB2_GRP1_EnableClock>:
{
 8015c3a:	b480      	push	{r7}
 8015c3c:	b085      	sub	sp, #20
 8015c3e:	af00      	add	r7, sp, #0
 8015c40:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8015c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015c46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015c48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	4313      	orrs	r3, r2
 8015c50:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8015c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015c56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	4013      	ands	r3, r2
 8015c5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015c5e:	68fb      	ldr	r3, [r7, #12]
}
 8015c60:	bf00      	nop
 8015c62:	3714      	adds	r7, #20
 8015c64:	46bd      	mov	sp, r7
 8015c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6a:	4770      	bx	lr

08015c6c <LL_APB1_GRP1_EnableClock>:
{
 8015c6c:	b480      	push	{r7}
 8015c6e:	b085      	sub	sp, #20
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8015c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015c78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015c7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	4313      	orrs	r3, r2
 8015c82:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8015c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015c88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	4013      	ands	r3, r2
 8015c8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015c90:	68fb      	ldr	r3, [r7, #12]
}
 8015c92:	bf00      	nop
 8015c94:	3714      	adds	r7, #20
 8015c96:	46bd      	mov	sp, r7
 8015c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9c:	4770      	bx	lr
	...

08015ca0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b088      	sub	sp, #32
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015ca8:	f107 030c 	add.w	r3, r7, #12
 8015cac:	2200      	movs	r2, #0
 8015cae:	601a      	str	r2, [r3, #0]
 8015cb0:	605a      	str	r2, [r3, #4]
 8015cb2:	609a      	str	r2, [r3, #8]
 8015cb4:	60da      	str	r2, [r3, #12]
 8015cb6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	4a17      	ldr	r2, [pc, #92]	@ (8015d1c <HAL_PCD_MspInit+0x7c>)
 8015cbe:	4293      	cmp	r3, r2
 8015cc0:	d128      	bne.n	8015d14 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015cc2:	2001      	movs	r0, #1
 8015cc4:	f7ff ffb9 	bl	8015c3a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8015cc8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8015ccc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015cce:	2302      	movs	r3, #2
 8015cd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8015cda:	230a      	movs	r3, #10
 8015cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015cde:	f107 030c 	add.w	r3, r7, #12
 8015ce2:	4619      	mov	r1, r3
 8015ce4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8015ce8:	f7f5 f898 	bl	800ae1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015cec:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8015cf0:	f7ff ffbc 	bl	8015c6c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	2100      	movs	r1, #0
 8015cf8:	2013      	movs	r0, #19
 8015cfa:	f7f4 fd78 	bl	800a7ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8015cfe:	2013      	movs	r0, #19
 8015d00:	f7f4 fd8f 	bl	800a822 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8015d04:	2200      	movs	r2, #0
 8015d06:	2100      	movs	r1, #0
 8015d08:	2014      	movs	r0, #20
 8015d0a:	f7f4 fd70 	bl	800a7ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8015d0e:	2014      	movs	r0, #20
 8015d10:	f7f4 fd87 	bl	800a822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8015d14:	bf00      	nop
 8015d16:	3720      	adds	r7, #32
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}
 8015d1c:	40006800 	.word	0x40006800

08015d20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b082      	sub	sp, #8
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8015d34:	4619      	mov	r1, r3
 8015d36:	4610      	mov	r0, r2
 8015d38:	f7fe fb93 	bl	8014462 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8015d3c:	bf00      	nop
 8015d3e:	3708      	adds	r7, #8
 8015d40:	46bd      	mov	sp, r7
 8015d42:	bd80      	pop	{r7, pc}

08015d44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
 8015d4c:	460b      	mov	r3, r1
 8015d4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8015d56:	78fa      	ldrb	r2, [r7, #3]
 8015d58:	6879      	ldr	r1, [r7, #4]
 8015d5a:	4613      	mov	r3, r2
 8015d5c:	009b      	lsls	r3, r3, #2
 8015d5e:	4413      	add	r3, r2
 8015d60:	00db      	lsls	r3, r3, #3
 8015d62:	440b      	add	r3, r1
 8015d64:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015d68:	681a      	ldr	r2, [r3, #0]
 8015d6a:	78fb      	ldrb	r3, [r7, #3]
 8015d6c:	4619      	mov	r1, r3
 8015d6e:	f7fe fbcd 	bl	801450c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8015d72:	bf00      	nop
 8015d74:	3708      	adds	r7, #8
 8015d76:	46bd      	mov	sp, r7
 8015d78:	bd80      	pop	{r7, pc}

08015d7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d7a:	b580      	push	{r7, lr}
 8015d7c:	b082      	sub	sp, #8
 8015d7e:	af00      	add	r7, sp, #0
 8015d80:	6078      	str	r0, [r7, #4]
 8015d82:	460b      	mov	r3, r1
 8015d84:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8015d8c:	78fa      	ldrb	r2, [r7, #3]
 8015d8e:	6879      	ldr	r1, [r7, #4]
 8015d90:	4613      	mov	r3, r2
 8015d92:	009b      	lsls	r3, r3, #2
 8015d94:	4413      	add	r3, r2
 8015d96:	00db      	lsls	r3, r3, #3
 8015d98:	440b      	add	r3, r1
 8015d9a:	3324      	adds	r3, #36	@ 0x24
 8015d9c:	681a      	ldr	r2, [r3, #0]
 8015d9e:	78fb      	ldrb	r3, [r7, #3]
 8015da0:	4619      	mov	r1, r3
 8015da2:	f7fe fc66 	bl	8014672 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8015da6:	bf00      	nop
 8015da8:	3708      	adds	r7, #8
 8015daa:	46bd      	mov	sp, r7
 8015dac:	bd80      	pop	{r7, pc}

08015dae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015dae:	b580      	push	{r7, lr}
 8015db0:	b082      	sub	sp, #8
 8015db2:	af00      	add	r7, sp, #0
 8015db4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	f7fe fda0 	bl	8014902 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8015dc2:	bf00      	nop
 8015dc4:	3708      	adds	r7, #8
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bd80      	pop	{r7, pc}

08015dca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015dca:	b580      	push	{r7, lr}
 8015dcc:	b084      	sub	sp, #16
 8015dce:	af00      	add	r7, sp, #0
 8015dd0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	795b      	ldrb	r3, [r3, #5]
 8015dda:	2b02      	cmp	r3, #2
 8015ddc:	d001      	beq.n	8015de2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015dde:	f7f2 fc52 	bl	8008686 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015de8:	7bfa      	ldrb	r2, [r7, #15]
 8015dea:	4611      	mov	r1, r2
 8015dec:	4618      	mov	r0, r3
 8015dee:	f7fe fd44 	bl	801487a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015df8:	4618      	mov	r0, r3
 8015dfa:	f7fe fcec 	bl	80147d6 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8015dfe:	bf00      	nop
 8015e00:	3710      	adds	r7, #16
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}
	...

08015e08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015e16:	4618      	mov	r0, r3
 8015e18:	f7fe fd3f 	bl	801489a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	7a5b      	ldrb	r3, [r3, #9]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d005      	beq.n	8015e30 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015e24:	4b04      	ldr	r3, [pc, #16]	@ (8015e38 <HAL_PCD_SuspendCallback+0x30>)
 8015e26:	691b      	ldr	r3, [r3, #16]
 8015e28:	4a03      	ldr	r2, [pc, #12]	@ (8015e38 <HAL_PCD_SuspendCallback+0x30>)
 8015e2a:	f043 0306 	orr.w	r3, r3, #6
 8015e2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8015e30:	bf00      	nop
 8015e32:	3708      	adds	r7, #8
 8015e34:	46bd      	mov	sp, r7
 8015e36:	bd80      	pop	{r7, pc}
 8015e38:	e000ed00 	.word	0xe000ed00

08015e3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b082      	sub	sp, #8
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	7a5b      	ldrb	r3, [r3, #9]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d007      	beq.n	8015e5c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015e4c:	4b08      	ldr	r3, [pc, #32]	@ (8015e70 <HAL_PCD_ResumeCallback+0x34>)
 8015e4e:	691b      	ldr	r3, [r3, #16]
 8015e50:	4a07      	ldr	r2, [pc, #28]	@ (8015e70 <HAL_PCD_ResumeCallback+0x34>)
 8015e52:	f023 0306 	bic.w	r3, r3, #6
 8015e56:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8015e58:	f000 f9fa 	bl	8016250 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015e62:	4618      	mov	r0, r3
 8015e64:	f7fe fd35 	bl	80148d2 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8015e68:	bf00      	nop
 8015e6a:	3708      	adds	r7, #8
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	bd80      	pop	{r7, pc}
 8015e70:	e000ed00 	.word	0xe000ed00

08015e74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b082      	sub	sp, #8
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8015e7c:	4a2c      	ldr	r2, [pc, #176]	@ (8015f30 <USBD_LL_Init+0xbc>)
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	4a2a      	ldr	r2, [pc, #168]	@ (8015f30 <USBD_LL_Init+0xbc>)
 8015e88:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8015e8c:	f7f8 fa9a 	bl	800e3c4 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8015e90:	4b27      	ldr	r3, [pc, #156]	@ (8015f30 <USBD_LL_Init+0xbc>)
 8015e92:	4a28      	ldr	r2, [pc, #160]	@ (8015f34 <USBD_LL_Init+0xc0>)
 8015e94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8015e96:	4b26      	ldr	r3, [pc, #152]	@ (8015f30 <USBD_LL_Init+0xbc>)
 8015e98:	2208      	movs	r2, #8
 8015e9a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015e9c:	4b24      	ldr	r3, [pc, #144]	@ (8015f30 <USBD_LL_Init+0xbc>)
 8015e9e:	2202      	movs	r2, #2
 8015ea0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015ea2:	4b23      	ldr	r3, [pc, #140]	@ (8015f30 <USBD_LL_Init+0xbc>)
 8015ea4:	2202      	movs	r2, #2
 8015ea6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8015ea8:	4b21      	ldr	r3, [pc, #132]	@ (8015f30 <USBD_LL_Init+0xbc>)
 8015eaa:	2200      	movs	r2, #0
 8015eac:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015eae:	4b20      	ldr	r3, [pc, #128]	@ (8015f30 <USBD_LL_Init+0xbc>)
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8015f30 <USBD_LL_Init+0xbc>)
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015eba:	4b1d      	ldr	r3, [pc, #116]	@ (8015f30 <USBD_LL_Init+0xbc>)
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015ec0:	481b      	ldr	r0, [pc, #108]	@ (8015f30 <USBD_LL_Init+0xbc>)
 8015ec2:	f7f6 fd2e 	bl	800c922 <HAL_PCD_Init>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d001      	beq.n	8015ed0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8015ecc:	f7f2 fbdb 	bl	8008686 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015ed6:	2318      	movs	r3, #24
 8015ed8:	2200      	movs	r2, #0
 8015eda:	2100      	movs	r1, #0
 8015edc:	f7f8 f9e7 	bl	800e2ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015ee6:	2358      	movs	r3, #88	@ 0x58
 8015ee8:	2200      	movs	r2, #0
 8015eea:	2180      	movs	r1, #128	@ 0x80
 8015eec:	f7f8 f9df 	bl	800e2ae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015ef6:	23c0      	movs	r3, #192	@ 0xc0
 8015ef8:	2200      	movs	r2, #0
 8015efa:	2181      	movs	r1, #129	@ 0x81
 8015efc:	f7f8 f9d7 	bl	800e2ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015f06:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	2101      	movs	r1, #1
 8015f0e:	f7f8 f9ce 	bl	800e2ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015f18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015f1c:	2200      	movs	r2, #0
 8015f1e:	2182      	movs	r1, #130	@ 0x82
 8015f20:	f7f8 f9c5 	bl	800e2ae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015f24:	2300      	movs	r3, #0
}
 8015f26:	4618      	mov	r0, r3
 8015f28:	3708      	adds	r7, #8
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd80      	pop	{r7, pc}
 8015f2e:	bf00      	nop
 8015f30:	20001cf8 	.word	0x20001cf8
 8015f34:	40006800 	.word	0x40006800

08015f38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015f38:	b580      	push	{r7, lr}
 8015f3a:	b084      	sub	sp, #16
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f40:	2300      	movs	r3, #0
 8015f42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f44:	2300      	movs	r3, #0
 8015f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015f4e:	4618      	mov	r0, r3
 8015f50:	f7f6 fdb5 	bl	800cabe <HAL_PCD_Start>
 8015f54:	4603      	mov	r3, r0
 8015f56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f58:	7bfb      	ldrb	r3, [r7, #15]
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f000 f97e 	bl	801625c <USBD_Get_USB_Status>
 8015f60:	4603      	mov	r3, r0
 8015f62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f64:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f66:	4618      	mov	r0, r3
 8015f68:	3710      	adds	r7, #16
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}

08015f6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015f6e:	b580      	push	{r7, lr}
 8015f70:	b084      	sub	sp, #16
 8015f72:	af00      	add	r7, sp, #0
 8015f74:	6078      	str	r0, [r7, #4]
 8015f76:	4608      	mov	r0, r1
 8015f78:	4611      	mov	r1, r2
 8015f7a:	461a      	mov	r2, r3
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	70fb      	strb	r3, [r7, #3]
 8015f80:	460b      	mov	r3, r1
 8015f82:	70bb      	strb	r3, [r7, #2]
 8015f84:	4613      	mov	r3, r2
 8015f86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f88:	2300      	movs	r3, #0
 8015f8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015f96:	78bb      	ldrb	r3, [r7, #2]
 8015f98:	883a      	ldrh	r2, [r7, #0]
 8015f9a:	78f9      	ldrb	r1, [r7, #3]
 8015f9c:	f7f6 fefc 	bl	800cd98 <HAL_PCD_EP_Open>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015fa4:	7bfb      	ldrb	r3, [r7, #15]
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f000 f958 	bl	801625c <USBD_Get_USB_Status>
 8015fac:	4603      	mov	r3, r0
 8015fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	3710      	adds	r7, #16
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}

08015fba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015fba:	b580      	push	{r7, lr}
 8015fbc:	b084      	sub	sp, #16
 8015fbe:	af00      	add	r7, sp, #0
 8015fc0:	6078      	str	r0, [r7, #4]
 8015fc2:	460b      	mov	r3, r1
 8015fc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015fca:	2300      	movs	r3, #0
 8015fcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015fd4:	78fa      	ldrb	r2, [r7, #3]
 8015fd6:	4611      	mov	r1, r2
 8015fd8:	4618      	mov	r0, r3
 8015fda:	f7f6 ff3a 	bl	800ce52 <HAL_PCD_EP_Close>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015fe2:	7bfb      	ldrb	r3, [r7, #15]
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f000 f939 	bl	801625c <USBD_Get_USB_Status>
 8015fea:	4603      	mov	r3, r0
 8015fec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	3710      	adds	r7, #16
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}

08015ff8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b084      	sub	sp, #16
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
 8016000:	460b      	mov	r3, r1
 8016002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016004:	2300      	movs	r3, #0
 8016006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016008:	2300      	movs	r3, #0
 801600a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016012:	78fa      	ldrb	r2, [r7, #3]
 8016014:	4611      	mov	r1, r2
 8016016:	4618      	mov	r0, r3
 8016018:	f7f6 ffe3 	bl	800cfe2 <HAL_PCD_EP_SetStall>
 801601c:	4603      	mov	r3, r0
 801601e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016020:	7bfb      	ldrb	r3, [r7, #15]
 8016022:	4618      	mov	r0, r3
 8016024:	f000 f91a 	bl	801625c <USBD_Get_USB_Status>
 8016028:	4603      	mov	r3, r0
 801602a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801602c:	7bbb      	ldrb	r3, [r7, #14]
}
 801602e:	4618      	mov	r0, r3
 8016030:	3710      	adds	r7, #16
 8016032:	46bd      	mov	sp, r7
 8016034:	bd80      	pop	{r7, pc}

08016036 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016036:	b580      	push	{r7, lr}
 8016038:	b084      	sub	sp, #16
 801603a:	af00      	add	r7, sp, #0
 801603c:	6078      	str	r0, [r7, #4]
 801603e:	460b      	mov	r3, r1
 8016040:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016042:	2300      	movs	r3, #0
 8016044:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016046:	2300      	movs	r3, #0
 8016048:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016050:	78fa      	ldrb	r2, [r7, #3]
 8016052:	4611      	mov	r1, r2
 8016054:	4618      	mov	r0, r3
 8016056:	f7f7 f816 	bl	800d086 <HAL_PCD_EP_ClrStall>
 801605a:	4603      	mov	r3, r0
 801605c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801605e:	7bfb      	ldrb	r3, [r7, #15]
 8016060:	4618      	mov	r0, r3
 8016062:	f000 f8fb 	bl	801625c <USBD_Get_USB_Status>
 8016066:	4603      	mov	r3, r0
 8016068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801606a:	7bbb      	ldrb	r3, [r7, #14]
}
 801606c:	4618      	mov	r0, r3
 801606e:	3710      	adds	r7, #16
 8016070:	46bd      	mov	sp, r7
 8016072:	bd80      	pop	{r7, pc}

08016074 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016074:	b480      	push	{r7}
 8016076:	b085      	sub	sp, #20
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
 801607c:	460b      	mov	r3, r1
 801607e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016086:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801608c:	2b00      	cmp	r3, #0
 801608e:	da0b      	bge.n	80160a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016090:	78fb      	ldrb	r3, [r7, #3]
 8016092:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016096:	68f9      	ldr	r1, [r7, #12]
 8016098:	4613      	mov	r3, r2
 801609a:	009b      	lsls	r3, r3, #2
 801609c:	4413      	add	r3, r2
 801609e:	00db      	lsls	r3, r3, #3
 80160a0:	440b      	add	r3, r1
 80160a2:	3312      	adds	r3, #18
 80160a4:	781b      	ldrb	r3, [r3, #0]
 80160a6:	e00b      	b.n	80160c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80160a8:	78fb      	ldrb	r3, [r7, #3]
 80160aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80160ae:	68f9      	ldr	r1, [r7, #12]
 80160b0:	4613      	mov	r3, r2
 80160b2:	009b      	lsls	r3, r3, #2
 80160b4:	4413      	add	r3, r2
 80160b6:	00db      	lsls	r3, r3, #3
 80160b8:	440b      	add	r3, r1
 80160ba:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80160be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80160c0:	4618      	mov	r0, r3
 80160c2:	3714      	adds	r7, #20
 80160c4:	46bd      	mov	sp, r7
 80160c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ca:	4770      	bx	lr

080160cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b084      	sub	sp, #16
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
 80160d4:	460b      	mov	r3, r1
 80160d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160d8:	2300      	movs	r3, #0
 80160da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160dc:	2300      	movs	r3, #0
 80160de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80160e6:	78fa      	ldrb	r2, [r7, #3]
 80160e8:	4611      	mov	r1, r2
 80160ea:	4618      	mov	r0, r3
 80160ec:	f7f6 fe30 	bl	800cd50 <HAL_PCD_SetAddress>
 80160f0:	4603      	mov	r3, r0
 80160f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80160f4:	7bfb      	ldrb	r3, [r7, #15]
 80160f6:	4618      	mov	r0, r3
 80160f8:	f000 f8b0 	bl	801625c <USBD_Get_USB_Status>
 80160fc:	4603      	mov	r3, r0
 80160fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016100:	7bbb      	ldrb	r3, [r7, #14]
}
 8016102:	4618      	mov	r0, r3
 8016104:	3710      	adds	r7, #16
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}

0801610a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801610a:	b580      	push	{r7, lr}
 801610c:	b086      	sub	sp, #24
 801610e:	af00      	add	r7, sp, #0
 8016110:	60f8      	str	r0, [r7, #12]
 8016112:	607a      	str	r2, [r7, #4]
 8016114:	603b      	str	r3, [r7, #0]
 8016116:	460b      	mov	r3, r1
 8016118:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801611a:	2300      	movs	r3, #0
 801611c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801611e:	2300      	movs	r3, #0
 8016120:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016128:	7af9      	ldrb	r1, [r7, #11]
 801612a:	683b      	ldr	r3, [r7, #0]
 801612c:	687a      	ldr	r2, [r7, #4]
 801612e:	f7f6 ff21 	bl	800cf74 <HAL_PCD_EP_Transmit>
 8016132:	4603      	mov	r3, r0
 8016134:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016136:	7dfb      	ldrb	r3, [r7, #23]
 8016138:	4618      	mov	r0, r3
 801613a:	f000 f88f 	bl	801625c <USBD_Get_USB_Status>
 801613e:	4603      	mov	r3, r0
 8016140:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016142:	7dbb      	ldrb	r3, [r7, #22]
}
 8016144:	4618      	mov	r0, r3
 8016146:	3718      	adds	r7, #24
 8016148:	46bd      	mov	sp, r7
 801614a:	bd80      	pop	{r7, pc}

0801614c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801614c:	b580      	push	{r7, lr}
 801614e:	b086      	sub	sp, #24
 8016150:	af00      	add	r7, sp, #0
 8016152:	60f8      	str	r0, [r7, #12]
 8016154:	607a      	str	r2, [r7, #4]
 8016156:	603b      	str	r3, [r7, #0]
 8016158:	460b      	mov	r3, r1
 801615a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801615c:	2300      	movs	r3, #0
 801615e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016160:	2300      	movs	r3, #0
 8016162:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801616a:	7af9      	ldrb	r1, [r7, #11]
 801616c:	683b      	ldr	r3, [r7, #0]
 801616e:	687a      	ldr	r2, [r7, #4]
 8016170:	f7f6 feb7 	bl	800cee2 <HAL_PCD_EP_Receive>
 8016174:	4603      	mov	r3, r0
 8016176:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016178:	7dfb      	ldrb	r3, [r7, #23]
 801617a:	4618      	mov	r0, r3
 801617c:	f000 f86e 	bl	801625c <USBD_Get_USB_Status>
 8016180:	4603      	mov	r3, r0
 8016182:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016184:	7dbb      	ldrb	r3, [r7, #22]
}
 8016186:	4618      	mov	r0, r3
 8016188:	3718      	adds	r7, #24
 801618a:	46bd      	mov	sp, r7
 801618c:	bd80      	pop	{r7, pc}

0801618e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801618e:	b580      	push	{r7, lr}
 8016190:	b082      	sub	sp, #8
 8016192:	af00      	add	r7, sp, #0
 8016194:	6078      	str	r0, [r7, #4]
 8016196:	460b      	mov	r3, r1
 8016198:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80161a0:	78fa      	ldrb	r2, [r7, #3]
 80161a2:	4611      	mov	r1, r2
 80161a4:	4618      	mov	r0, r3
 80161a6:	f7f6 fecd 	bl	800cf44 <HAL_PCD_EP_GetRxCount>
 80161aa:	4603      	mov	r3, r0
}
 80161ac:	4618      	mov	r0, r3
 80161ae:	3708      	adds	r7, #8
 80161b0:	46bd      	mov	sp, r7
 80161b2:	bd80      	pop	{r7, pc}

080161b4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b082      	sub	sp, #8
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	6078      	str	r0, [r7, #4]
 80161bc:	460b      	mov	r3, r1
 80161be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80161c0:	78fb      	ldrb	r3, [r7, #3]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d002      	beq.n	80161cc <HAL_PCDEx_LPM_Callback+0x18>
 80161c6:	2b01      	cmp	r3, #1
 80161c8:	d013      	beq.n	80161f2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80161ca:	e023      	b.n	8016214 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	7a5b      	ldrb	r3, [r3, #9]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d007      	beq.n	80161e4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80161d4:	f000 f83c 	bl	8016250 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80161d8:	4b10      	ldr	r3, [pc, #64]	@ (801621c <HAL_PCDEx_LPM_Callback+0x68>)
 80161da:	691b      	ldr	r3, [r3, #16]
 80161dc:	4a0f      	ldr	r2, [pc, #60]	@ (801621c <HAL_PCDEx_LPM_Callback+0x68>)
 80161de:	f023 0306 	bic.w	r3, r3, #6
 80161e2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80161ea:	4618      	mov	r0, r3
 80161ec:	f7fe fb71 	bl	80148d2 <USBD_LL_Resume>
    break;
 80161f0:	e010      	b.n	8016214 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80161f8:	4618      	mov	r0, r3
 80161fa:	f7fe fb4e 	bl	801489a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	7a5b      	ldrb	r3, [r3, #9]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d005      	beq.n	8016212 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016206:	4b05      	ldr	r3, [pc, #20]	@ (801621c <HAL_PCDEx_LPM_Callback+0x68>)
 8016208:	691b      	ldr	r3, [r3, #16]
 801620a:	4a04      	ldr	r2, [pc, #16]	@ (801621c <HAL_PCDEx_LPM_Callback+0x68>)
 801620c:	f043 0306 	orr.w	r3, r3, #6
 8016210:	6113      	str	r3, [r2, #16]
    break;
 8016212:	bf00      	nop
}
 8016214:	bf00      	nop
 8016216:	3708      	adds	r7, #8
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}
 801621c:	e000ed00 	.word	0xe000ed00

08016220 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016220:	b480      	push	{r7}
 8016222:	b083      	sub	sp, #12
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016228:	4b03      	ldr	r3, [pc, #12]	@ (8016238 <USBD_static_malloc+0x18>)
}
 801622a:	4618      	mov	r0, r3
 801622c:	370c      	adds	r7, #12
 801622e:	46bd      	mov	sp, r7
 8016230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016234:	4770      	bx	lr
 8016236:	bf00      	nop
 8016238:	20001fd4 	.word	0x20001fd4

0801623c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801623c:	b480      	push	{r7}
 801623e:	b083      	sub	sp, #12
 8016240:	af00      	add	r7, sp, #0
 8016242:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016244:	bf00      	nop
 8016246:	370c      	adds	r7, #12
 8016248:	46bd      	mov	sp, r7
 801624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801624e:	4770      	bx	lr

08016250 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8016250:	b580      	push	{r7, lr}
 8016252:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8016254:	f7f1 ff64 	bl	8008120 <SystemClock_Config>
}
 8016258:	bf00      	nop
 801625a:	bd80      	pop	{r7, pc}

0801625c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801625c:	b480      	push	{r7}
 801625e:	b085      	sub	sp, #20
 8016260:	af00      	add	r7, sp, #0
 8016262:	4603      	mov	r3, r0
 8016264:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016266:	2300      	movs	r3, #0
 8016268:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801626a:	79fb      	ldrb	r3, [r7, #7]
 801626c:	2b03      	cmp	r3, #3
 801626e:	d817      	bhi.n	80162a0 <USBD_Get_USB_Status+0x44>
 8016270:	a201      	add	r2, pc, #4	@ (adr r2, 8016278 <USBD_Get_USB_Status+0x1c>)
 8016272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016276:	bf00      	nop
 8016278:	08016289 	.word	0x08016289
 801627c:	0801628f 	.word	0x0801628f
 8016280:	08016295 	.word	0x08016295
 8016284:	0801629b 	.word	0x0801629b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016288:	2300      	movs	r3, #0
 801628a:	73fb      	strb	r3, [r7, #15]
    break;
 801628c:	e00b      	b.n	80162a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801628e:	2303      	movs	r3, #3
 8016290:	73fb      	strb	r3, [r7, #15]
    break;
 8016292:	e008      	b.n	80162a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016294:	2301      	movs	r3, #1
 8016296:	73fb      	strb	r3, [r7, #15]
    break;
 8016298:	e005      	b.n	80162a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801629a:	2303      	movs	r3, #3
 801629c:	73fb      	strb	r3, [r7, #15]
    break;
 801629e:	e002      	b.n	80162a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80162a0:	2303      	movs	r3, #3
 80162a2:	73fb      	strb	r3, [r7, #15]
    break;
 80162a4:	bf00      	nop
  }
  return usb_status;
 80162a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80162a8:	4618      	mov	r0, r3
 80162aa:	3714      	adds	r7, #20
 80162ac:	46bd      	mov	sp, r7
 80162ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b2:	4770      	bx	lr

080162b4 <__cvt>:
 80162b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80162b8:	ec57 6b10 	vmov	r6, r7, d0
 80162bc:	2f00      	cmp	r7, #0
 80162be:	460c      	mov	r4, r1
 80162c0:	4619      	mov	r1, r3
 80162c2:	463b      	mov	r3, r7
 80162c4:	bfbb      	ittet	lt
 80162c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80162ca:	461f      	movlt	r7, r3
 80162cc:	2300      	movge	r3, #0
 80162ce:	232d      	movlt	r3, #45	@ 0x2d
 80162d0:	700b      	strb	r3, [r1, #0]
 80162d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80162d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80162d8:	4691      	mov	r9, r2
 80162da:	f023 0820 	bic.w	r8, r3, #32
 80162de:	bfbc      	itt	lt
 80162e0:	4632      	movlt	r2, r6
 80162e2:	4616      	movlt	r6, r2
 80162e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80162e8:	d005      	beq.n	80162f6 <__cvt+0x42>
 80162ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80162ee:	d100      	bne.n	80162f2 <__cvt+0x3e>
 80162f0:	3401      	adds	r4, #1
 80162f2:	2102      	movs	r1, #2
 80162f4:	e000      	b.n	80162f8 <__cvt+0x44>
 80162f6:	2103      	movs	r1, #3
 80162f8:	ab03      	add	r3, sp, #12
 80162fa:	9301      	str	r3, [sp, #4]
 80162fc:	ab02      	add	r3, sp, #8
 80162fe:	9300      	str	r3, [sp, #0]
 8016300:	ec47 6b10 	vmov	d0, r6, r7
 8016304:	4653      	mov	r3, sl
 8016306:	4622      	mov	r2, r4
 8016308:	f000 ff56 	bl	80171b8 <_dtoa_r>
 801630c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8016310:	4605      	mov	r5, r0
 8016312:	d119      	bne.n	8016348 <__cvt+0x94>
 8016314:	f019 0f01 	tst.w	r9, #1
 8016318:	d00e      	beq.n	8016338 <__cvt+0x84>
 801631a:	eb00 0904 	add.w	r9, r0, r4
 801631e:	2200      	movs	r2, #0
 8016320:	2300      	movs	r3, #0
 8016322:	4630      	mov	r0, r6
 8016324:	4639      	mov	r1, r7
 8016326:	f7ea fba7 	bl	8000a78 <__aeabi_dcmpeq>
 801632a:	b108      	cbz	r0, 8016330 <__cvt+0x7c>
 801632c:	f8cd 900c 	str.w	r9, [sp, #12]
 8016330:	2230      	movs	r2, #48	@ 0x30
 8016332:	9b03      	ldr	r3, [sp, #12]
 8016334:	454b      	cmp	r3, r9
 8016336:	d31e      	bcc.n	8016376 <__cvt+0xc2>
 8016338:	9b03      	ldr	r3, [sp, #12]
 801633a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801633c:	1b5b      	subs	r3, r3, r5
 801633e:	4628      	mov	r0, r5
 8016340:	6013      	str	r3, [r2, #0]
 8016342:	b004      	add	sp, #16
 8016344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016348:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801634c:	eb00 0904 	add.w	r9, r0, r4
 8016350:	d1e5      	bne.n	801631e <__cvt+0x6a>
 8016352:	7803      	ldrb	r3, [r0, #0]
 8016354:	2b30      	cmp	r3, #48	@ 0x30
 8016356:	d10a      	bne.n	801636e <__cvt+0xba>
 8016358:	2200      	movs	r2, #0
 801635a:	2300      	movs	r3, #0
 801635c:	4630      	mov	r0, r6
 801635e:	4639      	mov	r1, r7
 8016360:	f7ea fb8a 	bl	8000a78 <__aeabi_dcmpeq>
 8016364:	b918      	cbnz	r0, 801636e <__cvt+0xba>
 8016366:	f1c4 0401 	rsb	r4, r4, #1
 801636a:	f8ca 4000 	str.w	r4, [sl]
 801636e:	f8da 3000 	ldr.w	r3, [sl]
 8016372:	4499      	add	r9, r3
 8016374:	e7d3      	b.n	801631e <__cvt+0x6a>
 8016376:	1c59      	adds	r1, r3, #1
 8016378:	9103      	str	r1, [sp, #12]
 801637a:	701a      	strb	r2, [r3, #0]
 801637c:	e7d9      	b.n	8016332 <__cvt+0x7e>

0801637e <__exponent>:
 801637e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016380:	2900      	cmp	r1, #0
 8016382:	bfba      	itte	lt
 8016384:	4249      	neglt	r1, r1
 8016386:	232d      	movlt	r3, #45	@ 0x2d
 8016388:	232b      	movge	r3, #43	@ 0x2b
 801638a:	2909      	cmp	r1, #9
 801638c:	7002      	strb	r2, [r0, #0]
 801638e:	7043      	strb	r3, [r0, #1]
 8016390:	dd29      	ble.n	80163e6 <__exponent+0x68>
 8016392:	f10d 0307 	add.w	r3, sp, #7
 8016396:	461d      	mov	r5, r3
 8016398:	270a      	movs	r7, #10
 801639a:	461a      	mov	r2, r3
 801639c:	fbb1 f6f7 	udiv	r6, r1, r7
 80163a0:	fb07 1416 	mls	r4, r7, r6, r1
 80163a4:	3430      	adds	r4, #48	@ 0x30
 80163a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80163aa:	460c      	mov	r4, r1
 80163ac:	2c63      	cmp	r4, #99	@ 0x63
 80163ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80163b2:	4631      	mov	r1, r6
 80163b4:	dcf1      	bgt.n	801639a <__exponent+0x1c>
 80163b6:	3130      	adds	r1, #48	@ 0x30
 80163b8:	1e94      	subs	r4, r2, #2
 80163ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80163be:	1c41      	adds	r1, r0, #1
 80163c0:	4623      	mov	r3, r4
 80163c2:	42ab      	cmp	r3, r5
 80163c4:	d30a      	bcc.n	80163dc <__exponent+0x5e>
 80163c6:	f10d 0309 	add.w	r3, sp, #9
 80163ca:	1a9b      	subs	r3, r3, r2
 80163cc:	42ac      	cmp	r4, r5
 80163ce:	bf88      	it	hi
 80163d0:	2300      	movhi	r3, #0
 80163d2:	3302      	adds	r3, #2
 80163d4:	4403      	add	r3, r0
 80163d6:	1a18      	subs	r0, r3, r0
 80163d8:	b003      	add	sp, #12
 80163da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80163e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80163e4:	e7ed      	b.n	80163c2 <__exponent+0x44>
 80163e6:	2330      	movs	r3, #48	@ 0x30
 80163e8:	3130      	adds	r1, #48	@ 0x30
 80163ea:	7083      	strb	r3, [r0, #2]
 80163ec:	70c1      	strb	r1, [r0, #3]
 80163ee:	1d03      	adds	r3, r0, #4
 80163f0:	e7f1      	b.n	80163d6 <__exponent+0x58>
	...

080163f4 <_printf_float>:
 80163f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f8:	b08d      	sub	sp, #52	@ 0x34
 80163fa:	460c      	mov	r4, r1
 80163fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8016400:	4616      	mov	r6, r2
 8016402:	461f      	mov	r7, r3
 8016404:	4605      	mov	r5, r0
 8016406:	f000 fdc7 	bl	8016f98 <_localeconv_r>
 801640a:	6803      	ldr	r3, [r0, #0]
 801640c:	9304      	str	r3, [sp, #16]
 801640e:	4618      	mov	r0, r3
 8016410:	f7e9 ff06 	bl	8000220 <strlen>
 8016414:	2300      	movs	r3, #0
 8016416:	930a      	str	r3, [sp, #40]	@ 0x28
 8016418:	f8d8 3000 	ldr.w	r3, [r8]
 801641c:	9005      	str	r0, [sp, #20]
 801641e:	3307      	adds	r3, #7
 8016420:	f023 0307 	bic.w	r3, r3, #7
 8016424:	f103 0208 	add.w	r2, r3, #8
 8016428:	f894 a018 	ldrb.w	sl, [r4, #24]
 801642c:	f8d4 b000 	ldr.w	fp, [r4]
 8016430:	f8c8 2000 	str.w	r2, [r8]
 8016434:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016438:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801643c:	9307      	str	r3, [sp, #28]
 801643e:	f8cd 8018 	str.w	r8, [sp, #24]
 8016442:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8016446:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801644a:	4b9c      	ldr	r3, [pc, #624]	@ (80166bc <_printf_float+0x2c8>)
 801644c:	f04f 32ff 	mov.w	r2, #4294967295
 8016450:	f7ea fb44 	bl	8000adc <__aeabi_dcmpun>
 8016454:	bb70      	cbnz	r0, 80164b4 <_printf_float+0xc0>
 8016456:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801645a:	4b98      	ldr	r3, [pc, #608]	@ (80166bc <_printf_float+0x2c8>)
 801645c:	f04f 32ff 	mov.w	r2, #4294967295
 8016460:	f7ea fb1e 	bl	8000aa0 <__aeabi_dcmple>
 8016464:	bb30      	cbnz	r0, 80164b4 <_printf_float+0xc0>
 8016466:	2200      	movs	r2, #0
 8016468:	2300      	movs	r3, #0
 801646a:	4640      	mov	r0, r8
 801646c:	4649      	mov	r1, r9
 801646e:	f7ea fb0d 	bl	8000a8c <__aeabi_dcmplt>
 8016472:	b110      	cbz	r0, 801647a <_printf_float+0x86>
 8016474:	232d      	movs	r3, #45	@ 0x2d
 8016476:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801647a:	4a91      	ldr	r2, [pc, #580]	@ (80166c0 <_printf_float+0x2cc>)
 801647c:	4b91      	ldr	r3, [pc, #580]	@ (80166c4 <_printf_float+0x2d0>)
 801647e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8016482:	bf94      	ite	ls
 8016484:	4690      	movls	r8, r2
 8016486:	4698      	movhi	r8, r3
 8016488:	2303      	movs	r3, #3
 801648a:	6123      	str	r3, [r4, #16]
 801648c:	f02b 0304 	bic.w	r3, fp, #4
 8016490:	6023      	str	r3, [r4, #0]
 8016492:	f04f 0900 	mov.w	r9, #0
 8016496:	9700      	str	r7, [sp, #0]
 8016498:	4633      	mov	r3, r6
 801649a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801649c:	4621      	mov	r1, r4
 801649e:	4628      	mov	r0, r5
 80164a0:	f000 f9d2 	bl	8016848 <_printf_common>
 80164a4:	3001      	adds	r0, #1
 80164a6:	f040 808d 	bne.w	80165c4 <_printf_float+0x1d0>
 80164aa:	f04f 30ff 	mov.w	r0, #4294967295
 80164ae:	b00d      	add	sp, #52	@ 0x34
 80164b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164b4:	4642      	mov	r2, r8
 80164b6:	464b      	mov	r3, r9
 80164b8:	4640      	mov	r0, r8
 80164ba:	4649      	mov	r1, r9
 80164bc:	f7ea fb0e 	bl	8000adc <__aeabi_dcmpun>
 80164c0:	b140      	cbz	r0, 80164d4 <_printf_float+0xe0>
 80164c2:	464b      	mov	r3, r9
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	bfbc      	itt	lt
 80164c8:	232d      	movlt	r3, #45	@ 0x2d
 80164ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80164ce:	4a7e      	ldr	r2, [pc, #504]	@ (80166c8 <_printf_float+0x2d4>)
 80164d0:	4b7e      	ldr	r3, [pc, #504]	@ (80166cc <_printf_float+0x2d8>)
 80164d2:	e7d4      	b.n	801647e <_printf_float+0x8a>
 80164d4:	6863      	ldr	r3, [r4, #4]
 80164d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80164da:	9206      	str	r2, [sp, #24]
 80164dc:	1c5a      	adds	r2, r3, #1
 80164de:	d13b      	bne.n	8016558 <_printf_float+0x164>
 80164e0:	2306      	movs	r3, #6
 80164e2:	6063      	str	r3, [r4, #4]
 80164e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80164e8:	2300      	movs	r3, #0
 80164ea:	6022      	str	r2, [r4, #0]
 80164ec:	9303      	str	r3, [sp, #12]
 80164ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80164f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80164f4:	ab09      	add	r3, sp, #36	@ 0x24
 80164f6:	9300      	str	r3, [sp, #0]
 80164f8:	6861      	ldr	r1, [r4, #4]
 80164fa:	ec49 8b10 	vmov	d0, r8, r9
 80164fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8016502:	4628      	mov	r0, r5
 8016504:	f7ff fed6 	bl	80162b4 <__cvt>
 8016508:	9b06      	ldr	r3, [sp, #24]
 801650a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801650c:	2b47      	cmp	r3, #71	@ 0x47
 801650e:	4680      	mov	r8, r0
 8016510:	d129      	bne.n	8016566 <_printf_float+0x172>
 8016512:	1cc8      	adds	r0, r1, #3
 8016514:	db02      	blt.n	801651c <_printf_float+0x128>
 8016516:	6863      	ldr	r3, [r4, #4]
 8016518:	4299      	cmp	r1, r3
 801651a:	dd41      	ble.n	80165a0 <_printf_float+0x1ac>
 801651c:	f1aa 0a02 	sub.w	sl, sl, #2
 8016520:	fa5f fa8a 	uxtb.w	sl, sl
 8016524:	3901      	subs	r1, #1
 8016526:	4652      	mov	r2, sl
 8016528:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801652c:	9109      	str	r1, [sp, #36]	@ 0x24
 801652e:	f7ff ff26 	bl	801637e <__exponent>
 8016532:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016534:	1813      	adds	r3, r2, r0
 8016536:	2a01      	cmp	r2, #1
 8016538:	4681      	mov	r9, r0
 801653a:	6123      	str	r3, [r4, #16]
 801653c:	dc02      	bgt.n	8016544 <_printf_float+0x150>
 801653e:	6822      	ldr	r2, [r4, #0]
 8016540:	07d2      	lsls	r2, r2, #31
 8016542:	d501      	bpl.n	8016548 <_printf_float+0x154>
 8016544:	3301      	adds	r3, #1
 8016546:	6123      	str	r3, [r4, #16]
 8016548:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801654c:	2b00      	cmp	r3, #0
 801654e:	d0a2      	beq.n	8016496 <_printf_float+0xa2>
 8016550:	232d      	movs	r3, #45	@ 0x2d
 8016552:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016556:	e79e      	b.n	8016496 <_printf_float+0xa2>
 8016558:	9a06      	ldr	r2, [sp, #24]
 801655a:	2a47      	cmp	r2, #71	@ 0x47
 801655c:	d1c2      	bne.n	80164e4 <_printf_float+0xf0>
 801655e:	2b00      	cmp	r3, #0
 8016560:	d1c0      	bne.n	80164e4 <_printf_float+0xf0>
 8016562:	2301      	movs	r3, #1
 8016564:	e7bd      	b.n	80164e2 <_printf_float+0xee>
 8016566:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801656a:	d9db      	bls.n	8016524 <_printf_float+0x130>
 801656c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8016570:	d118      	bne.n	80165a4 <_printf_float+0x1b0>
 8016572:	2900      	cmp	r1, #0
 8016574:	6863      	ldr	r3, [r4, #4]
 8016576:	dd0b      	ble.n	8016590 <_printf_float+0x19c>
 8016578:	6121      	str	r1, [r4, #16]
 801657a:	b913      	cbnz	r3, 8016582 <_printf_float+0x18e>
 801657c:	6822      	ldr	r2, [r4, #0]
 801657e:	07d0      	lsls	r0, r2, #31
 8016580:	d502      	bpl.n	8016588 <_printf_float+0x194>
 8016582:	3301      	adds	r3, #1
 8016584:	440b      	add	r3, r1
 8016586:	6123      	str	r3, [r4, #16]
 8016588:	65a1      	str	r1, [r4, #88]	@ 0x58
 801658a:	f04f 0900 	mov.w	r9, #0
 801658e:	e7db      	b.n	8016548 <_printf_float+0x154>
 8016590:	b913      	cbnz	r3, 8016598 <_printf_float+0x1a4>
 8016592:	6822      	ldr	r2, [r4, #0]
 8016594:	07d2      	lsls	r2, r2, #31
 8016596:	d501      	bpl.n	801659c <_printf_float+0x1a8>
 8016598:	3302      	adds	r3, #2
 801659a:	e7f4      	b.n	8016586 <_printf_float+0x192>
 801659c:	2301      	movs	r3, #1
 801659e:	e7f2      	b.n	8016586 <_printf_float+0x192>
 80165a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80165a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80165a6:	4299      	cmp	r1, r3
 80165a8:	db05      	blt.n	80165b6 <_printf_float+0x1c2>
 80165aa:	6823      	ldr	r3, [r4, #0]
 80165ac:	6121      	str	r1, [r4, #16]
 80165ae:	07d8      	lsls	r0, r3, #31
 80165b0:	d5ea      	bpl.n	8016588 <_printf_float+0x194>
 80165b2:	1c4b      	adds	r3, r1, #1
 80165b4:	e7e7      	b.n	8016586 <_printf_float+0x192>
 80165b6:	2900      	cmp	r1, #0
 80165b8:	bfd4      	ite	le
 80165ba:	f1c1 0202 	rsble	r2, r1, #2
 80165be:	2201      	movgt	r2, #1
 80165c0:	4413      	add	r3, r2
 80165c2:	e7e0      	b.n	8016586 <_printf_float+0x192>
 80165c4:	6823      	ldr	r3, [r4, #0]
 80165c6:	055a      	lsls	r2, r3, #21
 80165c8:	d407      	bmi.n	80165da <_printf_float+0x1e6>
 80165ca:	6923      	ldr	r3, [r4, #16]
 80165cc:	4642      	mov	r2, r8
 80165ce:	4631      	mov	r1, r6
 80165d0:	4628      	mov	r0, r5
 80165d2:	47b8      	blx	r7
 80165d4:	3001      	adds	r0, #1
 80165d6:	d12b      	bne.n	8016630 <_printf_float+0x23c>
 80165d8:	e767      	b.n	80164aa <_printf_float+0xb6>
 80165da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80165de:	f240 80dd 	bls.w	801679c <_printf_float+0x3a8>
 80165e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80165e6:	2200      	movs	r2, #0
 80165e8:	2300      	movs	r3, #0
 80165ea:	f7ea fa45 	bl	8000a78 <__aeabi_dcmpeq>
 80165ee:	2800      	cmp	r0, #0
 80165f0:	d033      	beq.n	801665a <_printf_float+0x266>
 80165f2:	4a37      	ldr	r2, [pc, #220]	@ (80166d0 <_printf_float+0x2dc>)
 80165f4:	2301      	movs	r3, #1
 80165f6:	4631      	mov	r1, r6
 80165f8:	4628      	mov	r0, r5
 80165fa:	47b8      	blx	r7
 80165fc:	3001      	adds	r0, #1
 80165fe:	f43f af54 	beq.w	80164aa <_printf_float+0xb6>
 8016602:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8016606:	4543      	cmp	r3, r8
 8016608:	db02      	blt.n	8016610 <_printf_float+0x21c>
 801660a:	6823      	ldr	r3, [r4, #0]
 801660c:	07d8      	lsls	r0, r3, #31
 801660e:	d50f      	bpl.n	8016630 <_printf_float+0x23c>
 8016610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016614:	4631      	mov	r1, r6
 8016616:	4628      	mov	r0, r5
 8016618:	47b8      	blx	r7
 801661a:	3001      	adds	r0, #1
 801661c:	f43f af45 	beq.w	80164aa <_printf_float+0xb6>
 8016620:	f04f 0900 	mov.w	r9, #0
 8016624:	f108 38ff 	add.w	r8, r8, #4294967295
 8016628:	f104 0a1a 	add.w	sl, r4, #26
 801662c:	45c8      	cmp	r8, r9
 801662e:	dc09      	bgt.n	8016644 <_printf_float+0x250>
 8016630:	6823      	ldr	r3, [r4, #0]
 8016632:	079b      	lsls	r3, r3, #30
 8016634:	f100 8103 	bmi.w	801683e <_printf_float+0x44a>
 8016638:	68e0      	ldr	r0, [r4, #12]
 801663a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801663c:	4298      	cmp	r0, r3
 801663e:	bfb8      	it	lt
 8016640:	4618      	movlt	r0, r3
 8016642:	e734      	b.n	80164ae <_printf_float+0xba>
 8016644:	2301      	movs	r3, #1
 8016646:	4652      	mov	r2, sl
 8016648:	4631      	mov	r1, r6
 801664a:	4628      	mov	r0, r5
 801664c:	47b8      	blx	r7
 801664e:	3001      	adds	r0, #1
 8016650:	f43f af2b 	beq.w	80164aa <_printf_float+0xb6>
 8016654:	f109 0901 	add.w	r9, r9, #1
 8016658:	e7e8      	b.n	801662c <_printf_float+0x238>
 801665a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801665c:	2b00      	cmp	r3, #0
 801665e:	dc39      	bgt.n	80166d4 <_printf_float+0x2e0>
 8016660:	4a1b      	ldr	r2, [pc, #108]	@ (80166d0 <_printf_float+0x2dc>)
 8016662:	2301      	movs	r3, #1
 8016664:	4631      	mov	r1, r6
 8016666:	4628      	mov	r0, r5
 8016668:	47b8      	blx	r7
 801666a:	3001      	adds	r0, #1
 801666c:	f43f af1d 	beq.w	80164aa <_printf_float+0xb6>
 8016670:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8016674:	ea59 0303 	orrs.w	r3, r9, r3
 8016678:	d102      	bne.n	8016680 <_printf_float+0x28c>
 801667a:	6823      	ldr	r3, [r4, #0]
 801667c:	07d9      	lsls	r1, r3, #31
 801667e:	d5d7      	bpl.n	8016630 <_printf_float+0x23c>
 8016680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016684:	4631      	mov	r1, r6
 8016686:	4628      	mov	r0, r5
 8016688:	47b8      	blx	r7
 801668a:	3001      	adds	r0, #1
 801668c:	f43f af0d 	beq.w	80164aa <_printf_float+0xb6>
 8016690:	f04f 0a00 	mov.w	sl, #0
 8016694:	f104 0b1a 	add.w	fp, r4, #26
 8016698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801669a:	425b      	negs	r3, r3
 801669c:	4553      	cmp	r3, sl
 801669e:	dc01      	bgt.n	80166a4 <_printf_float+0x2b0>
 80166a0:	464b      	mov	r3, r9
 80166a2:	e793      	b.n	80165cc <_printf_float+0x1d8>
 80166a4:	2301      	movs	r3, #1
 80166a6:	465a      	mov	r2, fp
 80166a8:	4631      	mov	r1, r6
 80166aa:	4628      	mov	r0, r5
 80166ac:	47b8      	blx	r7
 80166ae:	3001      	adds	r0, #1
 80166b0:	f43f aefb 	beq.w	80164aa <_printf_float+0xb6>
 80166b4:	f10a 0a01 	add.w	sl, sl, #1
 80166b8:	e7ee      	b.n	8016698 <_printf_float+0x2a4>
 80166ba:	bf00      	nop
 80166bc:	7fefffff 	.word	0x7fefffff
 80166c0:	0801cdd8 	.word	0x0801cdd8
 80166c4:	0801cddc 	.word	0x0801cddc
 80166c8:	0801cde0 	.word	0x0801cde0
 80166cc:	0801cde4 	.word	0x0801cde4
 80166d0:	0801cde8 	.word	0x0801cde8
 80166d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80166d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80166da:	4553      	cmp	r3, sl
 80166dc:	bfa8      	it	ge
 80166de:	4653      	movge	r3, sl
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	4699      	mov	r9, r3
 80166e4:	dc36      	bgt.n	8016754 <_printf_float+0x360>
 80166e6:	f04f 0b00 	mov.w	fp, #0
 80166ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80166ee:	f104 021a 	add.w	r2, r4, #26
 80166f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80166f4:	9306      	str	r3, [sp, #24]
 80166f6:	eba3 0309 	sub.w	r3, r3, r9
 80166fa:	455b      	cmp	r3, fp
 80166fc:	dc31      	bgt.n	8016762 <_printf_float+0x36e>
 80166fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016700:	459a      	cmp	sl, r3
 8016702:	dc3a      	bgt.n	801677a <_printf_float+0x386>
 8016704:	6823      	ldr	r3, [r4, #0]
 8016706:	07da      	lsls	r2, r3, #31
 8016708:	d437      	bmi.n	801677a <_printf_float+0x386>
 801670a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801670c:	ebaa 0903 	sub.w	r9, sl, r3
 8016710:	9b06      	ldr	r3, [sp, #24]
 8016712:	ebaa 0303 	sub.w	r3, sl, r3
 8016716:	4599      	cmp	r9, r3
 8016718:	bfa8      	it	ge
 801671a:	4699      	movge	r9, r3
 801671c:	f1b9 0f00 	cmp.w	r9, #0
 8016720:	dc33      	bgt.n	801678a <_printf_float+0x396>
 8016722:	f04f 0800 	mov.w	r8, #0
 8016726:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801672a:	f104 0b1a 	add.w	fp, r4, #26
 801672e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016730:	ebaa 0303 	sub.w	r3, sl, r3
 8016734:	eba3 0309 	sub.w	r3, r3, r9
 8016738:	4543      	cmp	r3, r8
 801673a:	f77f af79 	ble.w	8016630 <_printf_float+0x23c>
 801673e:	2301      	movs	r3, #1
 8016740:	465a      	mov	r2, fp
 8016742:	4631      	mov	r1, r6
 8016744:	4628      	mov	r0, r5
 8016746:	47b8      	blx	r7
 8016748:	3001      	adds	r0, #1
 801674a:	f43f aeae 	beq.w	80164aa <_printf_float+0xb6>
 801674e:	f108 0801 	add.w	r8, r8, #1
 8016752:	e7ec      	b.n	801672e <_printf_float+0x33a>
 8016754:	4642      	mov	r2, r8
 8016756:	4631      	mov	r1, r6
 8016758:	4628      	mov	r0, r5
 801675a:	47b8      	blx	r7
 801675c:	3001      	adds	r0, #1
 801675e:	d1c2      	bne.n	80166e6 <_printf_float+0x2f2>
 8016760:	e6a3      	b.n	80164aa <_printf_float+0xb6>
 8016762:	2301      	movs	r3, #1
 8016764:	4631      	mov	r1, r6
 8016766:	4628      	mov	r0, r5
 8016768:	9206      	str	r2, [sp, #24]
 801676a:	47b8      	blx	r7
 801676c:	3001      	adds	r0, #1
 801676e:	f43f ae9c 	beq.w	80164aa <_printf_float+0xb6>
 8016772:	9a06      	ldr	r2, [sp, #24]
 8016774:	f10b 0b01 	add.w	fp, fp, #1
 8016778:	e7bb      	b.n	80166f2 <_printf_float+0x2fe>
 801677a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801677e:	4631      	mov	r1, r6
 8016780:	4628      	mov	r0, r5
 8016782:	47b8      	blx	r7
 8016784:	3001      	adds	r0, #1
 8016786:	d1c0      	bne.n	801670a <_printf_float+0x316>
 8016788:	e68f      	b.n	80164aa <_printf_float+0xb6>
 801678a:	9a06      	ldr	r2, [sp, #24]
 801678c:	464b      	mov	r3, r9
 801678e:	4442      	add	r2, r8
 8016790:	4631      	mov	r1, r6
 8016792:	4628      	mov	r0, r5
 8016794:	47b8      	blx	r7
 8016796:	3001      	adds	r0, #1
 8016798:	d1c3      	bne.n	8016722 <_printf_float+0x32e>
 801679a:	e686      	b.n	80164aa <_printf_float+0xb6>
 801679c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80167a0:	f1ba 0f01 	cmp.w	sl, #1
 80167a4:	dc01      	bgt.n	80167aa <_printf_float+0x3b6>
 80167a6:	07db      	lsls	r3, r3, #31
 80167a8:	d536      	bpl.n	8016818 <_printf_float+0x424>
 80167aa:	2301      	movs	r3, #1
 80167ac:	4642      	mov	r2, r8
 80167ae:	4631      	mov	r1, r6
 80167b0:	4628      	mov	r0, r5
 80167b2:	47b8      	blx	r7
 80167b4:	3001      	adds	r0, #1
 80167b6:	f43f ae78 	beq.w	80164aa <_printf_float+0xb6>
 80167ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80167be:	4631      	mov	r1, r6
 80167c0:	4628      	mov	r0, r5
 80167c2:	47b8      	blx	r7
 80167c4:	3001      	adds	r0, #1
 80167c6:	f43f ae70 	beq.w	80164aa <_printf_float+0xb6>
 80167ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80167ce:	2200      	movs	r2, #0
 80167d0:	2300      	movs	r3, #0
 80167d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80167d6:	f7ea f94f 	bl	8000a78 <__aeabi_dcmpeq>
 80167da:	b9c0      	cbnz	r0, 801680e <_printf_float+0x41a>
 80167dc:	4653      	mov	r3, sl
 80167de:	f108 0201 	add.w	r2, r8, #1
 80167e2:	4631      	mov	r1, r6
 80167e4:	4628      	mov	r0, r5
 80167e6:	47b8      	blx	r7
 80167e8:	3001      	adds	r0, #1
 80167ea:	d10c      	bne.n	8016806 <_printf_float+0x412>
 80167ec:	e65d      	b.n	80164aa <_printf_float+0xb6>
 80167ee:	2301      	movs	r3, #1
 80167f0:	465a      	mov	r2, fp
 80167f2:	4631      	mov	r1, r6
 80167f4:	4628      	mov	r0, r5
 80167f6:	47b8      	blx	r7
 80167f8:	3001      	adds	r0, #1
 80167fa:	f43f ae56 	beq.w	80164aa <_printf_float+0xb6>
 80167fe:	f108 0801 	add.w	r8, r8, #1
 8016802:	45d0      	cmp	r8, sl
 8016804:	dbf3      	blt.n	80167ee <_printf_float+0x3fa>
 8016806:	464b      	mov	r3, r9
 8016808:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801680c:	e6df      	b.n	80165ce <_printf_float+0x1da>
 801680e:	f04f 0800 	mov.w	r8, #0
 8016812:	f104 0b1a 	add.w	fp, r4, #26
 8016816:	e7f4      	b.n	8016802 <_printf_float+0x40e>
 8016818:	2301      	movs	r3, #1
 801681a:	4642      	mov	r2, r8
 801681c:	e7e1      	b.n	80167e2 <_printf_float+0x3ee>
 801681e:	2301      	movs	r3, #1
 8016820:	464a      	mov	r2, r9
 8016822:	4631      	mov	r1, r6
 8016824:	4628      	mov	r0, r5
 8016826:	47b8      	blx	r7
 8016828:	3001      	adds	r0, #1
 801682a:	f43f ae3e 	beq.w	80164aa <_printf_float+0xb6>
 801682e:	f108 0801 	add.w	r8, r8, #1
 8016832:	68e3      	ldr	r3, [r4, #12]
 8016834:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016836:	1a5b      	subs	r3, r3, r1
 8016838:	4543      	cmp	r3, r8
 801683a:	dcf0      	bgt.n	801681e <_printf_float+0x42a>
 801683c:	e6fc      	b.n	8016638 <_printf_float+0x244>
 801683e:	f04f 0800 	mov.w	r8, #0
 8016842:	f104 0919 	add.w	r9, r4, #25
 8016846:	e7f4      	b.n	8016832 <_printf_float+0x43e>

08016848 <_printf_common>:
 8016848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801684c:	4616      	mov	r6, r2
 801684e:	4698      	mov	r8, r3
 8016850:	688a      	ldr	r2, [r1, #8]
 8016852:	690b      	ldr	r3, [r1, #16]
 8016854:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016858:	4293      	cmp	r3, r2
 801685a:	bfb8      	it	lt
 801685c:	4613      	movlt	r3, r2
 801685e:	6033      	str	r3, [r6, #0]
 8016860:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016864:	4607      	mov	r7, r0
 8016866:	460c      	mov	r4, r1
 8016868:	b10a      	cbz	r2, 801686e <_printf_common+0x26>
 801686a:	3301      	adds	r3, #1
 801686c:	6033      	str	r3, [r6, #0]
 801686e:	6823      	ldr	r3, [r4, #0]
 8016870:	0699      	lsls	r1, r3, #26
 8016872:	bf42      	ittt	mi
 8016874:	6833      	ldrmi	r3, [r6, #0]
 8016876:	3302      	addmi	r3, #2
 8016878:	6033      	strmi	r3, [r6, #0]
 801687a:	6825      	ldr	r5, [r4, #0]
 801687c:	f015 0506 	ands.w	r5, r5, #6
 8016880:	d106      	bne.n	8016890 <_printf_common+0x48>
 8016882:	f104 0a19 	add.w	sl, r4, #25
 8016886:	68e3      	ldr	r3, [r4, #12]
 8016888:	6832      	ldr	r2, [r6, #0]
 801688a:	1a9b      	subs	r3, r3, r2
 801688c:	42ab      	cmp	r3, r5
 801688e:	dc26      	bgt.n	80168de <_printf_common+0x96>
 8016890:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016894:	6822      	ldr	r2, [r4, #0]
 8016896:	3b00      	subs	r3, #0
 8016898:	bf18      	it	ne
 801689a:	2301      	movne	r3, #1
 801689c:	0692      	lsls	r2, r2, #26
 801689e:	d42b      	bmi.n	80168f8 <_printf_common+0xb0>
 80168a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80168a4:	4641      	mov	r1, r8
 80168a6:	4638      	mov	r0, r7
 80168a8:	47c8      	blx	r9
 80168aa:	3001      	adds	r0, #1
 80168ac:	d01e      	beq.n	80168ec <_printf_common+0xa4>
 80168ae:	6823      	ldr	r3, [r4, #0]
 80168b0:	6922      	ldr	r2, [r4, #16]
 80168b2:	f003 0306 	and.w	r3, r3, #6
 80168b6:	2b04      	cmp	r3, #4
 80168b8:	bf02      	ittt	eq
 80168ba:	68e5      	ldreq	r5, [r4, #12]
 80168bc:	6833      	ldreq	r3, [r6, #0]
 80168be:	1aed      	subeq	r5, r5, r3
 80168c0:	68a3      	ldr	r3, [r4, #8]
 80168c2:	bf0c      	ite	eq
 80168c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80168c8:	2500      	movne	r5, #0
 80168ca:	4293      	cmp	r3, r2
 80168cc:	bfc4      	itt	gt
 80168ce:	1a9b      	subgt	r3, r3, r2
 80168d0:	18ed      	addgt	r5, r5, r3
 80168d2:	2600      	movs	r6, #0
 80168d4:	341a      	adds	r4, #26
 80168d6:	42b5      	cmp	r5, r6
 80168d8:	d11a      	bne.n	8016910 <_printf_common+0xc8>
 80168da:	2000      	movs	r0, #0
 80168dc:	e008      	b.n	80168f0 <_printf_common+0xa8>
 80168de:	2301      	movs	r3, #1
 80168e0:	4652      	mov	r2, sl
 80168e2:	4641      	mov	r1, r8
 80168e4:	4638      	mov	r0, r7
 80168e6:	47c8      	blx	r9
 80168e8:	3001      	adds	r0, #1
 80168ea:	d103      	bne.n	80168f4 <_printf_common+0xac>
 80168ec:	f04f 30ff 	mov.w	r0, #4294967295
 80168f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168f4:	3501      	adds	r5, #1
 80168f6:	e7c6      	b.n	8016886 <_printf_common+0x3e>
 80168f8:	18e1      	adds	r1, r4, r3
 80168fa:	1c5a      	adds	r2, r3, #1
 80168fc:	2030      	movs	r0, #48	@ 0x30
 80168fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016902:	4422      	add	r2, r4
 8016904:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016908:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801690c:	3302      	adds	r3, #2
 801690e:	e7c7      	b.n	80168a0 <_printf_common+0x58>
 8016910:	2301      	movs	r3, #1
 8016912:	4622      	mov	r2, r4
 8016914:	4641      	mov	r1, r8
 8016916:	4638      	mov	r0, r7
 8016918:	47c8      	blx	r9
 801691a:	3001      	adds	r0, #1
 801691c:	d0e6      	beq.n	80168ec <_printf_common+0xa4>
 801691e:	3601      	adds	r6, #1
 8016920:	e7d9      	b.n	80168d6 <_printf_common+0x8e>
	...

08016924 <_printf_i>:
 8016924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016928:	7e0f      	ldrb	r7, [r1, #24]
 801692a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801692c:	2f78      	cmp	r7, #120	@ 0x78
 801692e:	4691      	mov	r9, r2
 8016930:	4680      	mov	r8, r0
 8016932:	460c      	mov	r4, r1
 8016934:	469a      	mov	sl, r3
 8016936:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801693a:	d807      	bhi.n	801694c <_printf_i+0x28>
 801693c:	2f62      	cmp	r7, #98	@ 0x62
 801693e:	d80a      	bhi.n	8016956 <_printf_i+0x32>
 8016940:	2f00      	cmp	r7, #0
 8016942:	f000 80d2 	beq.w	8016aea <_printf_i+0x1c6>
 8016946:	2f58      	cmp	r7, #88	@ 0x58
 8016948:	f000 80b9 	beq.w	8016abe <_printf_i+0x19a>
 801694c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016950:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016954:	e03a      	b.n	80169cc <_printf_i+0xa8>
 8016956:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801695a:	2b15      	cmp	r3, #21
 801695c:	d8f6      	bhi.n	801694c <_printf_i+0x28>
 801695e:	a101      	add	r1, pc, #4	@ (adr r1, 8016964 <_printf_i+0x40>)
 8016960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016964:	080169bd 	.word	0x080169bd
 8016968:	080169d1 	.word	0x080169d1
 801696c:	0801694d 	.word	0x0801694d
 8016970:	0801694d 	.word	0x0801694d
 8016974:	0801694d 	.word	0x0801694d
 8016978:	0801694d 	.word	0x0801694d
 801697c:	080169d1 	.word	0x080169d1
 8016980:	0801694d 	.word	0x0801694d
 8016984:	0801694d 	.word	0x0801694d
 8016988:	0801694d 	.word	0x0801694d
 801698c:	0801694d 	.word	0x0801694d
 8016990:	08016ad1 	.word	0x08016ad1
 8016994:	080169fb 	.word	0x080169fb
 8016998:	08016a8b 	.word	0x08016a8b
 801699c:	0801694d 	.word	0x0801694d
 80169a0:	0801694d 	.word	0x0801694d
 80169a4:	08016af3 	.word	0x08016af3
 80169a8:	0801694d 	.word	0x0801694d
 80169ac:	080169fb 	.word	0x080169fb
 80169b0:	0801694d 	.word	0x0801694d
 80169b4:	0801694d 	.word	0x0801694d
 80169b8:	08016a93 	.word	0x08016a93
 80169bc:	6833      	ldr	r3, [r6, #0]
 80169be:	1d1a      	adds	r2, r3, #4
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	6032      	str	r2, [r6, #0]
 80169c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80169c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80169cc:	2301      	movs	r3, #1
 80169ce:	e09d      	b.n	8016b0c <_printf_i+0x1e8>
 80169d0:	6833      	ldr	r3, [r6, #0]
 80169d2:	6820      	ldr	r0, [r4, #0]
 80169d4:	1d19      	adds	r1, r3, #4
 80169d6:	6031      	str	r1, [r6, #0]
 80169d8:	0606      	lsls	r6, r0, #24
 80169da:	d501      	bpl.n	80169e0 <_printf_i+0xbc>
 80169dc:	681d      	ldr	r5, [r3, #0]
 80169de:	e003      	b.n	80169e8 <_printf_i+0xc4>
 80169e0:	0645      	lsls	r5, r0, #25
 80169e2:	d5fb      	bpl.n	80169dc <_printf_i+0xb8>
 80169e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80169e8:	2d00      	cmp	r5, #0
 80169ea:	da03      	bge.n	80169f4 <_printf_i+0xd0>
 80169ec:	232d      	movs	r3, #45	@ 0x2d
 80169ee:	426d      	negs	r5, r5
 80169f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80169f4:	4859      	ldr	r0, [pc, #356]	@ (8016b5c <_printf_i+0x238>)
 80169f6:	230a      	movs	r3, #10
 80169f8:	e011      	b.n	8016a1e <_printf_i+0xfa>
 80169fa:	6821      	ldr	r1, [r4, #0]
 80169fc:	6833      	ldr	r3, [r6, #0]
 80169fe:	0608      	lsls	r0, r1, #24
 8016a00:	f853 5b04 	ldr.w	r5, [r3], #4
 8016a04:	d402      	bmi.n	8016a0c <_printf_i+0xe8>
 8016a06:	0649      	lsls	r1, r1, #25
 8016a08:	bf48      	it	mi
 8016a0a:	b2ad      	uxthmi	r5, r5
 8016a0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8016a0e:	4853      	ldr	r0, [pc, #332]	@ (8016b5c <_printf_i+0x238>)
 8016a10:	6033      	str	r3, [r6, #0]
 8016a12:	bf14      	ite	ne
 8016a14:	230a      	movne	r3, #10
 8016a16:	2308      	moveq	r3, #8
 8016a18:	2100      	movs	r1, #0
 8016a1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016a1e:	6866      	ldr	r6, [r4, #4]
 8016a20:	60a6      	str	r6, [r4, #8]
 8016a22:	2e00      	cmp	r6, #0
 8016a24:	bfa2      	ittt	ge
 8016a26:	6821      	ldrge	r1, [r4, #0]
 8016a28:	f021 0104 	bicge.w	r1, r1, #4
 8016a2c:	6021      	strge	r1, [r4, #0]
 8016a2e:	b90d      	cbnz	r5, 8016a34 <_printf_i+0x110>
 8016a30:	2e00      	cmp	r6, #0
 8016a32:	d04b      	beq.n	8016acc <_printf_i+0x1a8>
 8016a34:	4616      	mov	r6, r2
 8016a36:	fbb5 f1f3 	udiv	r1, r5, r3
 8016a3a:	fb03 5711 	mls	r7, r3, r1, r5
 8016a3e:	5dc7      	ldrb	r7, [r0, r7]
 8016a40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016a44:	462f      	mov	r7, r5
 8016a46:	42bb      	cmp	r3, r7
 8016a48:	460d      	mov	r5, r1
 8016a4a:	d9f4      	bls.n	8016a36 <_printf_i+0x112>
 8016a4c:	2b08      	cmp	r3, #8
 8016a4e:	d10b      	bne.n	8016a68 <_printf_i+0x144>
 8016a50:	6823      	ldr	r3, [r4, #0]
 8016a52:	07df      	lsls	r7, r3, #31
 8016a54:	d508      	bpl.n	8016a68 <_printf_i+0x144>
 8016a56:	6923      	ldr	r3, [r4, #16]
 8016a58:	6861      	ldr	r1, [r4, #4]
 8016a5a:	4299      	cmp	r1, r3
 8016a5c:	bfde      	ittt	le
 8016a5e:	2330      	movle	r3, #48	@ 0x30
 8016a60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016a64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016a68:	1b92      	subs	r2, r2, r6
 8016a6a:	6122      	str	r2, [r4, #16]
 8016a6c:	f8cd a000 	str.w	sl, [sp]
 8016a70:	464b      	mov	r3, r9
 8016a72:	aa03      	add	r2, sp, #12
 8016a74:	4621      	mov	r1, r4
 8016a76:	4640      	mov	r0, r8
 8016a78:	f7ff fee6 	bl	8016848 <_printf_common>
 8016a7c:	3001      	adds	r0, #1
 8016a7e:	d14a      	bne.n	8016b16 <_printf_i+0x1f2>
 8016a80:	f04f 30ff 	mov.w	r0, #4294967295
 8016a84:	b004      	add	sp, #16
 8016a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a8a:	6823      	ldr	r3, [r4, #0]
 8016a8c:	f043 0320 	orr.w	r3, r3, #32
 8016a90:	6023      	str	r3, [r4, #0]
 8016a92:	4833      	ldr	r0, [pc, #204]	@ (8016b60 <_printf_i+0x23c>)
 8016a94:	2778      	movs	r7, #120	@ 0x78
 8016a96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016a9a:	6823      	ldr	r3, [r4, #0]
 8016a9c:	6831      	ldr	r1, [r6, #0]
 8016a9e:	061f      	lsls	r7, r3, #24
 8016aa0:	f851 5b04 	ldr.w	r5, [r1], #4
 8016aa4:	d402      	bmi.n	8016aac <_printf_i+0x188>
 8016aa6:	065f      	lsls	r7, r3, #25
 8016aa8:	bf48      	it	mi
 8016aaa:	b2ad      	uxthmi	r5, r5
 8016aac:	6031      	str	r1, [r6, #0]
 8016aae:	07d9      	lsls	r1, r3, #31
 8016ab0:	bf44      	itt	mi
 8016ab2:	f043 0320 	orrmi.w	r3, r3, #32
 8016ab6:	6023      	strmi	r3, [r4, #0]
 8016ab8:	b11d      	cbz	r5, 8016ac2 <_printf_i+0x19e>
 8016aba:	2310      	movs	r3, #16
 8016abc:	e7ac      	b.n	8016a18 <_printf_i+0xf4>
 8016abe:	4827      	ldr	r0, [pc, #156]	@ (8016b5c <_printf_i+0x238>)
 8016ac0:	e7e9      	b.n	8016a96 <_printf_i+0x172>
 8016ac2:	6823      	ldr	r3, [r4, #0]
 8016ac4:	f023 0320 	bic.w	r3, r3, #32
 8016ac8:	6023      	str	r3, [r4, #0]
 8016aca:	e7f6      	b.n	8016aba <_printf_i+0x196>
 8016acc:	4616      	mov	r6, r2
 8016ace:	e7bd      	b.n	8016a4c <_printf_i+0x128>
 8016ad0:	6833      	ldr	r3, [r6, #0]
 8016ad2:	6825      	ldr	r5, [r4, #0]
 8016ad4:	6961      	ldr	r1, [r4, #20]
 8016ad6:	1d18      	adds	r0, r3, #4
 8016ad8:	6030      	str	r0, [r6, #0]
 8016ada:	062e      	lsls	r6, r5, #24
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	d501      	bpl.n	8016ae4 <_printf_i+0x1c0>
 8016ae0:	6019      	str	r1, [r3, #0]
 8016ae2:	e002      	b.n	8016aea <_printf_i+0x1c6>
 8016ae4:	0668      	lsls	r0, r5, #25
 8016ae6:	d5fb      	bpl.n	8016ae0 <_printf_i+0x1bc>
 8016ae8:	8019      	strh	r1, [r3, #0]
 8016aea:	2300      	movs	r3, #0
 8016aec:	6123      	str	r3, [r4, #16]
 8016aee:	4616      	mov	r6, r2
 8016af0:	e7bc      	b.n	8016a6c <_printf_i+0x148>
 8016af2:	6833      	ldr	r3, [r6, #0]
 8016af4:	1d1a      	adds	r2, r3, #4
 8016af6:	6032      	str	r2, [r6, #0]
 8016af8:	681e      	ldr	r6, [r3, #0]
 8016afa:	6862      	ldr	r2, [r4, #4]
 8016afc:	2100      	movs	r1, #0
 8016afe:	4630      	mov	r0, r6
 8016b00:	f7e9 fb3e 	bl	8000180 <memchr>
 8016b04:	b108      	cbz	r0, 8016b0a <_printf_i+0x1e6>
 8016b06:	1b80      	subs	r0, r0, r6
 8016b08:	6060      	str	r0, [r4, #4]
 8016b0a:	6863      	ldr	r3, [r4, #4]
 8016b0c:	6123      	str	r3, [r4, #16]
 8016b0e:	2300      	movs	r3, #0
 8016b10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016b14:	e7aa      	b.n	8016a6c <_printf_i+0x148>
 8016b16:	6923      	ldr	r3, [r4, #16]
 8016b18:	4632      	mov	r2, r6
 8016b1a:	4649      	mov	r1, r9
 8016b1c:	4640      	mov	r0, r8
 8016b1e:	47d0      	blx	sl
 8016b20:	3001      	adds	r0, #1
 8016b22:	d0ad      	beq.n	8016a80 <_printf_i+0x15c>
 8016b24:	6823      	ldr	r3, [r4, #0]
 8016b26:	079b      	lsls	r3, r3, #30
 8016b28:	d413      	bmi.n	8016b52 <_printf_i+0x22e>
 8016b2a:	68e0      	ldr	r0, [r4, #12]
 8016b2c:	9b03      	ldr	r3, [sp, #12]
 8016b2e:	4298      	cmp	r0, r3
 8016b30:	bfb8      	it	lt
 8016b32:	4618      	movlt	r0, r3
 8016b34:	e7a6      	b.n	8016a84 <_printf_i+0x160>
 8016b36:	2301      	movs	r3, #1
 8016b38:	4632      	mov	r2, r6
 8016b3a:	4649      	mov	r1, r9
 8016b3c:	4640      	mov	r0, r8
 8016b3e:	47d0      	blx	sl
 8016b40:	3001      	adds	r0, #1
 8016b42:	d09d      	beq.n	8016a80 <_printf_i+0x15c>
 8016b44:	3501      	adds	r5, #1
 8016b46:	68e3      	ldr	r3, [r4, #12]
 8016b48:	9903      	ldr	r1, [sp, #12]
 8016b4a:	1a5b      	subs	r3, r3, r1
 8016b4c:	42ab      	cmp	r3, r5
 8016b4e:	dcf2      	bgt.n	8016b36 <_printf_i+0x212>
 8016b50:	e7eb      	b.n	8016b2a <_printf_i+0x206>
 8016b52:	2500      	movs	r5, #0
 8016b54:	f104 0619 	add.w	r6, r4, #25
 8016b58:	e7f5      	b.n	8016b46 <_printf_i+0x222>
 8016b5a:	bf00      	nop
 8016b5c:	0801cdea 	.word	0x0801cdea
 8016b60:	0801cdfb 	.word	0x0801cdfb

08016b64 <std>:
 8016b64:	2300      	movs	r3, #0
 8016b66:	b510      	push	{r4, lr}
 8016b68:	4604      	mov	r4, r0
 8016b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8016b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016b72:	6083      	str	r3, [r0, #8]
 8016b74:	8181      	strh	r1, [r0, #12]
 8016b76:	6643      	str	r3, [r0, #100]	@ 0x64
 8016b78:	81c2      	strh	r2, [r0, #14]
 8016b7a:	6183      	str	r3, [r0, #24]
 8016b7c:	4619      	mov	r1, r3
 8016b7e:	2208      	movs	r2, #8
 8016b80:	305c      	adds	r0, #92	@ 0x5c
 8016b82:	f000 fa01 	bl	8016f88 <memset>
 8016b86:	4b0d      	ldr	r3, [pc, #52]	@ (8016bbc <std+0x58>)
 8016b88:	6263      	str	r3, [r4, #36]	@ 0x24
 8016b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8016bc0 <std+0x5c>)
 8016b8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8016bc4 <std+0x60>)
 8016b90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016b92:	4b0d      	ldr	r3, [pc, #52]	@ (8016bc8 <std+0x64>)
 8016b94:	6323      	str	r3, [r4, #48]	@ 0x30
 8016b96:	4b0d      	ldr	r3, [pc, #52]	@ (8016bcc <std+0x68>)
 8016b98:	6224      	str	r4, [r4, #32]
 8016b9a:	429c      	cmp	r4, r3
 8016b9c:	d006      	beq.n	8016bac <std+0x48>
 8016b9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016ba2:	4294      	cmp	r4, r2
 8016ba4:	d002      	beq.n	8016bac <std+0x48>
 8016ba6:	33d0      	adds	r3, #208	@ 0xd0
 8016ba8:	429c      	cmp	r4, r3
 8016baa:	d105      	bne.n	8016bb8 <std+0x54>
 8016bac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bb4:	f000 ba64 	b.w	8017080 <__retarget_lock_init_recursive>
 8016bb8:	bd10      	pop	{r4, pc}
 8016bba:	bf00      	nop
 8016bbc:	08016dd9 	.word	0x08016dd9
 8016bc0:	08016dfb 	.word	0x08016dfb
 8016bc4:	08016e33 	.word	0x08016e33
 8016bc8:	08016e57 	.word	0x08016e57
 8016bcc:	200021f4 	.word	0x200021f4

08016bd0 <stdio_exit_handler>:
 8016bd0:	4a02      	ldr	r2, [pc, #8]	@ (8016bdc <stdio_exit_handler+0xc>)
 8016bd2:	4903      	ldr	r1, [pc, #12]	@ (8016be0 <stdio_exit_handler+0x10>)
 8016bd4:	4803      	ldr	r0, [pc, #12]	@ (8016be4 <stdio_exit_handler+0x14>)
 8016bd6:	f000 b869 	b.w	8016cac <_fwalk_sglue>
 8016bda:	bf00      	nop
 8016bdc:	20000138 	.word	0x20000138
 8016be0:	080189d1 	.word	0x080189d1
 8016be4:	20000148 	.word	0x20000148

08016be8 <cleanup_stdio>:
 8016be8:	6841      	ldr	r1, [r0, #4]
 8016bea:	4b0c      	ldr	r3, [pc, #48]	@ (8016c1c <cleanup_stdio+0x34>)
 8016bec:	4299      	cmp	r1, r3
 8016bee:	b510      	push	{r4, lr}
 8016bf0:	4604      	mov	r4, r0
 8016bf2:	d001      	beq.n	8016bf8 <cleanup_stdio+0x10>
 8016bf4:	f001 feec 	bl	80189d0 <_fflush_r>
 8016bf8:	68a1      	ldr	r1, [r4, #8]
 8016bfa:	4b09      	ldr	r3, [pc, #36]	@ (8016c20 <cleanup_stdio+0x38>)
 8016bfc:	4299      	cmp	r1, r3
 8016bfe:	d002      	beq.n	8016c06 <cleanup_stdio+0x1e>
 8016c00:	4620      	mov	r0, r4
 8016c02:	f001 fee5 	bl	80189d0 <_fflush_r>
 8016c06:	68e1      	ldr	r1, [r4, #12]
 8016c08:	4b06      	ldr	r3, [pc, #24]	@ (8016c24 <cleanup_stdio+0x3c>)
 8016c0a:	4299      	cmp	r1, r3
 8016c0c:	d004      	beq.n	8016c18 <cleanup_stdio+0x30>
 8016c0e:	4620      	mov	r0, r4
 8016c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c14:	f001 bedc 	b.w	80189d0 <_fflush_r>
 8016c18:	bd10      	pop	{r4, pc}
 8016c1a:	bf00      	nop
 8016c1c:	200021f4 	.word	0x200021f4
 8016c20:	2000225c 	.word	0x2000225c
 8016c24:	200022c4 	.word	0x200022c4

08016c28 <global_stdio_init.part.0>:
 8016c28:	b510      	push	{r4, lr}
 8016c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8016c58 <global_stdio_init.part.0+0x30>)
 8016c2c:	4c0b      	ldr	r4, [pc, #44]	@ (8016c5c <global_stdio_init.part.0+0x34>)
 8016c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8016c60 <global_stdio_init.part.0+0x38>)
 8016c30:	601a      	str	r2, [r3, #0]
 8016c32:	4620      	mov	r0, r4
 8016c34:	2200      	movs	r2, #0
 8016c36:	2104      	movs	r1, #4
 8016c38:	f7ff ff94 	bl	8016b64 <std>
 8016c3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016c40:	2201      	movs	r2, #1
 8016c42:	2109      	movs	r1, #9
 8016c44:	f7ff ff8e 	bl	8016b64 <std>
 8016c48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016c4c:	2202      	movs	r2, #2
 8016c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c52:	2112      	movs	r1, #18
 8016c54:	f7ff bf86 	b.w	8016b64 <std>
 8016c58:	2000232c 	.word	0x2000232c
 8016c5c:	200021f4 	.word	0x200021f4
 8016c60:	08016bd1 	.word	0x08016bd1

08016c64 <__sfp_lock_acquire>:
 8016c64:	4801      	ldr	r0, [pc, #4]	@ (8016c6c <__sfp_lock_acquire+0x8>)
 8016c66:	f000 ba0c 	b.w	8017082 <__retarget_lock_acquire_recursive>
 8016c6a:	bf00      	nop
 8016c6c:	20002335 	.word	0x20002335

08016c70 <__sfp_lock_release>:
 8016c70:	4801      	ldr	r0, [pc, #4]	@ (8016c78 <__sfp_lock_release+0x8>)
 8016c72:	f000 ba07 	b.w	8017084 <__retarget_lock_release_recursive>
 8016c76:	bf00      	nop
 8016c78:	20002335 	.word	0x20002335

08016c7c <__sinit>:
 8016c7c:	b510      	push	{r4, lr}
 8016c7e:	4604      	mov	r4, r0
 8016c80:	f7ff fff0 	bl	8016c64 <__sfp_lock_acquire>
 8016c84:	6a23      	ldr	r3, [r4, #32]
 8016c86:	b11b      	cbz	r3, 8016c90 <__sinit+0x14>
 8016c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c8c:	f7ff bff0 	b.w	8016c70 <__sfp_lock_release>
 8016c90:	4b04      	ldr	r3, [pc, #16]	@ (8016ca4 <__sinit+0x28>)
 8016c92:	6223      	str	r3, [r4, #32]
 8016c94:	4b04      	ldr	r3, [pc, #16]	@ (8016ca8 <__sinit+0x2c>)
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d1f5      	bne.n	8016c88 <__sinit+0xc>
 8016c9c:	f7ff ffc4 	bl	8016c28 <global_stdio_init.part.0>
 8016ca0:	e7f2      	b.n	8016c88 <__sinit+0xc>
 8016ca2:	bf00      	nop
 8016ca4:	08016be9 	.word	0x08016be9
 8016ca8:	2000232c 	.word	0x2000232c

08016cac <_fwalk_sglue>:
 8016cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016cb0:	4607      	mov	r7, r0
 8016cb2:	4688      	mov	r8, r1
 8016cb4:	4614      	mov	r4, r2
 8016cb6:	2600      	movs	r6, #0
 8016cb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016cbc:	f1b9 0901 	subs.w	r9, r9, #1
 8016cc0:	d505      	bpl.n	8016cce <_fwalk_sglue+0x22>
 8016cc2:	6824      	ldr	r4, [r4, #0]
 8016cc4:	2c00      	cmp	r4, #0
 8016cc6:	d1f7      	bne.n	8016cb8 <_fwalk_sglue+0xc>
 8016cc8:	4630      	mov	r0, r6
 8016cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cce:	89ab      	ldrh	r3, [r5, #12]
 8016cd0:	2b01      	cmp	r3, #1
 8016cd2:	d907      	bls.n	8016ce4 <_fwalk_sglue+0x38>
 8016cd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016cd8:	3301      	adds	r3, #1
 8016cda:	d003      	beq.n	8016ce4 <_fwalk_sglue+0x38>
 8016cdc:	4629      	mov	r1, r5
 8016cde:	4638      	mov	r0, r7
 8016ce0:	47c0      	blx	r8
 8016ce2:	4306      	orrs	r6, r0
 8016ce4:	3568      	adds	r5, #104	@ 0x68
 8016ce6:	e7e9      	b.n	8016cbc <_fwalk_sglue+0x10>

08016ce8 <iprintf>:
 8016ce8:	b40f      	push	{r0, r1, r2, r3}
 8016cea:	b507      	push	{r0, r1, r2, lr}
 8016cec:	4906      	ldr	r1, [pc, #24]	@ (8016d08 <iprintf+0x20>)
 8016cee:	ab04      	add	r3, sp, #16
 8016cf0:	6808      	ldr	r0, [r1, #0]
 8016cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cf6:	6881      	ldr	r1, [r0, #8]
 8016cf8:	9301      	str	r3, [sp, #4]
 8016cfa:	f001 fccd 	bl	8018698 <_vfiprintf_r>
 8016cfe:	b003      	add	sp, #12
 8016d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d04:	b004      	add	sp, #16
 8016d06:	4770      	bx	lr
 8016d08:	20000144 	.word	0x20000144

08016d0c <putchar>:
 8016d0c:	4b02      	ldr	r3, [pc, #8]	@ (8016d18 <putchar+0xc>)
 8016d0e:	4601      	mov	r1, r0
 8016d10:	6818      	ldr	r0, [r3, #0]
 8016d12:	6882      	ldr	r2, [r0, #8]
 8016d14:	f001 bee6 	b.w	8018ae4 <_putc_r>
 8016d18:	20000144 	.word	0x20000144

08016d1c <_puts_r>:
 8016d1c:	6a03      	ldr	r3, [r0, #32]
 8016d1e:	b570      	push	{r4, r5, r6, lr}
 8016d20:	6884      	ldr	r4, [r0, #8]
 8016d22:	4605      	mov	r5, r0
 8016d24:	460e      	mov	r6, r1
 8016d26:	b90b      	cbnz	r3, 8016d2c <_puts_r+0x10>
 8016d28:	f7ff ffa8 	bl	8016c7c <__sinit>
 8016d2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016d2e:	07db      	lsls	r3, r3, #31
 8016d30:	d405      	bmi.n	8016d3e <_puts_r+0x22>
 8016d32:	89a3      	ldrh	r3, [r4, #12]
 8016d34:	0598      	lsls	r0, r3, #22
 8016d36:	d402      	bmi.n	8016d3e <_puts_r+0x22>
 8016d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016d3a:	f000 f9a2 	bl	8017082 <__retarget_lock_acquire_recursive>
 8016d3e:	89a3      	ldrh	r3, [r4, #12]
 8016d40:	0719      	lsls	r1, r3, #28
 8016d42:	d502      	bpl.n	8016d4a <_puts_r+0x2e>
 8016d44:	6923      	ldr	r3, [r4, #16]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d135      	bne.n	8016db6 <_puts_r+0x9a>
 8016d4a:	4621      	mov	r1, r4
 8016d4c:	4628      	mov	r0, r5
 8016d4e:	f000 f8c5 	bl	8016edc <__swsetup_r>
 8016d52:	b380      	cbz	r0, 8016db6 <_puts_r+0x9a>
 8016d54:	f04f 35ff 	mov.w	r5, #4294967295
 8016d58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016d5a:	07da      	lsls	r2, r3, #31
 8016d5c:	d405      	bmi.n	8016d6a <_puts_r+0x4e>
 8016d5e:	89a3      	ldrh	r3, [r4, #12]
 8016d60:	059b      	lsls	r3, r3, #22
 8016d62:	d402      	bmi.n	8016d6a <_puts_r+0x4e>
 8016d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016d66:	f000 f98d 	bl	8017084 <__retarget_lock_release_recursive>
 8016d6a:	4628      	mov	r0, r5
 8016d6c:	bd70      	pop	{r4, r5, r6, pc}
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	da04      	bge.n	8016d7c <_puts_r+0x60>
 8016d72:	69a2      	ldr	r2, [r4, #24]
 8016d74:	429a      	cmp	r2, r3
 8016d76:	dc17      	bgt.n	8016da8 <_puts_r+0x8c>
 8016d78:	290a      	cmp	r1, #10
 8016d7a:	d015      	beq.n	8016da8 <_puts_r+0x8c>
 8016d7c:	6823      	ldr	r3, [r4, #0]
 8016d7e:	1c5a      	adds	r2, r3, #1
 8016d80:	6022      	str	r2, [r4, #0]
 8016d82:	7019      	strb	r1, [r3, #0]
 8016d84:	68a3      	ldr	r3, [r4, #8]
 8016d86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016d8a:	3b01      	subs	r3, #1
 8016d8c:	60a3      	str	r3, [r4, #8]
 8016d8e:	2900      	cmp	r1, #0
 8016d90:	d1ed      	bne.n	8016d6e <_puts_r+0x52>
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	da11      	bge.n	8016dba <_puts_r+0x9e>
 8016d96:	4622      	mov	r2, r4
 8016d98:	210a      	movs	r1, #10
 8016d9a:	4628      	mov	r0, r5
 8016d9c:	f000 f85f 	bl	8016e5e <__swbuf_r>
 8016da0:	3001      	adds	r0, #1
 8016da2:	d0d7      	beq.n	8016d54 <_puts_r+0x38>
 8016da4:	250a      	movs	r5, #10
 8016da6:	e7d7      	b.n	8016d58 <_puts_r+0x3c>
 8016da8:	4622      	mov	r2, r4
 8016daa:	4628      	mov	r0, r5
 8016dac:	f000 f857 	bl	8016e5e <__swbuf_r>
 8016db0:	3001      	adds	r0, #1
 8016db2:	d1e7      	bne.n	8016d84 <_puts_r+0x68>
 8016db4:	e7ce      	b.n	8016d54 <_puts_r+0x38>
 8016db6:	3e01      	subs	r6, #1
 8016db8:	e7e4      	b.n	8016d84 <_puts_r+0x68>
 8016dba:	6823      	ldr	r3, [r4, #0]
 8016dbc:	1c5a      	adds	r2, r3, #1
 8016dbe:	6022      	str	r2, [r4, #0]
 8016dc0:	220a      	movs	r2, #10
 8016dc2:	701a      	strb	r2, [r3, #0]
 8016dc4:	e7ee      	b.n	8016da4 <_puts_r+0x88>
	...

08016dc8 <puts>:
 8016dc8:	4b02      	ldr	r3, [pc, #8]	@ (8016dd4 <puts+0xc>)
 8016dca:	4601      	mov	r1, r0
 8016dcc:	6818      	ldr	r0, [r3, #0]
 8016dce:	f7ff bfa5 	b.w	8016d1c <_puts_r>
 8016dd2:	bf00      	nop
 8016dd4:	20000144 	.word	0x20000144

08016dd8 <__sread>:
 8016dd8:	b510      	push	{r4, lr}
 8016dda:	460c      	mov	r4, r1
 8016ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016de0:	f000 f900 	bl	8016fe4 <_read_r>
 8016de4:	2800      	cmp	r0, #0
 8016de6:	bfab      	itete	ge
 8016de8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016dea:	89a3      	ldrhlt	r3, [r4, #12]
 8016dec:	181b      	addge	r3, r3, r0
 8016dee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016df2:	bfac      	ite	ge
 8016df4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016df6:	81a3      	strhlt	r3, [r4, #12]
 8016df8:	bd10      	pop	{r4, pc}

08016dfa <__swrite>:
 8016dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dfe:	461f      	mov	r7, r3
 8016e00:	898b      	ldrh	r3, [r1, #12]
 8016e02:	05db      	lsls	r3, r3, #23
 8016e04:	4605      	mov	r5, r0
 8016e06:	460c      	mov	r4, r1
 8016e08:	4616      	mov	r6, r2
 8016e0a:	d505      	bpl.n	8016e18 <__swrite+0x1e>
 8016e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e10:	2302      	movs	r3, #2
 8016e12:	2200      	movs	r2, #0
 8016e14:	f000 f8d4 	bl	8016fc0 <_lseek_r>
 8016e18:	89a3      	ldrh	r3, [r4, #12]
 8016e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016e22:	81a3      	strh	r3, [r4, #12]
 8016e24:	4632      	mov	r2, r6
 8016e26:	463b      	mov	r3, r7
 8016e28:	4628      	mov	r0, r5
 8016e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e2e:	f000 b8eb 	b.w	8017008 <_write_r>

08016e32 <__sseek>:
 8016e32:	b510      	push	{r4, lr}
 8016e34:	460c      	mov	r4, r1
 8016e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e3a:	f000 f8c1 	bl	8016fc0 <_lseek_r>
 8016e3e:	1c43      	adds	r3, r0, #1
 8016e40:	89a3      	ldrh	r3, [r4, #12]
 8016e42:	bf15      	itete	ne
 8016e44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016e46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016e4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016e4e:	81a3      	strheq	r3, [r4, #12]
 8016e50:	bf18      	it	ne
 8016e52:	81a3      	strhne	r3, [r4, #12]
 8016e54:	bd10      	pop	{r4, pc}

08016e56 <__sclose>:
 8016e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e5a:	f000 b8a1 	b.w	8016fa0 <_close_r>

08016e5e <__swbuf_r>:
 8016e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e60:	460e      	mov	r6, r1
 8016e62:	4614      	mov	r4, r2
 8016e64:	4605      	mov	r5, r0
 8016e66:	b118      	cbz	r0, 8016e70 <__swbuf_r+0x12>
 8016e68:	6a03      	ldr	r3, [r0, #32]
 8016e6a:	b90b      	cbnz	r3, 8016e70 <__swbuf_r+0x12>
 8016e6c:	f7ff ff06 	bl	8016c7c <__sinit>
 8016e70:	69a3      	ldr	r3, [r4, #24]
 8016e72:	60a3      	str	r3, [r4, #8]
 8016e74:	89a3      	ldrh	r3, [r4, #12]
 8016e76:	071a      	lsls	r2, r3, #28
 8016e78:	d501      	bpl.n	8016e7e <__swbuf_r+0x20>
 8016e7a:	6923      	ldr	r3, [r4, #16]
 8016e7c:	b943      	cbnz	r3, 8016e90 <__swbuf_r+0x32>
 8016e7e:	4621      	mov	r1, r4
 8016e80:	4628      	mov	r0, r5
 8016e82:	f000 f82b 	bl	8016edc <__swsetup_r>
 8016e86:	b118      	cbz	r0, 8016e90 <__swbuf_r+0x32>
 8016e88:	f04f 37ff 	mov.w	r7, #4294967295
 8016e8c:	4638      	mov	r0, r7
 8016e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e90:	6823      	ldr	r3, [r4, #0]
 8016e92:	6922      	ldr	r2, [r4, #16]
 8016e94:	1a98      	subs	r0, r3, r2
 8016e96:	6963      	ldr	r3, [r4, #20]
 8016e98:	b2f6      	uxtb	r6, r6
 8016e9a:	4283      	cmp	r3, r0
 8016e9c:	4637      	mov	r7, r6
 8016e9e:	dc05      	bgt.n	8016eac <__swbuf_r+0x4e>
 8016ea0:	4621      	mov	r1, r4
 8016ea2:	4628      	mov	r0, r5
 8016ea4:	f001 fd94 	bl	80189d0 <_fflush_r>
 8016ea8:	2800      	cmp	r0, #0
 8016eaa:	d1ed      	bne.n	8016e88 <__swbuf_r+0x2a>
 8016eac:	68a3      	ldr	r3, [r4, #8]
 8016eae:	3b01      	subs	r3, #1
 8016eb0:	60a3      	str	r3, [r4, #8]
 8016eb2:	6823      	ldr	r3, [r4, #0]
 8016eb4:	1c5a      	adds	r2, r3, #1
 8016eb6:	6022      	str	r2, [r4, #0]
 8016eb8:	701e      	strb	r6, [r3, #0]
 8016eba:	6962      	ldr	r2, [r4, #20]
 8016ebc:	1c43      	adds	r3, r0, #1
 8016ebe:	429a      	cmp	r2, r3
 8016ec0:	d004      	beq.n	8016ecc <__swbuf_r+0x6e>
 8016ec2:	89a3      	ldrh	r3, [r4, #12]
 8016ec4:	07db      	lsls	r3, r3, #31
 8016ec6:	d5e1      	bpl.n	8016e8c <__swbuf_r+0x2e>
 8016ec8:	2e0a      	cmp	r6, #10
 8016eca:	d1df      	bne.n	8016e8c <__swbuf_r+0x2e>
 8016ecc:	4621      	mov	r1, r4
 8016ece:	4628      	mov	r0, r5
 8016ed0:	f001 fd7e 	bl	80189d0 <_fflush_r>
 8016ed4:	2800      	cmp	r0, #0
 8016ed6:	d0d9      	beq.n	8016e8c <__swbuf_r+0x2e>
 8016ed8:	e7d6      	b.n	8016e88 <__swbuf_r+0x2a>
	...

08016edc <__swsetup_r>:
 8016edc:	b538      	push	{r3, r4, r5, lr}
 8016ede:	4b29      	ldr	r3, [pc, #164]	@ (8016f84 <__swsetup_r+0xa8>)
 8016ee0:	4605      	mov	r5, r0
 8016ee2:	6818      	ldr	r0, [r3, #0]
 8016ee4:	460c      	mov	r4, r1
 8016ee6:	b118      	cbz	r0, 8016ef0 <__swsetup_r+0x14>
 8016ee8:	6a03      	ldr	r3, [r0, #32]
 8016eea:	b90b      	cbnz	r3, 8016ef0 <__swsetup_r+0x14>
 8016eec:	f7ff fec6 	bl	8016c7c <__sinit>
 8016ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ef4:	0719      	lsls	r1, r3, #28
 8016ef6:	d422      	bmi.n	8016f3e <__swsetup_r+0x62>
 8016ef8:	06da      	lsls	r2, r3, #27
 8016efa:	d407      	bmi.n	8016f0c <__swsetup_r+0x30>
 8016efc:	2209      	movs	r2, #9
 8016efe:	602a      	str	r2, [r5, #0]
 8016f00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f04:	81a3      	strh	r3, [r4, #12]
 8016f06:	f04f 30ff 	mov.w	r0, #4294967295
 8016f0a:	e033      	b.n	8016f74 <__swsetup_r+0x98>
 8016f0c:	0758      	lsls	r0, r3, #29
 8016f0e:	d512      	bpl.n	8016f36 <__swsetup_r+0x5a>
 8016f10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016f12:	b141      	cbz	r1, 8016f26 <__swsetup_r+0x4a>
 8016f14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016f18:	4299      	cmp	r1, r3
 8016f1a:	d002      	beq.n	8016f22 <__swsetup_r+0x46>
 8016f1c:	4628      	mov	r0, r5
 8016f1e:	f000 ff0f 	bl	8017d40 <_free_r>
 8016f22:	2300      	movs	r3, #0
 8016f24:	6363      	str	r3, [r4, #52]	@ 0x34
 8016f26:	89a3      	ldrh	r3, [r4, #12]
 8016f28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016f2c:	81a3      	strh	r3, [r4, #12]
 8016f2e:	2300      	movs	r3, #0
 8016f30:	6063      	str	r3, [r4, #4]
 8016f32:	6923      	ldr	r3, [r4, #16]
 8016f34:	6023      	str	r3, [r4, #0]
 8016f36:	89a3      	ldrh	r3, [r4, #12]
 8016f38:	f043 0308 	orr.w	r3, r3, #8
 8016f3c:	81a3      	strh	r3, [r4, #12]
 8016f3e:	6923      	ldr	r3, [r4, #16]
 8016f40:	b94b      	cbnz	r3, 8016f56 <__swsetup_r+0x7a>
 8016f42:	89a3      	ldrh	r3, [r4, #12]
 8016f44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016f4c:	d003      	beq.n	8016f56 <__swsetup_r+0x7a>
 8016f4e:	4621      	mov	r1, r4
 8016f50:	4628      	mov	r0, r5
 8016f52:	f001 fd8b 	bl	8018a6c <__smakebuf_r>
 8016f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f5a:	f013 0201 	ands.w	r2, r3, #1
 8016f5e:	d00a      	beq.n	8016f76 <__swsetup_r+0x9a>
 8016f60:	2200      	movs	r2, #0
 8016f62:	60a2      	str	r2, [r4, #8]
 8016f64:	6962      	ldr	r2, [r4, #20]
 8016f66:	4252      	negs	r2, r2
 8016f68:	61a2      	str	r2, [r4, #24]
 8016f6a:	6922      	ldr	r2, [r4, #16]
 8016f6c:	b942      	cbnz	r2, 8016f80 <__swsetup_r+0xa4>
 8016f6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016f72:	d1c5      	bne.n	8016f00 <__swsetup_r+0x24>
 8016f74:	bd38      	pop	{r3, r4, r5, pc}
 8016f76:	0799      	lsls	r1, r3, #30
 8016f78:	bf58      	it	pl
 8016f7a:	6962      	ldrpl	r2, [r4, #20]
 8016f7c:	60a2      	str	r2, [r4, #8]
 8016f7e:	e7f4      	b.n	8016f6a <__swsetup_r+0x8e>
 8016f80:	2000      	movs	r0, #0
 8016f82:	e7f7      	b.n	8016f74 <__swsetup_r+0x98>
 8016f84:	20000144 	.word	0x20000144

08016f88 <memset>:
 8016f88:	4402      	add	r2, r0
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	4293      	cmp	r3, r2
 8016f8e:	d100      	bne.n	8016f92 <memset+0xa>
 8016f90:	4770      	bx	lr
 8016f92:	f803 1b01 	strb.w	r1, [r3], #1
 8016f96:	e7f9      	b.n	8016f8c <memset+0x4>

08016f98 <_localeconv_r>:
 8016f98:	4800      	ldr	r0, [pc, #0]	@ (8016f9c <_localeconv_r+0x4>)
 8016f9a:	4770      	bx	lr
 8016f9c:	20000284 	.word	0x20000284

08016fa0 <_close_r>:
 8016fa0:	b538      	push	{r3, r4, r5, lr}
 8016fa2:	4d06      	ldr	r5, [pc, #24]	@ (8016fbc <_close_r+0x1c>)
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	4604      	mov	r4, r0
 8016fa8:	4608      	mov	r0, r1
 8016faa:	602b      	str	r3, [r5, #0]
 8016fac:	f7f1 fd64 	bl	8008a78 <_close>
 8016fb0:	1c43      	adds	r3, r0, #1
 8016fb2:	d102      	bne.n	8016fba <_close_r+0x1a>
 8016fb4:	682b      	ldr	r3, [r5, #0]
 8016fb6:	b103      	cbz	r3, 8016fba <_close_r+0x1a>
 8016fb8:	6023      	str	r3, [r4, #0]
 8016fba:	bd38      	pop	{r3, r4, r5, pc}
 8016fbc:	20002330 	.word	0x20002330

08016fc0 <_lseek_r>:
 8016fc0:	b538      	push	{r3, r4, r5, lr}
 8016fc2:	4d07      	ldr	r5, [pc, #28]	@ (8016fe0 <_lseek_r+0x20>)
 8016fc4:	4604      	mov	r4, r0
 8016fc6:	4608      	mov	r0, r1
 8016fc8:	4611      	mov	r1, r2
 8016fca:	2200      	movs	r2, #0
 8016fcc:	602a      	str	r2, [r5, #0]
 8016fce:	461a      	mov	r2, r3
 8016fd0:	f7f1 fd79 	bl	8008ac6 <_lseek>
 8016fd4:	1c43      	adds	r3, r0, #1
 8016fd6:	d102      	bne.n	8016fde <_lseek_r+0x1e>
 8016fd8:	682b      	ldr	r3, [r5, #0]
 8016fda:	b103      	cbz	r3, 8016fde <_lseek_r+0x1e>
 8016fdc:	6023      	str	r3, [r4, #0]
 8016fde:	bd38      	pop	{r3, r4, r5, pc}
 8016fe0:	20002330 	.word	0x20002330

08016fe4 <_read_r>:
 8016fe4:	b538      	push	{r3, r4, r5, lr}
 8016fe6:	4d07      	ldr	r5, [pc, #28]	@ (8017004 <_read_r+0x20>)
 8016fe8:	4604      	mov	r4, r0
 8016fea:	4608      	mov	r0, r1
 8016fec:	4611      	mov	r1, r2
 8016fee:	2200      	movs	r2, #0
 8016ff0:	602a      	str	r2, [r5, #0]
 8016ff2:	461a      	mov	r2, r3
 8016ff4:	f7f1 fd07 	bl	8008a06 <_read>
 8016ff8:	1c43      	adds	r3, r0, #1
 8016ffa:	d102      	bne.n	8017002 <_read_r+0x1e>
 8016ffc:	682b      	ldr	r3, [r5, #0]
 8016ffe:	b103      	cbz	r3, 8017002 <_read_r+0x1e>
 8017000:	6023      	str	r3, [r4, #0]
 8017002:	bd38      	pop	{r3, r4, r5, pc}
 8017004:	20002330 	.word	0x20002330

08017008 <_write_r>:
 8017008:	b538      	push	{r3, r4, r5, lr}
 801700a:	4d07      	ldr	r5, [pc, #28]	@ (8017028 <_write_r+0x20>)
 801700c:	4604      	mov	r4, r0
 801700e:	4608      	mov	r0, r1
 8017010:	4611      	mov	r1, r2
 8017012:	2200      	movs	r2, #0
 8017014:	602a      	str	r2, [r5, #0]
 8017016:	461a      	mov	r2, r3
 8017018:	f7f1 fd12 	bl	8008a40 <_write>
 801701c:	1c43      	adds	r3, r0, #1
 801701e:	d102      	bne.n	8017026 <_write_r+0x1e>
 8017020:	682b      	ldr	r3, [r5, #0]
 8017022:	b103      	cbz	r3, 8017026 <_write_r+0x1e>
 8017024:	6023      	str	r3, [r4, #0]
 8017026:	bd38      	pop	{r3, r4, r5, pc}
 8017028:	20002330 	.word	0x20002330

0801702c <__errno>:
 801702c:	4b01      	ldr	r3, [pc, #4]	@ (8017034 <__errno+0x8>)
 801702e:	6818      	ldr	r0, [r3, #0]
 8017030:	4770      	bx	lr
 8017032:	bf00      	nop
 8017034:	20000144 	.word	0x20000144

08017038 <__libc_init_array>:
 8017038:	b570      	push	{r4, r5, r6, lr}
 801703a:	4d0d      	ldr	r5, [pc, #52]	@ (8017070 <__libc_init_array+0x38>)
 801703c:	4c0d      	ldr	r4, [pc, #52]	@ (8017074 <__libc_init_array+0x3c>)
 801703e:	1b64      	subs	r4, r4, r5
 8017040:	10a4      	asrs	r4, r4, #2
 8017042:	2600      	movs	r6, #0
 8017044:	42a6      	cmp	r6, r4
 8017046:	d109      	bne.n	801705c <__libc_init_array+0x24>
 8017048:	4d0b      	ldr	r5, [pc, #44]	@ (8017078 <__libc_init_array+0x40>)
 801704a:	4c0c      	ldr	r4, [pc, #48]	@ (801707c <__libc_init_array+0x44>)
 801704c:	f002 fdbe 	bl	8019bcc <_init>
 8017050:	1b64      	subs	r4, r4, r5
 8017052:	10a4      	asrs	r4, r4, #2
 8017054:	2600      	movs	r6, #0
 8017056:	42a6      	cmp	r6, r4
 8017058:	d105      	bne.n	8017066 <__libc_init_array+0x2e>
 801705a:	bd70      	pop	{r4, r5, r6, pc}
 801705c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017060:	4798      	blx	r3
 8017062:	3601      	adds	r6, #1
 8017064:	e7ee      	b.n	8017044 <__libc_init_array+0xc>
 8017066:	f855 3b04 	ldr.w	r3, [r5], #4
 801706a:	4798      	blx	r3
 801706c:	3601      	adds	r6, #1
 801706e:	e7f2      	b.n	8017056 <__libc_init_array+0x1e>
 8017070:	0801d180 	.word	0x0801d180
 8017074:	0801d180 	.word	0x0801d180
 8017078:	0801d180 	.word	0x0801d180
 801707c:	0801d184 	.word	0x0801d184

08017080 <__retarget_lock_init_recursive>:
 8017080:	4770      	bx	lr

08017082 <__retarget_lock_acquire_recursive>:
 8017082:	4770      	bx	lr

08017084 <__retarget_lock_release_recursive>:
 8017084:	4770      	bx	lr

08017086 <memcpy>:
 8017086:	440a      	add	r2, r1
 8017088:	4291      	cmp	r1, r2
 801708a:	f100 33ff 	add.w	r3, r0, #4294967295
 801708e:	d100      	bne.n	8017092 <memcpy+0xc>
 8017090:	4770      	bx	lr
 8017092:	b510      	push	{r4, lr}
 8017094:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017098:	f803 4f01 	strb.w	r4, [r3, #1]!
 801709c:	4291      	cmp	r1, r2
 801709e:	d1f9      	bne.n	8017094 <memcpy+0xe>
 80170a0:	bd10      	pop	{r4, pc}

080170a2 <quorem>:
 80170a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170a6:	6903      	ldr	r3, [r0, #16]
 80170a8:	690c      	ldr	r4, [r1, #16]
 80170aa:	42a3      	cmp	r3, r4
 80170ac:	4607      	mov	r7, r0
 80170ae:	db7e      	blt.n	80171ae <quorem+0x10c>
 80170b0:	3c01      	subs	r4, #1
 80170b2:	f101 0814 	add.w	r8, r1, #20
 80170b6:	00a3      	lsls	r3, r4, #2
 80170b8:	f100 0514 	add.w	r5, r0, #20
 80170bc:	9300      	str	r3, [sp, #0]
 80170be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80170c2:	9301      	str	r3, [sp, #4]
 80170c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80170c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80170cc:	3301      	adds	r3, #1
 80170ce:	429a      	cmp	r2, r3
 80170d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80170d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80170d8:	d32e      	bcc.n	8017138 <quorem+0x96>
 80170da:	f04f 0a00 	mov.w	sl, #0
 80170de:	46c4      	mov	ip, r8
 80170e0:	46ae      	mov	lr, r5
 80170e2:	46d3      	mov	fp, sl
 80170e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80170e8:	b298      	uxth	r0, r3
 80170ea:	fb06 a000 	mla	r0, r6, r0, sl
 80170ee:	0c02      	lsrs	r2, r0, #16
 80170f0:	0c1b      	lsrs	r3, r3, #16
 80170f2:	fb06 2303 	mla	r3, r6, r3, r2
 80170f6:	f8de 2000 	ldr.w	r2, [lr]
 80170fa:	b280      	uxth	r0, r0
 80170fc:	b292      	uxth	r2, r2
 80170fe:	1a12      	subs	r2, r2, r0
 8017100:	445a      	add	r2, fp
 8017102:	f8de 0000 	ldr.w	r0, [lr]
 8017106:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801710a:	b29b      	uxth	r3, r3
 801710c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8017110:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8017114:	b292      	uxth	r2, r2
 8017116:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801711a:	45e1      	cmp	r9, ip
 801711c:	f84e 2b04 	str.w	r2, [lr], #4
 8017120:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8017124:	d2de      	bcs.n	80170e4 <quorem+0x42>
 8017126:	9b00      	ldr	r3, [sp, #0]
 8017128:	58eb      	ldr	r3, [r5, r3]
 801712a:	b92b      	cbnz	r3, 8017138 <quorem+0x96>
 801712c:	9b01      	ldr	r3, [sp, #4]
 801712e:	3b04      	subs	r3, #4
 8017130:	429d      	cmp	r5, r3
 8017132:	461a      	mov	r2, r3
 8017134:	d32f      	bcc.n	8017196 <quorem+0xf4>
 8017136:	613c      	str	r4, [r7, #16]
 8017138:	4638      	mov	r0, r7
 801713a:	f001 f97b 	bl	8018434 <__mcmp>
 801713e:	2800      	cmp	r0, #0
 8017140:	db25      	blt.n	801718e <quorem+0xec>
 8017142:	4629      	mov	r1, r5
 8017144:	2000      	movs	r0, #0
 8017146:	f858 2b04 	ldr.w	r2, [r8], #4
 801714a:	f8d1 c000 	ldr.w	ip, [r1]
 801714e:	fa1f fe82 	uxth.w	lr, r2
 8017152:	fa1f f38c 	uxth.w	r3, ip
 8017156:	eba3 030e 	sub.w	r3, r3, lr
 801715a:	4403      	add	r3, r0
 801715c:	0c12      	lsrs	r2, r2, #16
 801715e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8017162:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8017166:	b29b      	uxth	r3, r3
 8017168:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801716c:	45c1      	cmp	r9, r8
 801716e:	f841 3b04 	str.w	r3, [r1], #4
 8017172:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017176:	d2e6      	bcs.n	8017146 <quorem+0xa4>
 8017178:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801717c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017180:	b922      	cbnz	r2, 801718c <quorem+0xea>
 8017182:	3b04      	subs	r3, #4
 8017184:	429d      	cmp	r5, r3
 8017186:	461a      	mov	r2, r3
 8017188:	d30b      	bcc.n	80171a2 <quorem+0x100>
 801718a:	613c      	str	r4, [r7, #16]
 801718c:	3601      	adds	r6, #1
 801718e:	4630      	mov	r0, r6
 8017190:	b003      	add	sp, #12
 8017192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017196:	6812      	ldr	r2, [r2, #0]
 8017198:	3b04      	subs	r3, #4
 801719a:	2a00      	cmp	r2, #0
 801719c:	d1cb      	bne.n	8017136 <quorem+0x94>
 801719e:	3c01      	subs	r4, #1
 80171a0:	e7c6      	b.n	8017130 <quorem+0x8e>
 80171a2:	6812      	ldr	r2, [r2, #0]
 80171a4:	3b04      	subs	r3, #4
 80171a6:	2a00      	cmp	r2, #0
 80171a8:	d1ef      	bne.n	801718a <quorem+0xe8>
 80171aa:	3c01      	subs	r4, #1
 80171ac:	e7ea      	b.n	8017184 <quorem+0xe2>
 80171ae:	2000      	movs	r0, #0
 80171b0:	e7ee      	b.n	8017190 <quorem+0xee>
 80171b2:	0000      	movs	r0, r0
 80171b4:	0000      	movs	r0, r0
	...

080171b8 <_dtoa_r>:
 80171b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171bc:	69c7      	ldr	r7, [r0, #28]
 80171be:	b099      	sub	sp, #100	@ 0x64
 80171c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80171c4:	ec55 4b10 	vmov	r4, r5, d0
 80171c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80171ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80171cc:	4683      	mov	fp, r0
 80171ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80171d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80171d2:	b97f      	cbnz	r7, 80171f4 <_dtoa_r+0x3c>
 80171d4:	2010      	movs	r0, #16
 80171d6:	f000 fdfd 	bl	8017dd4 <malloc>
 80171da:	4602      	mov	r2, r0
 80171dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80171e0:	b920      	cbnz	r0, 80171ec <_dtoa_r+0x34>
 80171e2:	4ba7      	ldr	r3, [pc, #668]	@ (8017480 <_dtoa_r+0x2c8>)
 80171e4:	21ef      	movs	r1, #239	@ 0xef
 80171e6:	48a7      	ldr	r0, [pc, #668]	@ (8017484 <_dtoa_r+0x2cc>)
 80171e8:	f001 fce2 	bl	8018bb0 <__assert_func>
 80171ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80171f0:	6007      	str	r7, [r0, #0]
 80171f2:	60c7      	str	r7, [r0, #12]
 80171f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80171f8:	6819      	ldr	r1, [r3, #0]
 80171fa:	b159      	cbz	r1, 8017214 <_dtoa_r+0x5c>
 80171fc:	685a      	ldr	r2, [r3, #4]
 80171fe:	604a      	str	r2, [r1, #4]
 8017200:	2301      	movs	r3, #1
 8017202:	4093      	lsls	r3, r2
 8017204:	608b      	str	r3, [r1, #8]
 8017206:	4658      	mov	r0, fp
 8017208:	f000 feda 	bl	8017fc0 <_Bfree>
 801720c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017210:	2200      	movs	r2, #0
 8017212:	601a      	str	r2, [r3, #0]
 8017214:	1e2b      	subs	r3, r5, #0
 8017216:	bfb9      	ittee	lt
 8017218:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801721c:	9303      	strlt	r3, [sp, #12]
 801721e:	2300      	movge	r3, #0
 8017220:	6033      	strge	r3, [r6, #0]
 8017222:	9f03      	ldr	r7, [sp, #12]
 8017224:	4b98      	ldr	r3, [pc, #608]	@ (8017488 <_dtoa_r+0x2d0>)
 8017226:	bfbc      	itt	lt
 8017228:	2201      	movlt	r2, #1
 801722a:	6032      	strlt	r2, [r6, #0]
 801722c:	43bb      	bics	r3, r7
 801722e:	d112      	bne.n	8017256 <_dtoa_r+0x9e>
 8017230:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017232:	f242 730f 	movw	r3, #9999	@ 0x270f
 8017236:	6013      	str	r3, [r2, #0]
 8017238:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801723c:	4323      	orrs	r3, r4
 801723e:	f000 854d 	beq.w	8017cdc <_dtoa_r+0xb24>
 8017242:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017244:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801749c <_dtoa_r+0x2e4>
 8017248:	2b00      	cmp	r3, #0
 801724a:	f000 854f 	beq.w	8017cec <_dtoa_r+0xb34>
 801724e:	f10a 0303 	add.w	r3, sl, #3
 8017252:	f000 bd49 	b.w	8017ce8 <_dtoa_r+0xb30>
 8017256:	ed9d 7b02 	vldr	d7, [sp, #8]
 801725a:	2200      	movs	r2, #0
 801725c:	ec51 0b17 	vmov	r0, r1, d7
 8017260:	2300      	movs	r3, #0
 8017262:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8017266:	f7e9 fc07 	bl	8000a78 <__aeabi_dcmpeq>
 801726a:	4680      	mov	r8, r0
 801726c:	b158      	cbz	r0, 8017286 <_dtoa_r+0xce>
 801726e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017270:	2301      	movs	r3, #1
 8017272:	6013      	str	r3, [r2, #0]
 8017274:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017276:	b113      	cbz	r3, 801727e <_dtoa_r+0xc6>
 8017278:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801727a:	4b84      	ldr	r3, [pc, #528]	@ (801748c <_dtoa_r+0x2d4>)
 801727c:	6013      	str	r3, [r2, #0]
 801727e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80174a0 <_dtoa_r+0x2e8>
 8017282:	f000 bd33 	b.w	8017cec <_dtoa_r+0xb34>
 8017286:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801728a:	aa16      	add	r2, sp, #88	@ 0x58
 801728c:	a917      	add	r1, sp, #92	@ 0x5c
 801728e:	4658      	mov	r0, fp
 8017290:	f001 f980 	bl	8018594 <__d2b>
 8017294:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8017298:	4681      	mov	r9, r0
 801729a:	2e00      	cmp	r6, #0
 801729c:	d077      	beq.n	801738e <_dtoa_r+0x1d6>
 801729e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80172a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80172a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80172a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80172ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80172b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80172b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80172b8:	4619      	mov	r1, r3
 80172ba:	2200      	movs	r2, #0
 80172bc:	4b74      	ldr	r3, [pc, #464]	@ (8017490 <_dtoa_r+0x2d8>)
 80172be:	f7e8 ffbb 	bl	8000238 <__aeabi_dsub>
 80172c2:	a369      	add	r3, pc, #420	@ (adr r3, 8017468 <_dtoa_r+0x2b0>)
 80172c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172c8:	f7e9 f96e 	bl	80005a8 <__aeabi_dmul>
 80172cc:	a368      	add	r3, pc, #416	@ (adr r3, 8017470 <_dtoa_r+0x2b8>)
 80172ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172d2:	f7e8 ffb3 	bl	800023c <__adddf3>
 80172d6:	4604      	mov	r4, r0
 80172d8:	4630      	mov	r0, r6
 80172da:	460d      	mov	r5, r1
 80172dc:	f7e9 f8fa 	bl	80004d4 <__aeabi_i2d>
 80172e0:	a365      	add	r3, pc, #404	@ (adr r3, 8017478 <_dtoa_r+0x2c0>)
 80172e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172e6:	f7e9 f95f 	bl	80005a8 <__aeabi_dmul>
 80172ea:	4602      	mov	r2, r0
 80172ec:	460b      	mov	r3, r1
 80172ee:	4620      	mov	r0, r4
 80172f0:	4629      	mov	r1, r5
 80172f2:	f7e8 ffa3 	bl	800023c <__adddf3>
 80172f6:	4604      	mov	r4, r0
 80172f8:	460d      	mov	r5, r1
 80172fa:	f7e9 fc05 	bl	8000b08 <__aeabi_d2iz>
 80172fe:	2200      	movs	r2, #0
 8017300:	4607      	mov	r7, r0
 8017302:	2300      	movs	r3, #0
 8017304:	4620      	mov	r0, r4
 8017306:	4629      	mov	r1, r5
 8017308:	f7e9 fbc0 	bl	8000a8c <__aeabi_dcmplt>
 801730c:	b140      	cbz	r0, 8017320 <_dtoa_r+0x168>
 801730e:	4638      	mov	r0, r7
 8017310:	f7e9 f8e0 	bl	80004d4 <__aeabi_i2d>
 8017314:	4622      	mov	r2, r4
 8017316:	462b      	mov	r3, r5
 8017318:	f7e9 fbae 	bl	8000a78 <__aeabi_dcmpeq>
 801731c:	b900      	cbnz	r0, 8017320 <_dtoa_r+0x168>
 801731e:	3f01      	subs	r7, #1
 8017320:	2f16      	cmp	r7, #22
 8017322:	d851      	bhi.n	80173c8 <_dtoa_r+0x210>
 8017324:	4b5b      	ldr	r3, [pc, #364]	@ (8017494 <_dtoa_r+0x2dc>)
 8017326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801732e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017332:	f7e9 fbab 	bl	8000a8c <__aeabi_dcmplt>
 8017336:	2800      	cmp	r0, #0
 8017338:	d048      	beq.n	80173cc <_dtoa_r+0x214>
 801733a:	3f01      	subs	r7, #1
 801733c:	2300      	movs	r3, #0
 801733e:	9312      	str	r3, [sp, #72]	@ 0x48
 8017340:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017342:	1b9b      	subs	r3, r3, r6
 8017344:	1e5a      	subs	r2, r3, #1
 8017346:	bf44      	itt	mi
 8017348:	f1c3 0801 	rsbmi	r8, r3, #1
 801734c:	2300      	movmi	r3, #0
 801734e:	9208      	str	r2, [sp, #32]
 8017350:	bf54      	ite	pl
 8017352:	f04f 0800 	movpl.w	r8, #0
 8017356:	9308      	strmi	r3, [sp, #32]
 8017358:	2f00      	cmp	r7, #0
 801735a:	db39      	blt.n	80173d0 <_dtoa_r+0x218>
 801735c:	9b08      	ldr	r3, [sp, #32]
 801735e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8017360:	443b      	add	r3, r7
 8017362:	9308      	str	r3, [sp, #32]
 8017364:	2300      	movs	r3, #0
 8017366:	930a      	str	r3, [sp, #40]	@ 0x28
 8017368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801736a:	2b09      	cmp	r3, #9
 801736c:	d864      	bhi.n	8017438 <_dtoa_r+0x280>
 801736e:	2b05      	cmp	r3, #5
 8017370:	bfc4      	itt	gt
 8017372:	3b04      	subgt	r3, #4
 8017374:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8017376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017378:	f1a3 0302 	sub.w	r3, r3, #2
 801737c:	bfcc      	ite	gt
 801737e:	2400      	movgt	r4, #0
 8017380:	2401      	movle	r4, #1
 8017382:	2b03      	cmp	r3, #3
 8017384:	d863      	bhi.n	801744e <_dtoa_r+0x296>
 8017386:	e8df f003 	tbb	[pc, r3]
 801738a:	372a      	.short	0x372a
 801738c:	5535      	.short	0x5535
 801738e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8017392:	441e      	add	r6, r3
 8017394:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8017398:	2b20      	cmp	r3, #32
 801739a:	bfc1      	itttt	gt
 801739c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80173a0:	409f      	lslgt	r7, r3
 80173a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80173a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80173aa:	bfd6      	itet	le
 80173ac:	f1c3 0320 	rsble	r3, r3, #32
 80173b0:	ea47 0003 	orrgt.w	r0, r7, r3
 80173b4:	fa04 f003 	lslle.w	r0, r4, r3
 80173b8:	f7e9 f87c 	bl	80004b4 <__aeabi_ui2d>
 80173bc:	2201      	movs	r2, #1
 80173be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80173c2:	3e01      	subs	r6, #1
 80173c4:	9214      	str	r2, [sp, #80]	@ 0x50
 80173c6:	e777      	b.n	80172b8 <_dtoa_r+0x100>
 80173c8:	2301      	movs	r3, #1
 80173ca:	e7b8      	b.n	801733e <_dtoa_r+0x186>
 80173cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80173ce:	e7b7      	b.n	8017340 <_dtoa_r+0x188>
 80173d0:	427b      	negs	r3, r7
 80173d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80173d4:	2300      	movs	r3, #0
 80173d6:	eba8 0807 	sub.w	r8, r8, r7
 80173da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80173dc:	e7c4      	b.n	8017368 <_dtoa_r+0x1b0>
 80173de:	2300      	movs	r3, #0
 80173e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80173e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	dc35      	bgt.n	8017454 <_dtoa_r+0x29c>
 80173e8:	2301      	movs	r3, #1
 80173ea:	9300      	str	r3, [sp, #0]
 80173ec:	9307      	str	r3, [sp, #28]
 80173ee:	461a      	mov	r2, r3
 80173f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80173f2:	e00b      	b.n	801740c <_dtoa_r+0x254>
 80173f4:	2301      	movs	r3, #1
 80173f6:	e7f3      	b.n	80173e0 <_dtoa_r+0x228>
 80173f8:	2300      	movs	r3, #0
 80173fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80173fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80173fe:	18fb      	adds	r3, r7, r3
 8017400:	9300      	str	r3, [sp, #0]
 8017402:	3301      	adds	r3, #1
 8017404:	2b01      	cmp	r3, #1
 8017406:	9307      	str	r3, [sp, #28]
 8017408:	bfb8      	it	lt
 801740a:	2301      	movlt	r3, #1
 801740c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8017410:	2100      	movs	r1, #0
 8017412:	2204      	movs	r2, #4
 8017414:	f102 0514 	add.w	r5, r2, #20
 8017418:	429d      	cmp	r5, r3
 801741a:	d91f      	bls.n	801745c <_dtoa_r+0x2a4>
 801741c:	6041      	str	r1, [r0, #4]
 801741e:	4658      	mov	r0, fp
 8017420:	f000 fd8e 	bl	8017f40 <_Balloc>
 8017424:	4682      	mov	sl, r0
 8017426:	2800      	cmp	r0, #0
 8017428:	d13c      	bne.n	80174a4 <_dtoa_r+0x2ec>
 801742a:	4b1b      	ldr	r3, [pc, #108]	@ (8017498 <_dtoa_r+0x2e0>)
 801742c:	4602      	mov	r2, r0
 801742e:	f240 11af 	movw	r1, #431	@ 0x1af
 8017432:	e6d8      	b.n	80171e6 <_dtoa_r+0x2e>
 8017434:	2301      	movs	r3, #1
 8017436:	e7e0      	b.n	80173fa <_dtoa_r+0x242>
 8017438:	2401      	movs	r4, #1
 801743a:	2300      	movs	r3, #0
 801743c:	9309      	str	r3, [sp, #36]	@ 0x24
 801743e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017440:	f04f 33ff 	mov.w	r3, #4294967295
 8017444:	9300      	str	r3, [sp, #0]
 8017446:	9307      	str	r3, [sp, #28]
 8017448:	2200      	movs	r2, #0
 801744a:	2312      	movs	r3, #18
 801744c:	e7d0      	b.n	80173f0 <_dtoa_r+0x238>
 801744e:	2301      	movs	r3, #1
 8017450:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017452:	e7f5      	b.n	8017440 <_dtoa_r+0x288>
 8017454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017456:	9300      	str	r3, [sp, #0]
 8017458:	9307      	str	r3, [sp, #28]
 801745a:	e7d7      	b.n	801740c <_dtoa_r+0x254>
 801745c:	3101      	adds	r1, #1
 801745e:	0052      	lsls	r2, r2, #1
 8017460:	e7d8      	b.n	8017414 <_dtoa_r+0x25c>
 8017462:	bf00      	nop
 8017464:	f3af 8000 	nop.w
 8017468:	636f4361 	.word	0x636f4361
 801746c:	3fd287a7 	.word	0x3fd287a7
 8017470:	8b60c8b3 	.word	0x8b60c8b3
 8017474:	3fc68a28 	.word	0x3fc68a28
 8017478:	509f79fb 	.word	0x509f79fb
 801747c:	3fd34413 	.word	0x3fd34413
 8017480:	0801ce19 	.word	0x0801ce19
 8017484:	0801ce30 	.word	0x0801ce30
 8017488:	7ff00000 	.word	0x7ff00000
 801748c:	0801cde9 	.word	0x0801cde9
 8017490:	3ff80000 	.word	0x3ff80000
 8017494:	0801cf28 	.word	0x0801cf28
 8017498:	0801ce88 	.word	0x0801ce88
 801749c:	0801ce15 	.word	0x0801ce15
 80174a0:	0801cde8 	.word	0x0801cde8
 80174a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80174a8:	6018      	str	r0, [r3, #0]
 80174aa:	9b07      	ldr	r3, [sp, #28]
 80174ac:	2b0e      	cmp	r3, #14
 80174ae:	f200 80a4 	bhi.w	80175fa <_dtoa_r+0x442>
 80174b2:	2c00      	cmp	r4, #0
 80174b4:	f000 80a1 	beq.w	80175fa <_dtoa_r+0x442>
 80174b8:	2f00      	cmp	r7, #0
 80174ba:	dd33      	ble.n	8017524 <_dtoa_r+0x36c>
 80174bc:	4bad      	ldr	r3, [pc, #692]	@ (8017774 <_dtoa_r+0x5bc>)
 80174be:	f007 020f 	and.w	r2, r7, #15
 80174c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80174c6:	ed93 7b00 	vldr	d7, [r3]
 80174ca:	05f8      	lsls	r0, r7, #23
 80174cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80174d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80174d4:	d516      	bpl.n	8017504 <_dtoa_r+0x34c>
 80174d6:	4ba8      	ldr	r3, [pc, #672]	@ (8017778 <_dtoa_r+0x5c0>)
 80174d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80174dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80174e0:	f7e9 f98c 	bl	80007fc <__aeabi_ddiv>
 80174e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80174e8:	f004 040f 	and.w	r4, r4, #15
 80174ec:	2603      	movs	r6, #3
 80174ee:	4da2      	ldr	r5, [pc, #648]	@ (8017778 <_dtoa_r+0x5c0>)
 80174f0:	b954      	cbnz	r4, 8017508 <_dtoa_r+0x350>
 80174f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80174f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80174fa:	f7e9 f97f 	bl	80007fc <__aeabi_ddiv>
 80174fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017502:	e028      	b.n	8017556 <_dtoa_r+0x39e>
 8017504:	2602      	movs	r6, #2
 8017506:	e7f2      	b.n	80174ee <_dtoa_r+0x336>
 8017508:	07e1      	lsls	r1, r4, #31
 801750a:	d508      	bpl.n	801751e <_dtoa_r+0x366>
 801750c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017510:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017514:	f7e9 f848 	bl	80005a8 <__aeabi_dmul>
 8017518:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801751c:	3601      	adds	r6, #1
 801751e:	1064      	asrs	r4, r4, #1
 8017520:	3508      	adds	r5, #8
 8017522:	e7e5      	b.n	80174f0 <_dtoa_r+0x338>
 8017524:	f000 80d2 	beq.w	80176cc <_dtoa_r+0x514>
 8017528:	427c      	negs	r4, r7
 801752a:	4b92      	ldr	r3, [pc, #584]	@ (8017774 <_dtoa_r+0x5bc>)
 801752c:	4d92      	ldr	r5, [pc, #584]	@ (8017778 <_dtoa_r+0x5c0>)
 801752e:	f004 020f 	and.w	r2, r4, #15
 8017532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801753a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801753e:	f7e9 f833 	bl	80005a8 <__aeabi_dmul>
 8017542:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017546:	1124      	asrs	r4, r4, #4
 8017548:	2300      	movs	r3, #0
 801754a:	2602      	movs	r6, #2
 801754c:	2c00      	cmp	r4, #0
 801754e:	f040 80b2 	bne.w	80176b6 <_dtoa_r+0x4fe>
 8017552:	2b00      	cmp	r3, #0
 8017554:	d1d3      	bne.n	80174fe <_dtoa_r+0x346>
 8017556:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017558:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801755c:	2b00      	cmp	r3, #0
 801755e:	f000 80b7 	beq.w	80176d0 <_dtoa_r+0x518>
 8017562:	4b86      	ldr	r3, [pc, #536]	@ (801777c <_dtoa_r+0x5c4>)
 8017564:	2200      	movs	r2, #0
 8017566:	4620      	mov	r0, r4
 8017568:	4629      	mov	r1, r5
 801756a:	f7e9 fa8f 	bl	8000a8c <__aeabi_dcmplt>
 801756e:	2800      	cmp	r0, #0
 8017570:	f000 80ae 	beq.w	80176d0 <_dtoa_r+0x518>
 8017574:	9b07      	ldr	r3, [sp, #28]
 8017576:	2b00      	cmp	r3, #0
 8017578:	f000 80aa 	beq.w	80176d0 <_dtoa_r+0x518>
 801757c:	9b00      	ldr	r3, [sp, #0]
 801757e:	2b00      	cmp	r3, #0
 8017580:	dd37      	ble.n	80175f2 <_dtoa_r+0x43a>
 8017582:	1e7b      	subs	r3, r7, #1
 8017584:	9304      	str	r3, [sp, #16]
 8017586:	4620      	mov	r0, r4
 8017588:	4b7d      	ldr	r3, [pc, #500]	@ (8017780 <_dtoa_r+0x5c8>)
 801758a:	2200      	movs	r2, #0
 801758c:	4629      	mov	r1, r5
 801758e:	f7e9 f80b 	bl	80005a8 <__aeabi_dmul>
 8017592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017596:	9c00      	ldr	r4, [sp, #0]
 8017598:	3601      	adds	r6, #1
 801759a:	4630      	mov	r0, r6
 801759c:	f7e8 ff9a 	bl	80004d4 <__aeabi_i2d>
 80175a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80175a4:	f7e9 f800 	bl	80005a8 <__aeabi_dmul>
 80175a8:	4b76      	ldr	r3, [pc, #472]	@ (8017784 <_dtoa_r+0x5cc>)
 80175aa:	2200      	movs	r2, #0
 80175ac:	f7e8 fe46 	bl	800023c <__adddf3>
 80175b0:	4605      	mov	r5, r0
 80175b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80175b6:	2c00      	cmp	r4, #0
 80175b8:	f040 808d 	bne.w	80176d6 <_dtoa_r+0x51e>
 80175bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80175c0:	4b71      	ldr	r3, [pc, #452]	@ (8017788 <_dtoa_r+0x5d0>)
 80175c2:	2200      	movs	r2, #0
 80175c4:	f7e8 fe38 	bl	8000238 <__aeabi_dsub>
 80175c8:	4602      	mov	r2, r0
 80175ca:	460b      	mov	r3, r1
 80175cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80175d0:	462a      	mov	r2, r5
 80175d2:	4633      	mov	r3, r6
 80175d4:	f7e9 fa78 	bl	8000ac8 <__aeabi_dcmpgt>
 80175d8:	2800      	cmp	r0, #0
 80175da:	f040 828b 	bne.w	8017af4 <_dtoa_r+0x93c>
 80175de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80175e2:	462a      	mov	r2, r5
 80175e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80175e8:	f7e9 fa50 	bl	8000a8c <__aeabi_dcmplt>
 80175ec:	2800      	cmp	r0, #0
 80175ee:	f040 8128 	bne.w	8017842 <_dtoa_r+0x68a>
 80175f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80175f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80175fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	f2c0 815a 	blt.w	80178b6 <_dtoa_r+0x6fe>
 8017602:	2f0e      	cmp	r7, #14
 8017604:	f300 8157 	bgt.w	80178b6 <_dtoa_r+0x6fe>
 8017608:	4b5a      	ldr	r3, [pc, #360]	@ (8017774 <_dtoa_r+0x5bc>)
 801760a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801760e:	ed93 7b00 	vldr	d7, [r3]
 8017612:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017614:	2b00      	cmp	r3, #0
 8017616:	ed8d 7b00 	vstr	d7, [sp]
 801761a:	da03      	bge.n	8017624 <_dtoa_r+0x46c>
 801761c:	9b07      	ldr	r3, [sp, #28]
 801761e:	2b00      	cmp	r3, #0
 8017620:	f340 8101 	ble.w	8017826 <_dtoa_r+0x66e>
 8017624:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8017628:	4656      	mov	r6, sl
 801762a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801762e:	4620      	mov	r0, r4
 8017630:	4629      	mov	r1, r5
 8017632:	f7e9 f8e3 	bl	80007fc <__aeabi_ddiv>
 8017636:	f7e9 fa67 	bl	8000b08 <__aeabi_d2iz>
 801763a:	4680      	mov	r8, r0
 801763c:	f7e8 ff4a 	bl	80004d4 <__aeabi_i2d>
 8017640:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017644:	f7e8 ffb0 	bl	80005a8 <__aeabi_dmul>
 8017648:	4602      	mov	r2, r0
 801764a:	460b      	mov	r3, r1
 801764c:	4620      	mov	r0, r4
 801764e:	4629      	mov	r1, r5
 8017650:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8017654:	f7e8 fdf0 	bl	8000238 <__aeabi_dsub>
 8017658:	f806 4b01 	strb.w	r4, [r6], #1
 801765c:	9d07      	ldr	r5, [sp, #28]
 801765e:	eba6 040a 	sub.w	r4, r6, sl
 8017662:	42a5      	cmp	r5, r4
 8017664:	4602      	mov	r2, r0
 8017666:	460b      	mov	r3, r1
 8017668:	f040 8117 	bne.w	801789a <_dtoa_r+0x6e2>
 801766c:	f7e8 fde6 	bl	800023c <__adddf3>
 8017670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017674:	4604      	mov	r4, r0
 8017676:	460d      	mov	r5, r1
 8017678:	f7e9 fa26 	bl	8000ac8 <__aeabi_dcmpgt>
 801767c:	2800      	cmp	r0, #0
 801767e:	f040 80f9 	bne.w	8017874 <_dtoa_r+0x6bc>
 8017682:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017686:	4620      	mov	r0, r4
 8017688:	4629      	mov	r1, r5
 801768a:	f7e9 f9f5 	bl	8000a78 <__aeabi_dcmpeq>
 801768e:	b118      	cbz	r0, 8017698 <_dtoa_r+0x4e0>
 8017690:	f018 0f01 	tst.w	r8, #1
 8017694:	f040 80ee 	bne.w	8017874 <_dtoa_r+0x6bc>
 8017698:	4649      	mov	r1, r9
 801769a:	4658      	mov	r0, fp
 801769c:	f000 fc90 	bl	8017fc0 <_Bfree>
 80176a0:	2300      	movs	r3, #0
 80176a2:	7033      	strb	r3, [r6, #0]
 80176a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80176a6:	3701      	adds	r7, #1
 80176a8:	601f      	str	r7, [r3, #0]
 80176aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	f000 831d 	beq.w	8017cec <_dtoa_r+0xb34>
 80176b2:	601e      	str	r6, [r3, #0]
 80176b4:	e31a      	b.n	8017cec <_dtoa_r+0xb34>
 80176b6:	07e2      	lsls	r2, r4, #31
 80176b8:	d505      	bpl.n	80176c6 <_dtoa_r+0x50e>
 80176ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80176be:	f7e8 ff73 	bl	80005a8 <__aeabi_dmul>
 80176c2:	3601      	adds	r6, #1
 80176c4:	2301      	movs	r3, #1
 80176c6:	1064      	asrs	r4, r4, #1
 80176c8:	3508      	adds	r5, #8
 80176ca:	e73f      	b.n	801754c <_dtoa_r+0x394>
 80176cc:	2602      	movs	r6, #2
 80176ce:	e742      	b.n	8017556 <_dtoa_r+0x39e>
 80176d0:	9c07      	ldr	r4, [sp, #28]
 80176d2:	9704      	str	r7, [sp, #16]
 80176d4:	e761      	b.n	801759a <_dtoa_r+0x3e2>
 80176d6:	4b27      	ldr	r3, [pc, #156]	@ (8017774 <_dtoa_r+0x5bc>)
 80176d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80176da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80176de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80176e2:	4454      	add	r4, sl
 80176e4:	2900      	cmp	r1, #0
 80176e6:	d053      	beq.n	8017790 <_dtoa_r+0x5d8>
 80176e8:	4928      	ldr	r1, [pc, #160]	@ (801778c <_dtoa_r+0x5d4>)
 80176ea:	2000      	movs	r0, #0
 80176ec:	f7e9 f886 	bl	80007fc <__aeabi_ddiv>
 80176f0:	4633      	mov	r3, r6
 80176f2:	462a      	mov	r2, r5
 80176f4:	f7e8 fda0 	bl	8000238 <__aeabi_dsub>
 80176f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80176fc:	4656      	mov	r6, sl
 80176fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017702:	f7e9 fa01 	bl	8000b08 <__aeabi_d2iz>
 8017706:	4605      	mov	r5, r0
 8017708:	f7e8 fee4 	bl	80004d4 <__aeabi_i2d>
 801770c:	4602      	mov	r2, r0
 801770e:	460b      	mov	r3, r1
 8017710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017714:	f7e8 fd90 	bl	8000238 <__aeabi_dsub>
 8017718:	3530      	adds	r5, #48	@ 0x30
 801771a:	4602      	mov	r2, r0
 801771c:	460b      	mov	r3, r1
 801771e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017722:	f806 5b01 	strb.w	r5, [r6], #1
 8017726:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801772a:	f7e9 f9af 	bl	8000a8c <__aeabi_dcmplt>
 801772e:	2800      	cmp	r0, #0
 8017730:	d171      	bne.n	8017816 <_dtoa_r+0x65e>
 8017732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017736:	4911      	ldr	r1, [pc, #68]	@ (801777c <_dtoa_r+0x5c4>)
 8017738:	2000      	movs	r0, #0
 801773a:	f7e8 fd7d 	bl	8000238 <__aeabi_dsub>
 801773e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017742:	f7e9 f9a3 	bl	8000a8c <__aeabi_dcmplt>
 8017746:	2800      	cmp	r0, #0
 8017748:	f040 8095 	bne.w	8017876 <_dtoa_r+0x6be>
 801774c:	42a6      	cmp	r6, r4
 801774e:	f43f af50 	beq.w	80175f2 <_dtoa_r+0x43a>
 8017752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8017756:	4b0a      	ldr	r3, [pc, #40]	@ (8017780 <_dtoa_r+0x5c8>)
 8017758:	2200      	movs	r2, #0
 801775a:	f7e8 ff25 	bl	80005a8 <__aeabi_dmul>
 801775e:	4b08      	ldr	r3, [pc, #32]	@ (8017780 <_dtoa_r+0x5c8>)
 8017760:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017764:	2200      	movs	r2, #0
 8017766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801776a:	f7e8 ff1d 	bl	80005a8 <__aeabi_dmul>
 801776e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017772:	e7c4      	b.n	80176fe <_dtoa_r+0x546>
 8017774:	0801cf28 	.word	0x0801cf28
 8017778:	0801cf00 	.word	0x0801cf00
 801777c:	3ff00000 	.word	0x3ff00000
 8017780:	40240000 	.word	0x40240000
 8017784:	401c0000 	.word	0x401c0000
 8017788:	40140000 	.word	0x40140000
 801778c:	3fe00000 	.word	0x3fe00000
 8017790:	4631      	mov	r1, r6
 8017792:	4628      	mov	r0, r5
 8017794:	f7e8 ff08 	bl	80005a8 <__aeabi_dmul>
 8017798:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801779c:	9415      	str	r4, [sp, #84]	@ 0x54
 801779e:	4656      	mov	r6, sl
 80177a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80177a4:	f7e9 f9b0 	bl	8000b08 <__aeabi_d2iz>
 80177a8:	4605      	mov	r5, r0
 80177aa:	f7e8 fe93 	bl	80004d4 <__aeabi_i2d>
 80177ae:	4602      	mov	r2, r0
 80177b0:	460b      	mov	r3, r1
 80177b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80177b6:	f7e8 fd3f 	bl	8000238 <__aeabi_dsub>
 80177ba:	3530      	adds	r5, #48	@ 0x30
 80177bc:	f806 5b01 	strb.w	r5, [r6], #1
 80177c0:	4602      	mov	r2, r0
 80177c2:	460b      	mov	r3, r1
 80177c4:	42a6      	cmp	r6, r4
 80177c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80177ca:	f04f 0200 	mov.w	r2, #0
 80177ce:	d124      	bne.n	801781a <_dtoa_r+0x662>
 80177d0:	4bac      	ldr	r3, [pc, #688]	@ (8017a84 <_dtoa_r+0x8cc>)
 80177d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80177d6:	f7e8 fd31 	bl	800023c <__adddf3>
 80177da:	4602      	mov	r2, r0
 80177dc:	460b      	mov	r3, r1
 80177de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80177e2:	f7e9 f971 	bl	8000ac8 <__aeabi_dcmpgt>
 80177e6:	2800      	cmp	r0, #0
 80177e8:	d145      	bne.n	8017876 <_dtoa_r+0x6be>
 80177ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80177ee:	49a5      	ldr	r1, [pc, #660]	@ (8017a84 <_dtoa_r+0x8cc>)
 80177f0:	2000      	movs	r0, #0
 80177f2:	f7e8 fd21 	bl	8000238 <__aeabi_dsub>
 80177f6:	4602      	mov	r2, r0
 80177f8:	460b      	mov	r3, r1
 80177fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80177fe:	f7e9 f945 	bl	8000a8c <__aeabi_dcmplt>
 8017802:	2800      	cmp	r0, #0
 8017804:	f43f aef5 	beq.w	80175f2 <_dtoa_r+0x43a>
 8017808:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801780a:	1e73      	subs	r3, r6, #1
 801780c:	9315      	str	r3, [sp, #84]	@ 0x54
 801780e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017812:	2b30      	cmp	r3, #48	@ 0x30
 8017814:	d0f8      	beq.n	8017808 <_dtoa_r+0x650>
 8017816:	9f04      	ldr	r7, [sp, #16]
 8017818:	e73e      	b.n	8017698 <_dtoa_r+0x4e0>
 801781a:	4b9b      	ldr	r3, [pc, #620]	@ (8017a88 <_dtoa_r+0x8d0>)
 801781c:	f7e8 fec4 	bl	80005a8 <__aeabi_dmul>
 8017820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017824:	e7bc      	b.n	80177a0 <_dtoa_r+0x5e8>
 8017826:	d10c      	bne.n	8017842 <_dtoa_r+0x68a>
 8017828:	4b98      	ldr	r3, [pc, #608]	@ (8017a8c <_dtoa_r+0x8d4>)
 801782a:	2200      	movs	r2, #0
 801782c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017830:	f7e8 feba 	bl	80005a8 <__aeabi_dmul>
 8017834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017838:	f7e9 f93c 	bl	8000ab4 <__aeabi_dcmpge>
 801783c:	2800      	cmp	r0, #0
 801783e:	f000 8157 	beq.w	8017af0 <_dtoa_r+0x938>
 8017842:	2400      	movs	r4, #0
 8017844:	4625      	mov	r5, r4
 8017846:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017848:	43db      	mvns	r3, r3
 801784a:	9304      	str	r3, [sp, #16]
 801784c:	4656      	mov	r6, sl
 801784e:	2700      	movs	r7, #0
 8017850:	4621      	mov	r1, r4
 8017852:	4658      	mov	r0, fp
 8017854:	f000 fbb4 	bl	8017fc0 <_Bfree>
 8017858:	2d00      	cmp	r5, #0
 801785a:	d0dc      	beq.n	8017816 <_dtoa_r+0x65e>
 801785c:	b12f      	cbz	r7, 801786a <_dtoa_r+0x6b2>
 801785e:	42af      	cmp	r7, r5
 8017860:	d003      	beq.n	801786a <_dtoa_r+0x6b2>
 8017862:	4639      	mov	r1, r7
 8017864:	4658      	mov	r0, fp
 8017866:	f000 fbab 	bl	8017fc0 <_Bfree>
 801786a:	4629      	mov	r1, r5
 801786c:	4658      	mov	r0, fp
 801786e:	f000 fba7 	bl	8017fc0 <_Bfree>
 8017872:	e7d0      	b.n	8017816 <_dtoa_r+0x65e>
 8017874:	9704      	str	r7, [sp, #16]
 8017876:	4633      	mov	r3, r6
 8017878:	461e      	mov	r6, r3
 801787a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801787e:	2a39      	cmp	r2, #57	@ 0x39
 8017880:	d107      	bne.n	8017892 <_dtoa_r+0x6da>
 8017882:	459a      	cmp	sl, r3
 8017884:	d1f8      	bne.n	8017878 <_dtoa_r+0x6c0>
 8017886:	9a04      	ldr	r2, [sp, #16]
 8017888:	3201      	adds	r2, #1
 801788a:	9204      	str	r2, [sp, #16]
 801788c:	2230      	movs	r2, #48	@ 0x30
 801788e:	f88a 2000 	strb.w	r2, [sl]
 8017892:	781a      	ldrb	r2, [r3, #0]
 8017894:	3201      	adds	r2, #1
 8017896:	701a      	strb	r2, [r3, #0]
 8017898:	e7bd      	b.n	8017816 <_dtoa_r+0x65e>
 801789a:	4b7b      	ldr	r3, [pc, #492]	@ (8017a88 <_dtoa_r+0x8d0>)
 801789c:	2200      	movs	r2, #0
 801789e:	f7e8 fe83 	bl	80005a8 <__aeabi_dmul>
 80178a2:	2200      	movs	r2, #0
 80178a4:	2300      	movs	r3, #0
 80178a6:	4604      	mov	r4, r0
 80178a8:	460d      	mov	r5, r1
 80178aa:	f7e9 f8e5 	bl	8000a78 <__aeabi_dcmpeq>
 80178ae:	2800      	cmp	r0, #0
 80178b0:	f43f aebb 	beq.w	801762a <_dtoa_r+0x472>
 80178b4:	e6f0      	b.n	8017698 <_dtoa_r+0x4e0>
 80178b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80178b8:	2a00      	cmp	r2, #0
 80178ba:	f000 80db 	beq.w	8017a74 <_dtoa_r+0x8bc>
 80178be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80178c0:	2a01      	cmp	r2, #1
 80178c2:	f300 80bf 	bgt.w	8017a44 <_dtoa_r+0x88c>
 80178c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80178c8:	2a00      	cmp	r2, #0
 80178ca:	f000 80b7 	beq.w	8017a3c <_dtoa_r+0x884>
 80178ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80178d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80178d4:	4646      	mov	r6, r8
 80178d6:	9a08      	ldr	r2, [sp, #32]
 80178d8:	2101      	movs	r1, #1
 80178da:	441a      	add	r2, r3
 80178dc:	4658      	mov	r0, fp
 80178de:	4498      	add	r8, r3
 80178e0:	9208      	str	r2, [sp, #32]
 80178e2:	f000 fc21 	bl	8018128 <__i2b>
 80178e6:	4605      	mov	r5, r0
 80178e8:	b15e      	cbz	r6, 8017902 <_dtoa_r+0x74a>
 80178ea:	9b08      	ldr	r3, [sp, #32]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	dd08      	ble.n	8017902 <_dtoa_r+0x74a>
 80178f0:	42b3      	cmp	r3, r6
 80178f2:	9a08      	ldr	r2, [sp, #32]
 80178f4:	bfa8      	it	ge
 80178f6:	4633      	movge	r3, r6
 80178f8:	eba8 0803 	sub.w	r8, r8, r3
 80178fc:	1af6      	subs	r6, r6, r3
 80178fe:	1ad3      	subs	r3, r2, r3
 8017900:	9308      	str	r3, [sp, #32]
 8017902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017904:	b1f3      	cbz	r3, 8017944 <_dtoa_r+0x78c>
 8017906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017908:	2b00      	cmp	r3, #0
 801790a:	f000 80b7 	beq.w	8017a7c <_dtoa_r+0x8c4>
 801790e:	b18c      	cbz	r4, 8017934 <_dtoa_r+0x77c>
 8017910:	4629      	mov	r1, r5
 8017912:	4622      	mov	r2, r4
 8017914:	4658      	mov	r0, fp
 8017916:	f000 fcc7 	bl	80182a8 <__pow5mult>
 801791a:	464a      	mov	r2, r9
 801791c:	4601      	mov	r1, r0
 801791e:	4605      	mov	r5, r0
 8017920:	4658      	mov	r0, fp
 8017922:	f000 fc17 	bl	8018154 <__multiply>
 8017926:	4649      	mov	r1, r9
 8017928:	9004      	str	r0, [sp, #16]
 801792a:	4658      	mov	r0, fp
 801792c:	f000 fb48 	bl	8017fc0 <_Bfree>
 8017930:	9b04      	ldr	r3, [sp, #16]
 8017932:	4699      	mov	r9, r3
 8017934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017936:	1b1a      	subs	r2, r3, r4
 8017938:	d004      	beq.n	8017944 <_dtoa_r+0x78c>
 801793a:	4649      	mov	r1, r9
 801793c:	4658      	mov	r0, fp
 801793e:	f000 fcb3 	bl	80182a8 <__pow5mult>
 8017942:	4681      	mov	r9, r0
 8017944:	2101      	movs	r1, #1
 8017946:	4658      	mov	r0, fp
 8017948:	f000 fbee 	bl	8018128 <__i2b>
 801794c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801794e:	4604      	mov	r4, r0
 8017950:	2b00      	cmp	r3, #0
 8017952:	f000 81cf 	beq.w	8017cf4 <_dtoa_r+0xb3c>
 8017956:	461a      	mov	r2, r3
 8017958:	4601      	mov	r1, r0
 801795a:	4658      	mov	r0, fp
 801795c:	f000 fca4 	bl	80182a8 <__pow5mult>
 8017960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017962:	2b01      	cmp	r3, #1
 8017964:	4604      	mov	r4, r0
 8017966:	f300 8095 	bgt.w	8017a94 <_dtoa_r+0x8dc>
 801796a:	9b02      	ldr	r3, [sp, #8]
 801796c:	2b00      	cmp	r3, #0
 801796e:	f040 8087 	bne.w	8017a80 <_dtoa_r+0x8c8>
 8017972:	9b03      	ldr	r3, [sp, #12]
 8017974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017978:	2b00      	cmp	r3, #0
 801797a:	f040 8089 	bne.w	8017a90 <_dtoa_r+0x8d8>
 801797e:	9b03      	ldr	r3, [sp, #12]
 8017980:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017984:	0d1b      	lsrs	r3, r3, #20
 8017986:	051b      	lsls	r3, r3, #20
 8017988:	b12b      	cbz	r3, 8017996 <_dtoa_r+0x7de>
 801798a:	9b08      	ldr	r3, [sp, #32]
 801798c:	3301      	adds	r3, #1
 801798e:	9308      	str	r3, [sp, #32]
 8017990:	f108 0801 	add.w	r8, r8, #1
 8017994:	2301      	movs	r3, #1
 8017996:	930a      	str	r3, [sp, #40]	@ 0x28
 8017998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801799a:	2b00      	cmp	r3, #0
 801799c:	f000 81b0 	beq.w	8017d00 <_dtoa_r+0xb48>
 80179a0:	6923      	ldr	r3, [r4, #16]
 80179a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80179a6:	6918      	ldr	r0, [r3, #16]
 80179a8:	f000 fb72 	bl	8018090 <__hi0bits>
 80179ac:	f1c0 0020 	rsb	r0, r0, #32
 80179b0:	9b08      	ldr	r3, [sp, #32]
 80179b2:	4418      	add	r0, r3
 80179b4:	f010 001f 	ands.w	r0, r0, #31
 80179b8:	d077      	beq.n	8017aaa <_dtoa_r+0x8f2>
 80179ba:	f1c0 0320 	rsb	r3, r0, #32
 80179be:	2b04      	cmp	r3, #4
 80179c0:	dd6b      	ble.n	8017a9a <_dtoa_r+0x8e2>
 80179c2:	9b08      	ldr	r3, [sp, #32]
 80179c4:	f1c0 001c 	rsb	r0, r0, #28
 80179c8:	4403      	add	r3, r0
 80179ca:	4480      	add	r8, r0
 80179cc:	4406      	add	r6, r0
 80179ce:	9308      	str	r3, [sp, #32]
 80179d0:	f1b8 0f00 	cmp.w	r8, #0
 80179d4:	dd05      	ble.n	80179e2 <_dtoa_r+0x82a>
 80179d6:	4649      	mov	r1, r9
 80179d8:	4642      	mov	r2, r8
 80179da:	4658      	mov	r0, fp
 80179dc:	f000 fcbe 	bl	801835c <__lshift>
 80179e0:	4681      	mov	r9, r0
 80179e2:	9b08      	ldr	r3, [sp, #32]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	dd05      	ble.n	80179f4 <_dtoa_r+0x83c>
 80179e8:	4621      	mov	r1, r4
 80179ea:	461a      	mov	r2, r3
 80179ec:	4658      	mov	r0, fp
 80179ee:	f000 fcb5 	bl	801835c <__lshift>
 80179f2:	4604      	mov	r4, r0
 80179f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d059      	beq.n	8017aae <_dtoa_r+0x8f6>
 80179fa:	4621      	mov	r1, r4
 80179fc:	4648      	mov	r0, r9
 80179fe:	f000 fd19 	bl	8018434 <__mcmp>
 8017a02:	2800      	cmp	r0, #0
 8017a04:	da53      	bge.n	8017aae <_dtoa_r+0x8f6>
 8017a06:	1e7b      	subs	r3, r7, #1
 8017a08:	9304      	str	r3, [sp, #16]
 8017a0a:	4649      	mov	r1, r9
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	220a      	movs	r2, #10
 8017a10:	4658      	mov	r0, fp
 8017a12:	f000 faf7 	bl	8018004 <__multadd>
 8017a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017a18:	4681      	mov	r9, r0
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	f000 8172 	beq.w	8017d04 <_dtoa_r+0xb4c>
 8017a20:	2300      	movs	r3, #0
 8017a22:	4629      	mov	r1, r5
 8017a24:	220a      	movs	r2, #10
 8017a26:	4658      	mov	r0, fp
 8017a28:	f000 faec 	bl	8018004 <__multadd>
 8017a2c:	9b00      	ldr	r3, [sp, #0]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	4605      	mov	r5, r0
 8017a32:	dc67      	bgt.n	8017b04 <_dtoa_r+0x94c>
 8017a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a36:	2b02      	cmp	r3, #2
 8017a38:	dc41      	bgt.n	8017abe <_dtoa_r+0x906>
 8017a3a:	e063      	b.n	8017b04 <_dtoa_r+0x94c>
 8017a3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017a3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8017a42:	e746      	b.n	80178d2 <_dtoa_r+0x71a>
 8017a44:	9b07      	ldr	r3, [sp, #28]
 8017a46:	1e5c      	subs	r4, r3, #1
 8017a48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017a4a:	42a3      	cmp	r3, r4
 8017a4c:	bfbf      	itttt	lt
 8017a4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8017a50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8017a52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8017a54:	1ae3      	sublt	r3, r4, r3
 8017a56:	bfb4      	ite	lt
 8017a58:	18d2      	addlt	r2, r2, r3
 8017a5a:	1b1c      	subge	r4, r3, r4
 8017a5c:	9b07      	ldr	r3, [sp, #28]
 8017a5e:	bfbc      	itt	lt
 8017a60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8017a62:	2400      	movlt	r4, #0
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	bfb5      	itete	lt
 8017a68:	eba8 0603 	sublt.w	r6, r8, r3
 8017a6c:	9b07      	ldrge	r3, [sp, #28]
 8017a6e:	2300      	movlt	r3, #0
 8017a70:	4646      	movge	r6, r8
 8017a72:	e730      	b.n	80178d6 <_dtoa_r+0x71e>
 8017a74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017a76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8017a78:	4646      	mov	r6, r8
 8017a7a:	e735      	b.n	80178e8 <_dtoa_r+0x730>
 8017a7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017a7e:	e75c      	b.n	801793a <_dtoa_r+0x782>
 8017a80:	2300      	movs	r3, #0
 8017a82:	e788      	b.n	8017996 <_dtoa_r+0x7de>
 8017a84:	3fe00000 	.word	0x3fe00000
 8017a88:	40240000 	.word	0x40240000
 8017a8c:	40140000 	.word	0x40140000
 8017a90:	9b02      	ldr	r3, [sp, #8]
 8017a92:	e780      	b.n	8017996 <_dtoa_r+0x7de>
 8017a94:	2300      	movs	r3, #0
 8017a96:	930a      	str	r3, [sp, #40]	@ 0x28
 8017a98:	e782      	b.n	80179a0 <_dtoa_r+0x7e8>
 8017a9a:	d099      	beq.n	80179d0 <_dtoa_r+0x818>
 8017a9c:	9a08      	ldr	r2, [sp, #32]
 8017a9e:	331c      	adds	r3, #28
 8017aa0:	441a      	add	r2, r3
 8017aa2:	4498      	add	r8, r3
 8017aa4:	441e      	add	r6, r3
 8017aa6:	9208      	str	r2, [sp, #32]
 8017aa8:	e792      	b.n	80179d0 <_dtoa_r+0x818>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	e7f6      	b.n	8017a9c <_dtoa_r+0x8e4>
 8017aae:	9b07      	ldr	r3, [sp, #28]
 8017ab0:	9704      	str	r7, [sp, #16]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	dc20      	bgt.n	8017af8 <_dtoa_r+0x940>
 8017ab6:	9300      	str	r3, [sp, #0]
 8017ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017aba:	2b02      	cmp	r3, #2
 8017abc:	dd1e      	ble.n	8017afc <_dtoa_r+0x944>
 8017abe:	9b00      	ldr	r3, [sp, #0]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	f47f aec0 	bne.w	8017846 <_dtoa_r+0x68e>
 8017ac6:	4621      	mov	r1, r4
 8017ac8:	2205      	movs	r2, #5
 8017aca:	4658      	mov	r0, fp
 8017acc:	f000 fa9a 	bl	8018004 <__multadd>
 8017ad0:	4601      	mov	r1, r0
 8017ad2:	4604      	mov	r4, r0
 8017ad4:	4648      	mov	r0, r9
 8017ad6:	f000 fcad 	bl	8018434 <__mcmp>
 8017ada:	2800      	cmp	r0, #0
 8017adc:	f77f aeb3 	ble.w	8017846 <_dtoa_r+0x68e>
 8017ae0:	4656      	mov	r6, sl
 8017ae2:	2331      	movs	r3, #49	@ 0x31
 8017ae4:	f806 3b01 	strb.w	r3, [r6], #1
 8017ae8:	9b04      	ldr	r3, [sp, #16]
 8017aea:	3301      	adds	r3, #1
 8017aec:	9304      	str	r3, [sp, #16]
 8017aee:	e6ae      	b.n	801784e <_dtoa_r+0x696>
 8017af0:	9c07      	ldr	r4, [sp, #28]
 8017af2:	9704      	str	r7, [sp, #16]
 8017af4:	4625      	mov	r5, r4
 8017af6:	e7f3      	b.n	8017ae0 <_dtoa_r+0x928>
 8017af8:	9b07      	ldr	r3, [sp, #28]
 8017afa:	9300      	str	r3, [sp, #0]
 8017afc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	f000 8104 	beq.w	8017d0c <_dtoa_r+0xb54>
 8017b04:	2e00      	cmp	r6, #0
 8017b06:	dd05      	ble.n	8017b14 <_dtoa_r+0x95c>
 8017b08:	4629      	mov	r1, r5
 8017b0a:	4632      	mov	r2, r6
 8017b0c:	4658      	mov	r0, fp
 8017b0e:	f000 fc25 	bl	801835c <__lshift>
 8017b12:	4605      	mov	r5, r0
 8017b14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d05a      	beq.n	8017bd0 <_dtoa_r+0xa18>
 8017b1a:	6869      	ldr	r1, [r5, #4]
 8017b1c:	4658      	mov	r0, fp
 8017b1e:	f000 fa0f 	bl	8017f40 <_Balloc>
 8017b22:	4606      	mov	r6, r0
 8017b24:	b928      	cbnz	r0, 8017b32 <_dtoa_r+0x97a>
 8017b26:	4b84      	ldr	r3, [pc, #528]	@ (8017d38 <_dtoa_r+0xb80>)
 8017b28:	4602      	mov	r2, r0
 8017b2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8017b2e:	f7ff bb5a 	b.w	80171e6 <_dtoa_r+0x2e>
 8017b32:	692a      	ldr	r2, [r5, #16]
 8017b34:	3202      	adds	r2, #2
 8017b36:	0092      	lsls	r2, r2, #2
 8017b38:	f105 010c 	add.w	r1, r5, #12
 8017b3c:	300c      	adds	r0, #12
 8017b3e:	f7ff faa2 	bl	8017086 <memcpy>
 8017b42:	2201      	movs	r2, #1
 8017b44:	4631      	mov	r1, r6
 8017b46:	4658      	mov	r0, fp
 8017b48:	f000 fc08 	bl	801835c <__lshift>
 8017b4c:	f10a 0301 	add.w	r3, sl, #1
 8017b50:	9307      	str	r3, [sp, #28]
 8017b52:	9b00      	ldr	r3, [sp, #0]
 8017b54:	4453      	add	r3, sl
 8017b56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017b58:	9b02      	ldr	r3, [sp, #8]
 8017b5a:	f003 0301 	and.w	r3, r3, #1
 8017b5e:	462f      	mov	r7, r5
 8017b60:	930a      	str	r3, [sp, #40]	@ 0x28
 8017b62:	4605      	mov	r5, r0
 8017b64:	9b07      	ldr	r3, [sp, #28]
 8017b66:	4621      	mov	r1, r4
 8017b68:	3b01      	subs	r3, #1
 8017b6a:	4648      	mov	r0, r9
 8017b6c:	9300      	str	r3, [sp, #0]
 8017b6e:	f7ff fa98 	bl	80170a2 <quorem>
 8017b72:	4639      	mov	r1, r7
 8017b74:	9002      	str	r0, [sp, #8]
 8017b76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8017b7a:	4648      	mov	r0, r9
 8017b7c:	f000 fc5a 	bl	8018434 <__mcmp>
 8017b80:	462a      	mov	r2, r5
 8017b82:	9008      	str	r0, [sp, #32]
 8017b84:	4621      	mov	r1, r4
 8017b86:	4658      	mov	r0, fp
 8017b88:	f000 fc70 	bl	801846c <__mdiff>
 8017b8c:	68c2      	ldr	r2, [r0, #12]
 8017b8e:	4606      	mov	r6, r0
 8017b90:	bb02      	cbnz	r2, 8017bd4 <_dtoa_r+0xa1c>
 8017b92:	4601      	mov	r1, r0
 8017b94:	4648      	mov	r0, r9
 8017b96:	f000 fc4d 	bl	8018434 <__mcmp>
 8017b9a:	4602      	mov	r2, r0
 8017b9c:	4631      	mov	r1, r6
 8017b9e:	4658      	mov	r0, fp
 8017ba0:	920e      	str	r2, [sp, #56]	@ 0x38
 8017ba2:	f000 fa0d 	bl	8017fc0 <_Bfree>
 8017ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ba8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017baa:	9e07      	ldr	r6, [sp, #28]
 8017bac:	ea43 0102 	orr.w	r1, r3, r2
 8017bb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017bb2:	4319      	orrs	r1, r3
 8017bb4:	d110      	bne.n	8017bd8 <_dtoa_r+0xa20>
 8017bb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017bba:	d029      	beq.n	8017c10 <_dtoa_r+0xa58>
 8017bbc:	9b08      	ldr	r3, [sp, #32]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	dd02      	ble.n	8017bc8 <_dtoa_r+0xa10>
 8017bc2:	9b02      	ldr	r3, [sp, #8]
 8017bc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8017bc8:	9b00      	ldr	r3, [sp, #0]
 8017bca:	f883 8000 	strb.w	r8, [r3]
 8017bce:	e63f      	b.n	8017850 <_dtoa_r+0x698>
 8017bd0:	4628      	mov	r0, r5
 8017bd2:	e7bb      	b.n	8017b4c <_dtoa_r+0x994>
 8017bd4:	2201      	movs	r2, #1
 8017bd6:	e7e1      	b.n	8017b9c <_dtoa_r+0x9e4>
 8017bd8:	9b08      	ldr	r3, [sp, #32]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	db04      	blt.n	8017be8 <_dtoa_r+0xa30>
 8017bde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017be0:	430b      	orrs	r3, r1
 8017be2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017be4:	430b      	orrs	r3, r1
 8017be6:	d120      	bne.n	8017c2a <_dtoa_r+0xa72>
 8017be8:	2a00      	cmp	r2, #0
 8017bea:	dded      	ble.n	8017bc8 <_dtoa_r+0xa10>
 8017bec:	4649      	mov	r1, r9
 8017bee:	2201      	movs	r2, #1
 8017bf0:	4658      	mov	r0, fp
 8017bf2:	f000 fbb3 	bl	801835c <__lshift>
 8017bf6:	4621      	mov	r1, r4
 8017bf8:	4681      	mov	r9, r0
 8017bfa:	f000 fc1b 	bl	8018434 <__mcmp>
 8017bfe:	2800      	cmp	r0, #0
 8017c00:	dc03      	bgt.n	8017c0a <_dtoa_r+0xa52>
 8017c02:	d1e1      	bne.n	8017bc8 <_dtoa_r+0xa10>
 8017c04:	f018 0f01 	tst.w	r8, #1
 8017c08:	d0de      	beq.n	8017bc8 <_dtoa_r+0xa10>
 8017c0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017c0e:	d1d8      	bne.n	8017bc2 <_dtoa_r+0xa0a>
 8017c10:	9a00      	ldr	r2, [sp, #0]
 8017c12:	2339      	movs	r3, #57	@ 0x39
 8017c14:	7013      	strb	r3, [r2, #0]
 8017c16:	4633      	mov	r3, r6
 8017c18:	461e      	mov	r6, r3
 8017c1a:	3b01      	subs	r3, #1
 8017c1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8017c20:	2a39      	cmp	r2, #57	@ 0x39
 8017c22:	d052      	beq.n	8017cca <_dtoa_r+0xb12>
 8017c24:	3201      	adds	r2, #1
 8017c26:	701a      	strb	r2, [r3, #0]
 8017c28:	e612      	b.n	8017850 <_dtoa_r+0x698>
 8017c2a:	2a00      	cmp	r2, #0
 8017c2c:	dd07      	ble.n	8017c3e <_dtoa_r+0xa86>
 8017c2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017c32:	d0ed      	beq.n	8017c10 <_dtoa_r+0xa58>
 8017c34:	9a00      	ldr	r2, [sp, #0]
 8017c36:	f108 0301 	add.w	r3, r8, #1
 8017c3a:	7013      	strb	r3, [r2, #0]
 8017c3c:	e608      	b.n	8017850 <_dtoa_r+0x698>
 8017c3e:	9b07      	ldr	r3, [sp, #28]
 8017c40:	9a07      	ldr	r2, [sp, #28]
 8017c42:	f803 8c01 	strb.w	r8, [r3, #-1]
 8017c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017c48:	4293      	cmp	r3, r2
 8017c4a:	d028      	beq.n	8017c9e <_dtoa_r+0xae6>
 8017c4c:	4649      	mov	r1, r9
 8017c4e:	2300      	movs	r3, #0
 8017c50:	220a      	movs	r2, #10
 8017c52:	4658      	mov	r0, fp
 8017c54:	f000 f9d6 	bl	8018004 <__multadd>
 8017c58:	42af      	cmp	r7, r5
 8017c5a:	4681      	mov	r9, r0
 8017c5c:	f04f 0300 	mov.w	r3, #0
 8017c60:	f04f 020a 	mov.w	r2, #10
 8017c64:	4639      	mov	r1, r7
 8017c66:	4658      	mov	r0, fp
 8017c68:	d107      	bne.n	8017c7a <_dtoa_r+0xac2>
 8017c6a:	f000 f9cb 	bl	8018004 <__multadd>
 8017c6e:	4607      	mov	r7, r0
 8017c70:	4605      	mov	r5, r0
 8017c72:	9b07      	ldr	r3, [sp, #28]
 8017c74:	3301      	adds	r3, #1
 8017c76:	9307      	str	r3, [sp, #28]
 8017c78:	e774      	b.n	8017b64 <_dtoa_r+0x9ac>
 8017c7a:	f000 f9c3 	bl	8018004 <__multadd>
 8017c7e:	4629      	mov	r1, r5
 8017c80:	4607      	mov	r7, r0
 8017c82:	2300      	movs	r3, #0
 8017c84:	220a      	movs	r2, #10
 8017c86:	4658      	mov	r0, fp
 8017c88:	f000 f9bc 	bl	8018004 <__multadd>
 8017c8c:	4605      	mov	r5, r0
 8017c8e:	e7f0      	b.n	8017c72 <_dtoa_r+0xaba>
 8017c90:	9b00      	ldr	r3, [sp, #0]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	bfcc      	ite	gt
 8017c96:	461e      	movgt	r6, r3
 8017c98:	2601      	movle	r6, #1
 8017c9a:	4456      	add	r6, sl
 8017c9c:	2700      	movs	r7, #0
 8017c9e:	4649      	mov	r1, r9
 8017ca0:	2201      	movs	r2, #1
 8017ca2:	4658      	mov	r0, fp
 8017ca4:	f000 fb5a 	bl	801835c <__lshift>
 8017ca8:	4621      	mov	r1, r4
 8017caa:	4681      	mov	r9, r0
 8017cac:	f000 fbc2 	bl	8018434 <__mcmp>
 8017cb0:	2800      	cmp	r0, #0
 8017cb2:	dcb0      	bgt.n	8017c16 <_dtoa_r+0xa5e>
 8017cb4:	d102      	bne.n	8017cbc <_dtoa_r+0xb04>
 8017cb6:	f018 0f01 	tst.w	r8, #1
 8017cba:	d1ac      	bne.n	8017c16 <_dtoa_r+0xa5e>
 8017cbc:	4633      	mov	r3, r6
 8017cbe:	461e      	mov	r6, r3
 8017cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017cc4:	2a30      	cmp	r2, #48	@ 0x30
 8017cc6:	d0fa      	beq.n	8017cbe <_dtoa_r+0xb06>
 8017cc8:	e5c2      	b.n	8017850 <_dtoa_r+0x698>
 8017cca:	459a      	cmp	sl, r3
 8017ccc:	d1a4      	bne.n	8017c18 <_dtoa_r+0xa60>
 8017cce:	9b04      	ldr	r3, [sp, #16]
 8017cd0:	3301      	adds	r3, #1
 8017cd2:	9304      	str	r3, [sp, #16]
 8017cd4:	2331      	movs	r3, #49	@ 0x31
 8017cd6:	f88a 3000 	strb.w	r3, [sl]
 8017cda:	e5b9      	b.n	8017850 <_dtoa_r+0x698>
 8017cdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017cde:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8017d3c <_dtoa_r+0xb84>
 8017ce2:	b11b      	cbz	r3, 8017cec <_dtoa_r+0xb34>
 8017ce4:	f10a 0308 	add.w	r3, sl, #8
 8017ce8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8017cea:	6013      	str	r3, [r2, #0]
 8017cec:	4650      	mov	r0, sl
 8017cee:	b019      	add	sp, #100	@ 0x64
 8017cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017cf6:	2b01      	cmp	r3, #1
 8017cf8:	f77f ae37 	ble.w	801796a <_dtoa_r+0x7b2>
 8017cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017cfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8017d00:	2001      	movs	r0, #1
 8017d02:	e655      	b.n	80179b0 <_dtoa_r+0x7f8>
 8017d04:	9b00      	ldr	r3, [sp, #0]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	f77f aed6 	ble.w	8017ab8 <_dtoa_r+0x900>
 8017d0c:	4656      	mov	r6, sl
 8017d0e:	4621      	mov	r1, r4
 8017d10:	4648      	mov	r0, r9
 8017d12:	f7ff f9c6 	bl	80170a2 <quorem>
 8017d16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8017d1a:	f806 8b01 	strb.w	r8, [r6], #1
 8017d1e:	9b00      	ldr	r3, [sp, #0]
 8017d20:	eba6 020a 	sub.w	r2, r6, sl
 8017d24:	4293      	cmp	r3, r2
 8017d26:	ddb3      	ble.n	8017c90 <_dtoa_r+0xad8>
 8017d28:	4649      	mov	r1, r9
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	220a      	movs	r2, #10
 8017d2e:	4658      	mov	r0, fp
 8017d30:	f000 f968 	bl	8018004 <__multadd>
 8017d34:	4681      	mov	r9, r0
 8017d36:	e7ea      	b.n	8017d0e <_dtoa_r+0xb56>
 8017d38:	0801ce88 	.word	0x0801ce88
 8017d3c:	0801ce0c 	.word	0x0801ce0c

08017d40 <_free_r>:
 8017d40:	b538      	push	{r3, r4, r5, lr}
 8017d42:	4605      	mov	r5, r0
 8017d44:	2900      	cmp	r1, #0
 8017d46:	d041      	beq.n	8017dcc <_free_r+0x8c>
 8017d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d4c:	1f0c      	subs	r4, r1, #4
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	bfb8      	it	lt
 8017d52:	18e4      	addlt	r4, r4, r3
 8017d54:	f000 f8e8 	bl	8017f28 <__malloc_lock>
 8017d58:	4a1d      	ldr	r2, [pc, #116]	@ (8017dd0 <_free_r+0x90>)
 8017d5a:	6813      	ldr	r3, [r2, #0]
 8017d5c:	b933      	cbnz	r3, 8017d6c <_free_r+0x2c>
 8017d5e:	6063      	str	r3, [r4, #4]
 8017d60:	6014      	str	r4, [r2, #0]
 8017d62:	4628      	mov	r0, r5
 8017d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d68:	f000 b8e4 	b.w	8017f34 <__malloc_unlock>
 8017d6c:	42a3      	cmp	r3, r4
 8017d6e:	d908      	bls.n	8017d82 <_free_r+0x42>
 8017d70:	6820      	ldr	r0, [r4, #0]
 8017d72:	1821      	adds	r1, r4, r0
 8017d74:	428b      	cmp	r3, r1
 8017d76:	bf01      	itttt	eq
 8017d78:	6819      	ldreq	r1, [r3, #0]
 8017d7a:	685b      	ldreq	r3, [r3, #4]
 8017d7c:	1809      	addeq	r1, r1, r0
 8017d7e:	6021      	streq	r1, [r4, #0]
 8017d80:	e7ed      	b.n	8017d5e <_free_r+0x1e>
 8017d82:	461a      	mov	r2, r3
 8017d84:	685b      	ldr	r3, [r3, #4]
 8017d86:	b10b      	cbz	r3, 8017d8c <_free_r+0x4c>
 8017d88:	42a3      	cmp	r3, r4
 8017d8a:	d9fa      	bls.n	8017d82 <_free_r+0x42>
 8017d8c:	6811      	ldr	r1, [r2, #0]
 8017d8e:	1850      	adds	r0, r2, r1
 8017d90:	42a0      	cmp	r0, r4
 8017d92:	d10b      	bne.n	8017dac <_free_r+0x6c>
 8017d94:	6820      	ldr	r0, [r4, #0]
 8017d96:	4401      	add	r1, r0
 8017d98:	1850      	adds	r0, r2, r1
 8017d9a:	4283      	cmp	r3, r0
 8017d9c:	6011      	str	r1, [r2, #0]
 8017d9e:	d1e0      	bne.n	8017d62 <_free_r+0x22>
 8017da0:	6818      	ldr	r0, [r3, #0]
 8017da2:	685b      	ldr	r3, [r3, #4]
 8017da4:	6053      	str	r3, [r2, #4]
 8017da6:	4408      	add	r0, r1
 8017da8:	6010      	str	r0, [r2, #0]
 8017daa:	e7da      	b.n	8017d62 <_free_r+0x22>
 8017dac:	d902      	bls.n	8017db4 <_free_r+0x74>
 8017dae:	230c      	movs	r3, #12
 8017db0:	602b      	str	r3, [r5, #0]
 8017db2:	e7d6      	b.n	8017d62 <_free_r+0x22>
 8017db4:	6820      	ldr	r0, [r4, #0]
 8017db6:	1821      	adds	r1, r4, r0
 8017db8:	428b      	cmp	r3, r1
 8017dba:	bf04      	itt	eq
 8017dbc:	6819      	ldreq	r1, [r3, #0]
 8017dbe:	685b      	ldreq	r3, [r3, #4]
 8017dc0:	6063      	str	r3, [r4, #4]
 8017dc2:	bf04      	itt	eq
 8017dc4:	1809      	addeq	r1, r1, r0
 8017dc6:	6021      	streq	r1, [r4, #0]
 8017dc8:	6054      	str	r4, [r2, #4]
 8017dca:	e7ca      	b.n	8017d62 <_free_r+0x22>
 8017dcc:	bd38      	pop	{r3, r4, r5, pc}
 8017dce:	bf00      	nop
 8017dd0:	2000233c 	.word	0x2000233c

08017dd4 <malloc>:
 8017dd4:	4b02      	ldr	r3, [pc, #8]	@ (8017de0 <malloc+0xc>)
 8017dd6:	4601      	mov	r1, r0
 8017dd8:	6818      	ldr	r0, [r3, #0]
 8017dda:	f000 b825 	b.w	8017e28 <_malloc_r>
 8017dde:	bf00      	nop
 8017de0:	20000144 	.word	0x20000144

08017de4 <sbrk_aligned>:
 8017de4:	b570      	push	{r4, r5, r6, lr}
 8017de6:	4e0f      	ldr	r6, [pc, #60]	@ (8017e24 <sbrk_aligned+0x40>)
 8017de8:	460c      	mov	r4, r1
 8017dea:	6831      	ldr	r1, [r6, #0]
 8017dec:	4605      	mov	r5, r0
 8017dee:	b911      	cbnz	r1, 8017df6 <sbrk_aligned+0x12>
 8017df0:	f000 fece 	bl	8018b90 <_sbrk_r>
 8017df4:	6030      	str	r0, [r6, #0]
 8017df6:	4621      	mov	r1, r4
 8017df8:	4628      	mov	r0, r5
 8017dfa:	f000 fec9 	bl	8018b90 <_sbrk_r>
 8017dfe:	1c43      	adds	r3, r0, #1
 8017e00:	d103      	bne.n	8017e0a <sbrk_aligned+0x26>
 8017e02:	f04f 34ff 	mov.w	r4, #4294967295
 8017e06:	4620      	mov	r0, r4
 8017e08:	bd70      	pop	{r4, r5, r6, pc}
 8017e0a:	1cc4      	adds	r4, r0, #3
 8017e0c:	f024 0403 	bic.w	r4, r4, #3
 8017e10:	42a0      	cmp	r0, r4
 8017e12:	d0f8      	beq.n	8017e06 <sbrk_aligned+0x22>
 8017e14:	1a21      	subs	r1, r4, r0
 8017e16:	4628      	mov	r0, r5
 8017e18:	f000 feba 	bl	8018b90 <_sbrk_r>
 8017e1c:	3001      	adds	r0, #1
 8017e1e:	d1f2      	bne.n	8017e06 <sbrk_aligned+0x22>
 8017e20:	e7ef      	b.n	8017e02 <sbrk_aligned+0x1e>
 8017e22:	bf00      	nop
 8017e24:	20002338 	.word	0x20002338

08017e28 <_malloc_r>:
 8017e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e2c:	1ccd      	adds	r5, r1, #3
 8017e2e:	f025 0503 	bic.w	r5, r5, #3
 8017e32:	3508      	adds	r5, #8
 8017e34:	2d0c      	cmp	r5, #12
 8017e36:	bf38      	it	cc
 8017e38:	250c      	movcc	r5, #12
 8017e3a:	2d00      	cmp	r5, #0
 8017e3c:	4606      	mov	r6, r0
 8017e3e:	db01      	blt.n	8017e44 <_malloc_r+0x1c>
 8017e40:	42a9      	cmp	r1, r5
 8017e42:	d904      	bls.n	8017e4e <_malloc_r+0x26>
 8017e44:	230c      	movs	r3, #12
 8017e46:	6033      	str	r3, [r6, #0]
 8017e48:	2000      	movs	r0, #0
 8017e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017f24 <_malloc_r+0xfc>
 8017e52:	f000 f869 	bl	8017f28 <__malloc_lock>
 8017e56:	f8d8 3000 	ldr.w	r3, [r8]
 8017e5a:	461c      	mov	r4, r3
 8017e5c:	bb44      	cbnz	r4, 8017eb0 <_malloc_r+0x88>
 8017e5e:	4629      	mov	r1, r5
 8017e60:	4630      	mov	r0, r6
 8017e62:	f7ff ffbf 	bl	8017de4 <sbrk_aligned>
 8017e66:	1c43      	adds	r3, r0, #1
 8017e68:	4604      	mov	r4, r0
 8017e6a:	d158      	bne.n	8017f1e <_malloc_r+0xf6>
 8017e6c:	f8d8 4000 	ldr.w	r4, [r8]
 8017e70:	4627      	mov	r7, r4
 8017e72:	2f00      	cmp	r7, #0
 8017e74:	d143      	bne.n	8017efe <_malloc_r+0xd6>
 8017e76:	2c00      	cmp	r4, #0
 8017e78:	d04b      	beq.n	8017f12 <_malloc_r+0xea>
 8017e7a:	6823      	ldr	r3, [r4, #0]
 8017e7c:	4639      	mov	r1, r7
 8017e7e:	4630      	mov	r0, r6
 8017e80:	eb04 0903 	add.w	r9, r4, r3
 8017e84:	f000 fe84 	bl	8018b90 <_sbrk_r>
 8017e88:	4581      	cmp	r9, r0
 8017e8a:	d142      	bne.n	8017f12 <_malloc_r+0xea>
 8017e8c:	6821      	ldr	r1, [r4, #0]
 8017e8e:	1a6d      	subs	r5, r5, r1
 8017e90:	4629      	mov	r1, r5
 8017e92:	4630      	mov	r0, r6
 8017e94:	f7ff ffa6 	bl	8017de4 <sbrk_aligned>
 8017e98:	3001      	adds	r0, #1
 8017e9a:	d03a      	beq.n	8017f12 <_malloc_r+0xea>
 8017e9c:	6823      	ldr	r3, [r4, #0]
 8017e9e:	442b      	add	r3, r5
 8017ea0:	6023      	str	r3, [r4, #0]
 8017ea2:	f8d8 3000 	ldr.w	r3, [r8]
 8017ea6:	685a      	ldr	r2, [r3, #4]
 8017ea8:	bb62      	cbnz	r2, 8017f04 <_malloc_r+0xdc>
 8017eaa:	f8c8 7000 	str.w	r7, [r8]
 8017eae:	e00f      	b.n	8017ed0 <_malloc_r+0xa8>
 8017eb0:	6822      	ldr	r2, [r4, #0]
 8017eb2:	1b52      	subs	r2, r2, r5
 8017eb4:	d420      	bmi.n	8017ef8 <_malloc_r+0xd0>
 8017eb6:	2a0b      	cmp	r2, #11
 8017eb8:	d917      	bls.n	8017eea <_malloc_r+0xc2>
 8017eba:	1961      	adds	r1, r4, r5
 8017ebc:	42a3      	cmp	r3, r4
 8017ebe:	6025      	str	r5, [r4, #0]
 8017ec0:	bf18      	it	ne
 8017ec2:	6059      	strne	r1, [r3, #4]
 8017ec4:	6863      	ldr	r3, [r4, #4]
 8017ec6:	bf08      	it	eq
 8017ec8:	f8c8 1000 	streq.w	r1, [r8]
 8017ecc:	5162      	str	r2, [r4, r5]
 8017ece:	604b      	str	r3, [r1, #4]
 8017ed0:	4630      	mov	r0, r6
 8017ed2:	f000 f82f 	bl	8017f34 <__malloc_unlock>
 8017ed6:	f104 000b 	add.w	r0, r4, #11
 8017eda:	1d23      	adds	r3, r4, #4
 8017edc:	f020 0007 	bic.w	r0, r0, #7
 8017ee0:	1ac2      	subs	r2, r0, r3
 8017ee2:	bf1c      	itt	ne
 8017ee4:	1a1b      	subne	r3, r3, r0
 8017ee6:	50a3      	strne	r3, [r4, r2]
 8017ee8:	e7af      	b.n	8017e4a <_malloc_r+0x22>
 8017eea:	6862      	ldr	r2, [r4, #4]
 8017eec:	42a3      	cmp	r3, r4
 8017eee:	bf0c      	ite	eq
 8017ef0:	f8c8 2000 	streq.w	r2, [r8]
 8017ef4:	605a      	strne	r2, [r3, #4]
 8017ef6:	e7eb      	b.n	8017ed0 <_malloc_r+0xa8>
 8017ef8:	4623      	mov	r3, r4
 8017efa:	6864      	ldr	r4, [r4, #4]
 8017efc:	e7ae      	b.n	8017e5c <_malloc_r+0x34>
 8017efe:	463c      	mov	r4, r7
 8017f00:	687f      	ldr	r7, [r7, #4]
 8017f02:	e7b6      	b.n	8017e72 <_malloc_r+0x4a>
 8017f04:	461a      	mov	r2, r3
 8017f06:	685b      	ldr	r3, [r3, #4]
 8017f08:	42a3      	cmp	r3, r4
 8017f0a:	d1fb      	bne.n	8017f04 <_malloc_r+0xdc>
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	6053      	str	r3, [r2, #4]
 8017f10:	e7de      	b.n	8017ed0 <_malloc_r+0xa8>
 8017f12:	230c      	movs	r3, #12
 8017f14:	6033      	str	r3, [r6, #0]
 8017f16:	4630      	mov	r0, r6
 8017f18:	f000 f80c 	bl	8017f34 <__malloc_unlock>
 8017f1c:	e794      	b.n	8017e48 <_malloc_r+0x20>
 8017f1e:	6005      	str	r5, [r0, #0]
 8017f20:	e7d6      	b.n	8017ed0 <_malloc_r+0xa8>
 8017f22:	bf00      	nop
 8017f24:	2000233c 	.word	0x2000233c

08017f28 <__malloc_lock>:
 8017f28:	4801      	ldr	r0, [pc, #4]	@ (8017f30 <__malloc_lock+0x8>)
 8017f2a:	f7ff b8aa 	b.w	8017082 <__retarget_lock_acquire_recursive>
 8017f2e:	bf00      	nop
 8017f30:	20002334 	.word	0x20002334

08017f34 <__malloc_unlock>:
 8017f34:	4801      	ldr	r0, [pc, #4]	@ (8017f3c <__malloc_unlock+0x8>)
 8017f36:	f7ff b8a5 	b.w	8017084 <__retarget_lock_release_recursive>
 8017f3a:	bf00      	nop
 8017f3c:	20002334 	.word	0x20002334

08017f40 <_Balloc>:
 8017f40:	b570      	push	{r4, r5, r6, lr}
 8017f42:	69c6      	ldr	r6, [r0, #28]
 8017f44:	4604      	mov	r4, r0
 8017f46:	460d      	mov	r5, r1
 8017f48:	b976      	cbnz	r6, 8017f68 <_Balloc+0x28>
 8017f4a:	2010      	movs	r0, #16
 8017f4c:	f7ff ff42 	bl	8017dd4 <malloc>
 8017f50:	4602      	mov	r2, r0
 8017f52:	61e0      	str	r0, [r4, #28]
 8017f54:	b920      	cbnz	r0, 8017f60 <_Balloc+0x20>
 8017f56:	4b18      	ldr	r3, [pc, #96]	@ (8017fb8 <_Balloc+0x78>)
 8017f58:	4818      	ldr	r0, [pc, #96]	@ (8017fbc <_Balloc+0x7c>)
 8017f5a:	216b      	movs	r1, #107	@ 0x6b
 8017f5c:	f000 fe28 	bl	8018bb0 <__assert_func>
 8017f60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017f64:	6006      	str	r6, [r0, #0]
 8017f66:	60c6      	str	r6, [r0, #12]
 8017f68:	69e6      	ldr	r6, [r4, #28]
 8017f6a:	68f3      	ldr	r3, [r6, #12]
 8017f6c:	b183      	cbz	r3, 8017f90 <_Balloc+0x50>
 8017f6e:	69e3      	ldr	r3, [r4, #28]
 8017f70:	68db      	ldr	r3, [r3, #12]
 8017f72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017f76:	b9b8      	cbnz	r0, 8017fa8 <_Balloc+0x68>
 8017f78:	2101      	movs	r1, #1
 8017f7a:	fa01 f605 	lsl.w	r6, r1, r5
 8017f7e:	1d72      	adds	r2, r6, #5
 8017f80:	0092      	lsls	r2, r2, #2
 8017f82:	4620      	mov	r0, r4
 8017f84:	f000 fe32 	bl	8018bec <_calloc_r>
 8017f88:	b160      	cbz	r0, 8017fa4 <_Balloc+0x64>
 8017f8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017f8e:	e00e      	b.n	8017fae <_Balloc+0x6e>
 8017f90:	2221      	movs	r2, #33	@ 0x21
 8017f92:	2104      	movs	r1, #4
 8017f94:	4620      	mov	r0, r4
 8017f96:	f000 fe29 	bl	8018bec <_calloc_r>
 8017f9a:	69e3      	ldr	r3, [r4, #28]
 8017f9c:	60f0      	str	r0, [r6, #12]
 8017f9e:	68db      	ldr	r3, [r3, #12]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d1e4      	bne.n	8017f6e <_Balloc+0x2e>
 8017fa4:	2000      	movs	r0, #0
 8017fa6:	bd70      	pop	{r4, r5, r6, pc}
 8017fa8:	6802      	ldr	r2, [r0, #0]
 8017faa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017fae:	2300      	movs	r3, #0
 8017fb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017fb4:	e7f7      	b.n	8017fa6 <_Balloc+0x66>
 8017fb6:	bf00      	nop
 8017fb8:	0801ce19 	.word	0x0801ce19
 8017fbc:	0801ce99 	.word	0x0801ce99

08017fc0 <_Bfree>:
 8017fc0:	b570      	push	{r4, r5, r6, lr}
 8017fc2:	69c6      	ldr	r6, [r0, #28]
 8017fc4:	4605      	mov	r5, r0
 8017fc6:	460c      	mov	r4, r1
 8017fc8:	b976      	cbnz	r6, 8017fe8 <_Bfree+0x28>
 8017fca:	2010      	movs	r0, #16
 8017fcc:	f7ff ff02 	bl	8017dd4 <malloc>
 8017fd0:	4602      	mov	r2, r0
 8017fd2:	61e8      	str	r0, [r5, #28]
 8017fd4:	b920      	cbnz	r0, 8017fe0 <_Bfree+0x20>
 8017fd6:	4b09      	ldr	r3, [pc, #36]	@ (8017ffc <_Bfree+0x3c>)
 8017fd8:	4809      	ldr	r0, [pc, #36]	@ (8018000 <_Bfree+0x40>)
 8017fda:	218f      	movs	r1, #143	@ 0x8f
 8017fdc:	f000 fde8 	bl	8018bb0 <__assert_func>
 8017fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017fe4:	6006      	str	r6, [r0, #0]
 8017fe6:	60c6      	str	r6, [r0, #12]
 8017fe8:	b13c      	cbz	r4, 8017ffa <_Bfree+0x3a>
 8017fea:	69eb      	ldr	r3, [r5, #28]
 8017fec:	6862      	ldr	r2, [r4, #4]
 8017fee:	68db      	ldr	r3, [r3, #12]
 8017ff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017ff4:	6021      	str	r1, [r4, #0]
 8017ff6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017ffa:	bd70      	pop	{r4, r5, r6, pc}
 8017ffc:	0801ce19 	.word	0x0801ce19
 8018000:	0801ce99 	.word	0x0801ce99

08018004 <__multadd>:
 8018004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018008:	690d      	ldr	r5, [r1, #16]
 801800a:	4607      	mov	r7, r0
 801800c:	460c      	mov	r4, r1
 801800e:	461e      	mov	r6, r3
 8018010:	f101 0c14 	add.w	ip, r1, #20
 8018014:	2000      	movs	r0, #0
 8018016:	f8dc 3000 	ldr.w	r3, [ip]
 801801a:	b299      	uxth	r1, r3
 801801c:	fb02 6101 	mla	r1, r2, r1, r6
 8018020:	0c1e      	lsrs	r6, r3, #16
 8018022:	0c0b      	lsrs	r3, r1, #16
 8018024:	fb02 3306 	mla	r3, r2, r6, r3
 8018028:	b289      	uxth	r1, r1
 801802a:	3001      	adds	r0, #1
 801802c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018030:	4285      	cmp	r5, r0
 8018032:	f84c 1b04 	str.w	r1, [ip], #4
 8018036:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801803a:	dcec      	bgt.n	8018016 <__multadd+0x12>
 801803c:	b30e      	cbz	r6, 8018082 <__multadd+0x7e>
 801803e:	68a3      	ldr	r3, [r4, #8]
 8018040:	42ab      	cmp	r3, r5
 8018042:	dc19      	bgt.n	8018078 <__multadd+0x74>
 8018044:	6861      	ldr	r1, [r4, #4]
 8018046:	4638      	mov	r0, r7
 8018048:	3101      	adds	r1, #1
 801804a:	f7ff ff79 	bl	8017f40 <_Balloc>
 801804e:	4680      	mov	r8, r0
 8018050:	b928      	cbnz	r0, 801805e <__multadd+0x5a>
 8018052:	4602      	mov	r2, r0
 8018054:	4b0c      	ldr	r3, [pc, #48]	@ (8018088 <__multadd+0x84>)
 8018056:	480d      	ldr	r0, [pc, #52]	@ (801808c <__multadd+0x88>)
 8018058:	21ba      	movs	r1, #186	@ 0xba
 801805a:	f000 fda9 	bl	8018bb0 <__assert_func>
 801805e:	6922      	ldr	r2, [r4, #16]
 8018060:	3202      	adds	r2, #2
 8018062:	f104 010c 	add.w	r1, r4, #12
 8018066:	0092      	lsls	r2, r2, #2
 8018068:	300c      	adds	r0, #12
 801806a:	f7ff f80c 	bl	8017086 <memcpy>
 801806e:	4621      	mov	r1, r4
 8018070:	4638      	mov	r0, r7
 8018072:	f7ff ffa5 	bl	8017fc0 <_Bfree>
 8018076:	4644      	mov	r4, r8
 8018078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801807c:	3501      	adds	r5, #1
 801807e:	615e      	str	r6, [r3, #20]
 8018080:	6125      	str	r5, [r4, #16]
 8018082:	4620      	mov	r0, r4
 8018084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018088:	0801ce88 	.word	0x0801ce88
 801808c:	0801ce99 	.word	0x0801ce99

08018090 <__hi0bits>:
 8018090:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018094:	4603      	mov	r3, r0
 8018096:	bf36      	itet	cc
 8018098:	0403      	lslcc	r3, r0, #16
 801809a:	2000      	movcs	r0, #0
 801809c:	2010      	movcc	r0, #16
 801809e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80180a2:	bf3c      	itt	cc
 80180a4:	021b      	lslcc	r3, r3, #8
 80180a6:	3008      	addcc	r0, #8
 80180a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80180ac:	bf3c      	itt	cc
 80180ae:	011b      	lslcc	r3, r3, #4
 80180b0:	3004      	addcc	r0, #4
 80180b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80180b6:	bf3c      	itt	cc
 80180b8:	009b      	lslcc	r3, r3, #2
 80180ba:	3002      	addcc	r0, #2
 80180bc:	2b00      	cmp	r3, #0
 80180be:	db05      	blt.n	80180cc <__hi0bits+0x3c>
 80180c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80180c4:	f100 0001 	add.w	r0, r0, #1
 80180c8:	bf08      	it	eq
 80180ca:	2020      	moveq	r0, #32
 80180cc:	4770      	bx	lr

080180ce <__lo0bits>:
 80180ce:	6803      	ldr	r3, [r0, #0]
 80180d0:	4602      	mov	r2, r0
 80180d2:	f013 0007 	ands.w	r0, r3, #7
 80180d6:	d00b      	beq.n	80180f0 <__lo0bits+0x22>
 80180d8:	07d9      	lsls	r1, r3, #31
 80180da:	d421      	bmi.n	8018120 <__lo0bits+0x52>
 80180dc:	0798      	lsls	r0, r3, #30
 80180de:	bf49      	itett	mi
 80180e0:	085b      	lsrmi	r3, r3, #1
 80180e2:	089b      	lsrpl	r3, r3, #2
 80180e4:	2001      	movmi	r0, #1
 80180e6:	6013      	strmi	r3, [r2, #0]
 80180e8:	bf5c      	itt	pl
 80180ea:	6013      	strpl	r3, [r2, #0]
 80180ec:	2002      	movpl	r0, #2
 80180ee:	4770      	bx	lr
 80180f0:	b299      	uxth	r1, r3
 80180f2:	b909      	cbnz	r1, 80180f8 <__lo0bits+0x2a>
 80180f4:	0c1b      	lsrs	r3, r3, #16
 80180f6:	2010      	movs	r0, #16
 80180f8:	b2d9      	uxtb	r1, r3
 80180fa:	b909      	cbnz	r1, 8018100 <__lo0bits+0x32>
 80180fc:	3008      	adds	r0, #8
 80180fe:	0a1b      	lsrs	r3, r3, #8
 8018100:	0719      	lsls	r1, r3, #28
 8018102:	bf04      	itt	eq
 8018104:	091b      	lsreq	r3, r3, #4
 8018106:	3004      	addeq	r0, #4
 8018108:	0799      	lsls	r1, r3, #30
 801810a:	bf04      	itt	eq
 801810c:	089b      	lsreq	r3, r3, #2
 801810e:	3002      	addeq	r0, #2
 8018110:	07d9      	lsls	r1, r3, #31
 8018112:	d403      	bmi.n	801811c <__lo0bits+0x4e>
 8018114:	085b      	lsrs	r3, r3, #1
 8018116:	f100 0001 	add.w	r0, r0, #1
 801811a:	d003      	beq.n	8018124 <__lo0bits+0x56>
 801811c:	6013      	str	r3, [r2, #0]
 801811e:	4770      	bx	lr
 8018120:	2000      	movs	r0, #0
 8018122:	4770      	bx	lr
 8018124:	2020      	movs	r0, #32
 8018126:	4770      	bx	lr

08018128 <__i2b>:
 8018128:	b510      	push	{r4, lr}
 801812a:	460c      	mov	r4, r1
 801812c:	2101      	movs	r1, #1
 801812e:	f7ff ff07 	bl	8017f40 <_Balloc>
 8018132:	4602      	mov	r2, r0
 8018134:	b928      	cbnz	r0, 8018142 <__i2b+0x1a>
 8018136:	4b05      	ldr	r3, [pc, #20]	@ (801814c <__i2b+0x24>)
 8018138:	4805      	ldr	r0, [pc, #20]	@ (8018150 <__i2b+0x28>)
 801813a:	f240 1145 	movw	r1, #325	@ 0x145
 801813e:	f000 fd37 	bl	8018bb0 <__assert_func>
 8018142:	2301      	movs	r3, #1
 8018144:	6144      	str	r4, [r0, #20]
 8018146:	6103      	str	r3, [r0, #16]
 8018148:	bd10      	pop	{r4, pc}
 801814a:	bf00      	nop
 801814c:	0801ce88 	.word	0x0801ce88
 8018150:	0801ce99 	.word	0x0801ce99

08018154 <__multiply>:
 8018154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018158:	4614      	mov	r4, r2
 801815a:	690a      	ldr	r2, [r1, #16]
 801815c:	6923      	ldr	r3, [r4, #16]
 801815e:	429a      	cmp	r2, r3
 8018160:	bfa8      	it	ge
 8018162:	4623      	movge	r3, r4
 8018164:	460f      	mov	r7, r1
 8018166:	bfa4      	itt	ge
 8018168:	460c      	movge	r4, r1
 801816a:	461f      	movge	r7, r3
 801816c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018170:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018174:	68a3      	ldr	r3, [r4, #8]
 8018176:	6861      	ldr	r1, [r4, #4]
 8018178:	eb0a 0609 	add.w	r6, sl, r9
 801817c:	42b3      	cmp	r3, r6
 801817e:	b085      	sub	sp, #20
 8018180:	bfb8      	it	lt
 8018182:	3101      	addlt	r1, #1
 8018184:	f7ff fedc 	bl	8017f40 <_Balloc>
 8018188:	b930      	cbnz	r0, 8018198 <__multiply+0x44>
 801818a:	4602      	mov	r2, r0
 801818c:	4b44      	ldr	r3, [pc, #272]	@ (80182a0 <__multiply+0x14c>)
 801818e:	4845      	ldr	r0, [pc, #276]	@ (80182a4 <__multiply+0x150>)
 8018190:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018194:	f000 fd0c 	bl	8018bb0 <__assert_func>
 8018198:	f100 0514 	add.w	r5, r0, #20
 801819c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80181a0:	462b      	mov	r3, r5
 80181a2:	2200      	movs	r2, #0
 80181a4:	4543      	cmp	r3, r8
 80181a6:	d321      	bcc.n	80181ec <__multiply+0x98>
 80181a8:	f107 0114 	add.w	r1, r7, #20
 80181ac:	f104 0214 	add.w	r2, r4, #20
 80181b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80181b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80181b8:	9302      	str	r3, [sp, #8]
 80181ba:	1b13      	subs	r3, r2, r4
 80181bc:	3b15      	subs	r3, #21
 80181be:	f023 0303 	bic.w	r3, r3, #3
 80181c2:	3304      	adds	r3, #4
 80181c4:	f104 0715 	add.w	r7, r4, #21
 80181c8:	42ba      	cmp	r2, r7
 80181ca:	bf38      	it	cc
 80181cc:	2304      	movcc	r3, #4
 80181ce:	9301      	str	r3, [sp, #4]
 80181d0:	9b02      	ldr	r3, [sp, #8]
 80181d2:	9103      	str	r1, [sp, #12]
 80181d4:	428b      	cmp	r3, r1
 80181d6:	d80c      	bhi.n	80181f2 <__multiply+0x9e>
 80181d8:	2e00      	cmp	r6, #0
 80181da:	dd03      	ble.n	80181e4 <__multiply+0x90>
 80181dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d05b      	beq.n	801829c <__multiply+0x148>
 80181e4:	6106      	str	r6, [r0, #16]
 80181e6:	b005      	add	sp, #20
 80181e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181ec:	f843 2b04 	str.w	r2, [r3], #4
 80181f0:	e7d8      	b.n	80181a4 <__multiply+0x50>
 80181f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80181f6:	f1ba 0f00 	cmp.w	sl, #0
 80181fa:	d024      	beq.n	8018246 <__multiply+0xf2>
 80181fc:	f104 0e14 	add.w	lr, r4, #20
 8018200:	46a9      	mov	r9, r5
 8018202:	f04f 0c00 	mov.w	ip, #0
 8018206:	f85e 7b04 	ldr.w	r7, [lr], #4
 801820a:	f8d9 3000 	ldr.w	r3, [r9]
 801820e:	fa1f fb87 	uxth.w	fp, r7
 8018212:	b29b      	uxth	r3, r3
 8018214:	fb0a 330b 	mla	r3, sl, fp, r3
 8018218:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801821c:	f8d9 7000 	ldr.w	r7, [r9]
 8018220:	4463      	add	r3, ip
 8018222:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018226:	fb0a c70b 	mla	r7, sl, fp, ip
 801822a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801822e:	b29b      	uxth	r3, r3
 8018230:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018234:	4572      	cmp	r2, lr
 8018236:	f849 3b04 	str.w	r3, [r9], #4
 801823a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801823e:	d8e2      	bhi.n	8018206 <__multiply+0xb2>
 8018240:	9b01      	ldr	r3, [sp, #4]
 8018242:	f845 c003 	str.w	ip, [r5, r3]
 8018246:	9b03      	ldr	r3, [sp, #12]
 8018248:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801824c:	3104      	adds	r1, #4
 801824e:	f1b9 0f00 	cmp.w	r9, #0
 8018252:	d021      	beq.n	8018298 <__multiply+0x144>
 8018254:	682b      	ldr	r3, [r5, #0]
 8018256:	f104 0c14 	add.w	ip, r4, #20
 801825a:	46ae      	mov	lr, r5
 801825c:	f04f 0a00 	mov.w	sl, #0
 8018260:	f8bc b000 	ldrh.w	fp, [ip]
 8018264:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018268:	fb09 770b 	mla	r7, r9, fp, r7
 801826c:	4457      	add	r7, sl
 801826e:	b29b      	uxth	r3, r3
 8018270:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018274:	f84e 3b04 	str.w	r3, [lr], #4
 8018278:	f85c 3b04 	ldr.w	r3, [ip], #4
 801827c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018280:	f8be 3000 	ldrh.w	r3, [lr]
 8018284:	fb09 330a 	mla	r3, r9, sl, r3
 8018288:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801828c:	4562      	cmp	r2, ip
 801828e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018292:	d8e5      	bhi.n	8018260 <__multiply+0x10c>
 8018294:	9f01      	ldr	r7, [sp, #4]
 8018296:	51eb      	str	r3, [r5, r7]
 8018298:	3504      	adds	r5, #4
 801829a:	e799      	b.n	80181d0 <__multiply+0x7c>
 801829c:	3e01      	subs	r6, #1
 801829e:	e79b      	b.n	80181d8 <__multiply+0x84>
 80182a0:	0801ce88 	.word	0x0801ce88
 80182a4:	0801ce99 	.word	0x0801ce99

080182a8 <__pow5mult>:
 80182a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182ac:	4615      	mov	r5, r2
 80182ae:	f012 0203 	ands.w	r2, r2, #3
 80182b2:	4607      	mov	r7, r0
 80182b4:	460e      	mov	r6, r1
 80182b6:	d007      	beq.n	80182c8 <__pow5mult+0x20>
 80182b8:	4c25      	ldr	r4, [pc, #148]	@ (8018350 <__pow5mult+0xa8>)
 80182ba:	3a01      	subs	r2, #1
 80182bc:	2300      	movs	r3, #0
 80182be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80182c2:	f7ff fe9f 	bl	8018004 <__multadd>
 80182c6:	4606      	mov	r6, r0
 80182c8:	10ad      	asrs	r5, r5, #2
 80182ca:	d03d      	beq.n	8018348 <__pow5mult+0xa0>
 80182cc:	69fc      	ldr	r4, [r7, #28]
 80182ce:	b97c      	cbnz	r4, 80182f0 <__pow5mult+0x48>
 80182d0:	2010      	movs	r0, #16
 80182d2:	f7ff fd7f 	bl	8017dd4 <malloc>
 80182d6:	4602      	mov	r2, r0
 80182d8:	61f8      	str	r0, [r7, #28]
 80182da:	b928      	cbnz	r0, 80182e8 <__pow5mult+0x40>
 80182dc:	4b1d      	ldr	r3, [pc, #116]	@ (8018354 <__pow5mult+0xac>)
 80182de:	481e      	ldr	r0, [pc, #120]	@ (8018358 <__pow5mult+0xb0>)
 80182e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80182e4:	f000 fc64 	bl	8018bb0 <__assert_func>
 80182e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80182ec:	6004      	str	r4, [r0, #0]
 80182ee:	60c4      	str	r4, [r0, #12]
 80182f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80182f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80182f8:	b94c      	cbnz	r4, 801830e <__pow5mult+0x66>
 80182fa:	f240 2171 	movw	r1, #625	@ 0x271
 80182fe:	4638      	mov	r0, r7
 8018300:	f7ff ff12 	bl	8018128 <__i2b>
 8018304:	2300      	movs	r3, #0
 8018306:	f8c8 0008 	str.w	r0, [r8, #8]
 801830a:	4604      	mov	r4, r0
 801830c:	6003      	str	r3, [r0, #0]
 801830e:	f04f 0900 	mov.w	r9, #0
 8018312:	07eb      	lsls	r3, r5, #31
 8018314:	d50a      	bpl.n	801832c <__pow5mult+0x84>
 8018316:	4631      	mov	r1, r6
 8018318:	4622      	mov	r2, r4
 801831a:	4638      	mov	r0, r7
 801831c:	f7ff ff1a 	bl	8018154 <__multiply>
 8018320:	4631      	mov	r1, r6
 8018322:	4680      	mov	r8, r0
 8018324:	4638      	mov	r0, r7
 8018326:	f7ff fe4b 	bl	8017fc0 <_Bfree>
 801832a:	4646      	mov	r6, r8
 801832c:	106d      	asrs	r5, r5, #1
 801832e:	d00b      	beq.n	8018348 <__pow5mult+0xa0>
 8018330:	6820      	ldr	r0, [r4, #0]
 8018332:	b938      	cbnz	r0, 8018344 <__pow5mult+0x9c>
 8018334:	4622      	mov	r2, r4
 8018336:	4621      	mov	r1, r4
 8018338:	4638      	mov	r0, r7
 801833a:	f7ff ff0b 	bl	8018154 <__multiply>
 801833e:	6020      	str	r0, [r4, #0]
 8018340:	f8c0 9000 	str.w	r9, [r0]
 8018344:	4604      	mov	r4, r0
 8018346:	e7e4      	b.n	8018312 <__pow5mult+0x6a>
 8018348:	4630      	mov	r0, r6
 801834a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801834e:	bf00      	nop
 8018350:	0801cef4 	.word	0x0801cef4
 8018354:	0801ce19 	.word	0x0801ce19
 8018358:	0801ce99 	.word	0x0801ce99

0801835c <__lshift>:
 801835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018360:	460c      	mov	r4, r1
 8018362:	6849      	ldr	r1, [r1, #4]
 8018364:	6923      	ldr	r3, [r4, #16]
 8018366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801836a:	68a3      	ldr	r3, [r4, #8]
 801836c:	4607      	mov	r7, r0
 801836e:	4691      	mov	r9, r2
 8018370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018374:	f108 0601 	add.w	r6, r8, #1
 8018378:	42b3      	cmp	r3, r6
 801837a:	db0b      	blt.n	8018394 <__lshift+0x38>
 801837c:	4638      	mov	r0, r7
 801837e:	f7ff fddf 	bl	8017f40 <_Balloc>
 8018382:	4605      	mov	r5, r0
 8018384:	b948      	cbnz	r0, 801839a <__lshift+0x3e>
 8018386:	4602      	mov	r2, r0
 8018388:	4b28      	ldr	r3, [pc, #160]	@ (801842c <__lshift+0xd0>)
 801838a:	4829      	ldr	r0, [pc, #164]	@ (8018430 <__lshift+0xd4>)
 801838c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018390:	f000 fc0e 	bl	8018bb0 <__assert_func>
 8018394:	3101      	adds	r1, #1
 8018396:	005b      	lsls	r3, r3, #1
 8018398:	e7ee      	b.n	8018378 <__lshift+0x1c>
 801839a:	2300      	movs	r3, #0
 801839c:	f100 0114 	add.w	r1, r0, #20
 80183a0:	f100 0210 	add.w	r2, r0, #16
 80183a4:	4618      	mov	r0, r3
 80183a6:	4553      	cmp	r3, sl
 80183a8:	db33      	blt.n	8018412 <__lshift+0xb6>
 80183aa:	6920      	ldr	r0, [r4, #16]
 80183ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80183b0:	f104 0314 	add.w	r3, r4, #20
 80183b4:	f019 091f 	ands.w	r9, r9, #31
 80183b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80183bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80183c0:	d02b      	beq.n	801841a <__lshift+0xbe>
 80183c2:	f1c9 0e20 	rsb	lr, r9, #32
 80183c6:	468a      	mov	sl, r1
 80183c8:	2200      	movs	r2, #0
 80183ca:	6818      	ldr	r0, [r3, #0]
 80183cc:	fa00 f009 	lsl.w	r0, r0, r9
 80183d0:	4310      	orrs	r0, r2
 80183d2:	f84a 0b04 	str.w	r0, [sl], #4
 80183d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80183da:	459c      	cmp	ip, r3
 80183dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80183e0:	d8f3      	bhi.n	80183ca <__lshift+0x6e>
 80183e2:	ebac 0304 	sub.w	r3, ip, r4
 80183e6:	3b15      	subs	r3, #21
 80183e8:	f023 0303 	bic.w	r3, r3, #3
 80183ec:	3304      	adds	r3, #4
 80183ee:	f104 0015 	add.w	r0, r4, #21
 80183f2:	4584      	cmp	ip, r0
 80183f4:	bf38      	it	cc
 80183f6:	2304      	movcc	r3, #4
 80183f8:	50ca      	str	r2, [r1, r3]
 80183fa:	b10a      	cbz	r2, 8018400 <__lshift+0xa4>
 80183fc:	f108 0602 	add.w	r6, r8, #2
 8018400:	3e01      	subs	r6, #1
 8018402:	4638      	mov	r0, r7
 8018404:	612e      	str	r6, [r5, #16]
 8018406:	4621      	mov	r1, r4
 8018408:	f7ff fdda 	bl	8017fc0 <_Bfree>
 801840c:	4628      	mov	r0, r5
 801840e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018412:	f842 0f04 	str.w	r0, [r2, #4]!
 8018416:	3301      	adds	r3, #1
 8018418:	e7c5      	b.n	80183a6 <__lshift+0x4a>
 801841a:	3904      	subs	r1, #4
 801841c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018420:	f841 2f04 	str.w	r2, [r1, #4]!
 8018424:	459c      	cmp	ip, r3
 8018426:	d8f9      	bhi.n	801841c <__lshift+0xc0>
 8018428:	e7ea      	b.n	8018400 <__lshift+0xa4>
 801842a:	bf00      	nop
 801842c:	0801ce88 	.word	0x0801ce88
 8018430:	0801ce99 	.word	0x0801ce99

08018434 <__mcmp>:
 8018434:	690a      	ldr	r2, [r1, #16]
 8018436:	4603      	mov	r3, r0
 8018438:	6900      	ldr	r0, [r0, #16]
 801843a:	1a80      	subs	r0, r0, r2
 801843c:	b530      	push	{r4, r5, lr}
 801843e:	d10e      	bne.n	801845e <__mcmp+0x2a>
 8018440:	3314      	adds	r3, #20
 8018442:	3114      	adds	r1, #20
 8018444:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018448:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801844c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018450:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018454:	4295      	cmp	r5, r2
 8018456:	d003      	beq.n	8018460 <__mcmp+0x2c>
 8018458:	d205      	bcs.n	8018466 <__mcmp+0x32>
 801845a:	f04f 30ff 	mov.w	r0, #4294967295
 801845e:	bd30      	pop	{r4, r5, pc}
 8018460:	42a3      	cmp	r3, r4
 8018462:	d3f3      	bcc.n	801844c <__mcmp+0x18>
 8018464:	e7fb      	b.n	801845e <__mcmp+0x2a>
 8018466:	2001      	movs	r0, #1
 8018468:	e7f9      	b.n	801845e <__mcmp+0x2a>
	...

0801846c <__mdiff>:
 801846c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018470:	4689      	mov	r9, r1
 8018472:	4606      	mov	r6, r0
 8018474:	4611      	mov	r1, r2
 8018476:	4648      	mov	r0, r9
 8018478:	4614      	mov	r4, r2
 801847a:	f7ff ffdb 	bl	8018434 <__mcmp>
 801847e:	1e05      	subs	r5, r0, #0
 8018480:	d112      	bne.n	80184a8 <__mdiff+0x3c>
 8018482:	4629      	mov	r1, r5
 8018484:	4630      	mov	r0, r6
 8018486:	f7ff fd5b 	bl	8017f40 <_Balloc>
 801848a:	4602      	mov	r2, r0
 801848c:	b928      	cbnz	r0, 801849a <__mdiff+0x2e>
 801848e:	4b3f      	ldr	r3, [pc, #252]	@ (801858c <__mdiff+0x120>)
 8018490:	f240 2137 	movw	r1, #567	@ 0x237
 8018494:	483e      	ldr	r0, [pc, #248]	@ (8018590 <__mdiff+0x124>)
 8018496:	f000 fb8b 	bl	8018bb0 <__assert_func>
 801849a:	2301      	movs	r3, #1
 801849c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80184a0:	4610      	mov	r0, r2
 80184a2:	b003      	add	sp, #12
 80184a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184a8:	bfbc      	itt	lt
 80184aa:	464b      	movlt	r3, r9
 80184ac:	46a1      	movlt	r9, r4
 80184ae:	4630      	mov	r0, r6
 80184b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80184b4:	bfba      	itte	lt
 80184b6:	461c      	movlt	r4, r3
 80184b8:	2501      	movlt	r5, #1
 80184ba:	2500      	movge	r5, #0
 80184bc:	f7ff fd40 	bl	8017f40 <_Balloc>
 80184c0:	4602      	mov	r2, r0
 80184c2:	b918      	cbnz	r0, 80184cc <__mdiff+0x60>
 80184c4:	4b31      	ldr	r3, [pc, #196]	@ (801858c <__mdiff+0x120>)
 80184c6:	f240 2145 	movw	r1, #581	@ 0x245
 80184ca:	e7e3      	b.n	8018494 <__mdiff+0x28>
 80184cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80184d0:	6926      	ldr	r6, [r4, #16]
 80184d2:	60c5      	str	r5, [r0, #12]
 80184d4:	f109 0310 	add.w	r3, r9, #16
 80184d8:	f109 0514 	add.w	r5, r9, #20
 80184dc:	f104 0e14 	add.w	lr, r4, #20
 80184e0:	f100 0b14 	add.w	fp, r0, #20
 80184e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80184e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80184ec:	9301      	str	r3, [sp, #4]
 80184ee:	46d9      	mov	r9, fp
 80184f0:	f04f 0c00 	mov.w	ip, #0
 80184f4:	9b01      	ldr	r3, [sp, #4]
 80184f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80184fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80184fe:	9301      	str	r3, [sp, #4]
 8018500:	fa1f f38a 	uxth.w	r3, sl
 8018504:	4619      	mov	r1, r3
 8018506:	b283      	uxth	r3, r0
 8018508:	1acb      	subs	r3, r1, r3
 801850a:	0c00      	lsrs	r0, r0, #16
 801850c:	4463      	add	r3, ip
 801850e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018512:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8018516:	b29b      	uxth	r3, r3
 8018518:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801851c:	4576      	cmp	r6, lr
 801851e:	f849 3b04 	str.w	r3, [r9], #4
 8018522:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018526:	d8e5      	bhi.n	80184f4 <__mdiff+0x88>
 8018528:	1b33      	subs	r3, r6, r4
 801852a:	3b15      	subs	r3, #21
 801852c:	f023 0303 	bic.w	r3, r3, #3
 8018530:	3415      	adds	r4, #21
 8018532:	3304      	adds	r3, #4
 8018534:	42a6      	cmp	r6, r4
 8018536:	bf38      	it	cc
 8018538:	2304      	movcc	r3, #4
 801853a:	441d      	add	r5, r3
 801853c:	445b      	add	r3, fp
 801853e:	461e      	mov	r6, r3
 8018540:	462c      	mov	r4, r5
 8018542:	4544      	cmp	r4, r8
 8018544:	d30e      	bcc.n	8018564 <__mdiff+0xf8>
 8018546:	f108 0103 	add.w	r1, r8, #3
 801854a:	1b49      	subs	r1, r1, r5
 801854c:	f021 0103 	bic.w	r1, r1, #3
 8018550:	3d03      	subs	r5, #3
 8018552:	45a8      	cmp	r8, r5
 8018554:	bf38      	it	cc
 8018556:	2100      	movcc	r1, #0
 8018558:	440b      	add	r3, r1
 801855a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801855e:	b191      	cbz	r1, 8018586 <__mdiff+0x11a>
 8018560:	6117      	str	r7, [r2, #16]
 8018562:	e79d      	b.n	80184a0 <__mdiff+0x34>
 8018564:	f854 1b04 	ldr.w	r1, [r4], #4
 8018568:	46e6      	mov	lr, ip
 801856a:	0c08      	lsrs	r0, r1, #16
 801856c:	fa1c fc81 	uxtah	ip, ip, r1
 8018570:	4471      	add	r1, lr
 8018572:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018576:	b289      	uxth	r1, r1
 8018578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801857c:	f846 1b04 	str.w	r1, [r6], #4
 8018580:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018584:	e7dd      	b.n	8018542 <__mdiff+0xd6>
 8018586:	3f01      	subs	r7, #1
 8018588:	e7e7      	b.n	801855a <__mdiff+0xee>
 801858a:	bf00      	nop
 801858c:	0801ce88 	.word	0x0801ce88
 8018590:	0801ce99 	.word	0x0801ce99

08018594 <__d2b>:
 8018594:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018598:	460f      	mov	r7, r1
 801859a:	2101      	movs	r1, #1
 801859c:	ec59 8b10 	vmov	r8, r9, d0
 80185a0:	4616      	mov	r6, r2
 80185a2:	f7ff fccd 	bl	8017f40 <_Balloc>
 80185a6:	4604      	mov	r4, r0
 80185a8:	b930      	cbnz	r0, 80185b8 <__d2b+0x24>
 80185aa:	4602      	mov	r2, r0
 80185ac:	4b23      	ldr	r3, [pc, #140]	@ (801863c <__d2b+0xa8>)
 80185ae:	4824      	ldr	r0, [pc, #144]	@ (8018640 <__d2b+0xac>)
 80185b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80185b4:	f000 fafc 	bl	8018bb0 <__assert_func>
 80185b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80185bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80185c0:	b10d      	cbz	r5, 80185c6 <__d2b+0x32>
 80185c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80185c6:	9301      	str	r3, [sp, #4]
 80185c8:	f1b8 0300 	subs.w	r3, r8, #0
 80185cc:	d023      	beq.n	8018616 <__d2b+0x82>
 80185ce:	4668      	mov	r0, sp
 80185d0:	9300      	str	r3, [sp, #0]
 80185d2:	f7ff fd7c 	bl	80180ce <__lo0bits>
 80185d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80185da:	b1d0      	cbz	r0, 8018612 <__d2b+0x7e>
 80185dc:	f1c0 0320 	rsb	r3, r0, #32
 80185e0:	fa02 f303 	lsl.w	r3, r2, r3
 80185e4:	430b      	orrs	r3, r1
 80185e6:	40c2      	lsrs	r2, r0
 80185e8:	6163      	str	r3, [r4, #20]
 80185ea:	9201      	str	r2, [sp, #4]
 80185ec:	9b01      	ldr	r3, [sp, #4]
 80185ee:	61a3      	str	r3, [r4, #24]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	bf0c      	ite	eq
 80185f4:	2201      	moveq	r2, #1
 80185f6:	2202      	movne	r2, #2
 80185f8:	6122      	str	r2, [r4, #16]
 80185fa:	b1a5      	cbz	r5, 8018626 <__d2b+0x92>
 80185fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018600:	4405      	add	r5, r0
 8018602:	603d      	str	r5, [r7, #0]
 8018604:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018608:	6030      	str	r0, [r6, #0]
 801860a:	4620      	mov	r0, r4
 801860c:	b003      	add	sp, #12
 801860e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018612:	6161      	str	r1, [r4, #20]
 8018614:	e7ea      	b.n	80185ec <__d2b+0x58>
 8018616:	a801      	add	r0, sp, #4
 8018618:	f7ff fd59 	bl	80180ce <__lo0bits>
 801861c:	9b01      	ldr	r3, [sp, #4]
 801861e:	6163      	str	r3, [r4, #20]
 8018620:	3020      	adds	r0, #32
 8018622:	2201      	movs	r2, #1
 8018624:	e7e8      	b.n	80185f8 <__d2b+0x64>
 8018626:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801862a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801862e:	6038      	str	r0, [r7, #0]
 8018630:	6918      	ldr	r0, [r3, #16]
 8018632:	f7ff fd2d 	bl	8018090 <__hi0bits>
 8018636:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801863a:	e7e5      	b.n	8018608 <__d2b+0x74>
 801863c:	0801ce88 	.word	0x0801ce88
 8018640:	0801ce99 	.word	0x0801ce99

08018644 <__sfputc_r>:
 8018644:	6893      	ldr	r3, [r2, #8]
 8018646:	3b01      	subs	r3, #1
 8018648:	2b00      	cmp	r3, #0
 801864a:	b410      	push	{r4}
 801864c:	6093      	str	r3, [r2, #8]
 801864e:	da08      	bge.n	8018662 <__sfputc_r+0x1e>
 8018650:	6994      	ldr	r4, [r2, #24]
 8018652:	42a3      	cmp	r3, r4
 8018654:	db01      	blt.n	801865a <__sfputc_r+0x16>
 8018656:	290a      	cmp	r1, #10
 8018658:	d103      	bne.n	8018662 <__sfputc_r+0x1e>
 801865a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801865e:	f7fe bbfe 	b.w	8016e5e <__swbuf_r>
 8018662:	6813      	ldr	r3, [r2, #0]
 8018664:	1c58      	adds	r0, r3, #1
 8018666:	6010      	str	r0, [r2, #0]
 8018668:	7019      	strb	r1, [r3, #0]
 801866a:	4608      	mov	r0, r1
 801866c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018670:	4770      	bx	lr

08018672 <__sfputs_r>:
 8018672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018674:	4606      	mov	r6, r0
 8018676:	460f      	mov	r7, r1
 8018678:	4614      	mov	r4, r2
 801867a:	18d5      	adds	r5, r2, r3
 801867c:	42ac      	cmp	r4, r5
 801867e:	d101      	bne.n	8018684 <__sfputs_r+0x12>
 8018680:	2000      	movs	r0, #0
 8018682:	e007      	b.n	8018694 <__sfputs_r+0x22>
 8018684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018688:	463a      	mov	r2, r7
 801868a:	4630      	mov	r0, r6
 801868c:	f7ff ffda 	bl	8018644 <__sfputc_r>
 8018690:	1c43      	adds	r3, r0, #1
 8018692:	d1f3      	bne.n	801867c <__sfputs_r+0xa>
 8018694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018698 <_vfiprintf_r>:
 8018698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801869c:	460d      	mov	r5, r1
 801869e:	b09d      	sub	sp, #116	@ 0x74
 80186a0:	4614      	mov	r4, r2
 80186a2:	4698      	mov	r8, r3
 80186a4:	4606      	mov	r6, r0
 80186a6:	b118      	cbz	r0, 80186b0 <_vfiprintf_r+0x18>
 80186a8:	6a03      	ldr	r3, [r0, #32]
 80186aa:	b90b      	cbnz	r3, 80186b0 <_vfiprintf_r+0x18>
 80186ac:	f7fe fae6 	bl	8016c7c <__sinit>
 80186b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80186b2:	07d9      	lsls	r1, r3, #31
 80186b4:	d405      	bmi.n	80186c2 <_vfiprintf_r+0x2a>
 80186b6:	89ab      	ldrh	r3, [r5, #12]
 80186b8:	059a      	lsls	r2, r3, #22
 80186ba:	d402      	bmi.n	80186c2 <_vfiprintf_r+0x2a>
 80186bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80186be:	f7fe fce0 	bl	8017082 <__retarget_lock_acquire_recursive>
 80186c2:	89ab      	ldrh	r3, [r5, #12]
 80186c4:	071b      	lsls	r3, r3, #28
 80186c6:	d501      	bpl.n	80186cc <_vfiprintf_r+0x34>
 80186c8:	692b      	ldr	r3, [r5, #16]
 80186ca:	b99b      	cbnz	r3, 80186f4 <_vfiprintf_r+0x5c>
 80186cc:	4629      	mov	r1, r5
 80186ce:	4630      	mov	r0, r6
 80186d0:	f7fe fc04 	bl	8016edc <__swsetup_r>
 80186d4:	b170      	cbz	r0, 80186f4 <_vfiprintf_r+0x5c>
 80186d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80186d8:	07dc      	lsls	r4, r3, #31
 80186da:	d504      	bpl.n	80186e6 <_vfiprintf_r+0x4e>
 80186dc:	f04f 30ff 	mov.w	r0, #4294967295
 80186e0:	b01d      	add	sp, #116	@ 0x74
 80186e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186e6:	89ab      	ldrh	r3, [r5, #12]
 80186e8:	0598      	lsls	r0, r3, #22
 80186ea:	d4f7      	bmi.n	80186dc <_vfiprintf_r+0x44>
 80186ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80186ee:	f7fe fcc9 	bl	8017084 <__retarget_lock_release_recursive>
 80186f2:	e7f3      	b.n	80186dc <_vfiprintf_r+0x44>
 80186f4:	2300      	movs	r3, #0
 80186f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80186f8:	2320      	movs	r3, #32
 80186fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80186fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8018702:	2330      	movs	r3, #48	@ 0x30
 8018704:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80188b4 <_vfiprintf_r+0x21c>
 8018708:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801870c:	f04f 0901 	mov.w	r9, #1
 8018710:	4623      	mov	r3, r4
 8018712:	469a      	mov	sl, r3
 8018714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018718:	b10a      	cbz	r2, 801871e <_vfiprintf_r+0x86>
 801871a:	2a25      	cmp	r2, #37	@ 0x25
 801871c:	d1f9      	bne.n	8018712 <_vfiprintf_r+0x7a>
 801871e:	ebba 0b04 	subs.w	fp, sl, r4
 8018722:	d00b      	beq.n	801873c <_vfiprintf_r+0xa4>
 8018724:	465b      	mov	r3, fp
 8018726:	4622      	mov	r2, r4
 8018728:	4629      	mov	r1, r5
 801872a:	4630      	mov	r0, r6
 801872c:	f7ff ffa1 	bl	8018672 <__sfputs_r>
 8018730:	3001      	adds	r0, #1
 8018732:	f000 80a7 	beq.w	8018884 <_vfiprintf_r+0x1ec>
 8018736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018738:	445a      	add	r2, fp
 801873a:	9209      	str	r2, [sp, #36]	@ 0x24
 801873c:	f89a 3000 	ldrb.w	r3, [sl]
 8018740:	2b00      	cmp	r3, #0
 8018742:	f000 809f 	beq.w	8018884 <_vfiprintf_r+0x1ec>
 8018746:	2300      	movs	r3, #0
 8018748:	f04f 32ff 	mov.w	r2, #4294967295
 801874c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018750:	f10a 0a01 	add.w	sl, sl, #1
 8018754:	9304      	str	r3, [sp, #16]
 8018756:	9307      	str	r3, [sp, #28]
 8018758:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801875c:	931a      	str	r3, [sp, #104]	@ 0x68
 801875e:	4654      	mov	r4, sl
 8018760:	2205      	movs	r2, #5
 8018762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018766:	4853      	ldr	r0, [pc, #332]	@ (80188b4 <_vfiprintf_r+0x21c>)
 8018768:	f7e7 fd0a 	bl	8000180 <memchr>
 801876c:	9a04      	ldr	r2, [sp, #16]
 801876e:	b9d8      	cbnz	r0, 80187a8 <_vfiprintf_r+0x110>
 8018770:	06d1      	lsls	r1, r2, #27
 8018772:	bf44      	itt	mi
 8018774:	2320      	movmi	r3, #32
 8018776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801877a:	0713      	lsls	r3, r2, #28
 801877c:	bf44      	itt	mi
 801877e:	232b      	movmi	r3, #43	@ 0x2b
 8018780:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018784:	f89a 3000 	ldrb.w	r3, [sl]
 8018788:	2b2a      	cmp	r3, #42	@ 0x2a
 801878a:	d015      	beq.n	80187b8 <_vfiprintf_r+0x120>
 801878c:	9a07      	ldr	r2, [sp, #28]
 801878e:	4654      	mov	r4, sl
 8018790:	2000      	movs	r0, #0
 8018792:	f04f 0c0a 	mov.w	ip, #10
 8018796:	4621      	mov	r1, r4
 8018798:	f811 3b01 	ldrb.w	r3, [r1], #1
 801879c:	3b30      	subs	r3, #48	@ 0x30
 801879e:	2b09      	cmp	r3, #9
 80187a0:	d94b      	bls.n	801883a <_vfiprintf_r+0x1a2>
 80187a2:	b1b0      	cbz	r0, 80187d2 <_vfiprintf_r+0x13a>
 80187a4:	9207      	str	r2, [sp, #28]
 80187a6:	e014      	b.n	80187d2 <_vfiprintf_r+0x13a>
 80187a8:	eba0 0308 	sub.w	r3, r0, r8
 80187ac:	fa09 f303 	lsl.w	r3, r9, r3
 80187b0:	4313      	orrs	r3, r2
 80187b2:	9304      	str	r3, [sp, #16]
 80187b4:	46a2      	mov	sl, r4
 80187b6:	e7d2      	b.n	801875e <_vfiprintf_r+0xc6>
 80187b8:	9b03      	ldr	r3, [sp, #12]
 80187ba:	1d19      	adds	r1, r3, #4
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	9103      	str	r1, [sp, #12]
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	bfbb      	ittet	lt
 80187c4:	425b      	neglt	r3, r3
 80187c6:	f042 0202 	orrlt.w	r2, r2, #2
 80187ca:	9307      	strge	r3, [sp, #28]
 80187cc:	9307      	strlt	r3, [sp, #28]
 80187ce:	bfb8      	it	lt
 80187d0:	9204      	strlt	r2, [sp, #16]
 80187d2:	7823      	ldrb	r3, [r4, #0]
 80187d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80187d6:	d10a      	bne.n	80187ee <_vfiprintf_r+0x156>
 80187d8:	7863      	ldrb	r3, [r4, #1]
 80187da:	2b2a      	cmp	r3, #42	@ 0x2a
 80187dc:	d132      	bne.n	8018844 <_vfiprintf_r+0x1ac>
 80187de:	9b03      	ldr	r3, [sp, #12]
 80187e0:	1d1a      	adds	r2, r3, #4
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	9203      	str	r2, [sp, #12]
 80187e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80187ea:	3402      	adds	r4, #2
 80187ec:	9305      	str	r3, [sp, #20]
 80187ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80188c4 <_vfiprintf_r+0x22c>
 80187f2:	7821      	ldrb	r1, [r4, #0]
 80187f4:	2203      	movs	r2, #3
 80187f6:	4650      	mov	r0, sl
 80187f8:	f7e7 fcc2 	bl	8000180 <memchr>
 80187fc:	b138      	cbz	r0, 801880e <_vfiprintf_r+0x176>
 80187fe:	9b04      	ldr	r3, [sp, #16]
 8018800:	eba0 000a 	sub.w	r0, r0, sl
 8018804:	2240      	movs	r2, #64	@ 0x40
 8018806:	4082      	lsls	r2, r0
 8018808:	4313      	orrs	r3, r2
 801880a:	3401      	adds	r4, #1
 801880c:	9304      	str	r3, [sp, #16]
 801880e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018812:	4829      	ldr	r0, [pc, #164]	@ (80188b8 <_vfiprintf_r+0x220>)
 8018814:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018818:	2206      	movs	r2, #6
 801881a:	f7e7 fcb1 	bl	8000180 <memchr>
 801881e:	2800      	cmp	r0, #0
 8018820:	d03f      	beq.n	80188a2 <_vfiprintf_r+0x20a>
 8018822:	4b26      	ldr	r3, [pc, #152]	@ (80188bc <_vfiprintf_r+0x224>)
 8018824:	bb1b      	cbnz	r3, 801886e <_vfiprintf_r+0x1d6>
 8018826:	9b03      	ldr	r3, [sp, #12]
 8018828:	3307      	adds	r3, #7
 801882a:	f023 0307 	bic.w	r3, r3, #7
 801882e:	3308      	adds	r3, #8
 8018830:	9303      	str	r3, [sp, #12]
 8018832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018834:	443b      	add	r3, r7
 8018836:	9309      	str	r3, [sp, #36]	@ 0x24
 8018838:	e76a      	b.n	8018710 <_vfiprintf_r+0x78>
 801883a:	fb0c 3202 	mla	r2, ip, r2, r3
 801883e:	460c      	mov	r4, r1
 8018840:	2001      	movs	r0, #1
 8018842:	e7a8      	b.n	8018796 <_vfiprintf_r+0xfe>
 8018844:	2300      	movs	r3, #0
 8018846:	3401      	adds	r4, #1
 8018848:	9305      	str	r3, [sp, #20]
 801884a:	4619      	mov	r1, r3
 801884c:	f04f 0c0a 	mov.w	ip, #10
 8018850:	4620      	mov	r0, r4
 8018852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018856:	3a30      	subs	r2, #48	@ 0x30
 8018858:	2a09      	cmp	r2, #9
 801885a:	d903      	bls.n	8018864 <_vfiprintf_r+0x1cc>
 801885c:	2b00      	cmp	r3, #0
 801885e:	d0c6      	beq.n	80187ee <_vfiprintf_r+0x156>
 8018860:	9105      	str	r1, [sp, #20]
 8018862:	e7c4      	b.n	80187ee <_vfiprintf_r+0x156>
 8018864:	fb0c 2101 	mla	r1, ip, r1, r2
 8018868:	4604      	mov	r4, r0
 801886a:	2301      	movs	r3, #1
 801886c:	e7f0      	b.n	8018850 <_vfiprintf_r+0x1b8>
 801886e:	ab03      	add	r3, sp, #12
 8018870:	9300      	str	r3, [sp, #0]
 8018872:	462a      	mov	r2, r5
 8018874:	4b12      	ldr	r3, [pc, #72]	@ (80188c0 <_vfiprintf_r+0x228>)
 8018876:	a904      	add	r1, sp, #16
 8018878:	4630      	mov	r0, r6
 801887a:	f7fd fdbb 	bl	80163f4 <_printf_float>
 801887e:	4607      	mov	r7, r0
 8018880:	1c78      	adds	r0, r7, #1
 8018882:	d1d6      	bne.n	8018832 <_vfiprintf_r+0x19a>
 8018884:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018886:	07d9      	lsls	r1, r3, #31
 8018888:	d405      	bmi.n	8018896 <_vfiprintf_r+0x1fe>
 801888a:	89ab      	ldrh	r3, [r5, #12]
 801888c:	059a      	lsls	r2, r3, #22
 801888e:	d402      	bmi.n	8018896 <_vfiprintf_r+0x1fe>
 8018890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018892:	f7fe fbf7 	bl	8017084 <__retarget_lock_release_recursive>
 8018896:	89ab      	ldrh	r3, [r5, #12]
 8018898:	065b      	lsls	r3, r3, #25
 801889a:	f53f af1f 	bmi.w	80186dc <_vfiprintf_r+0x44>
 801889e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80188a0:	e71e      	b.n	80186e0 <_vfiprintf_r+0x48>
 80188a2:	ab03      	add	r3, sp, #12
 80188a4:	9300      	str	r3, [sp, #0]
 80188a6:	462a      	mov	r2, r5
 80188a8:	4b05      	ldr	r3, [pc, #20]	@ (80188c0 <_vfiprintf_r+0x228>)
 80188aa:	a904      	add	r1, sp, #16
 80188ac:	4630      	mov	r0, r6
 80188ae:	f7fe f839 	bl	8016924 <_printf_i>
 80188b2:	e7e4      	b.n	801887e <_vfiprintf_r+0x1e6>
 80188b4:	0801cff0 	.word	0x0801cff0
 80188b8:	0801cffa 	.word	0x0801cffa
 80188bc:	080163f5 	.word	0x080163f5
 80188c0:	08018673 	.word	0x08018673
 80188c4:	0801cff6 	.word	0x0801cff6

080188c8 <__sflush_r>:
 80188c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80188cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188d0:	0716      	lsls	r6, r2, #28
 80188d2:	4605      	mov	r5, r0
 80188d4:	460c      	mov	r4, r1
 80188d6:	d454      	bmi.n	8018982 <__sflush_r+0xba>
 80188d8:	684b      	ldr	r3, [r1, #4]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	dc02      	bgt.n	80188e4 <__sflush_r+0x1c>
 80188de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	dd48      	ble.n	8018976 <__sflush_r+0xae>
 80188e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80188e6:	2e00      	cmp	r6, #0
 80188e8:	d045      	beq.n	8018976 <__sflush_r+0xae>
 80188ea:	2300      	movs	r3, #0
 80188ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80188f0:	682f      	ldr	r7, [r5, #0]
 80188f2:	6a21      	ldr	r1, [r4, #32]
 80188f4:	602b      	str	r3, [r5, #0]
 80188f6:	d030      	beq.n	801895a <__sflush_r+0x92>
 80188f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80188fa:	89a3      	ldrh	r3, [r4, #12]
 80188fc:	0759      	lsls	r1, r3, #29
 80188fe:	d505      	bpl.n	801890c <__sflush_r+0x44>
 8018900:	6863      	ldr	r3, [r4, #4]
 8018902:	1ad2      	subs	r2, r2, r3
 8018904:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018906:	b10b      	cbz	r3, 801890c <__sflush_r+0x44>
 8018908:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801890a:	1ad2      	subs	r2, r2, r3
 801890c:	2300      	movs	r3, #0
 801890e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018910:	6a21      	ldr	r1, [r4, #32]
 8018912:	4628      	mov	r0, r5
 8018914:	47b0      	blx	r6
 8018916:	1c43      	adds	r3, r0, #1
 8018918:	89a3      	ldrh	r3, [r4, #12]
 801891a:	d106      	bne.n	801892a <__sflush_r+0x62>
 801891c:	6829      	ldr	r1, [r5, #0]
 801891e:	291d      	cmp	r1, #29
 8018920:	d82b      	bhi.n	801897a <__sflush_r+0xb2>
 8018922:	4a2a      	ldr	r2, [pc, #168]	@ (80189cc <__sflush_r+0x104>)
 8018924:	410a      	asrs	r2, r1
 8018926:	07d6      	lsls	r6, r2, #31
 8018928:	d427      	bmi.n	801897a <__sflush_r+0xb2>
 801892a:	2200      	movs	r2, #0
 801892c:	6062      	str	r2, [r4, #4]
 801892e:	04d9      	lsls	r1, r3, #19
 8018930:	6922      	ldr	r2, [r4, #16]
 8018932:	6022      	str	r2, [r4, #0]
 8018934:	d504      	bpl.n	8018940 <__sflush_r+0x78>
 8018936:	1c42      	adds	r2, r0, #1
 8018938:	d101      	bne.n	801893e <__sflush_r+0x76>
 801893a:	682b      	ldr	r3, [r5, #0]
 801893c:	b903      	cbnz	r3, 8018940 <__sflush_r+0x78>
 801893e:	6560      	str	r0, [r4, #84]	@ 0x54
 8018940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018942:	602f      	str	r7, [r5, #0]
 8018944:	b1b9      	cbz	r1, 8018976 <__sflush_r+0xae>
 8018946:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801894a:	4299      	cmp	r1, r3
 801894c:	d002      	beq.n	8018954 <__sflush_r+0x8c>
 801894e:	4628      	mov	r0, r5
 8018950:	f7ff f9f6 	bl	8017d40 <_free_r>
 8018954:	2300      	movs	r3, #0
 8018956:	6363      	str	r3, [r4, #52]	@ 0x34
 8018958:	e00d      	b.n	8018976 <__sflush_r+0xae>
 801895a:	2301      	movs	r3, #1
 801895c:	4628      	mov	r0, r5
 801895e:	47b0      	blx	r6
 8018960:	4602      	mov	r2, r0
 8018962:	1c50      	adds	r0, r2, #1
 8018964:	d1c9      	bne.n	80188fa <__sflush_r+0x32>
 8018966:	682b      	ldr	r3, [r5, #0]
 8018968:	2b00      	cmp	r3, #0
 801896a:	d0c6      	beq.n	80188fa <__sflush_r+0x32>
 801896c:	2b1d      	cmp	r3, #29
 801896e:	d001      	beq.n	8018974 <__sflush_r+0xac>
 8018970:	2b16      	cmp	r3, #22
 8018972:	d11e      	bne.n	80189b2 <__sflush_r+0xea>
 8018974:	602f      	str	r7, [r5, #0]
 8018976:	2000      	movs	r0, #0
 8018978:	e022      	b.n	80189c0 <__sflush_r+0xf8>
 801897a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801897e:	b21b      	sxth	r3, r3
 8018980:	e01b      	b.n	80189ba <__sflush_r+0xf2>
 8018982:	690f      	ldr	r7, [r1, #16]
 8018984:	2f00      	cmp	r7, #0
 8018986:	d0f6      	beq.n	8018976 <__sflush_r+0xae>
 8018988:	0793      	lsls	r3, r2, #30
 801898a:	680e      	ldr	r6, [r1, #0]
 801898c:	bf08      	it	eq
 801898e:	694b      	ldreq	r3, [r1, #20]
 8018990:	600f      	str	r7, [r1, #0]
 8018992:	bf18      	it	ne
 8018994:	2300      	movne	r3, #0
 8018996:	eba6 0807 	sub.w	r8, r6, r7
 801899a:	608b      	str	r3, [r1, #8]
 801899c:	f1b8 0f00 	cmp.w	r8, #0
 80189a0:	dde9      	ble.n	8018976 <__sflush_r+0xae>
 80189a2:	6a21      	ldr	r1, [r4, #32]
 80189a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80189a6:	4643      	mov	r3, r8
 80189a8:	463a      	mov	r2, r7
 80189aa:	4628      	mov	r0, r5
 80189ac:	47b0      	blx	r6
 80189ae:	2800      	cmp	r0, #0
 80189b0:	dc08      	bgt.n	80189c4 <__sflush_r+0xfc>
 80189b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80189b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80189ba:	81a3      	strh	r3, [r4, #12]
 80189bc:	f04f 30ff 	mov.w	r0, #4294967295
 80189c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189c4:	4407      	add	r7, r0
 80189c6:	eba8 0800 	sub.w	r8, r8, r0
 80189ca:	e7e7      	b.n	801899c <__sflush_r+0xd4>
 80189cc:	dfbffffe 	.word	0xdfbffffe

080189d0 <_fflush_r>:
 80189d0:	b538      	push	{r3, r4, r5, lr}
 80189d2:	690b      	ldr	r3, [r1, #16]
 80189d4:	4605      	mov	r5, r0
 80189d6:	460c      	mov	r4, r1
 80189d8:	b913      	cbnz	r3, 80189e0 <_fflush_r+0x10>
 80189da:	2500      	movs	r5, #0
 80189dc:	4628      	mov	r0, r5
 80189de:	bd38      	pop	{r3, r4, r5, pc}
 80189e0:	b118      	cbz	r0, 80189ea <_fflush_r+0x1a>
 80189e2:	6a03      	ldr	r3, [r0, #32]
 80189e4:	b90b      	cbnz	r3, 80189ea <_fflush_r+0x1a>
 80189e6:	f7fe f949 	bl	8016c7c <__sinit>
 80189ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d0f3      	beq.n	80189da <_fflush_r+0xa>
 80189f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80189f4:	07d0      	lsls	r0, r2, #31
 80189f6:	d404      	bmi.n	8018a02 <_fflush_r+0x32>
 80189f8:	0599      	lsls	r1, r3, #22
 80189fa:	d402      	bmi.n	8018a02 <_fflush_r+0x32>
 80189fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80189fe:	f7fe fb40 	bl	8017082 <__retarget_lock_acquire_recursive>
 8018a02:	4628      	mov	r0, r5
 8018a04:	4621      	mov	r1, r4
 8018a06:	f7ff ff5f 	bl	80188c8 <__sflush_r>
 8018a0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018a0c:	07da      	lsls	r2, r3, #31
 8018a0e:	4605      	mov	r5, r0
 8018a10:	d4e4      	bmi.n	80189dc <_fflush_r+0xc>
 8018a12:	89a3      	ldrh	r3, [r4, #12]
 8018a14:	059b      	lsls	r3, r3, #22
 8018a16:	d4e1      	bmi.n	80189dc <_fflush_r+0xc>
 8018a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018a1a:	f7fe fb33 	bl	8017084 <__retarget_lock_release_recursive>
 8018a1e:	e7dd      	b.n	80189dc <_fflush_r+0xc>

08018a20 <__swhatbuf_r>:
 8018a20:	b570      	push	{r4, r5, r6, lr}
 8018a22:	460c      	mov	r4, r1
 8018a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a28:	2900      	cmp	r1, #0
 8018a2a:	b096      	sub	sp, #88	@ 0x58
 8018a2c:	4615      	mov	r5, r2
 8018a2e:	461e      	mov	r6, r3
 8018a30:	da0d      	bge.n	8018a4e <__swhatbuf_r+0x2e>
 8018a32:	89a3      	ldrh	r3, [r4, #12]
 8018a34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018a38:	f04f 0100 	mov.w	r1, #0
 8018a3c:	bf14      	ite	ne
 8018a3e:	2340      	movne	r3, #64	@ 0x40
 8018a40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018a44:	2000      	movs	r0, #0
 8018a46:	6031      	str	r1, [r6, #0]
 8018a48:	602b      	str	r3, [r5, #0]
 8018a4a:	b016      	add	sp, #88	@ 0x58
 8018a4c:	bd70      	pop	{r4, r5, r6, pc}
 8018a4e:	466a      	mov	r2, sp
 8018a50:	f000 f87c 	bl	8018b4c <_fstat_r>
 8018a54:	2800      	cmp	r0, #0
 8018a56:	dbec      	blt.n	8018a32 <__swhatbuf_r+0x12>
 8018a58:	9901      	ldr	r1, [sp, #4]
 8018a5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018a5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018a62:	4259      	negs	r1, r3
 8018a64:	4159      	adcs	r1, r3
 8018a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018a6a:	e7eb      	b.n	8018a44 <__swhatbuf_r+0x24>

08018a6c <__smakebuf_r>:
 8018a6c:	898b      	ldrh	r3, [r1, #12]
 8018a6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018a70:	079d      	lsls	r5, r3, #30
 8018a72:	4606      	mov	r6, r0
 8018a74:	460c      	mov	r4, r1
 8018a76:	d507      	bpl.n	8018a88 <__smakebuf_r+0x1c>
 8018a78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018a7c:	6023      	str	r3, [r4, #0]
 8018a7e:	6123      	str	r3, [r4, #16]
 8018a80:	2301      	movs	r3, #1
 8018a82:	6163      	str	r3, [r4, #20]
 8018a84:	b003      	add	sp, #12
 8018a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a88:	ab01      	add	r3, sp, #4
 8018a8a:	466a      	mov	r2, sp
 8018a8c:	f7ff ffc8 	bl	8018a20 <__swhatbuf_r>
 8018a90:	9f00      	ldr	r7, [sp, #0]
 8018a92:	4605      	mov	r5, r0
 8018a94:	4639      	mov	r1, r7
 8018a96:	4630      	mov	r0, r6
 8018a98:	f7ff f9c6 	bl	8017e28 <_malloc_r>
 8018a9c:	b948      	cbnz	r0, 8018ab2 <__smakebuf_r+0x46>
 8018a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018aa2:	059a      	lsls	r2, r3, #22
 8018aa4:	d4ee      	bmi.n	8018a84 <__smakebuf_r+0x18>
 8018aa6:	f023 0303 	bic.w	r3, r3, #3
 8018aaa:	f043 0302 	orr.w	r3, r3, #2
 8018aae:	81a3      	strh	r3, [r4, #12]
 8018ab0:	e7e2      	b.n	8018a78 <__smakebuf_r+0xc>
 8018ab2:	89a3      	ldrh	r3, [r4, #12]
 8018ab4:	6020      	str	r0, [r4, #0]
 8018ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018aba:	81a3      	strh	r3, [r4, #12]
 8018abc:	9b01      	ldr	r3, [sp, #4]
 8018abe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018ac2:	b15b      	cbz	r3, 8018adc <__smakebuf_r+0x70>
 8018ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018ac8:	4630      	mov	r0, r6
 8018aca:	f000 f851 	bl	8018b70 <_isatty_r>
 8018ace:	b128      	cbz	r0, 8018adc <__smakebuf_r+0x70>
 8018ad0:	89a3      	ldrh	r3, [r4, #12]
 8018ad2:	f023 0303 	bic.w	r3, r3, #3
 8018ad6:	f043 0301 	orr.w	r3, r3, #1
 8018ada:	81a3      	strh	r3, [r4, #12]
 8018adc:	89a3      	ldrh	r3, [r4, #12]
 8018ade:	431d      	orrs	r5, r3
 8018ae0:	81a5      	strh	r5, [r4, #12]
 8018ae2:	e7cf      	b.n	8018a84 <__smakebuf_r+0x18>

08018ae4 <_putc_r>:
 8018ae4:	b570      	push	{r4, r5, r6, lr}
 8018ae6:	460d      	mov	r5, r1
 8018ae8:	4614      	mov	r4, r2
 8018aea:	4606      	mov	r6, r0
 8018aec:	b118      	cbz	r0, 8018af6 <_putc_r+0x12>
 8018aee:	6a03      	ldr	r3, [r0, #32]
 8018af0:	b90b      	cbnz	r3, 8018af6 <_putc_r+0x12>
 8018af2:	f7fe f8c3 	bl	8016c7c <__sinit>
 8018af6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018af8:	07d8      	lsls	r0, r3, #31
 8018afa:	d405      	bmi.n	8018b08 <_putc_r+0x24>
 8018afc:	89a3      	ldrh	r3, [r4, #12]
 8018afe:	0599      	lsls	r1, r3, #22
 8018b00:	d402      	bmi.n	8018b08 <_putc_r+0x24>
 8018b02:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018b04:	f7fe fabd 	bl	8017082 <__retarget_lock_acquire_recursive>
 8018b08:	68a3      	ldr	r3, [r4, #8]
 8018b0a:	3b01      	subs	r3, #1
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	60a3      	str	r3, [r4, #8]
 8018b10:	da05      	bge.n	8018b1e <_putc_r+0x3a>
 8018b12:	69a2      	ldr	r2, [r4, #24]
 8018b14:	4293      	cmp	r3, r2
 8018b16:	db12      	blt.n	8018b3e <_putc_r+0x5a>
 8018b18:	b2eb      	uxtb	r3, r5
 8018b1a:	2b0a      	cmp	r3, #10
 8018b1c:	d00f      	beq.n	8018b3e <_putc_r+0x5a>
 8018b1e:	6823      	ldr	r3, [r4, #0]
 8018b20:	1c5a      	adds	r2, r3, #1
 8018b22:	6022      	str	r2, [r4, #0]
 8018b24:	701d      	strb	r5, [r3, #0]
 8018b26:	b2ed      	uxtb	r5, r5
 8018b28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018b2a:	07da      	lsls	r2, r3, #31
 8018b2c:	d405      	bmi.n	8018b3a <_putc_r+0x56>
 8018b2e:	89a3      	ldrh	r3, [r4, #12]
 8018b30:	059b      	lsls	r3, r3, #22
 8018b32:	d402      	bmi.n	8018b3a <_putc_r+0x56>
 8018b34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018b36:	f7fe faa5 	bl	8017084 <__retarget_lock_release_recursive>
 8018b3a:	4628      	mov	r0, r5
 8018b3c:	bd70      	pop	{r4, r5, r6, pc}
 8018b3e:	4629      	mov	r1, r5
 8018b40:	4622      	mov	r2, r4
 8018b42:	4630      	mov	r0, r6
 8018b44:	f7fe f98b 	bl	8016e5e <__swbuf_r>
 8018b48:	4605      	mov	r5, r0
 8018b4a:	e7ed      	b.n	8018b28 <_putc_r+0x44>

08018b4c <_fstat_r>:
 8018b4c:	b538      	push	{r3, r4, r5, lr}
 8018b4e:	4d07      	ldr	r5, [pc, #28]	@ (8018b6c <_fstat_r+0x20>)
 8018b50:	2300      	movs	r3, #0
 8018b52:	4604      	mov	r4, r0
 8018b54:	4608      	mov	r0, r1
 8018b56:	4611      	mov	r1, r2
 8018b58:	602b      	str	r3, [r5, #0]
 8018b5a:	f7ef ff99 	bl	8008a90 <_fstat>
 8018b5e:	1c43      	adds	r3, r0, #1
 8018b60:	d102      	bne.n	8018b68 <_fstat_r+0x1c>
 8018b62:	682b      	ldr	r3, [r5, #0]
 8018b64:	b103      	cbz	r3, 8018b68 <_fstat_r+0x1c>
 8018b66:	6023      	str	r3, [r4, #0]
 8018b68:	bd38      	pop	{r3, r4, r5, pc}
 8018b6a:	bf00      	nop
 8018b6c:	20002330 	.word	0x20002330

08018b70 <_isatty_r>:
 8018b70:	b538      	push	{r3, r4, r5, lr}
 8018b72:	4d06      	ldr	r5, [pc, #24]	@ (8018b8c <_isatty_r+0x1c>)
 8018b74:	2300      	movs	r3, #0
 8018b76:	4604      	mov	r4, r0
 8018b78:	4608      	mov	r0, r1
 8018b7a:	602b      	str	r3, [r5, #0]
 8018b7c:	f7ef ff98 	bl	8008ab0 <_isatty>
 8018b80:	1c43      	adds	r3, r0, #1
 8018b82:	d102      	bne.n	8018b8a <_isatty_r+0x1a>
 8018b84:	682b      	ldr	r3, [r5, #0]
 8018b86:	b103      	cbz	r3, 8018b8a <_isatty_r+0x1a>
 8018b88:	6023      	str	r3, [r4, #0]
 8018b8a:	bd38      	pop	{r3, r4, r5, pc}
 8018b8c:	20002330 	.word	0x20002330

08018b90 <_sbrk_r>:
 8018b90:	b538      	push	{r3, r4, r5, lr}
 8018b92:	4d06      	ldr	r5, [pc, #24]	@ (8018bac <_sbrk_r+0x1c>)
 8018b94:	2300      	movs	r3, #0
 8018b96:	4604      	mov	r4, r0
 8018b98:	4608      	mov	r0, r1
 8018b9a:	602b      	str	r3, [r5, #0]
 8018b9c:	f7ef ffa0 	bl	8008ae0 <_sbrk>
 8018ba0:	1c43      	adds	r3, r0, #1
 8018ba2:	d102      	bne.n	8018baa <_sbrk_r+0x1a>
 8018ba4:	682b      	ldr	r3, [r5, #0]
 8018ba6:	b103      	cbz	r3, 8018baa <_sbrk_r+0x1a>
 8018ba8:	6023      	str	r3, [r4, #0]
 8018baa:	bd38      	pop	{r3, r4, r5, pc}
 8018bac:	20002330 	.word	0x20002330

08018bb0 <__assert_func>:
 8018bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018bb2:	4614      	mov	r4, r2
 8018bb4:	461a      	mov	r2, r3
 8018bb6:	4b09      	ldr	r3, [pc, #36]	@ (8018bdc <__assert_func+0x2c>)
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	4605      	mov	r5, r0
 8018bbc:	68d8      	ldr	r0, [r3, #12]
 8018bbe:	b954      	cbnz	r4, 8018bd6 <__assert_func+0x26>
 8018bc0:	4b07      	ldr	r3, [pc, #28]	@ (8018be0 <__assert_func+0x30>)
 8018bc2:	461c      	mov	r4, r3
 8018bc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018bc8:	9100      	str	r1, [sp, #0]
 8018bca:	462b      	mov	r3, r5
 8018bcc:	4905      	ldr	r1, [pc, #20]	@ (8018be4 <__assert_func+0x34>)
 8018bce:	f000 f841 	bl	8018c54 <fiprintf>
 8018bd2:	f000 f851 	bl	8018c78 <abort>
 8018bd6:	4b04      	ldr	r3, [pc, #16]	@ (8018be8 <__assert_func+0x38>)
 8018bd8:	e7f4      	b.n	8018bc4 <__assert_func+0x14>
 8018bda:	bf00      	nop
 8018bdc:	20000144 	.word	0x20000144
 8018be0:	0801d046 	.word	0x0801d046
 8018be4:	0801d018 	.word	0x0801d018
 8018be8:	0801d00b 	.word	0x0801d00b

08018bec <_calloc_r>:
 8018bec:	b570      	push	{r4, r5, r6, lr}
 8018bee:	fba1 5402 	umull	r5, r4, r1, r2
 8018bf2:	b93c      	cbnz	r4, 8018c04 <_calloc_r+0x18>
 8018bf4:	4629      	mov	r1, r5
 8018bf6:	f7ff f917 	bl	8017e28 <_malloc_r>
 8018bfa:	4606      	mov	r6, r0
 8018bfc:	b928      	cbnz	r0, 8018c0a <_calloc_r+0x1e>
 8018bfe:	2600      	movs	r6, #0
 8018c00:	4630      	mov	r0, r6
 8018c02:	bd70      	pop	{r4, r5, r6, pc}
 8018c04:	220c      	movs	r2, #12
 8018c06:	6002      	str	r2, [r0, #0]
 8018c08:	e7f9      	b.n	8018bfe <_calloc_r+0x12>
 8018c0a:	462a      	mov	r2, r5
 8018c0c:	4621      	mov	r1, r4
 8018c0e:	f7fe f9bb 	bl	8016f88 <memset>
 8018c12:	e7f5      	b.n	8018c00 <_calloc_r+0x14>

08018c14 <__ascii_mbtowc>:
 8018c14:	b082      	sub	sp, #8
 8018c16:	b901      	cbnz	r1, 8018c1a <__ascii_mbtowc+0x6>
 8018c18:	a901      	add	r1, sp, #4
 8018c1a:	b142      	cbz	r2, 8018c2e <__ascii_mbtowc+0x1a>
 8018c1c:	b14b      	cbz	r3, 8018c32 <__ascii_mbtowc+0x1e>
 8018c1e:	7813      	ldrb	r3, [r2, #0]
 8018c20:	600b      	str	r3, [r1, #0]
 8018c22:	7812      	ldrb	r2, [r2, #0]
 8018c24:	1e10      	subs	r0, r2, #0
 8018c26:	bf18      	it	ne
 8018c28:	2001      	movne	r0, #1
 8018c2a:	b002      	add	sp, #8
 8018c2c:	4770      	bx	lr
 8018c2e:	4610      	mov	r0, r2
 8018c30:	e7fb      	b.n	8018c2a <__ascii_mbtowc+0x16>
 8018c32:	f06f 0001 	mvn.w	r0, #1
 8018c36:	e7f8      	b.n	8018c2a <__ascii_mbtowc+0x16>

08018c38 <__ascii_wctomb>:
 8018c38:	4603      	mov	r3, r0
 8018c3a:	4608      	mov	r0, r1
 8018c3c:	b141      	cbz	r1, 8018c50 <__ascii_wctomb+0x18>
 8018c3e:	2aff      	cmp	r2, #255	@ 0xff
 8018c40:	d904      	bls.n	8018c4c <__ascii_wctomb+0x14>
 8018c42:	228a      	movs	r2, #138	@ 0x8a
 8018c44:	601a      	str	r2, [r3, #0]
 8018c46:	f04f 30ff 	mov.w	r0, #4294967295
 8018c4a:	4770      	bx	lr
 8018c4c:	700a      	strb	r2, [r1, #0]
 8018c4e:	2001      	movs	r0, #1
 8018c50:	4770      	bx	lr
	...

08018c54 <fiprintf>:
 8018c54:	b40e      	push	{r1, r2, r3}
 8018c56:	b503      	push	{r0, r1, lr}
 8018c58:	4601      	mov	r1, r0
 8018c5a:	ab03      	add	r3, sp, #12
 8018c5c:	4805      	ldr	r0, [pc, #20]	@ (8018c74 <fiprintf+0x20>)
 8018c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c62:	6800      	ldr	r0, [r0, #0]
 8018c64:	9301      	str	r3, [sp, #4]
 8018c66:	f7ff fd17 	bl	8018698 <_vfiprintf_r>
 8018c6a:	b002      	add	sp, #8
 8018c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018c70:	b003      	add	sp, #12
 8018c72:	4770      	bx	lr
 8018c74:	20000144 	.word	0x20000144

08018c78 <abort>:
 8018c78:	b508      	push	{r3, lr}
 8018c7a:	2006      	movs	r0, #6
 8018c7c:	f000 f82c 	bl	8018cd8 <raise>
 8018c80:	2001      	movs	r0, #1
 8018c82:	f7ef feb5 	bl	80089f0 <_exit>

08018c86 <_raise_r>:
 8018c86:	291f      	cmp	r1, #31
 8018c88:	b538      	push	{r3, r4, r5, lr}
 8018c8a:	4605      	mov	r5, r0
 8018c8c:	460c      	mov	r4, r1
 8018c8e:	d904      	bls.n	8018c9a <_raise_r+0x14>
 8018c90:	2316      	movs	r3, #22
 8018c92:	6003      	str	r3, [r0, #0]
 8018c94:	f04f 30ff 	mov.w	r0, #4294967295
 8018c98:	bd38      	pop	{r3, r4, r5, pc}
 8018c9a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018c9c:	b112      	cbz	r2, 8018ca4 <_raise_r+0x1e>
 8018c9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018ca2:	b94b      	cbnz	r3, 8018cb8 <_raise_r+0x32>
 8018ca4:	4628      	mov	r0, r5
 8018ca6:	f000 f831 	bl	8018d0c <_getpid_r>
 8018caa:	4622      	mov	r2, r4
 8018cac:	4601      	mov	r1, r0
 8018cae:	4628      	mov	r0, r5
 8018cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018cb4:	f000 b818 	b.w	8018ce8 <_kill_r>
 8018cb8:	2b01      	cmp	r3, #1
 8018cba:	d00a      	beq.n	8018cd2 <_raise_r+0x4c>
 8018cbc:	1c59      	adds	r1, r3, #1
 8018cbe:	d103      	bne.n	8018cc8 <_raise_r+0x42>
 8018cc0:	2316      	movs	r3, #22
 8018cc2:	6003      	str	r3, [r0, #0]
 8018cc4:	2001      	movs	r0, #1
 8018cc6:	e7e7      	b.n	8018c98 <_raise_r+0x12>
 8018cc8:	2100      	movs	r1, #0
 8018cca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018cce:	4620      	mov	r0, r4
 8018cd0:	4798      	blx	r3
 8018cd2:	2000      	movs	r0, #0
 8018cd4:	e7e0      	b.n	8018c98 <_raise_r+0x12>
	...

08018cd8 <raise>:
 8018cd8:	4b02      	ldr	r3, [pc, #8]	@ (8018ce4 <raise+0xc>)
 8018cda:	4601      	mov	r1, r0
 8018cdc:	6818      	ldr	r0, [r3, #0]
 8018cde:	f7ff bfd2 	b.w	8018c86 <_raise_r>
 8018ce2:	bf00      	nop
 8018ce4:	20000144 	.word	0x20000144

08018ce8 <_kill_r>:
 8018ce8:	b538      	push	{r3, r4, r5, lr}
 8018cea:	4d07      	ldr	r5, [pc, #28]	@ (8018d08 <_kill_r+0x20>)
 8018cec:	2300      	movs	r3, #0
 8018cee:	4604      	mov	r4, r0
 8018cf0:	4608      	mov	r0, r1
 8018cf2:	4611      	mov	r1, r2
 8018cf4:	602b      	str	r3, [r5, #0]
 8018cf6:	f7ef fe6b 	bl	80089d0 <_kill>
 8018cfa:	1c43      	adds	r3, r0, #1
 8018cfc:	d102      	bne.n	8018d04 <_kill_r+0x1c>
 8018cfe:	682b      	ldr	r3, [r5, #0]
 8018d00:	b103      	cbz	r3, 8018d04 <_kill_r+0x1c>
 8018d02:	6023      	str	r3, [r4, #0]
 8018d04:	bd38      	pop	{r3, r4, r5, pc}
 8018d06:	bf00      	nop
 8018d08:	20002330 	.word	0x20002330

08018d0c <_getpid_r>:
 8018d0c:	f7ef be58 	b.w	80089c0 <_getpid>

08018d10 <pow>:
 8018d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d12:	ed2d 8b02 	vpush	{d8}
 8018d16:	eeb0 8a40 	vmov.f32	s16, s0
 8018d1a:	eef0 8a60 	vmov.f32	s17, s1
 8018d1e:	ec55 4b11 	vmov	r4, r5, d1
 8018d22:	f000 f871 	bl	8018e08 <__ieee754_pow>
 8018d26:	4622      	mov	r2, r4
 8018d28:	462b      	mov	r3, r5
 8018d2a:	4620      	mov	r0, r4
 8018d2c:	4629      	mov	r1, r5
 8018d2e:	ec57 6b10 	vmov	r6, r7, d0
 8018d32:	f7e7 fed3 	bl	8000adc <__aeabi_dcmpun>
 8018d36:	2800      	cmp	r0, #0
 8018d38:	d13b      	bne.n	8018db2 <pow+0xa2>
 8018d3a:	ec51 0b18 	vmov	r0, r1, d8
 8018d3e:	2200      	movs	r2, #0
 8018d40:	2300      	movs	r3, #0
 8018d42:	f7e7 fe99 	bl	8000a78 <__aeabi_dcmpeq>
 8018d46:	b1b8      	cbz	r0, 8018d78 <pow+0x68>
 8018d48:	2200      	movs	r2, #0
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	4620      	mov	r0, r4
 8018d4e:	4629      	mov	r1, r5
 8018d50:	f7e7 fe92 	bl	8000a78 <__aeabi_dcmpeq>
 8018d54:	2800      	cmp	r0, #0
 8018d56:	d146      	bne.n	8018de6 <pow+0xd6>
 8018d58:	ec45 4b10 	vmov	d0, r4, r5
 8018d5c:	f000 f848 	bl	8018df0 <finite>
 8018d60:	b338      	cbz	r0, 8018db2 <pow+0xa2>
 8018d62:	2200      	movs	r2, #0
 8018d64:	2300      	movs	r3, #0
 8018d66:	4620      	mov	r0, r4
 8018d68:	4629      	mov	r1, r5
 8018d6a:	f7e7 fe8f 	bl	8000a8c <__aeabi_dcmplt>
 8018d6e:	b300      	cbz	r0, 8018db2 <pow+0xa2>
 8018d70:	f7fe f95c 	bl	801702c <__errno>
 8018d74:	2322      	movs	r3, #34	@ 0x22
 8018d76:	e01b      	b.n	8018db0 <pow+0xa0>
 8018d78:	ec47 6b10 	vmov	d0, r6, r7
 8018d7c:	f000 f838 	bl	8018df0 <finite>
 8018d80:	b9e0      	cbnz	r0, 8018dbc <pow+0xac>
 8018d82:	eeb0 0a48 	vmov.f32	s0, s16
 8018d86:	eef0 0a68 	vmov.f32	s1, s17
 8018d8a:	f000 f831 	bl	8018df0 <finite>
 8018d8e:	b1a8      	cbz	r0, 8018dbc <pow+0xac>
 8018d90:	ec45 4b10 	vmov	d0, r4, r5
 8018d94:	f000 f82c 	bl	8018df0 <finite>
 8018d98:	b180      	cbz	r0, 8018dbc <pow+0xac>
 8018d9a:	4632      	mov	r2, r6
 8018d9c:	463b      	mov	r3, r7
 8018d9e:	4630      	mov	r0, r6
 8018da0:	4639      	mov	r1, r7
 8018da2:	f7e7 fe9b 	bl	8000adc <__aeabi_dcmpun>
 8018da6:	2800      	cmp	r0, #0
 8018da8:	d0e2      	beq.n	8018d70 <pow+0x60>
 8018daa:	f7fe f93f 	bl	801702c <__errno>
 8018dae:	2321      	movs	r3, #33	@ 0x21
 8018db0:	6003      	str	r3, [r0, #0]
 8018db2:	ecbd 8b02 	vpop	{d8}
 8018db6:	ec47 6b10 	vmov	d0, r6, r7
 8018dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018dbc:	2200      	movs	r2, #0
 8018dbe:	2300      	movs	r3, #0
 8018dc0:	4630      	mov	r0, r6
 8018dc2:	4639      	mov	r1, r7
 8018dc4:	f7e7 fe58 	bl	8000a78 <__aeabi_dcmpeq>
 8018dc8:	2800      	cmp	r0, #0
 8018dca:	d0f2      	beq.n	8018db2 <pow+0xa2>
 8018dcc:	eeb0 0a48 	vmov.f32	s0, s16
 8018dd0:	eef0 0a68 	vmov.f32	s1, s17
 8018dd4:	f000 f80c 	bl	8018df0 <finite>
 8018dd8:	2800      	cmp	r0, #0
 8018dda:	d0ea      	beq.n	8018db2 <pow+0xa2>
 8018ddc:	ec45 4b10 	vmov	d0, r4, r5
 8018de0:	f000 f806 	bl	8018df0 <finite>
 8018de4:	e7c3      	b.n	8018d6e <pow+0x5e>
 8018de6:	4f01      	ldr	r7, [pc, #4]	@ (8018dec <pow+0xdc>)
 8018de8:	2600      	movs	r6, #0
 8018dea:	e7e2      	b.n	8018db2 <pow+0xa2>
 8018dec:	3ff00000 	.word	0x3ff00000

08018df0 <finite>:
 8018df0:	b082      	sub	sp, #8
 8018df2:	ed8d 0b00 	vstr	d0, [sp]
 8018df6:	9801      	ldr	r0, [sp, #4]
 8018df8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8018dfc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8018e00:	0fc0      	lsrs	r0, r0, #31
 8018e02:	b002      	add	sp, #8
 8018e04:	4770      	bx	lr
	...

08018e08 <__ieee754_pow>:
 8018e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e0c:	b091      	sub	sp, #68	@ 0x44
 8018e0e:	ed8d 1b00 	vstr	d1, [sp]
 8018e12:	e9dd 1900 	ldrd	r1, r9, [sp]
 8018e16:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8018e1a:	ea5a 0001 	orrs.w	r0, sl, r1
 8018e1e:	ec57 6b10 	vmov	r6, r7, d0
 8018e22:	d113      	bne.n	8018e4c <__ieee754_pow+0x44>
 8018e24:	19b3      	adds	r3, r6, r6
 8018e26:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8018e2a:	4152      	adcs	r2, r2
 8018e2c:	4298      	cmp	r0, r3
 8018e2e:	4b98      	ldr	r3, [pc, #608]	@ (8019090 <__ieee754_pow+0x288>)
 8018e30:	4193      	sbcs	r3, r2
 8018e32:	f080 84ea 	bcs.w	801980a <__ieee754_pow+0xa02>
 8018e36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018e3a:	4630      	mov	r0, r6
 8018e3c:	4639      	mov	r1, r7
 8018e3e:	f7e7 f9fd 	bl	800023c <__adddf3>
 8018e42:	ec41 0b10 	vmov	d0, r0, r1
 8018e46:	b011      	add	sp, #68	@ 0x44
 8018e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e4c:	4a91      	ldr	r2, [pc, #580]	@ (8019094 <__ieee754_pow+0x28c>)
 8018e4e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8018e52:	4590      	cmp	r8, r2
 8018e54:	463d      	mov	r5, r7
 8018e56:	4633      	mov	r3, r6
 8018e58:	d806      	bhi.n	8018e68 <__ieee754_pow+0x60>
 8018e5a:	d101      	bne.n	8018e60 <__ieee754_pow+0x58>
 8018e5c:	2e00      	cmp	r6, #0
 8018e5e:	d1ea      	bne.n	8018e36 <__ieee754_pow+0x2e>
 8018e60:	4592      	cmp	sl, r2
 8018e62:	d801      	bhi.n	8018e68 <__ieee754_pow+0x60>
 8018e64:	d10e      	bne.n	8018e84 <__ieee754_pow+0x7c>
 8018e66:	b169      	cbz	r1, 8018e84 <__ieee754_pow+0x7c>
 8018e68:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8018e6c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8018e70:	431d      	orrs	r5, r3
 8018e72:	d1e0      	bne.n	8018e36 <__ieee754_pow+0x2e>
 8018e74:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018e78:	18db      	adds	r3, r3, r3
 8018e7a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8018e7e:	4152      	adcs	r2, r2
 8018e80:	429d      	cmp	r5, r3
 8018e82:	e7d4      	b.n	8018e2e <__ieee754_pow+0x26>
 8018e84:	2d00      	cmp	r5, #0
 8018e86:	46c3      	mov	fp, r8
 8018e88:	da3a      	bge.n	8018f00 <__ieee754_pow+0xf8>
 8018e8a:	4a83      	ldr	r2, [pc, #524]	@ (8019098 <__ieee754_pow+0x290>)
 8018e8c:	4592      	cmp	sl, r2
 8018e8e:	d84d      	bhi.n	8018f2c <__ieee754_pow+0x124>
 8018e90:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8018e94:	4592      	cmp	sl, r2
 8018e96:	f240 84c7 	bls.w	8019828 <__ieee754_pow+0xa20>
 8018e9a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8018e9e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8018ea2:	2a14      	cmp	r2, #20
 8018ea4:	dd0f      	ble.n	8018ec6 <__ieee754_pow+0xbe>
 8018ea6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8018eaa:	fa21 f402 	lsr.w	r4, r1, r2
 8018eae:	fa04 f202 	lsl.w	r2, r4, r2
 8018eb2:	428a      	cmp	r2, r1
 8018eb4:	f040 84b8 	bne.w	8019828 <__ieee754_pow+0xa20>
 8018eb8:	f004 0401 	and.w	r4, r4, #1
 8018ebc:	f1c4 0402 	rsb	r4, r4, #2
 8018ec0:	2900      	cmp	r1, #0
 8018ec2:	d158      	bne.n	8018f76 <__ieee754_pow+0x16e>
 8018ec4:	e00e      	b.n	8018ee4 <__ieee754_pow+0xdc>
 8018ec6:	2900      	cmp	r1, #0
 8018ec8:	d154      	bne.n	8018f74 <__ieee754_pow+0x16c>
 8018eca:	f1c2 0214 	rsb	r2, r2, #20
 8018ece:	fa4a f402 	asr.w	r4, sl, r2
 8018ed2:	fa04 f202 	lsl.w	r2, r4, r2
 8018ed6:	4552      	cmp	r2, sl
 8018ed8:	f040 84a3 	bne.w	8019822 <__ieee754_pow+0xa1a>
 8018edc:	f004 0401 	and.w	r4, r4, #1
 8018ee0:	f1c4 0402 	rsb	r4, r4, #2
 8018ee4:	4a6d      	ldr	r2, [pc, #436]	@ (801909c <__ieee754_pow+0x294>)
 8018ee6:	4592      	cmp	sl, r2
 8018ee8:	d12e      	bne.n	8018f48 <__ieee754_pow+0x140>
 8018eea:	f1b9 0f00 	cmp.w	r9, #0
 8018eee:	f280 8494 	bge.w	801981a <__ieee754_pow+0xa12>
 8018ef2:	496a      	ldr	r1, [pc, #424]	@ (801909c <__ieee754_pow+0x294>)
 8018ef4:	4632      	mov	r2, r6
 8018ef6:	463b      	mov	r3, r7
 8018ef8:	2000      	movs	r0, #0
 8018efa:	f7e7 fc7f 	bl	80007fc <__aeabi_ddiv>
 8018efe:	e7a0      	b.n	8018e42 <__ieee754_pow+0x3a>
 8018f00:	2400      	movs	r4, #0
 8018f02:	bbc1      	cbnz	r1, 8018f76 <__ieee754_pow+0x16e>
 8018f04:	4a63      	ldr	r2, [pc, #396]	@ (8019094 <__ieee754_pow+0x28c>)
 8018f06:	4592      	cmp	sl, r2
 8018f08:	d1ec      	bne.n	8018ee4 <__ieee754_pow+0xdc>
 8018f0a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8018f0e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8018f12:	431a      	orrs	r2, r3
 8018f14:	f000 8479 	beq.w	801980a <__ieee754_pow+0xa02>
 8018f18:	4b61      	ldr	r3, [pc, #388]	@ (80190a0 <__ieee754_pow+0x298>)
 8018f1a:	4598      	cmp	r8, r3
 8018f1c:	d908      	bls.n	8018f30 <__ieee754_pow+0x128>
 8018f1e:	f1b9 0f00 	cmp.w	r9, #0
 8018f22:	f2c0 8476 	blt.w	8019812 <__ieee754_pow+0xa0a>
 8018f26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018f2a:	e78a      	b.n	8018e42 <__ieee754_pow+0x3a>
 8018f2c:	2402      	movs	r4, #2
 8018f2e:	e7e8      	b.n	8018f02 <__ieee754_pow+0xfa>
 8018f30:	f1b9 0f00 	cmp.w	r9, #0
 8018f34:	f04f 0000 	mov.w	r0, #0
 8018f38:	f04f 0100 	mov.w	r1, #0
 8018f3c:	da81      	bge.n	8018e42 <__ieee754_pow+0x3a>
 8018f3e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8018f42:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8018f46:	e77c      	b.n	8018e42 <__ieee754_pow+0x3a>
 8018f48:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8018f4c:	d106      	bne.n	8018f5c <__ieee754_pow+0x154>
 8018f4e:	4632      	mov	r2, r6
 8018f50:	463b      	mov	r3, r7
 8018f52:	4630      	mov	r0, r6
 8018f54:	4639      	mov	r1, r7
 8018f56:	f7e7 fb27 	bl	80005a8 <__aeabi_dmul>
 8018f5a:	e772      	b.n	8018e42 <__ieee754_pow+0x3a>
 8018f5c:	4a51      	ldr	r2, [pc, #324]	@ (80190a4 <__ieee754_pow+0x29c>)
 8018f5e:	4591      	cmp	r9, r2
 8018f60:	d109      	bne.n	8018f76 <__ieee754_pow+0x16e>
 8018f62:	2d00      	cmp	r5, #0
 8018f64:	db07      	blt.n	8018f76 <__ieee754_pow+0x16e>
 8018f66:	ec47 6b10 	vmov	d0, r6, r7
 8018f6a:	b011      	add	sp, #68	@ 0x44
 8018f6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f70:	f000 bd52 	b.w	8019a18 <__ieee754_sqrt>
 8018f74:	2400      	movs	r4, #0
 8018f76:	ec47 6b10 	vmov	d0, r6, r7
 8018f7a:	9302      	str	r3, [sp, #8]
 8018f7c:	f000 fc88 	bl	8019890 <fabs>
 8018f80:	9b02      	ldr	r3, [sp, #8]
 8018f82:	ec51 0b10 	vmov	r0, r1, d0
 8018f86:	bb53      	cbnz	r3, 8018fde <__ieee754_pow+0x1d6>
 8018f88:	4b44      	ldr	r3, [pc, #272]	@ (801909c <__ieee754_pow+0x294>)
 8018f8a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8018f8e:	429a      	cmp	r2, r3
 8018f90:	d002      	beq.n	8018f98 <__ieee754_pow+0x190>
 8018f92:	f1b8 0f00 	cmp.w	r8, #0
 8018f96:	d122      	bne.n	8018fde <__ieee754_pow+0x1d6>
 8018f98:	f1b9 0f00 	cmp.w	r9, #0
 8018f9c:	da05      	bge.n	8018faa <__ieee754_pow+0x1a2>
 8018f9e:	4602      	mov	r2, r0
 8018fa0:	460b      	mov	r3, r1
 8018fa2:	2000      	movs	r0, #0
 8018fa4:	493d      	ldr	r1, [pc, #244]	@ (801909c <__ieee754_pow+0x294>)
 8018fa6:	f7e7 fc29 	bl	80007fc <__aeabi_ddiv>
 8018faa:	2d00      	cmp	r5, #0
 8018fac:	f6bf af49 	bge.w	8018e42 <__ieee754_pow+0x3a>
 8018fb0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8018fb4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8018fb8:	ea58 0804 	orrs.w	r8, r8, r4
 8018fbc:	d108      	bne.n	8018fd0 <__ieee754_pow+0x1c8>
 8018fbe:	4602      	mov	r2, r0
 8018fc0:	460b      	mov	r3, r1
 8018fc2:	4610      	mov	r0, r2
 8018fc4:	4619      	mov	r1, r3
 8018fc6:	f7e7 f937 	bl	8000238 <__aeabi_dsub>
 8018fca:	4602      	mov	r2, r0
 8018fcc:	460b      	mov	r3, r1
 8018fce:	e794      	b.n	8018efa <__ieee754_pow+0xf2>
 8018fd0:	2c01      	cmp	r4, #1
 8018fd2:	f47f af36 	bne.w	8018e42 <__ieee754_pow+0x3a>
 8018fd6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018fda:	4619      	mov	r1, r3
 8018fdc:	e731      	b.n	8018e42 <__ieee754_pow+0x3a>
 8018fde:	0feb      	lsrs	r3, r5, #31
 8018fe0:	3b01      	subs	r3, #1
 8018fe2:	ea53 0204 	orrs.w	r2, r3, r4
 8018fe6:	d102      	bne.n	8018fee <__ieee754_pow+0x1e6>
 8018fe8:	4632      	mov	r2, r6
 8018fea:	463b      	mov	r3, r7
 8018fec:	e7e9      	b.n	8018fc2 <__ieee754_pow+0x1ba>
 8018fee:	3c01      	subs	r4, #1
 8018ff0:	431c      	orrs	r4, r3
 8018ff2:	d016      	beq.n	8019022 <__ieee754_pow+0x21a>
 8018ff4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8019080 <__ieee754_pow+0x278>
 8018ff8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8018ffc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019000:	f240 8112 	bls.w	8019228 <__ieee754_pow+0x420>
 8019004:	4b28      	ldr	r3, [pc, #160]	@ (80190a8 <__ieee754_pow+0x2a0>)
 8019006:	459a      	cmp	sl, r3
 8019008:	4b25      	ldr	r3, [pc, #148]	@ (80190a0 <__ieee754_pow+0x298>)
 801900a:	d916      	bls.n	801903a <__ieee754_pow+0x232>
 801900c:	4598      	cmp	r8, r3
 801900e:	d80b      	bhi.n	8019028 <__ieee754_pow+0x220>
 8019010:	f1b9 0f00 	cmp.w	r9, #0
 8019014:	da0b      	bge.n	801902e <__ieee754_pow+0x226>
 8019016:	2000      	movs	r0, #0
 8019018:	b011      	add	sp, #68	@ 0x44
 801901a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801901e:	f000 bcf3 	b.w	8019a08 <__math_oflow>
 8019022:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8019088 <__ieee754_pow+0x280>
 8019026:	e7e7      	b.n	8018ff8 <__ieee754_pow+0x1f0>
 8019028:	f1b9 0f00 	cmp.w	r9, #0
 801902c:	dcf3      	bgt.n	8019016 <__ieee754_pow+0x20e>
 801902e:	2000      	movs	r0, #0
 8019030:	b011      	add	sp, #68	@ 0x44
 8019032:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019036:	f000 bcdf 	b.w	80199f8 <__math_uflow>
 801903a:	4598      	cmp	r8, r3
 801903c:	d20c      	bcs.n	8019058 <__ieee754_pow+0x250>
 801903e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019042:	2200      	movs	r2, #0
 8019044:	2300      	movs	r3, #0
 8019046:	f7e7 fd21 	bl	8000a8c <__aeabi_dcmplt>
 801904a:	3800      	subs	r0, #0
 801904c:	bf18      	it	ne
 801904e:	2001      	movne	r0, #1
 8019050:	f1b9 0f00 	cmp.w	r9, #0
 8019054:	daec      	bge.n	8019030 <__ieee754_pow+0x228>
 8019056:	e7df      	b.n	8019018 <__ieee754_pow+0x210>
 8019058:	4b10      	ldr	r3, [pc, #64]	@ (801909c <__ieee754_pow+0x294>)
 801905a:	4598      	cmp	r8, r3
 801905c:	f04f 0200 	mov.w	r2, #0
 8019060:	d924      	bls.n	80190ac <__ieee754_pow+0x2a4>
 8019062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019066:	2300      	movs	r3, #0
 8019068:	f7e7 fd10 	bl	8000a8c <__aeabi_dcmplt>
 801906c:	3800      	subs	r0, #0
 801906e:	bf18      	it	ne
 8019070:	2001      	movne	r0, #1
 8019072:	f1b9 0f00 	cmp.w	r9, #0
 8019076:	dccf      	bgt.n	8019018 <__ieee754_pow+0x210>
 8019078:	e7da      	b.n	8019030 <__ieee754_pow+0x228>
 801907a:	bf00      	nop
 801907c:	f3af 8000 	nop.w
 8019080:	00000000 	.word	0x00000000
 8019084:	3ff00000 	.word	0x3ff00000
 8019088:	00000000 	.word	0x00000000
 801908c:	bff00000 	.word	0xbff00000
 8019090:	fff00000 	.word	0xfff00000
 8019094:	7ff00000 	.word	0x7ff00000
 8019098:	433fffff 	.word	0x433fffff
 801909c:	3ff00000 	.word	0x3ff00000
 80190a0:	3fefffff 	.word	0x3fefffff
 80190a4:	3fe00000 	.word	0x3fe00000
 80190a8:	43f00000 	.word	0x43f00000
 80190ac:	4b5a      	ldr	r3, [pc, #360]	@ (8019218 <__ieee754_pow+0x410>)
 80190ae:	f7e7 f8c3 	bl	8000238 <__aeabi_dsub>
 80190b2:	a351      	add	r3, pc, #324	@ (adr r3, 80191f8 <__ieee754_pow+0x3f0>)
 80190b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190b8:	4604      	mov	r4, r0
 80190ba:	460d      	mov	r5, r1
 80190bc:	f7e7 fa74 	bl	80005a8 <__aeabi_dmul>
 80190c0:	a34f      	add	r3, pc, #316	@ (adr r3, 8019200 <__ieee754_pow+0x3f8>)
 80190c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190c6:	4606      	mov	r6, r0
 80190c8:	460f      	mov	r7, r1
 80190ca:	4620      	mov	r0, r4
 80190cc:	4629      	mov	r1, r5
 80190ce:	f7e7 fa6b 	bl	80005a8 <__aeabi_dmul>
 80190d2:	4b52      	ldr	r3, [pc, #328]	@ (801921c <__ieee754_pow+0x414>)
 80190d4:	4682      	mov	sl, r0
 80190d6:	468b      	mov	fp, r1
 80190d8:	2200      	movs	r2, #0
 80190da:	4620      	mov	r0, r4
 80190dc:	4629      	mov	r1, r5
 80190de:	f7e7 fa63 	bl	80005a8 <__aeabi_dmul>
 80190e2:	4602      	mov	r2, r0
 80190e4:	460b      	mov	r3, r1
 80190e6:	a148      	add	r1, pc, #288	@ (adr r1, 8019208 <__ieee754_pow+0x400>)
 80190e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80190ec:	f7e7 f8a4 	bl	8000238 <__aeabi_dsub>
 80190f0:	4622      	mov	r2, r4
 80190f2:	462b      	mov	r3, r5
 80190f4:	f7e7 fa58 	bl	80005a8 <__aeabi_dmul>
 80190f8:	4602      	mov	r2, r0
 80190fa:	460b      	mov	r3, r1
 80190fc:	2000      	movs	r0, #0
 80190fe:	4948      	ldr	r1, [pc, #288]	@ (8019220 <__ieee754_pow+0x418>)
 8019100:	f7e7 f89a 	bl	8000238 <__aeabi_dsub>
 8019104:	4622      	mov	r2, r4
 8019106:	4680      	mov	r8, r0
 8019108:	4689      	mov	r9, r1
 801910a:	462b      	mov	r3, r5
 801910c:	4620      	mov	r0, r4
 801910e:	4629      	mov	r1, r5
 8019110:	f7e7 fa4a 	bl	80005a8 <__aeabi_dmul>
 8019114:	4602      	mov	r2, r0
 8019116:	460b      	mov	r3, r1
 8019118:	4640      	mov	r0, r8
 801911a:	4649      	mov	r1, r9
 801911c:	f7e7 fa44 	bl	80005a8 <__aeabi_dmul>
 8019120:	a33b      	add	r3, pc, #236	@ (adr r3, 8019210 <__ieee754_pow+0x408>)
 8019122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019126:	f7e7 fa3f 	bl	80005a8 <__aeabi_dmul>
 801912a:	4602      	mov	r2, r0
 801912c:	460b      	mov	r3, r1
 801912e:	4650      	mov	r0, sl
 8019130:	4659      	mov	r1, fp
 8019132:	f7e7 f881 	bl	8000238 <__aeabi_dsub>
 8019136:	4602      	mov	r2, r0
 8019138:	460b      	mov	r3, r1
 801913a:	4680      	mov	r8, r0
 801913c:	4689      	mov	r9, r1
 801913e:	4630      	mov	r0, r6
 8019140:	4639      	mov	r1, r7
 8019142:	f7e7 f87b 	bl	800023c <__adddf3>
 8019146:	2400      	movs	r4, #0
 8019148:	4632      	mov	r2, r6
 801914a:	463b      	mov	r3, r7
 801914c:	4620      	mov	r0, r4
 801914e:	460d      	mov	r5, r1
 8019150:	f7e7 f872 	bl	8000238 <__aeabi_dsub>
 8019154:	4602      	mov	r2, r0
 8019156:	460b      	mov	r3, r1
 8019158:	4640      	mov	r0, r8
 801915a:	4649      	mov	r1, r9
 801915c:	f7e7 f86c 	bl	8000238 <__aeabi_dsub>
 8019160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019164:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019168:	2300      	movs	r3, #0
 801916a:	9304      	str	r3, [sp, #16]
 801916c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8019170:	4606      	mov	r6, r0
 8019172:	460f      	mov	r7, r1
 8019174:	4652      	mov	r2, sl
 8019176:	465b      	mov	r3, fp
 8019178:	e9dd 0100 	ldrd	r0, r1, [sp]
 801917c:	f7e7 f85c 	bl	8000238 <__aeabi_dsub>
 8019180:	4622      	mov	r2, r4
 8019182:	462b      	mov	r3, r5
 8019184:	f7e7 fa10 	bl	80005a8 <__aeabi_dmul>
 8019188:	e9dd 2300 	ldrd	r2, r3, [sp]
 801918c:	4680      	mov	r8, r0
 801918e:	4689      	mov	r9, r1
 8019190:	4630      	mov	r0, r6
 8019192:	4639      	mov	r1, r7
 8019194:	f7e7 fa08 	bl	80005a8 <__aeabi_dmul>
 8019198:	4602      	mov	r2, r0
 801919a:	460b      	mov	r3, r1
 801919c:	4640      	mov	r0, r8
 801919e:	4649      	mov	r1, r9
 80191a0:	f7e7 f84c 	bl	800023c <__adddf3>
 80191a4:	4652      	mov	r2, sl
 80191a6:	465b      	mov	r3, fp
 80191a8:	4606      	mov	r6, r0
 80191aa:	460f      	mov	r7, r1
 80191ac:	4620      	mov	r0, r4
 80191ae:	4629      	mov	r1, r5
 80191b0:	f7e7 f9fa 	bl	80005a8 <__aeabi_dmul>
 80191b4:	460b      	mov	r3, r1
 80191b6:	4602      	mov	r2, r0
 80191b8:	4680      	mov	r8, r0
 80191ba:	4689      	mov	r9, r1
 80191bc:	4630      	mov	r0, r6
 80191be:	4639      	mov	r1, r7
 80191c0:	f7e7 f83c 	bl	800023c <__adddf3>
 80191c4:	4b17      	ldr	r3, [pc, #92]	@ (8019224 <__ieee754_pow+0x41c>)
 80191c6:	4299      	cmp	r1, r3
 80191c8:	4604      	mov	r4, r0
 80191ca:	460d      	mov	r5, r1
 80191cc:	468a      	mov	sl, r1
 80191ce:	468b      	mov	fp, r1
 80191d0:	f340 82ef 	ble.w	80197b2 <__ieee754_pow+0x9aa>
 80191d4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80191d8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80191dc:	4303      	orrs	r3, r0
 80191de:	f000 81e8 	beq.w	80195b2 <__ieee754_pow+0x7aa>
 80191e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80191e6:	2200      	movs	r2, #0
 80191e8:	2300      	movs	r3, #0
 80191ea:	f7e7 fc4f 	bl	8000a8c <__aeabi_dcmplt>
 80191ee:	3800      	subs	r0, #0
 80191f0:	bf18      	it	ne
 80191f2:	2001      	movne	r0, #1
 80191f4:	e710      	b.n	8019018 <__ieee754_pow+0x210>
 80191f6:	bf00      	nop
 80191f8:	60000000 	.word	0x60000000
 80191fc:	3ff71547 	.word	0x3ff71547
 8019200:	f85ddf44 	.word	0xf85ddf44
 8019204:	3e54ae0b 	.word	0x3e54ae0b
 8019208:	55555555 	.word	0x55555555
 801920c:	3fd55555 	.word	0x3fd55555
 8019210:	652b82fe 	.word	0x652b82fe
 8019214:	3ff71547 	.word	0x3ff71547
 8019218:	3ff00000 	.word	0x3ff00000
 801921c:	3fd00000 	.word	0x3fd00000
 8019220:	3fe00000 	.word	0x3fe00000
 8019224:	408fffff 	.word	0x408fffff
 8019228:	4bd5      	ldr	r3, [pc, #852]	@ (8019580 <__ieee754_pow+0x778>)
 801922a:	402b      	ands	r3, r5
 801922c:	2200      	movs	r2, #0
 801922e:	b92b      	cbnz	r3, 801923c <__ieee754_pow+0x434>
 8019230:	4bd4      	ldr	r3, [pc, #848]	@ (8019584 <__ieee754_pow+0x77c>)
 8019232:	f7e7 f9b9 	bl	80005a8 <__aeabi_dmul>
 8019236:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801923a:	468b      	mov	fp, r1
 801923c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8019240:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8019244:	4413      	add	r3, r2
 8019246:	930a      	str	r3, [sp, #40]	@ 0x28
 8019248:	4bcf      	ldr	r3, [pc, #828]	@ (8019588 <__ieee754_pow+0x780>)
 801924a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801924e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8019252:	459b      	cmp	fp, r3
 8019254:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8019258:	dd08      	ble.n	801926c <__ieee754_pow+0x464>
 801925a:	4bcc      	ldr	r3, [pc, #816]	@ (801958c <__ieee754_pow+0x784>)
 801925c:	459b      	cmp	fp, r3
 801925e:	f340 81a5 	ble.w	80195ac <__ieee754_pow+0x7a4>
 8019262:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019264:	3301      	adds	r3, #1
 8019266:	930a      	str	r3, [sp, #40]	@ 0x28
 8019268:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801926c:	f04f 0a00 	mov.w	sl, #0
 8019270:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8019274:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019276:	4bc6      	ldr	r3, [pc, #792]	@ (8019590 <__ieee754_pow+0x788>)
 8019278:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801927c:	ed93 7b00 	vldr	d7, [r3]
 8019280:	4629      	mov	r1, r5
 8019282:	ec53 2b17 	vmov	r2, r3, d7
 8019286:	ed8d 7b06 	vstr	d7, [sp, #24]
 801928a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801928e:	f7e6 ffd3 	bl	8000238 <__aeabi_dsub>
 8019292:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019296:	4606      	mov	r6, r0
 8019298:	460f      	mov	r7, r1
 801929a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801929e:	f7e6 ffcd 	bl	800023c <__adddf3>
 80192a2:	4602      	mov	r2, r0
 80192a4:	460b      	mov	r3, r1
 80192a6:	2000      	movs	r0, #0
 80192a8:	49ba      	ldr	r1, [pc, #744]	@ (8019594 <__ieee754_pow+0x78c>)
 80192aa:	f7e7 faa7 	bl	80007fc <__aeabi_ddiv>
 80192ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80192b2:	4602      	mov	r2, r0
 80192b4:	460b      	mov	r3, r1
 80192b6:	4630      	mov	r0, r6
 80192b8:	4639      	mov	r1, r7
 80192ba:	f7e7 f975 	bl	80005a8 <__aeabi_dmul>
 80192be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80192c2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80192c6:	106d      	asrs	r5, r5, #1
 80192c8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80192cc:	f04f 0b00 	mov.w	fp, #0
 80192d0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80192d4:	4661      	mov	r1, ip
 80192d6:	2200      	movs	r2, #0
 80192d8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80192dc:	4658      	mov	r0, fp
 80192de:	46e1      	mov	r9, ip
 80192e0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80192e4:	4614      	mov	r4, r2
 80192e6:	461d      	mov	r5, r3
 80192e8:	f7e7 f95e 	bl	80005a8 <__aeabi_dmul>
 80192ec:	4602      	mov	r2, r0
 80192ee:	460b      	mov	r3, r1
 80192f0:	4630      	mov	r0, r6
 80192f2:	4639      	mov	r1, r7
 80192f4:	f7e6 ffa0 	bl	8000238 <__aeabi_dsub>
 80192f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80192fc:	4606      	mov	r6, r0
 80192fe:	460f      	mov	r7, r1
 8019300:	4620      	mov	r0, r4
 8019302:	4629      	mov	r1, r5
 8019304:	f7e6 ff98 	bl	8000238 <__aeabi_dsub>
 8019308:	4602      	mov	r2, r0
 801930a:	460b      	mov	r3, r1
 801930c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019310:	f7e6 ff92 	bl	8000238 <__aeabi_dsub>
 8019314:	465a      	mov	r2, fp
 8019316:	464b      	mov	r3, r9
 8019318:	f7e7 f946 	bl	80005a8 <__aeabi_dmul>
 801931c:	4602      	mov	r2, r0
 801931e:	460b      	mov	r3, r1
 8019320:	4630      	mov	r0, r6
 8019322:	4639      	mov	r1, r7
 8019324:	f7e6 ff88 	bl	8000238 <__aeabi_dsub>
 8019328:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801932c:	f7e7 f93c 	bl	80005a8 <__aeabi_dmul>
 8019330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019334:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019338:	4610      	mov	r0, r2
 801933a:	4619      	mov	r1, r3
 801933c:	f7e7 f934 	bl	80005a8 <__aeabi_dmul>
 8019340:	a37d      	add	r3, pc, #500	@ (adr r3, 8019538 <__ieee754_pow+0x730>)
 8019342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019346:	4604      	mov	r4, r0
 8019348:	460d      	mov	r5, r1
 801934a:	f7e7 f92d 	bl	80005a8 <__aeabi_dmul>
 801934e:	a37c      	add	r3, pc, #496	@ (adr r3, 8019540 <__ieee754_pow+0x738>)
 8019350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019354:	f7e6 ff72 	bl	800023c <__adddf3>
 8019358:	4622      	mov	r2, r4
 801935a:	462b      	mov	r3, r5
 801935c:	f7e7 f924 	bl	80005a8 <__aeabi_dmul>
 8019360:	a379      	add	r3, pc, #484	@ (adr r3, 8019548 <__ieee754_pow+0x740>)
 8019362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019366:	f7e6 ff69 	bl	800023c <__adddf3>
 801936a:	4622      	mov	r2, r4
 801936c:	462b      	mov	r3, r5
 801936e:	f7e7 f91b 	bl	80005a8 <__aeabi_dmul>
 8019372:	a377      	add	r3, pc, #476	@ (adr r3, 8019550 <__ieee754_pow+0x748>)
 8019374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019378:	f7e6 ff60 	bl	800023c <__adddf3>
 801937c:	4622      	mov	r2, r4
 801937e:	462b      	mov	r3, r5
 8019380:	f7e7 f912 	bl	80005a8 <__aeabi_dmul>
 8019384:	a374      	add	r3, pc, #464	@ (adr r3, 8019558 <__ieee754_pow+0x750>)
 8019386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801938a:	f7e6 ff57 	bl	800023c <__adddf3>
 801938e:	4622      	mov	r2, r4
 8019390:	462b      	mov	r3, r5
 8019392:	f7e7 f909 	bl	80005a8 <__aeabi_dmul>
 8019396:	a372      	add	r3, pc, #456	@ (adr r3, 8019560 <__ieee754_pow+0x758>)
 8019398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801939c:	f7e6 ff4e 	bl	800023c <__adddf3>
 80193a0:	4622      	mov	r2, r4
 80193a2:	4606      	mov	r6, r0
 80193a4:	460f      	mov	r7, r1
 80193a6:	462b      	mov	r3, r5
 80193a8:	4620      	mov	r0, r4
 80193aa:	4629      	mov	r1, r5
 80193ac:	f7e7 f8fc 	bl	80005a8 <__aeabi_dmul>
 80193b0:	4602      	mov	r2, r0
 80193b2:	460b      	mov	r3, r1
 80193b4:	4630      	mov	r0, r6
 80193b6:	4639      	mov	r1, r7
 80193b8:	f7e7 f8f6 	bl	80005a8 <__aeabi_dmul>
 80193bc:	465a      	mov	r2, fp
 80193be:	4604      	mov	r4, r0
 80193c0:	460d      	mov	r5, r1
 80193c2:	464b      	mov	r3, r9
 80193c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80193c8:	f7e6 ff38 	bl	800023c <__adddf3>
 80193cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80193d0:	f7e7 f8ea 	bl	80005a8 <__aeabi_dmul>
 80193d4:	4622      	mov	r2, r4
 80193d6:	462b      	mov	r3, r5
 80193d8:	f7e6 ff30 	bl	800023c <__adddf3>
 80193dc:	465a      	mov	r2, fp
 80193de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80193e2:	464b      	mov	r3, r9
 80193e4:	4658      	mov	r0, fp
 80193e6:	4649      	mov	r1, r9
 80193e8:	f7e7 f8de 	bl	80005a8 <__aeabi_dmul>
 80193ec:	4b6a      	ldr	r3, [pc, #424]	@ (8019598 <__ieee754_pow+0x790>)
 80193ee:	2200      	movs	r2, #0
 80193f0:	4606      	mov	r6, r0
 80193f2:	460f      	mov	r7, r1
 80193f4:	f7e6 ff22 	bl	800023c <__adddf3>
 80193f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80193fc:	f7e6 ff1e 	bl	800023c <__adddf3>
 8019400:	46d8      	mov	r8, fp
 8019402:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8019406:	460d      	mov	r5, r1
 8019408:	465a      	mov	r2, fp
 801940a:	460b      	mov	r3, r1
 801940c:	4640      	mov	r0, r8
 801940e:	4649      	mov	r1, r9
 8019410:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8019414:	f7e7 f8c8 	bl	80005a8 <__aeabi_dmul>
 8019418:	465c      	mov	r4, fp
 801941a:	4680      	mov	r8, r0
 801941c:	4689      	mov	r9, r1
 801941e:	4b5e      	ldr	r3, [pc, #376]	@ (8019598 <__ieee754_pow+0x790>)
 8019420:	2200      	movs	r2, #0
 8019422:	4620      	mov	r0, r4
 8019424:	4629      	mov	r1, r5
 8019426:	f7e6 ff07 	bl	8000238 <__aeabi_dsub>
 801942a:	4632      	mov	r2, r6
 801942c:	463b      	mov	r3, r7
 801942e:	f7e6 ff03 	bl	8000238 <__aeabi_dsub>
 8019432:	4602      	mov	r2, r0
 8019434:	460b      	mov	r3, r1
 8019436:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801943a:	f7e6 fefd 	bl	8000238 <__aeabi_dsub>
 801943e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019442:	f7e7 f8b1 	bl	80005a8 <__aeabi_dmul>
 8019446:	4622      	mov	r2, r4
 8019448:	4606      	mov	r6, r0
 801944a:	460f      	mov	r7, r1
 801944c:	462b      	mov	r3, r5
 801944e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019452:	f7e7 f8a9 	bl	80005a8 <__aeabi_dmul>
 8019456:	4602      	mov	r2, r0
 8019458:	460b      	mov	r3, r1
 801945a:	4630      	mov	r0, r6
 801945c:	4639      	mov	r1, r7
 801945e:	f7e6 feed 	bl	800023c <__adddf3>
 8019462:	4606      	mov	r6, r0
 8019464:	460f      	mov	r7, r1
 8019466:	4602      	mov	r2, r0
 8019468:	460b      	mov	r3, r1
 801946a:	4640      	mov	r0, r8
 801946c:	4649      	mov	r1, r9
 801946e:	f7e6 fee5 	bl	800023c <__adddf3>
 8019472:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8019476:	a33c      	add	r3, pc, #240	@ (adr r3, 8019568 <__ieee754_pow+0x760>)
 8019478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801947c:	4658      	mov	r0, fp
 801947e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8019482:	460d      	mov	r5, r1
 8019484:	f7e7 f890 	bl	80005a8 <__aeabi_dmul>
 8019488:	465c      	mov	r4, fp
 801948a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801948e:	4642      	mov	r2, r8
 8019490:	464b      	mov	r3, r9
 8019492:	4620      	mov	r0, r4
 8019494:	4629      	mov	r1, r5
 8019496:	f7e6 fecf 	bl	8000238 <__aeabi_dsub>
 801949a:	4602      	mov	r2, r0
 801949c:	460b      	mov	r3, r1
 801949e:	4630      	mov	r0, r6
 80194a0:	4639      	mov	r1, r7
 80194a2:	f7e6 fec9 	bl	8000238 <__aeabi_dsub>
 80194a6:	a332      	add	r3, pc, #200	@ (adr r3, 8019570 <__ieee754_pow+0x768>)
 80194a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194ac:	f7e7 f87c 	bl	80005a8 <__aeabi_dmul>
 80194b0:	a331      	add	r3, pc, #196	@ (adr r3, 8019578 <__ieee754_pow+0x770>)
 80194b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194b6:	4606      	mov	r6, r0
 80194b8:	460f      	mov	r7, r1
 80194ba:	4620      	mov	r0, r4
 80194bc:	4629      	mov	r1, r5
 80194be:	f7e7 f873 	bl	80005a8 <__aeabi_dmul>
 80194c2:	4602      	mov	r2, r0
 80194c4:	460b      	mov	r3, r1
 80194c6:	4630      	mov	r0, r6
 80194c8:	4639      	mov	r1, r7
 80194ca:	f7e6 feb7 	bl	800023c <__adddf3>
 80194ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80194d0:	4b32      	ldr	r3, [pc, #200]	@ (801959c <__ieee754_pow+0x794>)
 80194d2:	4413      	add	r3, r2
 80194d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194d8:	f7e6 feb0 	bl	800023c <__adddf3>
 80194dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80194e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80194e2:	f7e6 fff7 	bl	80004d4 <__aeabi_i2d>
 80194e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80194e8:	4b2d      	ldr	r3, [pc, #180]	@ (80195a0 <__ieee754_pow+0x798>)
 80194ea:	4413      	add	r3, r2
 80194ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80194f0:	4606      	mov	r6, r0
 80194f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80194f6:	460f      	mov	r7, r1
 80194f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80194fc:	f7e6 fe9e 	bl	800023c <__adddf3>
 8019500:	4642      	mov	r2, r8
 8019502:	464b      	mov	r3, r9
 8019504:	f7e6 fe9a 	bl	800023c <__adddf3>
 8019508:	4632      	mov	r2, r6
 801950a:	463b      	mov	r3, r7
 801950c:	f7e6 fe96 	bl	800023c <__adddf3>
 8019510:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8019514:	4632      	mov	r2, r6
 8019516:	463b      	mov	r3, r7
 8019518:	4658      	mov	r0, fp
 801951a:	460d      	mov	r5, r1
 801951c:	f7e6 fe8c 	bl	8000238 <__aeabi_dsub>
 8019520:	4642      	mov	r2, r8
 8019522:	464b      	mov	r3, r9
 8019524:	f7e6 fe88 	bl	8000238 <__aeabi_dsub>
 8019528:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801952c:	f7e6 fe84 	bl	8000238 <__aeabi_dsub>
 8019530:	465c      	mov	r4, fp
 8019532:	4602      	mov	r2, r0
 8019534:	e036      	b.n	80195a4 <__ieee754_pow+0x79c>
 8019536:	bf00      	nop
 8019538:	4a454eef 	.word	0x4a454eef
 801953c:	3fca7e28 	.word	0x3fca7e28
 8019540:	93c9db65 	.word	0x93c9db65
 8019544:	3fcd864a 	.word	0x3fcd864a
 8019548:	a91d4101 	.word	0xa91d4101
 801954c:	3fd17460 	.word	0x3fd17460
 8019550:	518f264d 	.word	0x518f264d
 8019554:	3fd55555 	.word	0x3fd55555
 8019558:	db6fabff 	.word	0xdb6fabff
 801955c:	3fdb6db6 	.word	0x3fdb6db6
 8019560:	33333303 	.word	0x33333303
 8019564:	3fe33333 	.word	0x3fe33333
 8019568:	e0000000 	.word	0xe0000000
 801956c:	3feec709 	.word	0x3feec709
 8019570:	dc3a03fd 	.word	0xdc3a03fd
 8019574:	3feec709 	.word	0x3feec709
 8019578:	145b01f5 	.word	0x145b01f5
 801957c:	be3e2fe0 	.word	0xbe3e2fe0
 8019580:	7ff00000 	.word	0x7ff00000
 8019584:	43400000 	.word	0x43400000
 8019588:	0003988e 	.word	0x0003988e
 801958c:	000bb679 	.word	0x000bb679
 8019590:	0801d168 	.word	0x0801d168
 8019594:	3ff00000 	.word	0x3ff00000
 8019598:	40080000 	.word	0x40080000
 801959c:	0801d148 	.word	0x0801d148
 80195a0:	0801d158 	.word	0x0801d158
 80195a4:	460b      	mov	r3, r1
 80195a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80195aa:	e5d7      	b.n	801915c <__ieee754_pow+0x354>
 80195ac:	f04f 0a01 	mov.w	sl, #1
 80195b0:	e65e      	b.n	8019270 <__ieee754_pow+0x468>
 80195b2:	a3b4      	add	r3, pc, #720	@ (adr r3, 8019884 <__ieee754_pow+0xa7c>)
 80195b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195b8:	4630      	mov	r0, r6
 80195ba:	4639      	mov	r1, r7
 80195bc:	f7e6 fe3e 	bl	800023c <__adddf3>
 80195c0:	4642      	mov	r2, r8
 80195c2:	e9cd 0100 	strd	r0, r1, [sp]
 80195c6:	464b      	mov	r3, r9
 80195c8:	4620      	mov	r0, r4
 80195ca:	4629      	mov	r1, r5
 80195cc:	f7e6 fe34 	bl	8000238 <__aeabi_dsub>
 80195d0:	4602      	mov	r2, r0
 80195d2:	460b      	mov	r3, r1
 80195d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80195d8:	f7e7 fa76 	bl	8000ac8 <__aeabi_dcmpgt>
 80195dc:	2800      	cmp	r0, #0
 80195de:	f47f ae00 	bne.w	80191e2 <__ieee754_pow+0x3da>
 80195e2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80195e6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80195ea:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80195ee:	fa43 fa0a 	asr.w	sl, r3, sl
 80195f2:	44da      	add	sl, fp
 80195f4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80195f8:	489d      	ldr	r0, [pc, #628]	@ (8019870 <__ieee754_pow+0xa68>)
 80195fa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80195fe:	4108      	asrs	r0, r1
 8019600:	ea00 030a 	and.w	r3, r0, sl
 8019604:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8019608:	f1c1 0114 	rsb	r1, r1, #20
 801960c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8019610:	fa4a fa01 	asr.w	sl, sl, r1
 8019614:	f1bb 0f00 	cmp.w	fp, #0
 8019618:	4640      	mov	r0, r8
 801961a:	4649      	mov	r1, r9
 801961c:	f04f 0200 	mov.w	r2, #0
 8019620:	bfb8      	it	lt
 8019622:	f1ca 0a00 	rsblt	sl, sl, #0
 8019626:	f7e6 fe07 	bl	8000238 <__aeabi_dsub>
 801962a:	4680      	mov	r8, r0
 801962c:	4689      	mov	r9, r1
 801962e:	4632      	mov	r2, r6
 8019630:	463b      	mov	r3, r7
 8019632:	4640      	mov	r0, r8
 8019634:	4649      	mov	r1, r9
 8019636:	f7e6 fe01 	bl	800023c <__adddf3>
 801963a:	2400      	movs	r4, #0
 801963c:	a37c      	add	r3, pc, #496	@ (adr r3, 8019830 <__ieee754_pow+0xa28>)
 801963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019642:	4620      	mov	r0, r4
 8019644:	460d      	mov	r5, r1
 8019646:	f7e6 ffaf 	bl	80005a8 <__aeabi_dmul>
 801964a:	4642      	mov	r2, r8
 801964c:	e9cd 0100 	strd	r0, r1, [sp]
 8019650:	464b      	mov	r3, r9
 8019652:	4620      	mov	r0, r4
 8019654:	4629      	mov	r1, r5
 8019656:	f7e6 fdef 	bl	8000238 <__aeabi_dsub>
 801965a:	4602      	mov	r2, r0
 801965c:	460b      	mov	r3, r1
 801965e:	4630      	mov	r0, r6
 8019660:	4639      	mov	r1, r7
 8019662:	f7e6 fde9 	bl	8000238 <__aeabi_dsub>
 8019666:	a374      	add	r3, pc, #464	@ (adr r3, 8019838 <__ieee754_pow+0xa30>)
 8019668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801966c:	f7e6 ff9c 	bl	80005a8 <__aeabi_dmul>
 8019670:	a373      	add	r3, pc, #460	@ (adr r3, 8019840 <__ieee754_pow+0xa38>)
 8019672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019676:	4680      	mov	r8, r0
 8019678:	4689      	mov	r9, r1
 801967a:	4620      	mov	r0, r4
 801967c:	4629      	mov	r1, r5
 801967e:	f7e6 ff93 	bl	80005a8 <__aeabi_dmul>
 8019682:	4602      	mov	r2, r0
 8019684:	460b      	mov	r3, r1
 8019686:	4640      	mov	r0, r8
 8019688:	4649      	mov	r1, r9
 801968a:	f7e6 fdd7 	bl	800023c <__adddf3>
 801968e:	4604      	mov	r4, r0
 8019690:	460d      	mov	r5, r1
 8019692:	4602      	mov	r2, r0
 8019694:	460b      	mov	r3, r1
 8019696:	e9dd 0100 	ldrd	r0, r1, [sp]
 801969a:	f7e6 fdcf 	bl	800023c <__adddf3>
 801969e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80196a2:	4680      	mov	r8, r0
 80196a4:	4689      	mov	r9, r1
 80196a6:	f7e6 fdc7 	bl	8000238 <__aeabi_dsub>
 80196aa:	4602      	mov	r2, r0
 80196ac:	460b      	mov	r3, r1
 80196ae:	4620      	mov	r0, r4
 80196b0:	4629      	mov	r1, r5
 80196b2:	f7e6 fdc1 	bl	8000238 <__aeabi_dsub>
 80196b6:	4642      	mov	r2, r8
 80196b8:	4606      	mov	r6, r0
 80196ba:	460f      	mov	r7, r1
 80196bc:	464b      	mov	r3, r9
 80196be:	4640      	mov	r0, r8
 80196c0:	4649      	mov	r1, r9
 80196c2:	f7e6 ff71 	bl	80005a8 <__aeabi_dmul>
 80196c6:	a360      	add	r3, pc, #384	@ (adr r3, 8019848 <__ieee754_pow+0xa40>)
 80196c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196cc:	4604      	mov	r4, r0
 80196ce:	460d      	mov	r5, r1
 80196d0:	f7e6 ff6a 	bl	80005a8 <__aeabi_dmul>
 80196d4:	a35e      	add	r3, pc, #376	@ (adr r3, 8019850 <__ieee754_pow+0xa48>)
 80196d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196da:	f7e6 fdad 	bl	8000238 <__aeabi_dsub>
 80196de:	4622      	mov	r2, r4
 80196e0:	462b      	mov	r3, r5
 80196e2:	f7e6 ff61 	bl	80005a8 <__aeabi_dmul>
 80196e6:	a35c      	add	r3, pc, #368	@ (adr r3, 8019858 <__ieee754_pow+0xa50>)
 80196e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196ec:	f7e6 fda6 	bl	800023c <__adddf3>
 80196f0:	4622      	mov	r2, r4
 80196f2:	462b      	mov	r3, r5
 80196f4:	f7e6 ff58 	bl	80005a8 <__aeabi_dmul>
 80196f8:	a359      	add	r3, pc, #356	@ (adr r3, 8019860 <__ieee754_pow+0xa58>)
 80196fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196fe:	f7e6 fd9b 	bl	8000238 <__aeabi_dsub>
 8019702:	4622      	mov	r2, r4
 8019704:	462b      	mov	r3, r5
 8019706:	f7e6 ff4f 	bl	80005a8 <__aeabi_dmul>
 801970a:	a357      	add	r3, pc, #348	@ (adr r3, 8019868 <__ieee754_pow+0xa60>)
 801970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019710:	f7e6 fd94 	bl	800023c <__adddf3>
 8019714:	4622      	mov	r2, r4
 8019716:	462b      	mov	r3, r5
 8019718:	f7e6 ff46 	bl	80005a8 <__aeabi_dmul>
 801971c:	4602      	mov	r2, r0
 801971e:	460b      	mov	r3, r1
 8019720:	4640      	mov	r0, r8
 8019722:	4649      	mov	r1, r9
 8019724:	f7e6 fd88 	bl	8000238 <__aeabi_dsub>
 8019728:	4604      	mov	r4, r0
 801972a:	460d      	mov	r5, r1
 801972c:	4602      	mov	r2, r0
 801972e:	460b      	mov	r3, r1
 8019730:	4640      	mov	r0, r8
 8019732:	4649      	mov	r1, r9
 8019734:	f7e6 ff38 	bl	80005a8 <__aeabi_dmul>
 8019738:	2200      	movs	r2, #0
 801973a:	e9cd 0100 	strd	r0, r1, [sp]
 801973e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8019742:	4620      	mov	r0, r4
 8019744:	4629      	mov	r1, r5
 8019746:	f7e6 fd77 	bl	8000238 <__aeabi_dsub>
 801974a:	4602      	mov	r2, r0
 801974c:	460b      	mov	r3, r1
 801974e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019752:	f7e7 f853 	bl	80007fc <__aeabi_ddiv>
 8019756:	4632      	mov	r2, r6
 8019758:	4604      	mov	r4, r0
 801975a:	460d      	mov	r5, r1
 801975c:	463b      	mov	r3, r7
 801975e:	4640      	mov	r0, r8
 8019760:	4649      	mov	r1, r9
 8019762:	f7e6 ff21 	bl	80005a8 <__aeabi_dmul>
 8019766:	4632      	mov	r2, r6
 8019768:	463b      	mov	r3, r7
 801976a:	f7e6 fd67 	bl	800023c <__adddf3>
 801976e:	4602      	mov	r2, r0
 8019770:	460b      	mov	r3, r1
 8019772:	4620      	mov	r0, r4
 8019774:	4629      	mov	r1, r5
 8019776:	f7e6 fd5f 	bl	8000238 <__aeabi_dsub>
 801977a:	4642      	mov	r2, r8
 801977c:	464b      	mov	r3, r9
 801977e:	f7e6 fd5b 	bl	8000238 <__aeabi_dsub>
 8019782:	460b      	mov	r3, r1
 8019784:	4602      	mov	r2, r0
 8019786:	493b      	ldr	r1, [pc, #236]	@ (8019874 <__ieee754_pow+0xa6c>)
 8019788:	2000      	movs	r0, #0
 801978a:	f7e6 fd55 	bl	8000238 <__aeabi_dsub>
 801978e:	ec41 0b10 	vmov	d0, r0, r1
 8019792:	ee10 3a90 	vmov	r3, s1
 8019796:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801979a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801979e:	da30      	bge.n	8019802 <__ieee754_pow+0x9fa>
 80197a0:	4650      	mov	r0, sl
 80197a2:	f000 f87d 	bl	80198a0 <scalbn>
 80197a6:	ec51 0b10 	vmov	r0, r1, d0
 80197aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80197ae:	f7ff bbd2 	b.w	8018f56 <__ieee754_pow+0x14e>
 80197b2:	4c31      	ldr	r4, [pc, #196]	@ (8019878 <__ieee754_pow+0xa70>)
 80197b4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80197b8:	42a3      	cmp	r3, r4
 80197ba:	d91a      	bls.n	80197f2 <__ieee754_pow+0x9ea>
 80197bc:	4b2f      	ldr	r3, [pc, #188]	@ (801987c <__ieee754_pow+0xa74>)
 80197be:	440b      	add	r3, r1
 80197c0:	4303      	orrs	r3, r0
 80197c2:	d009      	beq.n	80197d8 <__ieee754_pow+0x9d0>
 80197c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80197c8:	2200      	movs	r2, #0
 80197ca:	2300      	movs	r3, #0
 80197cc:	f7e7 f95e 	bl	8000a8c <__aeabi_dcmplt>
 80197d0:	3800      	subs	r0, #0
 80197d2:	bf18      	it	ne
 80197d4:	2001      	movne	r0, #1
 80197d6:	e42b      	b.n	8019030 <__ieee754_pow+0x228>
 80197d8:	4642      	mov	r2, r8
 80197da:	464b      	mov	r3, r9
 80197dc:	f7e6 fd2c 	bl	8000238 <__aeabi_dsub>
 80197e0:	4632      	mov	r2, r6
 80197e2:	463b      	mov	r3, r7
 80197e4:	f7e7 f966 	bl	8000ab4 <__aeabi_dcmpge>
 80197e8:	2800      	cmp	r0, #0
 80197ea:	d1eb      	bne.n	80197c4 <__ieee754_pow+0x9bc>
 80197ec:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801988c <__ieee754_pow+0xa84>
 80197f0:	e6f7      	b.n	80195e2 <__ieee754_pow+0x7da>
 80197f2:	469a      	mov	sl, r3
 80197f4:	4b22      	ldr	r3, [pc, #136]	@ (8019880 <__ieee754_pow+0xa78>)
 80197f6:	459a      	cmp	sl, r3
 80197f8:	f63f aef3 	bhi.w	80195e2 <__ieee754_pow+0x7da>
 80197fc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8019800:	e715      	b.n	801962e <__ieee754_pow+0x826>
 8019802:	ec51 0b10 	vmov	r0, r1, d0
 8019806:	4619      	mov	r1, r3
 8019808:	e7cf      	b.n	80197aa <__ieee754_pow+0x9a2>
 801980a:	491a      	ldr	r1, [pc, #104]	@ (8019874 <__ieee754_pow+0xa6c>)
 801980c:	2000      	movs	r0, #0
 801980e:	f7ff bb18 	b.w	8018e42 <__ieee754_pow+0x3a>
 8019812:	2000      	movs	r0, #0
 8019814:	2100      	movs	r1, #0
 8019816:	f7ff bb14 	b.w	8018e42 <__ieee754_pow+0x3a>
 801981a:	4630      	mov	r0, r6
 801981c:	4639      	mov	r1, r7
 801981e:	f7ff bb10 	b.w	8018e42 <__ieee754_pow+0x3a>
 8019822:	460c      	mov	r4, r1
 8019824:	f7ff bb5e 	b.w	8018ee4 <__ieee754_pow+0xdc>
 8019828:	2400      	movs	r4, #0
 801982a:	f7ff bb49 	b.w	8018ec0 <__ieee754_pow+0xb8>
 801982e:	bf00      	nop
 8019830:	00000000 	.word	0x00000000
 8019834:	3fe62e43 	.word	0x3fe62e43
 8019838:	fefa39ef 	.word	0xfefa39ef
 801983c:	3fe62e42 	.word	0x3fe62e42
 8019840:	0ca86c39 	.word	0x0ca86c39
 8019844:	be205c61 	.word	0xbe205c61
 8019848:	72bea4d0 	.word	0x72bea4d0
 801984c:	3e663769 	.word	0x3e663769
 8019850:	c5d26bf1 	.word	0xc5d26bf1
 8019854:	3ebbbd41 	.word	0x3ebbbd41
 8019858:	af25de2c 	.word	0xaf25de2c
 801985c:	3f11566a 	.word	0x3f11566a
 8019860:	16bebd93 	.word	0x16bebd93
 8019864:	3f66c16c 	.word	0x3f66c16c
 8019868:	5555553e 	.word	0x5555553e
 801986c:	3fc55555 	.word	0x3fc55555
 8019870:	fff00000 	.word	0xfff00000
 8019874:	3ff00000 	.word	0x3ff00000
 8019878:	4090cbff 	.word	0x4090cbff
 801987c:	3f6f3400 	.word	0x3f6f3400
 8019880:	3fe00000 	.word	0x3fe00000
 8019884:	652b82fe 	.word	0x652b82fe
 8019888:	3c971547 	.word	0x3c971547
 801988c:	4090cc00 	.word	0x4090cc00

08019890 <fabs>:
 8019890:	ec51 0b10 	vmov	r0, r1, d0
 8019894:	4602      	mov	r2, r0
 8019896:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801989a:	ec43 2b10 	vmov	d0, r2, r3
 801989e:	4770      	bx	lr

080198a0 <scalbn>:
 80198a0:	b570      	push	{r4, r5, r6, lr}
 80198a2:	ec55 4b10 	vmov	r4, r5, d0
 80198a6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80198aa:	4606      	mov	r6, r0
 80198ac:	462b      	mov	r3, r5
 80198ae:	b991      	cbnz	r1, 80198d6 <scalbn+0x36>
 80198b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80198b4:	4323      	orrs	r3, r4
 80198b6:	d03d      	beq.n	8019934 <scalbn+0x94>
 80198b8:	4b35      	ldr	r3, [pc, #212]	@ (8019990 <scalbn+0xf0>)
 80198ba:	4620      	mov	r0, r4
 80198bc:	4629      	mov	r1, r5
 80198be:	2200      	movs	r2, #0
 80198c0:	f7e6 fe72 	bl	80005a8 <__aeabi_dmul>
 80198c4:	4b33      	ldr	r3, [pc, #204]	@ (8019994 <scalbn+0xf4>)
 80198c6:	429e      	cmp	r6, r3
 80198c8:	4604      	mov	r4, r0
 80198ca:	460d      	mov	r5, r1
 80198cc:	da0f      	bge.n	80198ee <scalbn+0x4e>
 80198ce:	a328      	add	r3, pc, #160	@ (adr r3, 8019970 <scalbn+0xd0>)
 80198d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198d4:	e01e      	b.n	8019914 <scalbn+0x74>
 80198d6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80198da:	4291      	cmp	r1, r2
 80198dc:	d10b      	bne.n	80198f6 <scalbn+0x56>
 80198de:	4622      	mov	r2, r4
 80198e0:	4620      	mov	r0, r4
 80198e2:	4629      	mov	r1, r5
 80198e4:	f7e6 fcaa 	bl	800023c <__adddf3>
 80198e8:	4604      	mov	r4, r0
 80198ea:	460d      	mov	r5, r1
 80198ec:	e022      	b.n	8019934 <scalbn+0x94>
 80198ee:	460b      	mov	r3, r1
 80198f0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80198f4:	3936      	subs	r1, #54	@ 0x36
 80198f6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80198fa:	4296      	cmp	r6, r2
 80198fc:	dd0d      	ble.n	801991a <scalbn+0x7a>
 80198fe:	2d00      	cmp	r5, #0
 8019900:	a11d      	add	r1, pc, #116	@ (adr r1, 8019978 <scalbn+0xd8>)
 8019902:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019906:	da02      	bge.n	801990e <scalbn+0x6e>
 8019908:	a11d      	add	r1, pc, #116	@ (adr r1, 8019980 <scalbn+0xe0>)
 801990a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801990e:	a31a      	add	r3, pc, #104	@ (adr r3, 8019978 <scalbn+0xd8>)
 8019910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019914:	f7e6 fe48 	bl	80005a8 <__aeabi_dmul>
 8019918:	e7e6      	b.n	80198e8 <scalbn+0x48>
 801991a:	1872      	adds	r2, r6, r1
 801991c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8019920:	428a      	cmp	r2, r1
 8019922:	dcec      	bgt.n	80198fe <scalbn+0x5e>
 8019924:	2a00      	cmp	r2, #0
 8019926:	dd08      	ble.n	801993a <scalbn+0x9a>
 8019928:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801992c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8019930:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019934:	ec45 4b10 	vmov	d0, r4, r5
 8019938:	bd70      	pop	{r4, r5, r6, pc}
 801993a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801993e:	da08      	bge.n	8019952 <scalbn+0xb2>
 8019940:	2d00      	cmp	r5, #0
 8019942:	a10b      	add	r1, pc, #44	@ (adr r1, 8019970 <scalbn+0xd0>)
 8019944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019948:	dac1      	bge.n	80198ce <scalbn+0x2e>
 801994a:	a10f      	add	r1, pc, #60	@ (adr r1, 8019988 <scalbn+0xe8>)
 801994c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019950:	e7bd      	b.n	80198ce <scalbn+0x2e>
 8019952:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019956:	3236      	adds	r2, #54	@ 0x36
 8019958:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801995c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019960:	4620      	mov	r0, r4
 8019962:	4b0d      	ldr	r3, [pc, #52]	@ (8019998 <scalbn+0xf8>)
 8019964:	4629      	mov	r1, r5
 8019966:	2200      	movs	r2, #0
 8019968:	e7d4      	b.n	8019914 <scalbn+0x74>
 801996a:	bf00      	nop
 801996c:	f3af 8000 	nop.w
 8019970:	c2f8f359 	.word	0xc2f8f359
 8019974:	01a56e1f 	.word	0x01a56e1f
 8019978:	8800759c 	.word	0x8800759c
 801997c:	7e37e43c 	.word	0x7e37e43c
 8019980:	8800759c 	.word	0x8800759c
 8019984:	fe37e43c 	.word	0xfe37e43c
 8019988:	c2f8f359 	.word	0xc2f8f359
 801998c:	81a56e1f 	.word	0x81a56e1f
 8019990:	43500000 	.word	0x43500000
 8019994:	ffff3cb0 	.word	0xffff3cb0
 8019998:	3c900000 	.word	0x3c900000

0801999c <with_errno>:
 801999c:	b510      	push	{r4, lr}
 801999e:	ed2d 8b02 	vpush	{d8}
 80199a2:	eeb0 8a40 	vmov.f32	s16, s0
 80199a6:	eef0 8a60 	vmov.f32	s17, s1
 80199aa:	4604      	mov	r4, r0
 80199ac:	f7fd fb3e 	bl	801702c <__errno>
 80199b0:	eeb0 0a48 	vmov.f32	s0, s16
 80199b4:	eef0 0a68 	vmov.f32	s1, s17
 80199b8:	ecbd 8b02 	vpop	{d8}
 80199bc:	6004      	str	r4, [r0, #0]
 80199be:	bd10      	pop	{r4, pc}

080199c0 <xflow>:
 80199c0:	4603      	mov	r3, r0
 80199c2:	b507      	push	{r0, r1, r2, lr}
 80199c4:	ec51 0b10 	vmov	r0, r1, d0
 80199c8:	b183      	cbz	r3, 80199ec <xflow+0x2c>
 80199ca:	4602      	mov	r2, r0
 80199cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80199d0:	e9cd 2300 	strd	r2, r3, [sp]
 80199d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80199d8:	f7e6 fde6 	bl	80005a8 <__aeabi_dmul>
 80199dc:	ec41 0b10 	vmov	d0, r0, r1
 80199e0:	2022      	movs	r0, #34	@ 0x22
 80199e2:	b003      	add	sp, #12
 80199e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80199e8:	f7ff bfd8 	b.w	801999c <with_errno>
 80199ec:	4602      	mov	r2, r0
 80199ee:	460b      	mov	r3, r1
 80199f0:	e7ee      	b.n	80199d0 <xflow+0x10>
 80199f2:	0000      	movs	r0, r0
 80199f4:	0000      	movs	r0, r0
	...

080199f8 <__math_uflow>:
 80199f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8019a00 <__math_uflow+0x8>
 80199fc:	f7ff bfe0 	b.w	80199c0 <xflow>
 8019a00:	00000000 	.word	0x00000000
 8019a04:	10000000 	.word	0x10000000

08019a08 <__math_oflow>:
 8019a08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8019a10 <__math_oflow+0x8>
 8019a0c:	f7ff bfd8 	b.w	80199c0 <xflow>
 8019a10:	00000000 	.word	0x00000000
 8019a14:	70000000 	.word	0x70000000

08019a18 <__ieee754_sqrt>:
 8019a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a1c:	4a68      	ldr	r2, [pc, #416]	@ (8019bc0 <__ieee754_sqrt+0x1a8>)
 8019a1e:	ec55 4b10 	vmov	r4, r5, d0
 8019a22:	43aa      	bics	r2, r5
 8019a24:	462b      	mov	r3, r5
 8019a26:	4621      	mov	r1, r4
 8019a28:	d110      	bne.n	8019a4c <__ieee754_sqrt+0x34>
 8019a2a:	4622      	mov	r2, r4
 8019a2c:	4620      	mov	r0, r4
 8019a2e:	4629      	mov	r1, r5
 8019a30:	f7e6 fdba 	bl	80005a8 <__aeabi_dmul>
 8019a34:	4602      	mov	r2, r0
 8019a36:	460b      	mov	r3, r1
 8019a38:	4620      	mov	r0, r4
 8019a3a:	4629      	mov	r1, r5
 8019a3c:	f7e6 fbfe 	bl	800023c <__adddf3>
 8019a40:	4604      	mov	r4, r0
 8019a42:	460d      	mov	r5, r1
 8019a44:	ec45 4b10 	vmov	d0, r4, r5
 8019a48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a4c:	2d00      	cmp	r5, #0
 8019a4e:	dc0e      	bgt.n	8019a6e <__ieee754_sqrt+0x56>
 8019a50:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8019a54:	4322      	orrs	r2, r4
 8019a56:	d0f5      	beq.n	8019a44 <__ieee754_sqrt+0x2c>
 8019a58:	b19d      	cbz	r5, 8019a82 <__ieee754_sqrt+0x6a>
 8019a5a:	4622      	mov	r2, r4
 8019a5c:	4620      	mov	r0, r4
 8019a5e:	4629      	mov	r1, r5
 8019a60:	f7e6 fbea 	bl	8000238 <__aeabi_dsub>
 8019a64:	4602      	mov	r2, r0
 8019a66:	460b      	mov	r3, r1
 8019a68:	f7e6 fec8 	bl	80007fc <__aeabi_ddiv>
 8019a6c:	e7e8      	b.n	8019a40 <__ieee754_sqrt+0x28>
 8019a6e:	152a      	asrs	r2, r5, #20
 8019a70:	d115      	bne.n	8019a9e <__ieee754_sqrt+0x86>
 8019a72:	2000      	movs	r0, #0
 8019a74:	e009      	b.n	8019a8a <__ieee754_sqrt+0x72>
 8019a76:	0acb      	lsrs	r3, r1, #11
 8019a78:	3a15      	subs	r2, #21
 8019a7a:	0549      	lsls	r1, r1, #21
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d0fa      	beq.n	8019a76 <__ieee754_sqrt+0x5e>
 8019a80:	e7f7      	b.n	8019a72 <__ieee754_sqrt+0x5a>
 8019a82:	462a      	mov	r2, r5
 8019a84:	e7fa      	b.n	8019a7c <__ieee754_sqrt+0x64>
 8019a86:	005b      	lsls	r3, r3, #1
 8019a88:	3001      	adds	r0, #1
 8019a8a:	02dc      	lsls	r4, r3, #11
 8019a8c:	d5fb      	bpl.n	8019a86 <__ieee754_sqrt+0x6e>
 8019a8e:	1e44      	subs	r4, r0, #1
 8019a90:	1b12      	subs	r2, r2, r4
 8019a92:	f1c0 0420 	rsb	r4, r0, #32
 8019a96:	fa21 f404 	lsr.w	r4, r1, r4
 8019a9a:	4323      	orrs	r3, r4
 8019a9c:	4081      	lsls	r1, r0
 8019a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019aa2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8019aa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019aaa:	07d2      	lsls	r2, r2, #31
 8019aac:	bf5c      	itt	pl
 8019aae:	005b      	lslpl	r3, r3, #1
 8019ab0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8019ab4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019ab8:	bf58      	it	pl
 8019aba:	0049      	lslpl	r1, r1, #1
 8019abc:	2600      	movs	r6, #0
 8019abe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8019ac2:	106d      	asrs	r5, r5, #1
 8019ac4:	0049      	lsls	r1, r1, #1
 8019ac6:	2016      	movs	r0, #22
 8019ac8:	4632      	mov	r2, r6
 8019aca:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8019ace:	1917      	adds	r7, r2, r4
 8019ad0:	429f      	cmp	r7, r3
 8019ad2:	bfde      	ittt	le
 8019ad4:	193a      	addle	r2, r7, r4
 8019ad6:	1bdb      	suble	r3, r3, r7
 8019ad8:	1936      	addle	r6, r6, r4
 8019ada:	0fcf      	lsrs	r7, r1, #31
 8019adc:	3801      	subs	r0, #1
 8019ade:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019ae2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019ae6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8019aea:	d1f0      	bne.n	8019ace <__ieee754_sqrt+0xb6>
 8019aec:	4604      	mov	r4, r0
 8019aee:	2720      	movs	r7, #32
 8019af0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8019af4:	429a      	cmp	r2, r3
 8019af6:	eb00 0e0c 	add.w	lr, r0, ip
 8019afa:	db02      	blt.n	8019b02 <__ieee754_sqrt+0xea>
 8019afc:	d113      	bne.n	8019b26 <__ieee754_sqrt+0x10e>
 8019afe:	458e      	cmp	lr, r1
 8019b00:	d811      	bhi.n	8019b26 <__ieee754_sqrt+0x10e>
 8019b02:	f1be 0f00 	cmp.w	lr, #0
 8019b06:	eb0e 000c 	add.w	r0, lr, ip
 8019b0a:	da42      	bge.n	8019b92 <__ieee754_sqrt+0x17a>
 8019b0c:	2800      	cmp	r0, #0
 8019b0e:	db40      	blt.n	8019b92 <__ieee754_sqrt+0x17a>
 8019b10:	f102 0801 	add.w	r8, r2, #1
 8019b14:	1a9b      	subs	r3, r3, r2
 8019b16:	458e      	cmp	lr, r1
 8019b18:	bf88      	it	hi
 8019b1a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8019b1e:	eba1 010e 	sub.w	r1, r1, lr
 8019b22:	4464      	add	r4, ip
 8019b24:	4642      	mov	r2, r8
 8019b26:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8019b2a:	3f01      	subs	r7, #1
 8019b2c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8019b30:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019b34:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8019b38:	d1dc      	bne.n	8019af4 <__ieee754_sqrt+0xdc>
 8019b3a:	4319      	orrs	r1, r3
 8019b3c:	d01b      	beq.n	8019b76 <__ieee754_sqrt+0x15e>
 8019b3e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8019bc4 <__ieee754_sqrt+0x1ac>
 8019b42:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8019bc8 <__ieee754_sqrt+0x1b0>
 8019b46:	e9da 0100 	ldrd	r0, r1, [sl]
 8019b4a:	e9db 2300 	ldrd	r2, r3, [fp]
 8019b4e:	f7e6 fb73 	bl	8000238 <__aeabi_dsub>
 8019b52:	e9da 8900 	ldrd	r8, r9, [sl]
 8019b56:	4602      	mov	r2, r0
 8019b58:	460b      	mov	r3, r1
 8019b5a:	4640      	mov	r0, r8
 8019b5c:	4649      	mov	r1, r9
 8019b5e:	f7e6 ff9f 	bl	8000aa0 <__aeabi_dcmple>
 8019b62:	b140      	cbz	r0, 8019b76 <__ieee754_sqrt+0x15e>
 8019b64:	f1b4 3fff 	cmp.w	r4, #4294967295
 8019b68:	e9da 0100 	ldrd	r0, r1, [sl]
 8019b6c:	e9db 2300 	ldrd	r2, r3, [fp]
 8019b70:	d111      	bne.n	8019b96 <__ieee754_sqrt+0x17e>
 8019b72:	3601      	adds	r6, #1
 8019b74:	463c      	mov	r4, r7
 8019b76:	1072      	asrs	r2, r6, #1
 8019b78:	0863      	lsrs	r3, r4, #1
 8019b7a:	07f1      	lsls	r1, r6, #31
 8019b7c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8019b80:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8019b84:	bf48      	it	mi
 8019b86:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8019b8a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8019b8e:	4618      	mov	r0, r3
 8019b90:	e756      	b.n	8019a40 <__ieee754_sqrt+0x28>
 8019b92:	4690      	mov	r8, r2
 8019b94:	e7be      	b.n	8019b14 <__ieee754_sqrt+0xfc>
 8019b96:	f7e6 fb51 	bl	800023c <__adddf3>
 8019b9a:	e9da 8900 	ldrd	r8, r9, [sl]
 8019b9e:	4602      	mov	r2, r0
 8019ba0:	460b      	mov	r3, r1
 8019ba2:	4640      	mov	r0, r8
 8019ba4:	4649      	mov	r1, r9
 8019ba6:	f7e6 ff71 	bl	8000a8c <__aeabi_dcmplt>
 8019baa:	b120      	cbz	r0, 8019bb6 <__ieee754_sqrt+0x19e>
 8019bac:	1ca0      	adds	r0, r4, #2
 8019bae:	bf08      	it	eq
 8019bb0:	3601      	addeq	r6, #1
 8019bb2:	3402      	adds	r4, #2
 8019bb4:	e7df      	b.n	8019b76 <__ieee754_sqrt+0x15e>
 8019bb6:	1c63      	adds	r3, r4, #1
 8019bb8:	f023 0401 	bic.w	r4, r3, #1
 8019bbc:	e7db      	b.n	8019b76 <__ieee754_sqrt+0x15e>
 8019bbe:	bf00      	nop
 8019bc0:	7ff00000 	.word	0x7ff00000
 8019bc4:	20000308 	.word	0x20000308
 8019bc8:	20000300 	.word	0x20000300

08019bcc <_init>:
 8019bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bce:	bf00      	nop
 8019bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bd2:	bc08      	pop	{r3}
 8019bd4:	469e      	mov	lr, r3
 8019bd6:	4770      	bx	lr

08019bd8 <_fini>:
 8019bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bda:	bf00      	nop
 8019bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bde:	bc08      	pop	{r3}
 8019be0:	469e      	mov	lr, r3
 8019be2:	4770      	bx	lr
