
RTOS_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ab4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08011bf4  08011bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011e24  08011e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011e2c  08011e2c  00012e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011e30  08011e30  00012e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  20000008  08011e34  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000ab88  20000168  08011f94  00013168  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000acf0  08011f94  00013cf0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00013168  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003370d  00000000  00000000  00013198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006895  00000000  00000000  000468a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002e68  00000000  00000000  0004d140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000023b0  00000000  00000000  0004ffa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000091b4  00000000  00000000  00052358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00033c0a  00000000  00000000  0005b50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00103816  00000000  00000000  0008f116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019292c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ce04  00000000  00000000  00192970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  0019f774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000168 	.word	0x20000168
 800015c:	00000000 	.word	0x00000000
 8000160:	08011bdc 	.word	0x08011bdc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000016c 	.word	0x2000016c
 800017c:	08011bdc 	.word	0x08011bdc

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800051c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800051e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4313      	orrs	r3, r2
 8000526:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800052c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4013      	ands	r3, r2
 8000532:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000534:	68fb      	ldr	r3, [r7, #12]
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000542:	b480      	push	{r7}
 8000544:	b085      	sub	sp, #20
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800054a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800054e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000550:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4313      	orrs	r3, r2
 8000558:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800055a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800055e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4013      	ands	r3, r2
 8000564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000566:	68fb      	ldr	r3, [r7, #12]
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <USB_transmit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USB_transmit(uint8_t *USB_buffer, size_t length){
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	osStatus_t status;

	osMutexAcquire(TransmitMutexHandle, osWaitForever);
 800057e:	4b0f      	ldr	r3, [pc, #60]	@ (80005bc <USB_transmit+0x48>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f04f 31ff 	mov.w	r1, #4294967295
 8000586:	4618      	mov	r0, r3
 8000588:	f00c fa31 	bl	800c9ee <osMutexAcquire>
	status = CDC_Transmit_FS(USB_buffer, length);
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	b29b      	uxth	r3, r3
 8000590:	4619      	mov	r1, r3
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f00f fed6 	bl	8010344 <CDC_Transmit_FS>
 8000598:	4603      	mov	r3, r0
 800059a:	60fb      	str	r3, [r7, #12]
	osMutexRelease(TransmitMutexHandle);
 800059c:	4b07      	ldr	r3, [pc, #28]	@ (80005bc <USB_transmit+0x48>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f00c fa6f 	bl	800ca84 <osMutexRelease>

	if (status != osOK){
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d003      	beq.n	80005b4 <USB_transmit+0x40>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005ac:	2102      	movs	r1, #2
 80005ae:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <USB_transmit+0x4c>)
 80005b0:	f002 fe2c 	bl	800320c <HAL_GPIO_TogglePin>
		//sprintf(msg, "Error, status code: %d \r\n", status);
		//sprintf(msg, "Error");
		//HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);

	}
}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000384 	.word	0x20000384
 80005c0:	48000400 	.word	0x48000400

080005c4 <update_data_packet_audio_buffered>:
void update_data_packet_audio_buffered(uint16_t var1, uint8_t *buffer, size_t *length) {
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	81fb      	strh	r3, [r7, #14]
    // Define the start byte
	if (*length == 0){
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d107      	bne.n	80005ea <update_data_packet_audio_buffered+0x26>
		buffer[0] = (uint8_t)-128;
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	2280      	movs	r2, #128	@ 0x80
 80005de:	701a      	strb	r2, [r3, #0]
		(*length)++;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	1c5a      	adds	r2, r3, #1
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	601a      	str	r2, [r3, #0]
	}
    memcpy(&buffer[*length], &var1, sizeof(uint16_t));
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	4413      	add	r3, r2
 80005f2:	89fa      	ldrh	r2, [r7, #14]
 80005f4:	801a      	strh	r2, [r3, #0]

    // Set the total length of the packet
    (*length) += sizeof(uint16_t);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	1c9a      	adds	r2, r3, #2
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fe38 	bl	8001284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f84e 	bl	80006b4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000618:	f000 f8b0 	bl	800077c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 fa30 	bl	8000a80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000620:	f000 fa1c 	bl	8000a5c <MX_DMA_Init>
  MX_ADC1_Init();
 8000624:	f000 f8dc 	bl	80007e0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000628:	f000 f93e 	bl	80008a8 <MX_I2C1_Init>
  MX_TIM2_Init();
 800062c:	f000 f97c 	bl	8000928 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000630:	f000 f9c8 	bl	80009c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2120      	movs	r1, #32
 8000638:	4813      	ldr	r0, [pc, #76]	@ (8000688 <main+0x7c>)
 800063a:	f002 fdcf 	bl	80031dc <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_reading, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	4912      	ldr	r1, [pc, #72]	@ (800068c <main+0x80>)
 8000642:	4813      	ldr	r0, [pc, #76]	@ (8000690 <main+0x84>)
 8000644:	f001 f99e 	bl	8001984 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000648:	4812      	ldr	r0, [pc, #72]	@ (8000694 <main+0x88>)
 800064a:	f006 fad1 	bl	8006bf0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800064e:	f00b ff9d 	bl	800c58c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of TransmitMutex */
  TransmitMutexHandle = osMutexNew(&TransmitMutex_attributes);
 8000652:	4811      	ldr	r0, [pc, #68]	@ (8000698 <main+0x8c>)
 8000654:	f00c f945 	bl	800c8e2 <osMutexNew>
 8000658:	4603      	mov	r3, r0
 800065a:	4a10      	ldr	r2, [pc, #64]	@ (800069c <main+0x90>)
 800065c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of AudioQueue */
  AudioQueueHandle = osMessageQueueNew (2000, sizeof(uint16_t), &AudioQueue_attributes);
 800065e:	4a10      	ldr	r2, [pc, #64]	@ (80006a0 <main+0x94>)
 8000660:	2102      	movs	r1, #2
 8000662:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000666:	f00c fa4a 	bl	800cafe <osMessageQueueNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <main+0x98>)
 800066e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(task1_handler, NULL, &Task1_attributes);
 8000670:	4a0d      	ldr	r2, [pc, #52]	@ (80006a8 <main+0x9c>)
 8000672:	2100      	movs	r1, #0
 8000674:	480d      	ldr	r0, [pc, #52]	@ (80006ac <main+0xa0>)
 8000676:	f00b ffd3 	bl	800c620 <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a0c      	ldr	r2, [pc, #48]	@ (80006b0 <main+0xa4>)
 800067e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000680:	f00b ffa8 	bl	800c5d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <main+0x78>
 8000688:	48000400 	.word	0x48000400
 800068c:	20000388 	.word	0x20000388
 8000690:	20000184 	.word	0x20000184
 8000694:	2000029c 	.word	0x2000029c
 8000698:	08011d18 	.word	0x08011d18
 800069c:	20000384 	.word	0x20000384
 80006a0:	08011d00 	.word	0x08011d00
 80006a4:	20000380 	.word	0x20000380
 80006a8:	08011cdc 	.word	0x08011cdc
 80006ac:	08000ad9 	.word	0x08000ad9
 80006b0:	2000037c 	.word	0x2000037c

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b09a      	sub	sp, #104	@ 0x68
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2248      	movs	r2, #72	@ 0x48
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f010 fbd9 	bl	8010e7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
 80006d6:	615a      	str	r2, [r3, #20]
 80006d8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006da:	4b27      	ldr	r3, [pc, #156]	@ (8000778 <SystemClock_Config+0xc4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80006e2:	4a25      	ldr	r2, [pc, #148]	@ (8000778 <SystemClock_Config+0xc4>)
 80006e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006e8:	6013      	str	r3, [r2, #0]
 80006ea:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <SystemClock_Config+0xc4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006f6:	2303      	movs	r3, #3
 80006f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000704:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000706:	2340      	movs	r3, #64	@ 0x40
 8000708:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	2303      	movs	r3, #3
 8000710:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000712:	2310      	movs	r3, #16
 8000714:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000716:	2308      	movs	r3, #8
 8000718:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800071e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000720:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000724:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000726:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800072a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	4618      	mov	r0, r3
 8000732:	f004 ff9b 	bl	800566c <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800073c:	f000 fa58 	bl	8000bf0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000740:	236f      	movs	r3, #111	@ 0x6f
 8000742:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2303      	movs	r3, #3
 8000746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000754:	2380      	movs	r3, #128	@ 0x80
 8000756:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2103      	movs	r1, #3
 8000760:	4618      	mov	r0, r3
 8000762:	f005 faf7 	bl	8005d54 <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800076c:	f000 fa40 	bl	8000bf0 <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3768      	adds	r7, #104	@ 0x68
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	58000400 	.word	0x58000400

0800077c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2250      	movs	r2, #80	@ 0x50
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f010 fb76 	bl	8010e7a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 800078e:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 8000792:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8000794:	2306      	movs	r3, #6
 8000796:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000798:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800079c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800079e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007a2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80007a4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007a8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 80007aa:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 80007ae:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80007b0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80007b4:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80007b6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80007ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80007bc:	2300      	movs	r3, #0
 80007be:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	4618      	mov	r0, r3
 80007c8:	f005 ff33 	bl	8006632 <HAL_RCCEx_PeriphCLKConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80007d2:	f000 fa0d 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	@ 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007e6:	463b      	mov	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
 80007f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007f6:	4b29      	ldr	r3, [pc, #164]	@ (800089c <MX_ADC1_Init+0xbc>)
 80007f8:	4a29      	ldr	r2, [pc, #164]	@ (80008a0 <MX_ADC1_Init+0xc0>)
 80007fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007fc:	4b27      	ldr	r3, [pc, #156]	@ (800089c <MX_ADC1_Init+0xbc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000802:	4b26      	ldr	r3, [pc, #152]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000808:	4b24      	ldr	r3, [pc, #144]	@ (800089c <MX_ADC1_Init+0xbc>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800080e:	4b23      	ldr	r3, [pc, #140]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000814:	4b21      	ldr	r3, [pc, #132]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000816:	2204      	movs	r2, #4
 8000818:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <MX_ADC1_Init+0xbc>)
 800081c:	2200      	movs	r2, #0
 800081e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000822:	2201      	movs	r2, #1
 8000824:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000826:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000828:	2201      	movs	r2, #1
 800082a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <MX_ADC1_Init+0xbc>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000834:	4b19      	ldr	r3, [pc, #100]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000836:	2200      	movs	r2, #0
 8000838:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083a:	4b18      	ldr	r3, [pc, #96]	@ (800089c <MX_ADC1_Init+0xbc>)
 800083c:	2200      	movs	r2, #0
 800083e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000840:	4b16      	ldr	r3, [pc, #88]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000842:	2201      	movs	r2, #1
 8000844:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_ADC1_Init+0xbc>)
 800084a:	2200      	movs	r2, #0
 800084c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000850:	2200      	movs	r2, #0
 8000852:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000856:	4811      	ldr	r0, [pc, #68]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000858:	f000 ff48 	bl	80016ec <HAL_ADC_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000862:	f000 f9c5 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_ADC1_Init+0xc4>)
 8000868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800086a:	2306      	movs	r3, #6
 800086c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800086e:	2306      	movs	r3, #6
 8000870:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000872:	237f      	movs	r3, #127	@ 0x7f
 8000874:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000876:	2304      	movs	r3, #4
 8000878:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	4619      	mov	r1, r3
 8000882:	4806      	ldr	r0, [pc, #24]	@ (800089c <MX_ADC1_Init+0xbc>)
 8000884:	f001 fae0 	bl	8001e48 <HAL_ADC_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800088e:	f000 f9af 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000184 	.word	0x20000184
 80008a0:	50040000 	.word	0x50040000
 80008a4:	04300002 	.word	0x04300002

080008a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <MX_I2C1_Init+0x74>)
 80008ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000920 <MX_I2C1_Init+0x78>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <MX_I2C1_Init+0x74>)
 80008b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000924 <MX_I2C1_Init+0x7c>)
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008b8:	4b18      	ldr	r3, [pc, #96]	@ (800091c <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008be:	4b17      	ldr	r3, [pc, #92]	@ (800091c <MX_I2C1_Init+0x74>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b15      	ldr	r3, [pc, #84]	@ (800091c <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ca:	4b14      	ldr	r3, [pc, #80]	@ (800091c <MX_I2C1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d0:	4b12      	ldr	r3, [pc, #72]	@ (800091c <MX_I2C1_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <MX_I2C1_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <MX_I2C1_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e2:	480e      	ldr	r0, [pc, #56]	@ (800091c <MX_I2C1_Init+0x74>)
 80008e4:	f002 fcac 	bl	8003240 <HAL_I2C_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ee:	f000 f97f 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4809      	ldr	r0, [pc, #36]	@ (800091c <MX_I2C1_Init+0x74>)
 80008f6:	f002 fd3e 	bl	8003376 <HAL_I2CEx_ConfigAnalogFilter>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000900:	f000 f976 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	4805      	ldr	r0, [pc, #20]	@ (800091c <MX_I2C1_Init+0x74>)
 8000908:	f002 fd80 	bl	800340c <HAL_I2CEx_ConfigDigitalFilter>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000912:	f000 f96d 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000248 	.word	0x20000248
 8000920:	40005400 	.word	0x40005400
 8000924:	10b17db5 	.word	0x10b17db5

08000928 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000946:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <MX_TIM2_Init+0x98>)
 8000948:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800094c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800094e:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <MX_TIM2_Init+0x98>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <MX_TIM2_Init+0x98>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000-1;
 800095a:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <MX_TIM2_Init+0x98>)
 800095c:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000960:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000962:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <MX_TIM2_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000968:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <MX_TIM2_Init+0x98>)
 800096a:	2280      	movs	r2, #128	@ 0x80
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800096e:	4814      	ldr	r0, [pc, #80]	@ (80009c0 <MX_TIM2_Init+0x98>)
 8000970:	f006 f8e6 	bl	8006b40 <HAL_TIM_Base_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800097a:	f000 f939 	bl	8000bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000982:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	4619      	mov	r1, r3
 800098a:	480d      	ldr	r0, [pc, #52]	@ (80009c0 <MX_TIM2_Init+0x98>)
 800098c:	f006 fa85 	bl	8006e9a <HAL_TIM_ConfigClockSource>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000996:	f000 f92b 	bl	8000bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800099a:	2320      	movs	r3, #32
 800099c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	4806      	ldr	r0, [pc, #24]	@ (80009c0 <MX_TIM2_Init+0x98>)
 80009a8:	f006 fc74 	bl	8007294 <HAL_TIMEx_MasterConfigSynchronization>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009b2:	f000 f91d 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	3720      	adds	r7, #32
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000029c 	.word	0x2000029c

080009c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c8:	4b22      	ldr	r3, [pc, #136]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009ca:	4a23      	ldr	r2, [pc, #140]	@ (8000a58 <MX_USART1_UART_Init+0x94>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ce:	4b21      	ldr	r3, [pc, #132]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a00:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a0c:	4811      	ldr	r0, [pc, #68]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 8000a0e:	f006 fcdf 	bl	80073d0 <HAL_UART_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a18:	f000 f8ea 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	480d      	ldr	r0, [pc, #52]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 8000a20:	f007 f9a6 	bl	8007d70 <HAL_UARTEx_SetTxFifoThreshold>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a2a:	f000 f8e1 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4808      	ldr	r0, [pc, #32]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 8000a32:	f007 f9db 	bl	8007dec <HAL_UARTEx_SetRxFifoThreshold>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a3c:	f000 f8d8 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 8000a42:	f007 f95c 	bl	8007cfe <HAL_UARTEx_DisableFifoMode>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a4c:	f000 f8d0 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200002e8 	.word	0x200002e8
 8000a58:	40013800 	.word	0x40013800

08000a5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a60:	2004      	movs	r0, #4
 8000a62:	f7ff fd55 	bl	8000510 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a66:	2001      	movs	r0, #1
 8000a68:	f7ff fd52 	bl	8000510 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2105      	movs	r1, #5
 8000a70:	200b      	movs	r0, #11
 8000a72:	f001 ffa7 	bl	80029c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a76:	200b      	movs	r0, #11
 8000a78:	f001 ffbe 	bl	80029f8 <HAL_NVIC_EnableIRQ>

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a94:	2004      	movs	r0, #4
 8000a96:	f7ff fd54 	bl	8000542 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f7ff fd51 	bl	8000542 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f7ff fd4e 	bl	8000542 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2123      	movs	r1, #35	@ 0x23
 8000aaa:	480a      	ldr	r0, [pc, #40]	@ (8000ad4 <MX_GPIO_Init+0x54>)
 8000aac:	f002 fb96 	bl	80031dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000ab0:	2323      	movs	r3, #35	@ 0x23
 8000ab2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4803      	ldr	r0, [pc, #12]	@ (8000ad4 <MX_GPIO_Init+0x54>)
 8000ac6:	f002 fa19 	bl	8002efc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	48000400 	.word	0x48000400

08000ad8 <task1_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task1_handler */
void task1_handler(void *argument)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	f5ad 6dfd 	sub.w	sp, sp, #2024	@ 0x7e8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	f507 63fd 	add.w	r3, r7, #2024	@ 0x7e8
 8000ae4:	f2a3 73e4 	subw	r3, r3, #2020	@ 0x7e4
 8000ae8:	6018      	str	r0, [r3, #0]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8000aea:	f00f fb6d 	bl	80101c8 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  uint16_t sample;
  uint8_t USB_buffer[2000];
  size_t length = 0;
 8000aee:	f507 63fd 	add.w	r3, r7, #2024	@ 0x7e8
 8000af2:	f2a3 73dc 	subw	r3, r3, #2012	@ 0x7dc
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
  uint16_t test = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f8a7 37e4 	strh.w	r3, [r7, #2020]	@ 0x7e4


  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295
 8000b04:	2100      	movs	r1, #0
 8000b06:	2001      	movs	r0, #1
 8000b08:	f00b fe6a 	bl	800c7e0 <osThreadFlagsWait>
	  //sprintf(msg, "task1_unblocked \r\n\n");
	  //HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	481a      	ldr	r0, [pc, #104]	@ (8000b78 <task1_handler+0xa0>)
 8000b10:	f002 fb7c 	bl	800320c <HAL_GPIO_TogglePin>

//	  test = osMessageQueueGetCount(AudioQueueHandle);
//	  sprintf(msg, "queue accessed - %d in queue\r\n", test);
//	  HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);

	  for(uint16_t i = 0; i < AUDIO_PACKET_SIZE; i++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8a7 37e6 	strh.w	r3, [r7, #2022]	@ 0x7e6
 8000b1a:	e016      	b.n	8000b4a <task1_handler+0x72>
	  {
		  osMessageQueueGet(AudioQueueHandle, &sample, NULL, osWaitForever);
 8000b1c:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <task1_handler+0xa4>)
 8000b1e:	6818      	ldr	r0, [r3, #0]
 8000b20:	f207 71e2 	addw	r1, r7, #2018	@ 0x7e2
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f00c f8bb 	bl	800cca4 <osMessageQueueGet>
		  //sprintf(msg, "queue gotten - %d \r\n", sample);
		  //HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
		  update_data_packet_audio_buffered(sample,USB_buffer,&length);
 8000b2e:	f8b7 37e2 	ldrh.w	r3, [r7, #2018]	@ 0x7e2
 8000b32:	f107 020c 	add.w	r2, r7, #12
 8000b36:	f107 0110 	add.w	r1, r7, #16
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fd42 	bl	80005c4 <update_data_packet_audio_buffered>
	  for(uint16_t i = 0; i < AUDIO_PACKET_SIZE; i++)
 8000b40:	f8b7 37e6 	ldrh.w	r3, [r7, #2022]	@ 0x7e6
 8000b44:	3301      	adds	r3, #1
 8000b46:	f8a7 37e6 	strh.w	r3, [r7, #2022]	@ 0x7e6
 8000b4a:	f8b7 37e6 	ldrh.w	r3, [r7, #2022]	@ 0x7e6
 8000b4e:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000b52:	d3e3      	bcc.n	8000b1c <task1_handler+0x44>
	  }

	  USB_transmit(USB_buffer, length);
 8000b54:	f507 63fd 	add.w	r3, r7, #2024	@ 0x7e8
 8000b58:	f2a3 73dc 	subw	r3, r3, #2012	@ 0x7dc
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fd05 	bl	8000574 <USB_transmit>
	  length = 0;
 8000b6a:	f507 63fd 	add.w	r3, r7, #2024	@ 0x7e8
 8000b6e:	f2a3 73dc 	subw	r3, r3, #2012	@ 0x7dc
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
	  osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000b76:	e7c3      	b.n	8000b00 <task1_handler+0x28>
 8000b78:	48000400 	.word	0x48000400
 8000b7c:	20000380 	.word	0x20000380

08000b80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a14      	ldr	r2, [pc, #80]	@ (8000be0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d101      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b92:	f000 fb97 	bl	80012c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b9e:	d11a      	bne.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x56>
	static uint16_t sample_count = 0;

	// Add to queue
	//osMessageQueuePut(AudioQueueHandle, (const void*)&ADC_reading, 0, 0);
	osMessageQueuePut(AudioQueueHandle, (const void*)&sample_count, 0, 0);
 8000ba0:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000ba2:	6818      	ldr	r0, [r3, #0]
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	490f      	ldr	r1, [pc, #60]	@ (8000be8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000baa:	f00c f81b 	bl	800cbe4 <osMessageQueuePut>

	//sprintf(msg, "Put on queue - %d \r\n", sample_count);
	//HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);

	sample_count++;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000bb8:	801a      	strh	r2, [r3, #0]

	// Use the local counter to determine when to signal
	if(sample_count == AUDIO_PACKET_SIZE)
 8000bba:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000bc2:	d108      	bne.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		sample_count = 0;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	801a      	strh	r2, [r3, #0]
		osThreadFlagsSet(Task1Handle, 0x01);
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00b fdb7 	bl	800c744 <osThreadFlagsSet>
	}
  }
  /* USER CODE END Callback 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40012c00 	.word	0x40012c00
 8000be4:	20000380 	.word	0x20000380
 8000be8:	2000038a 	.word	0x2000038a
 8000bec:	2000037c 	.word	0x2000037c

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <Error_Handler+0x8>

08000bfc <LL_AHB2_GRP1_EnableClock>:
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c20:	68fb      	ldr	r3, [r7, #12]
}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b085      	sub	sp, #20
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c3a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c4a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c7c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c84:	68fb      	ldr	r3, [r7, #12]
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	210f      	movs	r1, #15
 8000c9a:	f06f 0001 	mvn.w	r0, #1
 8000c9e:	f001 fe91 	bl	80029c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a26      	ldr	r2, [pc, #152]	@ (8000d60 <HAL_ADC_MspInit+0xb8>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d145      	bne.n	8000d56 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cca:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cce:	f7ff ff95 	bl	8000bfc <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	2004      	movs	r0, #4
 8000cd4:	f7ff ff92 	bl	8000bfc <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	481e      	ldr	r0, [pc, #120]	@ (8000d64 <HAL_ADC_MspInit+0xbc>)
 8000cec:	f002 f906 	bl	8002efc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d68 <HAL_ADC_MspInit+0xc0>)
 8000cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d6c <HAL_ADC_MspInit+0xc4>)
 8000cf4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <HAL_ADC_MspInit+0xc0>)
 8000cf8:	2205      	movs	r2, #5
 8000cfa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <HAL_ADC_MspInit+0xc0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d02:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <HAL_ADC_MspInit+0xc0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d08:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <HAL_ADC_MspInit+0xc0>)
 8000d0a:	2280      	movs	r2, #128	@ 0x80
 8000d0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <HAL_ADC_MspInit+0xc0>)
 8000d10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d14:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d16:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <HAL_ADC_MspInit+0xc0>)
 8000d18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d1e:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <HAL_ADC_MspInit+0xc0>)
 8000d20:	2220      	movs	r2, #32
 8000d22:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d24:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <HAL_ADC_MspInit+0xc0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d2a:	480f      	ldr	r0, [pc, #60]	@ (8000d68 <HAL_ADC_MspInit+0xc0>)
 8000d2c:	f001 fe72 	bl	8002a14 <HAL_DMA_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 8000d36:	f7ff ff5b 	bl	8000bf0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <HAL_ADC_MspInit+0xc0>)
 8000d3e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d40:	4a09      	ldr	r2, [pc, #36]	@ (8000d68 <HAL_ADC_MspInit+0xc0>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2105      	movs	r1, #5
 8000d4a:	2012      	movs	r0, #18
 8000d4c:	f001 fe3a 	bl	80029c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000d50:	2012      	movs	r0, #18
 8000d52:	f001 fe51 	bl	80029f8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d56:	bf00      	nop
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	50040000 	.word	0x50040000
 8000d64:	48000800 	.word	0x48000800
 8000d68:	200001e8 	.word	0x200001e8
 8000d6c:	40020008 	.word	0x40020008

08000d70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b09c      	sub	sp, #112	@ 0x70
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2250      	movs	r2, #80	@ 0x50
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f010 f872 	bl	8010e7a <memset>
  if(hi2c->Instance==I2C1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a17      	ldr	r2, [pc, #92]	@ (8000df8 <HAL_I2C_MspInit+0x88>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d126      	bne.n	8000dee <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000da0:	2304      	movs	r3, #4
 8000da2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000da4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4618      	mov	r0, r3
 8000db0:	f005 fc3f 	bl	8006632 <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000dba:	f7ff ff19 	bl	8000bf0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f7ff ff1c 	bl	8000bfc <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dc4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dca:	2312      	movs	r3, #18
 8000dcc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dde:	4619      	mov	r1, r3
 8000de0:	4806      	ldr	r0, [pc, #24]	@ (8000dfc <HAL_I2C_MspInit+0x8c>)
 8000de2:	f002 f88b 	bl	8002efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000de6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000dea:	f7ff ff20 	bl	8000c2e <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dee:	bf00      	nop
 8000df0:	3770      	adds	r7, #112	@ 0x70
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40005400 	.word	0x40005400
 8000dfc:	48000400 	.word	0x48000400

08000e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e10:	d10a      	bne.n	8000e28 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff ff0b 	bl	8000c2e <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2105      	movs	r1, #5
 8000e1c:	201c      	movs	r0, #28
 8000e1e:	f001 fdd1 	bl	80029c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e22:	201c      	movs	r0, #28
 8000e24:	f001 fde8 	bl	80029f8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b09c      	sub	sp, #112	@ 0x70
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2250      	movs	r2, #80	@ 0x50
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f010 f812 	bl	8010e7a <memset>
  if(huart->Instance==USART1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a16      	ldr	r2, [pc, #88]	@ (8000eb4 <HAL_UART_MspInit+0x84>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d124      	bne.n	8000eaa <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e60:	2301      	movs	r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f005 fbe0 	bl	8006632 <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e78:	f7ff feba 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e7c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e80:	f7ff feee 	bl	8000c60 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e84:	2002      	movs	r0, #2
 8000e86:	f7ff feb9 	bl	8000bfc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e8a:	23c0      	movs	r3, #192	@ 0xc0
 8000e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4804      	ldr	r0, [pc, #16]	@ (8000eb8 <HAL_UART_MspInit+0x88>)
 8000ea6:	f002 f829 	bl	8002efc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000eaa:	bf00      	nop
 8000eac:	3770      	adds	r7, #112	@ 0x70
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40013800 	.word	0x40013800
 8000eb8:	48000400 	.word	0x48000400

08000ebc <LL_APB2_GRP1_EnableClock>:
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ec8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000eca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4013      	ands	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	@ 0x30
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	2019      	movs	r0, #25
 8000f06:	f001 fd5d 	bl	80029c4 <HAL_NVIC_SetPriority>
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f0a:	2019      	movs	r0, #25
 8000f0c:	f001 fd74 	bl	80029f8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f10:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000f14:	f7ff ffd2 	bl	8000ebc <LL_APB2_GRP1_EnableClock>
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f18:	f107 0208 	add.w	r2, r7, #8
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f005 f902 	bl	800612c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f28:	f005 f8ea 	bl	8006100 <HAL_RCC_GetPCLK2Freq>
 8000f2c:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f30:	4a12      	ldr	r2, [pc, #72]	@ (8000f7c <HAL_InitTick+0x8c>)
 8000f32:	fba2 2303 	umull	r2, r3, r2, r3
 8000f36:	0c9b      	lsrs	r3, r3, #18
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <HAL_InitTick+0x90>)
 8000f3e:	4a11      	ldr	r2, [pc, #68]	@ (8000f84 <HAL_InitTick+0x94>)
 8000f40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <HAL_InitTick+0x90>)
 8000f44:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f48:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <HAL_InitTick+0x90>)
 8000f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f4e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f50:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <HAL_InitTick+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <HAL_InitTick+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f5c:	4808      	ldr	r0, [pc, #32]	@ (8000f80 <HAL_InitTick+0x90>)
 8000f5e:	f005 fdef 	bl	8006b40 <HAL_TIM_Base_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d104      	bne.n	8000f72 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f68:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <HAL_InitTick+0x90>)
 8000f6a:	f005 fe41 	bl	8006bf0 <HAL_TIM_Base_Start_IT>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3730      	adds	r7, #48	@ 0x30
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	431bde83 	.word	0x431bde83
 8000f80:	2000038c 	.word	0x2000038c
 8000f84:	40012c00 	.word	0x40012c00

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <NMI_Handler+0x4>

08000f90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <MemManage_Handler+0x4>

08000fa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <UsageFault_Handler+0x4>

08000fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <DMA1_Channel1_IRQHandler+0x10>)
 8000fc6:	f001 fe48 	bl	8002c5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200001e8 	.word	0x200001e8

08000fd4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fd8:	4802      	ldr	r0, [pc, #8]	@ (8000fe4 <ADC1_IRQHandler+0x10>)
 8000fda:	f000 fd57 	bl	8001a8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000184 	.word	0x20000184

08000fe8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fec:	4802      	ldr	r0, [pc, #8]	@ (8000ff8 <USB_LP_IRQHandler+0x10>)
 8000fee:	f002 fb49 	bl	8003684 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000a6a8 	.word	0x2000a6a8

08000ffc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001002:	f005 fe43 	bl	8006c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000038c 	.word	0x2000038c

08001010 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <TIM2_IRQHandler+0x10>)
 8001016:	f005 fe39 	bl	8006c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000029c 	.word	0x2000029c

08001024 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	e00a      	b.n	800104c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001036:	f3af 8000 	nop.w
 800103a:	4601      	mov	r1, r0
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	60ba      	str	r2, [r7, #8]
 8001042:	b2ca      	uxtb	r2, r1
 8001044:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbf0      	blt.n	8001036 <_read+0x12>
  }

  return len;
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	e009      	b.n	8001084 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	60ba      	str	r2, [r7, #8]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	dbf1      	blt.n	8001070 <_write+0x12>
  }
  return len;
 800108c:	687b      	ldr	r3, [r7, #4]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_close>:

int _close(int file)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010be:	605a      	str	r2, [r3, #4]
  return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <_isatty>:

int _isatty(int file)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001108:	4a14      	ldr	r2, [pc, #80]	@ (800115c <_sbrk+0x5c>)
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <_sbrk+0x60>)
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001114:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d102      	bne.n	8001122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800111c:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <_sbrk+0x64>)
 800111e:	4a12      	ldr	r2, [pc, #72]	@ (8001168 <_sbrk+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001122:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	429a      	cmp	r2, r3
 800112e:	d207      	bcs.n	8001140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001130:	f00f ff48 	bl	8010fc4 <__errno>
 8001134:	4603      	mov	r3, r0
 8001136:	220c      	movs	r2, #12
 8001138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	e009      	b.n	8001154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001140:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001146:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <_sbrk+0x64>)
 8001150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20030000 	.word	0x20030000
 8001160:	00000400 	.word	0x00000400
 8001164:	200003d8 	.word	0x200003d8
 8001168:	2000acf0 	.word	0x2000acf0

0800116c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <SystemInit+0x98>)
 8001172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001176:	4a23      	ldr	r2, [pc, #140]	@ (8001204 <SystemInit+0x98>)
 8001178:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800117c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001194:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001198:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800119a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011a4:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <SystemInit+0x9c>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80011aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011b6:	f023 0305 	bic.w	r3, r3, #5
 80011ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80011be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011ca:	f023 0301 	bic.w	r3, r3, #1
 80011ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80011d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011d6:	4a0d      	ldr	r2, [pc, #52]	@ (800120c <SystemInit+0xa0>)
 80011d8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80011da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011de:	4a0b      	ldr	r2, [pc, #44]	@ (800120c <SystemInit+0xa0>)
 80011e0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00
 8001208:	faf6fefb 	.word	0xfaf6fefb
 800120c:	22041000 	.word	0x22041000

08001210 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001210:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001212:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001214:	3304      	adds	r3, #4

08001216 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001216:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001218:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800121a:	d3f9      	bcc.n	8001210 <CopyDataInit>
  bx lr
 800121c:	4770      	bx	lr

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800121e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001220:	3004      	adds	r0, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001222:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>
  bx lr
 8001226:	4770      	bx	lr

08001228 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001228:	480c      	ldr	r0, [pc, #48]	@ (800125c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800122a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800122c:	f7ff ff9e 	bl	800116c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001230:	480b      	ldr	r0, [pc, #44]	@ (8001260 <LoopForever+0x6>)
 8001232:	490c      	ldr	r1, [pc, #48]	@ (8001264 <LoopForever+0xa>)
 8001234:	4a0c      	ldr	r2, [pc, #48]	@ (8001268 <LoopForever+0xe>)
 8001236:	2300      	movs	r3, #0
 8001238:	f7ff ffed 	bl	8001216 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800123c:	480b      	ldr	r0, [pc, #44]	@ (800126c <LoopForever+0x12>)
 800123e:	490c      	ldr	r1, [pc, #48]	@ (8001270 <LoopForever+0x16>)
 8001240:	4a0c      	ldr	r2, [pc, #48]	@ (8001274 <LoopForever+0x1a>)
 8001242:	2300      	movs	r3, #0
 8001244:	f7ff ffe7 	bl	8001216 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001248:	480b      	ldr	r0, [pc, #44]	@ (8001278 <LoopForever+0x1e>)
 800124a:	490c      	ldr	r1, [pc, #48]	@ (800127c <LoopForever+0x22>)
 800124c:	2300      	movs	r3, #0
 800124e:	f7ff ffe8 	bl	8001222 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001252:	f00f febd 	bl	8010fd0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001256:	f7ff f9d9 	bl	800060c <main>

0800125a <LoopForever>:

LoopForever:
  b LoopForever
 800125a:	e7fe      	b.n	800125a <LoopForever>
  ldr   r0, =_estack
 800125c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001260:	20000008 	.word	0x20000008
 8001264:	20000168 	.word	0x20000168
 8001268:	08011e34 	.word	0x08011e34
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800126c:	20030000 	.word	0x20030000
 8001270:	20030000 	.word	0x20030000
 8001274:	08011f94 	.word	0x08011f94
  INIT_BSS _sbss, _ebss
 8001278:	20000168 	.word	0x20000168
 800127c:	2000acf0 	.word	0x2000acf0

08001280 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <AES1_IRQHandler>
	...

08001284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <HAL_Init+0x3c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a0b      	ldr	r2, [pc, #44]	@ (80012c0 <HAL_Init+0x3c>)
 8001294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001298:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129a:	2003      	movs	r0, #3
 800129c:	f001 fb87 	bl	80029ae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a0:	200f      	movs	r0, #15
 80012a2:	f7ff fe25 	bl	8000ef0 <HAL_InitTick>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	71fb      	strb	r3, [r7, #7]
 80012b0:	e001      	b.n	80012b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012b2:	f7ff fcee 	bl	8000c92 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012b6:	79fb      	ldrb	r3, [r7, #7]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	58004000 	.word	0x58004000

080012c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	@ (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000010 	.word	0x20000010
 80012e8:	200003dc 	.word	0x200003dc

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	@ (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	200003dc 	.word	0x200003dc

08001304 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001308:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <HAL_GetTickPrio+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	2000000c 	.word	0x2000000c

0800131c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3360      	adds	r3, #96	@ 0x60
 8001396:	461a      	mov	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <LL_ADC_SetOffset+0x44>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	4313      	orrs	r3, r2
 80013b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013bc:	bf00      	nop
 80013be:	371c      	adds	r7, #28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	03fff000 	.word	0x03fff000

080013cc <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3360      	adds	r3, #96	@ 0x60
 80013da:	461a      	mov	r2, r3
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3360      	adds	r3, #96	@ 0x60
 8001408:	461a      	mov	r2, r3
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	431a      	orrs	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001446:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001454:	b480      	push	{r7}
 8001456:	b087      	sub	sp, #28
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3330      	adds	r3, #48	@ 0x30
 8001464:	461a      	mov	r2, r3
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	f003 030c 	and.w	r3, r3, #12
 8001470:	4413      	add	r3, r2
 8001472:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	211f      	movs	r1, #31
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	401a      	ands	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	0e9b      	lsrs	r3, r3, #26
 800148c:	f003 011f 	and.w	r1, r3, #31
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	f003 031f 	and.w	r3, r3, #31
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	431a      	orrs	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80014a0:	bf00      	nop
 80014a2:	371c      	adds	r7, #28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b087      	sub	sp, #28
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3314      	adds	r3, #20
 80014fe:	461a      	mov	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	0e5b      	lsrs	r3, r3, #25
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	4413      	add	r3, r2
 800150c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	0d1b      	lsrs	r3, r3, #20
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	2107      	movs	r1, #7
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	401a      	ands	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	0d1b      	lsrs	r3, r3, #20
 8001528:	f003 031f 	and.w	r3, r3, #31
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	431a      	orrs	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800155c:	43db      	mvns	r3, r3
 800155e:	401a      	ands	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0318 	and.w	r3, r3, #24
 8001566:	4908      	ldr	r1, [pc, #32]	@ (8001588 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001568:	40d9      	lsrs	r1, r3
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	400b      	ands	r3, r1
 800156e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001572:	431a      	orrs	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	0007ffff 	.word	0x0007ffff

0800158c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800159c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6093      	str	r3, [r2, #8]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015c4:	d101      	bne.n	80015ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80015e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001614:	d101      	bne.n	800161a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001638:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800163c:	f043 0201 	orr.w	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <LL_ADC_IsEnabled+0x18>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <LL_ADC_IsEnabled+0x1a>
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001686:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800168a:	f043 0204 	orr.w	r2, r3, #4
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d101      	bne.n	80016b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d101      	bne.n	80016dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e12e      	b.n	8001968 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001714:	2b00      	cmp	r3, #0
 8001716:	d109      	bne.n	800172c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fac5 	bl	8000ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff3d 	bl	80015b0 <LL_ADC_IsDeepPowerDownEnabled>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d004      	beq.n	8001746 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff23 	bl	800158c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ff58 	bl	8001600 <LL_ADC_IsInternalRegulatorEnabled>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d115      	bne.n	8001782 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff3c 	bl	80015d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001760:	4b83      	ldr	r3, [pc, #524]	@ (8001970 <HAL_ADC_Init+0x284>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	099b      	lsrs	r3, r3, #6
 8001766:	4a83      	ldr	r2, [pc, #524]	@ (8001974 <HAL_ADC_Init+0x288>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	099b      	lsrs	r3, r3, #6
 800176e:	3301      	adds	r3, #1
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001774:	e002      	b.n	800177c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	3b01      	subs	r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f9      	bne.n	8001776 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff3a 	bl	8001600 <LL_ADC_IsInternalRegulatorEnabled>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10d      	bne.n	80017ae <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001796:	f043 0210 	orr.w	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	f043 0201 	orr.w	r2, r3, #1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff73 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 80017b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 80c7 	bne.w	8001956 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 80c3 	bne.w	8001956 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80017d8:	f043 0202 	orr.w	r2, r3, #2
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff33 	bl	8001650 <LL_ADC_IsEnabled>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10b      	bne.n	8001808 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017f0:	4861      	ldr	r0, [pc, #388]	@ (8001978 <HAL_ADC_Init+0x28c>)
 80017f2:	f7ff ff2d 	bl	8001650 <LL_ADC_IsEnabled>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4619      	mov	r1, r3
 8001802:	485e      	ldr	r0, [pc, #376]	@ (800197c <HAL_ADC_Init+0x290>)
 8001804:	f7ff fd8a 	bl	800131c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7e5b      	ldrb	r3, [r3, #25]
 800180c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001812:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001818:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800181e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001826:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001828:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d106      	bne.n	8001848 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183e:	3b01      	subs	r3, #1
 8001840:	045b      	lsls	r3, r3, #17
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184c:	2b00      	cmp	r3, #0
 800184e:	d009      	beq.n	8001864 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001854:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	4b45      	ldr	r3, [pc, #276]	@ (8001980 <HAL_ADC_Init+0x294>)
 800186c:	4013      	ands	r3, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6812      	ldr	r2, [r2, #0]
 8001872:	69b9      	ldr	r1, [r7, #24]
 8001874:	430b      	orrs	r3, r1
 8001876:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff0e 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 8001882:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff1b 	bl	80016c4 <LL_ADC_INJ_IsConversionOngoing>
 800188e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d13d      	bne.n	8001912 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d13a      	bne.n	8001912 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018a0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018a8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018b8:	f023 0302 	bic.w	r3, r3, #2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	69b9      	ldr	r1, [r7, #24]
 80018c2:	430b      	orrs	r3, r1
 80018c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d118      	bne.n	8001902 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80018da:	f023 0304 	bic.w	r3, r3, #4
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018e6:	4311      	orrs	r1, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80018ec:	4311      	orrs	r1, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018f2:	430a      	orrs	r2, r1
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	611a      	str	r2, [r3, #16]
 8001900:	e007      	b.n	8001912 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0201 	bic.w	r2, r2, #1
 8001910:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d10c      	bne.n	8001934 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001920:	f023 010f 	bic.w	r1, r3, #15
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	1e5a      	subs	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	631a      	str	r2, [r3, #48]	@ 0x30
 8001932:	e007      	b.n	8001944 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 020f 	bic.w	r2, r2, #15
 8001942:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001948:	f023 0303 	bic.w	r3, r3, #3
 800194c:	f043 0201 	orr.w	r2, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	655a      	str	r2, [r3, #84]	@ 0x54
 8001954:	e007      	b.n	8001966 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800195a:	f043 0210 	orr.w	r2, r3, #16
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001966:	7ffb      	ldrb	r3, [r7, #31]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000008 	.word	0x20000008
 8001974:	053e2d63 	.word	0x053e2d63
 8001978:	50040000 	.word	0x50040000
 800197c:	50040300 	.word	0x50040300
 8001980:	fff0c007 	.word	0xfff0c007

08001984 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fe82 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d167      	bne.n	8001a70 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d101      	bne.n	80019ae <HAL_ADC_Start_DMA+0x2a>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e063      	b.n	8001a76 <HAL_ADC_Start_DMA+0xf2>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 fe0c 	bl	80025d4 <ADC_Enable>
 80019bc:	4603      	mov	r3, r0
 80019be:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80019c0:	7dfb      	ldrb	r3, [r7, #23]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d14f      	bne.n	8001a66 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d006      	beq.n	80019f4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ea:	f023 0206 	bic.w	r2, r3, #6
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80019f2:	e002      	b.n	80019fa <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fe:	4a20      	ldr	r2, [pc, #128]	@ (8001a80 <HAL_ADC_Start_DMA+0xfc>)
 8001a00:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a06:	4a1f      	ldr	r2, [pc, #124]	@ (8001a84 <HAL_ADC_Start_DMA+0x100>)
 8001a08:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001a88 <HAL_ADC_Start_DMA+0x104>)
 8001a10:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	221c      	movs	r2, #28
 8001a18:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0210 	orr.w	r2, r2, #16
 8001a30:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 0201 	orr.w	r2, r2, #1
 8001a40:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	3340      	adds	r3, #64	@ 0x40
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f001 f887 	bl	8002b64 <HAL_DMA_Start_IT>
 8001a56:	4603      	mov	r3, r0
 8001a58:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fe09 	bl	8001676 <LL_ADC_REG_StartConversion>
 8001a64:	e006      	b.n	8001a74 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001a6e:	e001      	b.n	8001a74 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a70:	2302      	movs	r3, #2
 8001a72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	080026c9 	.word	0x080026c9
 8001a84:	080027a1 	.word	0x080027a1
 8001a88:	080027bd 	.word	0x080027bd

08001a8c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d017      	beq.n	8001ae2 <HAL_ADC_IRQHandler+0x56>
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d012      	beq.n	8001ae2 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001acc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 feb3 	bl	8002840 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <HAL_ADC_IRQHandler+0x6a>
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d05d      	beq.n	8001bbc <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d058      	beq.n	8001bbc <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d105      	bne.n	8001b22 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b1a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fc81 	bl	800142e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d03d      	beq.n	8001bae <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b40:	d035      	beq.n	8001bae <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d12e      	bne.n	8001bae <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fda2 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11a      	bne.n	8001b96 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 020c 	bic.w	r2, r2, #12
 8001b6e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d112      	bne.n	8001bae <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b8c:	f043 0201 	orr.w	r2, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b94:	e00b      	b.n	8001bae <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b9a:	f043 0210 	orr.w	r2, r3, #16
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba6:	f043 0201 	orr.w	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f922 	bl	8001df8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	220c      	movs	r2, #12
 8001bba:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	f003 0320 	and.w	r3, r3, #32
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <HAL_ADC_IRQHandler+0x144>
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 0320 	and.w	r3, r3, #32
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d074      	beq.n	8001cc4 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d06f      	beq.n	8001cc4 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d105      	bne.n	8001bfc <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fc61 	bl	80014c8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001c06:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fc0e 	bl	800142e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c12:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d049      	beq.n	8001cb6 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d007      	beq.n	8001c3c <HAL_ADC_IRQHandler+0x1b0>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d041      	beq.n	8001cb6 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d13c      	bne.n	8001cb6 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c46:	2b40      	cmp	r3, #64	@ 0x40
 8001c48:	d135      	bne.n	8001cb6 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d12e      	bne.n	8001cb6 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fd31 	bl	80016c4 <LL_ADC_INJ_IsConversionOngoing>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d11a      	bne.n	8001c9e <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c76:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d112      	bne.n	8001cb6 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c94:	f043 0201 	orr.w	r2, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c9c:	e00b      	b.n	8001cb6 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca2:	f043 0210 	orr.w	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cae:	f043 0201 	orr.w	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fd9a 	bl	80027f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2260      	movs	r2, #96	@ 0x60
 8001cc2:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d011      	beq.n	8001cf2 <HAL_ADC_IRQHandler+0x266>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00c      	beq.n	8001cf2 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cdc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f89b 	bl	8001e20 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2280      	movs	r2, #128	@ 0x80
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d012      	beq.n	8001d22 <HAL_ADC_IRQHandler+0x296>
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 fd80 	bl	8002818 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d012      	beq.n	8001d52 <HAL_ADC_IRQHandler+0x2c6>
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00d      	beq.n	8001d52 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d3a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 fd72 	bl	800282c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d02b      	beq.n	8001db4 <HAL_ADC_IRQHandler+0x328>
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d026      	beq.n	8001db4 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	e009      	b.n	8001d88 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fb97 	bl	80014ac <LL_ADC_REG_GetDMATransfer>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8001d84:	2301      	movs	r3, #1
 8001d86:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d10e      	bne.n	8001dac <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d92:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9e:	f043 0202 	orr.w	r2, r3, #2
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f844 	bl	8001e34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2210      	movs	r2, #16
 8001db2:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d018      	beq.n	8001df0 <HAL_ADC_IRQHandler+0x364>
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dcc:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd8:	f043 0208 	orr.w	r2, r3, #8
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001de8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fd0a 	bl	8002804 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8001df0:	bf00      	nop
 8001df2:	3720      	adds	r7, #32
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b0b6      	sub	sp, #216	@ 0xd8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x22>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e39f      	b.n	80025aa <HAL_ADC_ConfigChannel+0x762>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fc11 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 8384 	bne.w	800258c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	f7ff fadf 	bl	8001454 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fbff 	bl	800169e <LL_ADC_REG_IsConversionOngoing>
 8001ea0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fc0b 	bl	80016c4 <LL_ADC_INJ_IsConversionOngoing>
 8001eae:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 81a6 	bne.w	8002208 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ebc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f040 81a1 	bne.w	8002208 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6819      	ldr	r1, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f7ff fb0b 	bl	80014ee <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	08db      	lsrs	r3, r3, #3
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d00a      	beq.n	8001f10 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6919      	ldr	r1, [r3, #16]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f0a:	f7ff fa3b 	bl	8001384 <LL_ADC_SetOffset>
 8001f0e:	e17b      	b.n	8002208 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fa58 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10a      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0xf4>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fa4d 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001f32:	4603      	mov	r3, r0
 8001f34:	0e9b      	lsrs	r3, r3, #26
 8001f36:	f003 021f 	and.w	r2, r3, #31
 8001f3a:	e01e      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x132>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fa42 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8001f6a:	2320      	movs	r3, #32
 8001f6c:	e004      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8001f6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d105      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x14a>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	0e9b      	lsrs	r3, r3, #26
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	e018      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x17c>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001faa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001fae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8001fb6:	2320      	movs	r3, #32
 8001fb8:	e004      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8001fba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d106      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fa11 	bl	80013f8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2101      	movs	r1, #1
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff f9f5 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10a      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x1ba>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff f9ea 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	0e9b      	lsrs	r3, r3, #26
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	e01e      	b.n	8002040 <HAL_ADC_ConfigChannel+0x1f8>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2101      	movs	r1, #1
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff f9df 	bl	80013cc <LL_ADC_GetOffsetChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002020:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002024:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002028:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002030:	2320      	movs	r3, #32
 8002032:	e004      	b.n	800203e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002034:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	b2db      	uxtb	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002048:	2b00      	cmp	r3, #0
 800204a:	d105      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x210>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	0e9b      	lsrs	r3, r3, #26
 8002052:	f003 031f 	and.w	r3, r3, #31
 8002056:	e018      	b.n	800208a <HAL_ADC_ConfigChannel+0x242>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800206c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002070:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002074:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800207c:	2320      	movs	r3, #32
 800207e:	e004      	b.n	800208a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002080:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002084:	fab3 f383 	clz	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	429a      	cmp	r2, r3
 800208c:	d106      	bne.n	800209c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2200      	movs	r2, #0
 8002094:	2101      	movs	r1, #1
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff f9ae 	bl	80013f8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2102      	movs	r1, #2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff f992 	bl	80013cc <LL_ADC_GetOffsetChannel>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10a      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x280>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2102      	movs	r1, #2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff f987 	bl	80013cc <LL_ADC_GetOffsetChannel>
 80020be:	4603      	mov	r3, r0
 80020c0:	0e9b      	lsrs	r3, r3, #26
 80020c2:	f003 021f 	and.w	r2, r3, #31
 80020c6:	e01e      	b.n	8002106 <HAL_ADC_ConfigChannel+0x2be>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2102      	movs	r1, #2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff f97c 	bl	80013cc <LL_ADC_GetOffsetChannel>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80020e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80020ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80020f6:	2320      	movs	r3, #32
 80020f8:	e004      	b.n	8002104 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80020fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210e:	2b00      	cmp	r3, #0
 8002110:	d105      	bne.n	800211e <HAL_ADC_ConfigChannel+0x2d6>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	0e9b      	lsrs	r3, r3, #26
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	e016      	b.n	800214c <HAL_ADC_ConfigChannel+0x304>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002130:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002132:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002136:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800213e:	2320      	movs	r3, #32
 8002140:	e004      	b.n	800214c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002142:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	429a      	cmp	r2, r3
 800214e:	d106      	bne.n	800215e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2200      	movs	r2, #0
 8002156:	2102      	movs	r1, #2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff f94d 	bl	80013f8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2103      	movs	r1, #3
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff f931 	bl	80013cc <LL_ADC_GetOffsetChannel>
 800216a:	4603      	mov	r3, r0
 800216c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10a      	bne.n	800218a <HAL_ADC_ConfigChannel+0x342>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2103      	movs	r1, #3
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f926 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8002180:	4603      	mov	r3, r0
 8002182:	0e9b      	lsrs	r3, r3, #26
 8002184:	f003 021f 	and.w	r2, r3, #31
 8002188:	e017      	b.n	80021ba <HAL_ADC_ConfigChannel+0x372>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2103      	movs	r1, #3
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff f91b 	bl	80013cc <LL_ADC_GetOffsetChannel>
 8002196:	4603      	mov	r3, r0
 8002198:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80021a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021a4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80021a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80021ac:	2320      	movs	r3, #32
 80021ae:	e003      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80021b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d105      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x38a>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	0e9b      	lsrs	r3, r3, #26
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	e011      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x3ae>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80021e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80021e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80021ea:	2320      	movs	r3, #32
 80021ec:	e003      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80021ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d106      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2200      	movs	r2, #0
 8002200:	2103      	movs	r1, #3
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff f8f8 	bl	80013f8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fa1f 	bl	8001650 <LL_ADC_IsEnabled>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 81c2 	bne.w	800259e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6819      	ldr	r1, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	461a      	mov	r2, r3
 8002228:	f7ff f98c 	bl	8001544 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a8e      	ldr	r2, [pc, #568]	@ (800246c <HAL_ADC_ConfigChannel+0x624>)
 8002232:	4293      	cmp	r3, r2
 8002234:	f040 8130 	bne.w	8002498 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10b      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x418>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	0e9b      	lsrs	r3, r3, #26
 800224e:	3301      	adds	r3, #1
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2b09      	cmp	r3, #9
 8002256:	bf94      	ite	ls
 8002258:	2301      	movls	r3, #1
 800225a:	2300      	movhi	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	e019      	b.n	8002294 <HAL_ADC_ConfigChannel+0x44c>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800226e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002270:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002272:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002278:	2320      	movs	r3, #32
 800227a:	e003      	b.n	8002284 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800227c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	3301      	adds	r3, #1
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	2b09      	cmp	r3, #9
 800228c:	bf94      	ite	ls
 800228e:	2301      	movls	r3, #1
 8002290:	2300      	movhi	r3, #0
 8002292:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002294:	2b00      	cmp	r3, #0
 8002296:	d079      	beq.n	800238c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d107      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x46c>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0e9b      	lsrs	r3, r3, #26
 80022aa:	3301      	adds	r3, #1
 80022ac:	069b      	lsls	r3, r3, #26
 80022ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022b2:	e015      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x498>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80022c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80022c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80022cc:	2320      	movs	r3, #32
 80022ce:	e003      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80022d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	069b      	lsls	r3, r3, #26
 80022dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d109      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x4b8>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0e9b      	lsrs	r3, r3, #26
 80022f2:	3301      	adds	r3, #1
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	2101      	movs	r1, #1
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	e017      	b.n	8002330 <HAL_ADC_ConfigChannel+0x4e8>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800230e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002310:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002318:	2320      	movs	r3, #32
 800231a:	e003      	b.n	8002324 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800231c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	3301      	adds	r3, #1
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	2101      	movs	r1, #1
 800232c:	fa01 f303 	lsl.w	r3, r1, r3
 8002330:	ea42 0103 	orr.w	r1, r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x50e>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	0e9b      	lsrs	r3, r3, #26
 8002346:	3301      	adds	r3, #1
 8002348:	f003 021f 	and.w	r2, r3, #31
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	051b      	lsls	r3, r3, #20
 8002354:	e018      	b.n	8002388 <HAL_ADC_ConfigChannel+0x540>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800236e:	2320      	movs	r3, #32
 8002370:	e003      	b.n	800237a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002374:	fab3 f383 	clz	r3, r3
 8002378:	b2db      	uxtb	r3, r3
 800237a:	3301      	adds	r3, #1
 800237c:	f003 021f 	and.w	r2, r3, #31
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002388:	430b      	orrs	r3, r1
 800238a:	e080      	b.n	800248e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002394:	2b00      	cmp	r3, #0
 8002396:	d107      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x560>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	0e9b      	lsrs	r3, r3, #26
 800239e:	3301      	adds	r3, #1
 80023a0:	069b      	lsls	r3, r3, #26
 80023a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023a6:	e015      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x58c>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80023b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80023ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80023c0:	2320      	movs	r3, #32
 80023c2:	e003      	b.n	80023cc <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80023c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	069b      	lsls	r3, r3, #26
 80023d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x5ac>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0e9b      	lsrs	r3, r3, #26
 80023e6:	3301      	adds	r3, #1
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	2101      	movs	r1, #1
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	e017      	b.n	8002424 <HAL_ADC_ConfigChannel+0x5dc>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	61fb      	str	r3, [r7, #28]
  return result;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800240c:	2320      	movs	r3, #32
 800240e:	e003      	b.n	8002418 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	3301      	adds	r3, #1
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	2101      	movs	r1, #1
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	ea42 0103 	orr.w	r1, r2, r3
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10d      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x608>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0e9b      	lsrs	r3, r3, #26
 800243a:	3301      	adds	r3, #1
 800243c:	f003 021f 	and.w	r2, r3, #31
 8002440:	4613      	mov	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4413      	add	r3, r2
 8002446:	3b1e      	subs	r3, #30
 8002448:	051b      	lsls	r3, r3, #20
 800244a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800244e:	e01d      	b.n	800248c <HAL_ADC_ConfigChannel+0x644>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	613b      	str	r3, [r7, #16]
  return result;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d103      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002468:	2320      	movs	r3, #32
 800246a:	e005      	b.n	8002478 <HAL_ADC_ConfigChannel+0x630>
 800246c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	3301      	adds	r3, #1
 800247a:	f003 021f 	and.w	r2, r3, #31
 800247e:	4613      	mov	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4413      	add	r3, r2
 8002484:	3b1e      	subs	r3, #30
 8002486:	051b      	lsls	r3, r3, #20
 8002488:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800248c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002492:	4619      	mov	r1, r3
 8002494:	f7ff f82b 	bl	80014ee <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b45      	ldr	r3, [pc, #276]	@ (80025b4 <HAL_ADC_ConfigChannel+0x76c>)
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d07c      	beq.n	800259e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024a4:	4844      	ldr	r0, [pc, #272]	@ (80025b8 <HAL_ADC_ConfigChannel+0x770>)
 80024a6:	f7fe ff5f 	bl	8001368 <LL_ADC_GetCommonPathInternalCh>
 80024aa:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024ae:	4843      	ldr	r0, [pc, #268]	@ (80025bc <HAL_ADC_ConfigChannel+0x774>)
 80024b0:	f7ff f8ce 	bl	8001650 <LL_ADC_IsEnabled>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d15e      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a40      	ldr	r2, [pc, #256]	@ (80025c0 <HAL_ADC_ConfigChannel+0x778>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d127      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x6cc>
 80024c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d121      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a39      	ldr	r2, [pc, #228]	@ (80025bc <HAL_ADC_ConfigChannel+0x774>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d161      	bne.n	800259e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80024da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024e2:	4619      	mov	r1, r3
 80024e4:	4834      	ldr	r0, [pc, #208]	@ (80025b8 <HAL_ADC_ConfigChannel+0x770>)
 80024e6:	f7fe ff2c 	bl	8001342 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024ea:	4b36      	ldr	r3, [pc, #216]	@ (80025c4 <HAL_ADC_ConfigChannel+0x77c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	099b      	lsrs	r3, r3, #6
 80024f0:	4a35      	ldr	r2, [pc, #212]	@ (80025c8 <HAL_ADC_ConfigChannel+0x780>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	099b      	lsrs	r3, r3, #6
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002504:	e002      	b.n	800250c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	3b01      	subs	r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f9      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002512:	e044      	b.n	800259e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a2c      	ldr	r2, [pc, #176]	@ (80025cc <HAL_ADC_ConfigChannel+0x784>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d113      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x6fe>
 800251e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002522:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10d      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a23      	ldr	r2, [pc, #140]	@ (80025bc <HAL_ADC_ConfigChannel+0x774>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d134      	bne.n	800259e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002534:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002538:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800253c:	4619      	mov	r1, r3
 800253e:	481e      	ldr	r0, [pc, #120]	@ (80025b8 <HAL_ADC_ConfigChannel+0x770>)
 8002540:	f7fe feff 	bl	8001342 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002544:	e02b      	b.n	800259e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a21      	ldr	r2, [pc, #132]	@ (80025d0 <HAL_ADC_ConfigChannel+0x788>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d126      	bne.n	800259e <HAL_ADC_ConfigChannel+0x756>
 8002550:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002554:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d120      	bne.n	800259e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a16      	ldr	r2, [pc, #88]	@ (80025bc <HAL_ADC_ConfigChannel+0x774>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d11b      	bne.n	800259e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002566:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800256a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800256e:	4619      	mov	r1, r3
 8002570:	4811      	ldr	r0, [pc, #68]	@ (80025b8 <HAL_ADC_ConfigChannel+0x770>)
 8002572:	f7fe fee6 	bl	8001342 <LL_ADC_SetCommonPathInternalCh>
 8002576:	e012      	b.n	800259e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257c:	f043 0220 	orr.w	r2, r3, #32
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800258a:	e008      	b.n	800259e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002590:	f043 0220 	orr.w	r2, r3, #32
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80025a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	37d8      	adds	r7, #216	@ 0xd8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	80080000 	.word	0x80080000
 80025b8:	50040300 	.word	0x50040300
 80025bc:	50040000 	.word	0x50040000
 80025c0:	c7520000 	.word	0xc7520000
 80025c4:	20000008 	.word	0x20000008
 80025c8:	053e2d63 	.word	0x053e2d63
 80025cc:	cb840000 	.word	0xcb840000
 80025d0:	80000001 	.word	0x80000001

080025d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff f833 	bl	8001650 <LL_ADC_IsEnabled>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d15e      	bne.n	80026ae <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	4b30      	ldr	r3, [pc, #192]	@ (80026b8 <ADC_Enable+0xe4>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00d      	beq.n	800261a <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002602:	f043 0210 	orr.w	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e04a      	b.n	80026b0 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff f802 	bl	8001628 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002624:	4825      	ldr	r0, [pc, #148]	@ (80026bc <ADC_Enable+0xe8>)
 8002626:	f7fe fe9f 	bl	8001368 <LL_ADC_GetCommonPathInternalCh>
 800262a:	4603      	mov	r3, r0
 800262c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00f      	beq.n	8002654 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002634:	4b22      	ldr	r3, [pc, #136]	@ (80026c0 <ADC_Enable+0xec>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	099b      	lsrs	r3, r3, #6
 800263a:	4a22      	ldr	r2, [pc, #136]	@ (80026c4 <ADC_Enable+0xf0>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	3301      	adds	r3, #1
 8002644:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002646:	e002      	b.n	800264e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	3b01      	subs	r3, #1
 800264c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f9      	bne.n	8002648 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002654:	f7fe fe4a 	bl	80012ec <HAL_GetTick>
 8002658:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800265a:	e021      	b.n	80026a0 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe fff5 	bl	8001650 <LL_ADC_IsEnabled>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d104      	bne.n	8002676 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe ffd9 	bl	8001628 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002676:	f7fe fe39 	bl	80012ec <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d90d      	bls.n	80026a0 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002688:	f043 0210 	orr.w	r2, r3, #16
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	f043 0201 	orr.w	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e007      	b.n	80026b0 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d1d6      	bne.n	800265c <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	8000003f 	.word	0x8000003f
 80026bc:	50040300 	.word	0x50040300
 80026c0:	20000008 	.word	0x20000008
 80026c4:	053e2d63 	.word	0x053e2d63

080026c8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026da:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d14b      	bne.n	800277a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d021      	beq.n	8002740 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe fe94 	bl	800142e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d032      	beq.n	8002772 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d12b      	bne.n	8002772 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d11f      	bne.n	8002772 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002736:	f043 0201 	orr.w	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	655a      	str	r2, [r3, #84]	@ 0x54
 800273e:	e018      	b.n	8002772 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d111      	bne.n	8002772 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002752:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d105      	bne.n	8002772 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276a:	f043 0201 	orr.w	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f7ff fb40 	bl	8001df8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002778:	e00e      	b.n	8002798 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff fb54 	bl	8001e34 <HAL_ADC_ErrorCallback>
}
 800278c:	e004      	b.n	8002798 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	4798      	blx	r3
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f7ff fb2c 	bl	8001e0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027da:	f043 0204 	orr.w	r2, r3, #4
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f7ff fb26 	bl	8001e34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002864:	4b0c      	ldr	r3, [pc, #48]	@ (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002870:	4013      	ands	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800287c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002886:	4a04      	ldr	r2, [pc, #16]	@ (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	60d3      	str	r3, [r2, #12]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a0:	4b04      	ldr	r3, [pc, #16]	@ (80028b4 <__NVIC_GetPriorityGrouping+0x18>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	f003 0307 	and.w	r3, r3, #7
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	db0b      	blt.n	80028e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	f003 021f 	and.w	r2, r3, #31
 80028d0:	4907      	ldr	r1, [pc, #28]	@ (80028f0 <__NVIC_EnableIRQ+0x38>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2001      	movs	r0, #1
 80028da:	fa00 f202 	lsl.w	r2, r0, r2
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000e100 	.word	0xe000e100

080028f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	2b00      	cmp	r3, #0
 8002906:	db0a      	blt.n	800291e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	490c      	ldr	r1, [pc, #48]	@ (8002940 <__NVIC_SetPriority+0x4c>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	0112      	lsls	r2, r2, #4
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	440b      	add	r3, r1
 8002918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800291c:	e00a      	b.n	8002934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4908      	ldr	r1, [pc, #32]	@ (8002944 <__NVIC_SetPriority+0x50>)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	3b04      	subs	r3, #4
 800292c:	0112      	lsls	r2, r2, #4
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	440b      	add	r3, r1
 8002932:	761a      	strb	r2, [r3, #24]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000e100 	.word	0xe000e100
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	@ 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f1c3 0307 	rsb	r3, r3, #7
 8002962:	2b04      	cmp	r3, #4
 8002964:	bf28      	it	cs
 8002966:	2304      	movcs	r3, #4
 8002968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3304      	adds	r3, #4
 800296e:	2b06      	cmp	r3, #6
 8002970:	d902      	bls.n	8002978 <NVIC_EncodePriority+0x30>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3b03      	subs	r3, #3
 8002976:	e000      	b.n	800297a <NVIC_EncodePriority+0x32>
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	f04f 32ff 	mov.w	r2, #4294967295
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	401a      	ands	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002990:	f04f 31ff 	mov.w	r1, #4294967295
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43d9      	mvns	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	4313      	orrs	r3, r2
         );
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3724      	adds	r7, #36	@ 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ff4c 	bl	8002854 <__NVIC_SetPriorityGrouping>
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029d2:	f7ff ff63 	bl	800289c <__NVIC_GetPriorityGrouping>
 80029d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	6978      	ldr	r0, [r7, #20]
 80029de:	f7ff ffb3 	bl	8002948 <NVIC_EncodePriority>
 80029e2:	4602      	mov	r2, r0
 80029e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff82 	bl	80028f4 <__NVIC_SetPriority>
}
 80029f0:	bf00      	nop
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff ff56 	bl	80028b8 <__NVIC_EnableIRQ>
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e08e      	b.n	8002b44 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b47      	ldr	r3, [pc, #284]	@ (8002b4c <HAL_DMA_Init+0x138>)
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d80f      	bhi.n	8002a52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b45      	ldr	r3, [pc, #276]	@ (8002b50 <HAL_DMA_Init+0x13c>)
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a45      	ldr	r2, [pc, #276]	@ (8002b54 <HAL_DMA_Init+0x140>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	009a      	lsls	r2, r3, #2
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a42      	ldr	r2, [pc, #264]	@ (8002b58 <HAL_DMA_Init+0x144>)
 8002a4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a50:	e00e      	b.n	8002a70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b40      	ldr	r3, [pc, #256]	@ (8002b5c <HAL_DMA_Init+0x148>)
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4a3d      	ldr	r2, [pc, #244]	@ (8002b54 <HAL_DMA_Init+0x140>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	009a      	lsls	r2, r3, #2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a3c      	ldr	r2, [pc, #240]	@ (8002b60 <HAL_DMA_Init+0x14c>)
 8002a6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f9b6 	bl	8002e34 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ad0:	d102      	bne.n	8002ad8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002ae4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002aee:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d010      	beq.n	8002b1a <HAL_DMA_Init+0x106>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d80c      	bhi.n	8002b1a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f9d5 	bl	8002eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	e008      	b.n	8002b2c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40020407 	.word	0x40020407
 8002b50:	bffdfff8 	.word	0xbffdfff8
 8002b54:	cccccccd 	.word	0xcccccccd
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	bffdfbf8 	.word	0xbffdfbf8
 8002b60:	40020400 	.word	0x40020400

08002b64 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_DMA_Start_IT+0x20>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e066      	b.n	8002c52 <HAL_DMA_Start_IT+0xee>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d155      	bne.n	8002c44 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0201 	bic.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f8fb 	bl	8002db8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 020e 	orr.w	r2, r2, #14
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	e00f      	b.n	8002bfc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0204 	bic.w	r2, r2, #4
 8002bea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 020a 	orr.w	r2, r2, #10
 8002bfa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c18:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c30:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	e005      	b.n	8002c50 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	f003 031c 	and.w	r3, r3, #28
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d026      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x7a>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d021      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d107      	bne.n	8002cae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0204 	bic.w	r2, r2, #4
 8002cac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	f003 021c 	and.w	r2, r3, #28
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	2104      	movs	r1, #4
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d071      	beq.n	8002dae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002cd2:	e06c      	b.n	8002dae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd8:	f003 031c 	and.w	r3, r3, #28
 8002cdc:	2202      	movs	r2, #2
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d02e      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xec>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d029      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 020a 	bic.w	r2, r2, #10
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1c:	f003 021c 	and.w	r2, r3, #28
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	2102      	movs	r1, #2
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d038      	beq.n	8002dae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002d44:	e033      	b.n	8002dae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4a:	f003 031c 	and.w	r3, r3, #28
 8002d4e:	2208      	movs	r2, #8
 8002d50:	409a      	lsls	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d02a      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x156>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d025      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 020e 	bic.w	r2, r2, #14
 8002d72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d78:	f003 021c 	and.w	r2, r3, #28
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	2101      	movs	r1, #1
 8002d82:	fa01 f202 	lsl.w	r2, r1, r2
 8002d86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d004      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002dae:	bf00      	nop
 8002db0:	bf00      	nop
}
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002dce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002de0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de6:	f003 021c 	and.w	r2, r3, #28
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	2101      	movs	r1, #1
 8002df0:	fa01 f202 	lsl.w	r2, r1, r2
 8002df4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b10      	cmp	r3, #16
 8002e04:	d108      	bne.n	8002e18 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e16:	e007      	b.n	8002e28 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	60da      	str	r2, [r3, #12]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b17      	ldr	r3, [pc, #92]	@ (8002ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d80a      	bhi.n	8002e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4c:	089b      	lsrs	r3, r3, #2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e54:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6493      	str	r3, [r2, #72]	@ 0x48
 8002e5c:	e007      	b.n	8002e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	009a      	lsls	r2, r3, #2
 8002e66:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e68:	4413      	add	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3b08      	subs	r3, #8
 8002e76:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a0a      	ldr	r2, [pc, #40]	@ (8002eac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e84:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40020407 	.word	0x40020407
 8002ea4:	4002081c 	.word	0x4002081c
 8002ea8:	cccccccd 	.word	0xcccccccd
 8002eac:	40020880 	.word	0x40020880

08002eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	461a      	mov	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a09      	ldr	r2, [pc, #36]	@ (8002ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002ed4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2201      	movs	r2, #1
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	1000823f 	.word	0x1000823f
 8002ef8:	40020940 	.word	0x40020940

08002efc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f0a:	e14c      	b.n	80031a6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	2101      	movs	r1, #1
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	fa01 f303 	lsl.w	r3, r1, r3
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 813e 	beq.w	80031a0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d005      	beq.n	8002f3c <HAL_GPIO_Init+0x40>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d130      	bne.n	8002f9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	2203      	movs	r2, #3
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f72:	2201      	movs	r2, #1
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	f003 0201 	and.w	r2, r3, #1
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d017      	beq.n	8002fda <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d123      	bne.n	800302e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	08da      	lsrs	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3208      	adds	r2, #8
 8002fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	220f      	movs	r2, #15
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	08da      	lsrs	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3208      	adds	r2, #8
 8003028:	6939      	ldr	r1, [r7, #16]
 800302a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	2203      	movs	r2, #3
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0203 	and.w	r2, r3, #3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8098 	beq.w	80031a0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003070:	4a54      	ldr	r2, [pc, #336]	@ (80031c4 <HAL_GPIO_Init+0x2c8>)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	089b      	lsrs	r3, r3, #2
 8003076:	3302      	adds	r3, #2
 8003078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	220f      	movs	r2, #15
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4013      	ands	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800309a:	d019      	beq.n	80030d0 <HAL_GPIO_Init+0x1d4>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a4a      	ldr	r2, [pc, #296]	@ (80031c8 <HAL_GPIO_Init+0x2cc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d013      	beq.n	80030cc <HAL_GPIO_Init+0x1d0>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a49      	ldr	r2, [pc, #292]	@ (80031cc <HAL_GPIO_Init+0x2d0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00d      	beq.n	80030c8 <HAL_GPIO_Init+0x1cc>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a48      	ldr	r2, [pc, #288]	@ (80031d0 <HAL_GPIO_Init+0x2d4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d007      	beq.n	80030c4 <HAL_GPIO_Init+0x1c8>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a47      	ldr	r2, [pc, #284]	@ (80031d4 <HAL_GPIO_Init+0x2d8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d101      	bne.n	80030c0 <HAL_GPIO_Init+0x1c4>
 80030bc:	2304      	movs	r3, #4
 80030be:	e008      	b.n	80030d2 <HAL_GPIO_Init+0x1d6>
 80030c0:	2307      	movs	r3, #7
 80030c2:	e006      	b.n	80030d2 <HAL_GPIO_Init+0x1d6>
 80030c4:	2303      	movs	r3, #3
 80030c6:	e004      	b.n	80030d2 <HAL_GPIO_Init+0x1d6>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e002      	b.n	80030d2 <HAL_GPIO_Init+0x1d6>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_GPIO_Init+0x1d6>
 80030d0:	2300      	movs	r3, #0
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	f002 0203 	and.w	r2, r2, #3
 80030d8:	0092      	lsls	r2, r2, #2
 80030da:	4093      	lsls	r3, r2
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030e2:	4938      	ldr	r1, [pc, #224]	@ (80031c4 <HAL_GPIO_Init+0x2c8>)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	3302      	adds	r3, #2
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030f0:	4b39      	ldr	r3, [pc, #228]	@ (80031d8 <HAL_GPIO_Init+0x2dc>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003114:	4a30      	ldr	r2, [pc, #192]	@ (80031d8 <HAL_GPIO_Init+0x2dc>)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800311a:	4b2f      	ldr	r3, [pc, #188]	@ (80031d8 <HAL_GPIO_Init+0x2dc>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	43db      	mvns	r3, r3
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4013      	ands	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800313e:	4a26      	ldr	r2, [pc, #152]	@ (80031d8 <HAL_GPIO_Init+0x2dc>)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003144:	4b24      	ldr	r3, [pc, #144]	@ (80031d8 <HAL_GPIO_Init+0x2dc>)
 8003146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800314a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	43db      	mvns	r3, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800316a:	4a1b      	ldr	r2, [pc, #108]	@ (80031d8 <HAL_GPIO_Init+0x2dc>)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003172:	4b19      	ldr	r3, [pc, #100]	@ (80031d8 <HAL_GPIO_Init+0x2dc>)
 8003174:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	43db      	mvns	r3, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003198:	4a0f      	ldr	r2, [pc, #60]	@ (80031d8 <HAL_GPIO_Init+0x2dc>)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3301      	adds	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f47f aeab 	bne.w	8002f0c <HAL_GPIO_Init+0x10>
  }
}
 80031b6:	bf00      	nop
 80031b8:	bf00      	nop
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40010000 	.word	0x40010000
 80031c8:	48000400 	.word	0x48000400
 80031cc:	48000800 	.word	0x48000800
 80031d0:	48000c00 	.word	0x48000c00
 80031d4:	48001000 	.word	0x48001000
 80031d8:	58000800 	.word	0x58000800

080031dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	807b      	strh	r3, [r7, #2]
 80031e8:	4613      	mov	r3, r2
 80031ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031ec:	787b      	ldrb	r3, [r7, #1]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031f2:	887a      	ldrh	r2, [r7, #2]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031f8:	e002      	b.n	8003200 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4013      	ands	r3, r2
 8003224:	041a      	lsls	r2, r3, #16
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	43d9      	mvns	r1, r3
 800322a:	887b      	ldrh	r3, [r7, #2]
 800322c:	400b      	ands	r3, r1
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	619a      	str	r2, [r3, #24]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e08d      	b.n	800336e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fd fd82 	bl	8000d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2224      	movs	r2, #36	@ 0x24
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0201 	bic.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003290:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d107      	bne.n	80032ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	e006      	b.n	80032c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80032c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d108      	bne.n	80032e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032de:	605a      	str	r2, [r3, #4]
 80032e0:	e007      	b.n	80032f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003300:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003304:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003314:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69d9      	ldr	r1, [r3, #28]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1a      	ldr	r2, [r3, #32]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b20      	cmp	r3, #32
 800338a:	d138      	bne.n	80033fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003396:	2302      	movs	r3, #2
 8003398:	e032      	b.n	8003400 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2224      	movs	r2, #36	@ 0x24
 80033a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0201 	bic.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6819      	ldr	r1, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0201 	orr.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
  }
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b20      	cmp	r3, #32
 8003420:	d139      	bne.n	8003496 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800342c:	2302      	movs	r3, #2
 800342e:	e033      	b.n	8003498 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	@ 0x24
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800345e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
  }
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e0c0      	b.n	8003638 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f00d f8b4 	bl	8010638 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2203      	movs	r2, #3
 80034d4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f004 fd28 	bl	8007f32 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e2:	2300      	movs	r3, #0
 80034e4:	73fb      	strb	r3, [r7, #15]
 80034e6:	e03e      	b.n	8003566 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	440b      	add	r3, r1
 80034f6:	3311      	adds	r3, #17
 80034f8:	2201      	movs	r2, #1
 80034fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034fc:	7bfa      	ldrb	r2, [r7, #15]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	440b      	add	r3, r1
 800350a:	3310      	adds	r3, #16
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	440b      	add	r3, r1
 800351e:	3313      	adds	r3, #19
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	440b      	add	r3, r1
 8003532:	3320      	adds	r3, #32
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	440b      	add	r3, r1
 8003546:	3324      	adds	r3, #36	@ 0x24
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	440b      	add	r3, r1
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	3301      	adds	r3, #1
 8003564:	73fb      	strb	r3, [r7, #15]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	791b      	ldrb	r3, [r3, #4]
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	429a      	cmp	r2, r3
 800356e:	d3bb      	bcc.n	80034e8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003570:	2300      	movs	r3, #0
 8003572:	73fb      	strb	r3, [r7, #15]
 8003574:	e044      	b.n	8003600 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003576:	7bfa      	ldrb	r2, [r7, #15]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	440b      	add	r3, r1
 8003584:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003588:	2200      	movs	r2, #0
 800358a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	440b      	add	r3, r1
 800359a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	440b      	add	r3, r1
 80035b0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	440b      	add	r3, r1
 80035c6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035ce:	7bfa      	ldrb	r2, [r7, #15]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	440b      	add	r3, r1
 80035dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	440b      	add	r3, r1
 80035f2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	3301      	adds	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	791b      	ldrb	r3, [r3, #4]
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	429a      	cmp	r2, r3
 8003608:	d3b5      	bcc.n	8003576 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3304      	adds	r3, #4
 8003612:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003616:	f004 fca7 	bl	8007f68 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	7a9b      	ldrb	r3, [r3, #10]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d102      	bne.n	8003636 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f001 fc40 	bl	8004eb6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_PCD_Start+0x16>
 8003652:	2302      	movs	r3, #2
 8003654:	e012      	b.n	800367c <HAL_PCD_Start+0x3c>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f004 fc4e 	bl	8007f04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f006 ff0e 	bl	800a48e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f006 ff13 	bl	800a4bc <USB_ReadInterrupts>
 8003696:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fb04 	bl	8003cb0 <PCD_EP_ISR_Handler>

    return;
 80036a8:	e110      	b.n	80038cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d013      	beq.n	80036dc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036bc:	b29a      	uxth	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036c6:	b292      	uxth	r2, r2
 80036c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f00d f840 	bl	8010752 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80036d2:	2100      	movs	r1, #0
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f8fc 	bl	80038d2 <HAL_PCD_SetAddress>

    return;
 80036da:	e0f7      	b.n	80038cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00c      	beq.n	8003700 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036f8:	b292      	uxth	r2, r2
 80036fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80036fe:	e0e5      	b.n	80038cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00c      	beq.n	8003724 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003712:	b29a      	uxth	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800371c:	b292      	uxth	r2, r2
 800371e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003722:	e0d3      	b.n	80038cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d034      	beq.n	8003798 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003736:	b29a      	uxth	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0204 	bic.w	r2, r2, #4
 8003740:	b292      	uxth	r2, r2
 8003742:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800374e:	b29a      	uxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0208 	bic.w	r2, r2, #8
 8003758:	b292      	uxth	r2, r2
 800375a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003764:	2b01      	cmp	r3, #1
 8003766:	d107      	bne.n	8003778 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003770:	2100      	movs	r1, #0
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f00d f9e2 	bl	8010b3c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f00d f823 	bl	80107c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003786:	b29a      	uxth	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003790:	b292      	uxth	r2, r2
 8003792:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003796:	e099      	b.n	80038cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d027      	beq.n	80037f2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0208 	orr.w	r2, r2, #8
 80037b4:	b292      	uxth	r2, r2
 80037b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037cc:	b292      	uxth	r2, r2
 80037ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0204 	orr.w	r2, r2, #4
 80037e4:	b292      	uxth	r2, r2
 80037e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f00c ffd0 	bl	8010790 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80037f0:	e06c      	b.n	80038cc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d040      	beq.n	800387e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003804:	b29a      	uxth	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800380e:	b292      	uxth	r2, r2
 8003810:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d12b      	bne.n	8003876 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003826:	b29a      	uxth	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0204 	orr.w	r2, r2, #4
 8003830:	b292      	uxth	r2, r2
 8003832:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800383e:	b29a      	uxth	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0208 	orr.w	r2, r2, #8
 8003848:	b292      	uxth	r2, r2
 800384a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800385e:	b29b      	uxth	r3, r3
 8003860:	089b      	lsrs	r3, r3, #2
 8003862:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800386c:	2101      	movs	r1, #1
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f00d f964 	bl	8010b3c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003874:	e02a      	b.n	80038cc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f00c ff8a 	bl	8010790 <HAL_PCD_SuspendCallback>
    return;
 800387c:	e026      	b.n	80038cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00f      	beq.n	80038a8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003890:	b29a      	uxth	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800389a:	b292      	uxth	r2, r2
 800389c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f00c ff48 	bl	8010736 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038a6:	e011      	b.n	80038cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00c      	beq.n	80038cc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038c4:	b292      	uxth	r2, r2
 80038c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80038ca:	bf00      	nop
  }
}
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_PCD_SetAddress+0x1a>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e012      	b.n	8003912 <HAL_PCD_SetAddress+0x40>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f006 fdaf 	bl	800a466 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	4608      	mov	r0, r1
 8003924:	4611      	mov	r1, r2
 8003926:	461a      	mov	r2, r3
 8003928:	4603      	mov	r3, r0
 800392a:	70fb      	strb	r3, [r7, #3]
 800392c:	460b      	mov	r3, r1
 800392e:	803b      	strh	r3, [r7, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800393c:	2b00      	cmp	r3, #0
 800393e:	da0e      	bge.n	800395e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	f003 0207 	and.w	r2, r3, #7
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	3310      	adds	r3, #16
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	4413      	add	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	705a      	strb	r2, [r3, #1]
 800395c:	e00e      	b.n	800397c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	f003 0207 	and.w	r2, r3, #7
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	4413      	add	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	b2da      	uxtb	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003988:	883a      	ldrh	r2, [r7, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	78ba      	ldrb	r2, [r7, #2]
 8003992:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003994:	78bb      	ldrb	r3, [r7, #2]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d102      	bne.n	80039a0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_PCD_EP_Open+0x94>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e00e      	b.n	80039cc <HAL_PCD_EP_Open+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	4618      	mov	r0, r3
 80039be:	f004 faf1 	bl	8007fa4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80039ca:	7afb      	ldrb	r3, [r7, #11]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	da0e      	bge.n	8003a06 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	f003 0207 	and.w	r2, r3, #7
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	3310      	adds	r3, #16
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4413      	add	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	705a      	strb	r2, [r3, #1]
 8003a04:	e00e      	b.n	8003a24 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	f003 0207 	and.w	r2, r3, #7
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_PCD_EP_Close+0x6a>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e00e      	b.n	8003a5c <HAL_PCD_EP_Close+0x88>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68f9      	ldr	r1, [r7, #12]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f004 fe6d 	bl	800872c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	460b      	mov	r3, r1
 8003a72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a74:	7afb      	ldrb	r3, [r7, #11]
 8003a76:	f003 0207 	and.w	r2, r3, #7
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aa4:	7afb      	ldrb	r3, [r7, #11]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6979      	ldr	r1, [r7, #20]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f005 f825 	bl	8008b06 <USB_EPStartXfer>

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	f003 0207 	and.w	r2, r3, #7
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	440b      	add	r3, r1
 8003ae4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003ae8:	681b      	ldr	r3, [r3, #0]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b086      	sub	sp, #24
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
 8003b02:	460b      	mov	r3, r1
 8003b04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b06:	7afb      	ldrb	r3, [r7, #11]
 8003b08:	f003 0207 	and.w	r2, r3, #7
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	3310      	adds	r3, #16
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4413      	add	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b42:	7afb      	ldrb	r3, [r7, #11]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6979      	ldr	r1, [r7, #20]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f004 ffd6 	bl	8008b06 <USB_EPStartXfer>

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	7912      	ldrb	r2, [r2, #4]
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e03e      	b.n	8003c00 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	da0e      	bge.n	8003ba8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	f003 0207 	and.w	r2, r3, #7
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	3310      	adds	r3, #16
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	705a      	strb	r2, [r3, #1]
 8003ba6:	e00c      	b.n	8003bc2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ba8:	78fa      	ldrb	r2, [r7, #3]
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_PCD_EP_SetStall+0x7e>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e00e      	b.n	8003c00 <HAL_PCD_EP_SetStall+0x9c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68f9      	ldr	r1, [r7, #12]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f006 fb39 	bl	800a268 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	7912      	ldrb	r2, [r2, #4]
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e040      	b.n	8003ca8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	da0e      	bge.n	8003c4c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	f003 0207 	and.w	r2, r3, #7
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	3310      	adds	r3, #16
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	705a      	strb	r2, [r3, #1]
 8003c4a:	e00e      	b.n	8003c6a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	f003 0207 	and.w	r2, r3, #7
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_PCD_EP_ClrStall+0x82>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e00e      	b.n	8003ca8 <HAL_PCD_EP_ClrStall+0xa0>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f006 fb36 	bl	800a30a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b096      	sub	sp, #88	@ 0x58
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cb8:	e3ad      	b.n	8004416 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cc2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003cc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003cd4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f040 816f 	bne.w	8003fbc <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003cde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003ce2:	f003 0310 	and.w	r3, r3, #16
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d14c      	bne.n	8003d84 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cfa:	81fb      	strh	r3, [r7, #14]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	89fb      	ldrh	r3, [r7, #14]
 8003d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3310      	adds	r3, #16
 8003d12:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4413      	add	r3, r2
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d3a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	441a      	add	r2, r3
 8003d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d48:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f00c fcd8 	bl	8010702 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	7b1b      	ldrb	r3, [r3, #12]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 835c 	beq.w	8004416 <PCD_EP_ISR_Handler+0x766>
 8003d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f040 8357 	bne.w	8004416 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	7b1b      	ldrb	r3, [r3, #12]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	731a      	strb	r2, [r3, #12]
 8003d82:	e348      	b.n	8004416 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d8a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003d96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d032      	beq.n	8003e08 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dda:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f006 fbbf 	bl	800a560 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003dee:	4013      	ands	r3, r2
 8003df0:	823b      	strh	r3, [r7, #16]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	8a3a      	ldrh	r2, [r7, #16]
 8003df8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003dfc:	b292      	uxth	r2, r2
 8003dfe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f00c fc51 	bl	80106a8 <HAL_PCD_SetupStageCallback>
 8003e06:	e306      	b.n	8004416 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e08:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f280 8302 	bge.w	8004416 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e1e:	4013      	ands	r3, r2
 8003e20:	83fb      	strh	r3, [r7, #30]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	8bfa      	ldrh	r2, [r7, #30]
 8003e28:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e2c:	b292      	uxth	r2, r2
 8003e2e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e56:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d019      	beq.n	8003e94 <PCD_EP_ISR_Handler+0x1e4>
 8003e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d015      	beq.n	8003e94 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e6e:	6959      	ldr	r1, [r3, #20]
 8003e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e72:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e76:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	f006 fb71 	bl	800a560 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e80:	695a      	ldr	r2, [r3, #20]
 8003e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	441a      	add	r2, r3
 8003e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f00c fc1c 	bl	80106cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003e9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ea2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f040 82b5 	bne.w	8004416 <PCD_EP_ISR_Handler+0x766>
 8003eac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003eb0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003eb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003eb8:	f000 82ad 	beq.w	8004416 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	801a      	strh	r2, [r3, #0]
 8003eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ef2:	d91d      	bls.n	8003f30 <PCD_EP_ISR_Handler+0x280>
 8003ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d102      	bne.n	8003f0e <PCD_EP_ISR_Handler+0x25e>
 8003f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	029b      	lsls	r3, r3, #10
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	801a      	strh	r2, [r3, #0]
 8003f2e:	e026      	b.n	8003f7e <PCD_EP_ISR_Handler+0x2ce>
 8003f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <PCD_EP_ISR_Handler+0x29e>
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	801a      	strh	r2, [r3, #0]
 8003f4c:	e017      	b.n	8003f7e <PCD_EP_ISR_Handler+0x2ce>
 8003f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	085b      	lsrs	r3, r3, #1
 8003f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <PCD_EP_ISR_Handler+0x2b8>
 8003f62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f64:	3301      	adds	r3, #1
 8003f66:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	029b      	lsls	r3, r3, #10
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	4313      	orrs	r3, r2
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f8e:	827b      	strh	r3, [r7, #18]
 8003f90:	8a7b      	ldrh	r3, [r7, #18]
 8003f92:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003f96:	827b      	strh	r3, [r7, #18]
 8003f98:	8a7b      	ldrh	r3, [r7, #18]
 8003f9a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f9e:	827b      	strh	r3, [r7, #18]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	8a7b      	ldrh	r3, [r7, #18]
 8003fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	8013      	strh	r3, [r2, #0]
 8003fba:	e22c      	b.n	8004416 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003fd0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f280 80f6 	bge.w	80041c6 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004008:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800400c:	b292      	uxth	r2, r2
 800400e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004010:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4413      	add	r3, r2
 8004024:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004028:	7b1b      	ldrb	r3, [r3, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d123      	bne.n	8004076 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004036:	b29b      	uxth	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	4413      	add	r3, r2
 8004048:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004052:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004056:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 808e 	beq.w	800417c <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004066:	6959      	ldr	r1, [r3, #20]
 8004068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800406a:	88da      	ldrh	r2, [r3, #6]
 800406c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004070:	f006 fa76 	bl	800a560 <USB_ReadPMA>
 8004074:	e082      	b.n	800417c <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004078:	78db      	ldrb	r3, [r3, #3]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d10a      	bne.n	8004094 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800407e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004082:	461a      	mov	r2, r3
 8004084:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f9d3 	bl	8004432 <HAL_PCD_EP_DB_Receive>
 800408c:	4603      	mov	r3, r0
 800408e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004092:	e073      	b.n	800417c <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ae:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	441a      	add	r2, r3
 80040c0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80040c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d022      	beq.n	8004138 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	4413      	add	r3, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6812      	ldr	r2, [r2, #0]
 800410a:	4413      	add	r3, r2
 800410c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004116:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800411a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800411e:	2b00      	cmp	r3, #0
 8004120:	d02c      	beq.n	800417c <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004128:	6959      	ldr	r1, [r3, #20]
 800412a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412c:	891a      	ldrh	r2, [r3, #8]
 800412e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004132:	f006 fa15 	bl	800a560 <USB_ReadPMA>
 8004136:	e021      	b.n	800417c <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004140:	b29b      	uxth	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	4413      	add	r3, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	4413      	add	r3, r2
 8004152:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800415c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004160:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004164:	2b00      	cmp	r3, #0
 8004166:	d009      	beq.n	800417c <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800416e:	6959      	ldr	r1, [r3, #20]
 8004170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004172:	895a      	ldrh	r2, [r3, #10]
 8004174:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004178:	f006 f9f2 	bl	800a560 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800417c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800417e:	69da      	ldr	r2, [r3, #28]
 8004180:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004184:	441a      	add	r2, r3
 8004186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004188:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800418a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004192:	441a      	add	r2, r3
 8004194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004196:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <PCD_EP_ISR_Handler+0x4fc>
 80041a0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80041a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d206      	bcs.n	80041ba <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80041ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	4619      	mov	r1, r3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f00c fa8a 	bl	80106cc <HAL_PCD_DataOutStageCallback>
 80041b8:	e005      	b.n	80041c6 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041c0:	4618      	mov	r0, r3
 80041c2:	f004 fca0 	bl	8008b06 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80041c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80041ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 8121 	beq.w	8004416 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80041d4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	3310      	adds	r3, #16
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	4413      	add	r3, r2
 80041e6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80041fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004202:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	441a      	add	r2, r3
 8004214:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800421c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004220:	b29b      	uxth	r3, r3
 8004222:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004226:	78db      	ldrb	r3, [r3, #3]
 8004228:	2b01      	cmp	r3, #1
 800422a:	f040 80a2 	bne.w	8004372 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800422e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004230:	2200      	movs	r2, #0
 8004232:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004236:	7b1b      	ldrb	r3, [r3, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8093 	beq.w	8004364 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800423e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d046      	beq.n	80042d8 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800424a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800424c:	785b      	ldrb	r3, [r3, #1]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d126      	bne.n	80042a0 <PCD_EP_ISR_Handler+0x5f0>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004260:	b29b      	uxth	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004266:	4413      	add	r3, r2
 8004268:	627b      	str	r3, [r7, #36]	@ 0x24
 800426a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	00da      	lsls	r2, r3, #3
 8004270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004272:	4413      	add	r3, r2
 8004274:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004278:	623b      	str	r3, [r7, #32]
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004284:	b29a      	uxth	r2, r3
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	801a      	strh	r2, [r3, #0]
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004298:	b29a      	uxth	r2, r3
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	e061      	b.n	8004364 <PCD_EP_ISR_Handler+0x6b4>
 80042a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a2:	785b      	ldrb	r3, [r3, #1]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d15d      	bne.n	8004364 <PCD_EP_ISR_Handler+0x6b4>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	461a      	mov	r2, r3
 80042ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042bc:	4413      	add	r3, r2
 80042be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	00da      	lsls	r2, r3, #3
 80042c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c8:	4413      	add	r3, r2
 80042ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80042ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d2:	2200      	movs	r2, #0
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	e045      	b.n	8004364 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e0:	785b      	ldrb	r3, [r3, #1]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d126      	bne.n	8004334 <PCD_EP_ISR_Handler+0x684>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fa:	4413      	add	r3, r2
 80042fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80042fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	00da      	lsls	r2, r3, #3
 8004304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004306:	4413      	add	r3, r2
 8004308:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800430c:	633b      	str	r3, [r7, #48]	@ 0x30
 800430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004318:	b29a      	uxth	r2, r3
 800431a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431c:	801a      	strh	r2, [r3, #0]
 800431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800432c:	b29a      	uxth	r2, r3
 800432e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004330:	801a      	strh	r2, [r3, #0]
 8004332:	e017      	b.n	8004364 <PCD_EP_ISR_Handler+0x6b4>
 8004334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004336:	785b      	ldrb	r3, [r3, #1]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d113      	bne.n	8004364 <PCD_EP_ISR_Handler+0x6b4>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004344:	b29b      	uxth	r3, r3
 8004346:	461a      	mov	r2, r3
 8004348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800434a:	4413      	add	r3, r2
 800434c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800434e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	00da      	lsls	r2, r3, #3
 8004354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004356:	4413      	add	r3, r2
 8004358:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800435c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800435e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004360:	2200      	movs	r2, #0
 8004362:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	4619      	mov	r1, r3
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f00c f9c9 	bl	8010702 <HAL_PCD_DataInStageCallback>
 8004370:	e051      	b.n	8004416 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004372:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d144      	bne.n	8004408 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004386:	b29b      	uxth	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4413      	add	r3, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	4413      	add	r3, r2
 8004398:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043a2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80043a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d907      	bls.n	80043c2 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80043b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043ba:	1ad2      	subs	r2, r2, r3
 80043bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043be:	619a      	str	r2, [r3, #24]
 80043c0:	e002      	b.n	80043c8 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80043c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c4:	2200      	movs	r2, #0
 80043c6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80043c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d106      	bne.n	80043de <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f00c f993 	bl	8010702 <HAL_PCD_DataInStageCallback>
 80043dc:	e01b      	b.n	8004416 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80043de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043e6:	441a      	add	r2, r3
 80043e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ea:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80043ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043f4:	441a      	add	r2, r3
 80043f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004400:	4618      	mov	r0, r3
 8004402:	f004 fb80 	bl	8008b06 <USB_EPStartXfer>
 8004406:	e006      	b.n	8004416 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004408:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800440c:	461a      	mov	r2, r3
 800440e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f917 	bl	8004644 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800441e:	b29b      	uxth	r3, r3
 8004420:	b21b      	sxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	f6ff ac49 	blt.w	8003cba <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3758      	adds	r7, #88	@ 0x58
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b088      	sub	sp, #32
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	4613      	mov	r3, r2
 800443e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d07c      	beq.n	8004544 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004452:	b29b      	uxth	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4413      	add	r3, r2
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	4413      	add	r3, r2
 8004464:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800446e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	8b7b      	ldrh	r3, [r7, #26]
 8004476:	429a      	cmp	r2, r3
 8004478:	d306      	bcc.n	8004488 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	8b7b      	ldrh	r3, [r7, #26]
 8004480:	1ad2      	subs	r2, r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	619a      	str	r2, [r3, #24]
 8004486:	e002      	b.n	800448e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2200      	movs	r2, #0
 800448c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d123      	bne.n	80044de <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b0:	833b      	strh	r3, [r7, #24]
 80044b2:	8b3b      	ldrh	r3, [r7, #24]
 80044b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044b8:	833b      	strh	r3, [r7, #24]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	441a      	add	r2, r3
 80044c8:	8b3b      	ldrh	r3, [r7, #24]
 80044ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044da:	b29b      	uxth	r3, r3
 80044dc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01f      	beq.n	8004528 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004502:	82fb      	strh	r3, [r7, #22]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	441a      	add	r2, r3
 8004512:	8afb      	ldrh	r3, [r7, #22]
 8004514:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004518:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800451c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004520:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004524:	b29b      	uxth	r3, r3
 8004526:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004528:	8b7b      	ldrh	r3, [r7, #26]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8085 	beq.w	800463a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	6959      	ldr	r1, [r3, #20]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	891a      	ldrh	r2, [r3, #8]
 800453c:	8b7b      	ldrh	r3, [r7, #26]
 800453e:	f006 f80f 	bl	800a560 <USB_ReadPMA>
 8004542:	e07a      	b.n	800463a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800454c:	b29b      	uxth	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4413      	add	r3, r2
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	4413      	add	r3, r2
 800455e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004568:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	8b7b      	ldrh	r3, [r7, #26]
 8004570:	429a      	cmp	r2, r3
 8004572:	d306      	bcc.n	8004582 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	699a      	ldr	r2, [r3, #24]
 8004578:	8b7b      	ldrh	r3, [r7, #26]
 800457a:	1ad2      	subs	r2, r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	619a      	str	r2, [r3, #24]
 8004580:	e002      	b.n	8004588 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2200      	movs	r2, #0
 8004586:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d123      	bne.n	80045d8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	461a      	mov	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045aa:	83fb      	strh	r3, [r7, #30]
 80045ac:	8bfb      	ldrh	r3, [r7, #30]
 80045ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045b2:	83fb      	strh	r3, [r7, #30]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	441a      	add	r2, r3
 80045c2:	8bfb      	ldrh	r3, [r7, #30]
 80045c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d11f      	bne.n	8004622 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fc:	83bb      	strh	r3, [r7, #28]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	441a      	add	r2, r3
 800460c:	8bbb      	ldrh	r3, [r7, #28]
 800460e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800461a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800461e:	b29b      	uxth	r3, r3
 8004620:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004622:	8b7b      	ldrh	r3, [r7, #26]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	6959      	ldr	r1, [r3, #20]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	895a      	ldrh	r2, [r3, #10]
 8004634:	8b7b      	ldrh	r3, [r7, #26]
 8004636:	f005 ff93 	bl	800a560 <USB_ReadPMA>
    }
  }

  return count;
 800463a:	8b7b      	ldrh	r3, [r7, #26]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3720      	adds	r7, #32
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b0a4      	sub	sp, #144	@ 0x90
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	4613      	mov	r3, r2
 8004650:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004652:	88fb      	ldrh	r3, [r7, #6]
 8004654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 81db 	beq.w	8004a14 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004666:	b29b      	uxth	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	4413      	add	r3, r2
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	6812      	ldr	r2, [r2, #0]
 8004676:	4413      	add	r3, r2
 8004678:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004682:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800468e:	429a      	cmp	r2, r3
 8004690:	d907      	bls.n	80046a2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	699a      	ldr	r2, [r3, #24]
 8004696:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800469a:	1ad2      	subs	r2, r2, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	619a      	str	r2, [r3, #24]
 80046a0:	e002      	b.n	80046a8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2200      	movs	r2, #0
 80046a6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f040 80b9 	bne.w	8004824 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	785b      	ldrb	r3, [r3, #1]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d126      	bne.n	8004708 <HAL_PCD_EP_DB_Transmit+0xc4>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ce:	4413      	add	r3, r2
 80046d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	00da      	lsls	r2, r3, #3
 80046d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046da:	4413      	add	r3, r2
 80046dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f0:	801a      	strh	r2, [r3, #0]
 80046f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004700:	b29a      	uxth	r2, r3
 8004702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004704:	801a      	strh	r2, [r3, #0]
 8004706:	e01a      	b.n	800473e <HAL_PCD_EP_DB_Transmit+0xfa>
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	785b      	ldrb	r3, [r3, #1]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d116      	bne.n	800473e <HAL_PCD_EP_DB_Transmit+0xfa>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	637b      	str	r3, [r7, #52]	@ 0x34
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800471e:	b29b      	uxth	r3, r3
 8004720:	461a      	mov	r2, r3
 8004722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004724:	4413      	add	r3, r2
 8004726:	637b      	str	r3, [r7, #52]	@ 0x34
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	00da      	lsls	r2, r3, #3
 800472e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004730:	4413      	add	r3, r2
 8004732:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004736:	633b      	str	r3, [r7, #48]	@ 0x30
 8004738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473a:	2200      	movs	r2, #0
 800473c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	785b      	ldrb	r3, [r3, #1]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d126      	bne.n	800479a <HAL_PCD_EP_DB_Transmit+0x156>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800475a:	b29b      	uxth	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	4413      	add	r3, r2
 8004762:	61fb      	str	r3, [r7, #28]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	00da      	lsls	r2, r3, #3
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800477e:	b29a      	uxth	r2, r3
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	801a      	strh	r2, [r3, #0]
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800478e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004792:	b29a      	uxth	r2, r3
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	801a      	strh	r2, [r3, #0]
 8004798:	e017      	b.n	80047ca <HAL_PCD_EP_DB_Transmit+0x186>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	785b      	ldrb	r3, [r3, #1]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d113      	bne.n	80047ca <HAL_PCD_EP_DB_Transmit+0x186>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	4413      	add	r3, r2
 80047b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	00da      	lsls	r2, r3, #3
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	4413      	add	r3, r2
 80047be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80047c2:	623b      	str	r3, [r7, #32]
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	2200      	movs	r2, #0
 80047c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	4619      	mov	r1, r3
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f00b ff96 	bl	8010702 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80047d6:	88fb      	ldrh	r3, [r7, #6]
 80047d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 82fa 	beq.w	8004dd6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047fc:	82fb      	strh	r3, [r7, #22]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	441a      	add	r2, r3
 800480c:	8afb      	ldrh	r3, [r7, #22]
 800480e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004812:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004816:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800481a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800481e:	b29b      	uxth	r3, r3
 8004820:	8013      	strh	r3, [r2, #0]
 8004822:	e2d8      	b.n	8004dd6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d021      	beq.n	8004872 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	b29b      	uxth	r3, r3
 8004840:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004844:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004848:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	441a      	add	r2, r3
 800485a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800485e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004862:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004866:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800486a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800486e:	b29b      	uxth	r3, r3
 8004870:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004878:	2b01      	cmp	r3, #1
 800487a:	f040 82ac 	bne.w	8004dd6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004886:	441a      	add	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004894:	441a      	add	r2, r3
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6a1a      	ldr	r2, [r3, #32]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d30b      	bcc.n	80048be <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	6a1a      	ldr	r2, [r3, #32]
 80048b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048b6:	1ad2      	subs	r2, r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	621a      	str	r2, [r3, #32]
 80048bc:	e017      	b.n	80048ee <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d108      	bne.n	80048d8 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80048c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80048d6:	e00a      	b.n	80048ee <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2200      	movs	r2, #0
 80048ec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	785b      	ldrb	r3, [r3, #1]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d165      	bne.n	80049c2 <HAL_PCD_EP_DB_Transmit+0x37e>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004904:	b29b      	uxth	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800490a:	4413      	add	r3, r2
 800490c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	00da      	lsls	r2, r3, #3
 8004914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004916:	4413      	add	r3, r2
 8004918:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800491c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800491e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004928:	b29a      	uxth	r2, r3
 800492a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492c:	801a      	strh	r2, [r3, #0]
 800492e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004932:	2b3e      	cmp	r3, #62	@ 0x3e
 8004934:	d91d      	bls.n	8004972 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004936:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800493e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004942:	f003 031f 	and.w	r3, r3, #31
 8004946:	2b00      	cmp	r3, #0
 8004948:	d102      	bne.n	8004950 <HAL_PCD_EP_DB_Transmit+0x30c>
 800494a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800494c:	3b01      	subs	r3, #1
 800494e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29a      	uxth	r2, r3
 8004956:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004958:	b29b      	uxth	r3, r3
 800495a:	029b      	lsls	r3, r3, #10
 800495c:	b29b      	uxth	r3, r3
 800495e:	4313      	orrs	r3, r2
 8004960:	b29b      	uxth	r3, r3
 8004962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800496a:	b29a      	uxth	r2, r3
 800496c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496e:	801a      	strh	r2, [r3, #0]
 8004970:	e044      	b.n	80049fc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10a      	bne.n	8004990 <HAL_PCD_EP_DB_Transmit+0x34c>
 800497a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	b29b      	uxth	r3, r3
 8004980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004988:	b29a      	uxth	r2, r3
 800498a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800498c:	801a      	strh	r2, [r3, #0]
 800498e:	e035      	b.n	80049fc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004998:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <HAL_PCD_EP_DB_Transmit+0x366>
 80049a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049a6:	3301      	adds	r3, #1
 80049a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	029b      	lsls	r3, r3, #10
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	4313      	orrs	r3, r2
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049be:	801a      	strh	r2, [r3, #0]
 80049c0:	e01c      	b.n	80049fc <HAL_PCD_EP_DB_Transmit+0x3b8>
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	785b      	ldrb	r3, [r3, #1]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d118      	bne.n	80049fc <HAL_PCD_EP_DB_Transmit+0x3b8>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049d8:	b29b      	uxth	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049de:	4413      	add	r3, r2
 80049e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	00da      	lsls	r2, r3, #3
 80049e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ea:	4413      	add	r3, r2
 80049ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80049f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049fa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	6959      	ldr	r1, [r3, #20]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	891a      	ldrh	r2, [r3, #8]
 8004a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f005 fd65 	bl	800a4dc <USB_WritePMA>
 8004a12:	e1e0      	b.n	8004dd6 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a38:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	699a      	ldr	r2, [r3, #24]
 8004a40:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d307      	bcc.n	8004a58 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	699a      	ldr	r2, [r3, #24]
 8004a4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a50:	1ad2      	subs	r2, r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	619a      	str	r2, [r3, #24]
 8004a56:	e002      	b.n	8004a5e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f040 80c0 	bne.w	8004be8 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	785b      	ldrb	r3, [r3, #1]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d126      	bne.n	8004abe <HAL_PCD_EP_DB_Transmit+0x47a>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	461a      	mov	r2, r3
 8004a82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a84:	4413      	add	r3, r2
 8004a86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	00da      	lsls	r2, r3, #3
 8004a8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a90:	4413      	add	r3, r2
 8004a92:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004aa6:	801a      	strh	r2, [r3, #0]
 8004aa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004aba:	801a      	strh	r2, [r3, #0]
 8004abc:	e01a      	b.n	8004af4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	785b      	ldrb	r3, [r3, #1]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d116      	bne.n	8004af4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	667b      	str	r3, [r7, #100]	@ 0x64
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ada:	4413      	add	r3, r2
 8004adc:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	00da      	lsls	r2, r3, #3
 8004ae4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004aec:	663b      	str	r3, [r7, #96]	@ 0x60
 8004aee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004af0:	2200      	movs	r2, #0
 8004af2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	677b      	str	r3, [r7, #116]	@ 0x74
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	785b      	ldrb	r3, [r3, #1]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d12b      	bne.n	8004b5a <HAL_PCD_EP_DB_Transmit+0x516>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b16:	4413      	add	r3, r2
 8004b18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	00da      	lsls	r2, r3, #3
 8004b20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b22:	4413      	add	r3, r2
 8004b24:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b3e:	801a      	strh	r2, [r3, #0]
 8004b40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b56:	801a      	strh	r2, [r3, #0]
 8004b58:	e017      	b.n	8004b8a <HAL_PCD_EP_DB_Transmit+0x546>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	785b      	ldrb	r3, [r3, #1]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d113      	bne.n	8004b8a <HAL_PCD_EP_DB_Transmit+0x546>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b70:	4413      	add	r3, r2
 8004b72:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	00da      	lsls	r2, r3, #3
 8004b7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b82:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b86:	2200      	movs	r2, #0
 8004b88:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f00b fdb6 	bl	8010702 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b96:	88fb      	ldrh	r3, [r7, #6]
 8004b98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f040 811a 	bne.w	8004dd6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bbc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	441a      	add	r2, r3
 8004bce:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	8013      	strh	r3, [r2, #0]
 8004be6:	e0f6      	b.n	8004dd6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d121      	bne.n	8004c36 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	461a      	mov	r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	441a      	add	r2, r3
 8004c1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	f040 80ca 	bne.w	8004dd6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c4a:	441a      	add	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c58:	441a      	add	r2, r3
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6a1a      	ldr	r2, [r3, #32]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d30b      	bcc.n	8004c82 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	6a1a      	ldr	r2, [r3, #32]
 8004c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c7a:	1ad2      	subs	r2, r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	621a      	str	r2, [r3, #32]
 8004c80:	e017      	b.n	8004cb2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d108      	bne.n	8004c9c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004c8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004c9a:	e00a      	b.n	8004cb2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	785b      	ldrb	r3, [r3, #1]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d165      	bne.n	8004d8c <HAL_PCD_EP_DB_Transmit+0x748>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cd4:	4413      	add	r3, r2
 8004cd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	00da      	lsls	r2, r3, #3
 8004cde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ce6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ce8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cf6:	801a      	strh	r2, [r3, #0]
 8004cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8004cfe:	d91d      	bls.n	8004d3c <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d102      	bne.n	8004d1a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004d14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d16:	3b01      	subs	r3, #1
 8004d18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	029b      	lsls	r3, r3, #10
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d38:	801a      	strh	r2, [r3, #0]
 8004d3a:	e041      	b.n	8004dc0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <HAL_PCD_EP_DB_Transmit+0x716>
 8004d44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d56:	801a      	strh	r2, [r3, #0]
 8004d58:	e032      	b.n	8004dc0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d5e:	085b      	lsrs	r3, r3, #1
 8004d60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <HAL_PCD_EP_DB_Transmit+0x730>
 8004d6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d70:	3301      	adds	r3, #1
 8004d72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	029b      	lsls	r3, r3, #10
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	4313      	orrs	r3, r2
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d88:	801a      	strh	r2, [r3, #0]
 8004d8a:	e019      	b.n	8004dc0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d115      	bne.n	8004dc0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	461a      	mov	r2, r3
 8004da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da2:	4413      	add	r3, r2
 8004da4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	00da      	lsls	r2, r3, #3
 8004dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dae:	4413      	add	r3, r2
 8004db0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004db4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dbe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	6959      	ldr	r1, [r3, #20]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	895a      	ldrh	r2, [r3, #10]
 8004dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f005 fb83 	bl	800a4dc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004df0:	82bb      	strh	r3, [r7, #20]
 8004df2:	8abb      	ldrh	r3, [r7, #20]
 8004df4:	f083 0310 	eor.w	r3, r3, #16
 8004df8:	82bb      	strh	r3, [r7, #20]
 8004dfa:	8abb      	ldrh	r3, [r7, #20]
 8004dfc:	f083 0320 	eor.w	r3, r3, #32
 8004e00:	82bb      	strh	r3, [r7, #20]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	441a      	add	r2, r3
 8004e10:	8abb      	ldrh	r3, [r7, #20]
 8004e12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3790      	adds	r7, #144	@ 0x90
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	607b      	str	r3, [r7, #4]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	817b      	strh	r3, [r7, #10]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004e42:	897b      	ldrh	r3, [r7, #10]
 8004e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00b      	beq.n	8004e66 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e4e:	897b      	ldrh	r3, [r7, #10]
 8004e50:	f003 0207 	and.w	r2, r3, #7
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	3310      	adds	r3, #16
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4413      	add	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	e009      	b.n	8004e7a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e66:	897a      	ldrh	r2, [r7, #10]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004e7a:	893b      	ldrh	r3, [r7, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d107      	bne.n	8004e90 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2200      	movs	r2, #0
 8004e84:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	80da      	strh	r2, [r3, #6]
 8004e8e:	e00b      	b.n	8004ea8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2201      	movs	r2, #1
 8004e94:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	0c1b      	lsrs	r3, r3, #16
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b085      	sub	sp, #20
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f043 0301 	orr.w	r3, r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f043 0302 	orr.w	r3, r3, #2
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
	...

08004f0c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f10:	4b05      	ldr	r3, [pc, #20]	@ (8004f28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a04      	ldr	r2, [pc, #16]	@ (8004f28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f1a:	6013      	str	r3, [r2, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	58000400 	.word	0x58000400

08004f2c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004f30:	4b04      	ldr	r3, [pc, #16]	@ (8004f44 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	58000400 	.word	0x58000400

08004f48 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004f4c:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	4a04      	ldr	r2, [pc, #16]	@ (8004f64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f56:	6053      	str	r3, [r2, #4]
}
 8004f58:	bf00      	nop
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	58000400 	.word	0x58000400

08004f68 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f7a:	d101      	bne.n	8004f80 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e000      	b.n	8004f82 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f9e:	6013      	str	r3, [r2, #0]
}
 8004fa0:	bf00      	nop
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8004faa:	b480      	push	{r7}
 8004fac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fbc:	6013      	str	r3, [r2, #0]
}
 8004fbe:	bf00      	nop
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fda:	d101      	bne.n	8004fe0 <LL_RCC_HSE_IsReady+0x18>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <LL_RCC_HSE_IsReady+0x1a>
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ffe:	6013      	str	r3, [r2, #0]
}
 8005000:	bf00      	nop
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800500a:	b480      	push	{r7}
 800500c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800500e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800501c:	6013      	str	r3, [r2, #0]
}
 800501e:	bf00      	nop
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800502c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800503a:	d101      	bne.n	8005040 <LL_RCC_HSI_IsReady+0x18>
 800503c:	2301      	movs	r3, #1
 800503e:	e000      	b.n	8005042 <LL_RCC_HSI_IsReady+0x1a>
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	061b      	lsls	r3, r3, #24
 8005062:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005066:	4313      	orrs	r3, r2
 8005068:	604b      	str	r3, [r1, #4]
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8005076:	b480      	push	{r7}
 8005078:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800507a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800507e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005082:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005086:	f043 0301 	orr.w	r3, r3, #1
 800508a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800508e:	bf00      	nop
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800509c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80050b0:	bf00      	nop
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80050ba:	b480      	push	{r7}
 80050bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80050be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d101      	bne.n	80050d2 <LL_RCC_HSI48_IsReady+0x18>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <LL_RCC_HSI48_IsReady+0x1a>
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80050de:	b480      	push	{r7}
 80050e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80050f6:	bf00      	nop
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800510c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005118:	bf00      	nop
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8005122:	b480      	push	{r7}
 8005124:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005132:	f043 0304 	orr.w	r3, r3, #4
 8005136:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800513a:	bf00      	nop
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800514c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005150:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005154:	f023 0304 	bic.w	r3, r3, #4
 8005158:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800515c:	bf00      	nop
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8005166:	b480      	push	{r7}
 8005168:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800516a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d101      	bne.n	800517e <LL_RCC_LSE_IsReady+0x18>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <LL_RCC_LSE_IsReady+0x1a>
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800518a:	b480      	push	{r7}
 800518c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800518e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005196:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80051a2:	bf00      	nop
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80051b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051bc:	f023 0301 	bic.w	r3, r3, #1
 80051c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80051ce:	b480      	push	{r7}
 80051d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80051d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d101      	bne.n	80051e6 <LL_RCC_LSI1_IsReady+0x18>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <LL_RCC_LSI1_IsReady+0x1a>
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80051f2:	b480      	push	{r7}
 80051f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80051f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005202:	f043 0304 	orr.w	r3, r3, #4
 8005206:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800520a:	bf00      	nop
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800521c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005220:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005224:	f023 0304 	bic.w	r3, r3, #4
 8005228:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800522c:	bf00      	nop
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8005236:	b480      	push	{r7}
 8005238:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800523a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800523e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b08      	cmp	r3, #8
 8005248:	d101      	bne.n	800524e <LL_RCC_LSI2_IsReady+0x18>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <LL_RCC_LSI2_IsReady+0x1a>
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005266:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800526a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	021b      	lsls	r3, r3, #8
 8005272:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800528c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005296:	f043 0301 	orr.w	r3, r3, #1
 800529a:	6013      	str	r3, [r2, #0]
}
 800529c:	bf00      	nop
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80052a6:	b480      	push	{r7}
 80052a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80052aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052b4:	f023 0301 	bic.w	r3, r3, #1
 80052b8:	6013      	str	r3, [r2, #0]
}
 80052ba:	bf00      	nop
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80052c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d101      	bne.n	80052da <LL_RCC_MSI_IsReady+0x16>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <LL_RCC_MSI_IsReady+0x18>
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80052ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800531e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2bb0      	cmp	r3, #176	@ 0xb0
 8005324:	d901      	bls.n	800532a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8005326:	23b0      	movs	r3, #176	@ 0xb0
 8005328:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800532a:	687b      	ldr	r3, [r7, #4]
}
 800532c:	4618      	mov	r0, r3
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005352:	4313      	orrs	r3, r2
 8005354:	604b      	str	r3, [r1, #4]
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800536a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f023 0203 	bic.w	r2, r3, #3
 8005374:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4313      	orrs	r3, r2
 800537c:	608b      	str	r3, [r1, #8]
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800538a:	b480      	push	{r7}
 800538c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800538e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 030c 	and.w	r3, r3, #12
}
 8005398:	4618      	mov	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80053aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	608b      	str	r3, [r1, #8]
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80053d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80053da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80053fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005402:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005406:	f023 020f 	bic.w	r2, r3, #15
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	091b      	lsrs	r3, r3, #4
 800540e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005412:	4313      	orrs	r3, r2
 8005414:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800542c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005436:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4313      	orrs	r3, r2
 800543e:	608b      	str	r3, [r1, #8]
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800545e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4313      	orrs	r3, r2
 8005466:	608b      	str	r3, [r1, #8]
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005482:	4618      	mov	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8005490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005494:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005498:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800549c:	4618      	mov	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80054a6:	b480      	push	{r7}
 80054a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80054aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80054c2:	b480      	push	{r7}
 80054c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80054c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80054da:	b480      	push	{r7}
 80054dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80054de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80054f2:	b480      	push	{r7}
 80054f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80054f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005500:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005504:	6013      	str	r3, [r2, #0]
}
 8005506:	bf00      	nop
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800551e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005522:	6013      	str	r3, [r2, #0]
}
 8005524:	bf00      	nop
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800552e:	b480      	push	{r7}
 8005530:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005540:	d101      	bne.n	8005546 <LL_RCC_PLL_IsReady+0x18>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <LL_RCC_PLL_IsReady+0x1a>
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005552:	b480      	push	{r7}
 8005554:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	0a1b      	lsrs	r3, r3, #8
 800555e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005562:	4618      	mov	r0, r3
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800557a:	4618      	mov	r0, r3
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005592:	4618      	mov	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80055a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f003 0303 	and.w	r3, r3, #3
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80055b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055c6:	d101      	bne.n	80055cc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80055dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80055e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055ec:	d101      	bne.n	80055f2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80055fe:	b480      	push	{r7}
 8005600:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005606:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800560a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800560e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005612:	d101      	bne.n	8005618 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005632:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005636:	d101      	bne.n	800563c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005638:	2301      	movs	r3, #1
 800563a:	e000      	b.n	800563e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800564c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005656:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800565a:	d101      	bne.n	8005660 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800566c:	b590      	push	{r4, r7, lr}
 800566e:	b08d      	sub	sp, #52	@ 0x34
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e363      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 808d 	beq.w	80057a6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800568c:	f7ff fe7d 	bl	800538a <LL_RCC_GetSysClkSource>
 8005690:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005692:	f7ff ff83 	bl	800559c <LL_RCC_PLL_GetMainSource>
 8005696:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <HAL_RCC_OscConfig+0x3e>
 800569e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a0:	2b0c      	cmp	r3, #12
 80056a2:	d147      	bne.n	8005734 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80056a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d144      	bne.n	8005734 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e347      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80056ba:	f7ff fe28 	bl	800530e <LL_RCC_MSI_GetRange>
 80056be:	4603      	mov	r3, r0
 80056c0:	429c      	cmp	r4, r3
 80056c2:	d914      	bls.n	80056ee <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fd61 	bl	8006190 <RCC_SetFlashLatencyFromMSIRange>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e336      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff fe02 	bl	80052e6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff fe26 	bl	8005338 <LL_RCC_MSI_SetCalibTrimming>
 80056ec:	e013      	b.n	8005716 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff fdf7 	bl	80052e6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff fe1b 	bl	8005338 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fd42 	bl	8006190 <RCC_SetFlashLatencyFromMSIRange>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e317      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005716:	f000 fcc9 	bl	80060ac <HAL_RCC_GetHCLKFreq>
 800571a:	4603      	mov	r3, r0
 800571c:	4aa4      	ldr	r2, [pc, #656]	@ (80059b0 <HAL_RCC_OscConfig+0x344>)
 800571e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005720:	4ba4      	ldr	r3, [pc, #656]	@ (80059b4 <HAL_RCC_OscConfig+0x348>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f7fb fbe3 	bl	8000ef0 <HAL_InitTick>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d039      	beq.n	80057a4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e308      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d01e      	beq.n	800577a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800573c:	f7ff fda4 	bl	8005288 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005740:	f7fb fdd4 	bl	80012ec <HAL_GetTick>
 8005744:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005748:	f7fb fdd0 	bl	80012ec <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e2f5      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800575a:	f7ff fdb3 	bl	80052c4 <LL_RCC_MSI_IsReady>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f1      	beq.n	8005748 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff fdbc 	bl	80052e6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff fde0 	bl	8005338 <LL_RCC_MSI_SetCalibTrimming>
 8005778:	e015      	b.n	80057a6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800577a:	f7ff fd94 	bl	80052a6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800577e:	f7fb fdb5 	bl	80012ec <HAL_GetTick>
 8005782:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005786:	f7fb fdb1 	bl	80012ec <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e2d6      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005798:	f7ff fd94 	bl	80052c4 <LL_RCC_MSI_IsReady>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f1      	bne.n	8005786 <HAL_RCC_OscConfig+0x11a>
 80057a2:	e000      	b.n	80057a6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80057a4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d047      	beq.n	8005842 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057b2:	f7ff fdea 	bl	800538a <LL_RCC_GetSysClkSource>
 80057b6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057b8:	f7ff fef0 	bl	800559c <LL_RCC_PLL_GetMainSource>
 80057bc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d005      	beq.n	80057d0 <HAL_RCC_OscConfig+0x164>
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	2b0c      	cmp	r3, #12
 80057c8:	d108      	bne.n	80057dc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d105      	bne.n	80057dc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d134      	bne.n	8005842 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e2b4      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057e4:	d102      	bne.n	80057ec <HAL_RCC_OscConfig+0x180>
 80057e6:	f7ff fbd1 	bl	8004f8c <LL_RCC_HSE_Enable>
 80057ea:	e001      	b.n	80057f0 <HAL_RCC_OscConfig+0x184>
 80057ec:	f7ff fbdd 	bl	8004faa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d012      	beq.n	800581e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f8:	f7fb fd78 	bl	80012ec <HAL_GetTick>
 80057fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005800:	f7fb fd74 	bl	80012ec <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b64      	cmp	r3, #100	@ 0x64
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e299      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005812:	f7ff fbd9 	bl	8004fc8 <LL_RCC_HSE_IsReady>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f1      	beq.n	8005800 <HAL_RCC_OscConfig+0x194>
 800581c:	e011      	b.n	8005842 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581e:	f7fb fd65 	bl	80012ec <HAL_GetTick>
 8005822:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005826:	f7fb fd61 	bl	80012ec <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b64      	cmp	r3, #100	@ 0x64
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e286      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005838:	f7ff fbc6 	bl	8004fc8 <LL_RCC_HSE_IsReady>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f1      	bne.n	8005826 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d04c      	beq.n	80058e8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800584e:	f7ff fd9c 	bl	800538a <LL_RCC_GetSysClkSource>
 8005852:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005854:	f7ff fea2 	bl	800559c <LL_RCC_PLL_GetMainSource>
 8005858:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b04      	cmp	r3, #4
 800585e:	d005      	beq.n	800586c <HAL_RCC_OscConfig+0x200>
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	2b0c      	cmp	r3, #12
 8005864:	d10e      	bne.n	8005884 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d10b      	bne.n	8005884 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e266      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff fbe5 	bl	800504c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005882:	e031      	b.n	80058e8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d019      	beq.n	80058c0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800588c:	f7ff fbae 	bl	8004fec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005890:	f7fb fd2c 	bl	80012ec <HAL_GetTick>
 8005894:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005898:	f7fb fd28 	bl	80012ec <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e24d      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80058aa:	f7ff fbbd 	bl	8005028 <LL_RCC_HSI_IsReady>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0f1      	beq.n	8005898 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff fbc7 	bl	800504c <LL_RCC_HSI_SetCalibTrimming>
 80058be:	e013      	b.n	80058e8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058c0:	f7ff fba3 	bl	800500a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c4:	f7fb fd12 	bl	80012ec <HAL_GetTick>
 80058c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058cc:	f7fb fd0e 	bl	80012ec <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e233      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80058de:	f7ff fba3 	bl	8005028 <LL_RCC_HSI_IsReady>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f1      	bne.n	80058cc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d106      	bne.n	8005902 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 80a3 	beq.w	8005a48 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d076      	beq.n	80059f8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0310 	and.w	r3, r3, #16
 8005912:	2b00      	cmp	r3, #0
 8005914:	d046      	beq.n	80059a4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005916:	f7ff fc5a 	bl	80051ce <LL_RCC_LSI1_IsReady>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d113      	bne.n	8005948 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005920:	f7ff fc33 	bl	800518a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005924:	f7fb fce2 	bl	80012ec <HAL_GetTick>
 8005928:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800592c:	f7fb fcde 	bl	80012ec <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e203      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800593e:	f7ff fc46 	bl	80051ce <LL_RCC_LSI1_IsReady>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f1      	beq.n	800592c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005948:	f7ff fc53 	bl	80051f2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fb fcce 	bl	80012ec <HAL_GetTick>
 8005950:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005954:	f7fb fcca 	bl	80012ec <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b03      	cmp	r3, #3
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e1ef      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005966:	f7ff fc66 	bl	8005236 <LL_RCC_LSI2_IsReady>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0f1      	beq.n	8005954 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff fc70 	bl	800525a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800597a:	f7ff fc17 	bl	80051ac <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597e:	f7fb fcb5 	bl	80012ec <HAL_GetTick>
 8005982:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005986:	f7fb fcb1 	bl	80012ec <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e1d6      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005998:	f7ff fc19 	bl	80051ce <LL_RCC_LSI1_IsReady>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f1      	bne.n	8005986 <HAL_RCC_OscConfig+0x31a>
 80059a2:	e051      	b.n	8005a48 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80059a4:	f7ff fbf1 	bl	800518a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a8:	f7fb fca0 	bl	80012ec <HAL_GetTick>
 80059ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80059ae:	e00c      	b.n	80059ca <HAL_RCC_OscConfig+0x35e>
 80059b0:	20000008 	.word	0x20000008
 80059b4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80059b8:	f7fb fc98 	bl	80012ec <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e1bd      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80059ca:	f7ff fc00 	bl	80051ce <LL_RCC_LSI1_IsReady>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0f1      	beq.n	80059b8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80059d4:	f7ff fc1e 	bl	8005214 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80059da:	f7fb fc87 	bl	80012ec <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e1ac      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80059ec:	f7ff fc23 	bl	8005236 <LL_RCC_LSI2_IsReady>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1f1      	bne.n	80059da <HAL_RCC_OscConfig+0x36e>
 80059f6:	e027      	b.n	8005a48 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80059f8:	f7ff fc0c 	bl	8005214 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fc:	f7fb fc76 	bl	80012ec <HAL_GetTick>
 8005a00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a04:	f7fb fc72 	bl	80012ec <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e197      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005a16:	f7ff fc0e 	bl	8005236 <LL_RCC_LSI2_IsReady>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1f1      	bne.n	8005a04 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005a20:	f7ff fbc4 	bl	80051ac <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a24:	f7fb fc62 	bl	80012ec <HAL_GetTick>
 8005a28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a2c:	f7fb fc5e 	bl	80012ec <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e183      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005a3e:	f7ff fbc6 	bl	80051ce <LL_RCC_LSI1_IsReady>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1f1      	bne.n	8005a2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d05b      	beq.n	8005b0c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a54:	4ba7      	ldr	r3, [pc, #668]	@ (8005cf4 <HAL_RCC_OscConfig+0x688>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d114      	bne.n	8005a8a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005a60:	f7ff fa54 	bl	8004f0c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a64:	f7fb fc42 	bl	80012ec <HAL_GetTick>
 8005a68:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a6c:	f7fb fc3e 	bl	80012ec <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e163      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a7e:	4b9d      	ldr	r3, [pc, #628]	@ (8005cf4 <HAL_RCC_OscConfig+0x688>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f0      	beq.n	8005a6c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d102      	bne.n	8005a98 <HAL_RCC_OscConfig+0x42c>
 8005a92:	f7ff fb24 	bl	80050de <LL_RCC_LSE_Enable>
 8005a96:	e00c      	b.n	8005ab2 <HAL_RCC_OscConfig+0x446>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	2b05      	cmp	r3, #5
 8005a9e:	d104      	bne.n	8005aaa <HAL_RCC_OscConfig+0x43e>
 8005aa0:	f7ff fb3f 	bl	8005122 <LL_RCC_LSE_EnableBypass>
 8005aa4:	f7ff fb1b 	bl	80050de <LL_RCC_LSE_Enable>
 8005aa8:	e003      	b.n	8005ab2 <HAL_RCC_OscConfig+0x446>
 8005aaa:	f7ff fb29 	bl	8005100 <LL_RCC_LSE_Disable>
 8005aae:	f7ff fb49 	bl	8005144 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d014      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aba:	f7fb fc17 	bl	80012ec <HAL_GetTick>
 8005abe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac2:	f7fb fc13 	bl	80012ec <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e136      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005ad8:	f7ff fb45 	bl	8005166 <LL_RCC_LSE_IsReady>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0ef      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x456>
 8005ae2:	e013      	b.n	8005b0c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae4:	f7fb fc02 	bl	80012ec <HAL_GetTick>
 8005ae8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005aea:	e00a      	b.n	8005b02 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aec:	f7fb fbfe 	bl	80012ec <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e121      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005b02:	f7ff fb30 	bl	8005166 <LL_RCC_LSE_IsReady>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1ef      	bne.n	8005aec <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d02c      	beq.n	8005b72 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d014      	beq.n	8005b4a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b20:	f7ff faa9 	bl	8005076 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b24:	f7fb fbe2 	bl	80012ec <HAL_GetTick>
 8005b28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b2c:	f7fb fbde 	bl	80012ec <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e103      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005b3e:	f7ff fabc 	bl	80050ba <LL_RCC_HSI48_IsReady>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0f1      	beq.n	8005b2c <HAL_RCC_OscConfig+0x4c0>
 8005b48:	e013      	b.n	8005b72 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b4a:	f7ff faa5 	bl	8005098 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b4e:	f7fb fbcd 	bl	80012ec <HAL_GetTick>
 8005b52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005b54:	e008      	b.n	8005b68 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b56:	f7fb fbc9 	bl	80012ec <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e0ee      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005b68:	f7ff faa7 	bl	80050ba <LL_RCC_HSI48_IsReady>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1f1      	bne.n	8005b56 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 80e4 	beq.w	8005d44 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b7c:	f7ff fc05 	bl	800538a <LL_RCC_GetSysClkSource>
 8005b80:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	f040 80b4 	bne.w	8005cfc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f003 0203 	and.w	r2, r3, #3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d123      	bne.n	8005bea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d11c      	bne.n	8005bea <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	0a1b      	lsrs	r3, r3, #8
 8005bb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d114      	bne.n	8005bea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d10d      	bne.n	8005bea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d106      	bne.n	8005bea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d05d      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	2b0c      	cmp	r3, #12
 8005bee:	d058      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e0a1      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c02:	f7ff fc85 	bl	8005510 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c06:	f7fb fb71 	bl	80012ec <HAL_GetTick>
 8005c0a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c0e:	f7fb fb6d 	bl	80012ec <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e092      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1ef      	bne.n	8005c0e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	4b30      	ldr	r3, [pc, #192]	@ (8005cf8 <HAL_RCC_OscConfig+0x68c>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c40:	4311      	orrs	r1, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c46:	0212      	lsls	r2, r2, #8
 8005c48:	4311      	orrs	r1, r2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c4e:	4311      	orrs	r1, r2
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c54:	4311      	orrs	r1, r2
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c64:	f7ff fc45 	bl	80054f2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c78:	f7fb fb38 	bl	80012ec <HAL_GetTick>
 8005c7c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c80:	f7fb fb34 	bl	80012ec <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e059      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0ef      	beq.n	8005c80 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ca0:	e050      	b.n	8005d44 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e04f      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d147      	bne.n	8005d44 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005cb4:	f7ff fc1d 	bl	80054f2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cc6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cc8:	f7fb fb10 	bl	80012ec <HAL_GetTick>
 8005ccc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd0:	f7fb fb0c 	bl	80012ec <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e031      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0ef      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x664>
 8005cf0:	e028      	b.n	8005d44 <HAL_RCC_OscConfig+0x6d8>
 8005cf2:	bf00      	nop
 8005cf4:	58000400 	.word	0x58000400
 8005cf8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	2b0c      	cmp	r3, #12
 8005d00:	d01e      	beq.n	8005d40 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d02:	f7ff fc05 	bl	8005510 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d06:	f7fb faf1 	bl	80012ec <HAL_GetTick>
 8005d0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d0c:	e008      	b.n	8005d20 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d0e:	f7fb faed 	bl	80012ec <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e012      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1ef      	bne.n	8005d0e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d38:	4b05      	ldr	r3, [pc, #20]	@ (8005d50 <HAL_RCC_OscConfig+0x6e4>)
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	60cb      	str	r3, [r1, #12]
 8005d3e:	e001      	b.n	8005d44 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e000      	b.n	8005d46 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3734      	adds	r7, #52	@ 0x34
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd90      	pop	{r4, r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	eefefffc 	.word	0xeefefffc

08005d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e12d      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d68:	4b98      	ldr	r3, [pc, #608]	@ (8005fcc <HAL_RCC_ClockConfig+0x278>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d91b      	bls.n	8005dae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d76:	4b95      	ldr	r3, [pc, #596]	@ (8005fcc <HAL_RCC_ClockConfig+0x278>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f023 0207 	bic.w	r2, r3, #7
 8005d7e:	4993      	ldr	r1, [pc, #588]	@ (8005fcc <HAL_RCC_ClockConfig+0x278>)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d86:	f7fb fab1 	bl	80012ec <HAL_GetTick>
 8005d8a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8c:	e008      	b.n	8005da0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d8e:	f7fb faad 	bl	80012ec <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e111      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da0:	4b8a      	ldr	r3, [pc, #552]	@ (8005fcc <HAL_RCC_ClockConfig+0x278>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d1ef      	bne.n	8005d8e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d016      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff faef 	bl	80053a2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005dc4:	f7fb fa92 	bl	80012ec <HAL_GetTick>
 8005dc8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005dcc:	f7fb fa8e 	bl	80012ec <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e0f2      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005dde:	f7ff fbe9 	bl	80055b4 <LL_RCC_IsActiveFlag_HPRE>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0f1      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0320 	and.w	r3, r3, #32
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d016      	beq.n	8005e22 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fae6 	bl	80053ca <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005dfe:	f7fb fa75 	bl	80012ec <HAL_GetTick>
 8005e02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005e04:	e008      	b.n	8005e18 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e06:	f7fb fa71 	bl	80012ec <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e0d5      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005e18:	f7ff fbde 	bl	80055d8 <LL_RCC_IsActiveFlag_C2HPRE>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0f1      	beq.n	8005e06 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d016      	beq.n	8005e5c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff fadf 	bl	80053f6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e38:	f7fb fa58 	bl	80012ec <HAL_GetTick>
 8005e3c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e40:	f7fb fa54 	bl	80012ec <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e0b8      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e52:	f7ff fbd4 	bl	80055fe <LL_RCC_IsActiveFlag_SHDHPRE>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0f1      	beq.n	8005e40 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d016      	beq.n	8005e96 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff fad9 	bl	8005424 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e72:	f7fb fa3b 	bl	80012ec <HAL_GetTick>
 8005e76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005e78:	e008      	b.n	8005e8c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e7a:	f7fb fa37 	bl	80012ec <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e09b      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005e8c:	f7ff fbca 	bl	8005624 <LL_RCC_IsActiveFlag_PPRE1>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0f1      	beq.n	8005e7a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0308 	and.w	r3, r3, #8
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d017      	beq.n	8005ed2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff facf 	bl	800544c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005eae:	f7fb fa1d 	bl	80012ec <HAL_GetTick>
 8005eb2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005eb6:	f7fb fa19 	bl	80012ec <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e07d      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005ec8:	f7ff fbbe 	bl	8005648 <LL_RCC_IsActiveFlag_PPRE2>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f1      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d043      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d106      	bne.n	8005ef4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005ee6:	f7ff f86f 	bl	8004fc8 <LL_RCC_HSE_IsReady>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d11e      	bne.n	8005f2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e067      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d106      	bne.n	8005f0a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005efc:	f7ff fb17 	bl	800552e <LL_RCC_PLL_IsReady>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d113      	bne.n	8005f2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e05c      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005f12:	f7ff f9d7 	bl	80052c4 <LL_RCC_MSI_IsReady>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d108      	bne.n	8005f2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e051      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005f20:	f7ff f882 	bl	8005028 <LL_RCC_HSI_IsReady>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e04a      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fa15 	bl	8005362 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f38:	f7fb f9d8 	bl	80012ec <HAL_GetTick>
 8005f3c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3e:	e00a      	b.n	8005f56 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f40:	f7fb f9d4 	bl	80012ec <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e036      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f56:	f7ff fa18 	bl	800538a <LL_RCC_GetSysClkSource>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d1ec      	bne.n	8005f40 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f66:	4b19      	ldr	r3, [pc, #100]	@ (8005fcc <HAL_RCC_ClockConfig+0x278>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d21b      	bcs.n	8005fac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f74:	4b15      	ldr	r3, [pc, #84]	@ (8005fcc <HAL_RCC_ClockConfig+0x278>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f023 0207 	bic.w	r2, r3, #7
 8005f7c:	4913      	ldr	r1, [pc, #76]	@ (8005fcc <HAL_RCC_ClockConfig+0x278>)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f84:	f7fb f9b2 	bl	80012ec <HAL_GetTick>
 8005f88:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f8c:	f7fb f9ae 	bl	80012ec <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e012      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005fcc <HAL_RCC_ClockConfig+0x278>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d1ef      	bne.n	8005f8c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005fac:	f000 f87e 	bl	80060ac <HAL_RCC_GetHCLKFreq>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	4a07      	ldr	r2, [pc, #28]	@ (8005fd0 <HAL_RCC_ClockConfig+0x27c>)
 8005fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005fb6:	f7fb f9a5 	bl	8001304 <HAL_GetTickPrio>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fa ff97 	bl	8000ef0 <HAL_InitTick>
 8005fc2:	4603      	mov	r3, r0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	58004000 	.word	0x58004000
 8005fd0:	20000008 	.word	0x20000008

08005fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fd4:	b590      	push	{r4, r7, lr}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fda:	f7ff f9d6 	bl	800538a <LL_RCC_GetSysClkSource>
 8005fde:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005fe6:	f7ff f992 	bl	800530e <LL_RCC_MSI_GetRange>
 8005fea:	4603      	mov	r3, r0
 8005fec:	091b      	lsrs	r3, r3, #4
 8005fee:	f003 030f 	and.w	r3, r3, #15
 8005ff2:	4a2b      	ldr	r2, [pc, #172]	@ (80060a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	e04b      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d102      	bne.n	8006008 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006002:	4b28      	ldr	r3, [pc, #160]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	e045      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b08      	cmp	r3, #8
 800600c:	d10a      	bne.n	8006024 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800600e:	f7fe ffab 	bl	8004f68 <LL_RCC_HSE_IsEnabledDiv2>
 8006012:	4603      	mov	r3, r0
 8006014:	2b01      	cmp	r3, #1
 8006016:	d102      	bne.n	800601e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006018:	4b22      	ldr	r3, [pc, #136]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e03a      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800601e:	4b22      	ldr	r3, [pc, #136]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	e037      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006024:	f7ff faba 	bl	800559c <LL_RCC_PLL_GetMainSource>
 8006028:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d003      	beq.n	8006038 <HAL_RCC_GetSysClockFreq+0x64>
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b03      	cmp	r3, #3
 8006034:	d003      	beq.n	800603e <HAL_RCC_GetSysClockFreq+0x6a>
 8006036:	e00d      	b.n	8006054 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006038:	4b1a      	ldr	r3, [pc, #104]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800603a:	60bb      	str	r3, [r7, #8]
        break;
 800603c:	e015      	b.n	800606a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800603e:	f7fe ff93 	bl	8004f68 <LL_RCC_HSE_IsEnabledDiv2>
 8006042:	4603      	mov	r3, r0
 8006044:	2b01      	cmp	r3, #1
 8006046:	d102      	bne.n	800604e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006048:	4b16      	ldr	r3, [pc, #88]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800604a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800604c:	e00d      	b.n	800606a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800604e:	4b16      	ldr	r3, [pc, #88]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006050:	60bb      	str	r3, [r7, #8]
        break;
 8006052:	e00a      	b.n	800606a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006054:	f7ff f95b 	bl	800530e <LL_RCC_MSI_GetRange>
 8006058:	4603      	mov	r3, r0
 800605a:	091b      	lsrs	r3, r3, #4
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	4a0f      	ldr	r2, [pc, #60]	@ (80060a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006066:	60bb      	str	r3, [r7, #8]
        break;
 8006068:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800606a:	f7ff fa72 	bl	8005552 <LL_RCC_PLL_GetN>
 800606e:	4602      	mov	r2, r0
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	fb03 f402 	mul.w	r4, r3, r2
 8006076:	f7ff fa85 	bl	8005584 <LL_RCC_PLL_GetDivider>
 800607a:	4603      	mov	r3, r0
 800607c:	091b      	lsrs	r3, r3, #4
 800607e:	3301      	adds	r3, #1
 8006080:	fbb4 f4f3 	udiv	r4, r4, r3
 8006084:	f7ff fa72 	bl	800556c <LL_RCC_PLL_GetR>
 8006088:	4603      	mov	r3, r0
 800608a:	0f5b      	lsrs	r3, r3, #29
 800608c:	3301      	adds	r3, #1
 800608e:	fbb4 f3f3 	udiv	r3, r4, r3
 8006092:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006094:	68fb      	ldr	r3, [r7, #12]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	bd90      	pop	{r4, r7, pc}
 800609e:	bf00      	nop
 80060a0:	08011d88 	.word	0x08011d88
 80060a4:	00f42400 	.word	0x00f42400
 80060a8:	01e84800 	.word	0x01e84800

080060ac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060ac:	b598      	push	{r3, r4, r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80060b0:	f7ff ff90 	bl	8005fd4 <HAL_RCC_GetSysClockFreq>
 80060b4:	4604      	mov	r4, r0
 80060b6:	f7ff f9dd 	bl	8005474 <LL_RCC_GetAHBPrescaler>
 80060ba:	4603      	mov	r3, r0
 80060bc:	091b      	lsrs	r3, r3, #4
 80060be:	f003 030f 	and.w	r3, r3, #15
 80060c2:	4a03      	ldr	r2, [pc, #12]	@ (80060d0 <HAL_RCC_GetHCLKFreq+0x24>)
 80060c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060c8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	bd98      	pop	{r3, r4, r7, pc}
 80060d0:	08011d28 	.word	0x08011d28

080060d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060d4:	b598      	push	{r3, r4, r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80060d8:	f7ff ffe8 	bl	80060ac <HAL_RCC_GetHCLKFreq>
 80060dc:	4604      	mov	r4, r0
 80060de:	f7ff f9f0 	bl	80054c2 <LL_RCC_GetAPB1Prescaler>
 80060e2:	4603      	mov	r3, r0
 80060e4:	0a1b      	lsrs	r3, r3, #8
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	4a04      	ldr	r2, [pc, #16]	@ (80060fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80060ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	bd98      	pop	{r3, r4, r7, pc}
 80060fc:	08011d68 	.word	0x08011d68

08006100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006100:	b598      	push	{r3, r4, r7, lr}
 8006102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006104:	f7ff ffd2 	bl	80060ac <HAL_RCC_GetHCLKFreq>
 8006108:	4604      	mov	r4, r0
 800610a:	f7ff f9e6 	bl	80054da <LL_RCC_GetAPB2Prescaler>
 800610e:	4603      	mov	r3, r0
 8006110:	0adb      	lsrs	r3, r3, #11
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	4a04      	ldr	r2, [pc, #16]	@ (8006128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006124:	4618      	mov	r0, r3
 8006126:	bd98      	pop	{r3, r4, r7, pc}
 8006128:	08011d68 	.word	0x08011d68

0800612c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	226f      	movs	r2, #111	@ 0x6f
 800613a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800613c:	f7ff f925 	bl	800538a <LL_RCC_GetSysClkSource>
 8006140:	4602      	mov	r2, r0
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8006146:	f7ff f995 	bl	8005474 <LL_RCC_GetAHBPrescaler>
 800614a:	4602      	mov	r2, r0
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8006150:	f7ff f9b7 	bl	80054c2 <LL_RCC_GetAPB1Prescaler>
 8006154:	4602      	mov	r2, r0
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800615a:	f7ff f9be 	bl	80054da <LL_RCC_GetAPB2Prescaler>
 800615e:	4602      	mov	r2, r0
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8006164:	f7ff f992 	bl	800548c <LL_C2_RCC_GetAHBPrescaler>
 8006168:	4602      	mov	r2, r0
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800616e:	f7ff f99a 	bl	80054a6 <LL_RCC_GetAHB4Prescaler>
 8006172:	4602      	mov	r2, r0
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006178:	4b04      	ldr	r3, [pc, #16]	@ (800618c <HAL_RCC_GetClockConfig+0x60>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0207 	and.w	r2, r3, #7
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	601a      	str	r2, [r3, #0]
}
 8006184:	bf00      	nop
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	58004000 	.word	0x58004000

08006190 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006190:	b590      	push	{r4, r7, lr}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2bb0      	cmp	r3, #176	@ 0xb0
 800619c:	d903      	bls.n	80061a6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800619e:	4b15      	ldr	r3, [pc, #84]	@ (80061f4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80061a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	e007      	b.n	80061b6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	091b      	lsrs	r3, r3, #4
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	4a11      	ldr	r2, [pc, #68]	@ (80061f4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80061b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80061b6:	f7ff f976 	bl	80054a6 <LL_RCC_GetAHB4Prescaler>
 80061ba:	4603      	mov	r3, r0
 80061bc:	091b      	lsrs	r3, r3, #4
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	4a0d      	ldr	r2, [pc, #52]	@ (80061f8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80061c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ce:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4a0a      	ldr	r2, [pc, #40]	@ (80061fc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80061d4:	fba2 2303 	umull	r2, r3, r2, r3
 80061d8:	0c9c      	lsrs	r4, r3, #18
 80061da:	f7fe fea7 	bl	8004f2c <HAL_PWREx_GetVoltageRange>
 80061de:	4603      	mov	r3, r0
 80061e0:	4619      	mov	r1, r3
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 f80c 	bl	8006200 <RCC_SetFlashLatency>
 80061e8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd90      	pop	{r4, r7, pc}
 80061f2:	bf00      	nop
 80061f4:	08011d88 	.word	0x08011d88
 80061f8:	08011d28 	.word	0x08011d28
 80061fc:	431bde83 	.word	0x431bde83

08006200 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006200:	b590      	push	{r4, r7, lr}
 8006202:	b093      	sub	sp, #76	@ 0x4c
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800620a:	4b37      	ldr	r3, [pc, #220]	@ (80062e8 <RCC_SetFlashLatency+0xe8>)
 800620c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8006210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006216:	4a35      	ldr	r2, [pc, #212]	@ (80062ec <RCC_SetFlashLatency+0xec>)
 8006218:	f107 031c 	add.w	r3, r7, #28
 800621c:	ca07      	ldmia	r2, {r0, r1, r2}
 800621e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006222:	4b33      	ldr	r3, [pc, #204]	@ (80062f0 <RCC_SetFlashLatency+0xf0>)
 8006224:	f107 040c 	add.w	r4, r7, #12
 8006228:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800622a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800622e:	2300      	movs	r3, #0
 8006230:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006238:	d11a      	bne.n	8006270 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800623a:	2300      	movs	r3, #0
 800623c:	643b      	str	r3, [r7, #64]	@ 0x40
 800623e:	e013      	b.n	8006268 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	3348      	adds	r3, #72	@ 0x48
 8006246:	443b      	add	r3, r7
 8006248:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	429a      	cmp	r2, r3
 8006250:	d807      	bhi.n	8006262 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	3348      	adds	r3, #72	@ 0x48
 8006258:	443b      	add	r3, r7
 800625a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800625e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006260:	e020      	b.n	80062a4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006264:	3301      	adds	r3, #1
 8006266:	643b      	str	r3, [r7, #64]	@ 0x40
 8006268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800626a:	2b03      	cmp	r3, #3
 800626c:	d9e8      	bls.n	8006240 <RCC_SetFlashLatency+0x40>
 800626e:	e019      	b.n	80062a4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006270:	2300      	movs	r3, #0
 8006272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006274:	e013      	b.n	800629e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	3348      	adds	r3, #72	@ 0x48
 800627c:	443b      	add	r3, r7
 800627e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	429a      	cmp	r2, r3
 8006286:	d807      	bhi.n	8006298 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	3348      	adds	r3, #72	@ 0x48
 800628e:	443b      	add	r3, r7
 8006290:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006294:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006296:	e005      	b.n	80062a4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800629a:	3301      	adds	r3, #1
 800629c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800629e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d9e8      	bls.n	8006276 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80062a4:	4b13      	ldr	r3, [pc, #76]	@ (80062f4 <RCC_SetFlashLatency+0xf4>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f023 0207 	bic.w	r2, r3, #7
 80062ac:	4911      	ldr	r1, [pc, #68]	@ (80062f4 <RCC_SetFlashLatency+0xf4>)
 80062ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062b0:	4313      	orrs	r3, r2
 80062b2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062b4:	f7fb f81a 	bl	80012ec <HAL_GetTick>
 80062b8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80062ba:	e008      	b.n	80062ce <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80062bc:	f7fb f816 	bl	80012ec <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e007      	b.n	80062de <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80062ce:	4b09      	ldr	r3, [pc, #36]	@ (80062f4 <RCC_SetFlashLatency+0xf4>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062d8:	429a      	cmp	r2, r3
 80062da:	d1ef      	bne.n	80062bc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	374c      	adds	r7, #76	@ 0x4c
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd90      	pop	{r4, r7, pc}
 80062e6:	bf00      	nop
 80062e8:	08011c18 	.word	0x08011c18
 80062ec:	08011c28 	.word	0x08011c28
 80062f0:	08011c34 	.word	0x08011c34
 80062f4:	58004000 	.word	0x58004000

080062f8 <LL_RCC_LSE_IsEnabled>:
{
 80062f8:	b480      	push	{r7}
 80062fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80062fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <LL_RCC_LSE_IsEnabled+0x18>
 800630c:	2301      	movs	r3, #1
 800630e:	e000      	b.n	8006312 <LL_RCC_LSE_IsEnabled+0x1a>
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <LL_RCC_LSE_IsReady>:
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006320:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b02      	cmp	r3, #2
 800632e:	d101      	bne.n	8006334 <LL_RCC_LSE_IsReady+0x18>
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <LL_RCC_LSE_IsReady+0x1a>
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <LL_RCC_SetRFWKPClockSource>:
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800634c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006350:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006354:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <LL_RCC_SetSMPSClockSource>:
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006374:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637a:	f023 0203 	bic.w	r2, r3, #3
 800637e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4313      	orrs	r3, r2
 8006386:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <LL_RCC_SetSMPSPrescaler>:
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800639c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80063a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <LL_RCC_SetUSARTClockSource>:
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80063c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063cc:	f023 0203 	bic.w	r2, r3, #3
 80063d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <LL_RCC_SetLPUARTClockSource>:
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80063f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4313      	orrs	r3, r2
 8006404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <LL_RCC_SetI2CClockSource>:
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800641c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006420:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	091b      	lsrs	r3, r3, #4
 8006428:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800642c:	43db      	mvns	r3, r3
 800642e:	401a      	ands	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006438:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800643c:	4313      	orrs	r3, r2
 800643e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <LL_RCC_SetLPTIMClockSource>:
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800645a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	0c1b      	lsrs	r3, r3, #16
 8006462:	041b      	lsls	r3, r3, #16
 8006464:	43db      	mvns	r3, r3
 8006466:	401a      	ands	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	041b      	lsls	r3, r3, #16
 800646c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006470:	4313      	orrs	r3, r2
 8006472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <LL_RCC_SetSAIClockSource>:
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800648a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800648e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006492:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006496:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4313      	orrs	r3, r2
 800649e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <LL_RCC_SetRNGClockSource>:
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80064b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064be:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80064c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <LL_RCC_SetCLK48ClockSource>:
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80064e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80064fa:	bf00      	nop
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <LL_RCC_SetUSBClockSource>:
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b082      	sub	sp, #8
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff ffe3 	bl	80064da <LL_RCC_SetCLK48ClockSource>
}
 8006514:	bf00      	nop
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <LL_RCC_SetADCClockSource>:
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800652c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006530:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <LL_RCC_SetRTCClockSource>:
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006558:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800655c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <LL_RCC_GetRTCClockSource>:
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800657c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006580:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006584:	4618      	mov	r0, r3
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <LL_RCC_ForceBackupDomainReset>:
{
 800658e:	b480      	push	{r7}
 8006590:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006592:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800659a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800659e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80065a6:	bf00      	nop
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <LL_RCC_ReleaseBackupDomainReset>:
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80065b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80065c8:	bf00      	nop
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <LL_RCC_PLLSAI1_Enable>:
{
 80065d2:	b480      	push	{r7}
 80065d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80065d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065e4:	6013      	str	r3, [r2, #0]
}
 80065e6:	bf00      	nop
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <LL_RCC_PLLSAI1_Disable>:
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80065f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006602:	6013      	str	r3, [r2, #0]
}
 8006604:	bf00      	nop
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <LL_RCC_PLLSAI1_IsReady>:
{
 800660e:	b480      	push	{r7}
 8006610:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800661c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006620:	d101      	bne.n	8006626 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006622:	2301      	movs	r3, #1
 8006624:	e000      	b.n	8006628 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b088      	sub	sp, #32
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800663a:	2300      	movs	r3, #0
 800663c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800663e:	2300      	movs	r3, #0
 8006640:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800664a:	2b00      	cmp	r3, #0
 800664c:	d034      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006652:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006656:	d021      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006658:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800665c:	d81b      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800665e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006662:	d01d      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006664:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006668:	d815      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00b      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800666e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006672:	d110      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800667e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006682:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006684:	e00d      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3304      	adds	r3, #4
 800668a:	4618      	mov	r0, r3
 800668c:	f000 f947 	bl	800691e <RCCEx_PLLSAI1_ConfigNP>
 8006690:	4603      	mov	r3, r0
 8006692:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006694:	e005      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	77fb      	strb	r3, [r7, #31]
        break;
 800669a:	e002      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80066a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a2:	7ffb      	ldrb	r3, [r7, #31]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d105      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff fee8 	bl	8006482 <LL_RCC_SetSAIClockSource>
 80066b2:	e001      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b4:	7ffb      	ldrb	r3, [r7, #31]
 80066b6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d046      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80066c4:	f7ff ff56 	bl	8006574 <LL_RCC_GetRTCClockSource>
 80066c8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d03c      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80066d4:	f7fe fc1a 	bl	8004f0c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d105      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff ff30 	bl	8006548 <LL_RCC_SetRTCClockSource>
 80066e8:	e02e      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80066ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80066f4:	f7ff ff4b 	bl	800658e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80066f8:	f7ff ff5a 	bl	80065b0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800670a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006714:	f7ff fdf0 	bl	80062f8 <LL_RCC_LSE_IsEnabled>
 8006718:	4603      	mov	r3, r0
 800671a:	2b01      	cmp	r3, #1
 800671c:	d114      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800671e:	f7fa fde5 	bl	80012ec <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006724:	e00b      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006726:	f7fa fde1 	bl	80012ec <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006734:	4293      	cmp	r3, r2
 8006736:	d902      	bls.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	77fb      	strb	r3, [r7, #31]
              break;
 800673c:	e004      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800673e:	f7ff fded 	bl	800631c <LL_RCC_LSE_IsReady>
 8006742:	4603      	mov	r3, r0
 8006744:	2b01      	cmp	r3, #1
 8006746:	d1ee      	bne.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006748:	7ffb      	ldrb	r3, [r7, #31]
 800674a:	77bb      	strb	r3, [r7, #30]
 800674c:	e001      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674e:	7ffb      	ldrb	r3, [r7, #31]
 8006750:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d004      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	4618      	mov	r0, r3
 8006764:	f7ff fe2a 	bl	80063bc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d004      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	4618      	mov	r0, r3
 800677a:	f7ff fe35 	bl	80063e8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0310 	and.w	r3, r3, #16
 8006786:	2b00      	cmp	r3, #0
 8006788:	d004      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678e:	4618      	mov	r0, r3
 8006790:	f7ff fe5d 	bl	800644e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0320 	and.w	r3, r3, #32
 800679c:	2b00      	cmp	r3, #0
 800679e:	d004      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff fe52 	bl	800644e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d004      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff fe2a 	bl	8006414 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0308 	and.w	r3, r3, #8
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d004      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff fe1f 	bl	8006414 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d022      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff fe8d 	bl	8006506 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067f4:	d107      	bne.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80067f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006800:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006804:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800680a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800680e:	d10b      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3304      	adds	r3, #4
 8006814:	4618      	mov	r0, r3
 8006816:	f000 f8dd 	bl	80069d4 <RCCEx_PLLSAI1_ConfigNQ>
 800681a:	4603      	mov	r3, r0
 800681c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800681e:	7ffb      	ldrb	r3, [r7, #31]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006824:	7ffb      	ldrb	r3, [r7, #31]
 8006826:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006830:	2b00      	cmp	r3, #0
 8006832:	d02b      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800683c:	d008      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006842:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006846:	d003      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684c:	2b00      	cmp	r3, #0
 800684e:	d105      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff fe2a 	bl	80064ae <LL_RCC_SetRNGClockSource>
 800685a:	e00a      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006860:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	2000      	movs	r0, #0
 8006868:	f7ff fe21 	bl	80064ae <LL_RCC_SetRNGClockSource>
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f7ff fe34 	bl	80064da <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006876:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800687a:	d107      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800687c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800688a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006894:	2b00      	cmp	r3, #0
 8006896:	d022      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff fe3d 	bl	800651c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068aa:	d107      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ba:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068c4:	d10b      	bne.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3304      	adds	r3, #4
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 f8dd 	bl	8006a8a <RCCEx_PLLSAI1_ConfigNR>
 80068d0:	4603      	mov	r3, r0
 80068d2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80068d4:	7ffb      	ldrb	r3, [r7, #31]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80068da:	7ffb      	ldrb	r3, [r7, #31]
 80068dc:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d004      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff fd26 	bl	8006340 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d009      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff fd45 	bl	8006394 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff fd2c 	bl	800636c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006914:	7fbb      	ldrb	r3, [r7, #30]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3720      	adds	r7, #32
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800692a:	f7ff fe61 	bl	80065f0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800692e:	f7fa fcdd 	bl	80012ec <HAL_GetTick>
 8006932:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006934:	e009      	b.n	800694a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006936:	f7fa fcd9 	bl	80012ec <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d902      	bls.n	800694a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	73fb      	strb	r3, [r7, #15]
      break;
 8006948:	e004      	b.n	8006954 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800694a:	f7ff fe60 	bl	800660e <LL_RCC_PLLSAI1_IsReady>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1f0      	bne.n	8006936 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006954:	7bfb      	ldrb	r3, [r7, #15]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d137      	bne.n	80069ca <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800695a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800696e:	4313      	orrs	r3, r2
 8006970:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006984:	4313      	orrs	r3, r2
 8006986:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006988:	f7ff fe23 	bl	80065d2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800698c:	f7fa fcae 	bl	80012ec <HAL_GetTick>
 8006990:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006992:	e009      	b.n	80069a8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006994:	f7fa fcaa 	bl	80012ec <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d902      	bls.n	80069a8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	73fb      	strb	r3, [r7, #15]
        break;
 80069a6:	e004      	b.n	80069b2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80069a8:	f7ff fe31 	bl	800660e <LL_RCC_PLLSAI1_IsReady>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d1f0      	bne.n	8006994 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d108      	bne.n	80069ca <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80069b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069bc:	691a      	ldr	r2, [r3, #16]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069c6:	4313      	orrs	r3, r2
 80069c8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80069e0:	f7ff fe06 	bl	80065f0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80069e4:	f7fa fc82 	bl	80012ec <HAL_GetTick>
 80069e8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80069ea:	e009      	b.n	8006a00 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069ec:	f7fa fc7e 	bl	80012ec <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d902      	bls.n	8006a00 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	73fb      	strb	r3, [r7, #15]
      break;
 80069fe:	e004      	b.n	8006a0a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006a00:	f7ff fe05 	bl	800660e <LL_RCC_PLLSAI1_IsReady>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1f0      	bne.n	80069ec <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d137      	bne.n	8006a80 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	021b      	lsls	r3, r3, #8
 8006a20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a24:	4313      	orrs	r3, r2
 8006a26:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006a3e:	f7ff fdc8 	bl	80065d2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a42:	f7fa fc53 	bl	80012ec <HAL_GetTick>
 8006a46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006a48:	e009      	b.n	8006a5e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a4a:	f7fa fc4f 	bl	80012ec <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d902      	bls.n	8006a5e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	73fb      	strb	r3, [r7, #15]
        break;
 8006a5c:	e004      	b.n	8006a68 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006a5e:	f7ff fdd6 	bl	800660e <LL_RCC_PLLSAI1_IsReady>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d1f0      	bne.n	8006a4a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d108      	bne.n	8006a80 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a72:	691a      	ldr	r2, [r3, #16]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006a96:	f7ff fdab 	bl	80065f0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a9a:	f7fa fc27 	bl	80012ec <HAL_GetTick>
 8006a9e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006aa0:	e009      	b.n	8006ab6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006aa2:	f7fa fc23 	bl	80012ec <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d902      	bls.n	8006ab6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab4:	e004      	b.n	8006ac0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006ab6:	f7ff fdaa 	bl	800660e <LL_RCC_PLLSAI1_IsReady>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1f0      	bne.n	8006aa2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d137      	bne.n	8006b36 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	021b      	lsls	r3, r3, #8
 8006ad6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ada:	4313      	orrs	r3, r2
 8006adc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006ade:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006af0:	4313      	orrs	r3, r2
 8006af2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006af4:	f7ff fd6d 	bl	80065d2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006af8:	f7fa fbf8 	bl	80012ec <HAL_GetTick>
 8006afc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006afe:	e009      	b.n	8006b14 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b00:	f7fa fbf4 	bl	80012ec <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d902      	bls.n	8006b14 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	73fb      	strb	r3, [r7, #15]
        break;
 8006b12:	e004      	b.n	8006b1e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b14:	f7ff fd7b 	bl	800660e <LL_RCC_PLLSAI1_IsReady>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d1f0      	bne.n	8006b00 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d108      	bne.n	8006b36 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b32:	4313      	orrs	r3, r2
 8006b34:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e049      	b.n	8006be6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fa f94a 	bl	8000e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4610      	mov	r0, r2
 8006b80:	f000 fa7c 	bl	800707c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
	...

08006bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d001      	beq.n	8006c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e036      	b.n	8006c76 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0201 	orr.w	r2, r2, #1
 8006c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a17      	ldr	r2, [pc, #92]	@ (8006c84 <HAL_TIM_Base_Start_IT+0x94>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d004      	beq.n	8006c34 <HAL_TIM_Base_Start_IT+0x44>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c32:	d115      	bne.n	8006c60 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	4b13      	ldr	r3, [pc, #76]	@ (8006c88 <HAL_TIM_Base_Start_IT+0x98>)
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2b06      	cmp	r3, #6
 8006c44:	d015      	beq.n	8006c72 <HAL_TIM_Base_Start_IT+0x82>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c4c:	d011      	beq.n	8006c72 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f042 0201 	orr.w	r2, r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c5e:	e008      	b.n	8006c72 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f042 0201 	orr.w	r2, r2, #1
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	e000      	b.n	8006c74 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40012c00 	.word	0x40012c00
 8006c88:	00010007 	.word	0x00010007

08006c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d020      	beq.n	8006cf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d01b      	beq.n	8006cf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f06f 0202 	mvn.w	r2, #2
 8006cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f9b2 	bl	8007040 <HAL_TIM_IC_CaptureCallback>
 8006cdc:	e005      	b.n	8006cea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f9a4 	bl	800702c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f9b5 	bl	8007054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f003 0304 	and.w	r3, r3, #4
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d020      	beq.n	8006d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d01b      	beq.n	8006d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f06f 0204 	mvn.w	r2, #4
 8006d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2202      	movs	r2, #2
 8006d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f98c 	bl	8007040 <HAL_TIM_IC_CaptureCallback>
 8006d28:	e005      	b.n	8006d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f97e 	bl	800702c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f98f 	bl	8007054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f003 0308 	and.w	r3, r3, #8
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d020      	beq.n	8006d88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01b      	beq.n	8006d88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f06f 0208 	mvn.w	r2, #8
 8006d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2204      	movs	r2, #4
 8006d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	f003 0303 	and.w	r3, r3, #3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f966 	bl	8007040 <HAL_TIM_IC_CaptureCallback>
 8006d74:	e005      	b.n	8006d82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f958 	bl	800702c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f969 	bl	8007054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f003 0310 	and.w	r3, r3, #16
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d020      	beq.n	8006dd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f003 0310 	and.w	r3, r3, #16
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d01b      	beq.n	8006dd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f06f 0210 	mvn.w	r2, #16
 8006da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2208      	movs	r2, #8
 8006daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f940 	bl	8007040 <HAL_TIM_IC_CaptureCallback>
 8006dc0:	e005      	b.n	8006dce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f932 	bl	800702c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f943 	bl	8007054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00c      	beq.n	8006df8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d007      	beq.n	8006df8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f06f 0201 	mvn.w	r2, #1
 8006df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7f9 fec4 	bl	8000b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d104      	bne.n	8006e0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00c      	beq.n	8006e26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d007      	beq.n	8006e26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 faa1 	bl	8007368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00c      	beq.n	8006e4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d007      	beq.n	8006e4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fa99 	bl	800737c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00c      	beq.n	8006e6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d007      	beq.n	8006e6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f8fd 	bl	8007068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f003 0320 	and.w	r3, r3, #32
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00c      	beq.n	8006e92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f003 0320 	and.w	r3, r3, #32
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d007      	beq.n	8006e92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f06f 0220 	mvn.w	r2, #32
 8006e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fa61 	bl	8007354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e92:	bf00      	nop
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d101      	bne.n	8006eb6 <HAL_TIM_ConfigClockSource+0x1c>
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	e0b6      	b.n	8007024 <HAL_TIM_ConfigClockSource+0x18a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006ed4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ed8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ee0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ef2:	d03e      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0xd8>
 8006ef4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ef8:	f200 8087 	bhi.w	800700a <HAL_TIM_ConfigClockSource+0x170>
 8006efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f00:	f000 8086 	beq.w	8007010 <HAL_TIM_ConfigClockSource+0x176>
 8006f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f08:	d87f      	bhi.n	800700a <HAL_TIM_ConfigClockSource+0x170>
 8006f0a:	2b70      	cmp	r3, #112	@ 0x70
 8006f0c:	d01a      	beq.n	8006f44 <HAL_TIM_ConfigClockSource+0xaa>
 8006f0e:	2b70      	cmp	r3, #112	@ 0x70
 8006f10:	d87b      	bhi.n	800700a <HAL_TIM_ConfigClockSource+0x170>
 8006f12:	2b60      	cmp	r3, #96	@ 0x60
 8006f14:	d050      	beq.n	8006fb8 <HAL_TIM_ConfigClockSource+0x11e>
 8006f16:	2b60      	cmp	r3, #96	@ 0x60
 8006f18:	d877      	bhi.n	800700a <HAL_TIM_ConfigClockSource+0x170>
 8006f1a:	2b50      	cmp	r3, #80	@ 0x50
 8006f1c:	d03c      	beq.n	8006f98 <HAL_TIM_ConfigClockSource+0xfe>
 8006f1e:	2b50      	cmp	r3, #80	@ 0x50
 8006f20:	d873      	bhi.n	800700a <HAL_TIM_ConfigClockSource+0x170>
 8006f22:	2b40      	cmp	r3, #64	@ 0x40
 8006f24:	d058      	beq.n	8006fd8 <HAL_TIM_ConfigClockSource+0x13e>
 8006f26:	2b40      	cmp	r3, #64	@ 0x40
 8006f28:	d86f      	bhi.n	800700a <HAL_TIM_ConfigClockSource+0x170>
 8006f2a:	2b30      	cmp	r3, #48	@ 0x30
 8006f2c:	d064      	beq.n	8006ff8 <HAL_TIM_ConfigClockSource+0x15e>
 8006f2e:	2b30      	cmp	r3, #48	@ 0x30
 8006f30:	d86b      	bhi.n	800700a <HAL_TIM_ConfigClockSource+0x170>
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	d060      	beq.n	8006ff8 <HAL_TIM_ConfigClockSource+0x15e>
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	d867      	bhi.n	800700a <HAL_TIM_ConfigClockSource+0x170>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d05c      	beq.n	8006ff8 <HAL_TIM_ConfigClockSource+0x15e>
 8006f3e:	2b10      	cmp	r3, #16
 8006f40:	d05a      	beq.n	8006ff8 <HAL_TIM_ConfigClockSource+0x15e>
 8006f42:	e062      	b.n	800700a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f54:	f000 f97e 	bl	8007254 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	609a      	str	r2, [r3, #8]
      break;
 8006f70:	e04f      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f82:	f000 f967 	bl	8007254 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f94:	609a      	str	r2, [r3, #8]
      break;
 8006f96:	e03c      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	f000 f8d9 	bl	800715c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2150      	movs	r1, #80	@ 0x50
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 f932 	bl	800721a <TIM_ITRx_SetConfig>
      break;
 8006fb6:	e02c      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	f000 f8f8 	bl	80071ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2160      	movs	r1, #96	@ 0x60
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 f922 	bl	800721a <TIM_ITRx_SetConfig>
      break;
 8006fd6:	e01c      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	f000 f8b9 	bl	800715c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2140      	movs	r1, #64	@ 0x40
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 f912 	bl	800721a <TIM_ITRx_SetConfig>
      break;
 8006ff6:	e00c      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4619      	mov	r1, r3
 8007002:	4610      	mov	r0, r2
 8007004:	f000 f909 	bl	800721a <TIM_ITRx_SetConfig>
      break;
 8007008:	e003      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	73fb      	strb	r3, [r7, #15]
      break;
 800700e:	e000      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007010:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007022:	7bfb      	ldrb	r3, [r7, #15]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a30      	ldr	r2, [pc, #192]	@ (8007150 <TIM_Base_SetConfig+0xd4>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d003      	beq.n	800709c <TIM_Base_SetConfig+0x20>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800709a:	d108      	bne.n	80070ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a27      	ldr	r2, [pc, #156]	@ (8007150 <TIM_Base_SetConfig+0xd4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d00b      	beq.n	80070ce <TIM_Base_SetConfig+0x52>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070bc:	d007      	beq.n	80070ce <TIM_Base_SetConfig+0x52>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a24      	ldr	r2, [pc, #144]	@ (8007154 <TIM_Base_SetConfig+0xd8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d003      	beq.n	80070ce <TIM_Base_SetConfig+0x52>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a23      	ldr	r2, [pc, #140]	@ (8007158 <TIM_Base_SetConfig+0xdc>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d108      	bne.n	80070e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4313      	orrs	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a12      	ldr	r2, [pc, #72]	@ (8007150 <TIM_Base_SetConfig+0xd4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d007      	beq.n	800711c <TIM_Base_SetConfig+0xa0>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a11      	ldr	r2, [pc, #68]	@ (8007154 <TIM_Base_SetConfig+0xd8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d003      	beq.n	800711c <TIM_Base_SetConfig+0xa0>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a10      	ldr	r2, [pc, #64]	@ (8007158 <TIM_Base_SetConfig+0xdc>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d103      	bne.n	8007124 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b01      	cmp	r3, #1
 8007134:	d105      	bne.n	8007142 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	f023 0201 	bic.w	r2, r3, #1
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	611a      	str	r2, [r3, #16]
  }
}
 8007142:	bf00      	nop
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	40012c00 	.word	0x40012c00
 8007154:	40014400 	.word	0x40014400
 8007158:	40014800 	.word	0x40014800

0800715c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6a1b      	ldr	r3, [r3, #32]
 800716c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	f023 0201 	bic.w	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	011b      	lsls	r3, r3, #4
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	4313      	orrs	r3, r2
 8007190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f023 030a 	bic.w	r3, r3, #10
 8007198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4313      	orrs	r3, r2
 80071a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	621a      	str	r2, [r3, #32]
}
 80071ae:	bf00      	nop
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b087      	sub	sp, #28
 80071be:	af00      	add	r7, sp, #0
 80071c0:	60f8      	str	r0, [r7, #12]
 80071c2:	60b9      	str	r1, [r7, #8]
 80071c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	f023 0210 	bic.w	r2, r3, #16
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	031b      	lsls	r3, r3, #12
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	011b      	lsls	r3, r3, #4
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	4313      	orrs	r3, r2
 8007200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	621a      	str	r2, [r3, #32]
}
 800720e:	bf00      	nop
 8007210:	371c      	adds	r7, #28
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800721a:	b480      	push	{r7}
 800721c:	b085      	sub	sp, #20
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007230:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007234:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4313      	orrs	r3, r2
 800723c:	f043 0307 	orr.w	r3, r3, #7
 8007240:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	609a      	str	r2, [r3, #8]
}
 8007248:	bf00      	nop
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800726e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	021a      	lsls	r2, r3, #8
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	431a      	orrs	r2, r3
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4313      	orrs	r3, r2
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	609a      	str	r2, [r3, #8]
}
 8007288:	bf00      	nop
 800728a:	371c      	adds	r7, #28
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e04a      	b.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2202      	movs	r2, #2
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a1f      	ldr	r2, [pc, #124]	@ (8007350 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d108      	bne.n	80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80072dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a12      	ldr	r2, [pc, #72]	@ (8007350 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d004      	beq.n	8007316 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007314:	d10c      	bne.n	8007330 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800731c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	4313      	orrs	r3, r2
 8007326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40012c00 	.word	0x40012c00

08007354 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <LL_RCC_GetUSARTClockSource>:
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800739c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4013      	ands	r3, r2
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <LL_RCC_GetLPUARTClockSource>:
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80073b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4013      	ands	r3, r2
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e042      	b.n	8007468 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d106      	bne.n	80073fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7f9 fd1b 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2224      	movs	r2, #36	@ 0x24
 80073fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0201 	bic.w	r2, r2, #1
 8007410:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fa50 	bl	80078c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f825 	bl	8007470 <UART_SetConfig>
 8007426:	4603      	mov	r3, r0
 8007428:	2b01      	cmp	r3, #1
 800742a:	d101      	bne.n	8007430 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e01b      	b.n	8007468 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800743e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800744e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f042 0201 	orr.w	r2, r2, #1
 800745e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 facf 	bl	8007a04 <UART_CheckIdleState>
 8007466:	4603      	mov	r3, r0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007474:	b08c      	sub	sp, #48	@ 0x30
 8007476:	af00      	add	r7, sp, #0
 8007478:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	431a      	orrs	r2, r3
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	431a      	orrs	r2, r3
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	4313      	orrs	r3, r2
 8007496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	4baf      	ldr	r3, [pc, #700]	@ (800775c <UART_SetConfig+0x2ec>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074a8:	430b      	orrs	r3, r1
 80074aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4aa4      	ldr	r2, [pc, #656]	@ (8007760 <UART_SetConfig+0x2f0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d004      	beq.n	80074dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074d8:	4313      	orrs	r3, r2
 80074da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80074e6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	6812      	ldr	r2, [r2, #0]
 80074ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074f0:	430b      	orrs	r3, r1
 80074f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fa:	f023 010f 	bic.w	r1, r3, #15
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a95      	ldr	r2, [pc, #596]	@ (8007764 <UART_SetConfig+0x2f4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d125      	bne.n	8007560 <UART_SetConfig+0xf0>
 8007514:	2003      	movs	r0, #3
 8007516:	f7ff ff3b 	bl	8007390 <LL_RCC_GetUSARTClockSource>
 800751a:	4603      	mov	r3, r0
 800751c:	2b03      	cmp	r3, #3
 800751e:	d81b      	bhi.n	8007558 <UART_SetConfig+0xe8>
 8007520:	a201      	add	r2, pc, #4	@ (adr r2, 8007528 <UART_SetConfig+0xb8>)
 8007522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007526:	bf00      	nop
 8007528:	08007539 	.word	0x08007539
 800752c:	08007549 	.word	0x08007549
 8007530:	08007541 	.word	0x08007541
 8007534:	08007551 	.word	0x08007551
 8007538:	2301      	movs	r3, #1
 800753a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800753e:	e042      	b.n	80075c6 <UART_SetConfig+0x156>
 8007540:	2302      	movs	r3, #2
 8007542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007546:	e03e      	b.n	80075c6 <UART_SetConfig+0x156>
 8007548:	2304      	movs	r3, #4
 800754a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800754e:	e03a      	b.n	80075c6 <UART_SetConfig+0x156>
 8007550:	2308      	movs	r3, #8
 8007552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007556:	e036      	b.n	80075c6 <UART_SetConfig+0x156>
 8007558:	2310      	movs	r3, #16
 800755a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800755e:	e032      	b.n	80075c6 <UART_SetConfig+0x156>
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a7e      	ldr	r2, [pc, #504]	@ (8007760 <UART_SetConfig+0x2f0>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d12a      	bne.n	80075c0 <UART_SetConfig+0x150>
 800756a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800756e:	f7ff ff1f 	bl	80073b0 <LL_RCC_GetLPUARTClockSource>
 8007572:	4603      	mov	r3, r0
 8007574:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007578:	d01a      	beq.n	80075b0 <UART_SetConfig+0x140>
 800757a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800757e:	d81b      	bhi.n	80075b8 <UART_SetConfig+0x148>
 8007580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007584:	d00c      	beq.n	80075a0 <UART_SetConfig+0x130>
 8007586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800758a:	d815      	bhi.n	80075b8 <UART_SetConfig+0x148>
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <UART_SetConfig+0x128>
 8007590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007594:	d008      	beq.n	80075a8 <UART_SetConfig+0x138>
 8007596:	e00f      	b.n	80075b8 <UART_SetConfig+0x148>
 8007598:	2300      	movs	r3, #0
 800759a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800759e:	e012      	b.n	80075c6 <UART_SetConfig+0x156>
 80075a0:	2302      	movs	r3, #2
 80075a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075a6:	e00e      	b.n	80075c6 <UART_SetConfig+0x156>
 80075a8:	2304      	movs	r3, #4
 80075aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ae:	e00a      	b.n	80075c6 <UART_SetConfig+0x156>
 80075b0:	2308      	movs	r3, #8
 80075b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075b6:	e006      	b.n	80075c6 <UART_SetConfig+0x156>
 80075b8:	2310      	movs	r3, #16
 80075ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075be:	e002      	b.n	80075c6 <UART_SetConfig+0x156>
 80075c0:	2310      	movs	r3, #16
 80075c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a65      	ldr	r2, [pc, #404]	@ (8007760 <UART_SetConfig+0x2f0>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	f040 8097 	bne.w	8007700 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80075d6:	2b08      	cmp	r3, #8
 80075d8:	d823      	bhi.n	8007622 <UART_SetConfig+0x1b2>
 80075da:	a201      	add	r2, pc, #4	@ (adr r2, 80075e0 <UART_SetConfig+0x170>)
 80075dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e0:	08007605 	.word	0x08007605
 80075e4:	08007623 	.word	0x08007623
 80075e8:	0800760d 	.word	0x0800760d
 80075ec:	08007623 	.word	0x08007623
 80075f0:	08007613 	.word	0x08007613
 80075f4:	08007623 	.word	0x08007623
 80075f8:	08007623 	.word	0x08007623
 80075fc:	08007623 	.word	0x08007623
 8007600:	0800761b 	.word	0x0800761b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007604:	f7fe fd66 	bl	80060d4 <HAL_RCC_GetPCLK1Freq>
 8007608:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800760a:	e010      	b.n	800762e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800760c:	4b56      	ldr	r3, [pc, #344]	@ (8007768 <UART_SetConfig+0x2f8>)
 800760e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007610:	e00d      	b.n	800762e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007612:	f7fe fcdf 	bl	8005fd4 <HAL_RCC_GetSysClockFreq>
 8007616:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007618:	e009      	b.n	800762e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800761a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800761e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007620:	e005      	b.n	800762e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800762c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800762e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 812b 	beq.w	800788c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763a:	4a4c      	ldr	r2, [pc, #304]	@ (800776c <UART_SetConfig+0x2fc>)
 800763c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007640:	461a      	mov	r2, r3
 8007642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007644:	fbb3 f3f2 	udiv	r3, r3, r2
 8007648:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	4613      	mov	r3, r2
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	4413      	add	r3, r2
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	429a      	cmp	r2, r3
 8007658:	d305      	bcc.n	8007666 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	429a      	cmp	r2, r3
 8007664:	d903      	bls.n	800766e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800766c:	e10e      	b.n	800788c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	2200      	movs	r2, #0
 8007672:	60bb      	str	r3, [r7, #8]
 8007674:	60fa      	str	r2, [r7, #12]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767a:	4a3c      	ldr	r2, [pc, #240]	@ (800776c <UART_SetConfig+0x2fc>)
 800767c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007680:	b29b      	uxth	r3, r3
 8007682:	2200      	movs	r2, #0
 8007684:	603b      	str	r3, [r7, #0]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800768c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007690:	f7f8 fdc6 	bl	8000220 <__aeabi_uldivmod>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4610      	mov	r0, r2
 800769a:	4619      	mov	r1, r3
 800769c:	f04f 0200 	mov.w	r2, #0
 80076a0:	f04f 0300 	mov.w	r3, #0
 80076a4:	020b      	lsls	r3, r1, #8
 80076a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076aa:	0202      	lsls	r2, r0, #8
 80076ac:	6979      	ldr	r1, [r7, #20]
 80076ae:	6849      	ldr	r1, [r1, #4]
 80076b0:	0849      	lsrs	r1, r1, #1
 80076b2:	2000      	movs	r0, #0
 80076b4:	460c      	mov	r4, r1
 80076b6:	4605      	mov	r5, r0
 80076b8:	eb12 0804 	adds.w	r8, r2, r4
 80076bc:	eb43 0905 	adc.w	r9, r3, r5
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	469a      	mov	sl, r3
 80076c8:	4693      	mov	fp, r2
 80076ca:	4652      	mov	r2, sl
 80076cc:	465b      	mov	r3, fp
 80076ce:	4640      	mov	r0, r8
 80076d0:	4649      	mov	r1, r9
 80076d2:	f7f8 fda5 	bl	8000220 <__aeabi_uldivmod>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	4613      	mov	r3, r2
 80076dc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076e4:	d308      	bcc.n	80076f8 <UART_SetConfig+0x288>
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076ec:	d204      	bcs.n	80076f8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6a3a      	ldr	r2, [r7, #32]
 80076f4:	60da      	str	r2, [r3, #12]
 80076f6:	e0c9      	b.n	800788c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076fe:	e0c5      	b.n	800788c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007708:	d16d      	bne.n	80077e6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800770a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800770e:	3b01      	subs	r3, #1
 8007710:	2b07      	cmp	r3, #7
 8007712:	d82d      	bhi.n	8007770 <UART_SetConfig+0x300>
 8007714:	a201      	add	r2, pc, #4	@ (adr r2, 800771c <UART_SetConfig+0x2ac>)
 8007716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771a:	bf00      	nop
 800771c:	0800773d 	.word	0x0800773d
 8007720:	08007745 	.word	0x08007745
 8007724:	08007771 	.word	0x08007771
 8007728:	0800774b 	.word	0x0800774b
 800772c:	08007771 	.word	0x08007771
 8007730:	08007771 	.word	0x08007771
 8007734:	08007771 	.word	0x08007771
 8007738:	08007753 	.word	0x08007753
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800773c:	f7fe fce0 	bl	8006100 <HAL_RCC_GetPCLK2Freq>
 8007740:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007742:	e01b      	b.n	800777c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007744:	4b08      	ldr	r3, [pc, #32]	@ (8007768 <UART_SetConfig+0x2f8>)
 8007746:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007748:	e018      	b.n	800777c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800774a:	f7fe fc43 	bl	8005fd4 <HAL_RCC_GetSysClockFreq>
 800774e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007750:	e014      	b.n	800777c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007756:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007758:	e010      	b.n	800777c <UART_SetConfig+0x30c>
 800775a:	bf00      	nop
 800775c:	cfff69f3 	.word	0xcfff69f3
 8007760:	40008000 	.word	0x40008000
 8007764:	40013800 	.word	0x40013800
 8007768:	00f42400 	.word	0x00f42400
 800776c:	08011dc8 	.word	0x08011dc8
      default:
        pclk = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800777a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800777c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 8084 	beq.w	800788c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007788:	4a4b      	ldr	r2, [pc, #300]	@ (80078b8 <UART_SetConfig+0x448>)
 800778a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800778e:	461a      	mov	r2, r3
 8007790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007792:	fbb3 f3f2 	udiv	r3, r3, r2
 8007796:	005a      	lsls	r2, r3, #1
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	085b      	lsrs	r3, r3, #1
 800779e:	441a      	add	r2, r3
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	2b0f      	cmp	r3, #15
 80077ae:	d916      	bls.n	80077de <UART_SetConfig+0x36e>
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077b6:	d212      	bcs.n	80077de <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	f023 030f 	bic.w	r3, r3, #15
 80077c0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	085b      	lsrs	r3, r3, #1
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	8bfb      	ldrh	r3, [r7, #30]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	8bfa      	ldrh	r2, [r7, #30]
 80077da:	60da      	str	r2, [r3, #12]
 80077dc:	e056      	b.n	800788c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80077e4:	e052      	b.n	800788c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80077ea:	3b01      	subs	r3, #1
 80077ec:	2b07      	cmp	r3, #7
 80077ee:	d822      	bhi.n	8007836 <UART_SetConfig+0x3c6>
 80077f0:	a201      	add	r2, pc, #4	@ (adr r2, 80077f8 <UART_SetConfig+0x388>)
 80077f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f6:	bf00      	nop
 80077f8:	08007819 	.word	0x08007819
 80077fc:	08007821 	.word	0x08007821
 8007800:	08007837 	.word	0x08007837
 8007804:	08007827 	.word	0x08007827
 8007808:	08007837 	.word	0x08007837
 800780c:	08007837 	.word	0x08007837
 8007810:	08007837 	.word	0x08007837
 8007814:	0800782f 	.word	0x0800782f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007818:	f7fe fc72 	bl	8006100 <HAL_RCC_GetPCLK2Freq>
 800781c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800781e:	e010      	b.n	8007842 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007820:	4b26      	ldr	r3, [pc, #152]	@ (80078bc <UART_SetConfig+0x44c>)
 8007822:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007824:	e00d      	b.n	8007842 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007826:	f7fe fbd5 	bl	8005fd4 <HAL_RCC_GetSysClockFreq>
 800782a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800782c:	e009      	b.n	8007842 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800782e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007832:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007834:	e005      	b.n	8007842 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007840:	bf00      	nop
    }

    if (pclk != 0U)
 8007842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007844:	2b00      	cmp	r3, #0
 8007846:	d021      	beq.n	800788c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784c:	4a1a      	ldr	r2, [pc, #104]	@ (80078b8 <UART_SetConfig+0x448>)
 800784e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007852:	461a      	mov	r2, r3
 8007854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007856:	fbb3 f2f2 	udiv	r2, r3, r2
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	085b      	lsrs	r3, r3, #1
 8007860:	441a      	add	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	fbb2 f3f3 	udiv	r3, r2, r3
 800786a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	2b0f      	cmp	r3, #15
 8007870:	d909      	bls.n	8007886 <UART_SetConfig+0x416>
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007878:	d205      	bcs.n	8007886 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	b29a      	uxth	r2, r3
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	60da      	str	r2, [r3, #12]
 8007884:	e002      	b.n	800788c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	2201      	movs	r2, #1
 8007890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2201      	movs	r2, #1
 8007898:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	2200      	movs	r2, #0
 80078a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2200      	movs	r2, #0
 80078a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80078a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3730      	adds	r7, #48	@ 0x30
 80078b0:	46bd      	mov	sp, r7
 80078b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078b6:	bf00      	nop
 80078b8:	08011dc8 	.word	0x08011dc8
 80078bc:	00f42400 	.word	0x00f42400

080078c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078cc:	f003 0308 	and.w	r3, r3, #8
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00a      	beq.n	80078ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00a      	beq.n	800792e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007932:	f003 0304 	and.w	r3, r3, #4
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007954:	f003 0310 	and.w	r3, r3, #16
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00a      	beq.n	8007972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800799c:	2b00      	cmp	r3, #0
 800799e:	d01a      	beq.n	80079d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079be:	d10a      	bne.n	80079d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00a      	beq.n	80079f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	605a      	str	r2, [r3, #4]
  }
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b098      	sub	sp, #96	@ 0x60
 8007a08:	af02      	add	r7, sp, #8
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a14:	f7f9 fc6a 	bl	80012ec <HAL_GetTick>
 8007a18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0308 	and.w	r3, r3, #8
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d12f      	bne.n	8007a88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a30:	2200      	movs	r2, #0
 8007a32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f88e 	bl	8007b58 <UART_WaitOnFlagUntilTimeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d022      	beq.n	8007a88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a56:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a62:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e6      	bne.n	8007a42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2220      	movs	r2, #32
 8007a78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e063      	b.n	8007b50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0304 	and.w	r3, r3, #4
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d149      	bne.n	8007b2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a96:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f857 	bl	8007b58 <UART_WaitOnFlagUntilTimeout>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d03c      	beq.n	8007b2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab8:	e853 3f00 	ldrex	r3, [r3]
 8007abc:	623b      	str	r3, [r7, #32]
   return(result);
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ace:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ad0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1e6      	bne.n	8007ab0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3308      	adds	r3, #8
 8007ae8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f023 0301 	bic.w	r3, r3, #1
 8007af8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3308      	adds	r3, #8
 8007b00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b02:	61fa      	str	r2, [r7, #28]
 8007b04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	69b9      	ldr	r1, [r7, #24]
 8007b08:	69fa      	ldr	r2, [r7, #28]
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	617b      	str	r3, [r7, #20]
   return(result);
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e5      	bne.n	8007ae2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e012      	b.n	8007b50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2220      	movs	r2, #32
 8007b36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3758      	adds	r7, #88	@ 0x58
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	4613      	mov	r3, r2
 8007b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b68:	e04f      	b.n	8007c0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b70:	d04b      	beq.n	8007c0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b72:	f7f9 fbbb 	bl	80012ec <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d302      	bcc.n	8007b88 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e04e      	b.n	8007c2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d037      	beq.n	8007c0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b80      	cmp	r3, #128	@ 0x80
 8007b9e:	d034      	beq.n	8007c0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2b40      	cmp	r3, #64	@ 0x40
 8007ba4:	d031      	beq.n	8007c0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	f003 0308 	and.w	r3, r3, #8
 8007bb0:	2b08      	cmp	r3, #8
 8007bb2:	d110      	bne.n	8007bd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2208      	movs	r2, #8
 8007bba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f838 	bl	8007c32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2208      	movs	r2, #8
 8007bc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e029      	b.n	8007c2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007be0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007be4:	d111      	bne.n	8007c0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 f81e 	bl	8007c32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e00f      	b.n	8007c2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	69da      	ldr	r2, [r3, #28]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	4013      	ands	r3, r2
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	bf0c      	ite	eq
 8007c1a:	2301      	moveq	r3, #1
 8007c1c:	2300      	movne	r3, #0
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	461a      	mov	r2, r3
 8007c22:	79fb      	ldrb	r3, [r7, #7]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d0a0      	beq.n	8007b6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b095      	sub	sp, #84	@ 0x54
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c42:	e853 3f00 	ldrex	r3, [r3]
 8007c46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	461a      	mov	r2, r3
 8007c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c58:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c5a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c60:	e841 2300 	strex	r3, r2, [r1]
 8007c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1e6      	bne.n	8007c3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3308      	adds	r3, #8
 8007c72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	e853 3f00 	ldrex	r3, [r3]
 8007c7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c82:	f023 0301 	bic.w	r3, r3, #1
 8007c86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c98:	e841 2300 	strex	r3, r2, [r1]
 8007c9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e3      	bne.n	8007c6c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d118      	bne.n	8007cde <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	e853 3f00 	ldrex	r3, [r3]
 8007cb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f023 0310 	bic.w	r3, r3, #16
 8007cc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cca:	61bb      	str	r3, [r7, #24]
 8007ccc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cce:	6979      	ldr	r1, [r7, #20]
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	e841 2300 	strex	r3, r2, [r1]
 8007cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1e6      	bne.n	8007cac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2220      	movs	r2, #32
 8007ce2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007cf2:	bf00      	nop
 8007cf4:	3754      	adds	r7, #84	@ 0x54
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d101      	bne.n	8007d14 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d10:	2302      	movs	r3, #2
 8007d12:	e027      	b.n	8007d64 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2224      	movs	r2, #36	@ 0x24
 8007d20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f022 0201 	bic.w	r2, r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007d42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2220      	movs	r2, #32
 8007d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d101      	bne.n	8007d88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d84:	2302      	movs	r3, #2
 8007d86:	e02d      	b.n	8007de4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2224      	movs	r2, #36	@ 0x24
 8007d94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0201 	bic.w	r2, r2, #1
 8007dae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f84f 	bl	8007e68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d101      	bne.n	8007e04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e00:	2302      	movs	r3, #2
 8007e02:	e02d      	b.n	8007e60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2224      	movs	r2, #36	@ 0x24
 8007e10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f022 0201 	bic.w	r2, r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f811 	bl	8007e68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2220      	movs	r2, #32
 8007e52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d108      	bne.n	8007e8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e88:	e031      	b.n	8007eee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e8a:	2308      	movs	r3, #8
 8007e8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e8e:	2308      	movs	r3, #8
 8007e90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	0e5b      	lsrs	r3, r3, #25
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	f003 0307 	and.w	r3, r3, #7
 8007ea0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	0f5b      	lsrs	r3, r3, #29
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	f003 0307 	and.w	r3, r3, #7
 8007eb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	7b3a      	ldrb	r2, [r7, #12]
 8007eb6:	4911      	ldr	r1, [pc, #68]	@ (8007efc <UARTEx_SetNbDataToProcess+0x94>)
 8007eb8:	5c8a      	ldrb	r2, [r1, r2]
 8007eba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ebe:	7b3a      	ldrb	r2, [r7, #12]
 8007ec0:	490f      	ldr	r1, [pc, #60]	@ (8007f00 <UARTEx_SetNbDataToProcess+0x98>)
 8007ec2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ec4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	7b7a      	ldrb	r2, [r7, #13]
 8007ed4:	4909      	ldr	r1, [pc, #36]	@ (8007efc <UARTEx_SetNbDataToProcess+0x94>)
 8007ed6:	5c8a      	ldrb	r2, [r1, r2]
 8007ed8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007edc:	7b7a      	ldrb	r2, [r7, #13]
 8007ede:	4908      	ldr	r1, [pc, #32]	@ (8007f00 <UARTEx_SetNbDataToProcess+0x98>)
 8007ee0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ee2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007eee:	bf00      	nop
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	08011de0 	.word	0x08011de0
 8007f00:	08011de8 	.word	0x08011de8

08007f04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007f14:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007f18:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b085      	sub	sp, #20
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007f3a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007f3e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	43db      	mvns	r3, r3
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	4013      	ands	r3, r2
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	1d3b      	adds	r3, r7, #4
 8007f72:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3714      	adds	r7, #20
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b09d      	sub	sp, #116	@ 0x74
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	78db      	ldrb	r3, [r3, #3]
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d81f      	bhi.n	8008016 <USB_ActivateEndpoint+0x72>
 8007fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fdc <USB_ActivateEndpoint+0x38>)
 8007fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fdc:	08007fed 	.word	0x08007fed
 8007fe0:	08008009 	.word	0x08008009
 8007fe4:	0800801f 	.word	0x0800801f
 8007fe8:	08007ffb 	.word	0x08007ffb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007fec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007ff0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007ff4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007ff8:	e012      	b.n	8008020 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007ffa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007ffe:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008002:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008006:	e00b      	b.n	8008020 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008008:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800800c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008010:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008014:	e004      	b.n	8008020 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800801c:	e000      	b.n	8008020 <USB_ActivateEndpoint+0x7c>
      break;
 800801e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	441a      	add	r2, r3
 800802a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800802e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800803a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800803e:	b29b      	uxth	r3, r3
 8008040:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	b21b      	sxth	r3, r3
 8008052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800805a:	b21a      	sxth	r2, r3
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	b21b      	sxth	r3, r3
 8008062:	4313      	orrs	r3, r2
 8008064:	b21b      	sxth	r3, r3
 8008066:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	441a      	add	r2, r3
 8008074:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008078:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800807c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008080:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008088:	b29b      	uxth	r3, r3
 800808a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	7b1b      	ldrb	r3, [r3, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f040 8178 	bne.w	8008386 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	785b      	ldrb	r3, [r3, #1]
 800809a:	2b00      	cmp	r3, #0
 800809c:	f000 8084 	beq.w	80081a8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	61bb      	str	r3, [r7, #24]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	461a      	mov	r2, r3
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	4413      	add	r3, r2
 80080b2:	61bb      	str	r3, [r7, #24]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	00da      	lsls	r2, r3, #3
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	88db      	ldrh	r3, [r3, #6]
 80080c8:	085b      	lsrs	r3, r3, #1
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	827b      	strh	r3, [r7, #18]
 80080e2:	8a7b      	ldrh	r3, [r7, #18]
 80080e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d01b      	beq.n	8008124 <USB_ActivateEndpoint+0x180>
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008102:	823b      	strh	r3, [r7, #16]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	441a      	add	r2, r3
 800810e:	8a3b      	ldrh	r3, [r7, #16]
 8008110:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008114:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008118:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800811c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008120:	b29b      	uxth	r3, r3
 8008122:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	78db      	ldrb	r3, [r3, #3]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d020      	beq.n	800816e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	881b      	ldrh	r3, [r3, #0]
 8008138:	b29b      	uxth	r3, r3
 800813a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800813e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008142:	81bb      	strh	r3, [r7, #12]
 8008144:	89bb      	ldrh	r3, [r7, #12]
 8008146:	f083 0320 	eor.w	r3, r3, #32
 800814a:	81bb      	strh	r3, [r7, #12]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	441a      	add	r2, r3
 8008156:	89bb      	ldrh	r3, [r7, #12]
 8008158:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800815c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008160:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008168:	b29b      	uxth	r3, r3
 800816a:	8013      	strh	r3, [r2, #0]
 800816c:	e2d5      	b.n	800871a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	b29b      	uxth	r3, r3
 800817c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008184:	81fb      	strh	r3, [r7, #14]
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	441a      	add	r2, r3
 8008190:	89fb      	ldrh	r3, [r7, #14]
 8008192:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008196:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800819a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800819e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	8013      	strh	r3, [r2, #0]
 80081a6:	e2b8      	b.n	800871a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	461a      	mov	r2, r3
 80081b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b8:	4413      	add	r3, r2
 80081ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	00da      	lsls	r2, r3, #3
 80081c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c4:	4413      	add	r3, r2
 80081c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80081ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	88db      	ldrh	r3, [r3, #6]
 80081d0:	085b      	lsrs	r3, r3, #1
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081da:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	461a      	mov	r2, r3
 80081ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ec:	4413      	add	r3, r2
 80081ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	00da      	lsls	r2, r3, #3
 80081f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f8:	4413      	add	r3, r2
 80081fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80081fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	b29b      	uxth	r3, r3
 8008206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800820a:	b29a      	uxth	r2, r3
 800820c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820e:	801a      	strh	r2, [r3, #0]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	2b3e      	cmp	r3, #62	@ 0x3e
 8008216:	d91d      	bls.n	8008254 <USB_ActivateEndpoint+0x2b0>
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	095b      	lsrs	r3, r3, #5
 800821e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	f003 031f 	and.w	r3, r3, #31
 8008228:	2b00      	cmp	r3, #0
 800822a:	d102      	bne.n	8008232 <USB_ActivateEndpoint+0x28e>
 800822c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800822e:	3b01      	subs	r3, #1
 8008230:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	b29a      	uxth	r2, r3
 8008238:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800823a:	b29b      	uxth	r3, r3
 800823c:	029b      	lsls	r3, r3, #10
 800823e:	b29b      	uxth	r3, r3
 8008240:	4313      	orrs	r3, r2
 8008242:	b29b      	uxth	r3, r3
 8008244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800824c:	b29a      	uxth	r2, r3
 800824e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008250:	801a      	strh	r2, [r3, #0]
 8008252:	e026      	b.n	80082a2 <USB_ActivateEndpoint+0x2fe>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10a      	bne.n	8008272 <USB_ActivateEndpoint+0x2ce>
 800825c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825e:	881b      	ldrh	r3, [r3, #0]
 8008260:	b29b      	uxth	r3, r3
 8008262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800826a:	b29a      	uxth	r2, r3
 800826c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826e:	801a      	strh	r2, [r3, #0]
 8008270:	e017      	b.n	80082a2 <USB_ActivateEndpoint+0x2fe>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	085b      	lsrs	r3, r3, #1
 8008278:	66bb      	str	r3, [r7, #104]	@ 0x68
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b00      	cmp	r3, #0
 8008284:	d002      	beq.n	800828c <USB_ActivateEndpoint+0x2e8>
 8008286:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008288:	3301      	adds	r3, #1
 800828a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800828c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	b29a      	uxth	r2, r3
 8008292:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008294:	b29b      	uxth	r3, r3
 8008296:	029b      	lsls	r3, r3, #10
 8008298:	b29b      	uxth	r3, r3
 800829a:	4313      	orrs	r3, r2
 800829c:	b29a      	uxth	r2, r3
 800829e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	847b      	strh	r3, [r7, #34]	@ 0x22
 80082b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80082b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d01b      	beq.n	80082f2 <USB_ActivateEndpoint+0x34e>
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	881b      	ldrh	r3, [r3, #0]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082d0:	843b      	strh	r3, [r7, #32]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	441a      	add	r2, r3
 80082dc:	8c3b      	ldrh	r3, [r7, #32]
 80082de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d124      	bne.n	8008344 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	b29b      	uxth	r3, r3
 8008308:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800830c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008310:	83bb      	strh	r3, [r7, #28]
 8008312:	8bbb      	ldrh	r3, [r7, #28]
 8008314:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008318:	83bb      	strh	r3, [r7, #28]
 800831a:	8bbb      	ldrh	r3, [r7, #28]
 800831c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008320:	83bb      	strh	r3, [r7, #28]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	441a      	add	r2, r3
 800832c:	8bbb      	ldrh	r3, [r7, #28]
 800832e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008332:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008336:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800833a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800833e:	b29b      	uxth	r3, r3
 8008340:	8013      	strh	r3, [r2, #0]
 8008342:	e1ea      	b.n	800871a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	b29b      	uxth	r3, r3
 8008352:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800835a:	83fb      	strh	r3, [r7, #30]
 800835c:	8bfb      	ldrh	r3, [r7, #30]
 800835e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008362:	83fb      	strh	r3, [r7, #30]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	441a      	add	r2, r3
 800836e:	8bfb      	ldrh	r3, [r7, #30]
 8008370:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008374:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800837c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008380:	b29b      	uxth	r3, r3
 8008382:	8013      	strh	r3, [r2, #0]
 8008384:	e1c9      	b.n	800871a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	78db      	ldrb	r3, [r3, #3]
 800838a:	2b02      	cmp	r3, #2
 800838c:	d11e      	bne.n	80083cc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	b29b      	uxth	r3, r3
 800839c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083a4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	441a      	add	r2, r3
 80083b2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80083b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083be:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80083c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	8013      	strh	r3, [r2, #0]
 80083ca:	e01d      	b.n	8008408 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80083de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083e2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	441a      	add	r2, r3
 80083f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80083f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008404:	b29b      	uxth	r3, r3
 8008406:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008412:	b29b      	uxth	r3, r3
 8008414:	461a      	mov	r2, r3
 8008416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008418:	4413      	add	r3, r2
 800841a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	00da      	lsls	r2, r3, #3
 8008422:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008424:	4413      	add	r3, r2
 8008426:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800842a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	891b      	ldrh	r3, [r3, #8]
 8008430:	085b      	lsrs	r3, r3, #1
 8008432:	b29b      	uxth	r3, r3
 8008434:	005b      	lsls	r3, r3, #1
 8008436:	b29a      	uxth	r2, r3
 8008438:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800843a:	801a      	strh	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008446:	b29b      	uxth	r3, r3
 8008448:	461a      	mov	r2, r3
 800844a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800844c:	4413      	add	r3, r2
 800844e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	00da      	lsls	r2, r3, #3
 8008456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008458:	4413      	add	r3, r2
 800845a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800845e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	895b      	ldrh	r3, [r3, #10]
 8008464:	085b      	lsrs	r3, r3, #1
 8008466:	b29b      	uxth	r3, r3
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	b29a      	uxth	r2, r3
 800846c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800846e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	2b00      	cmp	r3, #0
 8008476:	f040 8093 	bne.w	80085a0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800848a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800848e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d01b      	beq.n	80084ce <USB_ActivateEndpoint+0x52a>
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	441a      	add	r2, r3
 80084b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80084ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80084c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80084dc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80084de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d01b      	beq.n	800851e <USB_ActivateEndpoint+0x57a>
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	441a      	add	r2, r3
 8008508:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800850a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800850e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008516:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800851a:	b29b      	uxth	r3, r3
 800851c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	b29b      	uxth	r3, r3
 800852c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008534:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008536:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008538:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800853c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800853e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008540:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008544:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	441a      	add	r2, r3
 8008550:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800855a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800855e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008562:	b29b      	uxth	r3, r3
 8008564:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	b29b      	uxth	r3, r3
 8008574:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008578:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800857c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	441a      	add	r2, r3
 8008588:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800858a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800858e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800859a:	b29b      	uxth	r3, r3
 800859c:	8013      	strh	r3, [r2, #0]
 800859e:	e0bc      	b.n	800871a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80085b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80085b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d01d      	beq.n	80085f8 <USB_ActivateEndpoint+0x654>
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085d2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	441a      	add	r2, r3
 80085e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80085e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80085f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008608:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800860c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008610:	2b00      	cmp	r3, #0
 8008612:	d01d      	beq.n	8008650 <USB_ActivateEndpoint+0x6ac>
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	b29b      	uxth	r3, r3
 8008622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800862a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	441a      	add	r2, r3
 8008638:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800863c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008648:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800864c:	b29b      	uxth	r3, r3
 800864e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	78db      	ldrb	r3, [r3, #3]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d024      	beq.n	80086a2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	b29b      	uxth	r3, r3
 8008666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800866a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800866e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008672:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008676:	f083 0320 	eor.w	r3, r3, #32
 800867a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	441a      	add	r2, r3
 8008688:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800868c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008690:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800869c:	b29b      	uxth	r3, r3
 800869e:	8013      	strh	r3, [r2, #0]
 80086a0:	e01d      	b.n	80086de <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086b8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	441a      	add	r2, r3
 80086c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80086ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086da:	b29b      	uxth	r3, r3
 80086dc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	881b      	ldrh	r3, [r3, #0]
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	441a      	add	r2, r3
 8008702:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008706:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800870a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800870e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008716:	b29b      	uxth	r3, r3
 8008718:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800871a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800871e:	4618      	mov	r0, r3
 8008720:	3774      	adds	r7, #116	@ 0x74
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop

0800872c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800872c:	b480      	push	{r7}
 800872e:	b08d      	sub	sp, #52	@ 0x34
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	7b1b      	ldrb	r3, [r3, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	f040 808e 	bne.w	800885c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	785b      	ldrb	r3, [r3, #1]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d044      	beq.n	80087d2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	881b      	ldrh	r3, [r3, #0]
 8008754:	81bb      	strh	r3, [r7, #12]
 8008756:	89bb      	ldrh	r3, [r7, #12]
 8008758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800875c:	2b00      	cmp	r3, #0
 800875e:	d01b      	beq.n	8008798 <USB_DeactivateEndpoint+0x6c>
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	881b      	ldrh	r3, [r3, #0]
 800876c:	b29b      	uxth	r3, r3
 800876e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008776:	817b      	strh	r3, [r7, #10]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	441a      	add	r2, r3
 8008782:	897b      	ldrh	r3, [r7, #10]
 8008784:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008788:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800878c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008790:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008794:	b29b      	uxth	r3, r3
 8008796:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087ae:	813b      	strh	r3, [r7, #8]
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	441a      	add	r2, r3
 80087ba:	893b      	ldrh	r3, [r7, #8]
 80087bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	8013      	strh	r3, [r2, #0]
 80087d0:	e192      	b.n	8008af8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	827b      	strh	r3, [r7, #18]
 80087e0:	8a7b      	ldrh	r3, [r7, #18]
 80087e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d01b      	beq.n	8008822 <USB_DeactivateEndpoint+0xf6>
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008800:	823b      	strh	r3, [r7, #16]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	441a      	add	r2, r3
 800880c:	8a3b      	ldrh	r3, [r7, #16]
 800880e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008812:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008816:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800881a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800881e:	b29b      	uxth	r3, r3
 8008820:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	b29b      	uxth	r3, r3
 8008830:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008838:	81fb      	strh	r3, [r7, #14]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	441a      	add	r2, r3
 8008844:	89fb      	ldrh	r3, [r7, #14]
 8008846:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800884a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800884e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008856:	b29b      	uxth	r3, r3
 8008858:	8013      	strh	r3, [r2, #0]
 800885a:	e14d      	b.n	8008af8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	785b      	ldrb	r3, [r3, #1]
 8008860:	2b00      	cmp	r3, #0
 8008862:	f040 80a5 	bne.w	80089b0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	843b      	strh	r3, [r7, #32]
 8008874:	8c3b      	ldrh	r3, [r7, #32]
 8008876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d01b      	beq.n	80088b6 <USB_DeactivateEndpoint+0x18a>
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	881b      	ldrh	r3, [r3, #0]
 800888a:	b29b      	uxth	r3, r3
 800888c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008894:	83fb      	strh	r3, [r7, #30]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	441a      	add	r2, r3
 80088a0:	8bfb      	ldrh	r3, [r7, #30]
 80088a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80088ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	881b      	ldrh	r3, [r3, #0]
 80088c2:	83bb      	strh	r3, [r7, #28]
 80088c4:	8bbb      	ldrh	r3, [r7, #28]
 80088c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d01b      	beq.n	8008906 <USB_DeactivateEndpoint+0x1da>
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	881b      	ldrh	r3, [r3, #0]
 80088da:	b29b      	uxth	r3, r3
 80088dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088e4:	837b      	strh	r3, [r7, #26]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	441a      	add	r2, r3
 80088f0:	8b7b      	ldrh	r3, [r7, #26]
 80088f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008902:	b29b      	uxth	r3, r3
 8008904:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	b29b      	uxth	r3, r3
 8008914:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800891c:	833b      	strh	r3, [r7, #24]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	441a      	add	r2, r3
 8008928:	8b3b      	ldrh	r3, [r7, #24]
 800892a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800892e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008932:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008936:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800893a:	b29b      	uxth	r3, r3
 800893c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	b29b      	uxth	r3, r3
 800894c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008954:	82fb      	strh	r3, [r7, #22]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	441a      	add	r2, r3
 8008960:	8afb      	ldrh	r3, [r7, #22]
 8008962:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008966:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800896a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800896e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008972:	b29b      	uxth	r3, r3
 8008974:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	b29b      	uxth	r3, r3
 8008984:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800898c:	82bb      	strh	r3, [r7, #20]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	441a      	add	r2, r3
 8008998:	8abb      	ldrh	r3, [r7, #20]
 800899a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800899e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	8013      	strh	r3, [r2, #0]
 80089ae:	e0a3      	b.n	8008af8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80089be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80089c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d01b      	beq.n	8008a00 <USB_DeactivateEndpoint+0x2d4>
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	441a      	add	r2, r3
 80089ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80089ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	881b      	ldrh	r3, [r3, #0]
 8008a0c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008a0e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d01b      	beq.n	8008a50 <USB_DeactivateEndpoint+0x324>
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a2e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	441a      	add	r2, r3
 8008a3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a66:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	441a      	add	r2, r3
 8008a72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008a74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	441a      	add	r2, r3
 8008aaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008aac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ab0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ad6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	441a      	add	r2, r3
 8008ae2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008ae4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ae8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3734      	adds	r7, #52	@ 0x34
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b0c2      	sub	sp, #264	@ 0x108
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b14:	6018      	str	r0, [r3, #0]
 8008b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b1e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	785b      	ldrb	r3, [r3, #1]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	f040 86b7 	bne.w	80098a0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	699a      	ldr	r2, [r3, #24]
 8008b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d908      	bls.n	8008b60 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008b5e:	e007      	b.n	8008b70 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	7b1b      	ldrb	r3, [r3, #12]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d13a      	bne.n	8008bf6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	6959      	ldr	r1, [r3, #20]
 8008b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	88da      	ldrh	r2, [r3, #6]
 8008b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008ba2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008ba6:	6800      	ldr	r0, [r0, #0]
 8008ba8:	f001 fc98 	bl	800a4dc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	613b      	str	r3, [r7, #16]
 8008bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	461a      	mov	r2, r3
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	4413      	add	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]
 8008bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	00da      	lsls	r2, r3, #3
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	4413      	add	r3, r2
 8008be2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008be6:	60fb      	str	r3, [r7, #12]
 8008be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	801a      	strh	r2, [r3, #0]
 8008bf2:	f000 be1f 	b.w	8009834 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	78db      	ldrb	r3, [r3, #3]
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	f040 8462 	bne.w	80094cc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6a1a      	ldr	r2, [r3, #32]
 8008c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	f240 83df 	bls.w	80093e4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	881b      	ldrh	r3, [r3, #0]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c4c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	441a      	add	r2, r3
 8008c6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008c6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c76:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6a1a      	ldr	r2, [r3, #32]
 8008c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c92:	1ad2      	subs	r2, r2, r3
 8008c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 81c7 	beq.w	8009056 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ccc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	785b      	ldrb	r3, [r3, #1]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d177      	bne.n	8008dd4 <USB_EPStartXfer+0x2ce>
 8008ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	461a      	mov	r2, r3
 8008d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d04:	4413      	add	r3, r2
 8008d06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	00da      	lsls	r2, r3, #3
 8008d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d18:	4413      	add	r3, r2
 8008d1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2e:	801a      	strh	r2, [r3, #0]
 8008d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d34:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d36:	d921      	bls.n	8008d7c <USB_EPStartXfer+0x276>
 8008d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d3c:	095b      	lsrs	r3, r3, #5
 8008d3e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d46:	f003 031f 	and.w	r3, r3, #31
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d104      	bne.n	8008d58 <USB_EPStartXfer+0x252>
 8008d4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008d52:	3b01      	subs	r3, #1
 8008d54:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	029b      	lsls	r3, r3, #10
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d78:	801a      	strh	r2, [r3, #0]
 8008d7a:	e050      	b.n	8008e1e <USB_EPStartXfer+0x318>
 8008d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10a      	bne.n	8008d9a <USB_EPStartXfer+0x294>
 8008d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d96:	801a      	strh	r2, [r3, #0]
 8008d98:	e041      	b.n	8008e1e <USB_EPStartXfer+0x318>
 8008d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d9e:	085b      	lsrs	r3, r3, #1
 8008da0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d004      	beq.n	8008dba <USB_EPStartXfer+0x2b4>
 8008db0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008db4:	3301      	adds	r3, #1
 8008db6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	029b      	lsls	r3, r3, #10
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd0:	801a      	strh	r2, [r3, #0]
 8008dd2:	e024      	b.n	8008e1e <USB_EPStartXfer+0x318>
 8008dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	785b      	ldrb	r3, [r3, #1]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d11c      	bne.n	8008e1e <USB_EPStartXfer+0x318>
 8008de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	461a      	mov	r2, r3
 8008df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df8:	4413      	add	r3, r2
 8008dfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	00da      	lsls	r2, r3, #3
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	895b      	ldrh	r3, [r3, #10]
 8008e2a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6959      	ldr	r1, [r3, #20]
 8008e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008e44:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008e48:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008e4c:	6800      	ldr	r0, [r0, #0]
 8008e4e:	f001 fb45 	bl	800a4dc <USB_WritePMA>
            ep->xfer_buff += len;
 8008e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	695a      	ldr	r2, [r3, #20]
 8008e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e62:	441a      	add	r2, r3
 8008e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	6a1a      	ldr	r2, [r3, #32]
 8008e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d90f      	bls.n	8008eac <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6a1a      	ldr	r2, [r3, #32]
 8008e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e9c:	1ad2      	subs	r2, r2, r3
 8008e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	621a      	str	r2, [r3, #32]
 8008eaa:	e00e      	b.n	8008eca <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	785b      	ldrb	r3, [r3, #1]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d177      	bne.n	8008fca <USB_EPStartXfer+0x4c4>
 8008eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ede:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	61bb      	str	r3, [r7, #24]
 8008ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	4413      	add	r3, r2
 8008efc:	61bb      	str	r3, [r7, #24]
 8008efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	00da      	lsls	r2, r3, #3
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f14:	617b      	str	r3, [r7, #20]
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	801a      	strh	r2, [r3, #0]
 8008f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f2a:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f2c:	d921      	bls.n	8008f72 <USB_EPStartXfer+0x46c>
 8008f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f32:	095b      	lsrs	r3, r3, #5
 8008f34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f3c:	f003 031f 	and.w	r3, r3, #31
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d104      	bne.n	8008f4e <USB_EPStartXfer+0x448>
 8008f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	029b      	lsls	r3, r3, #10
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	801a      	strh	r2, [r3, #0]
 8008f70:	e056      	b.n	8009020 <USB_EPStartXfer+0x51a>
 8008f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10a      	bne.n	8008f90 <USB_EPStartXfer+0x48a>
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	881b      	ldrh	r3, [r3, #0]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	801a      	strh	r2, [r3, #0]
 8008f8e:	e047      	b.n	8009020 <USB_EPStartXfer+0x51a>
 8008f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f94:	085b      	lsrs	r3, r3, #1
 8008f96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d004      	beq.n	8008fb0 <USB_EPStartXfer+0x4aa>
 8008fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008faa:	3301      	adds	r3, #1
 8008fac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	029b      	lsls	r3, r3, #10
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	801a      	strh	r2, [r3, #0]
 8008fc8:	e02a      	b.n	8009020 <USB_EPStartXfer+0x51a>
 8008fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	785b      	ldrb	r3, [r3, #1]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d122      	bne.n	8009020 <USB_EPStartXfer+0x51a>
 8008fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	623b      	str	r3, [r7, #32]
 8008fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	623b      	str	r3, [r7, #32]
 8008ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	00da      	lsls	r2, r3, #3
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	4413      	add	r3, r2
 8009010:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009014:	61fb      	str	r3, [r7, #28]
 8009016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800901a:	b29a      	uxth	r2, r3
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	891b      	ldrh	r3, [r3, #8]
 800902c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	6959      	ldr	r1, [r3, #20]
 800903c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009040:	b29b      	uxth	r3, r3
 8009042:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009046:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800904a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800904e:	6800      	ldr	r0, [r0, #0]
 8009050:	f001 fa44 	bl	800a4dc <USB_WritePMA>
 8009054:	e3ee      	b.n	8009834 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800905a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d177      	bne.n	8009156 <USB_EPStartXfer+0x650>
 8009066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800906a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009076:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009080:	b29b      	uxth	r3, r3
 8009082:	461a      	mov	r2, r3
 8009084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009086:	4413      	add	r3, r2
 8009088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800908a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800908e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	00da      	lsls	r2, r3, #3
 8009098:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800909a:	4413      	add	r3, r2
 800909c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80090a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80090a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090b0:	801a      	strh	r2, [r3, #0]
 80090b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80090b8:	d921      	bls.n	80090fe <USB_EPStartXfer+0x5f8>
 80090ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090be:	095b      	lsrs	r3, r3, #5
 80090c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80090c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090c8:	f003 031f 	and.w	r3, r3, #31
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d104      	bne.n	80090da <USB_EPStartXfer+0x5d4>
 80090d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80090d4:	3b01      	subs	r3, #1
 80090d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80090da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090dc:	881b      	ldrh	r3, [r3, #0]
 80090de:	b29a      	uxth	r2, r3
 80090e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	029b      	lsls	r3, r3, #10
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	4313      	orrs	r3, r2
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090fa:	801a      	strh	r2, [r3, #0]
 80090fc:	e056      	b.n	80091ac <USB_EPStartXfer+0x6a6>
 80090fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10a      	bne.n	800911c <USB_EPStartXfer+0x616>
 8009106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	b29b      	uxth	r3, r3
 800910c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009114:	b29a      	uxth	r2, r3
 8009116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009118:	801a      	strh	r2, [r3, #0]
 800911a:	e047      	b.n	80091ac <USB_EPStartXfer+0x6a6>
 800911c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009120:	085b      	lsrs	r3, r3, #1
 8009122:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	d004      	beq.n	800913c <USB_EPStartXfer+0x636>
 8009132:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009136:	3301      	adds	r3, #1
 8009138:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800913c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800913e:	881b      	ldrh	r3, [r3, #0]
 8009140:	b29a      	uxth	r2, r3
 8009142:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009146:	b29b      	uxth	r3, r3
 8009148:	029b      	lsls	r3, r3, #10
 800914a:	b29b      	uxth	r3, r3
 800914c:	4313      	orrs	r3, r2
 800914e:	b29a      	uxth	r2, r3
 8009150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009152:	801a      	strh	r2, [r3, #0]
 8009154:	e02a      	b.n	80091ac <USB_EPStartXfer+0x6a6>
 8009156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800915a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	785b      	ldrb	r3, [r3, #1]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d122      	bne.n	80091ac <USB_EPStartXfer+0x6a6>
 8009166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800916a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	653b      	str	r3, [r7, #80]	@ 0x50
 8009172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009180:	b29b      	uxth	r3, r3
 8009182:	461a      	mov	r2, r3
 8009184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009186:	4413      	add	r3, r2
 8009188:	653b      	str	r3, [r7, #80]	@ 0x50
 800918a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800918e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	00da      	lsls	r2, r3, #3
 8009198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800919a:	4413      	add	r3, r2
 800919c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80091a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80091ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	891b      	ldrh	r3, [r3, #8]
 80091b8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	6959      	ldr	r1, [r3, #20]
 80091c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80091d2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80091d6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80091da:	6800      	ldr	r0, [r0, #0]
 80091dc:	f001 f97e 	bl	800a4dc <USB_WritePMA>
            ep->xfer_buff += len;
 80091e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	695a      	ldr	r2, [r3, #20]
 80091ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091f0:	441a      	add	r2, r3
 80091f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80091fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6a1a      	ldr	r2, [r3, #32]
 800920a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800920e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	429a      	cmp	r2, r3
 8009218:	d90f      	bls.n	800923a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800921a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800921e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6a1a      	ldr	r2, [r3, #32]
 8009226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800922a:	1ad2      	subs	r2, r2, r3
 800922c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	621a      	str	r2, [r3, #32]
 8009238:	e00e      	b.n	8009258 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800923a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800923e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800924a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800924e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2200      	movs	r2, #0
 8009256:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800925c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	643b      	str	r3, [r7, #64]	@ 0x40
 8009264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	785b      	ldrb	r3, [r3, #1]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d177      	bne.n	8009364 <USB_EPStartXfer+0x85e>
 8009274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009278:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009284:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800928e:	b29b      	uxth	r3, r3
 8009290:	461a      	mov	r2, r3
 8009292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009294:	4413      	add	r3, r2
 8009296:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800929c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	00da      	lsls	r2, r3, #3
 80092a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a8:	4413      	add	r3, r2
 80092aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80092ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80092b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b2:	881b      	ldrh	r3, [r3, #0]
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092be:	801a      	strh	r2, [r3, #0]
 80092c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80092c6:	d921      	bls.n	800930c <USB_EPStartXfer+0x806>
 80092c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092cc:	095b      	lsrs	r3, r3, #5
 80092ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80092d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092d6:	f003 031f 	and.w	r3, r3, #31
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d104      	bne.n	80092e8 <USB_EPStartXfer+0x7e2>
 80092de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092e2:	3b01      	subs	r3, #1
 80092e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80092e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ea:	881b      	ldrh	r3, [r3, #0]
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	029b      	lsls	r3, r3, #10
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	4313      	orrs	r3, r2
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009304:	b29a      	uxth	r2, r3
 8009306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009308:	801a      	strh	r2, [r3, #0]
 800930a:	e050      	b.n	80093ae <USB_EPStartXfer+0x8a8>
 800930c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10a      	bne.n	800932a <USB_EPStartXfer+0x824>
 8009314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	b29b      	uxth	r3, r3
 800931a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800931e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009322:	b29a      	uxth	r2, r3
 8009324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009326:	801a      	strh	r2, [r3, #0]
 8009328:	e041      	b.n	80093ae <USB_EPStartXfer+0x8a8>
 800932a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800932e:	085b      	lsrs	r3, r3, #1
 8009330:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009338:	f003 0301 	and.w	r3, r3, #1
 800933c:	2b00      	cmp	r3, #0
 800933e:	d004      	beq.n	800934a <USB_EPStartXfer+0x844>
 8009340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009344:	3301      	adds	r3, #1
 8009346:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800934a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800934c:	881b      	ldrh	r3, [r3, #0]
 800934e:	b29a      	uxth	r2, r3
 8009350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009354:	b29b      	uxth	r3, r3
 8009356:	029b      	lsls	r3, r3, #10
 8009358:	b29b      	uxth	r3, r3
 800935a:	4313      	orrs	r3, r2
 800935c:	b29a      	uxth	r2, r3
 800935e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009360:	801a      	strh	r2, [r3, #0]
 8009362:	e024      	b.n	80093ae <USB_EPStartXfer+0x8a8>
 8009364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	785b      	ldrb	r3, [r3, #1]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d11c      	bne.n	80093ae <USB_EPStartXfer+0x8a8>
 8009374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009378:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009382:	b29b      	uxth	r3, r3
 8009384:	461a      	mov	r2, r3
 8009386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009388:	4413      	add	r3, r2
 800938a:	643b      	str	r3, [r7, #64]	@ 0x40
 800938c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	00da      	lsls	r2, r3, #3
 800939a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800939c:	4413      	add	r3, r2
 800939e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80093a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80093ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	895b      	ldrh	r3, [r3, #10]
 80093ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6959      	ldr	r1, [r3, #20]
 80093ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80093d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80093d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80093dc:	6800      	ldr	r0, [r0, #0]
 80093de:	f001 f87d 	bl	800a4dc <USB_WritePMA>
 80093e2:	e227      	b.n	8009834 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80093e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6a1b      	ldr	r3, [r3, #32]
 80093f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80093f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	881b      	ldrh	r3, [r3, #0]
 8009410:	b29b      	uxth	r3, r3
 8009412:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800941a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800941e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009422:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800942c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	441a      	add	r2, r3
 8009438:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800943c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009440:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009444:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800944c:	b29b      	uxth	r3, r3
 800944e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009454:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800945c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009460:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800946a:	b29b      	uxth	r3, r3
 800946c:	461a      	mov	r2, r3
 800946e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009470:	4413      	add	r3, r2
 8009472:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	00da      	lsls	r2, r3, #3
 8009482:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009484:	4413      	add	r3, r2
 8009486:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800948a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800948c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009490:	b29a      	uxth	r2, r3
 8009492:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009494:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800949a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	891b      	ldrh	r3, [r3, #8]
 80094a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6959      	ldr	r1, [r3, #20]
 80094b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80094bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80094c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80094c4:	6800      	ldr	r0, [r0, #0]
 80094c6:	f001 f809 	bl	800a4dc <USB_WritePMA>
 80094ca:	e1b3      	b.n	8009834 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80094cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6a1a      	ldr	r2, [r3, #32]
 80094d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094dc:	1ad2      	subs	r2, r2, r3
 80094de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80094ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	b29b      	uxth	r3, r3
 8009508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800950c:	2b00      	cmp	r3, #0
 800950e:	f000 80c6 	beq.w	800969e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009516:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	673b      	str	r3, [r7, #112]	@ 0x70
 800951e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	785b      	ldrb	r3, [r3, #1]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d177      	bne.n	800961e <USB_EPStartXfer+0xb18>
 800952e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009532:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	66bb      	str	r3, [r7, #104]	@ 0x68
 800953a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800953e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009548:	b29b      	uxth	r3, r3
 800954a:	461a      	mov	r2, r3
 800954c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800954e:	4413      	add	r3, r2
 8009550:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	00da      	lsls	r2, r3, #3
 8009560:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009562:	4413      	add	r3, r2
 8009564:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009568:	667b      	str	r3, [r7, #100]	@ 0x64
 800956a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	b29b      	uxth	r3, r3
 8009570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009574:	b29a      	uxth	r2, r3
 8009576:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009578:	801a      	strh	r2, [r3, #0]
 800957a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800957e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009580:	d921      	bls.n	80095c6 <USB_EPStartXfer+0xac0>
 8009582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009586:	095b      	lsrs	r3, r3, #5
 8009588:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800958c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009590:	f003 031f 	and.w	r3, r3, #31
 8009594:	2b00      	cmp	r3, #0
 8009596:	d104      	bne.n	80095a2 <USB_EPStartXfer+0xa9c>
 8009598:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800959c:	3b01      	subs	r3, #1
 800959e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80095a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	029b      	lsls	r3, r3, #10
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	4313      	orrs	r3, r2
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095be:	b29a      	uxth	r2, r3
 80095c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095c2:	801a      	strh	r2, [r3, #0]
 80095c4:	e050      	b.n	8009668 <USB_EPStartXfer+0xb62>
 80095c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10a      	bne.n	80095e4 <USB_EPStartXfer+0xade>
 80095ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095dc:	b29a      	uxth	r2, r3
 80095de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095e0:	801a      	strh	r2, [r3, #0]
 80095e2:	e041      	b.n	8009668 <USB_EPStartXfer+0xb62>
 80095e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e8:	085b      	lsrs	r3, r3, #1
 80095ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80095ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d004      	beq.n	8009604 <USB_EPStartXfer+0xafe>
 80095fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80095fe:	3301      	adds	r3, #1
 8009600:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	b29a      	uxth	r2, r3
 800960a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800960e:	b29b      	uxth	r3, r3
 8009610:	029b      	lsls	r3, r3, #10
 8009612:	b29b      	uxth	r3, r3
 8009614:	4313      	orrs	r3, r2
 8009616:	b29a      	uxth	r2, r3
 8009618:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800961a:	801a      	strh	r2, [r3, #0]
 800961c:	e024      	b.n	8009668 <USB_EPStartXfer+0xb62>
 800961e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	785b      	ldrb	r3, [r3, #1]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d11c      	bne.n	8009668 <USB_EPStartXfer+0xb62>
 800962e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800963c:	b29b      	uxth	r3, r3
 800963e:	461a      	mov	r2, r3
 8009640:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009642:	4413      	add	r3, r2
 8009644:	673b      	str	r3, [r7, #112]	@ 0x70
 8009646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800964a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	00da      	lsls	r2, r3, #3
 8009654:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009656:	4413      	add	r3, r2
 8009658:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800965c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800965e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009662:	b29a      	uxth	r2, r3
 8009664:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009666:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800966c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	895b      	ldrh	r3, [r3, #10]
 8009674:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800967c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	6959      	ldr	r1, [r3, #20]
 8009684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009688:	b29b      	uxth	r3, r3
 800968a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800968e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009692:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009696:	6800      	ldr	r0, [r0, #0]
 8009698:	f000 ff20 	bl	800a4dc <USB_WritePMA>
 800969c:	e0ca      	b.n	8009834 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800969e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	785b      	ldrb	r3, [r3, #1]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d177      	bne.n	800979e <USB_EPStartXfer+0xc98>
 80096ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80096ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	461a      	mov	r2, r3
 80096cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80096ce:	4413      	add	r3, r2
 80096d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80096d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	00da      	lsls	r2, r3, #3
 80096e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80096e2:	4413      	add	r3, r2
 80096e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80096e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80096ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096f8:	801a      	strh	r2, [r3, #0]
 80096fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8009700:	d921      	bls.n	8009746 <USB_EPStartXfer+0xc40>
 8009702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009706:	095b      	lsrs	r3, r3, #5
 8009708:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800970c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009710:	f003 031f 	and.w	r3, r3, #31
 8009714:	2b00      	cmp	r3, #0
 8009716:	d104      	bne.n	8009722 <USB_EPStartXfer+0xc1c>
 8009718:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800971c:	3b01      	subs	r3, #1
 800971e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009722:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	b29a      	uxth	r2, r3
 8009728:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800972c:	b29b      	uxth	r3, r3
 800972e:	029b      	lsls	r3, r3, #10
 8009730:	b29b      	uxth	r3, r3
 8009732:	4313      	orrs	r3, r2
 8009734:	b29b      	uxth	r3, r3
 8009736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800973a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800973e:	b29a      	uxth	r2, r3
 8009740:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009742:	801a      	strh	r2, [r3, #0]
 8009744:	e05c      	b.n	8009800 <USB_EPStartXfer+0xcfa>
 8009746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10a      	bne.n	8009764 <USB_EPStartXfer+0xc5e>
 800974e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	b29b      	uxth	r3, r3
 8009754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800975c:	b29a      	uxth	r2, r3
 800975e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009760:	801a      	strh	r2, [r3, #0]
 8009762:	e04d      	b.n	8009800 <USB_EPStartXfer+0xcfa>
 8009764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009768:	085b      	lsrs	r3, r3, #1
 800976a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800976e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	2b00      	cmp	r3, #0
 8009778:	d004      	beq.n	8009784 <USB_EPStartXfer+0xc7e>
 800977a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800977e:	3301      	adds	r3, #1
 8009780:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009784:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	b29a      	uxth	r2, r3
 800978a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800978e:	b29b      	uxth	r3, r3
 8009790:	029b      	lsls	r3, r3, #10
 8009792:	b29b      	uxth	r3, r3
 8009794:	4313      	orrs	r3, r2
 8009796:	b29a      	uxth	r2, r3
 8009798:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800979a:	801a      	strh	r2, [r3, #0]
 800979c:	e030      	b.n	8009800 <USB_EPStartXfer+0xcfa>
 800979e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	785b      	ldrb	r3, [r3, #1]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d128      	bne.n	8009800 <USB_EPStartXfer+0xcfa>
 80097ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80097bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	461a      	mov	r2, r3
 80097ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80097d2:	4413      	add	r3, r2
 80097d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80097d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	00da      	lsls	r2, r3, #3
 80097e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80097ea:	4413      	add	r3, r2
 80097ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80097f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80097fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	891b      	ldrh	r3, [r3, #8]
 800980c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6959      	ldr	r1, [r3, #20]
 800981c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009820:	b29b      	uxth	r3, r3
 8009822:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009826:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800982a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800982e:	6800      	ldr	r0, [r0, #0]
 8009830:	f000 fe54 	bl	800a4dc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009838:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4413      	add	r3, r2
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	b29b      	uxth	r3, r3
 8009852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009856:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800985a:	817b      	strh	r3, [r7, #10]
 800985c:	897b      	ldrh	r3, [r7, #10]
 800985e:	f083 0310 	eor.w	r3, r3, #16
 8009862:	817b      	strh	r3, [r7, #10]
 8009864:	897b      	ldrh	r3, [r7, #10]
 8009866:	f083 0320 	eor.w	r3, r3, #32
 800986a:	817b      	strh	r3, [r7, #10]
 800986c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009870:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800987a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	441a      	add	r2, r3
 8009886:	897b      	ldrh	r3, [r7, #10]
 8009888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800988c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009890:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009898:	b29b      	uxth	r3, r3
 800989a:	8013      	strh	r3, [r2, #0]
 800989c:	f000 bcde 	b.w	800a25c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80098a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	7b1b      	ldrb	r3, [r3, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f040 80bb 	bne.w	8009a28 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80098b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	699a      	ldr	r2, [r3, #24]
 80098be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d917      	bls.n	80098fe <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80098ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80098de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	699a      	ldr	r2, [r3, #24]
 80098ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ee:	1ad2      	subs	r2, r2, r3
 80098f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	619a      	str	r2, [r3, #24]
 80098fc:	e00e      	b.n	800991c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80098fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800990e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2200      	movs	r2, #0
 800991a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800991c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009920:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800992a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800992e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009938:	b29b      	uxth	r3, r3
 800993a:	461a      	mov	r2, r3
 800993c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009940:	4413      	add	r3, r2
 8009942:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800994a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	00da      	lsls	r2, r3, #3
 8009954:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009958:	4413      	add	r3, r2
 800995a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800995e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009962:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009966:	881b      	ldrh	r3, [r3, #0]
 8009968:	b29b      	uxth	r3, r3
 800996a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800996e:	b29a      	uxth	r2, r3
 8009970:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009974:	801a      	strh	r2, [r3, #0]
 8009976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800997a:	2b3e      	cmp	r3, #62	@ 0x3e
 800997c:	d924      	bls.n	80099c8 <USB_EPStartXfer+0xec2>
 800997e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009982:	095b      	lsrs	r3, r3, #5
 8009984:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800998c:	f003 031f 	and.w	r3, r3, #31
 8009990:	2b00      	cmp	r3, #0
 8009992:	d104      	bne.n	800999e <USB_EPStartXfer+0xe98>
 8009994:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009998:	3b01      	subs	r3, #1
 800999a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800999e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	029b      	lsls	r3, r3, #10
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	4313      	orrs	r3, r2
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099bc:	b29a      	uxth	r2, r3
 80099be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099c2:	801a      	strh	r2, [r3, #0]
 80099c4:	f000 bc10 	b.w	800a1e8 <USB_EPStartXfer+0x16e2>
 80099c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10c      	bne.n	80099ea <USB_EPStartXfer+0xee4>
 80099d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099e6:	801a      	strh	r2, [r3, #0]
 80099e8:	e3fe      	b.n	800a1e8 <USB_EPStartXfer+0x16e2>
 80099ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ee:	085b      	lsrs	r3, r3, #1
 80099f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80099f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f8:	f003 0301 	and.w	r3, r3, #1
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d004      	beq.n	8009a0a <USB_EPStartXfer+0xf04>
 8009a00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009a04:	3301      	adds	r3, #1
 8009a06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009a0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	029b      	lsls	r3, r3, #10
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a24:	801a      	strh	r2, [r3, #0]
 8009a26:	e3df      	b.n	800a1e8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	78db      	ldrb	r3, [r3, #3]
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	f040 8218 	bne.w	8009e6a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	785b      	ldrb	r3, [r3, #1]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f040 809d 	bne.w	8009b86 <USB_EPStartXfer+0x1080>
 8009a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a70:	4413      	add	r3, r2
 8009a72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	00da      	lsls	r2, r3, #3
 8009a84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a88:	4413      	add	r3, r2
 8009a8a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009a92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009a96:	881b      	ldrh	r3, [r3, #0]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a9e:	b29a      	uxth	r2, r3
 8009aa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009aa4:	801a      	strh	r2, [r3, #0]
 8009aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ab4:	d92b      	bls.n	8009b0e <USB_EPStartXfer+0x1008>
 8009ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	095b      	lsrs	r3, r3, #5
 8009ac4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	f003 031f 	and.w	r3, r3, #31
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d104      	bne.n	8009ae6 <USB_EPStartXfer+0xfe0>
 8009adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009aea:	881b      	ldrh	r3, [r3, #0]
 8009aec:	b29a      	uxth	r2, r3
 8009aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	029b      	lsls	r3, r3, #10
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	4313      	orrs	r3, r2
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b0a:	801a      	strh	r2, [r3, #0]
 8009b0c:	e070      	b.n	8009bf0 <USB_EPStartXfer+0x10ea>
 8009b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10c      	bne.n	8009b38 <USB_EPStartXfer+0x1032>
 8009b1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b34:	801a      	strh	r2, [r3, #0]
 8009b36:	e05b      	b.n	8009bf0 <USB_EPStartXfer+0x10ea>
 8009b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	085b      	lsrs	r3, r3, #1
 8009b46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	f003 0301 	and.w	r3, r3, #1
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d004      	beq.n	8009b68 <USB_EPStartXfer+0x1062>
 8009b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b62:	3301      	adds	r3, #1
 8009b64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	029b      	lsls	r3, r3, #10
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b82:	801a      	strh	r2, [r3, #0]
 8009b84:	e034      	b.n	8009bf0 <USB_EPStartXfer+0x10ea>
 8009b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	785b      	ldrb	r3, [r3, #1]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d12c      	bne.n	8009bf0 <USB_EPStartXfer+0x10ea>
 8009b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ba8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009bba:	4413      	add	r3, r2
 8009bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	00da      	lsls	r2, r3, #3
 8009bce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009bd2:	4413      	add	r3, r2
 8009bd4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009bee:	801a      	strh	r2, [r3, #0]
 8009bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	785b      	ldrb	r3, [r3, #1]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f040 809d 	bne.w	8009d4a <USB_EPStartXfer+0x1244>
 8009c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	461a      	mov	r2, r3
 8009c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c34:	4413      	add	r3, r2
 8009c36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	00da      	lsls	r2, r3, #3
 8009c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c4c:	4413      	add	r3, r2
 8009c4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c52:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c5a:	881b      	ldrh	r3, [r3, #0]
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c68:	801a      	strh	r2, [r3, #0]
 8009c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c78:	d92b      	bls.n	8009cd2 <USB_EPStartXfer+0x11cc>
 8009c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	095b      	lsrs	r3, r3, #5
 8009c88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	f003 031f 	and.w	r3, r3, #31
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d104      	bne.n	8009caa <USB_EPStartXfer+0x11a4>
 8009ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009caa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	029b      	lsls	r3, r3, #10
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009cce:	801a      	strh	r2, [r3, #0]
 8009cd0:	e069      	b.n	8009da6 <USB_EPStartXfer+0x12a0>
 8009cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10c      	bne.n	8009cfc <USB_EPStartXfer+0x11f6>
 8009ce2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ce6:	881b      	ldrh	r3, [r3, #0]
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009cf8:	801a      	strh	r2, [r3, #0]
 8009cfa:	e054      	b.n	8009da6 <USB_EPStartXfer+0x12a0>
 8009cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	085b      	lsrs	r3, r3, #1
 8009d0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d004      	beq.n	8009d2c <USB_EPStartXfer+0x1226>
 8009d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d26:	3301      	adds	r3, #1
 8009d28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d30:	881b      	ldrh	r3, [r3, #0]
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	029b      	lsls	r3, r3, #10
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d46:	801a      	strh	r2, [r3, #0]
 8009d48:	e02d      	b.n	8009da6 <USB_EPStartXfer+0x12a0>
 8009d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	785b      	ldrb	r3, [r3, #1]
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d125      	bne.n	8009da6 <USB_EPStartXfer+0x12a0>
 8009d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009d70:	4413      	add	r3, r2
 8009d72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	00da      	lsls	r2, r3, #3
 8009d84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009d88:	4413      	add	r3, r2
 8009d8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009da4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009daa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f000 8218 	beq.w	800a1e8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009dd8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009ddc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d005      	beq.n	8009df0 <USB_EPStartXfer+0x12ea>
 8009de4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10d      	bne.n	8009e0c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009df0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009df4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f040 81f5 	bne.w	800a1e8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009dfe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f040 81ee 	bne.w	800a1e8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	881b      	ldrh	r3, [r3, #0]
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e32:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	441a      	add	r2, r3
 8009e50:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009e54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	8013      	strh	r3, [r2, #0]
 8009e68:	e1be      	b.n	800a1e8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	78db      	ldrb	r3, [r3, #3]
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	f040 81b4 	bne.w	800a1e4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	699a      	ldr	r2, [r3, #24]
 8009e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d917      	bls.n	8009ec8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	699a      	ldr	r2, [r3, #24]
 8009eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb8:	1ad2      	subs	r2, r2, r3
 8009eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	619a      	str	r2, [r3, #24]
 8009ec6:	e00e      	b.n	8009ee6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8009ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	785b      	ldrb	r3, [r3, #1]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f040 8085 	bne.w	800a002 <USB_EPStartXfer+0x14fc>
 8009ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009efc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	461a      	mov	r2, r3
 8009f18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	00da      	lsls	r2, r3, #3
 8009f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009f34:	4413      	add	r3, r2
 8009f36:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009f3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f42:	881b      	ldrh	r3, [r3, #0]
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f50:	801a      	strh	r2, [r3, #0]
 8009f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f56:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f58:	d923      	bls.n	8009fa2 <USB_EPStartXfer+0x149c>
 8009f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f5e:	095b      	lsrs	r3, r3, #5
 8009f60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f68:	f003 031f 	and.w	r3, r3, #31
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d104      	bne.n	8009f7a <USB_EPStartXfer+0x1474>
 8009f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f74:	3b01      	subs	r3, #1
 8009f76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009f7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	029b      	lsls	r3, r3, #10
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f9e:	801a      	strh	r2, [r3, #0]
 8009fa0:	e060      	b.n	800a064 <USB_EPStartXfer+0x155e>
 8009fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10c      	bne.n	8009fc4 <USB_EPStartXfer+0x14be>
 8009faa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009fae:	881b      	ldrh	r3, [r3, #0]
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009fc0:	801a      	strh	r2, [r3, #0]
 8009fc2:	e04f      	b.n	800a064 <USB_EPStartXfer+0x155e>
 8009fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fc8:	085b      	lsrs	r3, r3, #1
 8009fca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d004      	beq.n	8009fe4 <USB_EPStartXfer+0x14de>
 8009fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fde:	3301      	adds	r3, #1
 8009fe0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009fe4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009fe8:	881b      	ldrh	r3, [r3, #0]
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	029b      	lsls	r3, r3, #10
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ffe:	801a      	strh	r2, [r3, #0]
 800a000:	e030      	b.n	800a064 <USB_EPStartXfer+0x155e>
 800a002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	785b      	ldrb	r3, [r3, #1]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d128      	bne.n	800a064 <USB_EPStartXfer+0x155e>
 800a012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a016:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a024:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a02e:	b29b      	uxth	r3, r3
 800a030:	461a      	mov	r2, r3
 800a032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a036:	4413      	add	r3, r2
 800a038:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a03c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	00da      	lsls	r2, r3, #3
 800a04a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a04e:	4413      	add	r3, r2
 800a050:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a054:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a062:	801a      	strh	r2, [r3, #0]
 800a064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a068:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	785b      	ldrb	r3, [r3, #1]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f040 8085 	bne.w	800a18e <USB_EPStartXfer+0x1688>
 800a084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a088:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a0ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	00da      	lsls	r2, r3, #3
 800a0bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a0c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a0ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a0dc:	801a      	strh	r2, [r3, #0]
 800a0de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0e2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a0e4:	d923      	bls.n	800a12e <USB_EPStartXfer+0x1628>
 800a0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ea:	095b      	lsrs	r3, r3, #5
 800a0ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0f4:	f003 031f 	and.w	r3, r3, #31
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d104      	bne.n	800a106 <USB_EPStartXfer+0x1600>
 800a0fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a100:	3b01      	subs	r3, #1
 800a102:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a106:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a112:	b29b      	uxth	r3, r3
 800a114:	029b      	lsls	r3, r3, #10
 800a116:	b29b      	uxth	r3, r3
 800a118:	4313      	orrs	r3, r2
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a124:	b29a      	uxth	r2, r3
 800a126:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a12a:	801a      	strh	r2, [r3, #0]
 800a12c:	e05c      	b.n	800a1e8 <USB_EPStartXfer+0x16e2>
 800a12e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10c      	bne.n	800a150 <USB_EPStartXfer+0x164a>
 800a136:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a13a:	881b      	ldrh	r3, [r3, #0]
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a146:	b29a      	uxth	r2, r3
 800a148:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a14c:	801a      	strh	r2, [r3, #0]
 800a14e:	e04b      	b.n	800a1e8 <USB_EPStartXfer+0x16e2>
 800a150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a154:	085b      	lsrs	r3, r3, #1
 800a156:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a15e:	f003 0301 	and.w	r3, r3, #1
 800a162:	2b00      	cmp	r3, #0
 800a164:	d004      	beq.n	800a170 <USB_EPStartXfer+0x166a>
 800a166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a16a:	3301      	adds	r3, #1
 800a16c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a170:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a174:	881b      	ldrh	r3, [r3, #0]
 800a176:	b29a      	uxth	r2, r3
 800a178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	029b      	lsls	r3, r3, #10
 800a180:	b29b      	uxth	r3, r3
 800a182:	4313      	orrs	r3, r2
 800a184:	b29a      	uxth	r2, r3
 800a186:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a18a:	801a      	strh	r2, [r3, #0]
 800a18c:	e02c      	b.n	800a1e8 <USB_EPStartXfer+0x16e2>
 800a18e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	785b      	ldrb	r3, [r3, #1]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d124      	bne.n	800a1e8 <USB_EPStartXfer+0x16e2>
 800a19e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a1ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	00da      	lsls	r2, r3, #3
 800a1c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a1cc:	4413      	add	r3, r2
 800a1ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a1d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a1e0:	801a      	strh	r2, [r3, #0]
 800a1e2:	e001      	b.n	800a1e8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e03a      	b.n	800a25e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a1e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	4413      	add	r3, r2
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	b29b      	uxth	r3, r3
 800a206:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a20a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a20e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a212:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a216:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a21a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a21e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a222:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a226:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a22a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a22e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	441a      	add	r2, r3
 800a244:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a248:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a24c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a250:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a258:	b29b      	uxth	r3, r3
 800a25a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	785b      	ldrb	r3, [r3, #1]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d020      	beq.n	800a2bc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4413      	add	r3, r2
 800a284:	881b      	ldrh	r3, [r3, #0]
 800a286:	b29b      	uxth	r3, r3
 800a288:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a28c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a290:	81bb      	strh	r3, [r7, #12]
 800a292:	89bb      	ldrh	r3, [r7, #12]
 800a294:	f083 0310 	eor.w	r3, r3, #16
 800a298:	81bb      	strh	r3, [r7, #12]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	441a      	add	r2, r3
 800a2a4:	89bb      	ldrh	r3, [r7, #12]
 800a2a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	8013      	strh	r3, [r2, #0]
 800a2ba:	e01f      	b.n	800a2fc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4413      	add	r3, r2
 800a2c6:	881b      	ldrh	r3, [r3, #0]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2d2:	81fb      	strh	r3, [r7, #14]
 800a2d4:	89fb      	ldrh	r3, [r7, #14]
 800a2d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a2da:	81fb      	strh	r3, [r7, #14]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	441a      	add	r2, r3
 800a2e6:	89fb      	ldrh	r3, [r7, #14]
 800a2e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3714      	adds	r7, #20
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b087      	sub	sp, #28
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
 800a312:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	7b1b      	ldrb	r3, [r3, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f040 809d 	bne.w	800a458 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	785b      	ldrb	r3, [r3, #1]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d04c      	beq.n	800a3c0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	4413      	add	r3, r2
 800a330:	881b      	ldrh	r3, [r3, #0]
 800a332:	823b      	strh	r3, [r7, #16]
 800a334:	8a3b      	ldrh	r3, [r7, #16]
 800a336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d01b      	beq.n	800a376 <USB_EPClearStall+0x6c>
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	4413      	add	r3, r2
 800a348:	881b      	ldrh	r3, [r3, #0]
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a350:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a354:	81fb      	strh	r3, [r7, #14]
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	441a      	add	r2, r3
 800a360:	89fb      	ldrh	r3, [r7, #14]
 800a362:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a366:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a36a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a36e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a372:	b29b      	uxth	r3, r3
 800a374:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	78db      	ldrb	r3, [r3, #3]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d06c      	beq.n	800a458 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4413      	add	r3, r2
 800a388:	881b      	ldrh	r3, [r3, #0]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a390:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a394:	81bb      	strh	r3, [r7, #12]
 800a396:	89bb      	ldrh	r3, [r7, #12]
 800a398:	f083 0320 	eor.w	r3, r3, #32
 800a39c:	81bb      	strh	r3, [r7, #12]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	441a      	add	r2, r3
 800a3a8:	89bb      	ldrh	r3, [r7, #12]
 800a3aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	8013      	strh	r3, [r2, #0]
 800a3be:	e04b      	b.n	800a458 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4413      	add	r3, r2
 800a3ca:	881b      	ldrh	r3, [r3, #0]
 800a3cc:	82fb      	strh	r3, [r7, #22]
 800a3ce:	8afb      	ldrh	r3, [r7, #22]
 800a3d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d01b      	beq.n	800a410 <USB_EPClearStall+0x106>
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4413      	add	r3, r2
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3ee:	82bb      	strh	r3, [r7, #20]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	441a      	add	r2, r3
 800a3fa:	8abb      	ldrh	r3, [r7, #20]
 800a3fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a400:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a404:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	881b      	ldrh	r3, [r3, #0]
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a426:	827b      	strh	r3, [r7, #18]
 800a428:	8a7b      	ldrh	r3, [r7, #18]
 800a42a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a42e:	827b      	strh	r3, [r7, #18]
 800a430:	8a7b      	ldrh	r3, [r7, #18]
 800a432:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a436:	827b      	strh	r3, [r7, #18]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	441a      	add	r2, r3
 800a442:	8a7b      	ldrh	r3, [r7, #18]
 800a444:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a448:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a44c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a454:	b29b      	uxth	r3, r3
 800a456:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	371c      	adds	r7, #28
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	460b      	mov	r3, r1
 800a470:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a472:	78fb      	ldrb	r3, [r7, #3]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d103      	bne.n	800a480 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2280      	movs	r2, #128	@ 0x80
 800a47c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b08b      	sub	sp, #44	@ 0x2c
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	80fb      	strh	r3, [r7, #6]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a4f2:	88bb      	ldrh	r3, [r7, #4]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	085b      	lsrs	r3, r3, #1
 800a4f8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a502:	88fa      	ldrh	r2, [r7, #6]
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	4413      	add	r3, r2
 800a508:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a50c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	627b      	str	r3, [r7, #36]	@ 0x24
 800a512:	e01b      	b.n	800a54c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	3301      	adds	r3, #1
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	021b      	lsls	r3, r3, #8
 800a522:	b21a      	sxth	r2, r3
 800a524:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a528:	4313      	orrs	r3, r2
 800a52a:	b21b      	sxth	r3, r3
 800a52c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a52e:	6a3b      	ldr	r3, [r7, #32]
 800a530:	8a7a      	ldrh	r2, [r7, #18]
 800a532:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a534:	6a3b      	ldr	r3, [r7, #32]
 800a536:	3302      	adds	r3, #2
 800a538:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	3301      	adds	r3, #1
 800a53e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	3301      	adds	r3, #1
 800a544:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a548:	3b01      	subs	r3, #1
 800a54a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1e0      	bne.n	800a514 <USB_WritePMA+0x38>
  }
}
 800a552:	bf00      	nop
 800a554:	bf00      	nop
 800a556:	372c      	adds	r7, #44	@ 0x2c
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a560:	b480      	push	{r7}
 800a562:	b08b      	sub	sp, #44	@ 0x2c
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	4611      	mov	r1, r2
 800a56c:	461a      	mov	r2, r3
 800a56e:	460b      	mov	r3, r1
 800a570:	80fb      	strh	r3, [r7, #6]
 800a572:	4613      	mov	r3, r2
 800a574:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a576:	88bb      	ldrh	r3, [r7, #4]
 800a578:	085b      	lsrs	r3, r3, #1
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a586:	88fa      	ldrh	r2, [r7, #6]
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a590:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	627b      	str	r3, [r7, #36]	@ 0x24
 800a596:	e018      	b.n	800a5ca <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	881b      	ldrh	r3, [r3, #0]
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	3302      	adds	r3, #2
 800a5a4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	0a1b      	lsrs	r3, r3, #8
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1e3      	bne.n	800a598 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a5d0:	88bb      	ldrh	r3, [r7, #4]
 800a5d2:	f003 0301 	and.w	r3, r3, #1
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d007      	beq.n	800a5ec <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a5dc:	6a3b      	ldr	r3, [r7, #32]
 800a5de:	881b      	ldrh	r3, [r3, #0]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	701a      	strb	r2, [r3, #0]
  }
}
 800a5ec:	bf00      	nop
 800a5ee:	372c      	adds	r7, #44	@ 0x2c
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	460b      	mov	r3, r1
 800a602:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a604:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a608:	f006 face 	bl	8010ba8 <USBD_static_malloc>
 800a60c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d109      	bne.n	800a628 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	32b0      	adds	r2, #176	@ 0xb0
 800a61e:	2100      	movs	r1, #0
 800a620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a624:	2302      	movs	r3, #2
 800a626:	e0d4      	b.n	800a7d2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a628:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a62c:	2100      	movs	r1, #0
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f006 fc23 	bl	8010e7a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	32b0      	adds	r2, #176	@ 0xb0
 800a63e:	68f9      	ldr	r1, [r7, #12]
 800a640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	32b0      	adds	r2, #176	@ 0xb0
 800a64e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	7c1b      	ldrb	r3, [r3, #16]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d138      	bne.n	800a6d2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a660:	4b5e      	ldr	r3, [pc, #376]	@ (800a7dc <USBD_CDC_Init+0x1e4>)
 800a662:	7819      	ldrb	r1, [r3, #0]
 800a664:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a668:	2202      	movs	r2, #2
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f006 f943 	bl	80108f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a670:	4b5a      	ldr	r3, [pc, #360]	@ (800a7dc <USBD_CDC_Init+0x1e4>)
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	f003 020f 	and.w	r2, r3, #15
 800a678:	6879      	ldr	r1, [r7, #4]
 800a67a:	4613      	mov	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4413      	add	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	440b      	add	r3, r1
 800a684:	3324      	adds	r3, #36	@ 0x24
 800a686:	2201      	movs	r2, #1
 800a688:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a68a:	4b55      	ldr	r3, [pc, #340]	@ (800a7e0 <USBD_CDC_Init+0x1e8>)
 800a68c:	7819      	ldrb	r1, [r3, #0]
 800a68e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a692:	2202      	movs	r2, #2
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f006 f92e 	bl	80108f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a69a:	4b51      	ldr	r3, [pc, #324]	@ (800a7e0 <USBD_CDC_Init+0x1e8>)
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	f003 020f 	and.w	r2, r3, #15
 800a6a2:	6879      	ldr	r1, [r7, #4]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	440b      	add	r3, r1
 800a6ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a6b6:	4b4b      	ldr	r3, [pc, #300]	@ (800a7e4 <USBD_CDC_Init+0x1ec>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	f003 020f 	and.w	r2, r3, #15
 800a6be:	6879      	ldr	r1, [r7, #4]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4413      	add	r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	440b      	add	r3, r1
 800a6ca:	3326      	adds	r3, #38	@ 0x26
 800a6cc:	2210      	movs	r2, #16
 800a6ce:	801a      	strh	r2, [r3, #0]
 800a6d0:	e035      	b.n	800a73e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a6d2:	4b42      	ldr	r3, [pc, #264]	@ (800a7dc <USBD_CDC_Init+0x1e4>)
 800a6d4:	7819      	ldrb	r1, [r3, #0]
 800a6d6:	2340      	movs	r3, #64	@ 0x40
 800a6d8:	2202      	movs	r2, #2
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f006 f90b 	bl	80108f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a6e0:	4b3e      	ldr	r3, [pc, #248]	@ (800a7dc <USBD_CDC_Init+0x1e4>)
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	f003 020f 	and.w	r2, r3, #15
 800a6e8:	6879      	ldr	r1, [r7, #4]
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4413      	add	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	440b      	add	r3, r1
 800a6f4:	3324      	adds	r3, #36	@ 0x24
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a6fa:	4b39      	ldr	r3, [pc, #228]	@ (800a7e0 <USBD_CDC_Init+0x1e8>)
 800a6fc:	7819      	ldrb	r1, [r3, #0]
 800a6fe:	2340      	movs	r3, #64	@ 0x40
 800a700:	2202      	movs	r2, #2
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f006 f8f7 	bl	80108f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a708:	4b35      	ldr	r3, [pc, #212]	@ (800a7e0 <USBD_CDC_Init+0x1e8>)
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	f003 020f 	and.w	r2, r3, #15
 800a710:	6879      	ldr	r1, [r7, #4]
 800a712:	4613      	mov	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4413      	add	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	440b      	add	r3, r1
 800a71c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a720:	2201      	movs	r2, #1
 800a722:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a724:	4b2f      	ldr	r3, [pc, #188]	@ (800a7e4 <USBD_CDC_Init+0x1ec>)
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	f003 020f 	and.w	r2, r3, #15
 800a72c:	6879      	ldr	r1, [r7, #4]
 800a72e:	4613      	mov	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	4413      	add	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	440b      	add	r3, r1
 800a738:	3326      	adds	r3, #38	@ 0x26
 800a73a:	2210      	movs	r2, #16
 800a73c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a73e:	4b29      	ldr	r3, [pc, #164]	@ (800a7e4 <USBD_CDC_Init+0x1ec>)
 800a740:	7819      	ldrb	r1, [r3, #0]
 800a742:	2308      	movs	r3, #8
 800a744:	2203      	movs	r2, #3
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f006 f8d5 	bl	80108f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a74c:	4b25      	ldr	r3, [pc, #148]	@ (800a7e4 <USBD_CDC_Init+0x1ec>)
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	f003 020f 	and.w	r2, r3, #15
 800a754:	6879      	ldr	r1, [r7, #4]
 800a756:	4613      	mov	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	440b      	add	r3, r1
 800a760:	3324      	adds	r3, #36	@ 0x24
 800a762:	2201      	movs	r2, #1
 800a764:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2200      	movs	r2, #0
 800a76a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	33b0      	adds	r3, #176	@ 0xb0
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4413      	add	r3, r2
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d101      	bne.n	800a7a0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a79c:	2302      	movs	r3, #2
 800a79e:	e018      	b.n	800a7d2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	7c1b      	ldrb	r3, [r3, #16]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10a      	bne.n	800a7be <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7a8:	4b0d      	ldr	r3, [pc, #52]	@ (800a7e0 <USBD_CDC_Init+0x1e8>)
 800a7aa:	7819      	ldrb	r1, [r3, #0]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f006 f98c 	bl	8010ad4 <USBD_LL_PrepareReceive>
 800a7bc:	e008      	b.n	800a7d0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7be:	4b08      	ldr	r3, [pc, #32]	@ (800a7e0 <USBD_CDC_Init+0x1e8>)
 800a7c0:	7819      	ldrb	r1, [r3, #0]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7c8:	2340      	movs	r3, #64	@ 0x40
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f006 f982 	bl	8010ad4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	2000009b 	.word	0x2000009b
 800a7e0:	2000009c 	.word	0x2000009c
 800a7e4:	2000009d 	.word	0x2000009d

0800a7e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a7f4:	4b3a      	ldr	r3, [pc, #232]	@ (800a8e0 <USBD_CDC_DeInit+0xf8>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f006 f8a1 	bl	8010942 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a800:	4b37      	ldr	r3, [pc, #220]	@ (800a8e0 <USBD_CDC_DeInit+0xf8>)
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	f003 020f 	and.w	r2, r3, #15
 800a808:	6879      	ldr	r1, [r7, #4]
 800a80a:	4613      	mov	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	440b      	add	r3, r1
 800a814:	3324      	adds	r3, #36	@ 0x24
 800a816:	2200      	movs	r2, #0
 800a818:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a81a:	4b32      	ldr	r3, [pc, #200]	@ (800a8e4 <USBD_CDC_DeInit+0xfc>)
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	4619      	mov	r1, r3
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f006 f88e 	bl	8010942 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a826:	4b2f      	ldr	r3, [pc, #188]	@ (800a8e4 <USBD_CDC_DeInit+0xfc>)
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	f003 020f 	and.w	r2, r3, #15
 800a82e:	6879      	ldr	r1, [r7, #4]
 800a830:	4613      	mov	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	440b      	add	r3, r1
 800a83a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a83e:	2200      	movs	r2, #0
 800a840:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a842:	4b29      	ldr	r3, [pc, #164]	@ (800a8e8 <USBD_CDC_DeInit+0x100>)
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	4619      	mov	r1, r3
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f006 f87a 	bl	8010942 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a84e:	4b26      	ldr	r3, [pc, #152]	@ (800a8e8 <USBD_CDC_DeInit+0x100>)
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	f003 020f 	and.w	r2, r3, #15
 800a856:	6879      	ldr	r1, [r7, #4]
 800a858:	4613      	mov	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	4413      	add	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	440b      	add	r3, r1
 800a862:	3324      	adds	r3, #36	@ 0x24
 800a864:	2200      	movs	r2, #0
 800a866:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a868:	4b1f      	ldr	r3, [pc, #124]	@ (800a8e8 <USBD_CDC_DeInit+0x100>)
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	f003 020f 	and.w	r2, r3, #15
 800a870:	6879      	ldr	r1, [r7, #4]
 800a872:	4613      	mov	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4413      	add	r3, r2
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	440b      	add	r3, r1
 800a87c:	3326      	adds	r3, #38	@ 0x26
 800a87e:	2200      	movs	r2, #0
 800a880:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	32b0      	adds	r2, #176	@ 0xb0
 800a88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d01f      	beq.n	800a8d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	33b0      	adds	r3, #176	@ 0xb0
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	32b0      	adds	r2, #176	@ 0xb0
 800a8b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f006 f984 	bl	8010bc4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	32b0      	adds	r2, #176	@ 0xb0
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	2000009b 	.word	0x2000009b
 800a8e4:	2000009c 	.word	0x2000009c
 800a8e8:	2000009d 	.word	0x2000009d

0800a8ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	32b0      	adds	r2, #176	@ 0xb0
 800a900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a904:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a906:	2300      	movs	r3, #0
 800a908:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a90a:	2300      	movs	r3, #0
 800a90c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a90e:	2300      	movs	r3, #0
 800a910:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d101      	bne.n	800a91c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a918:	2303      	movs	r3, #3
 800a91a:	e0bf      	b.n	800aa9c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a924:	2b00      	cmp	r3, #0
 800a926:	d050      	beq.n	800a9ca <USBD_CDC_Setup+0xde>
 800a928:	2b20      	cmp	r3, #32
 800a92a:	f040 80af 	bne.w	800aa8c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	88db      	ldrh	r3, [r3, #6]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d03a      	beq.n	800a9ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	b25b      	sxtb	r3, r3
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	da1b      	bge.n	800a978 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	33b0      	adds	r3, #176	@ 0xb0
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4413      	add	r3, r2
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a956:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	88d2      	ldrh	r2, [r2, #6]
 800a95c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	88db      	ldrh	r3, [r3, #6]
 800a962:	2b07      	cmp	r3, #7
 800a964:	bf28      	it	cs
 800a966:	2307      	movcs	r3, #7
 800a968:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	89fa      	ldrh	r2, [r7, #14]
 800a96e:	4619      	mov	r1, r3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 fd47 	bl	800c404 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a976:	e090      	b.n	800aa9a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	785a      	ldrb	r2, [r3, #1]
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	88db      	ldrh	r3, [r3, #6]
 800a986:	2b3f      	cmp	r3, #63	@ 0x3f
 800a988:	d803      	bhi.n	800a992 <USBD_CDC_Setup+0xa6>
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	88db      	ldrh	r3, [r3, #6]
 800a98e:	b2da      	uxtb	r2, r3
 800a990:	e000      	b.n	800a994 <USBD_CDC_Setup+0xa8>
 800a992:	2240      	movs	r2, #64	@ 0x40
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a99a:	6939      	ldr	r1, [r7, #16]
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f001 fd59 	bl	800c45c <USBD_CtlPrepareRx>
      break;
 800a9aa:	e076      	b.n	800aa9a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	33b0      	adds	r3, #176	@ 0xb0
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4413      	add	r3, r2
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	7850      	ldrb	r0, [r2, #1]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	4798      	blx	r3
      break;
 800a9c8:	e067      	b.n	800aa9a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	785b      	ldrb	r3, [r3, #1]
 800a9ce:	2b0b      	cmp	r3, #11
 800a9d0:	d851      	bhi.n	800aa76 <USBD_CDC_Setup+0x18a>
 800a9d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a9d8 <USBD_CDC_Setup+0xec>)
 800a9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d8:	0800aa09 	.word	0x0800aa09
 800a9dc:	0800aa85 	.word	0x0800aa85
 800a9e0:	0800aa77 	.word	0x0800aa77
 800a9e4:	0800aa77 	.word	0x0800aa77
 800a9e8:	0800aa77 	.word	0x0800aa77
 800a9ec:	0800aa77 	.word	0x0800aa77
 800a9f0:	0800aa77 	.word	0x0800aa77
 800a9f4:	0800aa77 	.word	0x0800aa77
 800a9f8:	0800aa77 	.word	0x0800aa77
 800a9fc:	0800aa77 	.word	0x0800aa77
 800aa00:	0800aa33 	.word	0x0800aa33
 800aa04:	0800aa5d 	.word	0x0800aa5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d107      	bne.n	800aa24 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aa14:	f107 030a 	add.w	r3, r7, #10
 800aa18:	2202      	movs	r2, #2
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f001 fcf1 	bl	800c404 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa22:	e032      	b.n	800aa8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f001 fc6f 	bl	800c30a <USBD_CtlError>
            ret = USBD_FAIL;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	75fb      	strb	r3, [r7, #23]
          break;
 800aa30:	e02b      	b.n	800aa8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b03      	cmp	r3, #3
 800aa3c:	d107      	bne.n	800aa4e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa3e:	f107 030d 	add.w	r3, r7, #13
 800aa42:	2201      	movs	r2, #1
 800aa44:	4619      	mov	r1, r3
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f001 fcdc 	bl	800c404 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa4c:	e01d      	b.n	800aa8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f001 fc5a 	bl	800c30a <USBD_CtlError>
            ret = USBD_FAIL;
 800aa56:	2303      	movs	r3, #3
 800aa58:	75fb      	strb	r3, [r7, #23]
          break;
 800aa5a:	e016      	b.n	800aa8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	d00f      	beq.n	800aa88 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aa68:	6839      	ldr	r1, [r7, #0]
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f001 fc4d 	bl	800c30a <USBD_CtlError>
            ret = USBD_FAIL;
 800aa70:	2303      	movs	r3, #3
 800aa72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa74:	e008      	b.n	800aa88 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f001 fc46 	bl	800c30a <USBD_CtlError>
          ret = USBD_FAIL;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	75fb      	strb	r3, [r7, #23]
          break;
 800aa82:	e002      	b.n	800aa8a <USBD_CDC_Setup+0x19e>
          break;
 800aa84:	bf00      	nop
 800aa86:	e008      	b.n	800aa9a <USBD_CDC_Setup+0x1ae>
          break;
 800aa88:	bf00      	nop
      }
      break;
 800aa8a:	e006      	b.n	800aa9a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f001 fc3b 	bl	800c30a <USBD_CtlError>
      ret = USBD_FAIL;
 800aa94:	2303      	movs	r3, #3
 800aa96:	75fb      	strb	r3, [r7, #23]
      break;
 800aa98:	bf00      	nop
  }

  return (uint8_t)ret;
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3718      	adds	r7, #24
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	460b      	mov	r3, r1
 800aaae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aab6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	32b0      	adds	r2, #176	@ 0xb0
 800aac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aaca:	2303      	movs	r3, #3
 800aacc:	e065      	b.n	800ab9a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	32b0      	adds	r2, #176	@ 0xb0
 800aad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aadc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aade:	78fb      	ldrb	r3, [r7, #3]
 800aae0:	f003 020f 	and.w	r2, r3, #15
 800aae4:	6879      	ldr	r1, [r7, #4]
 800aae6:	4613      	mov	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	440b      	add	r3, r1
 800aaf0:	3318      	adds	r3, #24
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d02f      	beq.n	800ab58 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aaf8:	78fb      	ldrb	r3, [r7, #3]
 800aafa:	f003 020f 	and.w	r2, r3, #15
 800aafe:	6879      	ldr	r1, [r7, #4]
 800ab00:	4613      	mov	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	440b      	add	r3, r1
 800ab0a:	3318      	adds	r3, #24
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	78fb      	ldrb	r3, [r7, #3]
 800ab10:	f003 010f 	and.w	r1, r3, #15
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	460b      	mov	r3, r1
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	440b      	add	r3, r1
 800ab1c:	00db      	lsls	r3, r3, #3
 800ab1e:	4403      	add	r3, r0
 800ab20:	3320      	adds	r3, #32
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab28:	fb01 f303 	mul.w	r3, r1, r3
 800ab2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d112      	bne.n	800ab58 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ab32:	78fb      	ldrb	r3, [r7, #3]
 800ab34:	f003 020f 	and.w	r2, r3, #15
 800ab38:	6879      	ldr	r1, [r7, #4]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4413      	add	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	440b      	add	r3, r1
 800ab44:	3318      	adds	r3, #24
 800ab46:	2200      	movs	r2, #0
 800ab48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab4a:	78f9      	ldrb	r1, [r7, #3]
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	2200      	movs	r2, #0
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f005 ff9e 	bl	8010a92 <USBD_LL_Transmit>
 800ab56:	e01f      	b.n	800ab98 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	33b0      	adds	r3, #176	@ 0xb0
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d010      	beq.n	800ab98 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	33b0      	adds	r3, #176	@ 0xb0
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ab94:	78fa      	ldrb	r2, [r7, #3]
 800ab96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b084      	sub	sp, #16
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	460b      	mov	r3, r1
 800abac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	32b0      	adds	r2, #176	@ 0xb0
 800abb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abbc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	32b0      	adds	r2, #176	@ 0xb0
 800abc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d101      	bne.n	800abd4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800abd0:	2303      	movs	r3, #3
 800abd2:	e01a      	b.n	800ac0a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800abd4:	78fb      	ldrb	r3, [r7, #3]
 800abd6:	4619      	mov	r1, r3
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f005 ff9c 	bl	8010b16 <USBD_LL_GetRxDataSize>
 800abde:	4602      	mov	r2, r0
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	33b0      	adds	r3, #176	@ 0xb0
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ac04:	4611      	mov	r1, r2
 800ac06:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b084      	sub	sp, #16
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	32b0      	adds	r2, #176	@ 0xb0
 800ac24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d101      	bne.n	800ac34 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e024      	b.n	800ac7e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	33b0      	adds	r3, #176	@ 0xb0
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d019      	beq.n	800ac7c <USBD_CDC_EP0_RxReady+0x6a>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ac4e:	2bff      	cmp	r3, #255	@ 0xff
 800ac50:	d014      	beq.n	800ac7c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	33b0      	adds	r3, #176	@ 0xb0
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ac6a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac72:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	22ff      	movs	r2, #255	@ 0xff
 800ac78:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac90:	2182      	movs	r1, #130	@ 0x82
 800ac92:	4818      	ldr	r0, [pc, #96]	@ (800acf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac94:	f000 fcd9 	bl	800b64a <USBD_GetEpDesc>
 800ac98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac9a:	2101      	movs	r1, #1
 800ac9c:	4815      	ldr	r0, [pc, #84]	@ (800acf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac9e:	f000 fcd4 	bl	800b64a <USBD_GetEpDesc>
 800aca2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aca4:	2181      	movs	r1, #129	@ 0x81
 800aca6:	4813      	ldr	r0, [pc, #76]	@ (800acf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aca8:	f000 fccf 	bl	800b64a <USBD_GetEpDesc>
 800acac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	2210      	movs	r2, #16
 800acb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d006      	beq.n	800acce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acc8:	711a      	strb	r2, [r3, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d006      	beq.n	800ace2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acdc:	711a      	strb	r2, [r3, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2243      	movs	r2, #67	@ 0x43
 800ace6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ace8:	4b02      	ldr	r3, [pc, #8]	@ (800acf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	20000058 	.word	0x20000058

0800acf8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad00:	2182      	movs	r1, #130	@ 0x82
 800ad02:	4818      	ldr	r0, [pc, #96]	@ (800ad64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad04:	f000 fca1 	bl	800b64a <USBD_GetEpDesc>
 800ad08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad0a:	2101      	movs	r1, #1
 800ad0c:	4815      	ldr	r0, [pc, #84]	@ (800ad64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad0e:	f000 fc9c 	bl	800b64a <USBD_GetEpDesc>
 800ad12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad14:	2181      	movs	r1, #129	@ 0x81
 800ad16:	4813      	ldr	r0, [pc, #76]	@ (800ad64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad18:	f000 fc97 	bl	800b64a <USBD_GetEpDesc>
 800ad1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d002      	beq.n	800ad2a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	2210      	movs	r2, #16
 800ad28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d006      	beq.n	800ad3e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	2200      	movs	r2, #0
 800ad34:	711a      	strb	r2, [r3, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f042 0202 	orr.w	r2, r2, #2
 800ad3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d006      	beq.n	800ad52 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	711a      	strb	r2, [r3, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f042 0202 	orr.w	r2, r2, #2
 800ad50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2243      	movs	r2, #67	@ 0x43
 800ad56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad58:	4b02      	ldr	r3, [pc, #8]	@ (800ad64 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3718      	adds	r7, #24
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	20000058 	.word	0x20000058

0800ad68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b086      	sub	sp, #24
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad70:	2182      	movs	r1, #130	@ 0x82
 800ad72:	4818      	ldr	r0, [pc, #96]	@ (800add4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad74:	f000 fc69 	bl	800b64a <USBD_GetEpDesc>
 800ad78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad7a:	2101      	movs	r1, #1
 800ad7c:	4815      	ldr	r0, [pc, #84]	@ (800add4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad7e:	f000 fc64 	bl	800b64a <USBD_GetEpDesc>
 800ad82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad84:	2181      	movs	r1, #129	@ 0x81
 800ad86:	4813      	ldr	r0, [pc, #76]	@ (800add4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad88:	f000 fc5f 	bl	800b64a <USBD_GetEpDesc>
 800ad8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d002      	beq.n	800ad9a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	2210      	movs	r2, #16
 800ad98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d006      	beq.n	800adae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ada8:	711a      	strb	r2, [r3, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d006      	beq.n	800adc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800adbc:	711a      	strb	r2, [r3, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2243      	movs	r2, #67	@ 0x43
 800adc6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800adc8:	4b02      	ldr	r3, [pc, #8]	@ (800add4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	20000058 	.word	0x20000058

0800add8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	220a      	movs	r2, #10
 800ade4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ade6:	4b03      	ldr	r3, [pc, #12]	@ (800adf4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ade8:	4618      	mov	r0, r3
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	20000014 	.word	0x20000014

0800adf8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d101      	bne.n	800ae0c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	e009      	b.n	800ae20 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	33b0      	adds	r3, #176	@ 0xb0
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4413      	add	r3, r2
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	32b0      	adds	r2, #176	@ 0xb0
 800ae42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae46:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d101      	bne.n	800ae52 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ae4e:	2303      	movs	r3, #3
 800ae50:	e008      	b.n	800ae64 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	371c      	adds	r7, #28
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	32b0      	adds	r2, #176	@ 0xb0
 800ae84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d101      	bne.n	800ae94 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e004      	b.n	800ae9e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3714      	adds	r7, #20
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
	...

0800aeac <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	32b0      	adds	r2, #176	@ 0xb0
 800aebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800aec4:	2301      	movs	r3, #1
 800aec6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aece:	2303      	movs	r3, #3
 800aed0:	e025      	b.n	800af1e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d11f      	bne.n	800af1c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	2201      	movs	r2, #1
 800aee0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800aee4:	4b10      	ldr	r3, [pc, #64]	@ (800af28 <USBD_CDC_TransmitPacket+0x7c>)
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	f003 020f 	and.w	r2, r3, #15
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	4613      	mov	r3, r2
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	4413      	add	r3, r2
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4403      	add	r3, r0
 800aefe:	3318      	adds	r3, #24
 800af00:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800af02:	4b09      	ldr	r3, [pc, #36]	@ (800af28 <USBD_CDC_TransmitPacket+0x7c>)
 800af04:	7819      	ldrb	r1, [r3, #0]
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f005 fdbd 	bl	8010a92 <USBD_LL_Transmit>

    ret = USBD_OK;
 800af18:	2300      	movs	r3, #0
 800af1a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800af1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	2000009b 	.word	0x2000009b

0800af2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	32b0      	adds	r2, #176	@ 0xb0
 800af3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af42:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	32b0      	adds	r2, #176	@ 0xb0
 800af4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d101      	bne.n	800af5a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800af56:	2303      	movs	r3, #3
 800af58:	e018      	b.n	800af8c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	7c1b      	ldrb	r3, [r3, #16]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10a      	bne.n	800af78 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af62:	4b0c      	ldr	r3, [pc, #48]	@ (800af94 <USBD_CDC_ReceivePacket+0x68>)
 800af64:	7819      	ldrb	r1, [r3, #0]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f005 fdaf 	bl	8010ad4 <USBD_LL_PrepareReceive>
 800af76:	e008      	b.n	800af8a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af78:	4b06      	ldr	r3, [pc, #24]	@ (800af94 <USBD_CDC_ReceivePacket+0x68>)
 800af7a:	7819      	ldrb	r1, [r3, #0]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af82:	2340      	movs	r3, #64	@ 0x40
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f005 fda5 	bl	8010ad4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	2000009c 	.word	0x2000009c

0800af98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	4613      	mov	r3, r2
 800afa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d10a      	bne.n	800afc2 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800afac:	4817      	ldr	r0, [pc, #92]	@ (800b00c <USBD_Init+0x74>)
 800afae:	f005 ff07 	bl	8010dc0 <iprintf>
 800afb2:	4817      	ldr	r0, [pc, #92]	@ (800b010 <USBD_Init+0x78>)
 800afb4:	f005 ff04 	bl	8010dc0 <iprintf>
 800afb8:	200a      	movs	r0, #10
 800afba:	f005 ff13 	bl	8010de4 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800afbe:	2303      	movs	r3, #3
 800afc0:	e01f      	b.n	800b002 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d003      	beq.n	800afe8 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	68ba      	ldr	r2, [r7, #8]
 800afe4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	79fa      	ldrb	r2, [r7, #7]
 800aff4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f005 fc00 	bl	80107fc <USBD_LL_Init>
 800affc:	4603      	mov	r3, r0
 800affe:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b000:	7dfb      	ldrb	r3, [r7, #23]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3718      	adds	r7, #24
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	08011c44 	.word	0x08011c44
 800b010:	08011c4c 	.word	0x08011c4c

0800b014 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b01e:	2300      	movs	r3, #0
 800b020:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10a      	bne.n	800b03e <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800b028:	481a      	ldr	r0, [pc, #104]	@ (800b094 <USBD_RegisterClass+0x80>)
 800b02a:	f005 fec9 	bl	8010dc0 <iprintf>
 800b02e:	481a      	ldr	r0, [pc, #104]	@ (800b098 <USBD_RegisterClass+0x84>)
 800b030:	f005 fec6 	bl	8010dc0 <iprintf>
 800b034:	200a      	movs	r0, #10
 800b036:	f005 fed5 	bl	8010de4 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b03a:	2303      	movs	r3, #3
 800b03c:	e025      	b.n	800b08a <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	683a      	ldr	r2, [r7, #0]
 800b042:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	32ae      	adds	r2, #174	@ 0xae
 800b050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00f      	beq.n	800b07a <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	32ae      	adds	r2, #174	@ 0xae
 800b064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b06a:	f107 020e 	add.w	r2, r7, #14
 800b06e:	4610      	mov	r0, r2
 800b070:	4798      	blx	r3
 800b072:	4602      	mov	r2, r0
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b080:	1c5a      	adds	r2, r3, #1
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	08011c44 	.word	0x08011c44
 800b098:	08011c64 	.word	0x08011c64

0800b09c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f005 fc0b 	bl	80108c0 <USBD_LL_Start>
 800b0aa:	4603      	mov	r3, r0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	370c      	adds	r7, #12
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d009      	beq.n	800b0f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	78fa      	ldrb	r2, [r7, #3]
 800b0ee:	4611      	mov	r1, r2
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	4798      	blx	r3
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	460b      	mov	r3, r1
 800b10c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b10e:	2300      	movs	r3, #0
 800b110:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	78fa      	ldrb	r2, [r7, #3]
 800b11c:	4611      	mov	r1, r2
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	4798      	blx	r3
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b128:	2303      	movs	r3, #3
 800b12a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b084      	sub	sp, #16
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b146:	6839      	ldr	r1, [r7, #0]
 800b148:	4618      	mov	r0, r3
 800b14a:	f001 f8a4 	bl	800c296 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2201      	movs	r2, #1
 800b152:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b15c:	461a      	mov	r2, r3
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b16a:	f003 031f 	and.w	r3, r3, #31
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d01a      	beq.n	800b1a8 <USBD_LL_SetupStage+0x72>
 800b172:	2b02      	cmp	r3, #2
 800b174:	d822      	bhi.n	800b1bc <USBD_LL_SetupStage+0x86>
 800b176:	2b00      	cmp	r3, #0
 800b178:	d002      	beq.n	800b180 <USBD_LL_SetupStage+0x4a>
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d00a      	beq.n	800b194 <USBD_LL_SetupStage+0x5e>
 800b17e:	e01d      	b.n	800b1bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fad1 	bl	800b730 <USBD_StdDevReq>
 800b18e:	4603      	mov	r3, r0
 800b190:	73fb      	strb	r3, [r7, #15]
      break;
 800b192:	e020      	b.n	800b1d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b19a:	4619      	mov	r1, r3
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fb39 	bl	800b814 <USBD_StdItfReq>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	73fb      	strb	r3, [r7, #15]
      break;
 800b1a6:	e016      	b.n	800b1d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 fb9b 	bl	800b8ec <USBD_StdEPReq>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b1ba:	e00c      	b.n	800b1d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b1c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f005 fbd8 	bl	8010980 <USBD_LL_StallEP>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	73fb      	strb	r3, [r7, #15]
      break;
 800b1d4:	bf00      	nop
  }

  return ret;
 800b1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	607a      	str	r2, [r7, #4]
 800b1ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b1f2:	7afb      	ldrb	r3, [r7, #11]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d16e      	bne.n	800b2d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b1fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b206:	2b03      	cmp	r3, #3
 800b208:	f040 8098 	bne.w	800b33c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	689a      	ldr	r2, [r3, #8]
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	429a      	cmp	r2, r3
 800b216:	d913      	bls.n	800b240 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	689a      	ldr	r2, [r3, #8]
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	1ad2      	subs	r2, r2, r3
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	68da      	ldr	r2, [r3, #12]
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	4293      	cmp	r3, r2
 800b230:	bf28      	it	cs
 800b232:	4613      	movcs	r3, r2
 800b234:	461a      	mov	r2, r3
 800b236:	6879      	ldr	r1, [r7, #4]
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f001 f92c 	bl	800c496 <USBD_CtlContinueRx>
 800b23e:	e07d      	b.n	800b33c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b246:	f003 031f 	and.w	r3, r3, #31
 800b24a:	2b02      	cmp	r3, #2
 800b24c:	d014      	beq.n	800b278 <USBD_LL_DataOutStage+0x98>
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d81d      	bhi.n	800b28e <USBD_LL_DataOutStage+0xae>
 800b252:	2b00      	cmp	r3, #0
 800b254:	d002      	beq.n	800b25c <USBD_LL_DataOutStage+0x7c>
 800b256:	2b01      	cmp	r3, #1
 800b258:	d003      	beq.n	800b262 <USBD_LL_DataOutStage+0x82>
 800b25a:	e018      	b.n	800b28e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b25c:	2300      	movs	r3, #0
 800b25e:	75bb      	strb	r3, [r7, #22]
            break;
 800b260:	e018      	b.n	800b294 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	4619      	mov	r1, r3
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f000 f9d2 	bl	800b616 <USBD_CoreFindIF>
 800b272:	4603      	mov	r3, r0
 800b274:	75bb      	strb	r3, [r7, #22]
            break;
 800b276:	e00d      	b.n	800b294 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	4619      	mov	r1, r3
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f000 f9d4 	bl	800b630 <USBD_CoreFindEP>
 800b288:	4603      	mov	r3, r0
 800b28a:	75bb      	strb	r3, [r7, #22]
            break;
 800b28c:	e002      	b.n	800b294 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b28e:	2300      	movs	r3, #0
 800b290:	75bb      	strb	r3, [r7, #22]
            break;
 800b292:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b294:	7dbb      	ldrb	r3, [r7, #22]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d119      	bne.n	800b2ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	2b03      	cmp	r3, #3
 800b2a4:	d113      	bne.n	800b2ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b2a6:	7dba      	ldrb	r2, [r7, #22]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	32ae      	adds	r2, #174	@ 0xae
 800b2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00b      	beq.n	800b2ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b2b6:	7dba      	ldrb	r2, [r7, #22]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b2be:	7dba      	ldrb	r2, [r7, #22]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	32ae      	adds	r2, #174	@ 0xae
 800b2c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b2ce:	68f8      	ldr	r0, [r7, #12]
 800b2d0:	f001 f8f2 	bl	800c4b8 <USBD_CtlSendStatus>
 800b2d4:	e032      	b.n	800b33c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b2d6:	7afb      	ldrb	r3, [r7, #11]
 800b2d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	4619      	mov	r1, r3
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f000 f9a5 	bl	800b630 <USBD_CoreFindEP>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2ea:	7dbb      	ldrb	r3, [r7, #22]
 800b2ec:	2bff      	cmp	r3, #255	@ 0xff
 800b2ee:	d025      	beq.n	800b33c <USBD_LL_DataOutStage+0x15c>
 800b2f0:	7dbb      	ldrb	r3, [r7, #22]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d122      	bne.n	800b33c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	2b03      	cmp	r3, #3
 800b300:	d117      	bne.n	800b332 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b302:	7dba      	ldrb	r2, [r7, #22]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	32ae      	adds	r2, #174	@ 0xae
 800b308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b30c:	699b      	ldr	r3, [r3, #24]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00f      	beq.n	800b332 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b312:	7dba      	ldrb	r2, [r7, #22]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b31a:	7dba      	ldrb	r2, [r7, #22]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	32ae      	adds	r2, #174	@ 0xae
 800b320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	7afa      	ldrb	r2, [r7, #11]
 800b328:	4611      	mov	r1, r2
 800b32a:	68f8      	ldr	r0, [r7, #12]
 800b32c:	4798      	blx	r3
 800b32e:	4603      	mov	r3, r0
 800b330:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b332:	7dfb      	ldrb	r3, [r7, #23]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b338:	7dfb      	ldrb	r3, [r7, #23]
 800b33a:	e000      	b.n	800b33e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3718      	adds	r7, #24
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b086      	sub	sp, #24
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	60f8      	str	r0, [r7, #12]
 800b34e:	460b      	mov	r3, r1
 800b350:	607a      	str	r2, [r7, #4]
 800b352:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b354:	7afb      	ldrb	r3, [r7, #11]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d16f      	bne.n	800b43a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	3314      	adds	r3, #20
 800b35e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b366:	2b02      	cmp	r3, #2
 800b368:	d15a      	bne.n	800b420 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	689a      	ldr	r2, [r3, #8]
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	429a      	cmp	r2, r3
 800b374:	d914      	bls.n	800b3a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	689a      	ldr	r2, [r3, #8]
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	1ad2      	subs	r2, r2, r3
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	461a      	mov	r2, r3
 800b38a:	6879      	ldr	r1, [r7, #4]
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f001 f854 	bl	800c43a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b392:	2300      	movs	r3, #0
 800b394:	2200      	movs	r2, #0
 800b396:	2100      	movs	r1, #0
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f005 fb9b 	bl	8010ad4 <USBD_LL_PrepareReceive>
 800b39e:	e03f      	b.n	800b420 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	68da      	ldr	r2, [r3, #12]
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d11c      	bne.n	800b3e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	685a      	ldr	r2, [r3, #4]
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d316      	bcc.n	800b3e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	685a      	ldr	r2, [r3, #4]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d20f      	bcs.n	800b3e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f001 f835 	bl	800c43a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3d8:	2300      	movs	r3, #0
 800b3da:	2200      	movs	r2, #0
 800b3dc:	2100      	movs	r1, #0
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f005 fb78 	bl	8010ad4 <USBD_LL_PrepareReceive>
 800b3e4:	e01c      	b.n	800b420 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	2b03      	cmp	r3, #3
 800b3f0:	d10f      	bne.n	800b412 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d009      	beq.n	800b412 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b412:	2180      	movs	r1, #128	@ 0x80
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f005 fab3 	bl	8010980 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f001 f85f 	bl	800c4de <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d03a      	beq.n	800b4a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f7ff fe42 	bl	800b0b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2200      	movs	r2, #0
 800b434:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b438:	e032      	b.n	800b4a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b43a:	7afb      	ldrb	r3, [r7, #11]
 800b43c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b440:	b2db      	uxtb	r3, r3
 800b442:	4619      	mov	r1, r3
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f000 f8f3 	bl	800b630 <USBD_CoreFindEP>
 800b44a:	4603      	mov	r3, r0
 800b44c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b44e:	7dfb      	ldrb	r3, [r7, #23]
 800b450:	2bff      	cmp	r3, #255	@ 0xff
 800b452:	d025      	beq.n	800b4a0 <USBD_LL_DataInStage+0x15a>
 800b454:	7dfb      	ldrb	r3, [r7, #23]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d122      	bne.n	800b4a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b460:	b2db      	uxtb	r3, r3
 800b462:	2b03      	cmp	r3, #3
 800b464:	d11c      	bne.n	800b4a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b466:	7dfa      	ldrb	r2, [r7, #23]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	32ae      	adds	r2, #174	@ 0xae
 800b46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b470:	695b      	ldr	r3, [r3, #20]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d014      	beq.n	800b4a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b476:	7dfa      	ldrb	r2, [r7, #23]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b47e:	7dfa      	ldrb	r2, [r7, #23]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	32ae      	adds	r2, #174	@ 0xae
 800b484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	7afa      	ldrb	r2, [r7, #11]
 800b48c:	4611      	mov	r1, r2
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	4798      	blx	r3
 800b492:	4603      	mov	r3, r0
 800b494:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b496:	7dbb      	ldrb	r3, [r7, #22]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d001      	beq.n	800b4a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b49c:	7dbb      	ldrb	r3, [r7, #22]
 800b49e:	e000      	b.n	800b4a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3718      	adds	r7, #24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b084      	sub	sp, #16
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d014      	beq.n	800b510 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00e      	beq.n	800b510 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	6852      	ldr	r2, [r2, #4]
 800b4fe:	b2d2      	uxtb	r2, r2
 800b500:	4611      	mov	r1, r2
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	4798      	blx	r3
 800b506:	4603      	mov	r3, r0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d001      	beq.n	800b510 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b50c:	2303      	movs	r3, #3
 800b50e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b510:	2340      	movs	r3, #64	@ 0x40
 800b512:	2200      	movs	r2, #0
 800b514:	2100      	movs	r1, #0
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f005 f9ed 	bl	80108f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2240      	movs	r2, #64	@ 0x40
 800b528:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b52c:	2340      	movs	r3, #64	@ 0x40
 800b52e:	2200      	movs	r2, #0
 800b530:	2180      	movs	r1, #128	@ 0x80
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f005 f9df 	bl	80108f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2240      	movs	r2, #64	@ 0x40
 800b542:	621a      	str	r2, [r3, #32]

  return ret;
 800b544:	7bfb      	ldrb	r3, [r7, #15]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b54e:	b480      	push	{r7}
 800b550:	b083      	sub	sp, #12
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
 800b556:	460b      	mov	r3, r1
 800b558:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	78fa      	ldrb	r2, [r7, #3]
 800b55e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	370c      	adds	r7, #12
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b56e:	b480      	push	{r7}
 800b570:	b083      	sub	sp, #12
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b04      	cmp	r3, #4
 800b580:	d006      	beq.n	800b590 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b588:	b2da      	uxtb	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2204      	movs	r2, #4
 800b594:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	370c      	adds	r7, #12
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr

0800b5a6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5a6:	b480      	push	{r7}
 800b5a8:	b083      	sub	sp, #12
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	2b04      	cmp	r3, #4
 800b5b8:	d106      	bne.n	800b5c8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b5c0:	b2da      	uxtb	r2, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b5c8:	2300      	movs	r3, #0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	370c      	adds	r7, #12
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr

0800b5d6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b082      	sub	sp, #8
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	2b03      	cmp	r3, #3
 800b5e8:	d110      	bne.n	800b60c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00b      	beq.n	800b60c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5fa:	69db      	ldr	r3, [r3, #28]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d005      	beq.n	800b60c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b606:	69db      	ldr	r3, [r3, #28]
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b616:	b480      	push	{r7}
 800b618:	b083      	sub	sp, #12
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	460b      	mov	r3, r1
 800b620:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b622:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b624:	4618      	mov	r0, r3
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	460b      	mov	r3, r1
 800b63a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b63c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b63e:	4618      	mov	r0, r3
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr

0800b64a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b086      	sub	sp, #24
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	460b      	mov	r3, r1
 800b654:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b65e:	2300      	movs	r3, #0
 800b660:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	885b      	ldrh	r3, [r3, #2]
 800b666:	b29b      	uxth	r3, r3
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	7812      	ldrb	r2, [r2, #0]
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d91f      	bls.n	800b6b0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b676:	e013      	b.n	800b6a0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b678:	f107 030a 	add.w	r3, r7, #10
 800b67c:	4619      	mov	r1, r3
 800b67e:	6978      	ldr	r0, [r7, #20]
 800b680:	f000 f81b 	bl	800b6ba <USBD_GetNextDesc>
 800b684:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	785b      	ldrb	r3, [r3, #1]
 800b68a:	2b05      	cmp	r3, #5
 800b68c:	d108      	bne.n	800b6a0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	789b      	ldrb	r3, [r3, #2]
 800b696:	78fa      	ldrb	r2, [r7, #3]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d008      	beq.n	800b6ae <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b69c:	2300      	movs	r3, #0
 800b69e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	885b      	ldrh	r3, [r3, #2]
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	897b      	ldrh	r3, [r7, #10]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d8e5      	bhi.n	800b678 <USBD_GetEpDesc+0x2e>
 800b6ac:	e000      	b.n	800b6b0 <USBD_GetEpDesc+0x66>
          break;
 800b6ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b6b0:	693b      	ldr	r3, [r7, #16]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3718      	adds	r7, #24
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b085      	sub	sp, #20
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
 800b6c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	881b      	ldrh	r3, [r3, #0]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	7812      	ldrb	r2, [r2, #0]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	461a      	mov	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3714      	adds	r7, #20
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr

0800b6f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b6f2:	b480      	push	{r7}
 800b6f4:	b087      	sub	sp, #28
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	3301      	adds	r3, #1
 800b708:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b710:	8a3b      	ldrh	r3, [r7, #16]
 800b712:	021b      	lsls	r3, r3, #8
 800b714:	b21a      	sxth	r2, r3
 800b716:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	b21b      	sxth	r3, r3
 800b71e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b720:	89fb      	ldrh	r3, [r7, #14]
}
 800b722:	4618      	mov	r0, r3
 800b724:	371c      	adds	r7, #28
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr
	...

0800b730 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b73a:	2300      	movs	r3, #0
 800b73c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b746:	2b40      	cmp	r3, #64	@ 0x40
 800b748:	d005      	beq.n	800b756 <USBD_StdDevReq+0x26>
 800b74a:	2b40      	cmp	r3, #64	@ 0x40
 800b74c:	d857      	bhi.n	800b7fe <USBD_StdDevReq+0xce>
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00f      	beq.n	800b772 <USBD_StdDevReq+0x42>
 800b752:	2b20      	cmp	r3, #32
 800b754:	d153      	bne.n	800b7fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	32ae      	adds	r2, #174	@ 0xae
 800b760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	6839      	ldr	r1, [r7, #0]
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	4798      	blx	r3
 800b76c:	4603      	mov	r3, r0
 800b76e:	73fb      	strb	r3, [r7, #15]
      break;
 800b770:	e04a      	b.n	800b808 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	785b      	ldrb	r3, [r3, #1]
 800b776:	2b09      	cmp	r3, #9
 800b778:	d83b      	bhi.n	800b7f2 <USBD_StdDevReq+0xc2>
 800b77a:	a201      	add	r2, pc, #4	@ (adr r2, 800b780 <USBD_StdDevReq+0x50>)
 800b77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b780:	0800b7d5 	.word	0x0800b7d5
 800b784:	0800b7e9 	.word	0x0800b7e9
 800b788:	0800b7f3 	.word	0x0800b7f3
 800b78c:	0800b7df 	.word	0x0800b7df
 800b790:	0800b7f3 	.word	0x0800b7f3
 800b794:	0800b7b3 	.word	0x0800b7b3
 800b798:	0800b7a9 	.word	0x0800b7a9
 800b79c:	0800b7f3 	.word	0x0800b7f3
 800b7a0:	0800b7cb 	.word	0x0800b7cb
 800b7a4:	0800b7bd 	.word	0x0800b7bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b7a8:	6839      	ldr	r1, [r7, #0]
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 fa3c 	bl	800bc28 <USBD_GetDescriptor>
          break;
 800b7b0:	e024      	b.n	800b7fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 fbcb 	bl	800bf50 <USBD_SetAddress>
          break;
 800b7ba:	e01f      	b.n	800b7fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 fc0a 	bl	800bfd8 <USBD_SetConfig>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	73fb      	strb	r3, [r7, #15]
          break;
 800b7c8:	e018      	b.n	800b7fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b7ca:	6839      	ldr	r1, [r7, #0]
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 fcad 	bl	800c12c <USBD_GetConfig>
          break;
 800b7d2:	e013      	b.n	800b7fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b7d4:	6839      	ldr	r1, [r7, #0]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 fcde 	bl	800c198 <USBD_GetStatus>
          break;
 800b7dc:	e00e      	b.n	800b7fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 fd0d 	bl	800c200 <USBD_SetFeature>
          break;
 800b7e6:	e009      	b.n	800b7fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b7e8:	6839      	ldr	r1, [r7, #0]
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 fd31 	bl	800c252 <USBD_ClrFeature>
          break;
 800b7f0:	e004      	b.n	800b7fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b7f2:	6839      	ldr	r1, [r7, #0]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fd88 	bl	800c30a <USBD_CtlError>
          break;
 800b7fa:	bf00      	nop
      }
      break;
 800b7fc:	e004      	b.n	800b808 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b7fe:	6839      	ldr	r1, [r7, #0]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 fd82 	bl	800c30a <USBD_CtlError>
      break;
 800b806:	bf00      	nop
  }

  return ret;
 800b808:	7bfb      	ldrb	r3, [r7, #15]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop

0800b814 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b82a:	2b40      	cmp	r3, #64	@ 0x40
 800b82c:	d005      	beq.n	800b83a <USBD_StdItfReq+0x26>
 800b82e:	2b40      	cmp	r3, #64	@ 0x40
 800b830:	d852      	bhi.n	800b8d8 <USBD_StdItfReq+0xc4>
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <USBD_StdItfReq+0x26>
 800b836:	2b20      	cmp	r3, #32
 800b838:	d14e      	bne.n	800b8d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b840:	b2db      	uxtb	r3, r3
 800b842:	3b01      	subs	r3, #1
 800b844:	2b02      	cmp	r3, #2
 800b846:	d840      	bhi.n	800b8ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	889b      	ldrh	r3, [r3, #4]
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d836      	bhi.n	800b8c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	889b      	ldrh	r3, [r3, #4]
 800b856:	b2db      	uxtb	r3, r3
 800b858:	4619      	mov	r1, r3
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f7ff fedb 	bl	800b616 <USBD_CoreFindIF>
 800b860:	4603      	mov	r3, r0
 800b862:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b864:	7bbb      	ldrb	r3, [r7, #14]
 800b866:	2bff      	cmp	r3, #255	@ 0xff
 800b868:	d01d      	beq.n	800b8a6 <USBD_StdItfReq+0x92>
 800b86a:	7bbb      	ldrb	r3, [r7, #14]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d11a      	bne.n	800b8a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b870:	7bba      	ldrb	r2, [r7, #14]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	32ae      	adds	r2, #174	@ 0xae
 800b876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00f      	beq.n	800b8a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b880:	7bba      	ldrb	r2, [r7, #14]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b888:	7bba      	ldrb	r2, [r7, #14]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	32ae      	adds	r2, #174	@ 0xae
 800b88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	6839      	ldr	r1, [r7, #0]
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	4798      	blx	r3
 800b89a:	4603      	mov	r3, r0
 800b89c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b89e:	e004      	b.n	800b8aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8a4:	e001      	b.n	800b8aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	88db      	ldrh	r3, [r3, #6]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d110      	bne.n	800b8d4 <USBD_StdItfReq+0xc0>
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10d      	bne.n	800b8d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 fdfd 	bl	800c4b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b8be:	e009      	b.n	800b8d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fd21 	bl	800c30a <USBD_CtlError>
          break;
 800b8c8:	e004      	b.n	800b8d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fd1c 	bl	800c30a <USBD_CtlError>
          break;
 800b8d2:	e000      	b.n	800b8d6 <USBD_StdItfReq+0xc2>
          break;
 800b8d4:	bf00      	nop
      }
      break;
 800b8d6:	e004      	b.n	800b8e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 fd15 	bl	800c30a <USBD_CtlError>
      break;
 800b8e0:	bf00      	nop
  }

  return ret;
 800b8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3710      	adds	r7, #16
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	889b      	ldrh	r3, [r3, #4]
 800b8fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b908:	2b40      	cmp	r3, #64	@ 0x40
 800b90a:	d007      	beq.n	800b91c <USBD_StdEPReq+0x30>
 800b90c:	2b40      	cmp	r3, #64	@ 0x40
 800b90e:	f200 817f 	bhi.w	800bc10 <USBD_StdEPReq+0x324>
 800b912:	2b00      	cmp	r3, #0
 800b914:	d02a      	beq.n	800b96c <USBD_StdEPReq+0x80>
 800b916:	2b20      	cmp	r3, #32
 800b918:	f040 817a 	bne.w	800bc10 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b91c:	7bbb      	ldrb	r3, [r7, #14]
 800b91e:	4619      	mov	r1, r3
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7ff fe85 	bl	800b630 <USBD_CoreFindEP>
 800b926:	4603      	mov	r3, r0
 800b928:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b92a:	7b7b      	ldrb	r3, [r7, #13]
 800b92c:	2bff      	cmp	r3, #255	@ 0xff
 800b92e:	f000 8174 	beq.w	800bc1a <USBD_StdEPReq+0x32e>
 800b932:	7b7b      	ldrb	r3, [r7, #13]
 800b934:	2b00      	cmp	r3, #0
 800b936:	f040 8170 	bne.w	800bc1a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b93a:	7b7a      	ldrb	r2, [r7, #13]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b942:	7b7a      	ldrb	r2, [r7, #13]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	32ae      	adds	r2, #174	@ 0xae
 800b948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	f000 8163 	beq.w	800bc1a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b954:	7b7a      	ldrb	r2, [r7, #13]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	32ae      	adds	r2, #174	@ 0xae
 800b95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	6839      	ldr	r1, [r7, #0]
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	4798      	blx	r3
 800b966:	4603      	mov	r3, r0
 800b968:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b96a:	e156      	b.n	800bc1a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	785b      	ldrb	r3, [r3, #1]
 800b970:	2b03      	cmp	r3, #3
 800b972:	d008      	beq.n	800b986 <USBD_StdEPReq+0x9a>
 800b974:	2b03      	cmp	r3, #3
 800b976:	f300 8145 	bgt.w	800bc04 <USBD_StdEPReq+0x318>
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	f000 809b 	beq.w	800bab6 <USBD_StdEPReq+0x1ca>
 800b980:	2b01      	cmp	r3, #1
 800b982:	d03c      	beq.n	800b9fe <USBD_StdEPReq+0x112>
 800b984:	e13e      	b.n	800bc04 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2b02      	cmp	r3, #2
 800b990:	d002      	beq.n	800b998 <USBD_StdEPReq+0xac>
 800b992:	2b03      	cmp	r3, #3
 800b994:	d016      	beq.n	800b9c4 <USBD_StdEPReq+0xd8>
 800b996:	e02c      	b.n	800b9f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b998:	7bbb      	ldrb	r3, [r7, #14]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00d      	beq.n	800b9ba <USBD_StdEPReq+0xce>
 800b99e:	7bbb      	ldrb	r3, [r7, #14]
 800b9a0:	2b80      	cmp	r3, #128	@ 0x80
 800b9a2:	d00a      	beq.n	800b9ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9a4:	7bbb      	ldrb	r3, [r7, #14]
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f004 ffe9 	bl	8010980 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9ae:	2180      	movs	r1, #128	@ 0x80
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f004 ffe5 	bl	8010980 <USBD_LL_StallEP>
 800b9b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9b8:	e020      	b.n	800b9fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b9ba:	6839      	ldr	r1, [r7, #0]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fca4 	bl	800c30a <USBD_CtlError>
              break;
 800b9c2:	e01b      	b.n	800b9fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	885b      	ldrh	r3, [r3, #2]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10e      	bne.n	800b9ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b9cc:	7bbb      	ldrb	r3, [r7, #14]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d00b      	beq.n	800b9ea <USBD_StdEPReq+0xfe>
 800b9d2:	7bbb      	ldrb	r3, [r7, #14]
 800b9d4:	2b80      	cmp	r3, #128	@ 0x80
 800b9d6:	d008      	beq.n	800b9ea <USBD_StdEPReq+0xfe>
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	88db      	ldrh	r3, [r3, #6]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d104      	bne.n	800b9ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9e0:	7bbb      	ldrb	r3, [r7, #14]
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f004 ffcb 	bl	8010980 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fd64 	bl	800c4b8 <USBD_CtlSendStatus>

              break;
 800b9f0:	e004      	b.n	800b9fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b9f2:	6839      	ldr	r1, [r7, #0]
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 fc88 	bl	800c30a <USBD_CtlError>
              break;
 800b9fa:	bf00      	nop
          }
          break;
 800b9fc:	e107      	b.n	800bc0e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d002      	beq.n	800ba10 <USBD_StdEPReq+0x124>
 800ba0a:	2b03      	cmp	r3, #3
 800ba0c:	d016      	beq.n	800ba3c <USBD_StdEPReq+0x150>
 800ba0e:	e04b      	b.n	800baa8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba10:	7bbb      	ldrb	r3, [r7, #14]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00d      	beq.n	800ba32 <USBD_StdEPReq+0x146>
 800ba16:	7bbb      	ldrb	r3, [r7, #14]
 800ba18:	2b80      	cmp	r3, #128	@ 0x80
 800ba1a:	d00a      	beq.n	800ba32 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba1c:	7bbb      	ldrb	r3, [r7, #14]
 800ba1e:	4619      	mov	r1, r3
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f004 ffad 	bl	8010980 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba26:	2180      	movs	r1, #128	@ 0x80
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f004 ffa9 	bl	8010980 <USBD_LL_StallEP>
 800ba2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba30:	e040      	b.n	800bab4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ba32:	6839      	ldr	r1, [r7, #0]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 fc68 	bl	800c30a <USBD_CtlError>
              break;
 800ba3a:	e03b      	b.n	800bab4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	885b      	ldrh	r3, [r3, #2]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d136      	bne.n	800bab2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba44:	7bbb      	ldrb	r3, [r7, #14]
 800ba46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d004      	beq.n	800ba58 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba4e:	7bbb      	ldrb	r3, [r7, #14]
 800ba50:	4619      	mov	r1, r3
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f004 ffb3 	bl	80109be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 fd2d 	bl	800c4b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba5e:	7bbb      	ldrb	r3, [r7, #14]
 800ba60:	4619      	mov	r1, r3
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f7ff fde4 	bl	800b630 <USBD_CoreFindEP>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba6c:	7b7b      	ldrb	r3, [r7, #13]
 800ba6e:	2bff      	cmp	r3, #255	@ 0xff
 800ba70:	d01f      	beq.n	800bab2 <USBD_StdEPReq+0x1c6>
 800ba72:	7b7b      	ldrb	r3, [r7, #13]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d11c      	bne.n	800bab2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ba78:	7b7a      	ldrb	r2, [r7, #13]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ba80:	7b7a      	ldrb	r2, [r7, #13]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	32ae      	adds	r2, #174	@ 0xae
 800ba86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d010      	beq.n	800bab2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ba90:	7b7a      	ldrb	r2, [r7, #13]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	32ae      	adds	r2, #174	@ 0xae
 800ba96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	6839      	ldr	r1, [r7, #0]
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	4798      	blx	r3
 800baa2:	4603      	mov	r3, r0
 800baa4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800baa6:	e004      	b.n	800bab2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800baa8:	6839      	ldr	r1, [r7, #0]
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fc2d 	bl	800c30a <USBD_CtlError>
              break;
 800bab0:	e000      	b.n	800bab4 <USBD_StdEPReq+0x1c8>
              break;
 800bab2:	bf00      	nop
          }
          break;
 800bab4:	e0ab      	b.n	800bc0e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800babc:	b2db      	uxtb	r3, r3
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d002      	beq.n	800bac8 <USBD_StdEPReq+0x1dc>
 800bac2:	2b03      	cmp	r3, #3
 800bac4:	d032      	beq.n	800bb2c <USBD_StdEPReq+0x240>
 800bac6:	e097      	b.n	800bbf8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bac8:	7bbb      	ldrb	r3, [r7, #14]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d007      	beq.n	800bade <USBD_StdEPReq+0x1f2>
 800bace:	7bbb      	ldrb	r3, [r7, #14]
 800bad0:	2b80      	cmp	r3, #128	@ 0x80
 800bad2:	d004      	beq.n	800bade <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bad4:	6839      	ldr	r1, [r7, #0]
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 fc17 	bl	800c30a <USBD_CtlError>
                break;
 800badc:	e091      	b.n	800bc02 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bade:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	da0b      	bge.n	800bafe <USBD_StdEPReq+0x212>
 800bae6:	7bbb      	ldrb	r3, [r7, #14]
 800bae8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800baec:	4613      	mov	r3, r2
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	4413      	add	r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	3310      	adds	r3, #16
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	4413      	add	r3, r2
 800bafa:	3304      	adds	r3, #4
 800bafc:	e00b      	b.n	800bb16 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bafe:	7bbb      	ldrb	r3, [r7, #14]
 800bb00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb04:	4613      	mov	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	4413      	add	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	4413      	add	r3, r2
 800bb14:	3304      	adds	r3, #4
 800bb16:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	2202      	movs	r2, #2
 800bb22:	4619      	mov	r1, r3
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 fc6d 	bl	800c404 <USBD_CtlSendData>
              break;
 800bb2a:	e06a      	b.n	800bc02 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	da11      	bge.n	800bb58 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb34:	7bbb      	ldrb	r3, [r7, #14]
 800bb36:	f003 020f 	and.w	r2, r3, #15
 800bb3a:	6879      	ldr	r1, [r7, #4]
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4413      	add	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	440b      	add	r3, r1
 800bb46:	3324      	adds	r3, #36	@ 0x24
 800bb48:	881b      	ldrh	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d117      	bne.n	800bb7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 fbda 	bl	800c30a <USBD_CtlError>
                  break;
 800bb56:	e054      	b.n	800bc02 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb58:	7bbb      	ldrb	r3, [r7, #14]
 800bb5a:	f003 020f 	and.w	r2, r3, #15
 800bb5e:	6879      	ldr	r1, [r7, #4]
 800bb60:	4613      	mov	r3, r2
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	4413      	add	r3, r2
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	440b      	add	r3, r1
 800bb6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb6e:	881b      	ldrh	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d104      	bne.n	800bb7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 fbc7 	bl	800c30a <USBD_CtlError>
                  break;
 800bb7c:	e041      	b.n	800bc02 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	da0b      	bge.n	800bb9e <USBD_StdEPReq+0x2b2>
 800bb86:	7bbb      	ldrb	r3, [r7, #14]
 800bb88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	4413      	add	r3, r2
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	3310      	adds	r3, #16
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	4413      	add	r3, r2
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	e00b      	b.n	800bbb6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb9e:	7bbb      	ldrb	r3, [r7, #14]
 800bba0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bba4:	4613      	mov	r3, r2
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	4413      	add	r3, r2
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bbb8:	7bbb      	ldrb	r3, [r7, #14]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d002      	beq.n	800bbc4 <USBD_StdEPReq+0x2d8>
 800bbbe:	7bbb      	ldrb	r3, [r7, #14]
 800bbc0:	2b80      	cmp	r3, #128	@ 0x80
 800bbc2:	d103      	bne.n	800bbcc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	601a      	str	r2, [r3, #0]
 800bbca:	e00e      	b.n	800bbea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bbcc:	7bbb      	ldrb	r3, [r7, #14]
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f004 ff13 	bl	80109fc <USBD_LL_IsStallEP>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d003      	beq.n	800bbe4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	601a      	str	r2, [r3, #0]
 800bbe2:	e002      	b.n	800bbea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	2202      	movs	r2, #2
 800bbee:	4619      	mov	r1, r3
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 fc07 	bl	800c404 <USBD_CtlSendData>
              break;
 800bbf6:	e004      	b.n	800bc02 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bbf8:	6839      	ldr	r1, [r7, #0]
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fb85 	bl	800c30a <USBD_CtlError>
              break;
 800bc00:	bf00      	nop
          }
          break;
 800bc02:	e004      	b.n	800bc0e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fb7f 	bl	800c30a <USBD_CtlError>
          break;
 800bc0c:	bf00      	nop
      }
      break;
 800bc0e:	e005      	b.n	800bc1c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bc10:	6839      	ldr	r1, [r7, #0]
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 fb79 	bl	800c30a <USBD_CtlError>
      break;
 800bc18:	e000      	b.n	800bc1c <USBD_StdEPReq+0x330>
      break;
 800bc1a:	bf00      	nop
  }

  return ret;
 800bc1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
	...

0800bc28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc32:	2300      	movs	r3, #0
 800bc34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc36:	2300      	movs	r3, #0
 800bc38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	885b      	ldrh	r3, [r3, #2]
 800bc42:	0a1b      	lsrs	r3, r3, #8
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	3b01      	subs	r3, #1
 800bc48:	2b0e      	cmp	r3, #14
 800bc4a:	f200 8152 	bhi.w	800bef2 <USBD_GetDescriptor+0x2ca>
 800bc4e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc54 <USBD_GetDescriptor+0x2c>)
 800bc50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc54:	0800bcc5 	.word	0x0800bcc5
 800bc58:	0800bcdd 	.word	0x0800bcdd
 800bc5c:	0800bd1d 	.word	0x0800bd1d
 800bc60:	0800bef3 	.word	0x0800bef3
 800bc64:	0800bef3 	.word	0x0800bef3
 800bc68:	0800be93 	.word	0x0800be93
 800bc6c:	0800bebf 	.word	0x0800bebf
 800bc70:	0800bef3 	.word	0x0800bef3
 800bc74:	0800bef3 	.word	0x0800bef3
 800bc78:	0800bef3 	.word	0x0800bef3
 800bc7c:	0800bef3 	.word	0x0800bef3
 800bc80:	0800bef3 	.word	0x0800bef3
 800bc84:	0800bef3 	.word	0x0800bef3
 800bc88:	0800bef3 	.word	0x0800bef3
 800bc8c:	0800bc91 	.word	0x0800bc91
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc96:	69db      	ldr	r3, [r3, #28]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00b      	beq.n	800bcb4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bca2:	69db      	ldr	r3, [r3, #28]
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	7c12      	ldrb	r2, [r2, #16]
 800bca8:	f107 0108 	add.w	r1, r7, #8
 800bcac:	4610      	mov	r0, r2
 800bcae:	4798      	blx	r3
 800bcb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcb2:	e126      	b.n	800bf02 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bcb4:	6839      	ldr	r1, [r7, #0]
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fb27 	bl	800c30a <USBD_CtlError>
        err++;
 800bcbc:	7afb      	ldrb	r3, [r7, #11]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	72fb      	strb	r3, [r7, #11]
      break;
 800bcc2:	e11e      	b.n	800bf02 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	7c12      	ldrb	r2, [r2, #16]
 800bcd0:	f107 0108 	add.w	r1, r7, #8
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	4798      	blx	r3
 800bcd8:	60f8      	str	r0, [r7, #12]
      break;
 800bcda:	e112      	b.n	800bf02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	7c1b      	ldrb	r3, [r3, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10d      	bne.n	800bd00 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcec:	f107 0208 	add.w	r2, r7, #8
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	4798      	blx	r3
 800bcf4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	2202      	movs	r2, #2
 800bcfc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bcfe:	e100      	b.n	800bf02 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd08:	f107 0208 	add.w	r2, r7, #8
 800bd0c:	4610      	mov	r0, r2
 800bd0e:	4798      	blx	r3
 800bd10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	3301      	adds	r3, #1
 800bd16:	2202      	movs	r2, #2
 800bd18:	701a      	strb	r2, [r3, #0]
      break;
 800bd1a:	e0f2      	b.n	800bf02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	885b      	ldrh	r3, [r3, #2]
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	2b05      	cmp	r3, #5
 800bd24:	f200 80ac 	bhi.w	800be80 <USBD_GetDescriptor+0x258>
 800bd28:	a201      	add	r2, pc, #4	@ (adr r2, 800bd30 <USBD_GetDescriptor+0x108>)
 800bd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2e:	bf00      	nop
 800bd30:	0800bd49 	.word	0x0800bd49
 800bd34:	0800bd7d 	.word	0x0800bd7d
 800bd38:	0800bdb1 	.word	0x0800bdb1
 800bd3c:	0800bde5 	.word	0x0800bde5
 800bd40:	0800be19 	.word	0x0800be19
 800bd44:	0800be4d 	.word	0x0800be4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00b      	beq.n	800bd6c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	7c12      	ldrb	r2, [r2, #16]
 800bd60:	f107 0108 	add.w	r1, r7, #8
 800bd64:	4610      	mov	r0, r2
 800bd66:	4798      	blx	r3
 800bd68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd6a:	e091      	b.n	800be90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd6c:	6839      	ldr	r1, [r7, #0]
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 facb 	bl	800c30a <USBD_CtlError>
            err++;
 800bd74:	7afb      	ldrb	r3, [r7, #11]
 800bd76:	3301      	adds	r3, #1
 800bd78:	72fb      	strb	r3, [r7, #11]
          break;
 800bd7a:	e089      	b.n	800be90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d00b      	beq.n	800bda0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	7c12      	ldrb	r2, [r2, #16]
 800bd94:	f107 0108 	add.w	r1, r7, #8
 800bd98:	4610      	mov	r0, r2
 800bd9a:	4798      	blx	r3
 800bd9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd9e:	e077      	b.n	800be90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bda0:	6839      	ldr	r1, [r7, #0]
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 fab1 	bl	800c30a <USBD_CtlError>
            err++;
 800bda8:	7afb      	ldrb	r3, [r7, #11]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	72fb      	strb	r3, [r7, #11]
          break;
 800bdae:	e06f      	b.n	800be90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00b      	beq.n	800bdd4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	7c12      	ldrb	r2, [r2, #16]
 800bdc8:	f107 0108 	add.w	r1, r7, #8
 800bdcc:	4610      	mov	r0, r2
 800bdce:	4798      	blx	r3
 800bdd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdd2:	e05d      	b.n	800be90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdd4:	6839      	ldr	r1, [r7, #0]
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 fa97 	bl	800c30a <USBD_CtlError>
            err++;
 800bddc:	7afb      	ldrb	r3, [r7, #11]
 800bdde:	3301      	adds	r3, #1
 800bde0:	72fb      	strb	r3, [r7, #11]
          break;
 800bde2:	e055      	b.n	800be90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdea:	691b      	ldr	r3, [r3, #16]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d00b      	beq.n	800be08 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	7c12      	ldrb	r2, [r2, #16]
 800bdfc:	f107 0108 	add.w	r1, r7, #8
 800be00:	4610      	mov	r0, r2
 800be02:	4798      	blx	r3
 800be04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be06:	e043      	b.n	800be90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fa7d 	bl	800c30a <USBD_CtlError>
            err++;
 800be10:	7afb      	ldrb	r3, [r7, #11]
 800be12:	3301      	adds	r3, #1
 800be14:	72fb      	strb	r3, [r7, #11]
          break;
 800be16:	e03b      	b.n	800be90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be1e:	695b      	ldr	r3, [r3, #20]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00b      	beq.n	800be3c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be2a:	695b      	ldr	r3, [r3, #20]
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	7c12      	ldrb	r2, [r2, #16]
 800be30:	f107 0108 	add.w	r1, r7, #8
 800be34:	4610      	mov	r0, r2
 800be36:	4798      	blx	r3
 800be38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be3a:	e029      	b.n	800be90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fa63 	bl	800c30a <USBD_CtlError>
            err++;
 800be44:	7afb      	ldrb	r3, [r7, #11]
 800be46:	3301      	adds	r3, #1
 800be48:	72fb      	strb	r3, [r7, #11]
          break;
 800be4a:	e021      	b.n	800be90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00b      	beq.n	800be70 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be5e:	699b      	ldr	r3, [r3, #24]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	7c12      	ldrb	r2, [r2, #16]
 800be64:	f107 0108 	add.w	r1, r7, #8
 800be68:	4610      	mov	r0, r2
 800be6a:	4798      	blx	r3
 800be6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be6e:	e00f      	b.n	800be90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fa49 	bl	800c30a <USBD_CtlError>
            err++;
 800be78:	7afb      	ldrb	r3, [r7, #11]
 800be7a:	3301      	adds	r3, #1
 800be7c:	72fb      	strb	r3, [r7, #11]
          break;
 800be7e:	e007      	b.n	800be90 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fa41 	bl	800c30a <USBD_CtlError>
          err++;
 800be88:	7afb      	ldrb	r3, [r7, #11]
 800be8a:	3301      	adds	r3, #1
 800be8c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800be8e:	bf00      	nop
      }
      break;
 800be90:	e037      	b.n	800bf02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	7c1b      	ldrb	r3, [r3, #16]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d109      	bne.n	800beae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bea2:	f107 0208 	add.w	r2, r7, #8
 800bea6:	4610      	mov	r0, r2
 800bea8:	4798      	blx	r3
 800beaa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800beac:	e029      	b.n	800bf02 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800beae:	6839      	ldr	r1, [r7, #0]
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 fa2a 	bl	800c30a <USBD_CtlError>
        err++;
 800beb6:	7afb      	ldrb	r3, [r7, #11]
 800beb8:	3301      	adds	r3, #1
 800beba:	72fb      	strb	r3, [r7, #11]
      break;
 800bebc:	e021      	b.n	800bf02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	7c1b      	ldrb	r3, [r3, #16]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d10d      	bne.n	800bee2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800becc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bece:	f107 0208 	add.w	r2, r7, #8
 800bed2:	4610      	mov	r0, r2
 800bed4:	4798      	blx	r3
 800bed6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	3301      	adds	r3, #1
 800bedc:	2207      	movs	r2, #7
 800bede:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bee0:	e00f      	b.n	800bf02 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bee2:	6839      	ldr	r1, [r7, #0]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fa10 	bl	800c30a <USBD_CtlError>
        err++;
 800beea:	7afb      	ldrb	r3, [r7, #11]
 800beec:	3301      	adds	r3, #1
 800beee:	72fb      	strb	r3, [r7, #11]
      break;
 800bef0:	e007      	b.n	800bf02 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bef2:	6839      	ldr	r1, [r7, #0]
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 fa08 	bl	800c30a <USBD_CtlError>
      err++;
 800befa:	7afb      	ldrb	r3, [r7, #11]
 800befc:	3301      	adds	r3, #1
 800befe:	72fb      	strb	r3, [r7, #11]
      break;
 800bf00:	bf00      	nop
  }

  if (err != 0U)
 800bf02:	7afb      	ldrb	r3, [r7, #11]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d11e      	bne.n	800bf46 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	88db      	ldrh	r3, [r3, #6]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d016      	beq.n	800bf3e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bf10:	893b      	ldrh	r3, [r7, #8]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00e      	beq.n	800bf34 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	88da      	ldrh	r2, [r3, #6]
 800bf1a:	893b      	ldrh	r3, [r7, #8]
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	bf28      	it	cs
 800bf20:	4613      	movcs	r3, r2
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf26:	893b      	ldrh	r3, [r7, #8]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	68f9      	ldr	r1, [r7, #12]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 fa69 	bl	800c404 <USBD_CtlSendData>
 800bf32:	e009      	b.n	800bf48 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bf34:	6839      	ldr	r1, [r7, #0]
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 f9e7 	bl	800c30a <USBD_CtlError>
 800bf3c:	e004      	b.n	800bf48 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 faba 	bl	800c4b8 <USBD_CtlSendStatus>
 800bf44:	e000      	b.n	800bf48 <USBD_GetDescriptor+0x320>
    return;
 800bf46:	bf00      	nop
  }
}
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop

0800bf50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	889b      	ldrh	r3, [r3, #4]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d131      	bne.n	800bfc6 <USBD_SetAddress+0x76>
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	88db      	ldrh	r3, [r3, #6]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d12d      	bne.n	800bfc6 <USBD_SetAddress+0x76>
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	885b      	ldrh	r3, [r3, #2]
 800bf6e:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf70:	d829      	bhi.n	800bfc6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	885b      	ldrh	r3, [r3, #2]
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	2b03      	cmp	r3, #3
 800bf88:	d104      	bne.n	800bf94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bf8a:	6839      	ldr	r1, [r7, #0]
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 f9bc 	bl	800c30a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf92:	e01d      	b.n	800bfd0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	7bfa      	ldrb	r2, [r7, #15]
 800bf98:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf9c:	7bfb      	ldrb	r3, [r7, #15]
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f004 fd57 	bl	8010a54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 fa86 	bl	800c4b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bfac:	7bfb      	ldrb	r3, [r7, #15]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d004      	beq.n	800bfbc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2202      	movs	r2, #2
 800bfb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfba:	e009      	b.n	800bfd0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfc4:	e004      	b.n	800bfd0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bfc6:	6839      	ldr	r1, [r7, #0]
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f99e 	bl	800c30a <USBD_CtlError>
  }
}
 800bfce:	bf00      	nop
 800bfd0:	bf00      	nop
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	885b      	ldrh	r3, [r3, #2]
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	4b4e      	ldr	r3, [pc, #312]	@ (800c128 <USBD_SetConfig+0x150>)
 800bfee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bff0:	4b4d      	ldr	r3, [pc, #308]	@ (800c128 <USBD_SetConfig+0x150>)
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d905      	bls.n	800c004 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bff8:	6839      	ldr	r1, [r7, #0]
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 f985 	bl	800c30a <USBD_CtlError>
    return USBD_FAIL;
 800c000:	2303      	movs	r3, #3
 800c002:	e08c      	b.n	800c11e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	2b02      	cmp	r3, #2
 800c00e:	d002      	beq.n	800c016 <USBD_SetConfig+0x3e>
 800c010:	2b03      	cmp	r3, #3
 800c012:	d029      	beq.n	800c068 <USBD_SetConfig+0x90>
 800c014:	e075      	b.n	800c102 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c016:	4b44      	ldr	r3, [pc, #272]	@ (800c128 <USBD_SetConfig+0x150>)
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d020      	beq.n	800c060 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c01e:	4b42      	ldr	r3, [pc, #264]	@ (800c128 <USBD_SetConfig+0x150>)
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	461a      	mov	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c028:	4b3f      	ldr	r3, [pc, #252]	@ (800c128 <USBD_SetConfig+0x150>)
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	4619      	mov	r1, r3
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7ff f84b 	bl	800b0ca <USBD_SetClassConfig>
 800c034:	4603      	mov	r3, r0
 800c036:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c038:	7bfb      	ldrb	r3, [r7, #15]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d008      	beq.n	800c050 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c03e:	6839      	ldr	r1, [r7, #0]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 f962 	bl	800c30a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2202      	movs	r2, #2
 800c04a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c04e:	e065      	b.n	800c11c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 fa31 	bl	800c4b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2203      	movs	r2, #3
 800c05a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c05e:	e05d      	b.n	800c11c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fa29 	bl	800c4b8 <USBD_CtlSendStatus>
      break;
 800c066:	e059      	b.n	800c11c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c068:	4b2f      	ldr	r3, [pc, #188]	@ (800c128 <USBD_SetConfig+0x150>)
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d112      	bne.n	800c096 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2202      	movs	r2, #2
 800c074:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c078:	4b2b      	ldr	r3, [pc, #172]	@ (800c128 <USBD_SetConfig+0x150>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	461a      	mov	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c082:	4b29      	ldr	r3, [pc, #164]	@ (800c128 <USBD_SetConfig+0x150>)
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	4619      	mov	r1, r3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f7ff f83a 	bl	800b102 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 fa12 	bl	800c4b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c094:	e042      	b.n	800c11c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c096:	4b24      	ldr	r3, [pc, #144]	@ (800c128 <USBD_SetConfig+0x150>)
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	461a      	mov	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d02a      	beq.n	800c0fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f7ff f828 	bl	800b102 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c0b2:	4b1d      	ldr	r3, [pc, #116]	@ (800c128 <USBD_SetConfig+0x150>)
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0bc:	4b1a      	ldr	r3, [pc, #104]	@ (800c128 <USBD_SetConfig+0x150>)
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f7ff f801 	bl	800b0ca <USBD_SetClassConfig>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c0cc:	7bfb      	ldrb	r3, [r7, #15]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00f      	beq.n	800c0f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f918 	bl	800c30a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7ff f80d 	bl	800b102 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2202      	movs	r2, #2
 800c0ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c0f0:	e014      	b.n	800c11c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f9e0 	bl	800c4b8 <USBD_CtlSendStatus>
      break;
 800c0f8:	e010      	b.n	800c11c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 f9dc 	bl	800c4b8 <USBD_CtlSendStatus>
      break;
 800c100:	e00c      	b.n	800c11c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 f900 	bl	800c30a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c10a:	4b07      	ldr	r3, [pc, #28]	@ (800c128 <USBD_SetConfig+0x150>)
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	4619      	mov	r1, r3
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f7fe fff6 	bl	800b102 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c116:	2303      	movs	r3, #3
 800c118:	73fb      	strb	r3, [r7, #15]
      break;
 800c11a:	bf00      	nop
  }

  return ret;
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	200003e0 	.word	0x200003e0

0800c12c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	88db      	ldrh	r3, [r3, #6]
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d004      	beq.n	800c148 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 f8e2 	bl	800c30a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c146:	e023      	b.n	800c190 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	2b02      	cmp	r3, #2
 800c152:	dc02      	bgt.n	800c15a <USBD_GetConfig+0x2e>
 800c154:	2b00      	cmp	r3, #0
 800c156:	dc03      	bgt.n	800c160 <USBD_GetConfig+0x34>
 800c158:	e015      	b.n	800c186 <USBD_GetConfig+0x5a>
 800c15a:	2b03      	cmp	r3, #3
 800c15c:	d00b      	beq.n	800c176 <USBD_GetConfig+0x4a>
 800c15e:	e012      	b.n	800c186 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	3308      	adds	r3, #8
 800c16a:	2201      	movs	r2, #1
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 f948 	bl	800c404 <USBD_CtlSendData>
        break;
 800c174:	e00c      	b.n	800c190 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	3304      	adds	r3, #4
 800c17a:	2201      	movs	r2, #1
 800c17c:	4619      	mov	r1, r3
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f940 	bl	800c404 <USBD_CtlSendData>
        break;
 800c184:	e004      	b.n	800c190 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 f8be 	bl	800c30a <USBD_CtlError>
        break;
 800c18e:	bf00      	nop
}
 800c190:	bf00      	nop
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	2b02      	cmp	r3, #2
 800c1ae:	d81e      	bhi.n	800c1ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	88db      	ldrh	r3, [r3, #6]
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d004      	beq.n	800c1c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c1b8:	6839      	ldr	r1, [r7, #0]
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f8a5 	bl	800c30a <USBD_CtlError>
        break;
 800c1c0:	e01a      	b.n	800c1f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d005      	beq.n	800c1de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	f043 0202 	orr.w	r2, r3, #2
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	330c      	adds	r3, #12
 800c1e2:	2202      	movs	r2, #2
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 f90c 	bl	800c404 <USBD_CtlSendData>
      break;
 800c1ec:	e004      	b.n	800c1f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c1ee:	6839      	ldr	r1, [r7, #0]
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 f88a 	bl	800c30a <USBD_CtlError>
      break;
 800c1f6:	bf00      	nop
  }
}
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	885b      	ldrh	r3, [r3, #2]
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d107      	bne.n	800c222 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2201      	movs	r2, #1
 800c216:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 f94c 	bl	800c4b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c220:	e013      	b.n	800c24a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	885b      	ldrh	r3, [r3, #2]
 800c226:	2b02      	cmp	r3, #2
 800c228:	d10b      	bne.n	800c242 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	889b      	ldrh	r3, [r3, #4]
 800c22e:	0a1b      	lsrs	r3, r3, #8
 800c230:	b29b      	uxth	r3, r3
 800c232:	b2da      	uxtb	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 f93c 	bl	800c4b8 <USBD_CtlSendStatus>
}
 800c240:	e003      	b.n	800c24a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c242:	6839      	ldr	r1, [r7, #0]
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f860 	bl	800c30a <USBD_CtlError>
}
 800c24a:	bf00      	nop
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b082      	sub	sp, #8
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c262:	b2db      	uxtb	r3, r3
 800c264:	3b01      	subs	r3, #1
 800c266:	2b02      	cmp	r3, #2
 800c268:	d80b      	bhi.n	800c282 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	885b      	ldrh	r3, [r3, #2]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d10c      	bne.n	800c28c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 f91c 	bl	800c4b8 <USBD_CtlSendStatus>
      }
      break;
 800c280:	e004      	b.n	800c28c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c282:	6839      	ldr	r1, [r7, #0]
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 f840 	bl	800c30a <USBD_CtlError>
      break;
 800c28a:	e000      	b.n	800c28e <USBD_ClrFeature+0x3c>
      break;
 800c28c:	bf00      	nop
  }
}
 800c28e:	bf00      	nop
 800c290:	3708      	adds	r7, #8
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c296:	b580      	push	{r7, lr}
 800c298:	b084      	sub	sp, #16
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
 800c29e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	781a      	ldrb	r2, [r3, #0]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	781a      	ldrb	r2, [r3, #0]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f7ff fa16 	bl	800b6f2 <SWAPBYTE>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f7ff fa09 	bl	800b6f2 <SWAPBYTE>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	f7ff f9fc 	bl	800b6f2 <SWAPBYTE>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	80da      	strh	r2, [r3, #6]
}
 800c302:	bf00      	nop
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b082      	sub	sp, #8
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
 800c312:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c314:	2180      	movs	r1, #128	@ 0x80
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f004 fb32 	bl	8010980 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c31c:	2100      	movs	r1, #0
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f004 fb2e 	bl	8010980 <USBD_LL_StallEP>
}
 800c324:	bf00      	nop
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b086      	sub	sp, #24
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c338:	2300      	movs	r3, #0
 800c33a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d042      	beq.n	800c3c8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c346:	6938      	ldr	r0, [r7, #16]
 800c348:	f000 f842 	bl	800c3d0 <USBD_GetLen>
 800c34c:	4603      	mov	r3, r0
 800c34e:	3301      	adds	r3, #1
 800c350:	005b      	lsls	r3, r3, #1
 800c352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c356:	d808      	bhi.n	800c36a <USBD_GetString+0x3e>
 800c358:	6938      	ldr	r0, [r7, #16]
 800c35a:	f000 f839 	bl	800c3d0 <USBD_GetLen>
 800c35e:	4603      	mov	r3, r0
 800c360:	3301      	adds	r3, #1
 800c362:	b29b      	uxth	r3, r3
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	b29a      	uxth	r2, r3
 800c368:	e001      	b.n	800c36e <USBD_GetString+0x42>
 800c36a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c372:	7dfb      	ldrb	r3, [r7, #23]
 800c374:	68ba      	ldr	r2, [r7, #8]
 800c376:	4413      	add	r3, r2
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	7812      	ldrb	r2, [r2, #0]
 800c37c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c37e:	7dfb      	ldrb	r3, [r7, #23]
 800c380:	3301      	adds	r3, #1
 800c382:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c384:	7dfb      	ldrb	r3, [r7, #23]
 800c386:	68ba      	ldr	r2, [r7, #8]
 800c388:	4413      	add	r3, r2
 800c38a:	2203      	movs	r2, #3
 800c38c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c38e:	7dfb      	ldrb	r3, [r7, #23]
 800c390:	3301      	adds	r3, #1
 800c392:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c394:	e013      	b.n	800c3be <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c396:	7dfb      	ldrb	r3, [r7, #23]
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	4413      	add	r3, r2
 800c39c:	693a      	ldr	r2, [r7, #16]
 800c39e:	7812      	ldrb	r2, [r2, #0]
 800c3a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	613b      	str	r3, [r7, #16]
    idx++;
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c3ae:	7dfb      	ldrb	r3, [r7, #23]
 800c3b0:	68ba      	ldr	r2, [r7, #8]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c3b8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1e7      	bne.n	800c396 <USBD_GetString+0x6a>
 800c3c6:	e000      	b.n	800c3ca <USBD_GetString+0x9e>
    return;
 800c3c8:	bf00      	nop
  }
}
 800c3ca:	3718      	adds	r7, #24
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c3e0:	e005      	b.n	800c3ee <USBD_GetLen+0x1e>
  {
    len++;
 800c3e2:	7bfb      	ldrb	r3, [r7, #15]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1f5      	bne.n	800c3e2 <USBD_GetLen+0x12>
  }

  return len;
 800c3f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2202      	movs	r2, #2
 800c414:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	68ba      	ldr	r2, [r7, #8]
 800c428:	2100      	movs	r1, #0
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	f004 fb31 	bl	8010a92 <USBD_LL_Transmit>

  return USBD_OK;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b084      	sub	sp, #16
 800c43e:	af00      	add	r7, sp, #0
 800c440:	60f8      	str	r0, [r7, #12]
 800c442:	60b9      	str	r1, [r7, #8]
 800c444:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	68ba      	ldr	r2, [r7, #8]
 800c44a:	2100      	movs	r1, #0
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f004 fb20 	bl	8010a92 <USBD_LL_Transmit>

  return USBD_OK;
 800c452:	2300      	movs	r3, #0
}
 800c454:	4618      	mov	r0, r3
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2203      	movs	r2, #3
 800c46c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	2100      	movs	r1, #0
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	f004 fb24 	bl	8010ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b084      	sub	sp, #16
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	60f8      	str	r0, [r7, #12]
 800c49e:	60b9      	str	r1, [r7, #8]
 800c4a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	68ba      	ldr	r2, [r7, #8]
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f004 fb13 	bl	8010ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3710      	adds	r7, #16
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2204      	movs	r2, #4
 800c4c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f004 fadf 	bl	8010a92 <USBD_LL_Transmit>

  return USBD_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b082      	sub	sp, #8
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2205      	movs	r2, #5
 800c4ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	2100      	movs	r1, #0
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f004 faed 	bl	8010ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <__NVIC_SetPriority>:
{
 800c504:	b480      	push	{r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	4603      	mov	r3, r0
 800c50c:	6039      	str	r1, [r7, #0]
 800c50e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c514:	2b00      	cmp	r3, #0
 800c516:	db0a      	blt.n	800c52e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	b2da      	uxtb	r2, r3
 800c51c:	490c      	ldr	r1, [pc, #48]	@ (800c550 <__NVIC_SetPriority+0x4c>)
 800c51e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c522:	0112      	lsls	r2, r2, #4
 800c524:	b2d2      	uxtb	r2, r2
 800c526:	440b      	add	r3, r1
 800c528:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c52c:	e00a      	b.n	800c544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	b2da      	uxtb	r2, r3
 800c532:	4908      	ldr	r1, [pc, #32]	@ (800c554 <__NVIC_SetPriority+0x50>)
 800c534:	79fb      	ldrb	r3, [r7, #7]
 800c536:	f003 030f 	and.w	r3, r3, #15
 800c53a:	3b04      	subs	r3, #4
 800c53c:	0112      	lsls	r2, r2, #4
 800c53e:	b2d2      	uxtb	r2, r2
 800c540:	440b      	add	r3, r1
 800c542:	761a      	strb	r2, [r3, #24]
}
 800c544:	bf00      	nop
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr
 800c550:	e000e100 	.word	0xe000e100
 800c554:	e000ed00 	.word	0xe000ed00

0800c558 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c558:	b580      	push	{r7, lr}
 800c55a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c55c:	4b05      	ldr	r3, [pc, #20]	@ (800c574 <SysTick_Handler+0x1c>)
 800c55e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c560:	f002 fab0 	bl	800eac4 <xTaskGetSchedulerState>
 800c564:	4603      	mov	r3, r0
 800c566:	2b01      	cmp	r3, #1
 800c568:	d001      	beq.n	800c56e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c56a:	f003 fbad 	bl	800fcc8 <xPortSysTickHandler>
  }
}
 800c56e:	bf00      	nop
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	e000e010 	.word	0xe000e010

0800c578 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c578:	b580      	push	{r7, lr}
 800c57a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c57c:	2100      	movs	r1, #0
 800c57e:	f06f 0004 	mvn.w	r0, #4
 800c582:	f7ff ffbf 	bl	800c504 <__NVIC_SetPriority>
#endif
}
 800c586:	bf00      	nop
 800c588:	bd80      	pop	{r7, pc}
	...

0800c58c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c592:	f3ef 8305 	mrs	r3, IPSR
 800c596:	603b      	str	r3, [r7, #0]
  return(result);
 800c598:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d003      	beq.n	800c5a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c59e:	f06f 0305 	mvn.w	r3, #5
 800c5a2:	607b      	str	r3, [r7, #4]
 800c5a4:	e00c      	b.n	800c5c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c5a6:	4b0a      	ldr	r3, [pc, #40]	@ (800c5d0 <osKernelInitialize+0x44>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d105      	bne.n	800c5ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c5ae:	4b08      	ldr	r3, [pc, #32]	@ (800c5d0 <osKernelInitialize+0x44>)
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	607b      	str	r3, [r7, #4]
 800c5b8:	e002      	b.n	800c5c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c5ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c5be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c5c0:	687b      	ldr	r3, [r7, #4]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	370c      	adds	r7, #12
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	200003e4 	.word	0x200003e4

0800c5d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5da:	f3ef 8305 	mrs	r3, IPSR
 800c5de:	603b      	str	r3, [r7, #0]
  return(result);
 800c5e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d003      	beq.n	800c5ee <osKernelStart+0x1a>
    stat = osErrorISR;
 800c5e6:	f06f 0305 	mvn.w	r3, #5
 800c5ea:	607b      	str	r3, [r7, #4]
 800c5ec:	e010      	b.n	800c610 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c5ee:	4b0b      	ldr	r3, [pc, #44]	@ (800c61c <osKernelStart+0x48>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d109      	bne.n	800c60a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c5f6:	f7ff ffbf 	bl	800c578 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c5fa:	4b08      	ldr	r3, [pc, #32]	@ (800c61c <osKernelStart+0x48>)
 800c5fc:	2202      	movs	r2, #2
 800c5fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c600:	f001 fdec 	bl	800e1dc <vTaskStartScheduler>
      stat = osOK;
 800c604:	2300      	movs	r3, #0
 800c606:	607b      	str	r3, [r7, #4]
 800c608:	e002      	b.n	800c610 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c60a:	f04f 33ff 	mov.w	r3, #4294967295
 800c60e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c610:	687b      	ldr	r3, [r7, #4]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	200003e4 	.word	0x200003e4

0800c620 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c620:	b580      	push	{r7, lr}
 800c622:	b08e      	sub	sp, #56	@ 0x38
 800c624:	af04      	add	r7, sp, #16
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c62c:	2300      	movs	r3, #0
 800c62e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c630:	f3ef 8305 	mrs	r3, IPSR
 800c634:	617b      	str	r3, [r7, #20]
  return(result);
 800c636:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d17e      	bne.n	800c73a <osThreadNew+0x11a>
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d07b      	beq.n	800c73a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c642:	2380      	movs	r3, #128	@ 0x80
 800c644:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c646:	2318      	movs	r3, #24
 800c648:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c64a:	2300      	movs	r3, #0
 800c64c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c64e:	f04f 33ff 	mov.w	r3, #4294967295
 800c652:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d045      	beq.n	800c6e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d002      	beq.n	800c668 <osThreadNew+0x48>
        name = attr->name;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	699b      	ldr	r3, [r3, #24]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d002      	beq.n	800c676 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	699b      	ldr	r3, [r3, #24]
 800c674:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d008      	beq.n	800c68e <osThreadNew+0x6e>
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	2b38      	cmp	r3, #56	@ 0x38
 800c680:	d805      	bhi.n	800c68e <osThreadNew+0x6e>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	f003 0301 	and.w	r3, r3, #1
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d001      	beq.n	800c692 <osThreadNew+0x72>
        return (NULL);
 800c68e:	2300      	movs	r3, #0
 800c690:	e054      	b.n	800c73c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	695b      	ldr	r3, [r3, #20]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d003      	beq.n	800c6a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	695b      	ldr	r3, [r3, #20]
 800c69e:	089b      	lsrs	r3, r3, #2
 800c6a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00e      	beq.n	800c6c8 <osThreadNew+0xa8>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	2ba7      	cmp	r3, #167	@ 0xa7
 800c6b0:	d90a      	bls.n	800c6c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d006      	beq.n	800c6c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	695b      	ldr	r3, [r3, #20]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d002      	beq.n	800c6c8 <osThreadNew+0xa8>
        mem = 1;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	61bb      	str	r3, [r7, #24]
 800c6c6:	e010      	b.n	800c6ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d10c      	bne.n	800c6ea <osThreadNew+0xca>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d108      	bne.n	800c6ea <osThreadNew+0xca>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d104      	bne.n	800c6ea <osThreadNew+0xca>
          mem = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	61bb      	str	r3, [r7, #24]
 800c6e4:	e001      	b.n	800c6ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d110      	bne.n	800c712 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c6f8:	9202      	str	r2, [sp, #8]
 800c6fa:	9301      	str	r3, [sp, #4]
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	6a3a      	ldr	r2, [r7, #32]
 800c704:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f001 fbaa 	bl	800de60 <xTaskCreateStatic>
 800c70c:	4603      	mov	r3, r0
 800c70e:	613b      	str	r3, [r7, #16]
 800c710:	e013      	b.n	800c73a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d110      	bne.n	800c73a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c718:	6a3b      	ldr	r3, [r7, #32]
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	f107 0310 	add.w	r3, r7, #16
 800c720:	9301      	str	r3, [sp, #4]
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	9300      	str	r3, [sp, #0]
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c72a:	68f8      	ldr	r0, [r7, #12]
 800c72c:	f001 fbf8 	bl	800df20 <xTaskCreate>
 800c730:	4603      	mov	r3, r0
 800c732:	2b01      	cmp	r3, #1
 800c734:	d001      	beq.n	800c73a <osThreadNew+0x11a>
            hTask = NULL;
 800c736:	2300      	movs	r3, #0
 800c738:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c73a:	693b      	ldr	r3, [r7, #16]
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3728      	adds	r7, #40	@ 0x28
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800c744:	b580      	push	{r7, lr}
 800c746:	b088      	sub	sp, #32
 800c748:	af02      	add	r7, sp, #8
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d002      	beq.n	800c75e <osThreadFlagsSet+0x1a>
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	da03      	bge.n	800c766 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800c75e:	f06f 0303 	mvn.w	r3, #3
 800c762:	60fb      	str	r3, [r7, #12]
 800c764:	e035      	b.n	800c7d2 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800c766:	f04f 33ff 	mov.w	r3, #4294967295
 800c76a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c76c:	f3ef 8305 	mrs	r3, IPSR
 800c770:	613b      	str	r3, [r7, #16]
  return(result);
 800c772:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800c774:	2b00      	cmp	r3, #0
 800c776:	d01f      	beq.n	800c7b8 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800c778:	2300      	movs	r3, #0
 800c77a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800c77c:	f107 0308 	add.w	r3, r7, #8
 800c780:	9300      	str	r3, [sp, #0]
 800c782:	2300      	movs	r3, #0
 800c784:	2201      	movs	r2, #1
 800c786:	6839      	ldr	r1, [r7, #0]
 800c788:	6978      	ldr	r0, [r7, #20]
 800c78a:	f002 fc4b 	bl	800f024 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800c78e:	f107 030c 	add.w	r3, r7, #12
 800c792:	2200      	movs	r2, #0
 800c794:	9200      	str	r2, [sp, #0]
 800c796:	2200      	movs	r2, #0
 800c798:	2100      	movs	r1, #0
 800c79a:	6978      	ldr	r0, [r7, #20]
 800c79c:	f002 fc42 	bl	800f024 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d015      	beq.n	800c7d2 <osThreadFlagsSet+0x8e>
 800c7a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c7dc <osThreadFlagsSet+0x98>)
 800c7a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7ac:	601a      	str	r2, [r3, #0]
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	e00c      	b.n	800c7d2 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	6839      	ldr	r1, [r7, #0]
 800c7be:	6978      	ldr	r0, [r7, #20]
 800c7c0:	f002 fb6e 	bl	800eea0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800c7c4:	f107 030c 	add.w	r3, r7, #12
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	6978      	ldr	r0, [r7, #20]
 800c7ce:	f002 fb67 	bl	800eea0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3718      	adds	r7, #24
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	e000ed04 	.word	0xe000ed04

0800c7e0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b08c      	sub	sp, #48	@ 0x30
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7ec:	f3ef 8305 	mrs	r3, IPSR
 800c7f0:	617b      	str	r3, [r7, #20]
  return(result);
 800c7f2:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d003      	beq.n	800c800 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800c7f8:	f06f 0305 	mvn.w	r3, #5
 800c7fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7fe:	e06b      	b.n	800c8d8 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2b00      	cmp	r3, #0
 800c804:	da03      	bge.n	800c80e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800c806:	f06f 0303 	mvn.w	r3, #3
 800c80a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c80c:	e064      	b.n	800c8d8 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	f003 0302 	and.w	r3, r3, #2
 800c814:	2b00      	cmp	r3, #0
 800c816:	d002      	beq.n	800c81e <osThreadFlagsWait+0x3e>
      clear = 0U;
 800c818:	2300      	movs	r3, #0
 800c81a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c81c:	e001      	b.n	800c822 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800c822:	2300      	movs	r3, #0
 800c824:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800c82a:	f001 fdf3 	bl	800e414 <xTaskGetTickCount>
 800c82e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800c830:	f107 0210 	add.w	r2, r7, #16
 800c834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c836:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c838:	2000      	movs	r0, #0
 800c83a:	f002 fad1 	bl	800ede0 <xTaskNotifyWait>
 800c83e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d137      	bne.n	800c8b6 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800c846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	4013      	ands	r3, r2
 800c84c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c852:	4313      	orrs	r3, r2
 800c854:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	f003 0301 	and.w	r3, r3, #1
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00c      	beq.n	800c87a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c864:	4013      	ands	r3, r2
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d032      	beq.n	800c8d2 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d10f      	bne.n	800c892 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800c872:	f06f 0302 	mvn.w	r3, #2
 800c876:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800c878:	e02e      	b.n	800c8d8 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c87e:	4013      	ands	r3, r2
 800c880:	2b00      	cmp	r3, #0
 800c882:	d128      	bne.n	800c8d6 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d103      	bne.n	800c892 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800c88a:	f06f 0302 	mvn.w	r3, #2
 800c88e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800c890:	e022      	b.n	800c8d8 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800c892:	f001 fdbf 	bl	800e414 <xTaskGetTickCount>
 800c896:	4602      	mov	r2, r0
 800c898:	6a3b      	ldr	r3, [r7, #32]
 800c89a:	1ad3      	subs	r3, r2, r3
 800c89c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800c89e:	69ba      	ldr	r2, [r7, #24]
 800c8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d902      	bls.n	800c8ac <osThreadFlagsWait+0xcc>
          tout  = 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8aa:	e00e      	b.n	800c8ca <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800c8ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8b4:	e009      	b.n	800c8ca <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d103      	bne.n	800c8c4 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800c8bc:	f06f 0302 	mvn.w	r3, #2
 800c8c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8c2:	e002      	b.n	800c8ca <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800c8c4:	f06f 0301 	mvn.w	r3, #1
 800c8c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1af      	bne.n	800c830 <osThreadFlagsWait+0x50>
 800c8d0:	e002      	b.n	800c8d8 <osThreadFlagsWait+0xf8>
            break;
 800c8d2:	bf00      	nop
 800c8d4:	e000      	b.n	800c8d8 <osThreadFlagsWait+0xf8>
            break;
 800c8d6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800c8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3730      	adds	r7, #48	@ 0x30
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b088      	sub	sp, #32
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8ee:	f3ef 8305 	mrs	r3, IPSR
 800c8f2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c8f4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d174      	bne.n	800c9e4 <osMutexNew+0x102>
    if (attr != NULL) {
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d003      	beq.n	800c908 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	61bb      	str	r3, [r7, #24]
 800c906:	e001      	b.n	800c90c <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c908:	2300      	movs	r3, #0
 800c90a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c90c:	69bb      	ldr	r3, [r7, #24]
 800c90e:	f003 0301 	and.w	r3, r3, #1
 800c912:	2b00      	cmp	r3, #0
 800c914:	d002      	beq.n	800c91c <osMutexNew+0x3a>
      rmtx = 1U;
 800c916:	2301      	movs	r3, #1
 800c918:	617b      	str	r3, [r7, #20]
 800c91a:	e001      	b.n	800c920 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c91c:	2300      	movs	r3, #0
 800c91e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	f003 0308 	and.w	r3, r3, #8
 800c926:	2b00      	cmp	r3, #0
 800c928:	d15c      	bne.n	800c9e4 <osMutexNew+0x102>
      mem = -1;
 800c92a:	f04f 33ff 	mov.w	r3, #4294967295
 800c92e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d015      	beq.n	800c962 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d006      	beq.n	800c94c <osMutexNew+0x6a>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	2b4f      	cmp	r3, #79	@ 0x4f
 800c944:	d902      	bls.n	800c94c <osMutexNew+0x6a>
          mem = 1;
 800c946:	2301      	movs	r3, #1
 800c948:	613b      	str	r3, [r7, #16]
 800c94a:	e00c      	b.n	800c966 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	689b      	ldr	r3, [r3, #8]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d108      	bne.n	800c966 <osMutexNew+0x84>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d104      	bne.n	800c966 <osMutexNew+0x84>
            mem = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	613b      	str	r3, [r7, #16]
 800c960:	e001      	b.n	800c966 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c962:	2300      	movs	r3, #0
 800c964:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d112      	bne.n	800c992 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d007      	beq.n	800c982 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	4619      	mov	r1, r3
 800c978:	2004      	movs	r0, #4
 800c97a:	f000 fc50 	bl	800d21e <xQueueCreateMutexStatic>
 800c97e:	61f8      	str	r0, [r7, #28]
 800c980:	e016      	b.n	800c9b0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	4619      	mov	r1, r3
 800c988:	2001      	movs	r0, #1
 800c98a:	f000 fc48 	bl	800d21e <xQueueCreateMutexStatic>
 800c98e:	61f8      	str	r0, [r7, #28]
 800c990:	e00e      	b.n	800c9b0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10b      	bne.n	800c9b0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d004      	beq.n	800c9a8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c99e:	2004      	movs	r0, #4
 800c9a0:	f000 fc25 	bl	800d1ee <xQueueCreateMutex>
 800c9a4:	61f8      	str	r0, [r7, #28]
 800c9a6:	e003      	b.n	800c9b0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c9a8:	2001      	movs	r0, #1
 800c9aa:	f000 fc20 	bl	800d1ee <xQueueCreateMutex>
 800c9ae:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00c      	beq.n	800c9d0 <osMutexNew+0xee>
        if (attr != NULL) {
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d003      	beq.n	800c9c4 <osMutexNew+0xe2>
          name = attr->name;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	60fb      	str	r3, [r7, #12]
 800c9c2:	e001      	b.n	800c9c8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c9c8:	68f9      	ldr	r1, [r7, #12]
 800c9ca:	69f8      	ldr	r0, [r7, #28]
 800c9cc:	f001 f9ea 	bl	800dda4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d006      	beq.n	800c9e4 <osMutexNew+0x102>
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d003      	beq.n	800c9e4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	f043 0301 	orr.w	r3, r3, #1
 800c9e2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c9e4:	69fb      	ldr	r3, [r7, #28]
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3720      	adds	r7, #32
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b086      	sub	sp, #24
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
 800c9f6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f023 0301 	bic.w	r3, r3, #1
 800c9fe:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f003 0301 	and.w	r3, r3, #1
 800ca06:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca0c:	f3ef 8305 	mrs	r3, IPSR
 800ca10:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca12:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d003      	beq.n	800ca20 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800ca18:	f06f 0305 	mvn.w	r3, #5
 800ca1c:	617b      	str	r3, [r7, #20]
 800ca1e:	e02c      	b.n	800ca7a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d103      	bne.n	800ca2e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800ca26:	f06f 0303 	mvn.w	r3, #3
 800ca2a:	617b      	str	r3, [r7, #20]
 800ca2c:	e025      	b.n	800ca7a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d011      	beq.n	800ca58 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ca34:	6839      	ldr	r1, [r7, #0]
 800ca36:	6938      	ldr	r0, [r7, #16]
 800ca38:	f000 fc41 	bl	800d2be <xQueueTakeMutexRecursive>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d01b      	beq.n	800ca7a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d003      	beq.n	800ca50 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ca48:	f06f 0301 	mvn.w	r3, #1
 800ca4c:	617b      	str	r3, [r7, #20]
 800ca4e:	e014      	b.n	800ca7a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ca50:	f06f 0302 	mvn.w	r3, #2
 800ca54:	617b      	str	r3, [r7, #20]
 800ca56:	e010      	b.n	800ca7a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ca58:	6839      	ldr	r1, [r7, #0]
 800ca5a:	6938      	ldr	r0, [r7, #16]
 800ca5c:	f000 fee8 	bl	800d830 <xQueueSemaphoreTake>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d009      	beq.n	800ca7a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d003      	beq.n	800ca74 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ca6c:	f06f 0301 	mvn.w	r3, #1
 800ca70:	617b      	str	r3, [r7, #20]
 800ca72:	e002      	b.n	800ca7a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ca74:	f06f 0302 	mvn.w	r3, #2
 800ca78:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ca7a:	697b      	ldr	r3, [r7, #20]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3718      	adds	r7, #24
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b086      	sub	sp, #24
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f023 0301 	bic.w	r3, r3, #1
 800ca92:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f003 0301 	and.w	r3, r3, #1
 800ca9a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800caa0:	f3ef 8305 	mrs	r3, IPSR
 800caa4:	60bb      	str	r3, [r7, #8]
  return(result);
 800caa6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d003      	beq.n	800cab4 <osMutexRelease+0x30>
    stat = osErrorISR;
 800caac:	f06f 0305 	mvn.w	r3, #5
 800cab0:	617b      	str	r3, [r7, #20]
 800cab2:	e01f      	b.n	800caf4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d103      	bne.n	800cac2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800caba:	f06f 0303 	mvn.w	r3, #3
 800cabe:	617b      	str	r3, [r7, #20]
 800cac0:	e018      	b.n	800caf4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d009      	beq.n	800cadc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cac8:	6938      	ldr	r0, [r7, #16]
 800caca:	f000 fbc3 	bl	800d254 <xQueueGiveMutexRecursive>
 800cace:	4603      	mov	r3, r0
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d00f      	beq.n	800caf4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cad4:	f06f 0302 	mvn.w	r3, #2
 800cad8:	617b      	str	r3, [r7, #20]
 800cada:	e00b      	b.n	800caf4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cadc:	2300      	movs	r3, #0
 800cade:	2200      	movs	r2, #0
 800cae0:	2100      	movs	r1, #0
 800cae2:	6938      	ldr	r0, [r7, #16]
 800cae4:	f000 fc22 	bl	800d32c <xQueueGenericSend>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b01      	cmp	r3, #1
 800caec:	d002      	beq.n	800caf4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800caee:	f06f 0302 	mvn.w	r3, #2
 800caf2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800caf4:	697b      	ldr	r3, [r7, #20]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3718      	adds	r7, #24
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b08a      	sub	sp, #40	@ 0x28
 800cb02:	af02      	add	r7, sp, #8
 800cb04:	60f8      	str	r0, [r7, #12]
 800cb06:	60b9      	str	r1, [r7, #8]
 800cb08:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb0e:	f3ef 8305 	mrs	r3, IPSR
 800cb12:	613b      	str	r3, [r7, #16]
  return(result);
 800cb14:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d15f      	bne.n	800cbda <osMessageQueueNew+0xdc>
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d05c      	beq.n	800cbda <osMessageQueueNew+0xdc>
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d059      	beq.n	800cbda <osMessageQueueNew+0xdc>
    mem = -1;
 800cb26:	f04f 33ff 	mov.w	r3, #4294967295
 800cb2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d029      	beq.n	800cb86 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d012      	beq.n	800cb60 <osMessageQueueNew+0x62>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	2b4f      	cmp	r3, #79	@ 0x4f
 800cb40:	d90e      	bls.n	800cb60 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00a      	beq.n	800cb60 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	695a      	ldr	r2, [r3, #20]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	68b9      	ldr	r1, [r7, #8]
 800cb52:	fb01 f303 	mul.w	r3, r1, r3
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d302      	bcc.n	800cb60 <osMessageQueueNew+0x62>
        mem = 1;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	61bb      	str	r3, [r7, #24]
 800cb5e:	e014      	b.n	800cb8a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d110      	bne.n	800cb8a <osMessageQueueNew+0x8c>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d10c      	bne.n	800cb8a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d108      	bne.n	800cb8a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	695b      	ldr	r3, [r3, #20]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d104      	bne.n	800cb8a <osMessageQueueNew+0x8c>
          mem = 0;
 800cb80:	2300      	movs	r3, #0
 800cb82:	61bb      	str	r3, [r7, #24]
 800cb84:	e001      	b.n	800cb8a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cb86:	2300      	movs	r3, #0
 800cb88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d10b      	bne.n	800cba8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	691a      	ldr	r2, [r3, #16]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	2100      	movs	r1, #0
 800cb9a:	9100      	str	r1, [sp, #0]
 800cb9c:	68b9      	ldr	r1, [r7, #8]
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	f000 fa30 	bl	800d004 <xQueueGenericCreateStatic>
 800cba4:	61f8      	str	r0, [r7, #28]
 800cba6:	e008      	b.n	800cbba <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d105      	bne.n	800cbba <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800cbae:	2200      	movs	r2, #0
 800cbb0:	68b9      	ldr	r1, [r7, #8]
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f000 faa3 	bl	800d0fe <xQueueGenericCreate>
 800cbb8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00c      	beq.n	800cbda <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d003      	beq.n	800cbce <osMessageQueueNew+0xd0>
        name = attr->name;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	617b      	str	r3, [r7, #20]
 800cbcc:	e001      	b.n	800cbd2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cbd2:	6979      	ldr	r1, [r7, #20]
 800cbd4:	69f8      	ldr	r0, [r7, #28]
 800cbd6:	f001 f8e5 	bl	800dda4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cbda:	69fb      	ldr	r3, [r7, #28]
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3720      	adds	r7, #32
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b088      	sub	sp, #32
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	603b      	str	r3, [r7, #0]
 800cbf0:	4613      	mov	r3, r2
 800cbf2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbfc:	f3ef 8305 	mrs	r3, IPSR
 800cc00:	617b      	str	r3, [r7, #20]
  return(result);
 800cc02:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d028      	beq.n	800cc5a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cc08:	69bb      	ldr	r3, [r7, #24]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d005      	beq.n	800cc1a <osMessageQueuePut+0x36>
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d002      	beq.n	800cc1a <osMessageQueuePut+0x36>
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d003      	beq.n	800cc22 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800cc1a:	f06f 0303 	mvn.w	r3, #3
 800cc1e:	61fb      	str	r3, [r7, #28]
 800cc20:	e038      	b.n	800cc94 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800cc22:	2300      	movs	r3, #0
 800cc24:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cc26:	f107 0210 	add.w	r2, r7, #16
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	68b9      	ldr	r1, [r7, #8]
 800cc2e:	69b8      	ldr	r0, [r7, #24]
 800cc30:	f000 fc7e 	bl	800d530 <xQueueGenericSendFromISR>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d003      	beq.n	800cc42 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800cc3a:	f06f 0302 	mvn.w	r3, #2
 800cc3e:	61fb      	str	r3, [r7, #28]
 800cc40:	e028      	b.n	800cc94 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d025      	beq.n	800cc94 <osMessageQueuePut+0xb0>
 800cc48:	4b15      	ldr	r3, [pc, #84]	@ (800cca0 <osMessageQueuePut+0xbc>)
 800cc4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc4e:	601a      	str	r2, [r3, #0]
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	f3bf 8f6f 	isb	sy
 800cc58:	e01c      	b.n	800cc94 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d002      	beq.n	800cc66 <osMessageQueuePut+0x82>
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d103      	bne.n	800cc6e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800cc66:	f06f 0303 	mvn.w	r3, #3
 800cc6a:	61fb      	str	r3, [r7, #28]
 800cc6c:	e012      	b.n	800cc94 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cc6e:	2300      	movs	r3, #0
 800cc70:	683a      	ldr	r2, [r7, #0]
 800cc72:	68b9      	ldr	r1, [r7, #8]
 800cc74:	69b8      	ldr	r0, [r7, #24]
 800cc76:	f000 fb59 	bl	800d32c <xQueueGenericSend>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d009      	beq.n	800cc94 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d003      	beq.n	800cc8e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cc86:	f06f 0301 	mvn.w	r3, #1
 800cc8a:	61fb      	str	r3, [r7, #28]
 800cc8c:	e002      	b.n	800cc94 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cc8e:	f06f 0302 	mvn.w	r3, #2
 800cc92:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cc94:	69fb      	ldr	r3, [r7, #28]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3720      	adds	r7, #32
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	e000ed04 	.word	0xe000ed04

0800cca4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b088      	sub	sp, #32
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
 800ccb0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccba:	f3ef 8305 	mrs	r3, IPSR
 800ccbe:	617b      	str	r3, [r7, #20]
  return(result);
 800ccc0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d028      	beq.n	800cd18 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d005      	beq.n	800ccd8 <osMessageQueueGet+0x34>
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d002      	beq.n	800ccd8 <osMessageQueueGet+0x34>
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d003      	beq.n	800cce0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ccd8:	f06f 0303 	mvn.w	r3, #3
 800ccdc:	61fb      	str	r3, [r7, #28]
 800ccde:	e037      	b.n	800cd50 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cce0:	2300      	movs	r3, #0
 800cce2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cce4:	f107 0310 	add.w	r3, r7, #16
 800cce8:	461a      	mov	r2, r3
 800ccea:	68b9      	ldr	r1, [r7, #8]
 800ccec:	69b8      	ldr	r0, [r7, #24]
 800ccee:	f000 feaf 	bl	800da50 <xQueueReceiveFromISR>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d003      	beq.n	800cd00 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ccf8:	f06f 0302 	mvn.w	r3, #2
 800ccfc:	61fb      	str	r3, [r7, #28]
 800ccfe:	e027      	b.n	800cd50 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d024      	beq.n	800cd50 <osMessageQueueGet+0xac>
 800cd06:	4b15      	ldr	r3, [pc, #84]	@ (800cd5c <osMessageQueueGet+0xb8>)
 800cd08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd0c:	601a      	str	r2, [r3, #0]
 800cd0e:	f3bf 8f4f 	dsb	sy
 800cd12:	f3bf 8f6f 	isb	sy
 800cd16:	e01b      	b.n	800cd50 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cd18:	69bb      	ldr	r3, [r7, #24]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <osMessageQueueGet+0x80>
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d103      	bne.n	800cd2c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cd24:	f06f 0303 	mvn.w	r3, #3
 800cd28:	61fb      	str	r3, [r7, #28]
 800cd2a:	e011      	b.n	800cd50 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cd2c:	683a      	ldr	r2, [r7, #0]
 800cd2e:	68b9      	ldr	r1, [r7, #8]
 800cd30:	69b8      	ldr	r0, [r7, #24]
 800cd32:	f000 fc9b 	bl	800d66c <xQueueReceive>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d009      	beq.n	800cd50 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d003      	beq.n	800cd4a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cd42:	f06f 0301 	mvn.w	r3, #1
 800cd46:	61fb      	str	r3, [r7, #28]
 800cd48:	e002      	b.n	800cd50 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cd4a:	f06f 0302 	mvn.w	r3, #2
 800cd4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cd50:	69fb      	ldr	r3, [r7, #28]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3720      	adds	r7, #32
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	e000ed04 	.word	0xe000ed04

0800cd60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cd60:	b480      	push	{r7}
 800cd62:	b085      	sub	sp, #20
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	4a07      	ldr	r2, [pc, #28]	@ (800cd8c <vApplicationGetIdleTaskMemory+0x2c>)
 800cd70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	4a06      	ldr	r2, [pc, #24]	@ (800cd90 <vApplicationGetIdleTaskMemory+0x30>)
 800cd76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2280      	movs	r2, #128	@ 0x80
 800cd7c:	601a      	str	r2, [r3, #0]
}
 800cd7e:	bf00      	nop
 800cd80:	3714      	adds	r7, #20
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr
 800cd8a:	bf00      	nop
 800cd8c:	200003e8 	.word	0x200003e8
 800cd90:	20000490 	.word	0x20000490

0800cd94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cd94:	b480      	push	{r7}
 800cd96:	b085      	sub	sp, #20
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	4a07      	ldr	r2, [pc, #28]	@ (800cdc0 <vApplicationGetTimerTaskMemory+0x2c>)
 800cda4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	4a06      	ldr	r2, [pc, #24]	@ (800cdc4 <vApplicationGetTimerTaskMemory+0x30>)
 800cdaa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cdb2:	601a      	str	r2, [r3, #0]
}
 800cdb4:	bf00      	nop
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr
 800cdc0:	20000690 	.word	0x20000690
 800cdc4:	20000738 	.word	0x20000738

0800cdc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b083      	sub	sp, #12
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f103 0208 	add.w	r2, r3, #8
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f04f 32ff 	mov.w	r2, #4294967295
 800cde0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f103 0208 	add.w	r2, r3, #8
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f103 0208 	add.w	r2, r3, #8
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cdfc:	bf00      	nop
 800cdfe:	370c      	adds	r7, #12
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ce16:	bf00      	nop
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ce22:	b480      	push	{r7}
 800ce24:	b085      	sub	sp, #20
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
 800ce2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	689a      	ldr	r2, [r3, #8]
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	683a      	ldr	r2, [r7, #0]
 800ce46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	683a      	ldr	r2, [r7, #0]
 800ce4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	1c5a      	adds	r2, r3, #1
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	601a      	str	r2, [r3, #0]
}
 800ce5e:	bf00      	nop
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ce6a:	b480      	push	{r7}
 800ce6c:	b085      	sub	sp, #20
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
 800ce72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce80:	d103      	bne.n	800ce8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	60fb      	str	r3, [r7, #12]
 800ce88:	e00c      	b.n	800cea4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	3308      	adds	r3, #8
 800ce8e:	60fb      	str	r3, [r7, #12]
 800ce90:	e002      	b.n	800ce98 <vListInsert+0x2e>
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	60fb      	str	r3, [r7, #12]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	68ba      	ldr	r2, [r7, #8]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d2f6      	bcs.n	800ce92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	685a      	ldr	r2, [r3, #4]
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	683a      	ldr	r2, [r7, #0]
 800ceb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	68fa      	ldr	r2, [r7, #12]
 800ceb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	683a      	ldr	r2, [r7, #0]
 800cebe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	1c5a      	adds	r2, r3, #1
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	601a      	str	r2, [r3, #0]
}
 800ced0:	bf00      	nop
 800ced2:	3714      	adds	r7, #20
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cedc:	b480      	push	{r7}
 800cede:	b085      	sub	sp, #20
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	691b      	ldr	r3, [r3, #16]
 800cee8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	6892      	ldr	r2, [r2, #8]
 800cef2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	689b      	ldr	r3, [r3, #8]
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	6852      	ldr	r2, [r2, #4]
 800cefc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d103      	bne.n	800cf10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	689a      	ldr	r2, [r3, #8]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	1e5a      	subs	r2, r3, #1
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3714      	adds	r7, #20
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr

0800cf30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d10b      	bne.n	800cf5c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cf44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf48:	f383 8811 	msr	BASEPRI, r3
 800cf4c:	f3bf 8f6f 	isb	sy
 800cf50:	f3bf 8f4f 	dsb	sy
 800cf54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cf56:	bf00      	nop
 800cf58:	bf00      	nop
 800cf5a:	e7fd      	b.n	800cf58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cf5c:	f002 fe24 	bl	800fba8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf68:	68f9      	ldr	r1, [r7, #12]
 800cf6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cf6c:	fb01 f303 	mul.w	r3, r1, r3
 800cf70:	441a      	add	r2, r3
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681a      	ldr	r2, [r3, #0]
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf8c:	3b01      	subs	r3, #1
 800cf8e:	68f9      	ldr	r1, [r7, #12]
 800cf90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cf92:	fb01 f303 	mul.w	r3, r1, r3
 800cf96:	441a      	add	r2, r3
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	22ff      	movs	r2, #255	@ 0xff
 800cfa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	22ff      	movs	r2, #255	@ 0xff
 800cfa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d114      	bne.n	800cfdc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	691b      	ldr	r3, [r3, #16]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d01a      	beq.n	800cff0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	3310      	adds	r3, #16
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f001 fbaa 	bl	800e718 <xTaskRemoveFromEventList>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d012      	beq.n	800cff0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cfca:	4b0d      	ldr	r3, [pc, #52]	@ (800d000 <xQueueGenericReset+0xd0>)
 800cfcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfd0:	601a      	str	r2, [r3, #0]
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	e009      	b.n	800cff0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	3310      	adds	r3, #16
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7ff fef1 	bl	800cdc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	3324      	adds	r3, #36	@ 0x24
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7ff feec 	bl	800cdc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cff0:	f002 fe0c 	bl	800fc0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cff4:	2301      	movs	r3, #1
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	e000ed04 	.word	0xe000ed04

0800d004 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d004:	b580      	push	{r7, lr}
 800d006:	b08e      	sub	sp, #56	@ 0x38
 800d008:	af02      	add	r7, sp, #8
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	607a      	str	r2, [r7, #4]
 800d010:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d10b      	bne.n	800d030 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d01c:	f383 8811 	msr	BASEPRI, r3
 800d020:	f3bf 8f6f 	isb	sy
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d02a:	bf00      	nop
 800d02c:	bf00      	nop
 800d02e:	e7fd      	b.n	800d02c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d10b      	bne.n	800d04e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d03a:	f383 8811 	msr	BASEPRI, r3
 800d03e:	f3bf 8f6f 	isb	sy
 800d042:	f3bf 8f4f 	dsb	sy
 800d046:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d048:	bf00      	nop
 800d04a:	bf00      	nop
 800d04c:	e7fd      	b.n	800d04a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d002      	beq.n	800d05a <xQueueGenericCreateStatic+0x56>
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d001      	beq.n	800d05e <xQueueGenericCreateStatic+0x5a>
 800d05a:	2301      	movs	r3, #1
 800d05c:	e000      	b.n	800d060 <xQueueGenericCreateStatic+0x5c>
 800d05e:	2300      	movs	r3, #0
 800d060:	2b00      	cmp	r3, #0
 800d062:	d10b      	bne.n	800d07c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d068:	f383 8811 	msr	BASEPRI, r3
 800d06c:	f3bf 8f6f 	isb	sy
 800d070:	f3bf 8f4f 	dsb	sy
 800d074:	623b      	str	r3, [r7, #32]
}
 800d076:	bf00      	nop
 800d078:	bf00      	nop
 800d07a:	e7fd      	b.n	800d078 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d102      	bne.n	800d088 <xQueueGenericCreateStatic+0x84>
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d101      	bne.n	800d08c <xQueueGenericCreateStatic+0x88>
 800d088:	2301      	movs	r3, #1
 800d08a:	e000      	b.n	800d08e <xQueueGenericCreateStatic+0x8a>
 800d08c:	2300      	movs	r3, #0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10b      	bne.n	800d0aa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d096:	f383 8811 	msr	BASEPRI, r3
 800d09a:	f3bf 8f6f 	isb	sy
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	61fb      	str	r3, [r7, #28]
}
 800d0a4:	bf00      	nop
 800d0a6:	bf00      	nop
 800d0a8:	e7fd      	b.n	800d0a6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d0aa:	2350      	movs	r3, #80	@ 0x50
 800d0ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	2b50      	cmp	r3, #80	@ 0x50
 800d0b2:	d00b      	beq.n	800d0cc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	61bb      	str	r3, [r7, #24]
}
 800d0c6:	bf00      	nop
 800d0c8:	bf00      	nop
 800d0ca:	e7fd      	b.n	800d0c8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d0cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d00d      	beq.n	800d0f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0da:	2201      	movs	r2, #1
 800d0dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d0e0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e6:	9300      	str	r3, [sp, #0]
 800d0e8:	4613      	mov	r3, r2
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	68b9      	ldr	r1, [r7, #8]
 800d0ee:	68f8      	ldr	r0, [r7, #12]
 800d0f0:	f000 f840 	bl	800d174 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3730      	adds	r7, #48	@ 0x30
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}

0800d0fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d0fe:	b580      	push	{r7, lr}
 800d100:	b08a      	sub	sp, #40	@ 0x28
 800d102:	af02      	add	r7, sp, #8
 800d104:	60f8      	str	r0, [r7, #12]
 800d106:	60b9      	str	r1, [r7, #8]
 800d108:	4613      	mov	r3, r2
 800d10a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d10b      	bne.n	800d12a <xQueueGenericCreate+0x2c>
	__asm volatile
 800d112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d116:	f383 8811 	msr	BASEPRI, r3
 800d11a:	f3bf 8f6f 	isb	sy
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	613b      	str	r3, [r7, #16]
}
 800d124:	bf00      	nop
 800d126:	bf00      	nop
 800d128:	e7fd      	b.n	800d126 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	fb02 f303 	mul.w	r3, r2, r3
 800d132:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d134:	69fb      	ldr	r3, [r7, #28]
 800d136:	3350      	adds	r3, #80	@ 0x50
 800d138:	4618      	mov	r0, r3
 800d13a:	f002 fe57 	bl	800fdec <pvPortMalloc>
 800d13e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d140:	69bb      	ldr	r3, [r7, #24]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d011      	beq.n	800d16a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	3350      	adds	r3, #80	@ 0x50
 800d14e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	2200      	movs	r2, #0
 800d154:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d158:	79fa      	ldrb	r2, [r7, #7]
 800d15a:	69bb      	ldr	r3, [r7, #24]
 800d15c:	9300      	str	r3, [sp, #0]
 800d15e:	4613      	mov	r3, r2
 800d160:	697a      	ldr	r2, [r7, #20]
 800d162:	68b9      	ldr	r1, [r7, #8]
 800d164:	68f8      	ldr	r0, [r7, #12]
 800d166:	f000 f805 	bl	800d174 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d16a:	69bb      	ldr	r3, [r7, #24]
	}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3720      	adds	r7, #32
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	607a      	str	r2, [r7, #4]
 800d180:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d103      	bne.n	800d190 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	69ba      	ldr	r2, [r7, #24]
 800d18c:	601a      	str	r2, [r3, #0]
 800d18e:	e002      	b.n	800d196 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d196:	69bb      	ldr	r3, [r7, #24]
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d19c:	69bb      	ldr	r3, [r7, #24]
 800d19e:	68ba      	ldr	r2, [r7, #8]
 800d1a0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d1a2:	2101      	movs	r1, #1
 800d1a4:	69b8      	ldr	r0, [r7, #24]
 800d1a6:	f7ff fec3 	bl	800cf30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	78fa      	ldrb	r2, [r7, #3]
 800d1ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d1b2:	bf00      	nop
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b082      	sub	sp, #8
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00e      	beq.n	800d1e6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d1da:	2300      	movs	r3, #0
 800d1dc:	2200      	movs	r2, #0
 800d1de:	2100      	movs	r1, #0
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f8a3 	bl	800d32c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d1e6:	bf00      	nop
 800d1e8:	3708      	adds	r7, #8
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b086      	sub	sp, #24
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	617b      	str	r3, [r7, #20]
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d200:	79fb      	ldrb	r3, [r7, #7]
 800d202:	461a      	mov	r2, r3
 800d204:	6939      	ldr	r1, [r7, #16]
 800d206:	6978      	ldr	r0, [r7, #20]
 800d208:	f7ff ff79 	bl	800d0fe <xQueueGenericCreate>
 800d20c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d20e:	68f8      	ldr	r0, [r7, #12]
 800d210:	f7ff ffd3 	bl	800d1ba <prvInitialiseMutex>

		return xNewQueue;
 800d214:	68fb      	ldr	r3, [r7, #12]
	}
 800d216:	4618      	mov	r0, r3
 800d218:	3718      	adds	r7, #24
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d21e:	b580      	push	{r7, lr}
 800d220:	b088      	sub	sp, #32
 800d222:	af02      	add	r7, sp, #8
 800d224:	4603      	mov	r3, r0
 800d226:	6039      	str	r1, [r7, #0]
 800d228:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d22a:	2301      	movs	r3, #1
 800d22c:	617b      	str	r3, [r7, #20]
 800d22e:	2300      	movs	r3, #0
 800d230:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d232:	79fb      	ldrb	r3, [r7, #7]
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	2200      	movs	r2, #0
 800d23a:	6939      	ldr	r1, [r7, #16]
 800d23c:	6978      	ldr	r0, [r7, #20]
 800d23e:	f7ff fee1 	bl	800d004 <xQueueGenericCreateStatic>
 800d242:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d244:	68f8      	ldr	r0, [r7, #12]
 800d246:	f7ff ffb8 	bl	800d1ba <prvInitialiseMutex>

		return xNewQueue;
 800d24a:	68fb      	ldr	r3, [r7, #12]
	}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3718      	adds	r7, #24
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d254:	b590      	push	{r4, r7, lr}
 800d256:	b087      	sub	sp, #28
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d10b      	bne.n	800d27e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d26a:	f383 8811 	msr	BASEPRI, r3
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	f3bf 8f4f 	dsb	sy
 800d276:	60fb      	str	r3, [r7, #12]
}
 800d278:	bf00      	nop
 800d27a:	bf00      	nop
 800d27c:	e7fd      	b.n	800d27a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	689c      	ldr	r4, [r3, #8]
 800d282:	f001 fc0f 	bl	800eaa4 <xTaskGetCurrentTaskHandle>
 800d286:	4603      	mov	r3, r0
 800d288:	429c      	cmp	r4, r3
 800d28a:	d111      	bne.n	800d2b0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	68db      	ldr	r3, [r3, #12]
 800d290:	1e5a      	subs	r2, r3, #1
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d105      	bne.n	800d2aa <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d29e:	2300      	movs	r3, #0
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	6938      	ldr	r0, [r7, #16]
 800d2a6:	f000 f841 	bl	800d32c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	617b      	str	r3, [r7, #20]
 800d2ae:	e001      	b.n	800d2b4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d2b4:	697b      	ldr	r3, [r7, #20]
	}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	371c      	adds	r7, #28
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd90      	pop	{r4, r7, pc}

0800d2be <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d2be:	b590      	push	{r4, r7, lr}
 800d2c0:	b087      	sub	sp, #28
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
 800d2c6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d10b      	bne.n	800d2ea <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d6:	f383 8811 	msr	BASEPRI, r3
 800d2da:	f3bf 8f6f 	isb	sy
 800d2de:	f3bf 8f4f 	dsb	sy
 800d2e2:	60fb      	str	r3, [r7, #12]
}
 800d2e4:	bf00      	nop
 800d2e6:	bf00      	nop
 800d2e8:	e7fd      	b.n	800d2e6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	689c      	ldr	r4, [r3, #8]
 800d2ee:	f001 fbd9 	bl	800eaa4 <xTaskGetCurrentTaskHandle>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	429c      	cmp	r4, r3
 800d2f6:	d107      	bne.n	800d308 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	68db      	ldr	r3, [r3, #12]
 800d2fc:	1c5a      	adds	r2, r3, #1
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d302:	2301      	movs	r3, #1
 800d304:	617b      	str	r3, [r7, #20]
 800d306:	e00c      	b.n	800d322 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d308:	6839      	ldr	r1, [r7, #0]
 800d30a:	6938      	ldr	r0, [r7, #16]
 800d30c:	f000 fa90 	bl	800d830 <xQueueSemaphoreTake>
 800d310:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d004      	beq.n	800d322 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	1c5a      	adds	r2, r3, #1
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d322:	697b      	ldr	r3, [r7, #20]
	}
 800d324:	4618      	mov	r0, r3
 800d326:	371c      	adds	r7, #28
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd90      	pop	{r4, r7, pc}

0800d32c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b08e      	sub	sp, #56	@ 0x38
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	607a      	str	r2, [r7, #4]
 800d338:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d33a:	2300      	movs	r3, #0
 800d33c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10b      	bne.n	800d360 <xQueueGenericSend+0x34>
	__asm volatile
 800d348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d34c:	f383 8811 	msr	BASEPRI, r3
 800d350:	f3bf 8f6f 	isb	sy
 800d354:	f3bf 8f4f 	dsb	sy
 800d358:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d35a:	bf00      	nop
 800d35c:	bf00      	nop
 800d35e:	e7fd      	b.n	800d35c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d103      	bne.n	800d36e <xQueueGenericSend+0x42>
 800d366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d101      	bne.n	800d372 <xQueueGenericSend+0x46>
 800d36e:	2301      	movs	r3, #1
 800d370:	e000      	b.n	800d374 <xQueueGenericSend+0x48>
 800d372:	2300      	movs	r3, #0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d10b      	bne.n	800d390 <xQueueGenericSend+0x64>
	__asm volatile
 800d378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d37c:	f383 8811 	msr	BASEPRI, r3
 800d380:	f3bf 8f6f 	isb	sy
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d38a:	bf00      	nop
 800d38c:	bf00      	nop
 800d38e:	e7fd      	b.n	800d38c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	2b02      	cmp	r3, #2
 800d394:	d103      	bne.n	800d39e <xQueueGenericSend+0x72>
 800d396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d101      	bne.n	800d3a2 <xQueueGenericSend+0x76>
 800d39e:	2301      	movs	r3, #1
 800d3a0:	e000      	b.n	800d3a4 <xQueueGenericSend+0x78>
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d10b      	bne.n	800d3c0 <xQueueGenericSend+0x94>
	__asm volatile
 800d3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ac:	f383 8811 	msr	BASEPRI, r3
 800d3b0:	f3bf 8f6f 	isb	sy
 800d3b4:	f3bf 8f4f 	dsb	sy
 800d3b8:	623b      	str	r3, [r7, #32]
}
 800d3ba:	bf00      	nop
 800d3bc:	bf00      	nop
 800d3be:	e7fd      	b.n	800d3bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3c0:	f001 fb80 	bl	800eac4 <xTaskGetSchedulerState>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d102      	bne.n	800d3d0 <xQueueGenericSend+0xa4>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d101      	bne.n	800d3d4 <xQueueGenericSend+0xa8>
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e000      	b.n	800d3d6 <xQueueGenericSend+0xaa>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d10b      	bne.n	800d3f2 <xQueueGenericSend+0xc6>
	__asm volatile
 800d3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3de:	f383 8811 	msr	BASEPRI, r3
 800d3e2:	f3bf 8f6f 	isb	sy
 800d3e6:	f3bf 8f4f 	dsb	sy
 800d3ea:	61fb      	str	r3, [r7, #28]
}
 800d3ec:	bf00      	nop
 800d3ee:	bf00      	nop
 800d3f0:	e7fd      	b.n	800d3ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d3f2:	f002 fbd9 	bl	800fba8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d302      	bcc.n	800d408 <xQueueGenericSend+0xdc>
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2b02      	cmp	r3, #2
 800d406:	d129      	bne.n	800d45c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d408:	683a      	ldr	r2, [r7, #0]
 800d40a:	68b9      	ldr	r1, [r7, #8]
 800d40c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d40e:	f000 fbb9 	bl	800db84 <prvCopyDataToQueue>
 800d412:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d010      	beq.n	800d43e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d41e:	3324      	adds	r3, #36	@ 0x24
 800d420:	4618      	mov	r0, r3
 800d422:	f001 f979 	bl	800e718 <xTaskRemoveFromEventList>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d013      	beq.n	800d454 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d42c:	4b3f      	ldr	r3, [pc, #252]	@ (800d52c <xQueueGenericSend+0x200>)
 800d42e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d432:	601a      	str	r2, [r3, #0]
 800d434:	f3bf 8f4f 	dsb	sy
 800d438:	f3bf 8f6f 	isb	sy
 800d43c:	e00a      	b.n	800d454 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d440:	2b00      	cmp	r3, #0
 800d442:	d007      	beq.n	800d454 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d444:	4b39      	ldr	r3, [pc, #228]	@ (800d52c <xQueueGenericSend+0x200>)
 800d446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d44a:	601a      	str	r2, [r3, #0]
 800d44c:	f3bf 8f4f 	dsb	sy
 800d450:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d454:	f002 fbda 	bl	800fc0c <vPortExitCritical>
				return pdPASS;
 800d458:	2301      	movs	r3, #1
 800d45a:	e063      	b.n	800d524 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d103      	bne.n	800d46a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d462:	f002 fbd3 	bl	800fc0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d466:	2300      	movs	r3, #0
 800d468:	e05c      	b.n	800d524 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d46a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d106      	bne.n	800d47e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d470:	f107 0314 	add.w	r3, r7, #20
 800d474:	4618      	mov	r0, r3
 800d476:	f001 f9b3 	bl	800e7e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d47a:	2301      	movs	r3, #1
 800d47c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d47e:	f002 fbc5 	bl	800fc0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d482:	f000 ff1b 	bl	800e2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d486:	f002 fb8f 	bl	800fba8 <vPortEnterCritical>
 800d48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d48c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d490:	b25b      	sxtb	r3, r3
 800d492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d496:	d103      	bne.n	800d4a0 <xQueueGenericSend+0x174>
 800d498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d49a:	2200      	movs	r2, #0
 800d49c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4a6:	b25b      	sxtb	r3, r3
 800d4a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ac:	d103      	bne.n	800d4b6 <xQueueGenericSend+0x18a>
 800d4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d4b6:	f002 fba9 	bl	800fc0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4ba:	1d3a      	adds	r2, r7, #4
 800d4bc:	f107 0314 	add.w	r3, r7, #20
 800d4c0:	4611      	mov	r1, r2
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f001 f9a2 	bl	800e80c <xTaskCheckForTimeOut>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d124      	bne.n	800d518 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d4ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d4d0:	f000 fc50 	bl	800dd74 <prvIsQueueFull>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d018      	beq.n	800d50c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4dc:	3310      	adds	r3, #16
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	4611      	mov	r1, r2
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f001 f8c6 	bl	800e674 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d4e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d4ea:	f000 fbdb 	bl	800dca4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d4ee:	f000 fef3 	bl	800e2d8 <xTaskResumeAll>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	f47f af7c 	bne.w	800d3f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d4fa:	4b0c      	ldr	r3, [pc, #48]	@ (800d52c <xQueueGenericSend+0x200>)
 800d4fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d500:	601a      	str	r2, [r3, #0]
 800d502:	f3bf 8f4f 	dsb	sy
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	e772      	b.n	800d3f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d50c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d50e:	f000 fbc9 	bl	800dca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d512:	f000 fee1 	bl	800e2d8 <xTaskResumeAll>
 800d516:	e76c      	b.n	800d3f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d518:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d51a:	f000 fbc3 	bl	800dca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d51e:	f000 fedb 	bl	800e2d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d522:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d524:	4618      	mov	r0, r3
 800d526:	3738      	adds	r7, #56	@ 0x38
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	e000ed04 	.word	0xe000ed04

0800d530 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b090      	sub	sp, #64	@ 0x40
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	607a      	str	r2, [r7, #4]
 800d53c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d544:	2b00      	cmp	r3, #0
 800d546:	d10b      	bne.n	800d560 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d54c:	f383 8811 	msr	BASEPRI, r3
 800d550:	f3bf 8f6f 	isb	sy
 800d554:	f3bf 8f4f 	dsb	sy
 800d558:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d55a:	bf00      	nop
 800d55c:	bf00      	nop
 800d55e:	e7fd      	b.n	800d55c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d103      	bne.n	800d56e <xQueueGenericSendFromISR+0x3e>
 800d566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d101      	bne.n	800d572 <xQueueGenericSendFromISR+0x42>
 800d56e:	2301      	movs	r3, #1
 800d570:	e000      	b.n	800d574 <xQueueGenericSendFromISR+0x44>
 800d572:	2300      	movs	r3, #0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d10b      	bne.n	800d590 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d57c:	f383 8811 	msr	BASEPRI, r3
 800d580:	f3bf 8f6f 	isb	sy
 800d584:	f3bf 8f4f 	dsb	sy
 800d588:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d58a:	bf00      	nop
 800d58c:	bf00      	nop
 800d58e:	e7fd      	b.n	800d58c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	2b02      	cmp	r3, #2
 800d594:	d103      	bne.n	800d59e <xQueueGenericSendFromISR+0x6e>
 800d596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d101      	bne.n	800d5a2 <xQueueGenericSendFromISR+0x72>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e000      	b.n	800d5a4 <xQueueGenericSendFromISR+0x74>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d10b      	bne.n	800d5c0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ac:	f383 8811 	msr	BASEPRI, r3
 800d5b0:	f3bf 8f6f 	isb	sy
 800d5b4:	f3bf 8f4f 	dsb	sy
 800d5b8:	623b      	str	r3, [r7, #32]
}
 800d5ba:	bf00      	nop
 800d5bc:	bf00      	nop
 800d5be:	e7fd      	b.n	800d5bc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d5c0:	f002 fbd2 	bl	800fd68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d5c4:	f3ef 8211 	mrs	r2, BASEPRI
 800d5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5cc:	f383 8811 	msr	BASEPRI, r3
 800d5d0:	f3bf 8f6f 	isb	sy
 800d5d4:	f3bf 8f4f 	dsb	sy
 800d5d8:	61fa      	str	r2, [r7, #28]
 800d5da:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d5dc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d5de:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d302      	bcc.n	800d5f2 <xQueueGenericSendFromISR+0xc2>
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	2b02      	cmp	r3, #2
 800d5f0:	d12f      	bne.n	800d652 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d5f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d600:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d602:	683a      	ldr	r2, [r7, #0]
 800d604:	68b9      	ldr	r1, [r7, #8]
 800d606:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d608:	f000 fabc 	bl	800db84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d60c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d614:	d112      	bne.n	800d63c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d016      	beq.n	800d64c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d620:	3324      	adds	r3, #36	@ 0x24
 800d622:	4618      	mov	r0, r3
 800d624:	f001 f878 	bl	800e718 <xTaskRemoveFromEventList>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00e      	beq.n	800d64c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00b      	beq.n	800d64c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2201      	movs	r2, #1
 800d638:	601a      	str	r2, [r3, #0]
 800d63a:	e007      	b.n	800d64c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d63c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d640:	3301      	adds	r3, #1
 800d642:	b2db      	uxtb	r3, r3
 800d644:	b25a      	sxtb	r2, r3
 800d646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d64c:	2301      	movs	r3, #1
 800d64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d650:	e001      	b.n	800d656 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d652:	2300      	movs	r3, #0
 800d654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d658:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d660:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d664:	4618      	mov	r0, r3
 800d666:	3740      	adds	r7, #64	@ 0x40
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b08c      	sub	sp, #48	@ 0x30
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d678:	2300      	movs	r3, #0
 800d67a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d682:	2b00      	cmp	r3, #0
 800d684:	d10b      	bne.n	800d69e <xQueueReceive+0x32>
	__asm volatile
 800d686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d68a:	f383 8811 	msr	BASEPRI, r3
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	f3bf 8f4f 	dsb	sy
 800d696:	623b      	str	r3, [r7, #32]
}
 800d698:	bf00      	nop
 800d69a:	bf00      	nop
 800d69c:	e7fd      	b.n	800d69a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d103      	bne.n	800d6ac <xQueueReceive+0x40>
 800d6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d101      	bne.n	800d6b0 <xQueueReceive+0x44>
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	e000      	b.n	800d6b2 <xQueueReceive+0x46>
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d10b      	bne.n	800d6ce <xQueueReceive+0x62>
	__asm volatile
 800d6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ba:	f383 8811 	msr	BASEPRI, r3
 800d6be:	f3bf 8f6f 	isb	sy
 800d6c2:	f3bf 8f4f 	dsb	sy
 800d6c6:	61fb      	str	r3, [r7, #28]
}
 800d6c8:	bf00      	nop
 800d6ca:	bf00      	nop
 800d6cc:	e7fd      	b.n	800d6ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d6ce:	f001 f9f9 	bl	800eac4 <xTaskGetSchedulerState>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d102      	bne.n	800d6de <xQueueReceive+0x72>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d101      	bne.n	800d6e2 <xQueueReceive+0x76>
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e000      	b.n	800d6e4 <xQueueReceive+0x78>
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10b      	bne.n	800d700 <xQueueReceive+0x94>
	__asm volatile
 800d6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ec:	f383 8811 	msr	BASEPRI, r3
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	61bb      	str	r3, [r7, #24]
}
 800d6fa:	bf00      	nop
 800d6fc:	bf00      	nop
 800d6fe:	e7fd      	b.n	800d6fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d700:	f002 fa52 	bl	800fba8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d708:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d01f      	beq.n	800d750 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d710:	68b9      	ldr	r1, [r7, #8]
 800d712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d714:	f000 faa0 	bl	800dc58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d71a:	1e5a      	subs	r2, r3, #1
 800d71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d71e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d722:	691b      	ldr	r3, [r3, #16]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d00f      	beq.n	800d748 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d72a:	3310      	adds	r3, #16
 800d72c:	4618      	mov	r0, r3
 800d72e:	f000 fff3 	bl	800e718 <xTaskRemoveFromEventList>
 800d732:	4603      	mov	r3, r0
 800d734:	2b00      	cmp	r3, #0
 800d736:	d007      	beq.n	800d748 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d738:	4b3c      	ldr	r3, [pc, #240]	@ (800d82c <xQueueReceive+0x1c0>)
 800d73a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d73e:	601a      	str	r2, [r3, #0]
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d748:	f002 fa60 	bl	800fc0c <vPortExitCritical>
				return pdPASS;
 800d74c:	2301      	movs	r3, #1
 800d74e:	e069      	b.n	800d824 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d103      	bne.n	800d75e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d756:	f002 fa59 	bl	800fc0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d75a:	2300      	movs	r3, #0
 800d75c:	e062      	b.n	800d824 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d760:	2b00      	cmp	r3, #0
 800d762:	d106      	bne.n	800d772 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d764:	f107 0310 	add.w	r3, r7, #16
 800d768:	4618      	mov	r0, r3
 800d76a:	f001 f839 	bl	800e7e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d76e:	2301      	movs	r3, #1
 800d770:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d772:	f002 fa4b 	bl	800fc0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d776:	f000 fda1 	bl	800e2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d77a:	f002 fa15 	bl	800fba8 <vPortEnterCritical>
 800d77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d780:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d784:	b25b      	sxtb	r3, r3
 800d786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d78a:	d103      	bne.n	800d794 <xQueueReceive+0x128>
 800d78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d78e:	2200      	movs	r2, #0
 800d790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d796:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d79a:	b25b      	sxtb	r3, r3
 800d79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7a0:	d103      	bne.n	800d7aa <xQueueReceive+0x13e>
 800d7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d7aa:	f002 fa2f 	bl	800fc0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7ae:	1d3a      	adds	r2, r7, #4
 800d7b0:	f107 0310 	add.w	r3, r7, #16
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f001 f828 	bl	800e80c <xTaskCheckForTimeOut>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d123      	bne.n	800d80a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d7c4:	f000 fac0 	bl	800dd48 <prvIsQueueEmpty>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d017      	beq.n	800d7fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d0:	3324      	adds	r3, #36	@ 0x24
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	4611      	mov	r1, r2
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f000 ff4c 	bl	800e674 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d7dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d7de:	f000 fa61 	bl	800dca4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d7e2:	f000 fd79 	bl	800e2d8 <xTaskResumeAll>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d189      	bne.n	800d700 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d7ec:	4b0f      	ldr	r3, [pc, #60]	@ (800d82c <xQueueReceive+0x1c0>)
 800d7ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7f2:	601a      	str	r2, [r3, #0]
 800d7f4:	f3bf 8f4f 	dsb	sy
 800d7f8:	f3bf 8f6f 	isb	sy
 800d7fc:	e780      	b.n	800d700 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d7fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d800:	f000 fa50 	bl	800dca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d804:	f000 fd68 	bl	800e2d8 <xTaskResumeAll>
 800d808:	e77a      	b.n	800d700 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d80a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d80c:	f000 fa4a 	bl	800dca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d810:	f000 fd62 	bl	800e2d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d814:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d816:	f000 fa97 	bl	800dd48 <prvIsQueueEmpty>
 800d81a:	4603      	mov	r3, r0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f43f af6f 	beq.w	800d700 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d822:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d824:	4618      	mov	r0, r3
 800d826:	3730      	adds	r7, #48	@ 0x30
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	e000ed04 	.word	0xe000ed04

0800d830 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b08e      	sub	sp, #56	@ 0x38
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d83a:	2300      	movs	r3, #0
 800d83c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d842:	2300      	movs	r3, #0
 800d844:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d10b      	bne.n	800d864 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d84c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d850:	f383 8811 	msr	BASEPRI, r3
 800d854:	f3bf 8f6f 	isb	sy
 800d858:	f3bf 8f4f 	dsb	sy
 800d85c:	623b      	str	r3, [r7, #32]
}
 800d85e:	bf00      	nop
 800d860:	bf00      	nop
 800d862:	e7fd      	b.n	800d860 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d00b      	beq.n	800d884 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d870:	f383 8811 	msr	BASEPRI, r3
 800d874:	f3bf 8f6f 	isb	sy
 800d878:	f3bf 8f4f 	dsb	sy
 800d87c:	61fb      	str	r3, [r7, #28]
}
 800d87e:	bf00      	nop
 800d880:	bf00      	nop
 800d882:	e7fd      	b.n	800d880 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d884:	f001 f91e 	bl	800eac4 <xTaskGetSchedulerState>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d102      	bne.n	800d894 <xQueueSemaphoreTake+0x64>
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d101      	bne.n	800d898 <xQueueSemaphoreTake+0x68>
 800d894:	2301      	movs	r3, #1
 800d896:	e000      	b.n	800d89a <xQueueSemaphoreTake+0x6a>
 800d898:	2300      	movs	r3, #0
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d10b      	bne.n	800d8b6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a2:	f383 8811 	msr	BASEPRI, r3
 800d8a6:	f3bf 8f6f 	isb	sy
 800d8aa:	f3bf 8f4f 	dsb	sy
 800d8ae:	61bb      	str	r3, [r7, #24]
}
 800d8b0:	bf00      	nop
 800d8b2:	bf00      	nop
 800d8b4:	e7fd      	b.n	800d8b2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8b6:	f002 f977 	bl	800fba8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8be:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d024      	beq.n	800d910 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c8:	1e5a      	subs	r2, r3, #1
 800d8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8cc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d104      	bne.n	800d8e0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d8d6:	f001 fa6f 	bl	800edb8 <pvTaskIncrementMutexHeldCount>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8de:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e2:	691b      	ldr	r3, [r3, #16]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d00f      	beq.n	800d908 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ea:	3310      	adds	r3, #16
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f000 ff13 	bl	800e718 <xTaskRemoveFromEventList>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d007      	beq.n	800d908 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d8f8:	4b54      	ldr	r3, [pc, #336]	@ (800da4c <xQueueSemaphoreTake+0x21c>)
 800d8fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8fe:	601a      	str	r2, [r3, #0]
 800d900:	f3bf 8f4f 	dsb	sy
 800d904:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d908:	f002 f980 	bl	800fc0c <vPortExitCritical>
				return pdPASS;
 800d90c:	2301      	movs	r3, #1
 800d90e:	e098      	b.n	800da42 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d112      	bne.n	800d93c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d00b      	beq.n	800d934 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d920:	f383 8811 	msr	BASEPRI, r3
 800d924:	f3bf 8f6f 	isb	sy
 800d928:	f3bf 8f4f 	dsb	sy
 800d92c:	617b      	str	r3, [r7, #20]
}
 800d92e:	bf00      	nop
 800d930:	bf00      	nop
 800d932:	e7fd      	b.n	800d930 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d934:	f002 f96a 	bl	800fc0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d938:	2300      	movs	r3, #0
 800d93a:	e082      	b.n	800da42 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d93c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d106      	bne.n	800d950 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d942:	f107 030c 	add.w	r3, r7, #12
 800d946:	4618      	mov	r0, r3
 800d948:	f000 ff4a 	bl	800e7e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d94c:	2301      	movs	r3, #1
 800d94e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d950:	f002 f95c 	bl	800fc0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d954:	f000 fcb2 	bl	800e2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d958:	f002 f926 	bl	800fba8 <vPortEnterCritical>
 800d95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d95e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d962:	b25b      	sxtb	r3, r3
 800d964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d968:	d103      	bne.n	800d972 <xQueueSemaphoreTake+0x142>
 800d96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d96c:	2200      	movs	r2, #0
 800d96e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d974:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d978:	b25b      	sxtb	r3, r3
 800d97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d97e:	d103      	bne.n	800d988 <xQueueSemaphoreTake+0x158>
 800d980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d982:	2200      	movs	r2, #0
 800d984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d988:	f002 f940 	bl	800fc0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d98c:	463a      	mov	r2, r7
 800d98e:	f107 030c 	add.w	r3, r7, #12
 800d992:	4611      	mov	r1, r2
 800d994:	4618      	mov	r0, r3
 800d996:	f000 ff39 	bl	800e80c <xTaskCheckForTimeOut>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d132      	bne.n	800da06 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9a2:	f000 f9d1 	bl	800dd48 <prvIsQueueEmpty>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d026      	beq.n	800d9fa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d109      	bne.n	800d9c8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d9b4:	f002 f8f8 	bl	800fba8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f001 f89f 	bl	800eb00 <xTaskPriorityInherit>
 800d9c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d9c4:	f002 f922 	bl	800fc0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ca:	3324      	adds	r3, #36	@ 0x24
 800d9cc:	683a      	ldr	r2, [r7, #0]
 800d9ce:	4611      	mov	r1, r2
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f000 fe4f 	bl	800e674 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d9d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9d8:	f000 f964 	bl	800dca4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d9dc:	f000 fc7c 	bl	800e2d8 <xTaskResumeAll>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	f47f af67 	bne.w	800d8b6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d9e8:	4b18      	ldr	r3, [pc, #96]	@ (800da4c <xQueueSemaphoreTake+0x21c>)
 800d9ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9ee:	601a      	str	r2, [r3, #0]
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	f3bf 8f6f 	isb	sy
 800d9f8:	e75d      	b.n	800d8b6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d9fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9fc:	f000 f952 	bl	800dca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da00:	f000 fc6a 	bl	800e2d8 <xTaskResumeAll>
 800da04:	e757      	b.n	800d8b6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800da06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da08:	f000 f94c 	bl	800dca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da0c:	f000 fc64 	bl	800e2d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da12:	f000 f999 	bl	800dd48 <prvIsQueueEmpty>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f43f af4c 	beq.w	800d8b6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800da1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da20:	2b00      	cmp	r3, #0
 800da22:	d00d      	beq.n	800da40 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800da24:	f002 f8c0 	bl	800fba8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800da28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da2a:	f000 f893 	bl	800db54 <prvGetDisinheritPriorityAfterTimeout>
 800da2e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800da30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da32:	689b      	ldr	r3, [r3, #8]
 800da34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da36:	4618      	mov	r0, r3
 800da38:	f001 f93a 	bl	800ecb0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800da3c:	f002 f8e6 	bl	800fc0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da42:	4618      	mov	r0, r3
 800da44:	3738      	adds	r7, #56	@ 0x38
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	e000ed04 	.word	0xe000ed04

0800da50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b08e      	sub	sp, #56	@ 0x38
 800da54:	af00      	add	r7, sp, #0
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800da60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da62:	2b00      	cmp	r3, #0
 800da64:	d10b      	bne.n	800da7e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800da66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da6a:	f383 8811 	msr	BASEPRI, r3
 800da6e:	f3bf 8f6f 	isb	sy
 800da72:	f3bf 8f4f 	dsb	sy
 800da76:	623b      	str	r3, [r7, #32]
}
 800da78:	bf00      	nop
 800da7a:	bf00      	nop
 800da7c:	e7fd      	b.n	800da7a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d103      	bne.n	800da8c <xQueueReceiveFromISR+0x3c>
 800da84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d101      	bne.n	800da90 <xQueueReceiveFromISR+0x40>
 800da8c:	2301      	movs	r3, #1
 800da8e:	e000      	b.n	800da92 <xQueueReceiveFromISR+0x42>
 800da90:	2300      	movs	r3, #0
 800da92:	2b00      	cmp	r3, #0
 800da94:	d10b      	bne.n	800daae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800da96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da9a:	f383 8811 	msr	BASEPRI, r3
 800da9e:	f3bf 8f6f 	isb	sy
 800daa2:	f3bf 8f4f 	dsb	sy
 800daa6:	61fb      	str	r3, [r7, #28]
}
 800daa8:	bf00      	nop
 800daaa:	bf00      	nop
 800daac:	e7fd      	b.n	800daaa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800daae:	f002 f95b 	bl	800fd68 <vPortValidateInterruptPriority>
	__asm volatile
 800dab2:	f3ef 8211 	mrs	r2, BASEPRI
 800dab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daba:	f383 8811 	msr	BASEPRI, r3
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	f3bf 8f4f 	dsb	sy
 800dac6:	61ba      	str	r2, [r7, #24]
 800dac8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800daca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dacc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dad2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d02f      	beq.n	800db3a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dadc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dae0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dae4:	68b9      	ldr	r1, [r7, #8]
 800dae6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dae8:	f000 f8b6 	bl	800dc58 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800daec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daee:	1e5a      	subs	r2, r3, #1
 800daf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800daf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800daf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dafc:	d112      	bne.n	800db24 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db00:	691b      	ldr	r3, [r3, #16]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d016      	beq.n	800db34 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db08:	3310      	adds	r3, #16
 800db0a:	4618      	mov	r0, r3
 800db0c:	f000 fe04 	bl	800e718 <xTaskRemoveFromEventList>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d00e      	beq.n	800db34 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00b      	beq.n	800db34 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2201      	movs	r2, #1
 800db20:	601a      	str	r2, [r3, #0]
 800db22:	e007      	b.n	800db34 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800db24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db28:	3301      	adds	r3, #1
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	b25a      	sxtb	r2, r3
 800db2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800db34:	2301      	movs	r3, #1
 800db36:	637b      	str	r3, [r7, #52]	@ 0x34
 800db38:	e001      	b.n	800db3e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800db3a:	2300      	movs	r3, #0
 800db3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800db3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db40:	613b      	str	r3, [r7, #16]
	__asm volatile
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	f383 8811 	msr	BASEPRI, r3
}
 800db48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3738      	adds	r7, #56	@ 0x38
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800db54:	b480      	push	{r7}
 800db56:	b085      	sub	sp, #20
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db60:	2b00      	cmp	r3, #0
 800db62:	d006      	beq.n	800db72 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800db6e:	60fb      	str	r3, [r7, #12]
 800db70:	e001      	b.n	800db76 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800db72:	2300      	movs	r3, #0
 800db74:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800db76:	68fb      	ldr	r3, [r7, #12]
	}
 800db78:	4618      	mov	r0, r3
 800db7a:	3714      	adds	r7, #20
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr

0800db84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b086      	sub	sp, #24
 800db88:	af00      	add	r7, sp, #0
 800db8a:	60f8      	str	r0, [r7, #12]
 800db8c:	60b9      	str	r1, [r7, #8]
 800db8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800db90:	2300      	movs	r3, #0
 800db92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d10d      	bne.n	800dbbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d14d      	bne.n	800dc46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f001 f80e 	bl	800ebd0 <xTaskPriorityDisinherit>
 800dbb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	609a      	str	r2, [r3, #8]
 800dbbc:	e043      	b.n	800dc46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d119      	bne.n	800dbf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	6858      	ldr	r0, [r3, #4]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbcc:	461a      	mov	r2, r3
 800dbce:	68b9      	ldr	r1, [r7, #8]
 800dbd0:	f003 fa25 	bl	801101e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	685a      	ldr	r2, [r3, #4]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbdc:	441a      	add	r2, r3
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	685a      	ldr	r2, [r3, #4]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	689b      	ldr	r3, [r3, #8]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d32b      	bcc.n	800dc46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	605a      	str	r2, [r3, #4]
 800dbf6:	e026      	b.n	800dc46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	68d8      	ldr	r0, [r3, #12]
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc00:	461a      	mov	r2, r3
 800dc02:	68b9      	ldr	r1, [r7, #8]
 800dc04:	f003 fa0b 	bl	801101e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	68da      	ldr	r2, [r3, #12]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc10:	425b      	negs	r3, r3
 800dc12:	441a      	add	r2, r3
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	68da      	ldr	r2, [r3, #12]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d207      	bcs.n	800dc34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	689a      	ldr	r2, [r3, #8]
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc2c:	425b      	negs	r3, r3
 800dc2e:	441a      	add	r2, r3
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2b02      	cmp	r3, #2
 800dc38:	d105      	bne.n	800dc46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d002      	beq.n	800dc46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	3b01      	subs	r3, #1
 800dc44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	1c5a      	adds	r2, r3, #1
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dc4e:	697b      	ldr	r3, [r7, #20]
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3718      	adds	r7, #24
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d018      	beq.n	800dc9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	68da      	ldr	r2, [r3, #12]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc72:	441a      	add	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	68da      	ldr	r2, [r3, #12]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	689b      	ldr	r3, [r3, #8]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d303      	bcc.n	800dc8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	68d9      	ldr	r1, [r3, #12]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc94:	461a      	mov	r2, r3
 800dc96:	6838      	ldr	r0, [r7, #0]
 800dc98:	f003 f9c1 	bl	801101e <memcpy>
	}
}
 800dc9c:	bf00      	nop
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dcac:	f001 ff7c 	bl	800fba8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dcb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dcb8:	e011      	b.n	800dcde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d012      	beq.n	800dce8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	3324      	adds	r3, #36	@ 0x24
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f000 fd26 	bl	800e718 <xTaskRemoveFromEventList>
 800dccc:	4603      	mov	r3, r0
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d001      	beq.n	800dcd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dcd2:	f000 fdff 	bl	800e8d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dcd6:	7bfb      	ldrb	r3, [r7, #15]
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dcde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	dce9      	bgt.n	800dcba <prvUnlockQueue+0x16>
 800dce6:	e000      	b.n	800dcea <prvUnlockQueue+0x46>
					break;
 800dce8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	22ff      	movs	r2, #255	@ 0xff
 800dcee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dcf2:	f001 ff8b 	bl	800fc0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dcf6:	f001 ff57 	bl	800fba8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd02:	e011      	b.n	800dd28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	691b      	ldr	r3, [r3, #16]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d012      	beq.n	800dd32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	3310      	adds	r3, #16
 800dd10:	4618      	mov	r0, r3
 800dd12:	f000 fd01 	bl	800e718 <xTaskRemoveFromEventList>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d001      	beq.n	800dd20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dd1c:	f000 fdda 	bl	800e8d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dd20:	7bbb      	ldrb	r3, [r7, #14]
 800dd22:	3b01      	subs	r3, #1
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	dce9      	bgt.n	800dd04 <prvUnlockQueue+0x60>
 800dd30:	e000      	b.n	800dd34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dd32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	22ff      	movs	r2, #255	@ 0xff
 800dd38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800dd3c:	f001 ff66 	bl	800fc0c <vPortExitCritical>
}
 800dd40:	bf00      	nop
 800dd42:	3710      	adds	r7, #16
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd50:	f001 ff2a 	bl	800fba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d102      	bne.n	800dd62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	60fb      	str	r3, [r7, #12]
 800dd60:	e001      	b.n	800dd66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dd62:	2300      	movs	r3, #0
 800dd64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd66:	f001 ff51 	bl	800fc0c <vPortExitCritical>

	return xReturn;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3710      	adds	r7, #16
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd7c:	f001 ff14 	bl	800fba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d102      	bne.n	800dd92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	60fb      	str	r3, [r7, #12]
 800dd90:	e001      	b.n	800dd96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dd92:	2300      	movs	r3, #0
 800dd94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd96:	f001 ff39 	bl	800fc0c <vPortExitCritical>

	return xReturn;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3710      	adds	r7, #16
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ddae:	2300      	movs	r3, #0
 800ddb0:	60fb      	str	r3, [r7, #12]
 800ddb2:	e014      	b.n	800ddde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ddb4:	4a0f      	ldr	r2, [pc, #60]	@ (800ddf4 <vQueueAddToRegistry+0x50>)
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d10b      	bne.n	800ddd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ddc0:	490c      	ldr	r1, [pc, #48]	@ (800ddf4 <vQueueAddToRegistry+0x50>)
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	683a      	ldr	r2, [r7, #0]
 800ddc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ddca:	4a0a      	ldr	r2, [pc, #40]	@ (800ddf4 <vQueueAddToRegistry+0x50>)
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	00db      	lsls	r3, r3, #3
 800ddd0:	4413      	add	r3, r2
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ddd6:	e006      	b.n	800dde6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	3301      	adds	r3, #1
 800dddc:	60fb      	str	r3, [r7, #12]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2b07      	cmp	r3, #7
 800dde2:	d9e7      	bls.n	800ddb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dde4:	bf00      	nop
 800dde6:	bf00      	nop
 800dde8:	3714      	adds	r7, #20
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	20000b38 	.word	0x20000b38

0800ddf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b086      	sub	sp, #24
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800de08:	f001 fece 	bl	800fba8 <vPortEnterCritical>
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de12:	b25b      	sxtb	r3, r3
 800de14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de18:	d103      	bne.n	800de22 <vQueueWaitForMessageRestricted+0x2a>
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	2200      	movs	r2, #0
 800de1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de28:	b25b      	sxtb	r3, r3
 800de2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de2e:	d103      	bne.n	800de38 <vQueueWaitForMessageRestricted+0x40>
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	2200      	movs	r2, #0
 800de34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de38:	f001 fee8 	bl	800fc0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de40:	2b00      	cmp	r3, #0
 800de42:	d106      	bne.n	800de52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	3324      	adds	r3, #36	@ 0x24
 800de48:	687a      	ldr	r2, [r7, #4]
 800de4a:	68b9      	ldr	r1, [r7, #8]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f000 fc37 	bl	800e6c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800de52:	6978      	ldr	r0, [r7, #20]
 800de54:	f7ff ff26 	bl	800dca4 <prvUnlockQueue>
	}
 800de58:	bf00      	nop
 800de5a:	3718      	adds	r7, #24
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800de60:	b580      	push	{r7, lr}
 800de62:	b08e      	sub	sp, #56	@ 0x38
 800de64:	af04      	add	r7, sp, #16
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
 800de6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800de6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de70:	2b00      	cmp	r3, #0
 800de72:	d10b      	bne.n	800de8c <xTaskCreateStatic+0x2c>
	__asm volatile
 800de74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de78:	f383 8811 	msr	BASEPRI, r3
 800de7c:	f3bf 8f6f 	isb	sy
 800de80:	f3bf 8f4f 	dsb	sy
 800de84:	623b      	str	r3, [r7, #32]
}
 800de86:	bf00      	nop
 800de88:	bf00      	nop
 800de8a:	e7fd      	b.n	800de88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800de8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10b      	bne.n	800deaa <xTaskCreateStatic+0x4a>
	__asm volatile
 800de92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de96:	f383 8811 	msr	BASEPRI, r3
 800de9a:	f3bf 8f6f 	isb	sy
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	61fb      	str	r3, [r7, #28]
}
 800dea4:	bf00      	nop
 800dea6:	bf00      	nop
 800dea8:	e7fd      	b.n	800dea6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800deaa:	23a8      	movs	r3, #168	@ 0xa8
 800deac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	2ba8      	cmp	r3, #168	@ 0xa8
 800deb2:	d00b      	beq.n	800decc <xTaskCreateStatic+0x6c>
	__asm volatile
 800deb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb8:	f383 8811 	msr	BASEPRI, r3
 800debc:	f3bf 8f6f 	isb	sy
 800dec0:	f3bf 8f4f 	dsb	sy
 800dec4:	61bb      	str	r3, [r7, #24]
}
 800dec6:	bf00      	nop
 800dec8:	bf00      	nop
 800deca:	e7fd      	b.n	800dec8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800decc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d01e      	beq.n	800df12 <xTaskCreateStatic+0xb2>
 800ded4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d01b      	beq.n	800df12 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800deda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dedc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dee2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee6:	2202      	movs	r2, #2
 800dee8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800deec:	2300      	movs	r3, #0
 800deee:	9303      	str	r3, [sp, #12]
 800def0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def2:	9302      	str	r3, [sp, #8]
 800def4:	f107 0314 	add.w	r3, r7, #20
 800def8:	9301      	str	r3, [sp, #4]
 800defa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800defc:	9300      	str	r3, [sp, #0]
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	68b9      	ldr	r1, [r7, #8]
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	f000 f851 	bl	800dfac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800df0c:	f000 f8f6 	bl	800e0fc <prvAddNewTaskToReadyList>
 800df10:	e001      	b.n	800df16 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800df12:	2300      	movs	r3, #0
 800df14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800df16:	697b      	ldr	r3, [r7, #20]
	}
 800df18:	4618      	mov	r0, r3
 800df1a:	3728      	adds	r7, #40	@ 0x28
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800df20:	b580      	push	{r7, lr}
 800df22:	b08c      	sub	sp, #48	@ 0x30
 800df24:	af04      	add	r7, sp, #16
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	603b      	str	r3, [r7, #0]
 800df2c:	4613      	mov	r3, r2
 800df2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800df30:	88fb      	ldrh	r3, [r7, #6]
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4618      	mov	r0, r3
 800df36:	f001 ff59 	bl	800fdec <pvPortMalloc>
 800df3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d00e      	beq.n	800df60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800df42:	20a8      	movs	r0, #168	@ 0xa8
 800df44:	f001 ff52 	bl	800fdec <pvPortMalloc>
 800df48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d003      	beq.n	800df58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	697a      	ldr	r2, [r7, #20]
 800df54:	631a      	str	r2, [r3, #48]	@ 0x30
 800df56:	e005      	b.n	800df64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800df58:	6978      	ldr	r0, [r7, #20]
 800df5a:	f002 f815 	bl	800ff88 <vPortFree>
 800df5e:	e001      	b.n	800df64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800df60:	2300      	movs	r3, #0
 800df62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d017      	beq.n	800df9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800df72:	88fa      	ldrh	r2, [r7, #6]
 800df74:	2300      	movs	r3, #0
 800df76:	9303      	str	r3, [sp, #12]
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	9302      	str	r3, [sp, #8]
 800df7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df7e:	9301      	str	r3, [sp, #4]
 800df80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df82:	9300      	str	r3, [sp, #0]
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	68b9      	ldr	r1, [r7, #8]
 800df88:	68f8      	ldr	r0, [r7, #12]
 800df8a:	f000 f80f 	bl	800dfac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df8e:	69f8      	ldr	r0, [r7, #28]
 800df90:	f000 f8b4 	bl	800e0fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800df94:	2301      	movs	r3, #1
 800df96:	61bb      	str	r3, [r7, #24]
 800df98:	e002      	b.n	800dfa0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800df9a:	f04f 33ff 	mov.w	r3, #4294967295
 800df9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dfa0:	69bb      	ldr	r3, [r7, #24]
	}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3720      	adds	r7, #32
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
	...

0800dfac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b088      	sub	sp, #32
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	60b9      	str	r1, [r7, #8]
 800dfb6:	607a      	str	r2, [r7, #4]
 800dfb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfbc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	009b      	lsls	r3, r3, #2
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	21a5      	movs	r1, #165	@ 0xa5
 800dfc6:	f002 ff58 	bl	8010e7a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dfca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfd4:	3b01      	subs	r3, #1
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	4413      	add	r3, r2
 800dfda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dfdc:	69bb      	ldr	r3, [r7, #24]
 800dfde:	f023 0307 	bic.w	r3, r3, #7
 800dfe2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dfe4:	69bb      	ldr	r3, [r7, #24]
 800dfe6:	f003 0307 	and.w	r3, r3, #7
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d00b      	beq.n	800e006 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800dfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	617b      	str	r3, [r7, #20]
}
 800e000:	bf00      	nop
 800e002:	bf00      	nop
 800e004:	e7fd      	b.n	800e002 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d01f      	beq.n	800e04c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e00c:	2300      	movs	r3, #0
 800e00e:	61fb      	str	r3, [r7, #28]
 800e010:	e012      	b.n	800e038 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e012:	68ba      	ldr	r2, [r7, #8]
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	4413      	add	r3, r2
 800e018:	7819      	ldrb	r1, [r3, #0]
 800e01a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	4413      	add	r3, r2
 800e020:	3334      	adds	r3, #52	@ 0x34
 800e022:	460a      	mov	r2, r1
 800e024:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e026:	68ba      	ldr	r2, [r7, #8]
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	4413      	add	r3, r2
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d006      	beq.n	800e040 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	3301      	adds	r3, #1
 800e036:	61fb      	str	r3, [r7, #28]
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	2b0f      	cmp	r3, #15
 800e03c:	d9e9      	bls.n	800e012 <prvInitialiseNewTask+0x66>
 800e03e:	e000      	b.n	800e042 <prvInitialiseNewTask+0x96>
			{
				break;
 800e040:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e044:	2200      	movs	r2, #0
 800e046:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e04a:	e003      	b.n	800e054 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e04e:	2200      	movs	r2, #0
 800e050:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e056:	2b37      	cmp	r3, #55	@ 0x37
 800e058:	d901      	bls.n	800e05e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e05a:	2337      	movs	r3, #55	@ 0x37
 800e05c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e060:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e062:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e068:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e06c:	2200      	movs	r2, #0
 800e06e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e072:	3304      	adds	r3, #4
 800e074:	4618      	mov	r0, r3
 800e076:	f7fe fec7 	bl	800ce08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e07c:	3318      	adds	r3, #24
 800e07e:	4618      	mov	r0, r3
 800e080:	f7fe fec2 	bl	800ce08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e088:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e08c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e092:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e098:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e09c:	2200      	movs	r2, #0
 800e09e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ac:	3354      	adds	r3, #84	@ 0x54
 800e0ae:	224c      	movs	r2, #76	@ 0x4c
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f002 fee1 	bl	8010e7a <memset>
 800e0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ba:	4a0d      	ldr	r2, [pc, #52]	@ (800e0f0 <prvInitialiseNewTask+0x144>)
 800e0bc:	659a      	str	r2, [r3, #88]	@ 0x58
 800e0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c0:	4a0c      	ldr	r2, [pc, #48]	@ (800e0f4 <prvInitialiseNewTask+0x148>)
 800e0c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c6:	4a0c      	ldr	r2, [pc, #48]	@ (800e0f8 <prvInitialiseNewTask+0x14c>)
 800e0c8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e0ca:	683a      	ldr	r2, [r7, #0]
 800e0cc:	68f9      	ldr	r1, [r7, #12]
 800e0ce:	69b8      	ldr	r0, [r7, #24]
 800e0d0:	f001 fc3c 	bl	800f94c <pxPortInitialiseStack>
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d002      	beq.n	800e0e6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0e6:	bf00      	nop
 800e0e8:	3720      	adds	r7, #32
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	2000aba4 	.word	0x2000aba4
 800e0f4:	2000ac0c 	.word	0x2000ac0c
 800e0f8:	2000ac74 	.word	0x2000ac74

0800e0fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e104:	f001 fd50 	bl	800fba8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e108:	4b2d      	ldr	r3, [pc, #180]	@ (800e1c0 <prvAddNewTaskToReadyList+0xc4>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	3301      	adds	r3, #1
 800e10e:	4a2c      	ldr	r2, [pc, #176]	@ (800e1c0 <prvAddNewTaskToReadyList+0xc4>)
 800e110:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e112:	4b2c      	ldr	r3, [pc, #176]	@ (800e1c4 <prvAddNewTaskToReadyList+0xc8>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d109      	bne.n	800e12e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e11a:	4a2a      	ldr	r2, [pc, #168]	@ (800e1c4 <prvAddNewTaskToReadyList+0xc8>)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e120:	4b27      	ldr	r3, [pc, #156]	@ (800e1c0 <prvAddNewTaskToReadyList+0xc4>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b01      	cmp	r3, #1
 800e126:	d110      	bne.n	800e14a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e128:	f000 fbf8 	bl	800e91c <prvInitialiseTaskLists>
 800e12c:	e00d      	b.n	800e14a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e12e:	4b26      	ldr	r3, [pc, #152]	@ (800e1c8 <prvAddNewTaskToReadyList+0xcc>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d109      	bne.n	800e14a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e136:	4b23      	ldr	r3, [pc, #140]	@ (800e1c4 <prvAddNewTaskToReadyList+0xc8>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e140:	429a      	cmp	r2, r3
 800e142:	d802      	bhi.n	800e14a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e144:	4a1f      	ldr	r2, [pc, #124]	@ (800e1c4 <prvAddNewTaskToReadyList+0xc8>)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e14a:	4b20      	ldr	r3, [pc, #128]	@ (800e1cc <prvAddNewTaskToReadyList+0xd0>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	3301      	adds	r3, #1
 800e150:	4a1e      	ldr	r2, [pc, #120]	@ (800e1cc <prvAddNewTaskToReadyList+0xd0>)
 800e152:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e154:	4b1d      	ldr	r3, [pc, #116]	@ (800e1cc <prvAddNewTaskToReadyList+0xd0>)
 800e156:	681a      	ldr	r2, [r3, #0]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e160:	4b1b      	ldr	r3, [pc, #108]	@ (800e1d0 <prvAddNewTaskToReadyList+0xd4>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	429a      	cmp	r2, r3
 800e166:	d903      	bls.n	800e170 <prvAddNewTaskToReadyList+0x74>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e16c:	4a18      	ldr	r2, [pc, #96]	@ (800e1d0 <prvAddNewTaskToReadyList+0xd4>)
 800e16e:	6013      	str	r3, [r2, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e174:	4613      	mov	r3, r2
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	4413      	add	r3, r2
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	4a15      	ldr	r2, [pc, #84]	@ (800e1d4 <prvAddNewTaskToReadyList+0xd8>)
 800e17e:	441a      	add	r2, r3
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	3304      	adds	r3, #4
 800e184:	4619      	mov	r1, r3
 800e186:	4610      	mov	r0, r2
 800e188:	f7fe fe4b 	bl	800ce22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e18c:	f001 fd3e 	bl	800fc0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e190:	4b0d      	ldr	r3, [pc, #52]	@ (800e1c8 <prvAddNewTaskToReadyList+0xcc>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d00e      	beq.n	800e1b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e198:	4b0a      	ldr	r3, [pc, #40]	@ (800e1c4 <prvAddNewTaskToReadyList+0xc8>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d207      	bcs.n	800e1b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e1a6:	4b0c      	ldr	r3, [pc, #48]	@ (800e1d8 <prvAddNewTaskToReadyList+0xdc>)
 800e1a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1ac:	601a      	str	r2, [r3, #0]
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1b6:	bf00      	nop
 800e1b8:	3708      	adds	r7, #8
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	2000104c 	.word	0x2000104c
 800e1c4:	20000b78 	.word	0x20000b78
 800e1c8:	20001058 	.word	0x20001058
 800e1cc:	20001068 	.word	0x20001068
 800e1d0:	20001054 	.word	0x20001054
 800e1d4:	20000b7c 	.word	0x20000b7c
 800e1d8:	e000ed04 	.word	0xe000ed04

0800e1dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b08a      	sub	sp, #40	@ 0x28
 800e1e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e1ea:	463a      	mov	r2, r7
 800e1ec:	1d39      	adds	r1, r7, #4
 800e1ee:	f107 0308 	add.w	r3, r7, #8
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7fe fdb4 	bl	800cd60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e1f8:	6839      	ldr	r1, [r7, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	68ba      	ldr	r2, [r7, #8]
 800e1fe:	9202      	str	r2, [sp, #8]
 800e200:	9301      	str	r3, [sp, #4]
 800e202:	2300      	movs	r3, #0
 800e204:	9300      	str	r3, [sp, #0]
 800e206:	2300      	movs	r3, #0
 800e208:	460a      	mov	r2, r1
 800e20a:	4924      	ldr	r1, [pc, #144]	@ (800e29c <vTaskStartScheduler+0xc0>)
 800e20c:	4824      	ldr	r0, [pc, #144]	@ (800e2a0 <vTaskStartScheduler+0xc4>)
 800e20e:	f7ff fe27 	bl	800de60 <xTaskCreateStatic>
 800e212:	4603      	mov	r3, r0
 800e214:	4a23      	ldr	r2, [pc, #140]	@ (800e2a4 <vTaskStartScheduler+0xc8>)
 800e216:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e218:	4b22      	ldr	r3, [pc, #136]	@ (800e2a4 <vTaskStartScheduler+0xc8>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d002      	beq.n	800e226 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e220:	2301      	movs	r3, #1
 800e222:	617b      	str	r3, [r7, #20]
 800e224:	e001      	b.n	800e22a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e226:	2300      	movs	r3, #0
 800e228:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d102      	bne.n	800e236 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e230:	f001 f832 	bl	800f298 <xTimerCreateTimerTask>
 800e234:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d11b      	bne.n	800e274 <vTaskStartScheduler+0x98>
	__asm volatile
 800e23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e240:	f383 8811 	msr	BASEPRI, r3
 800e244:	f3bf 8f6f 	isb	sy
 800e248:	f3bf 8f4f 	dsb	sy
 800e24c:	613b      	str	r3, [r7, #16]
}
 800e24e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e250:	4b15      	ldr	r3, [pc, #84]	@ (800e2a8 <vTaskStartScheduler+0xcc>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	3354      	adds	r3, #84	@ 0x54
 800e256:	4a15      	ldr	r2, [pc, #84]	@ (800e2ac <vTaskStartScheduler+0xd0>)
 800e258:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e25a:	4b15      	ldr	r3, [pc, #84]	@ (800e2b0 <vTaskStartScheduler+0xd4>)
 800e25c:	f04f 32ff 	mov.w	r2, #4294967295
 800e260:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e262:	4b14      	ldr	r3, [pc, #80]	@ (800e2b4 <vTaskStartScheduler+0xd8>)
 800e264:	2201      	movs	r2, #1
 800e266:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e268:	4b13      	ldr	r3, [pc, #76]	@ (800e2b8 <vTaskStartScheduler+0xdc>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e26e:	f001 fbf7 	bl	800fa60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e272:	e00f      	b.n	800e294 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e27a:	d10b      	bne.n	800e294 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e280:	f383 8811 	msr	BASEPRI, r3
 800e284:	f3bf 8f6f 	isb	sy
 800e288:	f3bf 8f4f 	dsb	sy
 800e28c:	60fb      	str	r3, [r7, #12]
}
 800e28e:	bf00      	nop
 800e290:	bf00      	nop
 800e292:	e7fd      	b.n	800e290 <vTaskStartScheduler+0xb4>
}
 800e294:	bf00      	nop
 800e296:	3718      	adds	r7, #24
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	08011c7c 	.word	0x08011c7c
 800e2a0:	0800e8ed 	.word	0x0800e8ed
 800e2a4:	20001070 	.word	0x20001070
 800e2a8:	20000b78 	.word	0x20000b78
 800e2ac:	20000118 	.word	0x20000118
 800e2b0:	2000106c 	.word	0x2000106c
 800e2b4:	20001058 	.word	0x20001058
 800e2b8:	20001050 	.word	0x20001050

0800e2bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e2bc:	b480      	push	{r7}
 800e2be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e2c0:	4b04      	ldr	r3, [pc, #16]	@ (800e2d4 <vTaskSuspendAll+0x18>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	4a03      	ldr	r2, [pc, #12]	@ (800e2d4 <vTaskSuspendAll+0x18>)
 800e2c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e2ca:	bf00      	nop
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr
 800e2d4:	20001074 	.word	0x20001074

0800e2d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e2e6:	4b42      	ldr	r3, [pc, #264]	@ (800e3f0 <xTaskResumeAll+0x118>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10b      	bne.n	800e306 <xTaskResumeAll+0x2e>
	__asm volatile
 800e2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2f2:	f383 8811 	msr	BASEPRI, r3
 800e2f6:	f3bf 8f6f 	isb	sy
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	603b      	str	r3, [r7, #0]
}
 800e300:	bf00      	nop
 800e302:	bf00      	nop
 800e304:	e7fd      	b.n	800e302 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e306:	f001 fc4f 	bl	800fba8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e30a:	4b39      	ldr	r3, [pc, #228]	@ (800e3f0 <xTaskResumeAll+0x118>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	3b01      	subs	r3, #1
 800e310:	4a37      	ldr	r2, [pc, #220]	@ (800e3f0 <xTaskResumeAll+0x118>)
 800e312:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e314:	4b36      	ldr	r3, [pc, #216]	@ (800e3f0 <xTaskResumeAll+0x118>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d162      	bne.n	800e3e2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e31c:	4b35      	ldr	r3, [pc, #212]	@ (800e3f4 <xTaskResumeAll+0x11c>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d05e      	beq.n	800e3e2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e324:	e02f      	b.n	800e386 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e326:	4b34      	ldr	r3, [pc, #208]	@ (800e3f8 <xTaskResumeAll+0x120>)
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	3318      	adds	r3, #24
 800e332:	4618      	mov	r0, r3
 800e334:	f7fe fdd2 	bl	800cedc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	3304      	adds	r3, #4
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7fe fdcd 	bl	800cedc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e346:	4b2d      	ldr	r3, [pc, #180]	@ (800e3fc <xTaskResumeAll+0x124>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d903      	bls.n	800e356 <xTaskResumeAll+0x7e>
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e352:	4a2a      	ldr	r2, [pc, #168]	@ (800e3fc <xTaskResumeAll+0x124>)
 800e354:	6013      	str	r3, [r2, #0]
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e35a:	4613      	mov	r3, r2
 800e35c:	009b      	lsls	r3, r3, #2
 800e35e:	4413      	add	r3, r2
 800e360:	009b      	lsls	r3, r3, #2
 800e362:	4a27      	ldr	r2, [pc, #156]	@ (800e400 <xTaskResumeAll+0x128>)
 800e364:	441a      	add	r2, r3
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	3304      	adds	r3, #4
 800e36a:	4619      	mov	r1, r3
 800e36c:	4610      	mov	r0, r2
 800e36e:	f7fe fd58 	bl	800ce22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e376:	4b23      	ldr	r3, [pc, #140]	@ (800e404 <xTaskResumeAll+0x12c>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d302      	bcc.n	800e386 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e380:	4b21      	ldr	r3, [pc, #132]	@ (800e408 <xTaskResumeAll+0x130>)
 800e382:	2201      	movs	r2, #1
 800e384:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e386:	4b1c      	ldr	r3, [pc, #112]	@ (800e3f8 <xTaskResumeAll+0x120>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d1cb      	bne.n	800e326 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d001      	beq.n	800e398 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e394:	f000 fb66 	bl	800ea64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e398:	4b1c      	ldr	r3, [pc, #112]	@ (800e40c <xTaskResumeAll+0x134>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d010      	beq.n	800e3c6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e3a4:	f000 f846 	bl	800e434 <xTaskIncrementTick>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d002      	beq.n	800e3b4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e3ae:	4b16      	ldr	r3, [pc, #88]	@ (800e408 <xTaskResumeAll+0x130>)
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d1f1      	bne.n	800e3a4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e3c0:	4b12      	ldr	r3, [pc, #72]	@ (800e40c <xTaskResumeAll+0x134>)
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e3c6:	4b10      	ldr	r3, [pc, #64]	@ (800e408 <xTaskResumeAll+0x130>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d009      	beq.n	800e3e2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e3d2:	4b0f      	ldr	r3, [pc, #60]	@ (800e410 <xTaskResumeAll+0x138>)
 800e3d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3d8:	601a      	str	r2, [r3, #0]
 800e3da:	f3bf 8f4f 	dsb	sy
 800e3de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e3e2:	f001 fc13 	bl	800fc0c <vPortExitCritical>

	return xAlreadyYielded;
 800e3e6:	68bb      	ldr	r3, [r7, #8]
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3710      	adds	r7, #16
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	20001074 	.word	0x20001074
 800e3f4:	2000104c 	.word	0x2000104c
 800e3f8:	2000100c 	.word	0x2000100c
 800e3fc:	20001054 	.word	0x20001054
 800e400:	20000b7c 	.word	0x20000b7c
 800e404:	20000b78 	.word	0x20000b78
 800e408:	20001060 	.word	0x20001060
 800e40c:	2000105c 	.word	0x2000105c
 800e410:	e000ed04 	.word	0xe000ed04

0800e414 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e414:	b480      	push	{r7}
 800e416:	b083      	sub	sp, #12
 800e418:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e41a:	4b05      	ldr	r3, [pc, #20]	@ (800e430 <xTaskGetTickCount+0x1c>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e420:	687b      	ldr	r3, [r7, #4]
}
 800e422:	4618      	mov	r0, r3
 800e424:	370c      	adds	r7, #12
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr
 800e42e:	bf00      	nop
 800e430:	20001050 	.word	0x20001050

0800e434 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b086      	sub	sp, #24
 800e438:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e43a:	2300      	movs	r3, #0
 800e43c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e43e:	4b4f      	ldr	r3, [pc, #316]	@ (800e57c <xTaskIncrementTick+0x148>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	f040 8090 	bne.w	800e568 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e448:	4b4d      	ldr	r3, [pc, #308]	@ (800e580 <xTaskIncrementTick+0x14c>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	3301      	adds	r3, #1
 800e44e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e450:	4a4b      	ldr	r2, [pc, #300]	@ (800e580 <xTaskIncrementTick+0x14c>)
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d121      	bne.n	800e4a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e45c:	4b49      	ldr	r3, [pc, #292]	@ (800e584 <xTaskIncrementTick+0x150>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d00b      	beq.n	800e47e <xTaskIncrementTick+0x4a>
	__asm volatile
 800e466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e46a:	f383 8811 	msr	BASEPRI, r3
 800e46e:	f3bf 8f6f 	isb	sy
 800e472:	f3bf 8f4f 	dsb	sy
 800e476:	603b      	str	r3, [r7, #0]
}
 800e478:	bf00      	nop
 800e47a:	bf00      	nop
 800e47c:	e7fd      	b.n	800e47a <xTaskIncrementTick+0x46>
 800e47e:	4b41      	ldr	r3, [pc, #260]	@ (800e584 <xTaskIncrementTick+0x150>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	60fb      	str	r3, [r7, #12]
 800e484:	4b40      	ldr	r3, [pc, #256]	@ (800e588 <xTaskIncrementTick+0x154>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4a3e      	ldr	r2, [pc, #248]	@ (800e584 <xTaskIncrementTick+0x150>)
 800e48a:	6013      	str	r3, [r2, #0]
 800e48c:	4a3e      	ldr	r2, [pc, #248]	@ (800e588 <xTaskIncrementTick+0x154>)
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	6013      	str	r3, [r2, #0]
 800e492:	4b3e      	ldr	r3, [pc, #248]	@ (800e58c <xTaskIncrementTick+0x158>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	3301      	adds	r3, #1
 800e498:	4a3c      	ldr	r2, [pc, #240]	@ (800e58c <xTaskIncrementTick+0x158>)
 800e49a:	6013      	str	r3, [r2, #0]
 800e49c:	f000 fae2 	bl	800ea64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e4a0:	4b3b      	ldr	r3, [pc, #236]	@ (800e590 <xTaskIncrementTick+0x15c>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	693a      	ldr	r2, [r7, #16]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d349      	bcc.n	800e53e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4aa:	4b36      	ldr	r3, [pc, #216]	@ (800e584 <xTaskIncrementTick+0x150>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d104      	bne.n	800e4be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4b4:	4b36      	ldr	r3, [pc, #216]	@ (800e590 <xTaskIncrementTick+0x15c>)
 800e4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ba:	601a      	str	r2, [r3, #0]
					break;
 800e4bc:	e03f      	b.n	800e53e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4be:	4b31      	ldr	r3, [pc, #196]	@ (800e584 <xTaskIncrementTick+0x150>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	68db      	ldr	r3, [r3, #12]
 800e4c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e4ce:	693a      	ldr	r2, [r7, #16]
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d203      	bcs.n	800e4de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e4d6:	4a2e      	ldr	r2, [pc, #184]	@ (800e590 <xTaskIncrementTick+0x15c>)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e4dc:	e02f      	b.n	800e53e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	3304      	adds	r3, #4
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7fe fcfa 	bl	800cedc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d004      	beq.n	800e4fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	3318      	adds	r3, #24
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7fe fcf1 	bl	800cedc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4fe:	4b25      	ldr	r3, [pc, #148]	@ (800e594 <xTaskIncrementTick+0x160>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	429a      	cmp	r2, r3
 800e504:	d903      	bls.n	800e50e <xTaskIncrementTick+0xda>
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e50a:	4a22      	ldr	r2, [pc, #136]	@ (800e594 <xTaskIncrementTick+0x160>)
 800e50c:	6013      	str	r3, [r2, #0]
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e512:	4613      	mov	r3, r2
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	4413      	add	r3, r2
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	4a1f      	ldr	r2, [pc, #124]	@ (800e598 <xTaskIncrementTick+0x164>)
 800e51c:	441a      	add	r2, r3
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	3304      	adds	r3, #4
 800e522:	4619      	mov	r1, r3
 800e524:	4610      	mov	r0, r2
 800e526:	f7fe fc7c 	bl	800ce22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e52e:	4b1b      	ldr	r3, [pc, #108]	@ (800e59c <xTaskIncrementTick+0x168>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e534:	429a      	cmp	r2, r3
 800e536:	d3b8      	bcc.n	800e4aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e538:	2301      	movs	r3, #1
 800e53a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e53c:	e7b5      	b.n	800e4aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e53e:	4b17      	ldr	r3, [pc, #92]	@ (800e59c <xTaskIncrementTick+0x168>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e544:	4914      	ldr	r1, [pc, #80]	@ (800e598 <xTaskIncrementTick+0x164>)
 800e546:	4613      	mov	r3, r2
 800e548:	009b      	lsls	r3, r3, #2
 800e54a:	4413      	add	r3, r2
 800e54c:	009b      	lsls	r3, r3, #2
 800e54e:	440b      	add	r3, r1
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2b01      	cmp	r3, #1
 800e554:	d901      	bls.n	800e55a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e556:	2301      	movs	r3, #1
 800e558:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e55a:	4b11      	ldr	r3, [pc, #68]	@ (800e5a0 <xTaskIncrementTick+0x16c>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d007      	beq.n	800e572 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e562:	2301      	movs	r3, #1
 800e564:	617b      	str	r3, [r7, #20]
 800e566:	e004      	b.n	800e572 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e568:	4b0e      	ldr	r3, [pc, #56]	@ (800e5a4 <xTaskIncrementTick+0x170>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	3301      	adds	r3, #1
 800e56e:	4a0d      	ldr	r2, [pc, #52]	@ (800e5a4 <xTaskIncrementTick+0x170>)
 800e570:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e572:	697b      	ldr	r3, [r7, #20]
}
 800e574:	4618      	mov	r0, r3
 800e576:	3718      	adds	r7, #24
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	20001074 	.word	0x20001074
 800e580:	20001050 	.word	0x20001050
 800e584:	20001004 	.word	0x20001004
 800e588:	20001008 	.word	0x20001008
 800e58c:	20001064 	.word	0x20001064
 800e590:	2000106c 	.word	0x2000106c
 800e594:	20001054 	.word	0x20001054
 800e598:	20000b7c 	.word	0x20000b7c
 800e59c:	20000b78 	.word	0x20000b78
 800e5a0:	20001060 	.word	0x20001060
 800e5a4:	2000105c 	.word	0x2000105c

0800e5a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e5ae:	4b2b      	ldr	r3, [pc, #172]	@ (800e65c <vTaskSwitchContext+0xb4>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d003      	beq.n	800e5be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e5b6:	4b2a      	ldr	r3, [pc, #168]	@ (800e660 <vTaskSwitchContext+0xb8>)
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e5bc:	e047      	b.n	800e64e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e5be:	4b28      	ldr	r3, [pc, #160]	@ (800e660 <vTaskSwitchContext+0xb8>)
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5c4:	4b27      	ldr	r3, [pc, #156]	@ (800e664 <vTaskSwitchContext+0xbc>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	60fb      	str	r3, [r7, #12]
 800e5ca:	e011      	b.n	800e5f0 <vTaskSwitchContext+0x48>
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d10b      	bne.n	800e5ea <vTaskSwitchContext+0x42>
	__asm volatile
 800e5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5d6:	f383 8811 	msr	BASEPRI, r3
 800e5da:	f3bf 8f6f 	isb	sy
 800e5de:	f3bf 8f4f 	dsb	sy
 800e5e2:	607b      	str	r3, [r7, #4]
}
 800e5e4:	bf00      	nop
 800e5e6:	bf00      	nop
 800e5e8:	e7fd      	b.n	800e5e6 <vTaskSwitchContext+0x3e>
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	60fb      	str	r3, [r7, #12]
 800e5f0:	491d      	ldr	r1, [pc, #116]	@ (800e668 <vTaskSwitchContext+0xc0>)
 800e5f2:	68fa      	ldr	r2, [r7, #12]
 800e5f4:	4613      	mov	r3, r2
 800e5f6:	009b      	lsls	r3, r3, #2
 800e5f8:	4413      	add	r3, r2
 800e5fa:	009b      	lsls	r3, r3, #2
 800e5fc:	440b      	add	r3, r1
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d0e3      	beq.n	800e5cc <vTaskSwitchContext+0x24>
 800e604:	68fa      	ldr	r2, [r7, #12]
 800e606:	4613      	mov	r3, r2
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	4413      	add	r3, r2
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	4a16      	ldr	r2, [pc, #88]	@ (800e668 <vTaskSwitchContext+0xc0>)
 800e610:	4413      	add	r3, r2
 800e612:	60bb      	str	r3, [r7, #8]
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	685a      	ldr	r2, [r3, #4]
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	605a      	str	r2, [r3, #4]
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	685a      	ldr	r2, [r3, #4]
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	3308      	adds	r3, #8
 800e626:	429a      	cmp	r2, r3
 800e628:	d104      	bne.n	800e634 <vTaskSwitchContext+0x8c>
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	685a      	ldr	r2, [r3, #4]
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	605a      	str	r2, [r3, #4]
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	4a0c      	ldr	r2, [pc, #48]	@ (800e66c <vTaskSwitchContext+0xc4>)
 800e63c:	6013      	str	r3, [r2, #0]
 800e63e:	4a09      	ldr	r2, [pc, #36]	@ (800e664 <vTaskSwitchContext+0xbc>)
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e644:	4b09      	ldr	r3, [pc, #36]	@ (800e66c <vTaskSwitchContext+0xc4>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	3354      	adds	r3, #84	@ 0x54
 800e64a:	4a09      	ldr	r2, [pc, #36]	@ (800e670 <vTaskSwitchContext+0xc8>)
 800e64c:	6013      	str	r3, [r2, #0]
}
 800e64e:	bf00      	nop
 800e650:	3714      	adds	r7, #20
 800e652:	46bd      	mov	sp, r7
 800e654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e658:	4770      	bx	lr
 800e65a:	bf00      	nop
 800e65c:	20001074 	.word	0x20001074
 800e660:	20001060 	.word	0x20001060
 800e664:	20001054 	.word	0x20001054
 800e668:	20000b7c 	.word	0x20000b7c
 800e66c:	20000b78 	.word	0x20000b78
 800e670:	20000118 	.word	0x20000118

0800e674 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d10b      	bne.n	800e69c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e688:	f383 8811 	msr	BASEPRI, r3
 800e68c:	f3bf 8f6f 	isb	sy
 800e690:	f3bf 8f4f 	dsb	sy
 800e694:	60fb      	str	r3, [r7, #12]
}
 800e696:	bf00      	nop
 800e698:	bf00      	nop
 800e69a:	e7fd      	b.n	800e698 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e69c:	4b07      	ldr	r3, [pc, #28]	@ (800e6bc <vTaskPlaceOnEventList+0x48>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	3318      	adds	r3, #24
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7fe fbe0 	bl	800ce6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e6aa:	2101      	movs	r1, #1
 800e6ac:	6838      	ldr	r0, [r7, #0]
 800e6ae:	f000 fd9f 	bl	800f1f0 <prvAddCurrentTaskToDelayedList>
}
 800e6b2:	bf00      	nop
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	20000b78 	.word	0x20000b78

0800e6c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b086      	sub	sp, #24
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d10b      	bne.n	800e6ea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6d6:	f383 8811 	msr	BASEPRI, r3
 800e6da:	f3bf 8f6f 	isb	sy
 800e6de:	f3bf 8f4f 	dsb	sy
 800e6e2:	617b      	str	r3, [r7, #20]
}
 800e6e4:	bf00      	nop
 800e6e6:	bf00      	nop
 800e6e8:	e7fd      	b.n	800e6e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e6ea:	4b0a      	ldr	r3, [pc, #40]	@ (800e714 <vTaskPlaceOnEventListRestricted+0x54>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	3318      	adds	r3, #24
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	68f8      	ldr	r0, [r7, #12]
 800e6f4:	f7fe fb95 	bl	800ce22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d002      	beq.n	800e704 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e6fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e702:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e704:	6879      	ldr	r1, [r7, #4]
 800e706:	68b8      	ldr	r0, [r7, #8]
 800e708:	f000 fd72 	bl	800f1f0 <prvAddCurrentTaskToDelayedList>
	}
 800e70c:	bf00      	nop
 800e70e:	3718      	adds	r7, #24
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}
 800e714:	20000b78 	.word	0x20000b78

0800e718 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b086      	sub	sp, #24
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	68db      	ldr	r3, [r3, #12]
 800e724:	68db      	ldr	r3, [r3, #12]
 800e726:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d10b      	bne.n	800e746 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e732:	f383 8811 	msr	BASEPRI, r3
 800e736:	f3bf 8f6f 	isb	sy
 800e73a:	f3bf 8f4f 	dsb	sy
 800e73e:	60fb      	str	r3, [r7, #12]
}
 800e740:	bf00      	nop
 800e742:	bf00      	nop
 800e744:	e7fd      	b.n	800e742 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	3318      	adds	r3, #24
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7fe fbc6 	bl	800cedc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e750:	4b1d      	ldr	r3, [pc, #116]	@ (800e7c8 <xTaskRemoveFromEventList+0xb0>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d11d      	bne.n	800e794 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	3304      	adds	r3, #4
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7fe fbbd 	bl	800cedc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e766:	4b19      	ldr	r3, [pc, #100]	@ (800e7cc <xTaskRemoveFromEventList+0xb4>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d903      	bls.n	800e776 <xTaskRemoveFromEventList+0x5e>
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e772:	4a16      	ldr	r2, [pc, #88]	@ (800e7cc <xTaskRemoveFromEventList+0xb4>)
 800e774:	6013      	str	r3, [r2, #0]
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e77a:	4613      	mov	r3, r2
 800e77c:	009b      	lsls	r3, r3, #2
 800e77e:	4413      	add	r3, r2
 800e780:	009b      	lsls	r3, r3, #2
 800e782:	4a13      	ldr	r2, [pc, #76]	@ (800e7d0 <xTaskRemoveFromEventList+0xb8>)
 800e784:	441a      	add	r2, r3
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	3304      	adds	r3, #4
 800e78a:	4619      	mov	r1, r3
 800e78c:	4610      	mov	r0, r2
 800e78e:	f7fe fb48 	bl	800ce22 <vListInsertEnd>
 800e792:	e005      	b.n	800e7a0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	3318      	adds	r3, #24
 800e798:	4619      	mov	r1, r3
 800e79a:	480e      	ldr	r0, [pc, #56]	@ (800e7d4 <xTaskRemoveFromEventList+0xbc>)
 800e79c:	f7fe fb41 	bl	800ce22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e7d8 <xTaskRemoveFromEventList+0xc0>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d905      	bls.n	800e7ba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e7b2:	4b0a      	ldr	r3, [pc, #40]	@ (800e7dc <xTaskRemoveFromEventList+0xc4>)
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	601a      	str	r2, [r3, #0]
 800e7b8:	e001      	b.n	800e7be <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e7be:	697b      	ldr	r3, [r7, #20]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3718      	adds	r7, #24
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}
 800e7c8:	20001074 	.word	0x20001074
 800e7cc:	20001054 	.word	0x20001054
 800e7d0:	20000b7c 	.word	0x20000b7c
 800e7d4:	2000100c 	.word	0x2000100c
 800e7d8:	20000b78 	.word	0x20000b78
 800e7dc:	20001060 	.word	0x20001060

0800e7e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e7e8:	4b06      	ldr	r3, [pc, #24]	@ (800e804 <vTaskInternalSetTimeOutState+0x24>)
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e7f0:	4b05      	ldr	r3, [pc, #20]	@ (800e808 <vTaskInternalSetTimeOutState+0x28>)
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	605a      	str	r2, [r3, #4]
}
 800e7f8:	bf00      	nop
 800e7fa:	370c      	adds	r7, #12
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr
 800e804:	20001064 	.word	0x20001064
 800e808:	20001050 	.word	0x20001050

0800e80c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b088      	sub	sp, #32
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d10b      	bne.n	800e834 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e820:	f383 8811 	msr	BASEPRI, r3
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	f3bf 8f4f 	dsb	sy
 800e82c:	613b      	str	r3, [r7, #16]
}
 800e82e:	bf00      	nop
 800e830:	bf00      	nop
 800e832:	e7fd      	b.n	800e830 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d10b      	bne.n	800e852 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e83e:	f383 8811 	msr	BASEPRI, r3
 800e842:	f3bf 8f6f 	isb	sy
 800e846:	f3bf 8f4f 	dsb	sy
 800e84a:	60fb      	str	r3, [r7, #12]
}
 800e84c:	bf00      	nop
 800e84e:	bf00      	nop
 800e850:	e7fd      	b.n	800e84e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e852:	f001 f9a9 	bl	800fba8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e856:	4b1d      	ldr	r3, [pc, #116]	@ (800e8cc <xTaskCheckForTimeOut+0xc0>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	69ba      	ldr	r2, [r7, #24]
 800e862:	1ad3      	subs	r3, r2, r3
 800e864:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e86e:	d102      	bne.n	800e876 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e870:	2300      	movs	r3, #0
 800e872:	61fb      	str	r3, [r7, #28]
 800e874:	e023      	b.n	800e8be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681a      	ldr	r2, [r3, #0]
 800e87a:	4b15      	ldr	r3, [pc, #84]	@ (800e8d0 <xTaskCheckForTimeOut+0xc4>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d007      	beq.n	800e892 <xTaskCheckForTimeOut+0x86>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	685b      	ldr	r3, [r3, #4]
 800e886:	69ba      	ldr	r2, [r7, #24]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d302      	bcc.n	800e892 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e88c:	2301      	movs	r3, #1
 800e88e:	61fb      	str	r3, [r7, #28]
 800e890:	e015      	b.n	800e8be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	697a      	ldr	r2, [r7, #20]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d20b      	bcs.n	800e8b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	681a      	ldr	r2, [r3, #0]
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	1ad2      	subs	r2, r2, r3
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f7ff ff99 	bl	800e7e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	61fb      	str	r3, [r7, #28]
 800e8b2:	e004      	b.n	800e8be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e8be:	f001 f9a5 	bl	800fc0c <vPortExitCritical>

	return xReturn;
 800e8c2:	69fb      	ldr	r3, [r7, #28]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3720      	adds	r7, #32
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	20001050 	.word	0x20001050
 800e8d0:	20001064 	.word	0x20001064

0800e8d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e8d8:	4b03      	ldr	r3, [pc, #12]	@ (800e8e8 <vTaskMissedYield+0x14>)
 800e8da:	2201      	movs	r2, #1
 800e8dc:	601a      	str	r2, [r3, #0]
}
 800e8de:	bf00      	nop
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr
 800e8e8:	20001060 	.word	0x20001060

0800e8ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e8f4:	f000 f852 	bl	800e99c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e8f8:	4b06      	ldr	r3, [pc, #24]	@ (800e914 <prvIdleTask+0x28>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d9f9      	bls.n	800e8f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e900:	4b05      	ldr	r3, [pc, #20]	@ (800e918 <prvIdleTask+0x2c>)
 800e902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e906:	601a      	str	r2, [r3, #0]
 800e908:	f3bf 8f4f 	dsb	sy
 800e90c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e910:	e7f0      	b.n	800e8f4 <prvIdleTask+0x8>
 800e912:	bf00      	nop
 800e914:	20000b7c 	.word	0x20000b7c
 800e918:	e000ed04 	.word	0xe000ed04

0800e91c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e922:	2300      	movs	r3, #0
 800e924:	607b      	str	r3, [r7, #4]
 800e926:	e00c      	b.n	800e942 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	4613      	mov	r3, r2
 800e92c:	009b      	lsls	r3, r3, #2
 800e92e:	4413      	add	r3, r2
 800e930:	009b      	lsls	r3, r3, #2
 800e932:	4a12      	ldr	r2, [pc, #72]	@ (800e97c <prvInitialiseTaskLists+0x60>)
 800e934:	4413      	add	r3, r2
 800e936:	4618      	mov	r0, r3
 800e938:	f7fe fa46 	bl	800cdc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	3301      	adds	r3, #1
 800e940:	607b      	str	r3, [r7, #4]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2b37      	cmp	r3, #55	@ 0x37
 800e946:	d9ef      	bls.n	800e928 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e948:	480d      	ldr	r0, [pc, #52]	@ (800e980 <prvInitialiseTaskLists+0x64>)
 800e94a:	f7fe fa3d 	bl	800cdc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e94e:	480d      	ldr	r0, [pc, #52]	@ (800e984 <prvInitialiseTaskLists+0x68>)
 800e950:	f7fe fa3a 	bl	800cdc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e954:	480c      	ldr	r0, [pc, #48]	@ (800e988 <prvInitialiseTaskLists+0x6c>)
 800e956:	f7fe fa37 	bl	800cdc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e95a:	480c      	ldr	r0, [pc, #48]	@ (800e98c <prvInitialiseTaskLists+0x70>)
 800e95c:	f7fe fa34 	bl	800cdc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e960:	480b      	ldr	r0, [pc, #44]	@ (800e990 <prvInitialiseTaskLists+0x74>)
 800e962:	f7fe fa31 	bl	800cdc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e966:	4b0b      	ldr	r3, [pc, #44]	@ (800e994 <prvInitialiseTaskLists+0x78>)
 800e968:	4a05      	ldr	r2, [pc, #20]	@ (800e980 <prvInitialiseTaskLists+0x64>)
 800e96a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e96c:	4b0a      	ldr	r3, [pc, #40]	@ (800e998 <prvInitialiseTaskLists+0x7c>)
 800e96e:	4a05      	ldr	r2, [pc, #20]	@ (800e984 <prvInitialiseTaskLists+0x68>)
 800e970:	601a      	str	r2, [r3, #0]
}
 800e972:	bf00      	nop
 800e974:	3708      	adds	r7, #8
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	20000b7c 	.word	0x20000b7c
 800e980:	20000fdc 	.word	0x20000fdc
 800e984:	20000ff0 	.word	0x20000ff0
 800e988:	2000100c 	.word	0x2000100c
 800e98c:	20001020 	.word	0x20001020
 800e990:	20001038 	.word	0x20001038
 800e994:	20001004 	.word	0x20001004
 800e998:	20001008 	.word	0x20001008

0800e99c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9a2:	e019      	b.n	800e9d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e9a4:	f001 f900 	bl	800fba8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9a8:	4b10      	ldr	r3, [pc, #64]	@ (800e9ec <prvCheckTasksWaitingTermination+0x50>)
 800e9aa:	68db      	ldr	r3, [r3, #12]
 800e9ac:	68db      	ldr	r3, [r3, #12]
 800e9ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	3304      	adds	r3, #4
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7fe fa91 	bl	800cedc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e9f0 <prvCheckTasksWaitingTermination+0x54>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	3b01      	subs	r3, #1
 800e9c0:	4a0b      	ldr	r2, [pc, #44]	@ (800e9f0 <prvCheckTasksWaitingTermination+0x54>)
 800e9c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e9c4:	4b0b      	ldr	r3, [pc, #44]	@ (800e9f4 <prvCheckTasksWaitingTermination+0x58>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	4a0a      	ldr	r2, [pc, #40]	@ (800e9f4 <prvCheckTasksWaitingTermination+0x58>)
 800e9cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e9ce:	f001 f91d 	bl	800fc0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f000 f810 	bl	800e9f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9d8:	4b06      	ldr	r3, [pc, #24]	@ (800e9f4 <prvCheckTasksWaitingTermination+0x58>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d1e1      	bne.n	800e9a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e9e0:	bf00      	nop
 800e9e2:	bf00      	nop
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	20001020 	.word	0x20001020
 800e9f0:	2000104c 	.word	0x2000104c
 800e9f4:	20001034 	.word	0x20001034

0800e9f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	3354      	adds	r3, #84	@ 0x54
 800ea04:	4618      	mov	r0, r3
 800ea06:	f002 fa51 	bl	8010eac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d108      	bne.n	800ea26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f001 fab5 	bl	800ff88 <vPortFree>
				vPortFree( pxTCB );
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f001 fab2 	bl	800ff88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ea24:	e019      	b.n	800ea5a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d103      	bne.n	800ea38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f001 faa9 	bl	800ff88 <vPortFree>
	}
 800ea36:	e010      	b.n	800ea5a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ea3e:	2b02      	cmp	r3, #2
 800ea40:	d00b      	beq.n	800ea5a <prvDeleteTCB+0x62>
	__asm volatile
 800ea42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea46:	f383 8811 	msr	BASEPRI, r3
 800ea4a:	f3bf 8f6f 	isb	sy
 800ea4e:	f3bf 8f4f 	dsb	sy
 800ea52:	60fb      	str	r3, [r7, #12]
}
 800ea54:	bf00      	nop
 800ea56:	bf00      	nop
 800ea58:	e7fd      	b.n	800ea56 <prvDeleteTCB+0x5e>
	}
 800ea5a:	bf00      	nop
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
	...

0800ea64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ea64:	b480      	push	{r7}
 800ea66:	b083      	sub	sp, #12
 800ea68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea6a:	4b0c      	ldr	r3, [pc, #48]	@ (800ea9c <prvResetNextTaskUnblockTime+0x38>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d104      	bne.n	800ea7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ea74:	4b0a      	ldr	r3, [pc, #40]	@ (800eaa0 <prvResetNextTaskUnblockTime+0x3c>)
 800ea76:	f04f 32ff 	mov.w	r2, #4294967295
 800ea7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ea7c:	e008      	b.n	800ea90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea7e:	4b07      	ldr	r3, [pc, #28]	@ (800ea9c <prvResetNextTaskUnblockTime+0x38>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	68db      	ldr	r3, [r3, #12]
 800ea86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	4a04      	ldr	r2, [pc, #16]	@ (800eaa0 <prvResetNextTaskUnblockTime+0x3c>)
 800ea8e:	6013      	str	r3, [r2, #0]
}
 800ea90:	bf00      	nop
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr
 800ea9c:	20001004 	.word	0x20001004
 800eaa0:	2000106c 	.word	0x2000106c

0800eaa4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800eaaa:	4b05      	ldr	r3, [pc, #20]	@ (800eac0 <xTaskGetCurrentTaskHandle+0x1c>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	607b      	str	r3, [r7, #4]

		return xReturn;
 800eab0:	687b      	ldr	r3, [r7, #4]
	}
 800eab2:	4618      	mov	r0, r3
 800eab4:	370c      	adds	r7, #12
 800eab6:	46bd      	mov	sp, r7
 800eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabc:	4770      	bx	lr
 800eabe:	bf00      	nop
 800eac0:	20000b78 	.word	0x20000b78

0800eac4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eac4:	b480      	push	{r7}
 800eac6:	b083      	sub	sp, #12
 800eac8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eaca:	4b0b      	ldr	r3, [pc, #44]	@ (800eaf8 <xTaskGetSchedulerState+0x34>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d102      	bne.n	800ead8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ead2:	2301      	movs	r3, #1
 800ead4:	607b      	str	r3, [r7, #4]
 800ead6:	e008      	b.n	800eaea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ead8:	4b08      	ldr	r3, [pc, #32]	@ (800eafc <xTaskGetSchedulerState+0x38>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d102      	bne.n	800eae6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eae0:	2302      	movs	r3, #2
 800eae2:	607b      	str	r3, [r7, #4]
 800eae4:	e001      	b.n	800eaea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eae6:	2300      	movs	r3, #0
 800eae8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eaea:	687b      	ldr	r3, [r7, #4]
	}
 800eaec:	4618      	mov	r0, r3
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr
 800eaf8:	20001058 	.word	0x20001058
 800eafc:	20001074 	.word	0x20001074

0800eb00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d051      	beq.n	800ebba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb1a:	4b2a      	ldr	r3, [pc, #168]	@ (800ebc4 <xTaskPriorityInherit+0xc4>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d241      	bcs.n	800eba8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	699b      	ldr	r3, [r3, #24]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	db06      	blt.n	800eb3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb2c:	4b25      	ldr	r3, [pc, #148]	@ (800ebc4 <xTaskPriorityInherit+0xc4>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb32:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	6959      	ldr	r1, [r3, #20]
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb42:	4613      	mov	r3, r2
 800eb44:	009b      	lsls	r3, r3, #2
 800eb46:	4413      	add	r3, r2
 800eb48:	009b      	lsls	r3, r3, #2
 800eb4a:	4a1f      	ldr	r2, [pc, #124]	@ (800ebc8 <xTaskPriorityInherit+0xc8>)
 800eb4c:	4413      	add	r3, r2
 800eb4e:	4299      	cmp	r1, r3
 800eb50:	d122      	bne.n	800eb98 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	3304      	adds	r3, #4
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7fe f9c0 	bl	800cedc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb5c:	4b19      	ldr	r3, [pc, #100]	@ (800ebc4 <xTaskPriorityInherit+0xc4>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb6a:	4b18      	ldr	r3, [pc, #96]	@ (800ebcc <xTaskPriorityInherit+0xcc>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d903      	bls.n	800eb7a <xTaskPriorityInherit+0x7a>
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb76:	4a15      	ldr	r2, [pc, #84]	@ (800ebcc <xTaskPriorityInherit+0xcc>)
 800eb78:	6013      	str	r3, [r2, #0]
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb7e:	4613      	mov	r3, r2
 800eb80:	009b      	lsls	r3, r3, #2
 800eb82:	4413      	add	r3, r2
 800eb84:	009b      	lsls	r3, r3, #2
 800eb86:	4a10      	ldr	r2, [pc, #64]	@ (800ebc8 <xTaskPriorityInherit+0xc8>)
 800eb88:	441a      	add	r2, r3
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	3304      	adds	r3, #4
 800eb8e:	4619      	mov	r1, r3
 800eb90:	4610      	mov	r0, r2
 800eb92:	f7fe f946 	bl	800ce22 <vListInsertEnd>
 800eb96:	e004      	b.n	800eba2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb98:	4b0a      	ldr	r3, [pc, #40]	@ (800ebc4 <xTaskPriorityInherit+0xc4>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eba2:	2301      	movs	r3, #1
 800eba4:	60fb      	str	r3, [r7, #12]
 800eba6:	e008      	b.n	800ebba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ebac:	4b05      	ldr	r3, [pc, #20]	@ (800ebc4 <xTaskPriorityInherit+0xc4>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d201      	bcs.n	800ebba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ebba:	68fb      	ldr	r3, [r7, #12]
	}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3710      	adds	r7, #16
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	20000b78 	.word	0x20000b78
 800ebc8:	20000b7c 	.word	0x20000b7c
 800ebcc:	20001054 	.word	0x20001054

0800ebd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b086      	sub	sp, #24
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d058      	beq.n	800ec98 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ebe6:	4b2f      	ldr	r3, [pc, #188]	@ (800eca4 <xTaskPriorityDisinherit+0xd4>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	693a      	ldr	r2, [r7, #16]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d00b      	beq.n	800ec08 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ebf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebf4:	f383 8811 	msr	BASEPRI, r3
 800ebf8:	f3bf 8f6f 	isb	sy
 800ebfc:	f3bf 8f4f 	dsb	sy
 800ec00:	60fb      	str	r3, [r7, #12]
}
 800ec02:	bf00      	nop
 800ec04:	bf00      	nop
 800ec06:	e7fd      	b.n	800ec04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d10b      	bne.n	800ec28 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ec10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec14:	f383 8811 	msr	BASEPRI, r3
 800ec18:	f3bf 8f6f 	isb	sy
 800ec1c:	f3bf 8f4f 	dsb	sy
 800ec20:	60bb      	str	r3, [r7, #8]
}
 800ec22:	bf00      	nop
 800ec24:	bf00      	nop
 800ec26:	e7fd      	b.n	800ec24 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec2c:	1e5a      	subs	r2, r3, #1
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d02c      	beq.n	800ec98 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d128      	bne.n	800ec98 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	3304      	adds	r3, #4
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7fe f946 	bl	800cedc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec68:	4b0f      	ldr	r3, [pc, #60]	@ (800eca8 <xTaskPriorityDisinherit+0xd8>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d903      	bls.n	800ec78 <xTaskPriorityDisinherit+0xa8>
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec74:	4a0c      	ldr	r2, [pc, #48]	@ (800eca8 <xTaskPriorityDisinherit+0xd8>)
 800ec76:	6013      	str	r3, [r2, #0]
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec7c:	4613      	mov	r3, r2
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	4413      	add	r3, r2
 800ec82:	009b      	lsls	r3, r3, #2
 800ec84:	4a09      	ldr	r2, [pc, #36]	@ (800ecac <xTaskPriorityDisinherit+0xdc>)
 800ec86:	441a      	add	r2, r3
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	3304      	adds	r3, #4
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	4610      	mov	r0, r2
 800ec90:	f7fe f8c7 	bl	800ce22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ec94:	2301      	movs	r3, #1
 800ec96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec98:	697b      	ldr	r3, [r7, #20]
	}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3718      	adds	r7, #24
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	20000b78 	.word	0x20000b78
 800eca8:	20001054 	.word	0x20001054
 800ecac:	20000b7c 	.word	0x20000b7c

0800ecb0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b088      	sub	sp, #32
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d06c      	beq.n	800eda2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ecc8:	69bb      	ldr	r3, [r7, #24]
 800ecca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d10b      	bne.n	800ece8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ecd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecd4:	f383 8811 	msr	BASEPRI, r3
 800ecd8:	f3bf 8f6f 	isb	sy
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	60fb      	str	r3, [r7, #12]
}
 800ece2:	bf00      	nop
 800ece4:	bf00      	nop
 800ece6:	e7fd      	b.n	800ece4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ecec:	683a      	ldr	r2, [r7, #0]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d902      	bls.n	800ecf8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	61fb      	str	r3, [r7, #28]
 800ecf6:	e002      	b.n	800ecfe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ecf8:	69bb      	ldr	r3, [r7, #24]
 800ecfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ecfc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ecfe:	69bb      	ldr	r3, [r7, #24]
 800ed00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed02:	69fa      	ldr	r2, [r7, #28]
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d04c      	beq.n	800eda2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed0c:	697a      	ldr	r2, [r7, #20]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d147      	bne.n	800eda2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ed12:	4b26      	ldr	r3, [pc, #152]	@ (800edac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	69ba      	ldr	r2, [r7, #24]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d10b      	bne.n	800ed34 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ed1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed20:	f383 8811 	msr	BASEPRI, r3
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	f3bf 8f4f 	dsb	sy
 800ed2c:	60bb      	str	r3, [r7, #8]
}
 800ed2e:	bf00      	nop
 800ed30:	bf00      	nop
 800ed32:	e7fd      	b.n	800ed30 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	69fa      	ldr	r2, [r7, #28]
 800ed3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	699b      	ldr	r3, [r3, #24]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	db04      	blt.n	800ed52 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed48:	69fb      	ldr	r3, [r7, #28]
 800ed4a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ed4e:	69bb      	ldr	r3, [r7, #24]
 800ed50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed52:	69bb      	ldr	r3, [r7, #24]
 800ed54:	6959      	ldr	r1, [r3, #20]
 800ed56:	693a      	ldr	r2, [r7, #16]
 800ed58:	4613      	mov	r3, r2
 800ed5a:	009b      	lsls	r3, r3, #2
 800ed5c:	4413      	add	r3, r2
 800ed5e:	009b      	lsls	r3, r3, #2
 800ed60:	4a13      	ldr	r2, [pc, #76]	@ (800edb0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ed62:	4413      	add	r3, r2
 800ed64:	4299      	cmp	r1, r3
 800ed66:	d11c      	bne.n	800eda2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	3304      	adds	r3, #4
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7fe f8b5 	bl	800cedc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ed72:	69bb      	ldr	r3, [r7, #24]
 800ed74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed76:	4b0f      	ldr	r3, [pc, #60]	@ (800edb4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d903      	bls.n	800ed86 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ed7e:	69bb      	ldr	r3, [r7, #24]
 800ed80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed82:	4a0c      	ldr	r2, [pc, #48]	@ (800edb4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ed84:	6013      	str	r3, [r2, #0]
 800ed86:	69bb      	ldr	r3, [r7, #24]
 800ed88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed8a:	4613      	mov	r3, r2
 800ed8c:	009b      	lsls	r3, r3, #2
 800ed8e:	4413      	add	r3, r2
 800ed90:	009b      	lsls	r3, r3, #2
 800ed92:	4a07      	ldr	r2, [pc, #28]	@ (800edb0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ed94:	441a      	add	r2, r3
 800ed96:	69bb      	ldr	r3, [r7, #24]
 800ed98:	3304      	adds	r3, #4
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	4610      	mov	r0, r2
 800ed9e:	f7fe f840 	bl	800ce22 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eda2:	bf00      	nop
 800eda4:	3720      	adds	r7, #32
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	20000b78 	.word	0x20000b78
 800edb0:	20000b7c 	.word	0x20000b7c
 800edb4:	20001054 	.word	0x20001054

0800edb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800edb8:	b480      	push	{r7}
 800edba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800edbc:	4b07      	ldr	r3, [pc, #28]	@ (800eddc <pvTaskIncrementMutexHeldCount+0x24>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d004      	beq.n	800edce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800edc4:	4b05      	ldr	r3, [pc, #20]	@ (800eddc <pvTaskIncrementMutexHeldCount+0x24>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800edca:	3201      	adds	r2, #1
 800edcc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800edce:	4b03      	ldr	r3, [pc, #12]	@ (800eddc <pvTaskIncrementMutexHeldCount+0x24>)
 800edd0:	681b      	ldr	r3, [r3, #0]
	}
 800edd2:	4618      	mov	r0, r3
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	4770      	bx	lr
 800eddc:	20000b78 	.word	0x20000b78

0800ede0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b086      	sub	sp, #24
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	60f8      	str	r0, [r7, #12]
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	607a      	str	r2, [r7, #4]
 800edec:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800edee:	f000 fedb 	bl	800fba8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800edf2:	4b29      	ldr	r3, [pc, #164]	@ (800ee98 <xTaskNotifyWait+0xb8>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800edfa:	b2db      	uxtb	r3, r3
 800edfc:	2b02      	cmp	r3, #2
 800edfe:	d01c      	beq.n	800ee3a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ee00:	4b25      	ldr	r3, [pc, #148]	@ (800ee98 <xTaskNotifyWait+0xb8>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800ee08:	68fa      	ldr	r2, [r7, #12]
 800ee0a:	43d2      	mvns	r2, r2
 800ee0c:	400a      	ands	r2, r1
 800ee0e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ee12:	4b21      	ldr	r3, [pc, #132]	@ (800ee98 <xTaskNotifyWait+0xb8>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	2201      	movs	r2, #1
 800ee18:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d00b      	beq.n	800ee3a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee22:	2101      	movs	r1, #1
 800ee24:	6838      	ldr	r0, [r7, #0]
 800ee26:	f000 f9e3 	bl	800f1f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ee2a:	4b1c      	ldr	r3, [pc, #112]	@ (800ee9c <xTaskNotifyWait+0xbc>)
 800ee2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee30:	601a      	str	r2, [r3, #0]
 800ee32:	f3bf 8f4f 	dsb	sy
 800ee36:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ee3a:	f000 fee7 	bl	800fc0c <vPortExitCritical>

		taskENTER_CRITICAL();
 800ee3e:	f000 feb3 	bl	800fba8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d005      	beq.n	800ee54 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ee48:	4b13      	ldr	r3, [pc, #76]	@ (800ee98 <xTaskNotifyWait+0xb8>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ee54:	4b10      	ldr	r3, [pc, #64]	@ (800ee98 <xTaskNotifyWait+0xb8>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	2b02      	cmp	r3, #2
 800ee60:	d002      	beq.n	800ee68 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ee62:	2300      	movs	r3, #0
 800ee64:	617b      	str	r3, [r7, #20]
 800ee66:	e00a      	b.n	800ee7e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ee68:	4b0b      	ldr	r3, [pc, #44]	@ (800ee98 <xTaskNotifyWait+0xb8>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800ee70:	68ba      	ldr	r2, [r7, #8]
 800ee72:	43d2      	mvns	r2, r2
 800ee74:	400a      	ands	r2, r1
 800ee76:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee7e:	4b06      	ldr	r3, [pc, #24]	@ (800ee98 <xTaskNotifyWait+0xb8>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	2200      	movs	r2, #0
 800ee84:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800ee88:	f000 fec0 	bl	800fc0c <vPortExitCritical>

		return xReturn;
 800ee8c:	697b      	ldr	r3, [r7, #20]
	}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3718      	adds	r7, #24
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	20000b78 	.word	0x20000b78
 800ee9c:	e000ed04 	.word	0xe000ed04

0800eea0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b08a      	sub	sp, #40	@ 0x28
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	60f8      	str	r0, [r7, #12]
 800eea8:	60b9      	str	r1, [r7, #8]
 800eeaa:	603b      	str	r3, [r7, #0]
 800eeac:	4613      	mov	r3, r2
 800eeae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d10b      	bne.n	800eed2 <xTaskGenericNotify+0x32>
	__asm volatile
 800eeba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eebe:	f383 8811 	msr	BASEPRI, r3
 800eec2:	f3bf 8f6f 	isb	sy
 800eec6:	f3bf 8f4f 	dsb	sy
 800eeca:	61bb      	str	r3, [r7, #24]
}
 800eecc:	bf00      	nop
 800eece:	bf00      	nop
 800eed0:	e7fd      	b.n	800eece <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800eed6:	f000 fe67 	bl	800fba8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d004      	beq.n	800eeea <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800eee0:	6a3b      	ldr	r3, [r7, #32]
 800eee2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800eeea:	6a3b      	ldr	r3, [r7, #32]
 800eeec:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800eef0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800eef2:	6a3b      	ldr	r3, [r7, #32]
 800eef4:	2202      	movs	r2, #2
 800eef6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800eefa:	79fb      	ldrb	r3, [r7, #7]
 800eefc:	2b04      	cmp	r3, #4
 800eefe:	d82e      	bhi.n	800ef5e <xTaskGenericNotify+0xbe>
 800ef00:	a201      	add	r2, pc, #4	@ (adr r2, 800ef08 <xTaskGenericNotify+0x68>)
 800ef02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef06:	bf00      	nop
 800ef08:	0800ef83 	.word	0x0800ef83
 800ef0c:	0800ef1d 	.word	0x0800ef1d
 800ef10:	0800ef2f 	.word	0x0800ef2f
 800ef14:	0800ef3f 	.word	0x0800ef3f
 800ef18:	0800ef49 	.word	0x0800ef49
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ef1c:	6a3b      	ldr	r3, [r7, #32]
 800ef1e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	431a      	orrs	r2, r3
 800ef26:	6a3b      	ldr	r3, [r7, #32]
 800ef28:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ef2c:	e02c      	b.n	800ef88 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ef2e:	6a3b      	ldr	r3, [r7, #32]
 800ef30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef34:	1c5a      	adds	r2, r3, #1
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ef3c:	e024      	b.n	800ef88 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ef3e:	6a3b      	ldr	r3, [r7, #32]
 800ef40:	68ba      	ldr	r2, [r7, #8]
 800ef42:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ef46:	e01f      	b.n	800ef88 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ef48:	7ffb      	ldrb	r3, [r7, #31]
 800ef4a:	2b02      	cmp	r3, #2
 800ef4c:	d004      	beq.n	800ef58 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ef4e:	6a3b      	ldr	r3, [r7, #32]
 800ef50:	68ba      	ldr	r2, [r7, #8]
 800ef52:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ef56:	e017      	b.n	800ef88 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800ef5c:	e014      	b.n	800ef88 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ef5e:	6a3b      	ldr	r3, [r7, #32]
 800ef60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef68:	d00d      	beq.n	800ef86 <xTaskGenericNotify+0xe6>
	__asm volatile
 800ef6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef6e:	f383 8811 	msr	BASEPRI, r3
 800ef72:	f3bf 8f6f 	isb	sy
 800ef76:	f3bf 8f4f 	dsb	sy
 800ef7a:	617b      	str	r3, [r7, #20]
}
 800ef7c:	bf00      	nop
 800ef7e:	bf00      	nop
 800ef80:	e7fd      	b.n	800ef7e <xTaskGenericNotify+0xde>
					break;
 800ef82:	bf00      	nop
 800ef84:	e000      	b.n	800ef88 <xTaskGenericNotify+0xe8>

					break;
 800ef86:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ef88:	7ffb      	ldrb	r3, [r7, #31]
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	d13b      	bne.n	800f006 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef8e:	6a3b      	ldr	r3, [r7, #32]
 800ef90:	3304      	adds	r3, #4
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fd ffa2 	bl	800cedc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ef98:	6a3b      	ldr	r3, [r7, #32]
 800ef9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef9c:	4b1d      	ldr	r3, [pc, #116]	@ (800f014 <xTaskGenericNotify+0x174>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d903      	bls.n	800efac <xTaskGenericNotify+0x10c>
 800efa4:	6a3b      	ldr	r3, [r7, #32]
 800efa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efa8:	4a1a      	ldr	r2, [pc, #104]	@ (800f014 <xTaskGenericNotify+0x174>)
 800efaa:	6013      	str	r3, [r2, #0]
 800efac:	6a3b      	ldr	r3, [r7, #32]
 800efae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efb0:	4613      	mov	r3, r2
 800efb2:	009b      	lsls	r3, r3, #2
 800efb4:	4413      	add	r3, r2
 800efb6:	009b      	lsls	r3, r3, #2
 800efb8:	4a17      	ldr	r2, [pc, #92]	@ (800f018 <xTaskGenericNotify+0x178>)
 800efba:	441a      	add	r2, r3
 800efbc:	6a3b      	ldr	r3, [r7, #32]
 800efbe:	3304      	adds	r3, #4
 800efc0:	4619      	mov	r1, r3
 800efc2:	4610      	mov	r0, r2
 800efc4:	f7fd ff2d 	bl	800ce22 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800efc8:	6a3b      	ldr	r3, [r7, #32]
 800efca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d00b      	beq.n	800efe8 <xTaskGenericNotify+0x148>
	__asm volatile
 800efd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efd4:	f383 8811 	msr	BASEPRI, r3
 800efd8:	f3bf 8f6f 	isb	sy
 800efdc:	f3bf 8f4f 	dsb	sy
 800efe0:	613b      	str	r3, [r7, #16]
}
 800efe2:	bf00      	nop
 800efe4:	bf00      	nop
 800efe6:	e7fd      	b.n	800efe4 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800efe8:	6a3b      	ldr	r3, [r7, #32]
 800efea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efec:	4b0b      	ldr	r3, [pc, #44]	@ (800f01c <xTaskGenericNotify+0x17c>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d907      	bls.n	800f006 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800eff6:	4b0a      	ldr	r3, [pc, #40]	@ (800f020 <xTaskGenericNotify+0x180>)
 800eff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800effc:	601a      	str	r2, [r3, #0]
 800effe:	f3bf 8f4f 	dsb	sy
 800f002:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f006:	f000 fe01 	bl	800fc0c <vPortExitCritical>

		return xReturn;
 800f00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3728      	adds	r7, #40	@ 0x28
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	20001054 	.word	0x20001054
 800f018:	20000b7c 	.word	0x20000b7c
 800f01c:	20000b78 	.word	0x20000b78
 800f020:	e000ed04 	.word	0xe000ed04

0800f024 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f024:	b580      	push	{r7, lr}
 800f026:	b08e      	sub	sp, #56	@ 0x38
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	603b      	str	r3, [r7, #0]
 800f030:	4613      	mov	r3, r2
 800f032:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800f034:	2301      	movs	r3, #1
 800f036:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d10b      	bne.n	800f056 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800f03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f042:	f383 8811 	msr	BASEPRI, r3
 800f046:	f3bf 8f6f 	isb	sy
 800f04a:	f3bf 8f4f 	dsb	sy
 800f04e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f050:	bf00      	nop
 800f052:	bf00      	nop
 800f054:	e7fd      	b.n	800f052 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f056:	f000 fe87 	bl	800fd68 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800f05e:	f3ef 8211 	mrs	r2, BASEPRI
 800f062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f066:	f383 8811 	msr	BASEPRI, r3
 800f06a:	f3bf 8f6f 	isb	sy
 800f06e:	f3bf 8f4f 	dsb	sy
 800f072:	623a      	str	r2, [r7, #32]
 800f074:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800f076:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f078:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d004      	beq.n	800f08a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f082:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f08c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f090:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f096:	2202      	movs	r2, #2
 800f098:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f09c:	79fb      	ldrb	r3, [r7, #7]
 800f09e:	2b04      	cmp	r3, #4
 800f0a0:	d82e      	bhi.n	800f100 <xTaskGenericNotifyFromISR+0xdc>
 800f0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800f0a8 <xTaskGenericNotifyFromISR+0x84>)
 800f0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a8:	0800f125 	.word	0x0800f125
 800f0ac:	0800f0bd 	.word	0x0800f0bd
 800f0b0:	0800f0cf 	.word	0x0800f0cf
 800f0b4:	0800f0df 	.word	0x0800f0df
 800f0b8:	0800f0e9 	.word	0x0800f0e9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0be:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	431a      	orrs	r2, r3
 800f0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0c8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f0cc:	e02d      	b.n	800f12a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f0d4:	1c5a      	adds	r2, r3, #1
 800f0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0d8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f0dc:	e025      	b.n	800f12a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0e0:	68ba      	ldr	r2, [r7, #8]
 800f0e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f0e6:	e020      	b.n	800f12a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f0e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f0ec:	2b02      	cmp	r3, #2
 800f0ee:	d004      	beq.n	800f0fa <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0f2:	68ba      	ldr	r2, [r7, #8]
 800f0f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f0f8:	e017      	b.n	800f12a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800f0fe:	e014      	b.n	800f12a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f102:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f10a:	d00d      	beq.n	800f128 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800f10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f110:	f383 8811 	msr	BASEPRI, r3
 800f114:	f3bf 8f6f 	isb	sy
 800f118:	f3bf 8f4f 	dsb	sy
 800f11c:	61bb      	str	r3, [r7, #24]
}
 800f11e:	bf00      	nop
 800f120:	bf00      	nop
 800f122:	e7fd      	b.n	800f120 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800f124:	bf00      	nop
 800f126:	e000      	b.n	800f12a <xTaskGenericNotifyFromISR+0x106>
					break;
 800f128:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f12a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f12e:	2b01      	cmp	r3, #1
 800f130:	d147      	bne.n	800f1c2 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f136:	2b00      	cmp	r3, #0
 800f138:	d00b      	beq.n	800f152 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800f13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f13e:	f383 8811 	msr	BASEPRI, r3
 800f142:	f3bf 8f6f 	isb	sy
 800f146:	f3bf 8f4f 	dsb	sy
 800f14a:	617b      	str	r3, [r7, #20]
}
 800f14c:	bf00      	nop
 800f14e:	bf00      	nop
 800f150:	e7fd      	b.n	800f14e <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f152:	4b21      	ldr	r3, [pc, #132]	@ (800f1d8 <xTaskGenericNotifyFromISR+0x1b4>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d11d      	bne.n	800f196 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f15c:	3304      	adds	r3, #4
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fd febc 	bl	800cedc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f168:	4b1c      	ldr	r3, [pc, #112]	@ (800f1dc <xTaskGenericNotifyFromISR+0x1b8>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d903      	bls.n	800f178 <xTaskGenericNotifyFromISR+0x154>
 800f170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f174:	4a19      	ldr	r2, [pc, #100]	@ (800f1dc <xTaskGenericNotifyFromISR+0x1b8>)
 800f176:	6013      	str	r3, [r2, #0]
 800f178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f17a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f17c:	4613      	mov	r3, r2
 800f17e:	009b      	lsls	r3, r3, #2
 800f180:	4413      	add	r3, r2
 800f182:	009b      	lsls	r3, r3, #2
 800f184:	4a16      	ldr	r2, [pc, #88]	@ (800f1e0 <xTaskGenericNotifyFromISR+0x1bc>)
 800f186:	441a      	add	r2, r3
 800f188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f18a:	3304      	adds	r3, #4
 800f18c:	4619      	mov	r1, r3
 800f18e:	4610      	mov	r0, r2
 800f190:	f7fd fe47 	bl	800ce22 <vListInsertEnd>
 800f194:	e005      	b.n	800f1a2 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f198:	3318      	adds	r3, #24
 800f19a:	4619      	mov	r1, r3
 800f19c:	4811      	ldr	r0, [pc, #68]	@ (800f1e4 <xTaskGenericNotifyFromISR+0x1c0>)
 800f19e:	f7fd fe40 	bl	800ce22 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1a6:	4b10      	ldr	r3, [pc, #64]	@ (800f1e8 <xTaskGenericNotifyFromISR+0x1c4>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d908      	bls.n	800f1c2 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f1b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d002      	beq.n	800f1bc <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f1b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1b8:	2201      	movs	r2, #1
 800f1ba:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f1bc:	4b0b      	ldr	r3, [pc, #44]	@ (800f1ec <xTaskGenericNotifyFromISR+0x1c8>)
 800f1be:	2201      	movs	r2, #1
 800f1c0:	601a      	str	r2, [r3, #0]
 800f1c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	f383 8811 	msr	BASEPRI, r3
}
 800f1cc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3738      	adds	r7, #56	@ 0x38
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	20001074 	.word	0x20001074
 800f1dc:	20001054 	.word	0x20001054
 800f1e0:	20000b7c 	.word	0x20000b7c
 800f1e4:	2000100c 	.word	0x2000100c
 800f1e8:	20000b78 	.word	0x20000b78
 800f1ec:	20001060 	.word	0x20001060

0800f1f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f1fa:	4b21      	ldr	r3, [pc, #132]	@ (800f280 <prvAddCurrentTaskToDelayedList+0x90>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f200:	4b20      	ldr	r3, [pc, #128]	@ (800f284 <prvAddCurrentTaskToDelayedList+0x94>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	3304      	adds	r3, #4
 800f206:	4618      	mov	r0, r3
 800f208:	f7fd fe68 	bl	800cedc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f212:	d10a      	bne.n	800f22a <prvAddCurrentTaskToDelayedList+0x3a>
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d007      	beq.n	800f22a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f21a:	4b1a      	ldr	r3, [pc, #104]	@ (800f284 <prvAddCurrentTaskToDelayedList+0x94>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	3304      	adds	r3, #4
 800f220:	4619      	mov	r1, r3
 800f222:	4819      	ldr	r0, [pc, #100]	@ (800f288 <prvAddCurrentTaskToDelayedList+0x98>)
 800f224:	f7fd fdfd 	bl	800ce22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f228:	e026      	b.n	800f278 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f22a:	68fa      	ldr	r2, [r7, #12]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	4413      	add	r3, r2
 800f230:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f232:	4b14      	ldr	r3, [pc, #80]	@ (800f284 <prvAddCurrentTaskToDelayedList+0x94>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	68ba      	ldr	r2, [r7, #8]
 800f238:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f23a:	68ba      	ldr	r2, [r7, #8]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	429a      	cmp	r2, r3
 800f240:	d209      	bcs.n	800f256 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f242:	4b12      	ldr	r3, [pc, #72]	@ (800f28c <prvAddCurrentTaskToDelayedList+0x9c>)
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	4b0f      	ldr	r3, [pc, #60]	@ (800f284 <prvAddCurrentTaskToDelayedList+0x94>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	3304      	adds	r3, #4
 800f24c:	4619      	mov	r1, r3
 800f24e:	4610      	mov	r0, r2
 800f250:	f7fd fe0b 	bl	800ce6a <vListInsert>
}
 800f254:	e010      	b.n	800f278 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f256:	4b0e      	ldr	r3, [pc, #56]	@ (800f290 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	4b0a      	ldr	r3, [pc, #40]	@ (800f284 <prvAddCurrentTaskToDelayedList+0x94>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	3304      	adds	r3, #4
 800f260:	4619      	mov	r1, r3
 800f262:	4610      	mov	r0, r2
 800f264:	f7fd fe01 	bl	800ce6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f268:	4b0a      	ldr	r3, [pc, #40]	@ (800f294 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	68ba      	ldr	r2, [r7, #8]
 800f26e:	429a      	cmp	r2, r3
 800f270:	d202      	bcs.n	800f278 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f272:	4a08      	ldr	r2, [pc, #32]	@ (800f294 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	6013      	str	r3, [r2, #0]
}
 800f278:	bf00      	nop
 800f27a:	3710      	adds	r7, #16
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	20001050 	.word	0x20001050
 800f284:	20000b78 	.word	0x20000b78
 800f288:	20001038 	.word	0x20001038
 800f28c:	20001008 	.word	0x20001008
 800f290:	20001004 	.word	0x20001004
 800f294:	2000106c 	.word	0x2000106c

0800f298 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b08a      	sub	sp, #40	@ 0x28
 800f29c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f2a2:	f000 fb13 	bl	800f8cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f2a6:	4b1d      	ldr	r3, [pc, #116]	@ (800f31c <xTimerCreateTimerTask+0x84>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d021      	beq.n	800f2f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f2b6:	1d3a      	adds	r2, r7, #4
 800f2b8:	f107 0108 	add.w	r1, r7, #8
 800f2bc:	f107 030c 	add.w	r3, r7, #12
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7fd fd67 	bl	800cd94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f2c6:	6879      	ldr	r1, [r7, #4]
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	68fa      	ldr	r2, [r7, #12]
 800f2cc:	9202      	str	r2, [sp, #8]
 800f2ce:	9301      	str	r3, [sp, #4]
 800f2d0:	2302      	movs	r3, #2
 800f2d2:	9300      	str	r3, [sp, #0]
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	460a      	mov	r2, r1
 800f2d8:	4911      	ldr	r1, [pc, #68]	@ (800f320 <xTimerCreateTimerTask+0x88>)
 800f2da:	4812      	ldr	r0, [pc, #72]	@ (800f324 <xTimerCreateTimerTask+0x8c>)
 800f2dc:	f7fe fdc0 	bl	800de60 <xTaskCreateStatic>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	4a11      	ldr	r2, [pc, #68]	@ (800f328 <xTimerCreateTimerTask+0x90>)
 800f2e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f2e6:	4b10      	ldr	r3, [pc, #64]	@ (800f328 <xTimerCreateTimerTask+0x90>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d001      	beq.n	800f2f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d10b      	bne.n	800f310 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2fc:	f383 8811 	msr	BASEPRI, r3
 800f300:	f3bf 8f6f 	isb	sy
 800f304:	f3bf 8f4f 	dsb	sy
 800f308:	613b      	str	r3, [r7, #16]
}
 800f30a:	bf00      	nop
 800f30c:	bf00      	nop
 800f30e:	e7fd      	b.n	800f30c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f310:	697b      	ldr	r3, [r7, #20]
}
 800f312:	4618      	mov	r0, r3
 800f314:	3718      	adds	r7, #24
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	bf00      	nop
 800f31c:	200010a8 	.word	0x200010a8
 800f320:	08011c84 	.word	0x08011c84
 800f324:	0800f465 	.word	0x0800f465
 800f328:	200010ac 	.word	0x200010ac

0800f32c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b08a      	sub	sp, #40	@ 0x28
 800f330:	af00      	add	r7, sp, #0
 800f332:	60f8      	str	r0, [r7, #12]
 800f334:	60b9      	str	r1, [r7, #8]
 800f336:	607a      	str	r2, [r7, #4]
 800f338:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f33a:	2300      	movs	r3, #0
 800f33c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d10b      	bne.n	800f35c <xTimerGenericCommand+0x30>
	__asm volatile
 800f344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f348:	f383 8811 	msr	BASEPRI, r3
 800f34c:	f3bf 8f6f 	isb	sy
 800f350:	f3bf 8f4f 	dsb	sy
 800f354:	623b      	str	r3, [r7, #32]
}
 800f356:	bf00      	nop
 800f358:	bf00      	nop
 800f35a:	e7fd      	b.n	800f358 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f35c:	4b19      	ldr	r3, [pc, #100]	@ (800f3c4 <xTimerGenericCommand+0x98>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d02a      	beq.n	800f3ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	2b05      	cmp	r3, #5
 800f374:	dc18      	bgt.n	800f3a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f376:	f7ff fba5 	bl	800eac4 <xTaskGetSchedulerState>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b02      	cmp	r3, #2
 800f37e:	d109      	bne.n	800f394 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f380:	4b10      	ldr	r3, [pc, #64]	@ (800f3c4 <xTimerGenericCommand+0x98>)
 800f382:	6818      	ldr	r0, [r3, #0]
 800f384:	f107 0110 	add.w	r1, r7, #16
 800f388:	2300      	movs	r3, #0
 800f38a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f38c:	f7fd ffce 	bl	800d32c <xQueueGenericSend>
 800f390:	6278      	str	r0, [r7, #36]	@ 0x24
 800f392:	e012      	b.n	800f3ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f394:	4b0b      	ldr	r3, [pc, #44]	@ (800f3c4 <xTimerGenericCommand+0x98>)
 800f396:	6818      	ldr	r0, [r3, #0]
 800f398:	f107 0110 	add.w	r1, r7, #16
 800f39c:	2300      	movs	r3, #0
 800f39e:	2200      	movs	r2, #0
 800f3a0:	f7fd ffc4 	bl	800d32c <xQueueGenericSend>
 800f3a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800f3a6:	e008      	b.n	800f3ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f3a8:	4b06      	ldr	r3, [pc, #24]	@ (800f3c4 <xTimerGenericCommand+0x98>)
 800f3aa:	6818      	ldr	r0, [r3, #0]
 800f3ac:	f107 0110 	add.w	r1, r7, #16
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	683a      	ldr	r2, [r7, #0]
 800f3b4:	f7fe f8bc 	bl	800d530 <xQueueGenericSendFromISR>
 800f3b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3728      	adds	r7, #40	@ 0x28
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}
 800f3c4:	200010a8 	.word	0x200010a8

0800f3c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b088      	sub	sp, #32
 800f3cc:	af02      	add	r7, sp, #8
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3d2:	4b23      	ldr	r3, [pc, #140]	@ (800f460 <prvProcessExpiredTimer+0x98>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	68db      	ldr	r3, [r3, #12]
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	3304      	adds	r3, #4
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7fd fd7b 	bl	800cedc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f3ec:	f003 0304 	and.w	r3, r3, #4
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d023      	beq.n	800f43c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	699a      	ldr	r2, [r3, #24]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	18d1      	adds	r1, r2, r3
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	683a      	ldr	r2, [r7, #0]
 800f400:	6978      	ldr	r0, [r7, #20]
 800f402:	f000 f8d5 	bl	800f5b0 <prvInsertTimerInActiveList>
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d020      	beq.n	800f44e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f40c:	2300      	movs	r3, #0
 800f40e:	9300      	str	r3, [sp, #0]
 800f410:	2300      	movs	r3, #0
 800f412:	687a      	ldr	r2, [r7, #4]
 800f414:	2100      	movs	r1, #0
 800f416:	6978      	ldr	r0, [r7, #20]
 800f418:	f7ff ff88 	bl	800f32c <xTimerGenericCommand>
 800f41c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d114      	bne.n	800f44e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f428:	f383 8811 	msr	BASEPRI, r3
 800f42c:	f3bf 8f6f 	isb	sy
 800f430:	f3bf 8f4f 	dsb	sy
 800f434:	60fb      	str	r3, [r7, #12]
}
 800f436:	bf00      	nop
 800f438:	bf00      	nop
 800f43a:	e7fd      	b.n	800f438 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f442:	f023 0301 	bic.w	r3, r3, #1
 800f446:	b2da      	uxtb	r2, r3
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	6a1b      	ldr	r3, [r3, #32]
 800f452:	6978      	ldr	r0, [r7, #20]
 800f454:	4798      	blx	r3
}
 800f456:	bf00      	nop
 800f458:	3718      	adds	r7, #24
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	200010a0 	.word	0x200010a0

0800f464 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b084      	sub	sp, #16
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f46c:	f107 0308 	add.w	r3, r7, #8
 800f470:	4618      	mov	r0, r3
 800f472:	f000 f859 	bl	800f528 <prvGetNextExpireTime>
 800f476:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	4619      	mov	r1, r3
 800f47c:	68f8      	ldr	r0, [r7, #12]
 800f47e:	f000 f805 	bl	800f48c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f482:	f000 f8d7 	bl	800f634 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f486:	bf00      	nop
 800f488:	e7f0      	b.n	800f46c <prvTimerTask+0x8>
	...

0800f48c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f496:	f7fe ff11 	bl	800e2bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f49a:	f107 0308 	add.w	r3, r7, #8
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f000 f866 	bl	800f570 <prvSampleTimeNow>
 800f4a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d130      	bne.n	800f50e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d10a      	bne.n	800f4c8 <prvProcessTimerOrBlockTask+0x3c>
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d806      	bhi.n	800f4c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f4ba:	f7fe ff0d 	bl	800e2d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f4be:	68f9      	ldr	r1, [r7, #12]
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f7ff ff81 	bl	800f3c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f4c6:	e024      	b.n	800f512 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d008      	beq.n	800f4e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f4ce:	4b13      	ldr	r3, [pc, #76]	@ (800f51c <prvProcessTimerOrBlockTask+0x90>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d101      	bne.n	800f4dc <prvProcessTimerOrBlockTask+0x50>
 800f4d8:	2301      	movs	r3, #1
 800f4da:	e000      	b.n	800f4de <prvProcessTimerOrBlockTask+0x52>
 800f4dc:	2300      	movs	r3, #0
 800f4de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f4e0:	4b0f      	ldr	r3, [pc, #60]	@ (800f520 <prvProcessTimerOrBlockTask+0x94>)
 800f4e2:	6818      	ldr	r0, [r3, #0]
 800f4e4:	687a      	ldr	r2, [r7, #4]
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	1ad3      	subs	r3, r2, r3
 800f4ea:	683a      	ldr	r2, [r7, #0]
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	f7fe fc83 	bl	800ddf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f4f2:	f7fe fef1 	bl	800e2d8 <xTaskResumeAll>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d10a      	bne.n	800f512 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f4fc:	4b09      	ldr	r3, [pc, #36]	@ (800f524 <prvProcessTimerOrBlockTask+0x98>)
 800f4fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f502:	601a      	str	r2, [r3, #0]
 800f504:	f3bf 8f4f 	dsb	sy
 800f508:	f3bf 8f6f 	isb	sy
}
 800f50c:	e001      	b.n	800f512 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f50e:	f7fe fee3 	bl	800e2d8 <xTaskResumeAll>
}
 800f512:	bf00      	nop
 800f514:	3710      	adds	r7, #16
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	200010a4 	.word	0x200010a4
 800f520:	200010a8 	.word	0x200010a8
 800f524:	e000ed04 	.word	0xe000ed04

0800f528 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f528:	b480      	push	{r7}
 800f52a:	b085      	sub	sp, #20
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f530:	4b0e      	ldr	r3, [pc, #56]	@ (800f56c <prvGetNextExpireTime+0x44>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d101      	bne.n	800f53e <prvGetNextExpireTime+0x16>
 800f53a:	2201      	movs	r2, #1
 800f53c:	e000      	b.n	800f540 <prvGetNextExpireTime+0x18>
 800f53e:	2200      	movs	r2, #0
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d105      	bne.n	800f558 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f54c:	4b07      	ldr	r3, [pc, #28]	@ (800f56c <prvGetNextExpireTime+0x44>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	60fb      	str	r3, [r7, #12]
 800f556:	e001      	b.n	800f55c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f558:	2300      	movs	r3, #0
 800f55a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f55c:	68fb      	ldr	r3, [r7, #12]
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3714      	adds	r7, #20
 800f562:	46bd      	mov	sp, r7
 800f564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f568:	4770      	bx	lr
 800f56a:	bf00      	nop
 800f56c:	200010a0 	.word	0x200010a0

0800f570 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b084      	sub	sp, #16
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f578:	f7fe ff4c 	bl	800e414 <xTaskGetTickCount>
 800f57c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f57e:	4b0b      	ldr	r3, [pc, #44]	@ (800f5ac <prvSampleTimeNow+0x3c>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	68fa      	ldr	r2, [r7, #12]
 800f584:	429a      	cmp	r2, r3
 800f586:	d205      	bcs.n	800f594 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f588:	f000 f93a 	bl	800f800 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2201      	movs	r2, #1
 800f590:	601a      	str	r2, [r3, #0]
 800f592:	e002      	b.n	800f59a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2200      	movs	r2, #0
 800f598:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f59a:	4a04      	ldr	r2, [pc, #16]	@ (800f5ac <prvSampleTimeNow+0x3c>)
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	200010b0 	.word	0x200010b0

0800f5b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b086      	sub	sp, #24
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	60f8      	str	r0, [r7, #12]
 800f5b8:	60b9      	str	r1, [r7, #8]
 800f5ba:	607a      	str	r2, [r7, #4]
 800f5bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	68ba      	ldr	r2, [r7, #8]
 800f5c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	68fa      	ldr	r2, [r7, #12]
 800f5cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f5ce:	68ba      	ldr	r2, [r7, #8]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d812      	bhi.n	800f5fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5d6:	687a      	ldr	r2, [r7, #4]
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	1ad2      	subs	r2, r2, r3
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	699b      	ldr	r3, [r3, #24]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d302      	bcc.n	800f5ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	617b      	str	r3, [r7, #20]
 800f5e8:	e01b      	b.n	800f622 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f5ea:	4b10      	ldr	r3, [pc, #64]	@ (800f62c <prvInsertTimerInActiveList+0x7c>)
 800f5ec:	681a      	ldr	r2, [r3, #0]
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	3304      	adds	r3, #4
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	4610      	mov	r0, r2
 800f5f6:	f7fd fc38 	bl	800ce6a <vListInsert>
 800f5fa:	e012      	b.n	800f622 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f5fc:	687a      	ldr	r2, [r7, #4]
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	429a      	cmp	r2, r3
 800f602:	d206      	bcs.n	800f612 <prvInsertTimerInActiveList+0x62>
 800f604:	68ba      	ldr	r2, [r7, #8]
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	429a      	cmp	r2, r3
 800f60a:	d302      	bcc.n	800f612 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f60c:	2301      	movs	r3, #1
 800f60e:	617b      	str	r3, [r7, #20]
 800f610:	e007      	b.n	800f622 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f612:	4b07      	ldr	r3, [pc, #28]	@ (800f630 <prvInsertTimerInActiveList+0x80>)
 800f614:	681a      	ldr	r2, [r3, #0]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	3304      	adds	r3, #4
 800f61a:	4619      	mov	r1, r3
 800f61c:	4610      	mov	r0, r2
 800f61e:	f7fd fc24 	bl	800ce6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f622:	697b      	ldr	r3, [r7, #20]
}
 800f624:	4618      	mov	r0, r3
 800f626:	3718      	adds	r7, #24
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}
 800f62c:	200010a4 	.word	0x200010a4
 800f630:	200010a0 	.word	0x200010a0

0800f634 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b08e      	sub	sp, #56	@ 0x38
 800f638:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f63a:	e0ce      	b.n	800f7da <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	da19      	bge.n	800f676 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f642:	1d3b      	adds	r3, r7, #4
 800f644:	3304      	adds	r3, #4
 800f646:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d10b      	bne.n	800f666 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f652:	f383 8811 	msr	BASEPRI, r3
 800f656:	f3bf 8f6f 	isb	sy
 800f65a:	f3bf 8f4f 	dsb	sy
 800f65e:	61fb      	str	r3, [r7, #28]
}
 800f660:	bf00      	nop
 800f662:	bf00      	nop
 800f664:	e7fd      	b.n	800f662 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f66c:	6850      	ldr	r0, [r2, #4]
 800f66e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f670:	6892      	ldr	r2, [r2, #8]
 800f672:	4611      	mov	r1, r2
 800f674:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	f2c0 80ae 	blt.w	800f7da <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f684:	695b      	ldr	r3, [r3, #20]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d004      	beq.n	800f694 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f68c:	3304      	adds	r3, #4
 800f68e:	4618      	mov	r0, r3
 800f690:	f7fd fc24 	bl	800cedc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f694:	463b      	mov	r3, r7
 800f696:	4618      	mov	r0, r3
 800f698:	f7ff ff6a 	bl	800f570 <prvSampleTimeNow>
 800f69c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2b09      	cmp	r3, #9
 800f6a2:	f200 8097 	bhi.w	800f7d4 <prvProcessReceivedCommands+0x1a0>
 800f6a6:	a201      	add	r2, pc, #4	@ (adr r2, 800f6ac <prvProcessReceivedCommands+0x78>)
 800f6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ac:	0800f6d5 	.word	0x0800f6d5
 800f6b0:	0800f6d5 	.word	0x0800f6d5
 800f6b4:	0800f6d5 	.word	0x0800f6d5
 800f6b8:	0800f74b 	.word	0x0800f74b
 800f6bc:	0800f75f 	.word	0x0800f75f
 800f6c0:	0800f7ab 	.word	0x0800f7ab
 800f6c4:	0800f6d5 	.word	0x0800f6d5
 800f6c8:	0800f6d5 	.word	0x0800f6d5
 800f6cc:	0800f74b 	.word	0x0800f74b
 800f6d0:	0800f75f 	.word	0x0800f75f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f6da:	f043 0301 	orr.w	r3, r3, #1
 800f6de:	b2da      	uxtb	r2, r3
 800f6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f6e6:	68ba      	ldr	r2, [r7, #8]
 800f6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ea:	699b      	ldr	r3, [r3, #24]
 800f6ec:	18d1      	adds	r1, r2, r3
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f6f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6f4:	f7ff ff5c 	bl	800f5b0 <prvInsertTimerInActiveList>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d06c      	beq.n	800f7d8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f700:	6a1b      	ldr	r3, [r3, #32]
 800f702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f704:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f70c:	f003 0304 	and.w	r3, r3, #4
 800f710:	2b00      	cmp	r3, #0
 800f712:	d061      	beq.n	800f7d8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f714:	68ba      	ldr	r2, [r7, #8]
 800f716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f718:	699b      	ldr	r3, [r3, #24]
 800f71a:	441a      	add	r2, r3
 800f71c:	2300      	movs	r3, #0
 800f71e:	9300      	str	r3, [sp, #0]
 800f720:	2300      	movs	r3, #0
 800f722:	2100      	movs	r1, #0
 800f724:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f726:	f7ff fe01 	bl	800f32c <xTimerGenericCommand>
 800f72a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f72c:	6a3b      	ldr	r3, [r7, #32]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d152      	bne.n	800f7d8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f736:	f383 8811 	msr	BASEPRI, r3
 800f73a:	f3bf 8f6f 	isb	sy
 800f73e:	f3bf 8f4f 	dsb	sy
 800f742:	61bb      	str	r3, [r7, #24]
}
 800f744:	bf00      	nop
 800f746:	bf00      	nop
 800f748:	e7fd      	b.n	800f746 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f74c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f750:	f023 0301 	bic.w	r3, r3, #1
 800f754:	b2da      	uxtb	r2, r3
 800f756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f758:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f75c:	e03d      	b.n	800f7da <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f760:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f764:	f043 0301 	orr.w	r3, r3, #1
 800f768:	b2da      	uxtb	r2, r3
 800f76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f76c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f770:	68ba      	ldr	r2, [r7, #8]
 800f772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f774:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f778:	699b      	ldr	r3, [r3, #24]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d10b      	bne.n	800f796 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f782:	f383 8811 	msr	BASEPRI, r3
 800f786:	f3bf 8f6f 	isb	sy
 800f78a:	f3bf 8f4f 	dsb	sy
 800f78e:	617b      	str	r3, [r7, #20]
}
 800f790:	bf00      	nop
 800f792:	bf00      	nop
 800f794:	e7fd      	b.n	800f792 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f798:	699a      	ldr	r2, [r3, #24]
 800f79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f79c:	18d1      	adds	r1, r2, r3
 800f79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f7a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7a4:	f7ff ff04 	bl	800f5b0 <prvInsertTimerInActiveList>
					break;
 800f7a8:	e017      	b.n	800f7da <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f7b0:	f003 0302 	and.w	r3, r3, #2
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d103      	bne.n	800f7c0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f7b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7ba:	f000 fbe5 	bl	800ff88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f7be:	e00c      	b.n	800f7da <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f7c6:	f023 0301 	bic.w	r3, r3, #1
 800f7ca:	b2da      	uxtb	r2, r3
 800f7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f7d2:	e002      	b.n	800f7da <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f7d4:	bf00      	nop
 800f7d6:	e000      	b.n	800f7da <prvProcessReceivedCommands+0x1a6>
					break;
 800f7d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f7da:	4b08      	ldr	r3, [pc, #32]	@ (800f7fc <prvProcessReceivedCommands+0x1c8>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	1d39      	adds	r1, r7, #4
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7fd ff42 	bl	800d66c <xQueueReceive>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	f47f af26 	bne.w	800f63c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f7f0:	bf00      	nop
 800f7f2:	bf00      	nop
 800f7f4:	3730      	adds	r7, #48	@ 0x30
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	200010a8 	.word	0x200010a8

0800f800 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b088      	sub	sp, #32
 800f804:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f806:	e049      	b.n	800f89c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f808:	4b2e      	ldr	r3, [pc, #184]	@ (800f8c4 <prvSwitchTimerLists+0xc4>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	68db      	ldr	r3, [r3, #12]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f812:	4b2c      	ldr	r3, [pc, #176]	@ (800f8c4 <prvSwitchTimerLists+0xc4>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	68db      	ldr	r3, [r3, #12]
 800f818:	68db      	ldr	r3, [r3, #12]
 800f81a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	3304      	adds	r3, #4
 800f820:	4618      	mov	r0, r3
 800f822:	f7fd fb5b 	bl	800cedc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	6a1b      	ldr	r3, [r3, #32]
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f834:	f003 0304 	and.w	r3, r3, #4
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d02f      	beq.n	800f89c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	699b      	ldr	r3, [r3, #24]
 800f840:	693a      	ldr	r2, [r7, #16]
 800f842:	4413      	add	r3, r2
 800f844:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f846:	68ba      	ldr	r2, [r7, #8]
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d90e      	bls.n	800f86c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	68ba      	ldr	r2, [r7, #8]
 800f852:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	68fa      	ldr	r2, [r7, #12]
 800f858:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f85a:	4b1a      	ldr	r3, [pc, #104]	@ (800f8c4 <prvSwitchTimerLists+0xc4>)
 800f85c:	681a      	ldr	r2, [r3, #0]
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	3304      	adds	r3, #4
 800f862:	4619      	mov	r1, r3
 800f864:	4610      	mov	r0, r2
 800f866:	f7fd fb00 	bl	800ce6a <vListInsert>
 800f86a:	e017      	b.n	800f89c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f86c:	2300      	movs	r3, #0
 800f86e:	9300      	str	r3, [sp, #0]
 800f870:	2300      	movs	r3, #0
 800f872:	693a      	ldr	r2, [r7, #16]
 800f874:	2100      	movs	r1, #0
 800f876:	68f8      	ldr	r0, [r7, #12]
 800f878:	f7ff fd58 	bl	800f32c <xTimerGenericCommand>
 800f87c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d10b      	bne.n	800f89c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f888:	f383 8811 	msr	BASEPRI, r3
 800f88c:	f3bf 8f6f 	isb	sy
 800f890:	f3bf 8f4f 	dsb	sy
 800f894:	603b      	str	r3, [r7, #0]
}
 800f896:	bf00      	nop
 800f898:	bf00      	nop
 800f89a:	e7fd      	b.n	800f898 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f89c:	4b09      	ldr	r3, [pc, #36]	@ (800f8c4 <prvSwitchTimerLists+0xc4>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d1b0      	bne.n	800f808 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f8a6:	4b07      	ldr	r3, [pc, #28]	@ (800f8c4 <prvSwitchTimerLists+0xc4>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f8ac:	4b06      	ldr	r3, [pc, #24]	@ (800f8c8 <prvSwitchTimerLists+0xc8>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	4a04      	ldr	r2, [pc, #16]	@ (800f8c4 <prvSwitchTimerLists+0xc4>)
 800f8b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f8b4:	4a04      	ldr	r2, [pc, #16]	@ (800f8c8 <prvSwitchTimerLists+0xc8>)
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	6013      	str	r3, [r2, #0]
}
 800f8ba:	bf00      	nop
 800f8bc:	3718      	adds	r7, #24
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	200010a0 	.word	0x200010a0
 800f8c8:	200010a4 	.word	0x200010a4

0800f8cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f8d2:	f000 f969 	bl	800fba8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f8d6:	4b15      	ldr	r3, [pc, #84]	@ (800f92c <prvCheckForValidListAndQueue+0x60>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d120      	bne.n	800f920 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f8de:	4814      	ldr	r0, [pc, #80]	@ (800f930 <prvCheckForValidListAndQueue+0x64>)
 800f8e0:	f7fd fa72 	bl	800cdc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f8e4:	4813      	ldr	r0, [pc, #76]	@ (800f934 <prvCheckForValidListAndQueue+0x68>)
 800f8e6:	f7fd fa6f 	bl	800cdc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f8ea:	4b13      	ldr	r3, [pc, #76]	@ (800f938 <prvCheckForValidListAndQueue+0x6c>)
 800f8ec:	4a10      	ldr	r2, [pc, #64]	@ (800f930 <prvCheckForValidListAndQueue+0x64>)
 800f8ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f8f0:	4b12      	ldr	r3, [pc, #72]	@ (800f93c <prvCheckForValidListAndQueue+0x70>)
 800f8f2:	4a10      	ldr	r2, [pc, #64]	@ (800f934 <prvCheckForValidListAndQueue+0x68>)
 800f8f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	9300      	str	r3, [sp, #0]
 800f8fa:	4b11      	ldr	r3, [pc, #68]	@ (800f940 <prvCheckForValidListAndQueue+0x74>)
 800f8fc:	4a11      	ldr	r2, [pc, #68]	@ (800f944 <prvCheckForValidListAndQueue+0x78>)
 800f8fe:	2110      	movs	r1, #16
 800f900:	200a      	movs	r0, #10
 800f902:	f7fd fb7f 	bl	800d004 <xQueueGenericCreateStatic>
 800f906:	4603      	mov	r3, r0
 800f908:	4a08      	ldr	r2, [pc, #32]	@ (800f92c <prvCheckForValidListAndQueue+0x60>)
 800f90a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f90c:	4b07      	ldr	r3, [pc, #28]	@ (800f92c <prvCheckForValidListAndQueue+0x60>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d005      	beq.n	800f920 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f914:	4b05      	ldr	r3, [pc, #20]	@ (800f92c <prvCheckForValidListAndQueue+0x60>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	490b      	ldr	r1, [pc, #44]	@ (800f948 <prvCheckForValidListAndQueue+0x7c>)
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7fe fa42 	bl	800dda4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f920:	f000 f974 	bl	800fc0c <vPortExitCritical>
}
 800f924:	bf00      	nop
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	200010a8 	.word	0x200010a8
 800f930:	20001078 	.word	0x20001078
 800f934:	2000108c 	.word	0x2000108c
 800f938:	200010a0 	.word	0x200010a0
 800f93c:	200010a4 	.word	0x200010a4
 800f940:	20001154 	.word	0x20001154
 800f944:	200010b4 	.word	0x200010b4
 800f948:	08011c8c 	.word	0x08011c8c

0800f94c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f94c:	b480      	push	{r7}
 800f94e:	b085      	sub	sp, #20
 800f950:	af00      	add	r7, sp, #0
 800f952:	60f8      	str	r0, [r7, #12]
 800f954:	60b9      	str	r1, [r7, #8]
 800f956:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	3b04      	subs	r3, #4
 800f95c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	3b04      	subs	r3, #4
 800f96a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	f023 0201 	bic.w	r2, r3, #1
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	3b04      	subs	r3, #4
 800f97a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f97c:	4a0c      	ldr	r2, [pc, #48]	@ (800f9b0 <pxPortInitialiseStack+0x64>)
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	3b14      	subs	r3, #20
 800f986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f988:	687a      	ldr	r2, [r7, #4]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	3b04      	subs	r3, #4
 800f992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	f06f 0202 	mvn.w	r2, #2
 800f99a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	3b20      	subs	r3, #32
 800f9a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3714      	adds	r7, #20
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr
 800f9b0:	0800f9b5 	.word	0x0800f9b5

0800f9b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f9b4:	b480      	push	{r7}
 800f9b6:	b085      	sub	sp, #20
 800f9b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f9be:	4b13      	ldr	r3, [pc, #76]	@ (800fa0c <prvTaskExitError+0x58>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9c6:	d00b      	beq.n	800f9e0 <prvTaskExitError+0x2c>
	__asm volatile
 800f9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9cc:	f383 8811 	msr	BASEPRI, r3
 800f9d0:	f3bf 8f6f 	isb	sy
 800f9d4:	f3bf 8f4f 	dsb	sy
 800f9d8:	60fb      	str	r3, [r7, #12]
}
 800f9da:	bf00      	nop
 800f9dc:	bf00      	nop
 800f9de:	e7fd      	b.n	800f9dc <prvTaskExitError+0x28>
	__asm volatile
 800f9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9e4:	f383 8811 	msr	BASEPRI, r3
 800f9e8:	f3bf 8f6f 	isb	sy
 800f9ec:	f3bf 8f4f 	dsb	sy
 800f9f0:	60bb      	str	r3, [r7, #8]
}
 800f9f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f9f4:	bf00      	nop
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d0fc      	beq.n	800f9f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f9fc:	bf00      	nop
 800f9fe:	bf00      	nop
 800fa00:	3714      	adds	r7, #20
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr
 800fa0a:	bf00      	nop
 800fa0c:	200000a0 	.word	0x200000a0

0800fa10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fa10:	4b07      	ldr	r3, [pc, #28]	@ (800fa30 <pxCurrentTCBConst2>)
 800fa12:	6819      	ldr	r1, [r3, #0]
 800fa14:	6808      	ldr	r0, [r1, #0]
 800fa16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa1a:	f380 8809 	msr	PSP, r0
 800fa1e:	f3bf 8f6f 	isb	sy
 800fa22:	f04f 0000 	mov.w	r0, #0
 800fa26:	f380 8811 	msr	BASEPRI, r0
 800fa2a:	4770      	bx	lr
 800fa2c:	f3af 8000 	nop.w

0800fa30 <pxCurrentTCBConst2>:
 800fa30:	20000b78 	.word	0x20000b78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fa34:	bf00      	nop
 800fa36:	bf00      	nop

0800fa38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fa38:	4808      	ldr	r0, [pc, #32]	@ (800fa5c <prvPortStartFirstTask+0x24>)
 800fa3a:	6800      	ldr	r0, [r0, #0]
 800fa3c:	6800      	ldr	r0, [r0, #0]
 800fa3e:	f380 8808 	msr	MSP, r0
 800fa42:	f04f 0000 	mov.w	r0, #0
 800fa46:	f380 8814 	msr	CONTROL, r0
 800fa4a:	b662      	cpsie	i
 800fa4c:	b661      	cpsie	f
 800fa4e:	f3bf 8f4f 	dsb	sy
 800fa52:	f3bf 8f6f 	isb	sy
 800fa56:	df00      	svc	0
 800fa58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fa5a:	bf00      	nop
 800fa5c:	e000ed08 	.word	0xe000ed08

0800fa60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b086      	sub	sp, #24
 800fa64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fa66:	4b47      	ldr	r3, [pc, #284]	@ (800fb84 <xPortStartScheduler+0x124>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	4a47      	ldr	r2, [pc, #284]	@ (800fb88 <xPortStartScheduler+0x128>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d10b      	bne.n	800fa88 <xPortStartScheduler+0x28>
	__asm volatile
 800fa70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa74:	f383 8811 	msr	BASEPRI, r3
 800fa78:	f3bf 8f6f 	isb	sy
 800fa7c:	f3bf 8f4f 	dsb	sy
 800fa80:	613b      	str	r3, [r7, #16]
}
 800fa82:	bf00      	nop
 800fa84:	bf00      	nop
 800fa86:	e7fd      	b.n	800fa84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fa88:	4b3e      	ldr	r3, [pc, #248]	@ (800fb84 <xPortStartScheduler+0x124>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a3f      	ldr	r2, [pc, #252]	@ (800fb8c <xPortStartScheduler+0x12c>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d10b      	bne.n	800faaa <xPortStartScheduler+0x4a>
	__asm volatile
 800fa92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa96:	f383 8811 	msr	BASEPRI, r3
 800fa9a:	f3bf 8f6f 	isb	sy
 800fa9e:	f3bf 8f4f 	dsb	sy
 800faa2:	60fb      	str	r3, [r7, #12]
}
 800faa4:	bf00      	nop
 800faa6:	bf00      	nop
 800faa8:	e7fd      	b.n	800faa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800faaa:	4b39      	ldr	r3, [pc, #228]	@ (800fb90 <xPortStartScheduler+0x130>)
 800faac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	b2db      	uxtb	r3, r3
 800fab4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	22ff      	movs	r2, #255	@ 0xff
 800faba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	b2db      	uxtb	r3, r3
 800fac2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fac4:	78fb      	ldrb	r3, [r7, #3]
 800fac6:	b2db      	uxtb	r3, r3
 800fac8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800facc:	b2da      	uxtb	r2, r3
 800face:	4b31      	ldr	r3, [pc, #196]	@ (800fb94 <xPortStartScheduler+0x134>)
 800fad0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fad2:	4b31      	ldr	r3, [pc, #196]	@ (800fb98 <xPortStartScheduler+0x138>)
 800fad4:	2207      	movs	r2, #7
 800fad6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fad8:	e009      	b.n	800faee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fada:	4b2f      	ldr	r3, [pc, #188]	@ (800fb98 <xPortStartScheduler+0x138>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	3b01      	subs	r3, #1
 800fae0:	4a2d      	ldr	r2, [pc, #180]	@ (800fb98 <xPortStartScheduler+0x138>)
 800fae2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fae4:	78fb      	ldrb	r3, [r7, #3]
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	005b      	lsls	r3, r3, #1
 800faea:	b2db      	uxtb	r3, r3
 800faec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800faee:	78fb      	ldrb	r3, [r7, #3]
 800faf0:	b2db      	uxtb	r3, r3
 800faf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800faf6:	2b80      	cmp	r3, #128	@ 0x80
 800faf8:	d0ef      	beq.n	800fada <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fafa:	4b27      	ldr	r3, [pc, #156]	@ (800fb98 <xPortStartScheduler+0x138>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f1c3 0307 	rsb	r3, r3, #7
 800fb02:	2b04      	cmp	r3, #4
 800fb04:	d00b      	beq.n	800fb1e <xPortStartScheduler+0xbe>
	__asm volatile
 800fb06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb0a:	f383 8811 	msr	BASEPRI, r3
 800fb0e:	f3bf 8f6f 	isb	sy
 800fb12:	f3bf 8f4f 	dsb	sy
 800fb16:	60bb      	str	r3, [r7, #8]
}
 800fb18:	bf00      	nop
 800fb1a:	bf00      	nop
 800fb1c:	e7fd      	b.n	800fb1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fb1e:	4b1e      	ldr	r3, [pc, #120]	@ (800fb98 <xPortStartScheduler+0x138>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	021b      	lsls	r3, r3, #8
 800fb24:	4a1c      	ldr	r2, [pc, #112]	@ (800fb98 <xPortStartScheduler+0x138>)
 800fb26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fb28:	4b1b      	ldr	r3, [pc, #108]	@ (800fb98 <xPortStartScheduler+0x138>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fb30:	4a19      	ldr	r2, [pc, #100]	@ (800fb98 <xPortStartScheduler+0x138>)
 800fb32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	b2da      	uxtb	r2, r3
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fb3c:	4b17      	ldr	r3, [pc, #92]	@ (800fb9c <xPortStartScheduler+0x13c>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	4a16      	ldr	r2, [pc, #88]	@ (800fb9c <xPortStartScheduler+0x13c>)
 800fb42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fb46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fb48:	4b14      	ldr	r3, [pc, #80]	@ (800fb9c <xPortStartScheduler+0x13c>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	4a13      	ldr	r2, [pc, #76]	@ (800fb9c <xPortStartScheduler+0x13c>)
 800fb4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fb52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fb54:	f000 f8da 	bl	800fd0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fb58:	4b11      	ldr	r3, [pc, #68]	@ (800fba0 <xPortStartScheduler+0x140>)
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fb5e:	f000 f8f9 	bl	800fd54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fb62:	4b10      	ldr	r3, [pc, #64]	@ (800fba4 <xPortStartScheduler+0x144>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	4a0f      	ldr	r2, [pc, #60]	@ (800fba4 <xPortStartScheduler+0x144>)
 800fb68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fb6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fb6e:	f7ff ff63 	bl	800fa38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fb72:	f7fe fd19 	bl	800e5a8 <vTaskSwitchContext>
	prvTaskExitError();
 800fb76:	f7ff ff1d 	bl	800f9b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fb7a:	2300      	movs	r3, #0
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3718      	adds	r7, #24
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	e000ed00 	.word	0xe000ed00
 800fb88:	410fc271 	.word	0x410fc271
 800fb8c:	410fc270 	.word	0x410fc270
 800fb90:	e000e400 	.word	0xe000e400
 800fb94:	200011a4 	.word	0x200011a4
 800fb98:	200011a8 	.word	0x200011a8
 800fb9c:	e000ed20 	.word	0xe000ed20
 800fba0:	200000a0 	.word	0x200000a0
 800fba4:	e000ef34 	.word	0xe000ef34

0800fba8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b083      	sub	sp, #12
 800fbac:	af00      	add	r7, sp, #0
	__asm volatile
 800fbae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbb2:	f383 8811 	msr	BASEPRI, r3
 800fbb6:	f3bf 8f6f 	isb	sy
 800fbba:	f3bf 8f4f 	dsb	sy
 800fbbe:	607b      	str	r3, [r7, #4]
}
 800fbc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fbc2:	4b10      	ldr	r3, [pc, #64]	@ (800fc04 <vPortEnterCritical+0x5c>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	4a0e      	ldr	r2, [pc, #56]	@ (800fc04 <vPortEnterCritical+0x5c>)
 800fbca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fbcc:	4b0d      	ldr	r3, [pc, #52]	@ (800fc04 <vPortEnterCritical+0x5c>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	d110      	bne.n	800fbf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fbd4:	4b0c      	ldr	r3, [pc, #48]	@ (800fc08 <vPortEnterCritical+0x60>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d00b      	beq.n	800fbf6 <vPortEnterCritical+0x4e>
	__asm volatile
 800fbde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbe2:	f383 8811 	msr	BASEPRI, r3
 800fbe6:	f3bf 8f6f 	isb	sy
 800fbea:	f3bf 8f4f 	dsb	sy
 800fbee:	603b      	str	r3, [r7, #0]
}
 800fbf0:	bf00      	nop
 800fbf2:	bf00      	nop
 800fbf4:	e7fd      	b.n	800fbf2 <vPortEnterCritical+0x4a>
	}
}
 800fbf6:	bf00      	nop
 800fbf8:	370c      	adds	r7, #12
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop
 800fc04:	200000a0 	.word	0x200000a0
 800fc08:	e000ed04 	.word	0xe000ed04

0800fc0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b083      	sub	sp, #12
 800fc10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fc12:	4b12      	ldr	r3, [pc, #72]	@ (800fc5c <vPortExitCritical+0x50>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d10b      	bne.n	800fc32 <vPortExitCritical+0x26>
	__asm volatile
 800fc1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc1e:	f383 8811 	msr	BASEPRI, r3
 800fc22:	f3bf 8f6f 	isb	sy
 800fc26:	f3bf 8f4f 	dsb	sy
 800fc2a:	607b      	str	r3, [r7, #4]
}
 800fc2c:	bf00      	nop
 800fc2e:	bf00      	nop
 800fc30:	e7fd      	b.n	800fc2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fc32:	4b0a      	ldr	r3, [pc, #40]	@ (800fc5c <vPortExitCritical+0x50>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	3b01      	subs	r3, #1
 800fc38:	4a08      	ldr	r2, [pc, #32]	@ (800fc5c <vPortExitCritical+0x50>)
 800fc3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fc3c:	4b07      	ldr	r3, [pc, #28]	@ (800fc5c <vPortExitCritical+0x50>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d105      	bne.n	800fc50 <vPortExitCritical+0x44>
 800fc44:	2300      	movs	r3, #0
 800fc46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	f383 8811 	msr	BASEPRI, r3
}
 800fc4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fc50:	bf00      	nop
 800fc52:	370c      	adds	r7, #12
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr
 800fc5c:	200000a0 	.word	0x200000a0

0800fc60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fc60:	f3ef 8009 	mrs	r0, PSP
 800fc64:	f3bf 8f6f 	isb	sy
 800fc68:	4b15      	ldr	r3, [pc, #84]	@ (800fcc0 <pxCurrentTCBConst>)
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	f01e 0f10 	tst.w	lr, #16
 800fc70:	bf08      	it	eq
 800fc72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fc76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc7a:	6010      	str	r0, [r2, #0]
 800fc7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fc80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fc84:	f380 8811 	msr	BASEPRI, r0
 800fc88:	f3bf 8f4f 	dsb	sy
 800fc8c:	f3bf 8f6f 	isb	sy
 800fc90:	f7fe fc8a 	bl	800e5a8 <vTaskSwitchContext>
 800fc94:	f04f 0000 	mov.w	r0, #0
 800fc98:	f380 8811 	msr	BASEPRI, r0
 800fc9c:	bc09      	pop	{r0, r3}
 800fc9e:	6819      	ldr	r1, [r3, #0]
 800fca0:	6808      	ldr	r0, [r1, #0]
 800fca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca6:	f01e 0f10 	tst.w	lr, #16
 800fcaa:	bf08      	it	eq
 800fcac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fcb0:	f380 8809 	msr	PSP, r0
 800fcb4:	f3bf 8f6f 	isb	sy
 800fcb8:	4770      	bx	lr
 800fcba:	bf00      	nop
 800fcbc:	f3af 8000 	nop.w

0800fcc0 <pxCurrentTCBConst>:
 800fcc0:	20000b78 	.word	0x20000b78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fcc4:	bf00      	nop
 800fcc6:	bf00      	nop

0800fcc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
	__asm volatile
 800fcce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcd2:	f383 8811 	msr	BASEPRI, r3
 800fcd6:	f3bf 8f6f 	isb	sy
 800fcda:	f3bf 8f4f 	dsb	sy
 800fcde:	607b      	str	r3, [r7, #4]
}
 800fce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fce2:	f7fe fba7 	bl	800e434 <xTaskIncrementTick>
 800fce6:	4603      	mov	r3, r0
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d003      	beq.n	800fcf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fcec:	4b06      	ldr	r3, [pc, #24]	@ (800fd08 <xPortSysTickHandler+0x40>)
 800fcee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fcf2:	601a      	str	r2, [r3, #0]
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	f383 8811 	msr	BASEPRI, r3
}
 800fcfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fd00:	bf00      	nop
 800fd02:	3708      	adds	r7, #8
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}
 800fd08:	e000ed04 	.word	0xe000ed04

0800fd0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fd10:	4b0b      	ldr	r3, [pc, #44]	@ (800fd40 <vPortSetupTimerInterrupt+0x34>)
 800fd12:	2200      	movs	r2, #0
 800fd14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fd16:	4b0b      	ldr	r3, [pc, #44]	@ (800fd44 <vPortSetupTimerInterrupt+0x38>)
 800fd18:	2200      	movs	r2, #0
 800fd1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fd1c:	4b0a      	ldr	r3, [pc, #40]	@ (800fd48 <vPortSetupTimerInterrupt+0x3c>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	4a0a      	ldr	r2, [pc, #40]	@ (800fd4c <vPortSetupTimerInterrupt+0x40>)
 800fd22:	fba2 2303 	umull	r2, r3, r2, r3
 800fd26:	0a1b      	lsrs	r3, r3, #8
 800fd28:	4a09      	ldr	r2, [pc, #36]	@ (800fd50 <vPortSetupTimerInterrupt+0x44>)
 800fd2a:	3b01      	subs	r3, #1
 800fd2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fd2e:	4b04      	ldr	r3, [pc, #16]	@ (800fd40 <vPortSetupTimerInterrupt+0x34>)
 800fd30:	2207      	movs	r2, #7
 800fd32:	601a      	str	r2, [r3, #0]
}
 800fd34:	bf00      	nop
 800fd36:	46bd      	mov	sp, r7
 800fd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3c:	4770      	bx	lr
 800fd3e:	bf00      	nop
 800fd40:	e000e010 	.word	0xe000e010
 800fd44:	e000e018 	.word	0xe000e018
 800fd48:	20000008 	.word	0x20000008
 800fd4c:	51eb851f 	.word	0x51eb851f
 800fd50:	e000e014 	.word	0xe000e014

0800fd54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fd54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fd64 <vPortEnableVFP+0x10>
 800fd58:	6801      	ldr	r1, [r0, #0]
 800fd5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fd5e:	6001      	str	r1, [r0, #0]
 800fd60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fd62:	bf00      	nop
 800fd64:	e000ed88 	.word	0xe000ed88

0800fd68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fd68:	b480      	push	{r7}
 800fd6a:	b085      	sub	sp, #20
 800fd6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fd6e:	f3ef 8305 	mrs	r3, IPSR
 800fd72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	2b0f      	cmp	r3, #15
 800fd78:	d915      	bls.n	800fda6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fd7a:	4a18      	ldr	r2, [pc, #96]	@ (800fddc <vPortValidateInterruptPriority+0x74>)
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	4413      	add	r3, r2
 800fd80:	781b      	ldrb	r3, [r3, #0]
 800fd82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fd84:	4b16      	ldr	r3, [pc, #88]	@ (800fde0 <vPortValidateInterruptPriority+0x78>)
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	7afa      	ldrb	r2, [r7, #11]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d20b      	bcs.n	800fda6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd92:	f383 8811 	msr	BASEPRI, r3
 800fd96:	f3bf 8f6f 	isb	sy
 800fd9a:	f3bf 8f4f 	dsb	sy
 800fd9e:	607b      	str	r3, [r7, #4]
}
 800fda0:	bf00      	nop
 800fda2:	bf00      	nop
 800fda4:	e7fd      	b.n	800fda2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fda6:	4b0f      	ldr	r3, [pc, #60]	@ (800fde4 <vPortValidateInterruptPriority+0x7c>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fdae:	4b0e      	ldr	r3, [pc, #56]	@ (800fde8 <vPortValidateInterruptPriority+0x80>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d90b      	bls.n	800fdce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fdb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdba:	f383 8811 	msr	BASEPRI, r3
 800fdbe:	f3bf 8f6f 	isb	sy
 800fdc2:	f3bf 8f4f 	dsb	sy
 800fdc6:	603b      	str	r3, [r7, #0]
}
 800fdc8:	bf00      	nop
 800fdca:	bf00      	nop
 800fdcc:	e7fd      	b.n	800fdca <vPortValidateInterruptPriority+0x62>
	}
 800fdce:	bf00      	nop
 800fdd0:	3714      	adds	r7, #20
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr
 800fdda:	bf00      	nop
 800fddc:	e000e3f0 	.word	0xe000e3f0
 800fde0:	200011a4 	.word	0x200011a4
 800fde4:	e000ed0c 	.word	0xe000ed0c
 800fde8:	200011a8 	.word	0x200011a8

0800fdec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b08a      	sub	sp, #40	@ 0x28
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fdf8:	f7fe fa60 	bl	800e2bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fdfc:	4b5c      	ldr	r3, [pc, #368]	@ (800ff70 <pvPortMalloc+0x184>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d101      	bne.n	800fe08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fe04:	f000 f924 	bl	8010050 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fe08:	4b5a      	ldr	r3, [pc, #360]	@ (800ff74 <pvPortMalloc+0x188>)
 800fe0a:	681a      	ldr	r2, [r3, #0]
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	4013      	ands	r3, r2
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	f040 8095 	bne.w	800ff40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d01e      	beq.n	800fe5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fe1c:	2208      	movs	r2, #8
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	4413      	add	r3, r2
 800fe22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f003 0307 	and.w	r3, r3, #7
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d015      	beq.n	800fe5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f023 0307 	bic.w	r3, r3, #7
 800fe34:	3308      	adds	r3, #8
 800fe36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f003 0307 	and.w	r3, r3, #7
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d00b      	beq.n	800fe5a <pvPortMalloc+0x6e>
	__asm volatile
 800fe42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe46:	f383 8811 	msr	BASEPRI, r3
 800fe4a:	f3bf 8f6f 	isb	sy
 800fe4e:	f3bf 8f4f 	dsb	sy
 800fe52:	617b      	str	r3, [r7, #20]
}
 800fe54:	bf00      	nop
 800fe56:	bf00      	nop
 800fe58:	e7fd      	b.n	800fe56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d06f      	beq.n	800ff40 <pvPortMalloc+0x154>
 800fe60:	4b45      	ldr	r3, [pc, #276]	@ (800ff78 <pvPortMalloc+0x18c>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d86a      	bhi.n	800ff40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fe6a:	4b44      	ldr	r3, [pc, #272]	@ (800ff7c <pvPortMalloc+0x190>)
 800fe6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fe6e:	4b43      	ldr	r3, [pc, #268]	@ (800ff7c <pvPortMalloc+0x190>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe74:	e004      	b.n	800fe80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fe76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fe7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d903      	bls.n	800fe92 <pvPortMalloc+0xa6>
 800fe8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d1f1      	bne.n	800fe76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fe92:	4b37      	ldr	r3, [pc, #220]	@ (800ff70 <pvPortMalloc+0x184>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d051      	beq.n	800ff40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fe9c:	6a3b      	ldr	r3, [r7, #32]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	2208      	movs	r2, #8
 800fea2:	4413      	add	r3, r2
 800fea4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fea8:	681a      	ldr	r2, [r3, #0]
 800feaa:	6a3b      	ldr	r3, [r7, #32]
 800feac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800feae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feb0:	685a      	ldr	r2, [r3, #4]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	1ad2      	subs	r2, r2, r3
 800feb6:	2308      	movs	r3, #8
 800feb8:	005b      	lsls	r3, r3, #1
 800feba:	429a      	cmp	r2, r3
 800febc:	d920      	bls.n	800ff00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800febe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	4413      	add	r3, r2
 800fec4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fec6:	69bb      	ldr	r3, [r7, #24]
 800fec8:	f003 0307 	and.w	r3, r3, #7
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d00b      	beq.n	800fee8 <pvPortMalloc+0xfc>
	__asm volatile
 800fed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fed4:	f383 8811 	msr	BASEPRI, r3
 800fed8:	f3bf 8f6f 	isb	sy
 800fedc:	f3bf 8f4f 	dsb	sy
 800fee0:	613b      	str	r3, [r7, #16]
}
 800fee2:	bf00      	nop
 800fee4:	bf00      	nop
 800fee6:	e7fd      	b.n	800fee4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feea:	685a      	ldr	r2, [r3, #4]
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	1ad2      	subs	r2, r2, r3
 800fef0:	69bb      	ldr	r3, [r7, #24]
 800fef2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fef6:	687a      	ldr	r2, [r7, #4]
 800fef8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fefa:	69b8      	ldr	r0, [r7, #24]
 800fefc:	f000 f90a 	bl	8010114 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ff00:	4b1d      	ldr	r3, [pc, #116]	@ (800ff78 <pvPortMalloc+0x18c>)
 800ff02:	681a      	ldr	r2, [r3, #0]
 800ff04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff06:	685b      	ldr	r3, [r3, #4]
 800ff08:	1ad3      	subs	r3, r2, r3
 800ff0a:	4a1b      	ldr	r2, [pc, #108]	@ (800ff78 <pvPortMalloc+0x18c>)
 800ff0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ff0e:	4b1a      	ldr	r3, [pc, #104]	@ (800ff78 <pvPortMalloc+0x18c>)
 800ff10:	681a      	ldr	r2, [r3, #0]
 800ff12:	4b1b      	ldr	r3, [pc, #108]	@ (800ff80 <pvPortMalloc+0x194>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d203      	bcs.n	800ff22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ff1a:	4b17      	ldr	r3, [pc, #92]	@ (800ff78 <pvPortMalloc+0x18c>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	4a18      	ldr	r2, [pc, #96]	@ (800ff80 <pvPortMalloc+0x194>)
 800ff20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ff22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff24:	685a      	ldr	r2, [r3, #4]
 800ff26:	4b13      	ldr	r3, [pc, #76]	@ (800ff74 <pvPortMalloc+0x188>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	431a      	orrs	r2, r3
 800ff2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ff30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff32:	2200      	movs	r2, #0
 800ff34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ff36:	4b13      	ldr	r3, [pc, #76]	@ (800ff84 <pvPortMalloc+0x198>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	4a11      	ldr	r2, [pc, #68]	@ (800ff84 <pvPortMalloc+0x198>)
 800ff3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ff40:	f7fe f9ca 	bl	800e2d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff44:	69fb      	ldr	r3, [r7, #28]
 800ff46:	f003 0307 	and.w	r3, r3, #7
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d00b      	beq.n	800ff66 <pvPortMalloc+0x17a>
	__asm volatile
 800ff4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff52:	f383 8811 	msr	BASEPRI, r3
 800ff56:	f3bf 8f6f 	isb	sy
 800ff5a:	f3bf 8f4f 	dsb	sy
 800ff5e:	60fb      	str	r3, [r7, #12]
}
 800ff60:	bf00      	nop
 800ff62:	bf00      	nop
 800ff64:	e7fd      	b.n	800ff62 <pvPortMalloc+0x176>
	return pvReturn;
 800ff66:	69fb      	ldr	r3, [r7, #28]
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3728      	adds	r7, #40	@ 0x28
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}
 800ff70:	200091b4 	.word	0x200091b4
 800ff74:	200091c8 	.word	0x200091c8
 800ff78:	200091b8 	.word	0x200091b8
 800ff7c:	200091ac 	.word	0x200091ac
 800ff80:	200091bc 	.word	0x200091bc
 800ff84:	200091c0 	.word	0x200091c0

0800ff88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b086      	sub	sp, #24
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d04f      	beq.n	801003a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ff9a:	2308      	movs	r3, #8
 800ff9c:	425b      	negs	r3, r3
 800ff9e:	697a      	ldr	r2, [r7, #20]
 800ffa0:	4413      	add	r3, r2
 800ffa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	685a      	ldr	r2, [r3, #4]
 800ffac:	4b25      	ldr	r3, [pc, #148]	@ (8010044 <vPortFree+0xbc>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	4013      	ands	r3, r2
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d10b      	bne.n	800ffce <vPortFree+0x46>
	__asm volatile
 800ffb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffba:	f383 8811 	msr	BASEPRI, r3
 800ffbe:	f3bf 8f6f 	isb	sy
 800ffc2:	f3bf 8f4f 	dsb	sy
 800ffc6:	60fb      	str	r3, [r7, #12]
}
 800ffc8:	bf00      	nop
 800ffca:	bf00      	nop
 800ffcc:	e7fd      	b.n	800ffca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d00b      	beq.n	800ffee <vPortFree+0x66>
	__asm volatile
 800ffd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffda:	f383 8811 	msr	BASEPRI, r3
 800ffde:	f3bf 8f6f 	isb	sy
 800ffe2:	f3bf 8f4f 	dsb	sy
 800ffe6:	60bb      	str	r3, [r7, #8]
}
 800ffe8:	bf00      	nop
 800ffea:	bf00      	nop
 800ffec:	e7fd      	b.n	800ffea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	685a      	ldr	r2, [r3, #4]
 800fff2:	4b14      	ldr	r3, [pc, #80]	@ (8010044 <vPortFree+0xbc>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	4013      	ands	r3, r2
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d01e      	beq.n	801003a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d11a      	bne.n	801003a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	685a      	ldr	r2, [r3, #4]
 8010008:	4b0e      	ldr	r3, [pc, #56]	@ (8010044 <vPortFree+0xbc>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	43db      	mvns	r3, r3
 801000e:	401a      	ands	r2, r3
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010014:	f7fe f952 	bl	800e2bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	685a      	ldr	r2, [r3, #4]
 801001c:	4b0a      	ldr	r3, [pc, #40]	@ (8010048 <vPortFree+0xc0>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4413      	add	r3, r2
 8010022:	4a09      	ldr	r2, [pc, #36]	@ (8010048 <vPortFree+0xc0>)
 8010024:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010026:	6938      	ldr	r0, [r7, #16]
 8010028:	f000 f874 	bl	8010114 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801002c:	4b07      	ldr	r3, [pc, #28]	@ (801004c <vPortFree+0xc4>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	3301      	adds	r3, #1
 8010032:	4a06      	ldr	r2, [pc, #24]	@ (801004c <vPortFree+0xc4>)
 8010034:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010036:	f7fe f94f 	bl	800e2d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801003a:	bf00      	nop
 801003c:	3718      	adds	r7, #24
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	200091c8 	.word	0x200091c8
 8010048:	200091b8 	.word	0x200091b8
 801004c:	200091c4 	.word	0x200091c4

08010050 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010050:	b480      	push	{r7}
 8010052:	b085      	sub	sp, #20
 8010054:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801005a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801005c:	4b27      	ldr	r3, [pc, #156]	@ (80100fc <prvHeapInit+0xac>)
 801005e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	f003 0307 	and.w	r3, r3, #7
 8010066:	2b00      	cmp	r3, #0
 8010068:	d00c      	beq.n	8010084 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	3307      	adds	r3, #7
 801006e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	f023 0307 	bic.w	r3, r3, #7
 8010076:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010078:	68ba      	ldr	r2, [r7, #8]
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	1ad3      	subs	r3, r2, r3
 801007e:	4a1f      	ldr	r2, [pc, #124]	@ (80100fc <prvHeapInit+0xac>)
 8010080:	4413      	add	r3, r2
 8010082:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010088:	4a1d      	ldr	r2, [pc, #116]	@ (8010100 <prvHeapInit+0xb0>)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801008e:	4b1c      	ldr	r3, [pc, #112]	@ (8010100 <prvHeapInit+0xb0>)
 8010090:	2200      	movs	r2, #0
 8010092:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	68ba      	ldr	r2, [r7, #8]
 8010098:	4413      	add	r3, r2
 801009a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801009c:	2208      	movs	r2, #8
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	1a9b      	subs	r3, r3, r2
 80100a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f023 0307 	bic.w	r3, r3, #7
 80100aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	4a15      	ldr	r2, [pc, #84]	@ (8010104 <prvHeapInit+0xb4>)
 80100b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80100b2:	4b14      	ldr	r3, [pc, #80]	@ (8010104 <prvHeapInit+0xb4>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	2200      	movs	r2, #0
 80100b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80100ba:	4b12      	ldr	r3, [pc, #72]	@ (8010104 <prvHeapInit+0xb4>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	2200      	movs	r2, #0
 80100c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	68fa      	ldr	r2, [r7, #12]
 80100ca:	1ad2      	subs	r2, r2, r3
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80100d0:	4b0c      	ldr	r3, [pc, #48]	@ (8010104 <prvHeapInit+0xb4>)
 80100d2:	681a      	ldr	r2, [r3, #0]
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	685b      	ldr	r3, [r3, #4]
 80100dc:	4a0a      	ldr	r2, [pc, #40]	@ (8010108 <prvHeapInit+0xb8>)
 80100de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	4a09      	ldr	r2, [pc, #36]	@ (801010c <prvHeapInit+0xbc>)
 80100e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80100e8:	4b09      	ldr	r3, [pc, #36]	@ (8010110 <prvHeapInit+0xc0>)
 80100ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80100ee:	601a      	str	r2, [r3, #0]
}
 80100f0:	bf00      	nop
 80100f2:	3714      	adds	r7, #20
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr
 80100fc:	200011ac 	.word	0x200011ac
 8010100:	200091ac 	.word	0x200091ac
 8010104:	200091b4 	.word	0x200091b4
 8010108:	200091bc 	.word	0x200091bc
 801010c:	200091b8 	.word	0x200091b8
 8010110:	200091c8 	.word	0x200091c8

08010114 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010114:	b480      	push	{r7}
 8010116:	b085      	sub	sp, #20
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801011c:	4b28      	ldr	r3, [pc, #160]	@ (80101c0 <prvInsertBlockIntoFreeList+0xac>)
 801011e:	60fb      	str	r3, [r7, #12]
 8010120:	e002      	b.n	8010128 <prvInsertBlockIntoFreeList+0x14>
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	60fb      	str	r3, [r7, #12]
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	687a      	ldr	r2, [r7, #4]
 801012e:	429a      	cmp	r2, r3
 8010130:	d8f7      	bhi.n	8010122 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	68ba      	ldr	r2, [r7, #8]
 801013c:	4413      	add	r3, r2
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	429a      	cmp	r2, r3
 8010142:	d108      	bne.n	8010156 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	685a      	ldr	r2, [r3, #4]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	441a      	add	r2, r3
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	685b      	ldr	r3, [r3, #4]
 801015e:	68ba      	ldr	r2, [r7, #8]
 8010160:	441a      	add	r2, r3
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	429a      	cmp	r2, r3
 8010168:	d118      	bne.n	801019c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	681a      	ldr	r2, [r3, #0]
 801016e:	4b15      	ldr	r3, [pc, #84]	@ (80101c4 <prvInsertBlockIntoFreeList+0xb0>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	429a      	cmp	r2, r3
 8010174:	d00d      	beq.n	8010192 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	685a      	ldr	r2, [r3, #4]
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	441a      	add	r2, r3
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	681a      	ldr	r2, [r3, #0]
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	601a      	str	r2, [r3, #0]
 8010190:	e008      	b.n	80101a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010192:	4b0c      	ldr	r3, [pc, #48]	@ (80101c4 <prvInsertBlockIntoFreeList+0xb0>)
 8010194:	681a      	ldr	r2, [r3, #0]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	601a      	str	r2, [r3, #0]
 801019a:	e003      	b.n	80101a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681a      	ldr	r2, [r3, #0]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80101a4:	68fa      	ldr	r2, [r7, #12]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d002      	beq.n	80101b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	687a      	ldr	r2, [r7, #4]
 80101b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80101b2:	bf00      	nop
 80101b4:	3714      	adds	r7, #20
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr
 80101be:	bf00      	nop
 80101c0:	200091ac 	.word	0x200091ac
 80101c4:	200091b4 	.word	0x200091b4

080101c8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80101cc:	2200      	movs	r2, #0
 80101ce:	4912      	ldr	r1, [pc, #72]	@ (8010218 <MX_USB_Device_Init+0x50>)
 80101d0:	4812      	ldr	r0, [pc, #72]	@ (801021c <MX_USB_Device_Init+0x54>)
 80101d2:	f7fa fee1 	bl	800af98 <USBD_Init>
 80101d6:	4603      	mov	r3, r0
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d001      	beq.n	80101e0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80101dc:	f7f0 fd08 	bl	8000bf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80101e0:	490f      	ldr	r1, [pc, #60]	@ (8010220 <MX_USB_Device_Init+0x58>)
 80101e2:	480e      	ldr	r0, [pc, #56]	@ (801021c <MX_USB_Device_Init+0x54>)
 80101e4:	f7fa ff16 	bl	800b014 <USBD_RegisterClass>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d001      	beq.n	80101f2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80101ee:	f7f0 fcff 	bl	8000bf0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80101f2:	490c      	ldr	r1, [pc, #48]	@ (8010224 <MX_USB_Device_Init+0x5c>)
 80101f4:	4809      	ldr	r0, [pc, #36]	@ (801021c <MX_USB_Device_Init+0x54>)
 80101f6:	f7fa fdff 	bl	800adf8 <USBD_CDC_RegisterInterface>
 80101fa:	4603      	mov	r3, r0
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d001      	beq.n	8010204 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8010200:	f7f0 fcf6 	bl	8000bf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010204:	4805      	ldr	r0, [pc, #20]	@ (801021c <MX_USB_Device_Init+0x54>)
 8010206:	f7fa ff49 	bl	800b09c <USBD_Start>
 801020a:	4603      	mov	r3, r0
 801020c:	2b00      	cmp	r3, #0
 801020e:	d001      	beq.n	8010214 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8010210:	f7f0 fcee 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010214:	bf00      	nop
 8010216:	bd80      	pop	{r7, pc}
 8010218:	200000b8 	.word	0x200000b8
 801021c:	200091cc 	.word	0x200091cc
 8010220:	20000020 	.word	0x20000020
 8010224:	200000a4 	.word	0x200000a4

08010228 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801022c:	2200      	movs	r2, #0
 801022e:	4905      	ldr	r1, [pc, #20]	@ (8010244 <CDC_Init_FS+0x1c>)
 8010230:	4805      	ldr	r0, [pc, #20]	@ (8010248 <CDC_Init_FS+0x20>)
 8010232:	f7fa fdfb 	bl	800ae2c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010236:	4905      	ldr	r1, [pc, #20]	@ (801024c <CDC_Init_FS+0x24>)
 8010238:	4803      	ldr	r0, [pc, #12]	@ (8010248 <CDC_Init_FS+0x20>)
 801023a:	f7fa fe19 	bl	800ae70 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801023e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010240:	4618      	mov	r0, r3
 8010242:	bd80      	pop	{r7, pc}
 8010244:	20009ca8 	.word	0x20009ca8
 8010248:	200091cc 	.word	0x200091cc
 801024c:	200094a8 	.word	0x200094a8

08010250 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010250:	b480      	push	{r7}
 8010252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010254:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010256:	4618      	mov	r0, r3
 8010258:	46bd      	mov	sp, r7
 801025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025e:	4770      	bx	lr

08010260 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010260:	b480      	push	{r7}
 8010262:	b083      	sub	sp, #12
 8010264:	af00      	add	r7, sp, #0
 8010266:	4603      	mov	r3, r0
 8010268:	6039      	str	r1, [r7, #0]
 801026a:	71fb      	strb	r3, [r7, #7]
 801026c:	4613      	mov	r3, r2
 801026e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010270:	79fb      	ldrb	r3, [r7, #7]
 8010272:	2b23      	cmp	r3, #35	@ 0x23
 8010274:	d84a      	bhi.n	801030c <CDC_Control_FS+0xac>
 8010276:	a201      	add	r2, pc, #4	@ (adr r2, 801027c <CDC_Control_FS+0x1c>)
 8010278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801027c:	0801030d 	.word	0x0801030d
 8010280:	0801030d 	.word	0x0801030d
 8010284:	0801030d 	.word	0x0801030d
 8010288:	0801030d 	.word	0x0801030d
 801028c:	0801030d 	.word	0x0801030d
 8010290:	0801030d 	.word	0x0801030d
 8010294:	0801030d 	.word	0x0801030d
 8010298:	0801030d 	.word	0x0801030d
 801029c:	0801030d 	.word	0x0801030d
 80102a0:	0801030d 	.word	0x0801030d
 80102a4:	0801030d 	.word	0x0801030d
 80102a8:	0801030d 	.word	0x0801030d
 80102ac:	0801030d 	.word	0x0801030d
 80102b0:	0801030d 	.word	0x0801030d
 80102b4:	0801030d 	.word	0x0801030d
 80102b8:	0801030d 	.word	0x0801030d
 80102bc:	0801030d 	.word	0x0801030d
 80102c0:	0801030d 	.word	0x0801030d
 80102c4:	0801030d 	.word	0x0801030d
 80102c8:	0801030d 	.word	0x0801030d
 80102cc:	0801030d 	.word	0x0801030d
 80102d0:	0801030d 	.word	0x0801030d
 80102d4:	0801030d 	.word	0x0801030d
 80102d8:	0801030d 	.word	0x0801030d
 80102dc:	0801030d 	.word	0x0801030d
 80102e0:	0801030d 	.word	0x0801030d
 80102e4:	0801030d 	.word	0x0801030d
 80102e8:	0801030d 	.word	0x0801030d
 80102ec:	0801030d 	.word	0x0801030d
 80102f0:	0801030d 	.word	0x0801030d
 80102f4:	0801030d 	.word	0x0801030d
 80102f8:	0801030d 	.word	0x0801030d
 80102fc:	0801030d 	.word	0x0801030d
 8010300:	0801030d 	.word	0x0801030d
 8010304:	0801030d 	.word	0x0801030d
 8010308:	0801030d 	.word	0x0801030d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801030c:	bf00      	nop
  }

  return (USBD_OK);
 801030e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010310:	4618      	mov	r0, r3
 8010312:	370c      	adds	r7, #12
 8010314:	46bd      	mov	sp, r7
 8010316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031a:	4770      	bx	lr

0801031c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010326:	6879      	ldr	r1, [r7, #4]
 8010328:	4805      	ldr	r0, [pc, #20]	@ (8010340 <CDC_Receive_FS+0x24>)
 801032a:	f7fa fda1 	bl	800ae70 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801032e:	4804      	ldr	r0, [pc, #16]	@ (8010340 <CDC_Receive_FS+0x24>)
 8010330:	f7fa fdfc 	bl	800af2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010334:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010336:	4618      	mov	r0, r3
 8010338:	3708      	adds	r7, #8
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	200091cc 	.word	0x200091cc

08010344 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b084      	sub	sp, #16
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	460b      	mov	r3, r1
 801034e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010350:	2300      	movs	r3, #0
 8010352:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010354:	4b0d      	ldr	r3, [pc, #52]	@ (801038c <CDC_Transmit_FS+0x48>)
 8010356:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801035a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010362:	2b00      	cmp	r3, #0
 8010364:	d001      	beq.n	801036a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010366:	2301      	movs	r3, #1
 8010368:	e00b      	b.n	8010382 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801036a:	887b      	ldrh	r3, [r7, #2]
 801036c:	461a      	mov	r2, r3
 801036e:	6879      	ldr	r1, [r7, #4]
 8010370:	4806      	ldr	r0, [pc, #24]	@ (801038c <CDC_Transmit_FS+0x48>)
 8010372:	f7fa fd5b 	bl	800ae2c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010376:	4805      	ldr	r0, [pc, #20]	@ (801038c <CDC_Transmit_FS+0x48>)
 8010378:	f7fa fd98 	bl	800aeac <USBD_CDC_TransmitPacket>
 801037c:	4603      	mov	r3, r0
 801037e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010380:	7bfb      	ldrb	r3, [r7, #15]
}
 8010382:	4618      	mov	r0, r3
 8010384:	3710      	adds	r7, #16
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
 801038a:	bf00      	nop
 801038c:	200091cc 	.word	0x200091cc

08010390 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010390:	b480      	push	{r7}
 8010392:	b087      	sub	sp, #28
 8010394:	af00      	add	r7, sp, #0
 8010396:	60f8      	str	r0, [r7, #12]
 8010398:	60b9      	str	r1, [r7, #8]
 801039a:	4613      	mov	r3, r2
 801039c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801039e:	2300      	movs	r3, #0
 80103a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80103a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	371c      	adds	r7, #28
 80103aa:	46bd      	mov	sp, r7
 80103ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b0:	4770      	bx	lr
	...

080103b4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b083      	sub	sp, #12
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	4603      	mov	r3, r0
 80103bc:	6039      	str	r1, [r7, #0]
 80103be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	2212      	movs	r2, #18
 80103c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80103c6:	4b03      	ldr	r3, [pc, #12]	@ (80103d4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	370c      	adds	r7, #12
 80103cc:	46bd      	mov	sp, r7
 80103ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d2:	4770      	bx	lr
 80103d4:	200000d8 	.word	0x200000d8

080103d8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103d8:	b480      	push	{r7}
 80103da:	b083      	sub	sp, #12
 80103dc:	af00      	add	r7, sp, #0
 80103de:	4603      	mov	r3, r0
 80103e0:	6039      	str	r1, [r7, #0]
 80103e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	2204      	movs	r2, #4
 80103e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80103ea:	4b03      	ldr	r3, [pc, #12]	@ (80103f8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	370c      	adds	r7, #12
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr
 80103f8:	200000ec 	.word	0x200000ec

080103fc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	4603      	mov	r3, r0
 8010404:	6039      	str	r1, [r7, #0]
 8010406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010408:	79fb      	ldrb	r3, [r7, #7]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d105      	bne.n	801041a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801040e:	683a      	ldr	r2, [r7, #0]
 8010410:	4907      	ldr	r1, [pc, #28]	@ (8010430 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010412:	4808      	ldr	r0, [pc, #32]	@ (8010434 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010414:	f7fb ff8a 	bl	800c32c <USBD_GetString>
 8010418:	e004      	b.n	8010424 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801041a:	683a      	ldr	r2, [r7, #0]
 801041c:	4904      	ldr	r1, [pc, #16]	@ (8010430 <USBD_CDC_ProductStrDescriptor+0x34>)
 801041e:	4805      	ldr	r0, [pc, #20]	@ (8010434 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010420:	f7fb ff84 	bl	800c32c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010424:	4b02      	ldr	r3, [pc, #8]	@ (8010430 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8010426:	4618      	mov	r0, r3
 8010428:	3708      	adds	r7, #8
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}
 801042e:	bf00      	nop
 8010430:	2000a4a8 	.word	0x2000a4a8
 8010434:	08011c94 	.word	0x08011c94

08010438 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b082      	sub	sp, #8
 801043c:	af00      	add	r7, sp, #0
 801043e:	4603      	mov	r3, r0
 8010440:	6039      	str	r1, [r7, #0]
 8010442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010444:	683a      	ldr	r2, [r7, #0]
 8010446:	4904      	ldr	r1, [pc, #16]	@ (8010458 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8010448:	4804      	ldr	r0, [pc, #16]	@ (801045c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801044a:	f7fb ff6f 	bl	800c32c <USBD_GetString>
  return USBD_StrDesc;
 801044e:	4b02      	ldr	r3, [pc, #8]	@ (8010458 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8010450:	4618      	mov	r0, r3
 8010452:	3708      	adds	r7, #8
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	2000a4a8 	.word	0x2000a4a8
 801045c:	08011cac 	.word	0x08011cac

08010460 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
 8010466:	4603      	mov	r3, r0
 8010468:	6039      	str	r1, [r7, #0]
 801046a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	221a      	movs	r2, #26
 8010470:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010472:	f000 f843 	bl	80104fc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010476:	4b02      	ldr	r3, [pc, #8]	@ (8010480 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8010478:	4618      	mov	r0, r3
 801047a:	3708      	adds	r7, #8
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}
 8010480:	200000f0 	.word	0x200000f0

08010484 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	4603      	mov	r3, r0
 801048c:	6039      	str	r1, [r7, #0]
 801048e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010490:	79fb      	ldrb	r3, [r7, #7]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d105      	bne.n	80104a2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010496:	683a      	ldr	r2, [r7, #0]
 8010498:	4907      	ldr	r1, [pc, #28]	@ (80104b8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801049a:	4808      	ldr	r0, [pc, #32]	@ (80104bc <USBD_CDC_ConfigStrDescriptor+0x38>)
 801049c:	f7fb ff46 	bl	800c32c <USBD_GetString>
 80104a0:	e004      	b.n	80104ac <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80104a2:	683a      	ldr	r2, [r7, #0]
 80104a4:	4904      	ldr	r1, [pc, #16]	@ (80104b8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80104a6:	4805      	ldr	r0, [pc, #20]	@ (80104bc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80104a8:	f7fb ff40 	bl	800c32c <USBD_GetString>
  }
  return USBD_StrDesc;
 80104ac:	4b02      	ldr	r3, [pc, #8]	@ (80104b8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3708      	adds	r7, #8
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	2000a4a8 	.word	0x2000a4a8
 80104bc:	08011cc0 	.word	0x08011cc0

080104c0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	4603      	mov	r3, r0
 80104c8:	6039      	str	r1, [r7, #0]
 80104ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80104cc:	79fb      	ldrb	r3, [r7, #7]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d105      	bne.n	80104de <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80104d2:	683a      	ldr	r2, [r7, #0]
 80104d4:	4907      	ldr	r1, [pc, #28]	@ (80104f4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80104d6:	4808      	ldr	r0, [pc, #32]	@ (80104f8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80104d8:	f7fb ff28 	bl	800c32c <USBD_GetString>
 80104dc:	e004      	b.n	80104e8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80104de:	683a      	ldr	r2, [r7, #0]
 80104e0:	4904      	ldr	r1, [pc, #16]	@ (80104f4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80104e2:	4805      	ldr	r0, [pc, #20]	@ (80104f8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80104e4:	f7fb ff22 	bl	800c32c <USBD_GetString>
  }
  return USBD_StrDesc;
 80104e8:	4b02      	ldr	r3, [pc, #8]	@ (80104f4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3708      	adds	r7, #8
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
 80104f2:	bf00      	nop
 80104f4:	2000a4a8 	.word	0x2000a4a8
 80104f8:	08011ccc 	.word	0x08011ccc

080104fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b084      	sub	sp, #16
 8010500:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010502:	4b0f      	ldr	r3, [pc, #60]	@ (8010540 <Get_SerialNum+0x44>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010508:	4b0e      	ldr	r3, [pc, #56]	@ (8010544 <Get_SerialNum+0x48>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801050e:	4b0e      	ldr	r3, [pc, #56]	@ (8010548 <Get_SerialNum+0x4c>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010514:	68fa      	ldr	r2, [r7, #12]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	4413      	add	r3, r2
 801051a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d009      	beq.n	8010536 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010522:	2208      	movs	r2, #8
 8010524:	4909      	ldr	r1, [pc, #36]	@ (801054c <Get_SerialNum+0x50>)
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f000 f814 	bl	8010554 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801052c:	2204      	movs	r2, #4
 801052e:	4908      	ldr	r1, [pc, #32]	@ (8010550 <Get_SerialNum+0x54>)
 8010530:	68b8      	ldr	r0, [r7, #8]
 8010532:	f000 f80f 	bl	8010554 <IntToUnicode>
  }
}
 8010536:	bf00      	nop
 8010538:	3710      	adds	r7, #16
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}
 801053e:	bf00      	nop
 8010540:	1fff7590 	.word	0x1fff7590
 8010544:	1fff7594 	.word	0x1fff7594
 8010548:	1fff7598 	.word	0x1fff7598
 801054c:	200000f2 	.word	0x200000f2
 8010550:	20000102 	.word	0x20000102

08010554 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010554:	b480      	push	{r7}
 8010556:	b087      	sub	sp, #28
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	4613      	mov	r3, r2
 8010560:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010562:	2300      	movs	r3, #0
 8010564:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010566:	2300      	movs	r3, #0
 8010568:	75fb      	strb	r3, [r7, #23]
 801056a:	e027      	b.n	80105bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	0f1b      	lsrs	r3, r3, #28
 8010570:	2b09      	cmp	r3, #9
 8010572:	d80b      	bhi.n	801058c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	0f1b      	lsrs	r3, r3, #28
 8010578:	b2da      	uxtb	r2, r3
 801057a:	7dfb      	ldrb	r3, [r7, #23]
 801057c:	005b      	lsls	r3, r3, #1
 801057e:	4619      	mov	r1, r3
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	440b      	add	r3, r1
 8010584:	3230      	adds	r2, #48	@ 0x30
 8010586:	b2d2      	uxtb	r2, r2
 8010588:	701a      	strb	r2, [r3, #0]
 801058a:	e00a      	b.n	80105a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	0f1b      	lsrs	r3, r3, #28
 8010590:	b2da      	uxtb	r2, r3
 8010592:	7dfb      	ldrb	r3, [r7, #23]
 8010594:	005b      	lsls	r3, r3, #1
 8010596:	4619      	mov	r1, r3
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	440b      	add	r3, r1
 801059c:	3237      	adds	r2, #55	@ 0x37
 801059e:	b2d2      	uxtb	r2, r2
 80105a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	011b      	lsls	r3, r3, #4
 80105a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80105a8:	7dfb      	ldrb	r3, [r7, #23]
 80105aa:	005b      	lsls	r3, r3, #1
 80105ac:	3301      	adds	r3, #1
 80105ae:	68ba      	ldr	r2, [r7, #8]
 80105b0:	4413      	add	r3, r2
 80105b2:	2200      	movs	r2, #0
 80105b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80105b6:	7dfb      	ldrb	r3, [r7, #23]
 80105b8:	3301      	adds	r3, #1
 80105ba:	75fb      	strb	r3, [r7, #23]
 80105bc:	7dfa      	ldrb	r2, [r7, #23]
 80105be:	79fb      	ldrb	r3, [r7, #7]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d3d3      	bcc.n	801056c <IntToUnicode+0x18>
  }
}
 80105c4:	bf00      	nop
 80105c6:	bf00      	nop
 80105c8:	371c      	adds	r7, #28
 80105ca:	46bd      	mov	sp, r7
 80105cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d0:	4770      	bx	lr

080105d2 <LL_AHB2_GRP1_EnableClock>:
{
 80105d2:	b480      	push	{r7}
 80105d4:	b085      	sub	sp, #20
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80105da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80105de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80105e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	4313      	orrs	r3, r2
 80105e8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80105ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80105ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	4013      	ands	r3, r2
 80105f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80105f6:	68fb      	ldr	r3, [r7, #12]
}
 80105f8:	bf00      	nop
 80105fa:	3714      	adds	r7, #20
 80105fc:	46bd      	mov	sp, r7
 80105fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010602:	4770      	bx	lr

08010604 <LL_APB1_GRP1_EnableClock>:
{
 8010604:	b480      	push	{r7}
 8010606:	b085      	sub	sp, #20
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801060c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010610:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010612:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	4313      	orrs	r3, r2
 801061a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801061c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010620:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	4013      	ands	r3, r2
 8010626:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010628:	68fb      	ldr	r3, [r7, #12]
}
 801062a:	bf00      	nop
 801062c:	3714      	adds	r7, #20
 801062e:	46bd      	mov	sp, r7
 8010630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010634:	4770      	bx	lr
	...

08010638 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b088      	sub	sp, #32
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010640:	f107 030c 	add.w	r3, r7, #12
 8010644:	2200      	movs	r2, #0
 8010646:	601a      	str	r2, [r3, #0]
 8010648:	605a      	str	r2, [r3, #4]
 801064a:	609a      	str	r2, [r3, #8]
 801064c:	60da      	str	r2, [r3, #12]
 801064e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	4a13      	ldr	r2, [pc, #76]	@ (80106a4 <HAL_PCD_MspInit+0x6c>)
 8010656:	4293      	cmp	r3, r2
 8010658:	d120      	bne.n	801069c <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801065a:	2001      	movs	r0, #1
 801065c:	f7ff ffb9 	bl	80105d2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8010660:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010664:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010666:	2302      	movs	r3, #2
 8010668:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801066a:	2300      	movs	r3, #0
 801066c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801066e:	2300      	movs	r3, #0
 8010670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8010672:	230a      	movs	r3, #10
 8010674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010676:	f107 030c 	add.w	r3, r7, #12
 801067a:	4619      	mov	r1, r3
 801067c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8010680:	f7f2 fc3c 	bl	8002efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010684:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8010688:	f7ff ffbc 	bl	8010604 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801068c:	2200      	movs	r2, #0
 801068e:	2105      	movs	r1, #5
 8010690:	2014      	movs	r0, #20
 8010692:	f7f2 f997 	bl	80029c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010696:	2014      	movs	r0, #20
 8010698:	f7f2 f9ae 	bl	80029f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801069c:	bf00      	nop
 801069e:	3720      	adds	r7, #32
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	40006800 	.word	0x40006800

080106a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b082      	sub	sp, #8
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80106bc:	4619      	mov	r1, r3
 80106be:	4610      	mov	r0, r2
 80106c0:	f7fa fd39 	bl	800b136 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80106c4:	bf00      	nop
 80106c6:	3708      	adds	r7, #8
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	460b      	mov	r3, r1
 80106d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80106de:	78fa      	ldrb	r2, [r7, #3]
 80106e0:	6879      	ldr	r1, [r7, #4]
 80106e2:	4613      	mov	r3, r2
 80106e4:	009b      	lsls	r3, r3, #2
 80106e6:	4413      	add	r3, r2
 80106e8:	00db      	lsls	r3, r3, #3
 80106ea:	440b      	add	r3, r1
 80106ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	78fb      	ldrb	r3, [r7, #3]
 80106f4:	4619      	mov	r1, r3
 80106f6:	f7fa fd73 	bl	800b1e0 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80106fa:	bf00      	nop
 80106fc:	3708      	adds	r7, #8
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}

08010702 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010702:	b580      	push	{r7, lr}
 8010704:	b082      	sub	sp, #8
 8010706:	af00      	add	r7, sp, #0
 8010708:	6078      	str	r0, [r7, #4]
 801070a:	460b      	mov	r3, r1
 801070c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010714:	78fa      	ldrb	r2, [r7, #3]
 8010716:	6879      	ldr	r1, [r7, #4]
 8010718:	4613      	mov	r3, r2
 801071a:	009b      	lsls	r3, r3, #2
 801071c:	4413      	add	r3, r2
 801071e:	00db      	lsls	r3, r3, #3
 8010720:	440b      	add	r3, r1
 8010722:	3324      	adds	r3, #36	@ 0x24
 8010724:	681a      	ldr	r2, [r3, #0]
 8010726:	78fb      	ldrb	r3, [r7, #3]
 8010728:	4619      	mov	r1, r3
 801072a:	f7fa fe0c 	bl	800b346 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801072e:	bf00      	nop
 8010730:	3708      	adds	r7, #8
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}

08010736 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010736:	b580      	push	{r7, lr}
 8010738:	b082      	sub	sp, #8
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010744:	4618      	mov	r0, r3
 8010746:	f7fa ff46 	bl	800b5d6 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801074a:	bf00      	nop
 801074c:	3708      	adds	r7, #8
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}

08010752 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010752:	b580      	push	{r7, lr}
 8010754:	b084      	sub	sp, #16
 8010756:	af00      	add	r7, sp, #0
 8010758:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801075a:	2301      	movs	r3, #1
 801075c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	795b      	ldrb	r3, [r3, #5]
 8010762:	2b02      	cmp	r3, #2
 8010764:	d001      	beq.n	801076a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010766:	f7f0 fa43 	bl	8000bf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010770:	7bfa      	ldrb	r2, [r7, #15]
 8010772:	4611      	mov	r1, r2
 8010774:	4618      	mov	r0, r3
 8010776:	f7fa feea 	bl	800b54e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010780:	4618      	mov	r0, r3
 8010782:	f7fa fe92 	bl	800b4aa <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8010786:	bf00      	nop
 8010788:	3710      	adds	r7, #16
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
	...

08010790 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801079e:	4618      	mov	r0, r3
 80107a0:	f7fa fee5 	bl	800b56e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	7a5b      	ldrb	r3, [r3, #9]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d005      	beq.n	80107b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80107ac:	4b04      	ldr	r3, [pc, #16]	@ (80107c0 <HAL_PCD_SuspendCallback+0x30>)
 80107ae:	691b      	ldr	r3, [r3, #16]
 80107b0:	4a03      	ldr	r2, [pc, #12]	@ (80107c0 <HAL_PCD_SuspendCallback+0x30>)
 80107b2:	f043 0306 	orr.w	r3, r3, #6
 80107b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80107b8:	bf00      	nop
 80107ba:	3708      	adds	r7, #8
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}
 80107c0:	e000ed00 	.word	0xe000ed00

080107c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	7a5b      	ldrb	r3, [r3, #9]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d007      	beq.n	80107e4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80107d4:	4b08      	ldr	r3, [pc, #32]	@ (80107f8 <HAL_PCD_ResumeCallback+0x34>)
 80107d6:	691b      	ldr	r3, [r3, #16]
 80107d8:	4a07      	ldr	r2, [pc, #28]	@ (80107f8 <HAL_PCD_ResumeCallback+0x34>)
 80107da:	f023 0306 	bic.w	r3, r3, #6
 80107de:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80107e0:	f000 f9fa 	bl	8010bd8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fa fedb 	bl	800b5a6 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80107f0:	bf00      	nop
 80107f2:	3708      	adds	r7, #8
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	e000ed00 	.word	0xe000ed00

080107fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b082      	sub	sp, #8
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010804:	4a2c      	ldr	r2, [pc, #176]	@ (80108b8 <USBD_LL_Init+0xbc>)
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	4a2a      	ldr	r2, [pc, #168]	@ (80108b8 <USBD_LL_Init+0xbc>)
 8010810:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8010814:	f7f4 fb98 	bl	8004f48 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8010818:	4b27      	ldr	r3, [pc, #156]	@ (80108b8 <USBD_LL_Init+0xbc>)
 801081a:	4a28      	ldr	r2, [pc, #160]	@ (80108bc <USBD_LL_Init+0xc0>)
 801081c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801081e:	4b26      	ldr	r3, [pc, #152]	@ (80108b8 <USBD_LL_Init+0xbc>)
 8010820:	2208      	movs	r2, #8
 8010822:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010824:	4b24      	ldr	r3, [pc, #144]	@ (80108b8 <USBD_LL_Init+0xbc>)
 8010826:	2202      	movs	r2, #2
 8010828:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801082a:	4b23      	ldr	r3, [pc, #140]	@ (80108b8 <USBD_LL_Init+0xbc>)
 801082c:	2202      	movs	r2, #2
 801082e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010830:	4b21      	ldr	r3, [pc, #132]	@ (80108b8 <USBD_LL_Init+0xbc>)
 8010832:	2200      	movs	r2, #0
 8010834:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010836:	4b20      	ldr	r3, [pc, #128]	@ (80108b8 <USBD_LL_Init+0xbc>)
 8010838:	2200      	movs	r2, #0
 801083a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801083c:	4b1e      	ldr	r3, [pc, #120]	@ (80108b8 <USBD_LL_Init+0xbc>)
 801083e:	2200      	movs	r2, #0
 8010840:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010842:	4b1d      	ldr	r3, [pc, #116]	@ (80108b8 <USBD_LL_Init+0xbc>)
 8010844:	2200      	movs	r2, #0
 8010846:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010848:	481b      	ldr	r0, [pc, #108]	@ (80108b8 <USBD_LL_Init+0xbc>)
 801084a:	f7f2 fe2b 	bl	80034a4 <HAL_PCD_Init>
 801084e:	4603      	mov	r3, r0
 8010850:	2b00      	cmp	r3, #0
 8010852:	d001      	beq.n	8010858 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8010854:	f7f0 f9cc 	bl	8000bf0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801085e:	2318      	movs	r3, #24
 8010860:	2200      	movs	r2, #0
 8010862:	2100      	movs	r1, #0
 8010864:	f7f4 fae4 	bl	8004e30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801086e:	2358      	movs	r3, #88	@ 0x58
 8010870:	2200      	movs	r2, #0
 8010872:	2180      	movs	r1, #128	@ 0x80
 8010874:	f7f4 fadc 	bl	8004e30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801087e:	23c0      	movs	r3, #192	@ 0xc0
 8010880:	2200      	movs	r2, #0
 8010882:	2181      	movs	r1, #129	@ 0x81
 8010884:	f7f4 fad4 	bl	8004e30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801088e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8010892:	2200      	movs	r2, #0
 8010894:	2101      	movs	r1, #1
 8010896:	f7f4 facb 	bl	8004e30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80108a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80108a4:	2200      	movs	r2, #0
 80108a6:	2182      	movs	r1, #130	@ 0x82
 80108a8:	f7f4 fac2 	bl	8004e30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80108ac:	2300      	movs	r3, #0
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3708      	adds	r7, #8
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	2000a6a8 	.word	0x2000a6a8
 80108bc:	40006800 	.word	0x40006800

080108c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108c8:	2300      	movs	r3, #0
 80108ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108cc:	2300      	movs	r3, #0
 80108ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7f2 feb2 	bl	8003640 <HAL_PCD_Start>
 80108dc:	4603      	mov	r3, r0
 80108de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108e0:	7bfb      	ldrb	r3, [r7, #15]
 80108e2:	4618      	mov	r0, r3
 80108e4:	f000 f97e 	bl	8010be4 <USBD_Get_USB_Status>
 80108e8:	4603      	mov	r3, r0
 80108ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3710      	adds	r7, #16
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}

080108f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b084      	sub	sp, #16
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
 80108fe:	4608      	mov	r0, r1
 8010900:	4611      	mov	r1, r2
 8010902:	461a      	mov	r2, r3
 8010904:	4603      	mov	r3, r0
 8010906:	70fb      	strb	r3, [r7, #3]
 8010908:	460b      	mov	r3, r1
 801090a:	70bb      	strb	r3, [r7, #2]
 801090c:	4613      	mov	r3, r2
 801090e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010910:	2300      	movs	r3, #0
 8010912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010914:	2300      	movs	r3, #0
 8010916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801091e:	78bb      	ldrb	r3, [r7, #2]
 8010920:	883a      	ldrh	r2, [r7, #0]
 8010922:	78f9      	ldrb	r1, [r7, #3]
 8010924:	f7f2 fff9 	bl	800391a <HAL_PCD_EP_Open>
 8010928:	4603      	mov	r3, r0
 801092a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801092c:	7bfb      	ldrb	r3, [r7, #15]
 801092e:	4618      	mov	r0, r3
 8010930:	f000 f958 	bl	8010be4 <USBD_Get_USB_Status>
 8010934:	4603      	mov	r3, r0
 8010936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010938:	7bbb      	ldrb	r3, [r7, #14]
}
 801093a:	4618      	mov	r0, r3
 801093c:	3710      	adds	r7, #16
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}

08010942 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010942:	b580      	push	{r7, lr}
 8010944:	b084      	sub	sp, #16
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
 801094a:	460b      	mov	r3, r1
 801094c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801094e:	2300      	movs	r3, #0
 8010950:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010952:	2300      	movs	r3, #0
 8010954:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801095c:	78fa      	ldrb	r2, [r7, #3]
 801095e:	4611      	mov	r1, r2
 8010960:	4618      	mov	r0, r3
 8010962:	f7f3 f837 	bl	80039d4 <HAL_PCD_EP_Close>
 8010966:	4603      	mov	r3, r0
 8010968:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801096a:	7bfb      	ldrb	r3, [r7, #15]
 801096c:	4618      	mov	r0, r3
 801096e:	f000 f939 	bl	8010be4 <USBD_Get_USB_Status>
 8010972:	4603      	mov	r3, r0
 8010974:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010976:	7bbb      	ldrb	r3, [r7, #14]
}
 8010978:	4618      	mov	r0, r3
 801097a:	3710      	adds	r7, #16
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b084      	sub	sp, #16
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	460b      	mov	r3, r1
 801098a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801098c:	2300      	movs	r3, #0
 801098e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010990:	2300      	movs	r3, #0
 8010992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801099a:	78fa      	ldrb	r2, [r7, #3]
 801099c:	4611      	mov	r1, r2
 801099e:	4618      	mov	r0, r3
 80109a0:	f7f3 f8e0 	bl	8003b64 <HAL_PCD_EP_SetStall>
 80109a4:	4603      	mov	r3, r0
 80109a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109a8:	7bfb      	ldrb	r3, [r7, #15]
 80109aa:	4618      	mov	r0, r3
 80109ac:	f000 f91a 	bl	8010be4 <USBD_Get_USB_Status>
 80109b0:	4603      	mov	r3, r0
 80109b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3710      	adds	r7, #16
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}

080109be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109be:	b580      	push	{r7, lr}
 80109c0:	b084      	sub	sp, #16
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	6078      	str	r0, [r7, #4]
 80109c6:	460b      	mov	r3, r1
 80109c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109ca:	2300      	movs	r3, #0
 80109cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109ce:	2300      	movs	r3, #0
 80109d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80109d8:	78fa      	ldrb	r2, [r7, #3]
 80109da:	4611      	mov	r1, r2
 80109dc:	4618      	mov	r0, r3
 80109de:	f7f3 f913 	bl	8003c08 <HAL_PCD_EP_ClrStall>
 80109e2:	4603      	mov	r3, r0
 80109e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109e6:	7bfb      	ldrb	r3, [r7, #15]
 80109e8:	4618      	mov	r0, r3
 80109ea:	f000 f8fb 	bl	8010be4 <USBD_Get_USB_Status>
 80109ee:	4603      	mov	r3, r0
 80109f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	3710      	adds	r7, #16
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}

080109fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109fc:	b480      	push	{r7}
 80109fe:	b085      	sub	sp, #20
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	460b      	mov	r3, r1
 8010a06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010a0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	da0b      	bge.n	8010a30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010a18:	78fb      	ldrb	r3, [r7, #3]
 8010a1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010a1e:	68f9      	ldr	r1, [r7, #12]
 8010a20:	4613      	mov	r3, r2
 8010a22:	009b      	lsls	r3, r3, #2
 8010a24:	4413      	add	r3, r2
 8010a26:	00db      	lsls	r3, r3, #3
 8010a28:	440b      	add	r3, r1
 8010a2a:	3312      	adds	r3, #18
 8010a2c:	781b      	ldrb	r3, [r3, #0]
 8010a2e:	e00b      	b.n	8010a48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010a30:	78fb      	ldrb	r3, [r7, #3]
 8010a32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010a36:	68f9      	ldr	r1, [r7, #12]
 8010a38:	4613      	mov	r3, r2
 8010a3a:	009b      	lsls	r3, r3, #2
 8010a3c:	4413      	add	r3, r2
 8010a3e:	00db      	lsls	r3, r3, #3
 8010a40:	440b      	add	r3, r1
 8010a42:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010a46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3714      	adds	r7, #20
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr

08010a54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b084      	sub	sp, #16
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a60:	2300      	movs	r3, #0
 8010a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a64:	2300      	movs	r3, #0
 8010a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010a6e:	78fa      	ldrb	r2, [r7, #3]
 8010a70:	4611      	mov	r1, r2
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7f2 ff2d 	bl	80038d2 <HAL_PCD_SetAddress>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a7c:	7bfb      	ldrb	r3, [r7, #15]
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f000 f8b0 	bl	8010be4 <USBD_Get_USB_Status>
 8010a84:	4603      	mov	r3, r0
 8010a86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010a92:	b580      	push	{r7, lr}
 8010a94:	b086      	sub	sp, #24
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	60f8      	str	r0, [r7, #12]
 8010a9a:	607a      	str	r2, [r7, #4]
 8010a9c:	603b      	str	r3, [r7, #0]
 8010a9e:	460b      	mov	r3, r1
 8010aa0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010ab0:	7af9      	ldrb	r1, [r7, #11]
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	687a      	ldr	r2, [r7, #4]
 8010ab6:	f7f3 f81e 	bl	8003af6 <HAL_PCD_EP_Transmit>
 8010aba:	4603      	mov	r3, r0
 8010abc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010abe:	7dfb      	ldrb	r3, [r7, #23]
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f000 f88f 	bl	8010be4 <USBD_Get_USB_Status>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010aca:	7dbb      	ldrb	r3, [r7, #22]
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3718      	adds	r7, #24
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b086      	sub	sp, #24
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	60f8      	str	r0, [r7, #12]
 8010adc:	607a      	str	r2, [r7, #4]
 8010ade:	603b      	str	r3, [r7, #0]
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010af2:	7af9      	ldrb	r1, [r7, #11]
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	f7f2 ffb4 	bl	8003a64 <HAL_PCD_EP_Receive>
 8010afc:	4603      	mov	r3, r0
 8010afe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b00:	7dfb      	ldrb	r3, [r7, #23]
 8010b02:	4618      	mov	r0, r3
 8010b04:	f000 f86e 	bl	8010be4 <USBD_Get_USB_Status>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010b0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3718      	adds	r7, #24
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}

08010b16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b16:	b580      	push	{r7, lr}
 8010b18:	b082      	sub	sp, #8
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
 8010b1e:	460b      	mov	r3, r1
 8010b20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010b28:	78fa      	ldrb	r2, [r7, #3]
 8010b2a:	4611      	mov	r1, r2
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f7f2 ffca 	bl	8003ac6 <HAL_PCD_EP_GetRxCount>
 8010b32:	4603      	mov	r3, r0
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	3708      	adds	r7, #8
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}

08010b3c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b082      	sub	sp, #8
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
 8010b44:	460b      	mov	r3, r1
 8010b46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010b48:	78fb      	ldrb	r3, [r7, #3]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d002      	beq.n	8010b54 <HAL_PCDEx_LPM_Callback+0x18>
 8010b4e:	2b01      	cmp	r3, #1
 8010b50:	d013      	beq.n	8010b7a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010b52:	e023      	b.n	8010b9c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	7a5b      	ldrb	r3, [r3, #9]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d007      	beq.n	8010b6c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010b5c:	f000 f83c 	bl	8010bd8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010b60:	4b10      	ldr	r3, [pc, #64]	@ (8010ba4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010b62:	691b      	ldr	r3, [r3, #16]
 8010b64:	4a0f      	ldr	r2, [pc, #60]	@ (8010ba4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010b66:	f023 0306 	bic.w	r3, r3, #6
 8010b6a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010b72:	4618      	mov	r0, r3
 8010b74:	f7fa fd17 	bl	800b5a6 <USBD_LL_Resume>
    break;
 8010b78:	e010      	b.n	8010b9c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7fa fcf4 	bl	800b56e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	7a5b      	ldrb	r3, [r3, #9]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d005      	beq.n	8010b9a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010b8e:	4b05      	ldr	r3, [pc, #20]	@ (8010ba4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010b90:	691b      	ldr	r3, [r3, #16]
 8010b92:	4a04      	ldr	r2, [pc, #16]	@ (8010ba4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010b94:	f043 0306 	orr.w	r3, r3, #6
 8010b98:	6113      	str	r3, [r2, #16]
    break;
 8010b9a:	bf00      	nop
}
 8010b9c:	bf00      	nop
 8010b9e:	3708      	adds	r7, #8
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}
 8010ba4:	e000ed00 	.word	0xe000ed00

08010ba8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b083      	sub	sp, #12
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010bb0:	4b03      	ldr	r3, [pc, #12]	@ (8010bc0 <USBD_static_malloc+0x18>)
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	370c      	adds	r7, #12
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbc:	4770      	bx	lr
 8010bbe:	bf00      	nop
 8010bc0:	2000a984 	.word	0x2000a984

08010bc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b083      	sub	sp, #12
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010bcc:	bf00      	nop
 8010bce:	370c      	adds	r7, #12
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd6:	4770      	bx	lr

08010bd8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010bdc:	f7ef fd6a 	bl	80006b4 <SystemClock_Config>
}
 8010be0:	bf00      	nop
 8010be2:	bd80      	pop	{r7, pc}

08010be4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b085      	sub	sp, #20
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	4603      	mov	r3, r0
 8010bec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010bf2:	79fb      	ldrb	r3, [r7, #7]
 8010bf4:	2b03      	cmp	r3, #3
 8010bf6:	d817      	bhi.n	8010c28 <USBD_Get_USB_Status+0x44>
 8010bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8010c00 <USBD_Get_USB_Status+0x1c>)
 8010bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bfe:	bf00      	nop
 8010c00:	08010c11 	.word	0x08010c11
 8010c04:	08010c17 	.word	0x08010c17
 8010c08:	08010c1d 	.word	0x08010c1d
 8010c0c:	08010c23 	.word	0x08010c23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010c10:	2300      	movs	r3, #0
 8010c12:	73fb      	strb	r3, [r7, #15]
    break;
 8010c14:	e00b      	b.n	8010c2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010c16:	2303      	movs	r3, #3
 8010c18:	73fb      	strb	r3, [r7, #15]
    break;
 8010c1a:	e008      	b.n	8010c2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	73fb      	strb	r3, [r7, #15]
    break;
 8010c20:	e005      	b.n	8010c2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010c22:	2303      	movs	r3, #3
 8010c24:	73fb      	strb	r3, [r7, #15]
    break;
 8010c26:	e002      	b.n	8010c2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010c28:	2303      	movs	r3, #3
 8010c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8010c2c:	bf00      	nop
  }
  return usb_status;
 8010c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3714      	adds	r7, #20
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr

08010c3c <std>:
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	b510      	push	{r4, lr}
 8010c40:	4604      	mov	r4, r0
 8010c42:	e9c0 3300 	strd	r3, r3, [r0]
 8010c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c4a:	6083      	str	r3, [r0, #8]
 8010c4c:	8181      	strh	r1, [r0, #12]
 8010c4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010c50:	81c2      	strh	r2, [r0, #14]
 8010c52:	6183      	str	r3, [r0, #24]
 8010c54:	4619      	mov	r1, r3
 8010c56:	2208      	movs	r2, #8
 8010c58:	305c      	adds	r0, #92	@ 0x5c
 8010c5a:	f000 f90e 	bl	8010e7a <memset>
 8010c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8010c94 <std+0x58>)
 8010c60:	6263      	str	r3, [r4, #36]	@ 0x24
 8010c62:	4b0d      	ldr	r3, [pc, #52]	@ (8010c98 <std+0x5c>)
 8010c64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010c66:	4b0d      	ldr	r3, [pc, #52]	@ (8010c9c <std+0x60>)
 8010c68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8010ca0 <std+0x64>)
 8010c6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8010c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8010ca4 <std+0x68>)
 8010c70:	6224      	str	r4, [r4, #32]
 8010c72:	429c      	cmp	r4, r3
 8010c74:	d006      	beq.n	8010c84 <std+0x48>
 8010c76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010c7a:	4294      	cmp	r4, r2
 8010c7c:	d002      	beq.n	8010c84 <std+0x48>
 8010c7e:	33d0      	adds	r3, #208	@ 0xd0
 8010c80:	429c      	cmp	r4, r3
 8010c82:	d105      	bne.n	8010c90 <std+0x54>
 8010c84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c8c:	f000 b9c4 	b.w	8011018 <__retarget_lock_init_recursive>
 8010c90:	bd10      	pop	{r4, pc}
 8010c92:	bf00      	nop
 8010c94:	08010df5 	.word	0x08010df5
 8010c98:	08010e17 	.word	0x08010e17
 8010c9c:	08010e4f 	.word	0x08010e4f
 8010ca0:	08010e73 	.word	0x08010e73
 8010ca4:	2000aba4 	.word	0x2000aba4

08010ca8 <stdio_exit_handler>:
 8010ca8:	4a02      	ldr	r2, [pc, #8]	@ (8010cb4 <stdio_exit_handler+0xc>)
 8010caa:	4903      	ldr	r1, [pc, #12]	@ (8010cb8 <stdio_exit_handler+0x10>)
 8010cac:	4803      	ldr	r0, [pc, #12]	@ (8010cbc <stdio_exit_handler+0x14>)
 8010cae:	f000 b869 	b.w	8010d84 <_fwalk_sglue>
 8010cb2:	bf00      	nop
 8010cb4:	2000010c 	.word	0x2000010c
 8010cb8:	080118d5 	.word	0x080118d5
 8010cbc:	2000011c 	.word	0x2000011c

08010cc0 <cleanup_stdio>:
 8010cc0:	6841      	ldr	r1, [r0, #4]
 8010cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8010cf4 <cleanup_stdio+0x34>)
 8010cc4:	4299      	cmp	r1, r3
 8010cc6:	b510      	push	{r4, lr}
 8010cc8:	4604      	mov	r4, r0
 8010cca:	d001      	beq.n	8010cd0 <cleanup_stdio+0x10>
 8010ccc:	f000 fe02 	bl	80118d4 <_fflush_r>
 8010cd0:	68a1      	ldr	r1, [r4, #8]
 8010cd2:	4b09      	ldr	r3, [pc, #36]	@ (8010cf8 <cleanup_stdio+0x38>)
 8010cd4:	4299      	cmp	r1, r3
 8010cd6:	d002      	beq.n	8010cde <cleanup_stdio+0x1e>
 8010cd8:	4620      	mov	r0, r4
 8010cda:	f000 fdfb 	bl	80118d4 <_fflush_r>
 8010cde:	68e1      	ldr	r1, [r4, #12]
 8010ce0:	4b06      	ldr	r3, [pc, #24]	@ (8010cfc <cleanup_stdio+0x3c>)
 8010ce2:	4299      	cmp	r1, r3
 8010ce4:	d004      	beq.n	8010cf0 <cleanup_stdio+0x30>
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cec:	f000 bdf2 	b.w	80118d4 <_fflush_r>
 8010cf0:	bd10      	pop	{r4, pc}
 8010cf2:	bf00      	nop
 8010cf4:	2000aba4 	.word	0x2000aba4
 8010cf8:	2000ac0c 	.word	0x2000ac0c
 8010cfc:	2000ac74 	.word	0x2000ac74

08010d00 <global_stdio_init.part.0>:
 8010d00:	b510      	push	{r4, lr}
 8010d02:	4b0b      	ldr	r3, [pc, #44]	@ (8010d30 <global_stdio_init.part.0+0x30>)
 8010d04:	4c0b      	ldr	r4, [pc, #44]	@ (8010d34 <global_stdio_init.part.0+0x34>)
 8010d06:	4a0c      	ldr	r2, [pc, #48]	@ (8010d38 <global_stdio_init.part.0+0x38>)
 8010d08:	601a      	str	r2, [r3, #0]
 8010d0a:	4620      	mov	r0, r4
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	2104      	movs	r1, #4
 8010d10:	f7ff ff94 	bl	8010c3c <std>
 8010d14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010d18:	2201      	movs	r2, #1
 8010d1a:	2109      	movs	r1, #9
 8010d1c:	f7ff ff8e 	bl	8010c3c <std>
 8010d20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010d24:	2202      	movs	r2, #2
 8010d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d2a:	2112      	movs	r1, #18
 8010d2c:	f7ff bf86 	b.w	8010c3c <std>
 8010d30:	2000acdc 	.word	0x2000acdc
 8010d34:	2000aba4 	.word	0x2000aba4
 8010d38:	08010ca9 	.word	0x08010ca9

08010d3c <__sfp_lock_acquire>:
 8010d3c:	4801      	ldr	r0, [pc, #4]	@ (8010d44 <__sfp_lock_acquire+0x8>)
 8010d3e:	f000 b96c 	b.w	801101a <__retarget_lock_acquire_recursive>
 8010d42:	bf00      	nop
 8010d44:	2000ace5 	.word	0x2000ace5

08010d48 <__sfp_lock_release>:
 8010d48:	4801      	ldr	r0, [pc, #4]	@ (8010d50 <__sfp_lock_release+0x8>)
 8010d4a:	f000 b967 	b.w	801101c <__retarget_lock_release_recursive>
 8010d4e:	bf00      	nop
 8010d50:	2000ace5 	.word	0x2000ace5

08010d54 <__sinit>:
 8010d54:	b510      	push	{r4, lr}
 8010d56:	4604      	mov	r4, r0
 8010d58:	f7ff fff0 	bl	8010d3c <__sfp_lock_acquire>
 8010d5c:	6a23      	ldr	r3, [r4, #32]
 8010d5e:	b11b      	cbz	r3, 8010d68 <__sinit+0x14>
 8010d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d64:	f7ff bff0 	b.w	8010d48 <__sfp_lock_release>
 8010d68:	4b04      	ldr	r3, [pc, #16]	@ (8010d7c <__sinit+0x28>)
 8010d6a:	6223      	str	r3, [r4, #32]
 8010d6c:	4b04      	ldr	r3, [pc, #16]	@ (8010d80 <__sinit+0x2c>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d1f5      	bne.n	8010d60 <__sinit+0xc>
 8010d74:	f7ff ffc4 	bl	8010d00 <global_stdio_init.part.0>
 8010d78:	e7f2      	b.n	8010d60 <__sinit+0xc>
 8010d7a:	bf00      	nop
 8010d7c:	08010cc1 	.word	0x08010cc1
 8010d80:	2000acdc 	.word	0x2000acdc

08010d84 <_fwalk_sglue>:
 8010d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d88:	4607      	mov	r7, r0
 8010d8a:	4688      	mov	r8, r1
 8010d8c:	4614      	mov	r4, r2
 8010d8e:	2600      	movs	r6, #0
 8010d90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d94:	f1b9 0901 	subs.w	r9, r9, #1
 8010d98:	d505      	bpl.n	8010da6 <_fwalk_sglue+0x22>
 8010d9a:	6824      	ldr	r4, [r4, #0]
 8010d9c:	2c00      	cmp	r4, #0
 8010d9e:	d1f7      	bne.n	8010d90 <_fwalk_sglue+0xc>
 8010da0:	4630      	mov	r0, r6
 8010da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010da6:	89ab      	ldrh	r3, [r5, #12]
 8010da8:	2b01      	cmp	r3, #1
 8010daa:	d907      	bls.n	8010dbc <_fwalk_sglue+0x38>
 8010dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010db0:	3301      	adds	r3, #1
 8010db2:	d003      	beq.n	8010dbc <_fwalk_sglue+0x38>
 8010db4:	4629      	mov	r1, r5
 8010db6:	4638      	mov	r0, r7
 8010db8:	47c0      	blx	r8
 8010dba:	4306      	orrs	r6, r0
 8010dbc:	3568      	adds	r5, #104	@ 0x68
 8010dbe:	e7e9      	b.n	8010d94 <_fwalk_sglue+0x10>

08010dc0 <iprintf>:
 8010dc0:	b40f      	push	{r0, r1, r2, r3}
 8010dc2:	b507      	push	{r0, r1, r2, lr}
 8010dc4:	4906      	ldr	r1, [pc, #24]	@ (8010de0 <iprintf+0x20>)
 8010dc6:	ab04      	add	r3, sp, #16
 8010dc8:	6808      	ldr	r0, [r1, #0]
 8010dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dce:	6881      	ldr	r1, [r0, #8]
 8010dd0:	9301      	str	r3, [sp, #4]
 8010dd2:	f000 fa55 	bl	8011280 <_vfiprintf_r>
 8010dd6:	b003      	add	sp, #12
 8010dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ddc:	b004      	add	sp, #16
 8010dde:	4770      	bx	lr
 8010de0:	20000118 	.word	0x20000118

08010de4 <putchar>:
 8010de4:	4b02      	ldr	r3, [pc, #8]	@ (8010df0 <putchar+0xc>)
 8010de6:	4601      	mov	r1, r0
 8010de8:	6818      	ldr	r0, [r3, #0]
 8010dea:	6882      	ldr	r2, [r0, #8]
 8010dec:	f000 bd9a 	b.w	8011924 <_putc_r>
 8010df0:	20000118 	.word	0x20000118

08010df4 <__sread>:
 8010df4:	b510      	push	{r4, lr}
 8010df6:	460c      	mov	r4, r1
 8010df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dfc:	f000 f8be 	bl	8010f7c <_read_r>
 8010e00:	2800      	cmp	r0, #0
 8010e02:	bfab      	itete	ge
 8010e04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010e06:	89a3      	ldrhlt	r3, [r4, #12]
 8010e08:	181b      	addge	r3, r3, r0
 8010e0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010e0e:	bfac      	ite	ge
 8010e10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010e12:	81a3      	strhlt	r3, [r4, #12]
 8010e14:	bd10      	pop	{r4, pc}

08010e16 <__swrite>:
 8010e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e1a:	461f      	mov	r7, r3
 8010e1c:	898b      	ldrh	r3, [r1, #12]
 8010e1e:	05db      	lsls	r3, r3, #23
 8010e20:	4605      	mov	r5, r0
 8010e22:	460c      	mov	r4, r1
 8010e24:	4616      	mov	r6, r2
 8010e26:	d505      	bpl.n	8010e34 <__swrite+0x1e>
 8010e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e2c:	2302      	movs	r3, #2
 8010e2e:	2200      	movs	r2, #0
 8010e30:	f000 f892 	bl	8010f58 <_lseek_r>
 8010e34:	89a3      	ldrh	r3, [r4, #12]
 8010e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010e3e:	81a3      	strh	r3, [r4, #12]
 8010e40:	4632      	mov	r2, r6
 8010e42:	463b      	mov	r3, r7
 8010e44:	4628      	mov	r0, r5
 8010e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e4a:	f000 b8a9 	b.w	8010fa0 <_write_r>

08010e4e <__sseek>:
 8010e4e:	b510      	push	{r4, lr}
 8010e50:	460c      	mov	r4, r1
 8010e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e56:	f000 f87f 	bl	8010f58 <_lseek_r>
 8010e5a:	1c43      	adds	r3, r0, #1
 8010e5c:	89a3      	ldrh	r3, [r4, #12]
 8010e5e:	bf15      	itete	ne
 8010e60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010e62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010e66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010e6a:	81a3      	strheq	r3, [r4, #12]
 8010e6c:	bf18      	it	ne
 8010e6e:	81a3      	strhne	r3, [r4, #12]
 8010e70:	bd10      	pop	{r4, pc}

08010e72 <__sclose>:
 8010e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e76:	f000 b809 	b.w	8010e8c <_close_r>

08010e7a <memset>:
 8010e7a:	4402      	add	r2, r0
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d100      	bne.n	8010e84 <memset+0xa>
 8010e82:	4770      	bx	lr
 8010e84:	f803 1b01 	strb.w	r1, [r3], #1
 8010e88:	e7f9      	b.n	8010e7e <memset+0x4>
	...

08010e8c <_close_r>:
 8010e8c:	b538      	push	{r3, r4, r5, lr}
 8010e8e:	4d06      	ldr	r5, [pc, #24]	@ (8010ea8 <_close_r+0x1c>)
 8010e90:	2300      	movs	r3, #0
 8010e92:	4604      	mov	r4, r0
 8010e94:	4608      	mov	r0, r1
 8010e96:	602b      	str	r3, [r5, #0]
 8010e98:	f7f0 f8fd 	bl	8001096 <_close>
 8010e9c:	1c43      	adds	r3, r0, #1
 8010e9e:	d102      	bne.n	8010ea6 <_close_r+0x1a>
 8010ea0:	682b      	ldr	r3, [r5, #0]
 8010ea2:	b103      	cbz	r3, 8010ea6 <_close_r+0x1a>
 8010ea4:	6023      	str	r3, [r4, #0]
 8010ea6:	bd38      	pop	{r3, r4, r5, pc}
 8010ea8:	2000ace0 	.word	0x2000ace0

08010eac <_reclaim_reent>:
 8010eac:	4b29      	ldr	r3, [pc, #164]	@ (8010f54 <_reclaim_reent+0xa8>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	4283      	cmp	r3, r0
 8010eb2:	b570      	push	{r4, r5, r6, lr}
 8010eb4:	4604      	mov	r4, r0
 8010eb6:	d04b      	beq.n	8010f50 <_reclaim_reent+0xa4>
 8010eb8:	69c3      	ldr	r3, [r0, #28]
 8010eba:	b1ab      	cbz	r3, 8010ee8 <_reclaim_reent+0x3c>
 8010ebc:	68db      	ldr	r3, [r3, #12]
 8010ebe:	b16b      	cbz	r3, 8010edc <_reclaim_reent+0x30>
 8010ec0:	2500      	movs	r5, #0
 8010ec2:	69e3      	ldr	r3, [r4, #28]
 8010ec4:	68db      	ldr	r3, [r3, #12]
 8010ec6:	5959      	ldr	r1, [r3, r5]
 8010ec8:	2900      	cmp	r1, #0
 8010eca:	d13b      	bne.n	8010f44 <_reclaim_reent+0x98>
 8010ecc:	3504      	adds	r5, #4
 8010ece:	2d80      	cmp	r5, #128	@ 0x80
 8010ed0:	d1f7      	bne.n	8010ec2 <_reclaim_reent+0x16>
 8010ed2:	69e3      	ldr	r3, [r4, #28]
 8010ed4:	4620      	mov	r0, r4
 8010ed6:	68d9      	ldr	r1, [r3, #12]
 8010ed8:	f000 f8b0 	bl	801103c <_free_r>
 8010edc:	69e3      	ldr	r3, [r4, #28]
 8010ede:	6819      	ldr	r1, [r3, #0]
 8010ee0:	b111      	cbz	r1, 8010ee8 <_reclaim_reent+0x3c>
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	f000 f8aa 	bl	801103c <_free_r>
 8010ee8:	6961      	ldr	r1, [r4, #20]
 8010eea:	b111      	cbz	r1, 8010ef2 <_reclaim_reent+0x46>
 8010eec:	4620      	mov	r0, r4
 8010eee:	f000 f8a5 	bl	801103c <_free_r>
 8010ef2:	69e1      	ldr	r1, [r4, #28]
 8010ef4:	b111      	cbz	r1, 8010efc <_reclaim_reent+0x50>
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f000 f8a0 	bl	801103c <_free_r>
 8010efc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010efe:	b111      	cbz	r1, 8010f06 <_reclaim_reent+0x5a>
 8010f00:	4620      	mov	r0, r4
 8010f02:	f000 f89b 	bl	801103c <_free_r>
 8010f06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010f08:	b111      	cbz	r1, 8010f10 <_reclaim_reent+0x64>
 8010f0a:	4620      	mov	r0, r4
 8010f0c:	f000 f896 	bl	801103c <_free_r>
 8010f10:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010f12:	b111      	cbz	r1, 8010f1a <_reclaim_reent+0x6e>
 8010f14:	4620      	mov	r0, r4
 8010f16:	f000 f891 	bl	801103c <_free_r>
 8010f1a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010f1c:	b111      	cbz	r1, 8010f24 <_reclaim_reent+0x78>
 8010f1e:	4620      	mov	r0, r4
 8010f20:	f000 f88c 	bl	801103c <_free_r>
 8010f24:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010f26:	b111      	cbz	r1, 8010f2e <_reclaim_reent+0x82>
 8010f28:	4620      	mov	r0, r4
 8010f2a:	f000 f887 	bl	801103c <_free_r>
 8010f2e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010f30:	b111      	cbz	r1, 8010f38 <_reclaim_reent+0x8c>
 8010f32:	4620      	mov	r0, r4
 8010f34:	f000 f882 	bl	801103c <_free_r>
 8010f38:	6a23      	ldr	r3, [r4, #32]
 8010f3a:	b14b      	cbz	r3, 8010f50 <_reclaim_reent+0xa4>
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f42:	4718      	bx	r3
 8010f44:	680e      	ldr	r6, [r1, #0]
 8010f46:	4620      	mov	r0, r4
 8010f48:	f000 f878 	bl	801103c <_free_r>
 8010f4c:	4631      	mov	r1, r6
 8010f4e:	e7bb      	b.n	8010ec8 <_reclaim_reent+0x1c>
 8010f50:	bd70      	pop	{r4, r5, r6, pc}
 8010f52:	bf00      	nop
 8010f54:	20000118 	.word	0x20000118

08010f58 <_lseek_r>:
 8010f58:	b538      	push	{r3, r4, r5, lr}
 8010f5a:	4d07      	ldr	r5, [pc, #28]	@ (8010f78 <_lseek_r+0x20>)
 8010f5c:	4604      	mov	r4, r0
 8010f5e:	4608      	mov	r0, r1
 8010f60:	4611      	mov	r1, r2
 8010f62:	2200      	movs	r2, #0
 8010f64:	602a      	str	r2, [r5, #0]
 8010f66:	461a      	mov	r2, r3
 8010f68:	f7f0 f8bc 	bl	80010e4 <_lseek>
 8010f6c:	1c43      	adds	r3, r0, #1
 8010f6e:	d102      	bne.n	8010f76 <_lseek_r+0x1e>
 8010f70:	682b      	ldr	r3, [r5, #0]
 8010f72:	b103      	cbz	r3, 8010f76 <_lseek_r+0x1e>
 8010f74:	6023      	str	r3, [r4, #0]
 8010f76:	bd38      	pop	{r3, r4, r5, pc}
 8010f78:	2000ace0 	.word	0x2000ace0

08010f7c <_read_r>:
 8010f7c:	b538      	push	{r3, r4, r5, lr}
 8010f7e:	4d07      	ldr	r5, [pc, #28]	@ (8010f9c <_read_r+0x20>)
 8010f80:	4604      	mov	r4, r0
 8010f82:	4608      	mov	r0, r1
 8010f84:	4611      	mov	r1, r2
 8010f86:	2200      	movs	r2, #0
 8010f88:	602a      	str	r2, [r5, #0]
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	f7f0 f84a 	bl	8001024 <_read>
 8010f90:	1c43      	adds	r3, r0, #1
 8010f92:	d102      	bne.n	8010f9a <_read_r+0x1e>
 8010f94:	682b      	ldr	r3, [r5, #0]
 8010f96:	b103      	cbz	r3, 8010f9a <_read_r+0x1e>
 8010f98:	6023      	str	r3, [r4, #0]
 8010f9a:	bd38      	pop	{r3, r4, r5, pc}
 8010f9c:	2000ace0 	.word	0x2000ace0

08010fa0 <_write_r>:
 8010fa0:	b538      	push	{r3, r4, r5, lr}
 8010fa2:	4d07      	ldr	r5, [pc, #28]	@ (8010fc0 <_write_r+0x20>)
 8010fa4:	4604      	mov	r4, r0
 8010fa6:	4608      	mov	r0, r1
 8010fa8:	4611      	mov	r1, r2
 8010faa:	2200      	movs	r2, #0
 8010fac:	602a      	str	r2, [r5, #0]
 8010fae:	461a      	mov	r2, r3
 8010fb0:	f7f0 f855 	bl	800105e <_write>
 8010fb4:	1c43      	adds	r3, r0, #1
 8010fb6:	d102      	bne.n	8010fbe <_write_r+0x1e>
 8010fb8:	682b      	ldr	r3, [r5, #0]
 8010fba:	b103      	cbz	r3, 8010fbe <_write_r+0x1e>
 8010fbc:	6023      	str	r3, [r4, #0]
 8010fbe:	bd38      	pop	{r3, r4, r5, pc}
 8010fc0:	2000ace0 	.word	0x2000ace0

08010fc4 <__errno>:
 8010fc4:	4b01      	ldr	r3, [pc, #4]	@ (8010fcc <__errno+0x8>)
 8010fc6:	6818      	ldr	r0, [r3, #0]
 8010fc8:	4770      	bx	lr
 8010fca:	bf00      	nop
 8010fcc:	20000118 	.word	0x20000118

08010fd0 <__libc_init_array>:
 8010fd0:	b570      	push	{r4, r5, r6, lr}
 8010fd2:	4d0d      	ldr	r5, [pc, #52]	@ (8011008 <__libc_init_array+0x38>)
 8010fd4:	4c0d      	ldr	r4, [pc, #52]	@ (801100c <__libc_init_array+0x3c>)
 8010fd6:	1b64      	subs	r4, r4, r5
 8010fd8:	10a4      	asrs	r4, r4, #2
 8010fda:	2600      	movs	r6, #0
 8010fdc:	42a6      	cmp	r6, r4
 8010fde:	d109      	bne.n	8010ff4 <__libc_init_array+0x24>
 8010fe0:	4d0b      	ldr	r5, [pc, #44]	@ (8011010 <__libc_init_array+0x40>)
 8010fe2:	4c0c      	ldr	r4, [pc, #48]	@ (8011014 <__libc_init_array+0x44>)
 8010fe4:	f000 fdfa 	bl	8011bdc <_init>
 8010fe8:	1b64      	subs	r4, r4, r5
 8010fea:	10a4      	asrs	r4, r4, #2
 8010fec:	2600      	movs	r6, #0
 8010fee:	42a6      	cmp	r6, r4
 8010ff0:	d105      	bne.n	8010ffe <__libc_init_array+0x2e>
 8010ff2:	bd70      	pop	{r4, r5, r6, pc}
 8010ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ff8:	4798      	blx	r3
 8010ffa:	3601      	adds	r6, #1
 8010ffc:	e7ee      	b.n	8010fdc <__libc_init_array+0xc>
 8010ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8011002:	4798      	blx	r3
 8011004:	3601      	adds	r6, #1
 8011006:	e7f2      	b.n	8010fee <__libc_init_array+0x1e>
 8011008:	08011e2c 	.word	0x08011e2c
 801100c:	08011e2c 	.word	0x08011e2c
 8011010:	08011e2c 	.word	0x08011e2c
 8011014:	08011e30 	.word	0x08011e30

08011018 <__retarget_lock_init_recursive>:
 8011018:	4770      	bx	lr

0801101a <__retarget_lock_acquire_recursive>:
 801101a:	4770      	bx	lr

0801101c <__retarget_lock_release_recursive>:
 801101c:	4770      	bx	lr

0801101e <memcpy>:
 801101e:	440a      	add	r2, r1
 8011020:	4291      	cmp	r1, r2
 8011022:	f100 33ff 	add.w	r3, r0, #4294967295
 8011026:	d100      	bne.n	801102a <memcpy+0xc>
 8011028:	4770      	bx	lr
 801102a:	b510      	push	{r4, lr}
 801102c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011030:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011034:	4291      	cmp	r1, r2
 8011036:	d1f9      	bne.n	801102c <memcpy+0xe>
 8011038:	bd10      	pop	{r4, pc}
	...

0801103c <_free_r>:
 801103c:	b538      	push	{r3, r4, r5, lr}
 801103e:	4605      	mov	r5, r0
 8011040:	2900      	cmp	r1, #0
 8011042:	d041      	beq.n	80110c8 <_free_r+0x8c>
 8011044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011048:	1f0c      	subs	r4, r1, #4
 801104a:	2b00      	cmp	r3, #0
 801104c:	bfb8      	it	lt
 801104e:	18e4      	addlt	r4, r4, r3
 8011050:	f000 f8e0 	bl	8011214 <__malloc_lock>
 8011054:	4a1d      	ldr	r2, [pc, #116]	@ (80110cc <_free_r+0x90>)
 8011056:	6813      	ldr	r3, [r2, #0]
 8011058:	b933      	cbnz	r3, 8011068 <_free_r+0x2c>
 801105a:	6063      	str	r3, [r4, #4]
 801105c:	6014      	str	r4, [r2, #0]
 801105e:	4628      	mov	r0, r5
 8011060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011064:	f000 b8dc 	b.w	8011220 <__malloc_unlock>
 8011068:	42a3      	cmp	r3, r4
 801106a:	d908      	bls.n	801107e <_free_r+0x42>
 801106c:	6820      	ldr	r0, [r4, #0]
 801106e:	1821      	adds	r1, r4, r0
 8011070:	428b      	cmp	r3, r1
 8011072:	bf01      	itttt	eq
 8011074:	6819      	ldreq	r1, [r3, #0]
 8011076:	685b      	ldreq	r3, [r3, #4]
 8011078:	1809      	addeq	r1, r1, r0
 801107a:	6021      	streq	r1, [r4, #0]
 801107c:	e7ed      	b.n	801105a <_free_r+0x1e>
 801107e:	461a      	mov	r2, r3
 8011080:	685b      	ldr	r3, [r3, #4]
 8011082:	b10b      	cbz	r3, 8011088 <_free_r+0x4c>
 8011084:	42a3      	cmp	r3, r4
 8011086:	d9fa      	bls.n	801107e <_free_r+0x42>
 8011088:	6811      	ldr	r1, [r2, #0]
 801108a:	1850      	adds	r0, r2, r1
 801108c:	42a0      	cmp	r0, r4
 801108e:	d10b      	bne.n	80110a8 <_free_r+0x6c>
 8011090:	6820      	ldr	r0, [r4, #0]
 8011092:	4401      	add	r1, r0
 8011094:	1850      	adds	r0, r2, r1
 8011096:	4283      	cmp	r3, r0
 8011098:	6011      	str	r1, [r2, #0]
 801109a:	d1e0      	bne.n	801105e <_free_r+0x22>
 801109c:	6818      	ldr	r0, [r3, #0]
 801109e:	685b      	ldr	r3, [r3, #4]
 80110a0:	6053      	str	r3, [r2, #4]
 80110a2:	4408      	add	r0, r1
 80110a4:	6010      	str	r0, [r2, #0]
 80110a6:	e7da      	b.n	801105e <_free_r+0x22>
 80110a8:	d902      	bls.n	80110b0 <_free_r+0x74>
 80110aa:	230c      	movs	r3, #12
 80110ac:	602b      	str	r3, [r5, #0]
 80110ae:	e7d6      	b.n	801105e <_free_r+0x22>
 80110b0:	6820      	ldr	r0, [r4, #0]
 80110b2:	1821      	adds	r1, r4, r0
 80110b4:	428b      	cmp	r3, r1
 80110b6:	bf04      	itt	eq
 80110b8:	6819      	ldreq	r1, [r3, #0]
 80110ba:	685b      	ldreq	r3, [r3, #4]
 80110bc:	6063      	str	r3, [r4, #4]
 80110be:	bf04      	itt	eq
 80110c0:	1809      	addeq	r1, r1, r0
 80110c2:	6021      	streq	r1, [r4, #0]
 80110c4:	6054      	str	r4, [r2, #4]
 80110c6:	e7ca      	b.n	801105e <_free_r+0x22>
 80110c8:	bd38      	pop	{r3, r4, r5, pc}
 80110ca:	bf00      	nop
 80110cc:	2000acec 	.word	0x2000acec

080110d0 <sbrk_aligned>:
 80110d0:	b570      	push	{r4, r5, r6, lr}
 80110d2:	4e0f      	ldr	r6, [pc, #60]	@ (8011110 <sbrk_aligned+0x40>)
 80110d4:	460c      	mov	r4, r1
 80110d6:	6831      	ldr	r1, [r6, #0]
 80110d8:	4605      	mov	r5, r0
 80110da:	b911      	cbnz	r1, 80110e2 <sbrk_aligned+0x12>
 80110dc:	f000 fcea 	bl	8011ab4 <_sbrk_r>
 80110e0:	6030      	str	r0, [r6, #0]
 80110e2:	4621      	mov	r1, r4
 80110e4:	4628      	mov	r0, r5
 80110e6:	f000 fce5 	bl	8011ab4 <_sbrk_r>
 80110ea:	1c43      	adds	r3, r0, #1
 80110ec:	d103      	bne.n	80110f6 <sbrk_aligned+0x26>
 80110ee:	f04f 34ff 	mov.w	r4, #4294967295
 80110f2:	4620      	mov	r0, r4
 80110f4:	bd70      	pop	{r4, r5, r6, pc}
 80110f6:	1cc4      	adds	r4, r0, #3
 80110f8:	f024 0403 	bic.w	r4, r4, #3
 80110fc:	42a0      	cmp	r0, r4
 80110fe:	d0f8      	beq.n	80110f2 <sbrk_aligned+0x22>
 8011100:	1a21      	subs	r1, r4, r0
 8011102:	4628      	mov	r0, r5
 8011104:	f000 fcd6 	bl	8011ab4 <_sbrk_r>
 8011108:	3001      	adds	r0, #1
 801110a:	d1f2      	bne.n	80110f2 <sbrk_aligned+0x22>
 801110c:	e7ef      	b.n	80110ee <sbrk_aligned+0x1e>
 801110e:	bf00      	nop
 8011110:	2000ace8 	.word	0x2000ace8

08011114 <_malloc_r>:
 8011114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011118:	1ccd      	adds	r5, r1, #3
 801111a:	f025 0503 	bic.w	r5, r5, #3
 801111e:	3508      	adds	r5, #8
 8011120:	2d0c      	cmp	r5, #12
 8011122:	bf38      	it	cc
 8011124:	250c      	movcc	r5, #12
 8011126:	2d00      	cmp	r5, #0
 8011128:	4606      	mov	r6, r0
 801112a:	db01      	blt.n	8011130 <_malloc_r+0x1c>
 801112c:	42a9      	cmp	r1, r5
 801112e:	d904      	bls.n	801113a <_malloc_r+0x26>
 8011130:	230c      	movs	r3, #12
 8011132:	6033      	str	r3, [r6, #0]
 8011134:	2000      	movs	r0, #0
 8011136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801113a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011210 <_malloc_r+0xfc>
 801113e:	f000 f869 	bl	8011214 <__malloc_lock>
 8011142:	f8d8 3000 	ldr.w	r3, [r8]
 8011146:	461c      	mov	r4, r3
 8011148:	bb44      	cbnz	r4, 801119c <_malloc_r+0x88>
 801114a:	4629      	mov	r1, r5
 801114c:	4630      	mov	r0, r6
 801114e:	f7ff ffbf 	bl	80110d0 <sbrk_aligned>
 8011152:	1c43      	adds	r3, r0, #1
 8011154:	4604      	mov	r4, r0
 8011156:	d158      	bne.n	801120a <_malloc_r+0xf6>
 8011158:	f8d8 4000 	ldr.w	r4, [r8]
 801115c:	4627      	mov	r7, r4
 801115e:	2f00      	cmp	r7, #0
 8011160:	d143      	bne.n	80111ea <_malloc_r+0xd6>
 8011162:	2c00      	cmp	r4, #0
 8011164:	d04b      	beq.n	80111fe <_malloc_r+0xea>
 8011166:	6823      	ldr	r3, [r4, #0]
 8011168:	4639      	mov	r1, r7
 801116a:	4630      	mov	r0, r6
 801116c:	eb04 0903 	add.w	r9, r4, r3
 8011170:	f000 fca0 	bl	8011ab4 <_sbrk_r>
 8011174:	4581      	cmp	r9, r0
 8011176:	d142      	bne.n	80111fe <_malloc_r+0xea>
 8011178:	6821      	ldr	r1, [r4, #0]
 801117a:	1a6d      	subs	r5, r5, r1
 801117c:	4629      	mov	r1, r5
 801117e:	4630      	mov	r0, r6
 8011180:	f7ff ffa6 	bl	80110d0 <sbrk_aligned>
 8011184:	3001      	adds	r0, #1
 8011186:	d03a      	beq.n	80111fe <_malloc_r+0xea>
 8011188:	6823      	ldr	r3, [r4, #0]
 801118a:	442b      	add	r3, r5
 801118c:	6023      	str	r3, [r4, #0]
 801118e:	f8d8 3000 	ldr.w	r3, [r8]
 8011192:	685a      	ldr	r2, [r3, #4]
 8011194:	bb62      	cbnz	r2, 80111f0 <_malloc_r+0xdc>
 8011196:	f8c8 7000 	str.w	r7, [r8]
 801119a:	e00f      	b.n	80111bc <_malloc_r+0xa8>
 801119c:	6822      	ldr	r2, [r4, #0]
 801119e:	1b52      	subs	r2, r2, r5
 80111a0:	d420      	bmi.n	80111e4 <_malloc_r+0xd0>
 80111a2:	2a0b      	cmp	r2, #11
 80111a4:	d917      	bls.n	80111d6 <_malloc_r+0xc2>
 80111a6:	1961      	adds	r1, r4, r5
 80111a8:	42a3      	cmp	r3, r4
 80111aa:	6025      	str	r5, [r4, #0]
 80111ac:	bf18      	it	ne
 80111ae:	6059      	strne	r1, [r3, #4]
 80111b0:	6863      	ldr	r3, [r4, #4]
 80111b2:	bf08      	it	eq
 80111b4:	f8c8 1000 	streq.w	r1, [r8]
 80111b8:	5162      	str	r2, [r4, r5]
 80111ba:	604b      	str	r3, [r1, #4]
 80111bc:	4630      	mov	r0, r6
 80111be:	f000 f82f 	bl	8011220 <__malloc_unlock>
 80111c2:	f104 000b 	add.w	r0, r4, #11
 80111c6:	1d23      	adds	r3, r4, #4
 80111c8:	f020 0007 	bic.w	r0, r0, #7
 80111cc:	1ac2      	subs	r2, r0, r3
 80111ce:	bf1c      	itt	ne
 80111d0:	1a1b      	subne	r3, r3, r0
 80111d2:	50a3      	strne	r3, [r4, r2]
 80111d4:	e7af      	b.n	8011136 <_malloc_r+0x22>
 80111d6:	6862      	ldr	r2, [r4, #4]
 80111d8:	42a3      	cmp	r3, r4
 80111da:	bf0c      	ite	eq
 80111dc:	f8c8 2000 	streq.w	r2, [r8]
 80111e0:	605a      	strne	r2, [r3, #4]
 80111e2:	e7eb      	b.n	80111bc <_malloc_r+0xa8>
 80111e4:	4623      	mov	r3, r4
 80111e6:	6864      	ldr	r4, [r4, #4]
 80111e8:	e7ae      	b.n	8011148 <_malloc_r+0x34>
 80111ea:	463c      	mov	r4, r7
 80111ec:	687f      	ldr	r7, [r7, #4]
 80111ee:	e7b6      	b.n	801115e <_malloc_r+0x4a>
 80111f0:	461a      	mov	r2, r3
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	42a3      	cmp	r3, r4
 80111f6:	d1fb      	bne.n	80111f0 <_malloc_r+0xdc>
 80111f8:	2300      	movs	r3, #0
 80111fa:	6053      	str	r3, [r2, #4]
 80111fc:	e7de      	b.n	80111bc <_malloc_r+0xa8>
 80111fe:	230c      	movs	r3, #12
 8011200:	6033      	str	r3, [r6, #0]
 8011202:	4630      	mov	r0, r6
 8011204:	f000 f80c 	bl	8011220 <__malloc_unlock>
 8011208:	e794      	b.n	8011134 <_malloc_r+0x20>
 801120a:	6005      	str	r5, [r0, #0]
 801120c:	e7d6      	b.n	80111bc <_malloc_r+0xa8>
 801120e:	bf00      	nop
 8011210:	2000acec 	.word	0x2000acec

08011214 <__malloc_lock>:
 8011214:	4801      	ldr	r0, [pc, #4]	@ (801121c <__malloc_lock+0x8>)
 8011216:	f7ff bf00 	b.w	801101a <__retarget_lock_acquire_recursive>
 801121a:	bf00      	nop
 801121c:	2000ace4 	.word	0x2000ace4

08011220 <__malloc_unlock>:
 8011220:	4801      	ldr	r0, [pc, #4]	@ (8011228 <__malloc_unlock+0x8>)
 8011222:	f7ff befb 	b.w	801101c <__retarget_lock_release_recursive>
 8011226:	bf00      	nop
 8011228:	2000ace4 	.word	0x2000ace4

0801122c <__sfputc_r>:
 801122c:	6893      	ldr	r3, [r2, #8]
 801122e:	3b01      	subs	r3, #1
 8011230:	2b00      	cmp	r3, #0
 8011232:	b410      	push	{r4}
 8011234:	6093      	str	r3, [r2, #8]
 8011236:	da08      	bge.n	801124a <__sfputc_r+0x1e>
 8011238:	6994      	ldr	r4, [r2, #24]
 801123a:	42a3      	cmp	r3, r4
 801123c:	db01      	blt.n	8011242 <__sfputc_r+0x16>
 801123e:	290a      	cmp	r1, #10
 8011240:	d103      	bne.n	801124a <__sfputc_r+0x1e>
 8011242:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011246:	f000 bba1 	b.w	801198c <__swbuf_r>
 801124a:	6813      	ldr	r3, [r2, #0]
 801124c:	1c58      	adds	r0, r3, #1
 801124e:	6010      	str	r0, [r2, #0]
 8011250:	7019      	strb	r1, [r3, #0]
 8011252:	4608      	mov	r0, r1
 8011254:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011258:	4770      	bx	lr

0801125a <__sfputs_r>:
 801125a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125c:	4606      	mov	r6, r0
 801125e:	460f      	mov	r7, r1
 8011260:	4614      	mov	r4, r2
 8011262:	18d5      	adds	r5, r2, r3
 8011264:	42ac      	cmp	r4, r5
 8011266:	d101      	bne.n	801126c <__sfputs_r+0x12>
 8011268:	2000      	movs	r0, #0
 801126a:	e007      	b.n	801127c <__sfputs_r+0x22>
 801126c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011270:	463a      	mov	r2, r7
 8011272:	4630      	mov	r0, r6
 8011274:	f7ff ffda 	bl	801122c <__sfputc_r>
 8011278:	1c43      	adds	r3, r0, #1
 801127a:	d1f3      	bne.n	8011264 <__sfputs_r+0xa>
 801127c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011280 <_vfiprintf_r>:
 8011280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011284:	460d      	mov	r5, r1
 8011286:	b09d      	sub	sp, #116	@ 0x74
 8011288:	4614      	mov	r4, r2
 801128a:	4698      	mov	r8, r3
 801128c:	4606      	mov	r6, r0
 801128e:	b118      	cbz	r0, 8011298 <_vfiprintf_r+0x18>
 8011290:	6a03      	ldr	r3, [r0, #32]
 8011292:	b90b      	cbnz	r3, 8011298 <_vfiprintf_r+0x18>
 8011294:	f7ff fd5e 	bl	8010d54 <__sinit>
 8011298:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801129a:	07d9      	lsls	r1, r3, #31
 801129c:	d405      	bmi.n	80112aa <_vfiprintf_r+0x2a>
 801129e:	89ab      	ldrh	r3, [r5, #12]
 80112a0:	059a      	lsls	r2, r3, #22
 80112a2:	d402      	bmi.n	80112aa <_vfiprintf_r+0x2a>
 80112a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80112a6:	f7ff feb8 	bl	801101a <__retarget_lock_acquire_recursive>
 80112aa:	89ab      	ldrh	r3, [r5, #12]
 80112ac:	071b      	lsls	r3, r3, #28
 80112ae:	d501      	bpl.n	80112b4 <_vfiprintf_r+0x34>
 80112b0:	692b      	ldr	r3, [r5, #16]
 80112b2:	b99b      	cbnz	r3, 80112dc <_vfiprintf_r+0x5c>
 80112b4:	4629      	mov	r1, r5
 80112b6:	4630      	mov	r0, r6
 80112b8:	f000 fba6 	bl	8011a08 <__swsetup_r>
 80112bc:	b170      	cbz	r0, 80112dc <_vfiprintf_r+0x5c>
 80112be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80112c0:	07dc      	lsls	r4, r3, #31
 80112c2:	d504      	bpl.n	80112ce <_vfiprintf_r+0x4e>
 80112c4:	f04f 30ff 	mov.w	r0, #4294967295
 80112c8:	b01d      	add	sp, #116	@ 0x74
 80112ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ce:	89ab      	ldrh	r3, [r5, #12]
 80112d0:	0598      	lsls	r0, r3, #22
 80112d2:	d4f7      	bmi.n	80112c4 <_vfiprintf_r+0x44>
 80112d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80112d6:	f7ff fea1 	bl	801101c <__retarget_lock_release_recursive>
 80112da:	e7f3      	b.n	80112c4 <_vfiprintf_r+0x44>
 80112dc:	2300      	movs	r3, #0
 80112de:	9309      	str	r3, [sp, #36]	@ 0x24
 80112e0:	2320      	movs	r3, #32
 80112e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80112e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80112ea:	2330      	movs	r3, #48	@ 0x30
 80112ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801149c <_vfiprintf_r+0x21c>
 80112f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80112f4:	f04f 0901 	mov.w	r9, #1
 80112f8:	4623      	mov	r3, r4
 80112fa:	469a      	mov	sl, r3
 80112fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011300:	b10a      	cbz	r2, 8011306 <_vfiprintf_r+0x86>
 8011302:	2a25      	cmp	r2, #37	@ 0x25
 8011304:	d1f9      	bne.n	80112fa <_vfiprintf_r+0x7a>
 8011306:	ebba 0b04 	subs.w	fp, sl, r4
 801130a:	d00b      	beq.n	8011324 <_vfiprintf_r+0xa4>
 801130c:	465b      	mov	r3, fp
 801130e:	4622      	mov	r2, r4
 8011310:	4629      	mov	r1, r5
 8011312:	4630      	mov	r0, r6
 8011314:	f7ff ffa1 	bl	801125a <__sfputs_r>
 8011318:	3001      	adds	r0, #1
 801131a:	f000 80a7 	beq.w	801146c <_vfiprintf_r+0x1ec>
 801131e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011320:	445a      	add	r2, fp
 8011322:	9209      	str	r2, [sp, #36]	@ 0x24
 8011324:	f89a 3000 	ldrb.w	r3, [sl]
 8011328:	2b00      	cmp	r3, #0
 801132a:	f000 809f 	beq.w	801146c <_vfiprintf_r+0x1ec>
 801132e:	2300      	movs	r3, #0
 8011330:	f04f 32ff 	mov.w	r2, #4294967295
 8011334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011338:	f10a 0a01 	add.w	sl, sl, #1
 801133c:	9304      	str	r3, [sp, #16]
 801133e:	9307      	str	r3, [sp, #28]
 8011340:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011344:	931a      	str	r3, [sp, #104]	@ 0x68
 8011346:	4654      	mov	r4, sl
 8011348:	2205      	movs	r2, #5
 801134a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801134e:	4853      	ldr	r0, [pc, #332]	@ (801149c <_vfiprintf_r+0x21c>)
 8011350:	f7ee ff16 	bl	8000180 <memchr>
 8011354:	9a04      	ldr	r2, [sp, #16]
 8011356:	b9d8      	cbnz	r0, 8011390 <_vfiprintf_r+0x110>
 8011358:	06d1      	lsls	r1, r2, #27
 801135a:	bf44      	itt	mi
 801135c:	2320      	movmi	r3, #32
 801135e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011362:	0713      	lsls	r3, r2, #28
 8011364:	bf44      	itt	mi
 8011366:	232b      	movmi	r3, #43	@ 0x2b
 8011368:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801136c:	f89a 3000 	ldrb.w	r3, [sl]
 8011370:	2b2a      	cmp	r3, #42	@ 0x2a
 8011372:	d015      	beq.n	80113a0 <_vfiprintf_r+0x120>
 8011374:	9a07      	ldr	r2, [sp, #28]
 8011376:	4654      	mov	r4, sl
 8011378:	2000      	movs	r0, #0
 801137a:	f04f 0c0a 	mov.w	ip, #10
 801137e:	4621      	mov	r1, r4
 8011380:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011384:	3b30      	subs	r3, #48	@ 0x30
 8011386:	2b09      	cmp	r3, #9
 8011388:	d94b      	bls.n	8011422 <_vfiprintf_r+0x1a2>
 801138a:	b1b0      	cbz	r0, 80113ba <_vfiprintf_r+0x13a>
 801138c:	9207      	str	r2, [sp, #28]
 801138e:	e014      	b.n	80113ba <_vfiprintf_r+0x13a>
 8011390:	eba0 0308 	sub.w	r3, r0, r8
 8011394:	fa09 f303 	lsl.w	r3, r9, r3
 8011398:	4313      	orrs	r3, r2
 801139a:	9304      	str	r3, [sp, #16]
 801139c:	46a2      	mov	sl, r4
 801139e:	e7d2      	b.n	8011346 <_vfiprintf_r+0xc6>
 80113a0:	9b03      	ldr	r3, [sp, #12]
 80113a2:	1d19      	adds	r1, r3, #4
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	9103      	str	r1, [sp, #12]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	bfbb      	ittet	lt
 80113ac:	425b      	neglt	r3, r3
 80113ae:	f042 0202 	orrlt.w	r2, r2, #2
 80113b2:	9307      	strge	r3, [sp, #28]
 80113b4:	9307      	strlt	r3, [sp, #28]
 80113b6:	bfb8      	it	lt
 80113b8:	9204      	strlt	r2, [sp, #16]
 80113ba:	7823      	ldrb	r3, [r4, #0]
 80113bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80113be:	d10a      	bne.n	80113d6 <_vfiprintf_r+0x156>
 80113c0:	7863      	ldrb	r3, [r4, #1]
 80113c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80113c4:	d132      	bne.n	801142c <_vfiprintf_r+0x1ac>
 80113c6:	9b03      	ldr	r3, [sp, #12]
 80113c8:	1d1a      	adds	r2, r3, #4
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	9203      	str	r2, [sp, #12]
 80113ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80113d2:	3402      	adds	r4, #2
 80113d4:	9305      	str	r3, [sp, #20]
 80113d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80114ac <_vfiprintf_r+0x22c>
 80113da:	7821      	ldrb	r1, [r4, #0]
 80113dc:	2203      	movs	r2, #3
 80113de:	4650      	mov	r0, sl
 80113e0:	f7ee fece 	bl	8000180 <memchr>
 80113e4:	b138      	cbz	r0, 80113f6 <_vfiprintf_r+0x176>
 80113e6:	9b04      	ldr	r3, [sp, #16]
 80113e8:	eba0 000a 	sub.w	r0, r0, sl
 80113ec:	2240      	movs	r2, #64	@ 0x40
 80113ee:	4082      	lsls	r2, r0
 80113f0:	4313      	orrs	r3, r2
 80113f2:	3401      	adds	r4, #1
 80113f4:	9304      	str	r3, [sp, #16]
 80113f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113fa:	4829      	ldr	r0, [pc, #164]	@ (80114a0 <_vfiprintf_r+0x220>)
 80113fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011400:	2206      	movs	r2, #6
 8011402:	f7ee febd 	bl	8000180 <memchr>
 8011406:	2800      	cmp	r0, #0
 8011408:	d03f      	beq.n	801148a <_vfiprintf_r+0x20a>
 801140a:	4b26      	ldr	r3, [pc, #152]	@ (80114a4 <_vfiprintf_r+0x224>)
 801140c:	bb1b      	cbnz	r3, 8011456 <_vfiprintf_r+0x1d6>
 801140e:	9b03      	ldr	r3, [sp, #12]
 8011410:	3307      	adds	r3, #7
 8011412:	f023 0307 	bic.w	r3, r3, #7
 8011416:	3308      	adds	r3, #8
 8011418:	9303      	str	r3, [sp, #12]
 801141a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801141c:	443b      	add	r3, r7
 801141e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011420:	e76a      	b.n	80112f8 <_vfiprintf_r+0x78>
 8011422:	fb0c 3202 	mla	r2, ip, r2, r3
 8011426:	460c      	mov	r4, r1
 8011428:	2001      	movs	r0, #1
 801142a:	e7a8      	b.n	801137e <_vfiprintf_r+0xfe>
 801142c:	2300      	movs	r3, #0
 801142e:	3401      	adds	r4, #1
 8011430:	9305      	str	r3, [sp, #20]
 8011432:	4619      	mov	r1, r3
 8011434:	f04f 0c0a 	mov.w	ip, #10
 8011438:	4620      	mov	r0, r4
 801143a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801143e:	3a30      	subs	r2, #48	@ 0x30
 8011440:	2a09      	cmp	r2, #9
 8011442:	d903      	bls.n	801144c <_vfiprintf_r+0x1cc>
 8011444:	2b00      	cmp	r3, #0
 8011446:	d0c6      	beq.n	80113d6 <_vfiprintf_r+0x156>
 8011448:	9105      	str	r1, [sp, #20]
 801144a:	e7c4      	b.n	80113d6 <_vfiprintf_r+0x156>
 801144c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011450:	4604      	mov	r4, r0
 8011452:	2301      	movs	r3, #1
 8011454:	e7f0      	b.n	8011438 <_vfiprintf_r+0x1b8>
 8011456:	ab03      	add	r3, sp, #12
 8011458:	9300      	str	r3, [sp, #0]
 801145a:	462a      	mov	r2, r5
 801145c:	4b12      	ldr	r3, [pc, #72]	@ (80114a8 <_vfiprintf_r+0x228>)
 801145e:	a904      	add	r1, sp, #16
 8011460:	4630      	mov	r0, r6
 8011462:	f3af 8000 	nop.w
 8011466:	4607      	mov	r7, r0
 8011468:	1c78      	adds	r0, r7, #1
 801146a:	d1d6      	bne.n	801141a <_vfiprintf_r+0x19a>
 801146c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801146e:	07d9      	lsls	r1, r3, #31
 8011470:	d405      	bmi.n	801147e <_vfiprintf_r+0x1fe>
 8011472:	89ab      	ldrh	r3, [r5, #12]
 8011474:	059a      	lsls	r2, r3, #22
 8011476:	d402      	bmi.n	801147e <_vfiprintf_r+0x1fe>
 8011478:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801147a:	f7ff fdcf 	bl	801101c <__retarget_lock_release_recursive>
 801147e:	89ab      	ldrh	r3, [r5, #12]
 8011480:	065b      	lsls	r3, r3, #25
 8011482:	f53f af1f 	bmi.w	80112c4 <_vfiprintf_r+0x44>
 8011486:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011488:	e71e      	b.n	80112c8 <_vfiprintf_r+0x48>
 801148a:	ab03      	add	r3, sp, #12
 801148c:	9300      	str	r3, [sp, #0]
 801148e:	462a      	mov	r2, r5
 8011490:	4b05      	ldr	r3, [pc, #20]	@ (80114a8 <_vfiprintf_r+0x228>)
 8011492:	a904      	add	r1, sp, #16
 8011494:	4630      	mov	r0, r6
 8011496:	f000 f879 	bl	801158c <_printf_i>
 801149a:	e7e4      	b.n	8011466 <_vfiprintf_r+0x1e6>
 801149c:	08011df0 	.word	0x08011df0
 80114a0:	08011dfa 	.word	0x08011dfa
 80114a4:	00000000 	.word	0x00000000
 80114a8:	0801125b 	.word	0x0801125b
 80114ac:	08011df6 	.word	0x08011df6

080114b0 <_printf_common>:
 80114b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114b4:	4616      	mov	r6, r2
 80114b6:	4698      	mov	r8, r3
 80114b8:	688a      	ldr	r2, [r1, #8]
 80114ba:	690b      	ldr	r3, [r1, #16]
 80114bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80114c0:	4293      	cmp	r3, r2
 80114c2:	bfb8      	it	lt
 80114c4:	4613      	movlt	r3, r2
 80114c6:	6033      	str	r3, [r6, #0]
 80114c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80114cc:	4607      	mov	r7, r0
 80114ce:	460c      	mov	r4, r1
 80114d0:	b10a      	cbz	r2, 80114d6 <_printf_common+0x26>
 80114d2:	3301      	adds	r3, #1
 80114d4:	6033      	str	r3, [r6, #0]
 80114d6:	6823      	ldr	r3, [r4, #0]
 80114d8:	0699      	lsls	r1, r3, #26
 80114da:	bf42      	ittt	mi
 80114dc:	6833      	ldrmi	r3, [r6, #0]
 80114de:	3302      	addmi	r3, #2
 80114e0:	6033      	strmi	r3, [r6, #0]
 80114e2:	6825      	ldr	r5, [r4, #0]
 80114e4:	f015 0506 	ands.w	r5, r5, #6
 80114e8:	d106      	bne.n	80114f8 <_printf_common+0x48>
 80114ea:	f104 0a19 	add.w	sl, r4, #25
 80114ee:	68e3      	ldr	r3, [r4, #12]
 80114f0:	6832      	ldr	r2, [r6, #0]
 80114f2:	1a9b      	subs	r3, r3, r2
 80114f4:	42ab      	cmp	r3, r5
 80114f6:	dc26      	bgt.n	8011546 <_printf_common+0x96>
 80114f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80114fc:	6822      	ldr	r2, [r4, #0]
 80114fe:	3b00      	subs	r3, #0
 8011500:	bf18      	it	ne
 8011502:	2301      	movne	r3, #1
 8011504:	0692      	lsls	r2, r2, #26
 8011506:	d42b      	bmi.n	8011560 <_printf_common+0xb0>
 8011508:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801150c:	4641      	mov	r1, r8
 801150e:	4638      	mov	r0, r7
 8011510:	47c8      	blx	r9
 8011512:	3001      	adds	r0, #1
 8011514:	d01e      	beq.n	8011554 <_printf_common+0xa4>
 8011516:	6823      	ldr	r3, [r4, #0]
 8011518:	6922      	ldr	r2, [r4, #16]
 801151a:	f003 0306 	and.w	r3, r3, #6
 801151e:	2b04      	cmp	r3, #4
 8011520:	bf02      	ittt	eq
 8011522:	68e5      	ldreq	r5, [r4, #12]
 8011524:	6833      	ldreq	r3, [r6, #0]
 8011526:	1aed      	subeq	r5, r5, r3
 8011528:	68a3      	ldr	r3, [r4, #8]
 801152a:	bf0c      	ite	eq
 801152c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011530:	2500      	movne	r5, #0
 8011532:	4293      	cmp	r3, r2
 8011534:	bfc4      	itt	gt
 8011536:	1a9b      	subgt	r3, r3, r2
 8011538:	18ed      	addgt	r5, r5, r3
 801153a:	2600      	movs	r6, #0
 801153c:	341a      	adds	r4, #26
 801153e:	42b5      	cmp	r5, r6
 8011540:	d11a      	bne.n	8011578 <_printf_common+0xc8>
 8011542:	2000      	movs	r0, #0
 8011544:	e008      	b.n	8011558 <_printf_common+0xa8>
 8011546:	2301      	movs	r3, #1
 8011548:	4652      	mov	r2, sl
 801154a:	4641      	mov	r1, r8
 801154c:	4638      	mov	r0, r7
 801154e:	47c8      	blx	r9
 8011550:	3001      	adds	r0, #1
 8011552:	d103      	bne.n	801155c <_printf_common+0xac>
 8011554:	f04f 30ff 	mov.w	r0, #4294967295
 8011558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801155c:	3501      	adds	r5, #1
 801155e:	e7c6      	b.n	80114ee <_printf_common+0x3e>
 8011560:	18e1      	adds	r1, r4, r3
 8011562:	1c5a      	adds	r2, r3, #1
 8011564:	2030      	movs	r0, #48	@ 0x30
 8011566:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801156a:	4422      	add	r2, r4
 801156c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011570:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011574:	3302      	adds	r3, #2
 8011576:	e7c7      	b.n	8011508 <_printf_common+0x58>
 8011578:	2301      	movs	r3, #1
 801157a:	4622      	mov	r2, r4
 801157c:	4641      	mov	r1, r8
 801157e:	4638      	mov	r0, r7
 8011580:	47c8      	blx	r9
 8011582:	3001      	adds	r0, #1
 8011584:	d0e6      	beq.n	8011554 <_printf_common+0xa4>
 8011586:	3601      	adds	r6, #1
 8011588:	e7d9      	b.n	801153e <_printf_common+0x8e>
	...

0801158c <_printf_i>:
 801158c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011590:	7e0f      	ldrb	r7, [r1, #24]
 8011592:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011594:	2f78      	cmp	r7, #120	@ 0x78
 8011596:	4691      	mov	r9, r2
 8011598:	4680      	mov	r8, r0
 801159a:	460c      	mov	r4, r1
 801159c:	469a      	mov	sl, r3
 801159e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80115a2:	d807      	bhi.n	80115b4 <_printf_i+0x28>
 80115a4:	2f62      	cmp	r7, #98	@ 0x62
 80115a6:	d80a      	bhi.n	80115be <_printf_i+0x32>
 80115a8:	2f00      	cmp	r7, #0
 80115aa:	f000 80d2 	beq.w	8011752 <_printf_i+0x1c6>
 80115ae:	2f58      	cmp	r7, #88	@ 0x58
 80115b0:	f000 80b9 	beq.w	8011726 <_printf_i+0x19a>
 80115b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80115b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80115bc:	e03a      	b.n	8011634 <_printf_i+0xa8>
 80115be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80115c2:	2b15      	cmp	r3, #21
 80115c4:	d8f6      	bhi.n	80115b4 <_printf_i+0x28>
 80115c6:	a101      	add	r1, pc, #4	@ (adr r1, 80115cc <_printf_i+0x40>)
 80115c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80115cc:	08011625 	.word	0x08011625
 80115d0:	08011639 	.word	0x08011639
 80115d4:	080115b5 	.word	0x080115b5
 80115d8:	080115b5 	.word	0x080115b5
 80115dc:	080115b5 	.word	0x080115b5
 80115e0:	080115b5 	.word	0x080115b5
 80115e4:	08011639 	.word	0x08011639
 80115e8:	080115b5 	.word	0x080115b5
 80115ec:	080115b5 	.word	0x080115b5
 80115f0:	080115b5 	.word	0x080115b5
 80115f4:	080115b5 	.word	0x080115b5
 80115f8:	08011739 	.word	0x08011739
 80115fc:	08011663 	.word	0x08011663
 8011600:	080116f3 	.word	0x080116f3
 8011604:	080115b5 	.word	0x080115b5
 8011608:	080115b5 	.word	0x080115b5
 801160c:	0801175b 	.word	0x0801175b
 8011610:	080115b5 	.word	0x080115b5
 8011614:	08011663 	.word	0x08011663
 8011618:	080115b5 	.word	0x080115b5
 801161c:	080115b5 	.word	0x080115b5
 8011620:	080116fb 	.word	0x080116fb
 8011624:	6833      	ldr	r3, [r6, #0]
 8011626:	1d1a      	adds	r2, r3, #4
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	6032      	str	r2, [r6, #0]
 801162c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011630:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011634:	2301      	movs	r3, #1
 8011636:	e09d      	b.n	8011774 <_printf_i+0x1e8>
 8011638:	6833      	ldr	r3, [r6, #0]
 801163a:	6820      	ldr	r0, [r4, #0]
 801163c:	1d19      	adds	r1, r3, #4
 801163e:	6031      	str	r1, [r6, #0]
 8011640:	0606      	lsls	r6, r0, #24
 8011642:	d501      	bpl.n	8011648 <_printf_i+0xbc>
 8011644:	681d      	ldr	r5, [r3, #0]
 8011646:	e003      	b.n	8011650 <_printf_i+0xc4>
 8011648:	0645      	lsls	r5, r0, #25
 801164a:	d5fb      	bpl.n	8011644 <_printf_i+0xb8>
 801164c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011650:	2d00      	cmp	r5, #0
 8011652:	da03      	bge.n	801165c <_printf_i+0xd0>
 8011654:	232d      	movs	r3, #45	@ 0x2d
 8011656:	426d      	negs	r5, r5
 8011658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801165c:	4859      	ldr	r0, [pc, #356]	@ (80117c4 <_printf_i+0x238>)
 801165e:	230a      	movs	r3, #10
 8011660:	e011      	b.n	8011686 <_printf_i+0xfa>
 8011662:	6821      	ldr	r1, [r4, #0]
 8011664:	6833      	ldr	r3, [r6, #0]
 8011666:	0608      	lsls	r0, r1, #24
 8011668:	f853 5b04 	ldr.w	r5, [r3], #4
 801166c:	d402      	bmi.n	8011674 <_printf_i+0xe8>
 801166e:	0649      	lsls	r1, r1, #25
 8011670:	bf48      	it	mi
 8011672:	b2ad      	uxthmi	r5, r5
 8011674:	2f6f      	cmp	r7, #111	@ 0x6f
 8011676:	4853      	ldr	r0, [pc, #332]	@ (80117c4 <_printf_i+0x238>)
 8011678:	6033      	str	r3, [r6, #0]
 801167a:	bf14      	ite	ne
 801167c:	230a      	movne	r3, #10
 801167e:	2308      	moveq	r3, #8
 8011680:	2100      	movs	r1, #0
 8011682:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011686:	6866      	ldr	r6, [r4, #4]
 8011688:	60a6      	str	r6, [r4, #8]
 801168a:	2e00      	cmp	r6, #0
 801168c:	bfa2      	ittt	ge
 801168e:	6821      	ldrge	r1, [r4, #0]
 8011690:	f021 0104 	bicge.w	r1, r1, #4
 8011694:	6021      	strge	r1, [r4, #0]
 8011696:	b90d      	cbnz	r5, 801169c <_printf_i+0x110>
 8011698:	2e00      	cmp	r6, #0
 801169a:	d04b      	beq.n	8011734 <_printf_i+0x1a8>
 801169c:	4616      	mov	r6, r2
 801169e:	fbb5 f1f3 	udiv	r1, r5, r3
 80116a2:	fb03 5711 	mls	r7, r3, r1, r5
 80116a6:	5dc7      	ldrb	r7, [r0, r7]
 80116a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80116ac:	462f      	mov	r7, r5
 80116ae:	42bb      	cmp	r3, r7
 80116b0:	460d      	mov	r5, r1
 80116b2:	d9f4      	bls.n	801169e <_printf_i+0x112>
 80116b4:	2b08      	cmp	r3, #8
 80116b6:	d10b      	bne.n	80116d0 <_printf_i+0x144>
 80116b8:	6823      	ldr	r3, [r4, #0]
 80116ba:	07df      	lsls	r7, r3, #31
 80116bc:	d508      	bpl.n	80116d0 <_printf_i+0x144>
 80116be:	6923      	ldr	r3, [r4, #16]
 80116c0:	6861      	ldr	r1, [r4, #4]
 80116c2:	4299      	cmp	r1, r3
 80116c4:	bfde      	ittt	le
 80116c6:	2330      	movle	r3, #48	@ 0x30
 80116c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80116cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80116d0:	1b92      	subs	r2, r2, r6
 80116d2:	6122      	str	r2, [r4, #16]
 80116d4:	f8cd a000 	str.w	sl, [sp]
 80116d8:	464b      	mov	r3, r9
 80116da:	aa03      	add	r2, sp, #12
 80116dc:	4621      	mov	r1, r4
 80116de:	4640      	mov	r0, r8
 80116e0:	f7ff fee6 	bl	80114b0 <_printf_common>
 80116e4:	3001      	adds	r0, #1
 80116e6:	d14a      	bne.n	801177e <_printf_i+0x1f2>
 80116e8:	f04f 30ff 	mov.w	r0, #4294967295
 80116ec:	b004      	add	sp, #16
 80116ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116f2:	6823      	ldr	r3, [r4, #0]
 80116f4:	f043 0320 	orr.w	r3, r3, #32
 80116f8:	6023      	str	r3, [r4, #0]
 80116fa:	4833      	ldr	r0, [pc, #204]	@ (80117c8 <_printf_i+0x23c>)
 80116fc:	2778      	movs	r7, #120	@ 0x78
 80116fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011702:	6823      	ldr	r3, [r4, #0]
 8011704:	6831      	ldr	r1, [r6, #0]
 8011706:	061f      	lsls	r7, r3, #24
 8011708:	f851 5b04 	ldr.w	r5, [r1], #4
 801170c:	d402      	bmi.n	8011714 <_printf_i+0x188>
 801170e:	065f      	lsls	r7, r3, #25
 8011710:	bf48      	it	mi
 8011712:	b2ad      	uxthmi	r5, r5
 8011714:	6031      	str	r1, [r6, #0]
 8011716:	07d9      	lsls	r1, r3, #31
 8011718:	bf44      	itt	mi
 801171a:	f043 0320 	orrmi.w	r3, r3, #32
 801171e:	6023      	strmi	r3, [r4, #0]
 8011720:	b11d      	cbz	r5, 801172a <_printf_i+0x19e>
 8011722:	2310      	movs	r3, #16
 8011724:	e7ac      	b.n	8011680 <_printf_i+0xf4>
 8011726:	4827      	ldr	r0, [pc, #156]	@ (80117c4 <_printf_i+0x238>)
 8011728:	e7e9      	b.n	80116fe <_printf_i+0x172>
 801172a:	6823      	ldr	r3, [r4, #0]
 801172c:	f023 0320 	bic.w	r3, r3, #32
 8011730:	6023      	str	r3, [r4, #0]
 8011732:	e7f6      	b.n	8011722 <_printf_i+0x196>
 8011734:	4616      	mov	r6, r2
 8011736:	e7bd      	b.n	80116b4 <_printf_i+0x128>
 8011738:	6833      	ldr	r3, [r6, #0]
 801173a:	6825      	ldr	r5, [r4, #0]
 801173c:	6961      	ldr	r1, [r4, #20]
 801173e:	1d18      	adds	r0, r3, #4
 8011740:	6030      	str	r0, [r6, #0]
 8011742:	062e      	lsls	r6, r5, #24
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	d501      	bpl.n	801174c <_printf_i+0x1c0>
 8011748:	6019      	str	r1, [r3, #0]
 801174a:	e002      	b.n	8011752 <_printf_i+0x1c6>
 801174c:	0668      	lsls	r0, r5, #25
 801174e:	d5fb      	bpl.n	8011748 <_printf_i+0x1bc>
 8011750:	8019      	strh	r1, [r3, #0]
 8011752:	2300      	movs	r3, #0
 8011754:	6123      	str	r3, [r4, #16]
 8011756:	4616      	mov	r6, r2
 8011758:	e7bc      	b.n	80116d4 <_printf_i+0x148>
 801175a:	6833      	ldr	r3, [r6, #0]
 801175c:	1d1a      	adds	r2, r3, #4
 801175e:	6032      	str	r2, [r6, #0]
 8011760:	681e      	ldr	r6, [r3, #0]
 8011762:	6862      	ldr	r2, [r4, #4]
 8011764:	2100      	movs	r1, #0
 8011766:	4630      	mov	r0, r6
 8011768:	f7ee fd0a 	bl	8000180 <memchr>
 801176c:	b108      	cbz	r0, 8011772 <_printf_i+0x1e6>
 801176e:	1b80      	subs	r0, r0, r6
 8011770:	6060      	str	r0, [r4, #4]
 8011772:	6863      	ldr	r3, [r4, #4]
 8011774:	6123      	str	r3, [r4, #16]
 8011776:	2300      	movs	r3, #0
 8011778:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801177c:	e7aa      	b.n	80116d4 <_printf_i+0x148>
 801177e:	6923      	ldr	r3, [r4, #16]
 8011780:	4632      	mov	r2, r6
 8011782:	4649      	mov	r1, r9
 8011784:	4640      	mov	r0, r8
 8011786:	47d0      	blx	sl
 8011788:	3001      	adds	r0, #1
 801178a:	d0ad      	beq.n	80116e8 <_printf_i+0x15c>
 801178c:	6823      	ldr	r3, [r4, #0]
 801178e:	079b      	lsls	r3, r3, #30
 8011790:	d413      	bmi.n	80117ba <_printf_i+0x22e>
 8011792:	68e0      	ldr	r0, [r4, #12]
 8011794:	9b03      	ldr	r3, [sp, #12]
 8011796:	4298      	cmp	r0, r3
 8011798:	bfb8      	it	lt
 801179a:	4618      	movlt	r0, r3
 801179c:	e7a6      	b.n	80116ec <_printf_i+0x160>
 801179e:	2301      	movs	r3, #1
 80117a0:	4632      	mov	r2, r6
 80117a2:	4649      	mov	r1, r9
 80117a4:	4640      	mov	r0, r8
 80117a6:	47d0      	blx	sl
 80117a8:	3001      	adds	r0, #1
 80117aa:	d09d      	beq.n	80116e8 <_printf_i+0x15c>
 80117ac:	3501      	adds	r5, #1
 80117ae:	68e3      	ldr	r3, [r4, #12]
 80117b0:	9903      	ldr	r1, [sp, #12]
 80117b2:	1a5b      	subs	r3, r3, r1
 80117b4:	42ab      	cmp	r3, r5
 80117b6:	dcf2      	bgt.n	801179e <_printf_i+0x212>
 80117b8:	e7eb      	b.n	8011792 <_printf_i+0x206>
 80117ba:	2500      	movs	r5, #0
 80117bc:	f104 0619 	add.w	r6, r4, #25
 80117c0:	e7f5      	b.n	80117ae <_printf_i+0x222>
 80117c2:	bf00      	nop
 80117c4:	08011e01 	.word	0x08011e01
 80117c8:	08011e12 	.word	0x08011e12

080117cc <__sflush_r>:
 80117cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80117d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117d4:	0716      	lsls	r6, r2, #28
 80117d6:	4605      	mov	r5, r0
 80117d8:	460c      	mov	r4, r1
 80117da:	d454      	bmi.n	8011886 <__sflush_r+0xba>
 80117dc:	684b      	ldr	r3, [r1, #4]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	dc02      	bgt.n	80117e8 <__sflush_r+0x1c>
 80117e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	dd48      	ble.n	801187a <__sflush_r+0xae>
 80117e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80117ea:	2e00      	cmp	r6, #0
 80117ec:	d045      	beq.n	801187a <__sflush_r+0xae>
 80117ee:	2300      	movs	r3, #0
 80117f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80117f4:	682f      	ldr	r7, [r5, #0]
 80117f6:	6a21      	ldr	r1, [r4, #32]
 80117f8:	602b      	str	r3, [r5, #0]
 80117fa:	d030      	beq.n	801185e <__sflush_r+0x92>
 80117fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80117fe:	89a3      	ldrh	r3, [r4, #12]
 8011800:	0759      	lsls	r1, r3, #29
 8011802:	d505      	bpl.n	8011810 <__sflush_r+0x44>
 8011804:	6863      	ldr	r3, [r4, #4]
 8011806:	1ad2      	subs	r2, r2, r3
 8011808:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801180a:	b10b      	cbz	r3, 8011810 <__sflush_r+0x44>
 801180c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801180e:	1ad2      	subs	r2, r2, r3
 8011810:	2300      	movs	r3, #0
 8011812:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011814:	6a21      	ldr	r1, [r4, #32]
 8011816:	4628      	mov	r0, r5
 8011818:	47b0      	blx	r6
 801181a:	1c43      	adds	r3, r0, #1
 801181c:	89a3      	ldrh	r3, [r4, #12]
 801181e:	d106      	bne.n	801182e <__sflush_r+0x62>
 8011820:	6829      	ldr	r1, [r5, #0]
 8011822:	291d      	cmp	r1, #29
 8011824:	d82b      	bhi.n	801187e <__sflush_r+0xb2>
 8011826:	4a2a      	ldr	r2, [pc, #168]	@ (80118d0 <__sflush_r+0x104>)
 8011828:	410a      	asrs	r2, r1
 801182a:	07d6      	lsls	r6, r2, #31
 801182c:	d427      	bmi.n	801187e <__sflush_r+0xb2>
 801182e:	2200      	movs	r2, #0
 8011830:	6062      	str	r2, [r4, #4]
 8011832:	04d9      	lsls	r1, r3, #19
 8011834:	6922      	ldr	r2, [r4, #16]
 8011836:	6022      	str	r2, [r4, #0]
 8011838:	d504      	bpl.n	8011844 <__sflush_r+0x78>
 801183a:	1c42      	adds	r2, r0, #1
 801183c:	d101      	bne.n	8011842 <__sflush_r+0x76>
 801183e:	682b      	ldr	r3, [r5, #0]
 8011840:	b903      	cbnz	r3, 8011844 <__sflush_r+0x78>
 8011842:	6560      	str	r0, [r4, #84]	@ 0x54
 8011844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011846:	602f      	str	r7, [r5, #0]
 8011848:	b1b9      	cbz	r1, 801187a <__sflush_r+0xae>
 801184a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801184e:	4299      	cmp	r1, r3
 8011850:	d002      	beq.n	8011858 <__sflush_r+0x8c>
 8011852:	4628      	mov	r0, r5
 8011854:	f7ff fbf2 	bl	801103c <_free_r>
 8011858:	2300      	movs	r3, #0
 801185a:	6363      	str	r3, [r4, #52]	@ 0x34
 801185c:	e00d      	b.n	801187a <__sflush_r+0xae>
 801185e:	2301      	movs	r3, #1
 8011860:	4628      	mov	r0, r5
 8011862:	47b0      	blx	r6
 8011864:	4602      	mov	r2, r0
 8011866:	1c50      	adds	r0, r2, #1
 8011868:	d1c9      	bne.n	80117fe <__sflush_r+0x32>
 801186a:	682b      	ldr	r3, [r5, #0]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d0c6      	beq.n	80117fe <__sflush_r+0x32>
 8011870:	2b1d      	cmp	r3, #29
 8011872:	d001      	beq.n	8011878 <__sflush_r+0xac>
 8011874:	2b16      	cmp	r3, #22
 8011876:	d11e      	bne.n	80118b6 <__sflush_r+0xea>
 8011878:	602f      	str	r7, [r5, #0]
 801187a:	2000      	movs	r0, #0
 801187c:	e022      	b.n	80118c4 <__sflush_r+0xf8>
 801187e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011882:	b21b      	sxth	r3, r3
 8011884:	e01b      	b.n	80118be <__sflush_r+0xf2>
 8011886:	690f      	ldr	r7, [r1, #16]
 8011888:	2f00      	cmp	r7, #0
 801188a:	d0f6      	beq.n	801187a <__sflush_r+0xae>
 801188c:	0793      	lsls	r3, r2, #30
 801188e:	680e      	ldr	r6, [r1, #0]
 8011890:	bf08      	it	eq
 8011892:	694b      	ldreq	r3, [r1, #20]
 8011894:	600f      	str	r7, [r1, #0]
 8011896:	bf18      	it	ne
 8011898:	2300      	movne	r3, #0
 801189a:	eba6 0807 	sub.w	r8, r6, r7
 801189e:	608b      	str	r3, [r1, #8]
 80118a0:	f1b8 0f00 	cmp.w	r8, #0
 80118a4:	dde9      	ble.n	801187a <__sflush_r+0xae>
 80118a6:	6a21      	ldr	r1, [r4, #32]
 80118a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80118aa:	4643      	mov	r3, r8
 80118ac:	463a      	mov	r2, r7
 80118ae:	4628      	mov	r0, r5
 80118b0:	47b0      	blx	r6
 80118b2:	2800      	cmp	r0, #0
 80118b4:	dc08      	bgt.n	80118c8 <__sflush_r+0xfc>
 80118b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118be:	81a3      	strh	r3, [r4, #12]
 80118c0:	f04f 30ff 	mov.w	r0, #4294967295
 80118c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118c8:	4407      	add	r7, r0
 80118ca:	eba8 0800 	sub.w	r8, r8, r0
 80118ce:	e7e7      	b.n	80118a0 <__sflush_r+0xd4>
 80118d0:	dfbffffe 	.word	0xdfbffffe

080118d4 <_fflush_r>:
 80118d4:	b538      	push	{r3, r4, r5, lr}
 80118d6:	690b      	ldr	r3, [r1, #16]
 80118d8:	4605      	mov	r5, r0
 80118da:	460c      	mov	r4, r1
 80118dc:	b913      	cbnz	r3, 80118e4 <_fflush_r+0x10>
 80118de:	2500      	movs	r5, #0
 80118e0:	4628      	mov	r0, r5
 80118e2:	bd38      	pop	{r3, r4, r5, pc}
 80118e4:	b118      	cbz	r0, 80118ee <_fflush_r+0x1a>
 80118e6:	6a03      	ldr	r3, [r0, #32]
 80118e8:	b90b      	cbnz	r3, 80118ee <_fflush_r+0x1a>
 80118ea:	f7ff fa33 	bl	8010d54 <__sinit>
 80118ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d0f3      	beq.n	80118de <_fflush_r+0xa>
 80118f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80118f8:	07d0      	lsls	r0, r2, #31
 80118fa:	d404      	bmi.n	8011906 <_fflush_r+0x32>
 80118fc:	0599      	lsls	r1, r3, #22
 80118fe:	d402      	bmi.n	8011906 <_fflush_r+0x32>
 8011900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011902:	f7ff fb8a 	bl	801101a <__retarget_lock_acquire_recursive>
 8011906:	4628      	mov	r0, r5
 8011908:	4621      	mov	r1, r4
 801190a:	f7ff ff5f 	bl	80117cc <__sflush_r>
 801190e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011910:	07da      	lsls	r2, r3, #31
 8011912:	4605      	mov	r5, r0
 8011914:	d4e4      	bmi.n	80118e0 <_fflush_r+0xc>
 8011916:	89a3      	ldrh	r3, [r4, #12]
 8011918:	059b      	lsls	r3, r3, #22
 801191a:	d4e1      	bmi.n	80118e0 <_fflush_r+0xc>
 801191c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801191e:	f7ff fb7d 	bl	801101c <__retarget_lock_release_recursive>
 8011922:	e7dd      	b.n	80118e0 <_fflush_r+0xc>

08011924 <_putc_r>:
 8011924:	b570      	push	{r4, r5, r6, lr}
 8011926:	460d      	mov	r5, r1
 8011928:	4614      	mov	r4, r2
 801192a:	4606      	mov	r6, r0
 801192c:	b118      	cbz	r0, 8011936 <_putc_r+0x12>
 801192e:	6a03      	ldr	r3, [r0, #32]
 8011930:	b90b      	cbnz	r3, 8011936 <_putc_r+0x12>
 8011932:	f7ff fa0f 	bl	8010d54 <__sinit>
 8011936:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011938:	07d8      	lsls	r0, r3, #31
 801193a:	d405      	bmi.n	8011948 <_putc_r+0x24>
 801193c:	89a3      	ldrh	r3, [r4, #12]
 801193e:	0599      	lsls	r1, r3, #22
 8011940:	d402      	bmi.n	8011948 <_putc_r+0x24>
 8011942:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011944:	f7ff fb69 	bl	801101a <__retarget_lock_acquire_recursive>
 8011948:	68a3      	ldr	r3, [r4, #8]
 801194a:	3b01      	subs	r3, #1
 801194c:	2b00      	cmp	r3, #0
 801194e:	60a3      	str	r3, [r4, #8]
 8011950:	da05      	bge.n	801195e <_putc_r+0x3a>
 8011952:	69a2      	ldr	r2, [r4, #24]
 8011954:	4293      	cmp	r3, r2
 8011956:	db12      	blt.n	801197e <_putc_r+0x5a>
 8011958:	b2eb      	uxtb	r3, r5
 801195a:	2b0a      	cmp	r3, #10
 801195c:	d00f      	beq.n	801197e <_putc_r+0x5a>
 801195e:	6823      	ldr	r3, [r4, #0]
 8011960:	1c5a      	adds	r2, r3, #1
 8011962:	6022      	str	r2, [r4, #0]
 8011964:	701d      	strb	r5, [r3, #0]
 8011966:	b2ed      	uxtb	r5, r5
 8011968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801196a:	07da      	lsls	r2, r3, #31
 801196c:	d405      	bmi.n	801197a <_putc_r+0x56>
 801196e:	89a3      	ldrh	r3, [r4, #12]
 8011970:	059b      	lsls	r3, r3, #22
 8011972:	d402      	bmi.n	801197a <_putc_r+0x56>
 8011974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011976:	f7ff fb51 	bl	801101c <__retarget_lock_release_recursive>
 801197a:	4628      	mov	r0, r5
 801197c:	bd70      	pop	{r4, r5, r6, pc}
 801197e:	4629      	mov	r1, r5
 8011980:	4622      	mov	r2, r4
 8011982:	4630      	mov	r0, r6
 8011984:	f000 f802 	bl	801198c <__swbuf_r>
 8011988:	4605      	mov	r5, r0
 801198a:	e7ed      	b.n	8011968 <_putc_r+0x44>

0801198c <__swbuf_r>:
 801198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801198e:	460e      	mov	r6, r1
 8011990:	4614      	mov	r4, r2
 8011992:	4605      	mov	r5, r0
 8011994:	b118      	cbz	r0, 801199e <__swbuf_r+0x12>
 8011996:	6a03      	ldr	r3, [r0, #32]
 8011998:	b90b      	cbnz	r3, 801199e <__swbuf_r+0x12>
 801199a:	f7ff f9db 	bl	8010d54 <__sinit>
 801199e:	69a3      	ldr	r3, [r4, #24]
 80119a0:	60a3      	str	r3, [r4, #8]
 80119a2:	89a3      	ldrh	r3, [r4, #12]
 80119a4:	071a      	lsls	r2, r3, #28
 80119a6:	d501      	bpl.n	80119ac <__swbuf_r+0x20>
 80119a8:	6923      	ldr	r3, [r4, #16]
 80119aa:	b943      	cbnz	r3, 80119be <__swbuf_r+0x32>
 80119ac:	4621      	mov	r1, r4
 80119ae:	4628      	mov	r0, r5
 80119b0:	f000 f82a 	bl	8011a08 <__swsetup_r>
 80119b4:	b118      	cbz	r0, 80119be <__swbuf_r+0x32>
 80119b6:	f04f 37ff 	mov.w	r7, #4294967295
 80119ba:	4638      	mov	r0, r7
 80119bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119be:	6823      	ldr	r3, [r4, #0]
 80119c0:	6922      	ldr	r2, [r4, #16]
 80119c2:	1a98      	subs	r0, r3, r2
 80119c4:	6963      	ldr	r3, [r4, #20]
 80119c6:	b2f6      	uxtb	r6, r6
 80119c8:	4283      	cmp	r3, r0
 80119ca:	4637      	mov	r7, r6
 80119cc:	dc05      	bgt.n	80119da <__swbuf_r+0x4e>
 80119ce:	4621      	mov	r1, r4
 80119d0:	4628      	mov	r0, r5
 80119d2:	f7ff ff7f 	bl	80118d4 <_fflush_r>
 80119d6:	2800      	cmp	r0, #0
 80119d8:	d1ed      	bne.n	80119b6 <__swbuf_r+0x2a>
 80119da:	68a3      	ldr	r3, [r4, #8]
 80119dc:	3b01      	subs	r3, #1
 80119de:	60a3      	str	r3, [r4, #8]
 80119e0:	6823      	ldr	r3, [r4, #0]
 80119e2:	1c5a      	adds	r2, r3, #1
 80119e4:	6022      	str	r2, [r4, #0]
 80119e6:	701e      	strb	r6, [r3, #0]
 80119e8:	6962      	ldr	r2, [r4, #20]
 80119ea:	1c43      	adds	r3, r0, #1
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d004      	beq.n	80119fa <__swbuf_r+0x6e>
 80119f0:	89a3      	ldrh	r3, [r4, #12]
 80119f2:	07db      	lsls	r3, r3, #31
 80119f4:	d5e1      	bpl.n	80119ba <__swbuf_r+0x2e>
 80119f6:	2e0a      	cmp	r6, #10
 80119f8:	d1df      	bne.n	80119ba <__swbuf_r+0x2e>
 80119fa:	4621      	mov	r1, r4
 80119fc:	4628      	mov	r0, r5
 80119fe:	f7ff ff69 	bl	80118d4 <_fflush_r>
 8011a02:	2800      	cmp	r0, #0
 8011a04:	d0d9      	beq.n	80119ba <__swbuf_r+0x2e>
 8011a06:	e7d6      	b.n	80119b6 <__swbuf_r+0x2a>

08011a08 <__swsetup_r>:
 8011a08:	b538      	push	{r3, r4, r5, lr}
 8011a0a:	4b29      	ldr	r3, [pc, #164]	@ (8011ab0 <__swsetup_r+0xa8>)
 8011a0c:	4605      	mov	r5, r0
 8011a0e:	6818      	ldr	r0, [r3, #0]
 8011a10:	460c      	mov	r4, r1
 8011a12:	b118      	cbz	r0, 8011a1c <__swsetup_r+0x14>
 8011a14:	6a03      	ldr	r3, [r0, #32]
 8011a16:	b90b      	cbnz	r3, 8011a1c <__swsetup_r+0x14>
 8011a18:	f7ff f99c 	bl	8010d54 <__sinit>
 8011a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a20:	0719      	lsls	r1, r3, #28
 8011a22:	d422      	bmi.n	8011a6a <__swsetup_r+0x62>
 8011a24:	06da      	lsls	r2, r3, #27
 8011a26:	d407      	bmi.n	8011a38 <__swsetup_r+0x30>
 8011a28:	2209      	movs	r2, #9
 8011a2a:	602a      	str	r2, [r5, #0]
 8011a2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a30:	81a3      	strh	r3, [r4, #12]
 8011a32:	f04f 30ff 	mov.w	r0, #4294967295
 8011a36:	e033      	b.n	8011aa0 <__swsetup_r+0x98>
 8011a38:	0758      	lsls	r0, r3, #29
 8011a3a:	d512      	bpl.n	8011a62 <__swsetup_r+0x5a>
 8011a3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011a3e:	b141      	cbz	r1, 8011a52 <__swsetup_r+0x4a>
 8011a40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a44:	4299      	cmp	r1, r3
 8011a46:	d002      	beq.n	8011a4e <__swsetup_r+0x46>
 8011a48:	4628      	mov	r0, r5
 8011a4a:	f7ff faf7 	bl	801103c <_free_r>
 8011a4e:	2300      	movs	r3, #0
 8011a50:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a52:	89a3      	ldrh	r3, [r4, #12]
 8011a54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011a58:	81a3      	strh	r3, [r4, #12]
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	6063      	str	r3, [r4, #4]
 8011a5e:	6923      	ldr	r3, [r4, #16]
 8011a60:	6023      	str	r3, [r4, #0]
 8011a62:	89a3      	ldrh	r3, [r4, #12]
 8011a64:	f043 0308 	orr.w	r3, r3, #8
 8011a68:	81a3      	strh	r3, [r4, #12]
 8011a6a:	6923      	ldr	r3, [r4, #16]
 8011a6c:	b94b      	cbnz	r3, 8011a82 <__swsetup_r+0x7a>
 8011a6e:	89a3      	ldrh	r3, [r4, #12]
 8011a70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a78:	d003      	beq.n	8011a82 <__swsetup_r+0x7a>
 8011a7a:	4621      	mov	r1, r4
 8011a7c:	4628      	mov	r0, r5
 8011a7e:	f000 f84f 	bl	8011b20 <__smakebuf_r>
 8011a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a86:	f013 0201 	ands.w	r2, r3, #1
 8011a8a:	d00a      	beq.n	8011aa2 <__swsetup_r+0x9a>
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	60a2      	str	r2, [r4, #8]
 8011a90:	6962      	ldr	r2, [r4, #20]
 8011a92:	4252      	negs	r2, r2
 8011a94:	61a2      	str	r2, [r4, #24]
 8011a96:	6922      	ldr	r2, [r4, #16]
 8011a98:	b942      	cbnz	r2, 8011aac <__swsetup_r+0xa4>
 8011a9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011a9e:	d1c5      	bne.n	8011a2c <__swsetup_r+0x24>
 8011aa0:	bd38      	pop	{r3, r4, r5, pc}
 8011aa2:	0799      	lsls	r1, r3, #30
 8011aa4:	bf58      	it	pl
 8011aa6:	6962      	ldrpl	r2, [r4, #20]
 8011aa8:	60a2      	str	r2, [r4, #8]
 8011aaa:	e7f4      	b.n	8011a96 <__swsetup_r+0x8e>
 8011aac:	2000      	movs	r0, #0
 8011aae:	e7f7      	b.n	8011aa0 <__swsetup_r+0x98>
 8011ab0:	20000118 	.word	0x20000118

08011ab4 <_sbrk_r>:
 8011ab4:	b538      	push	{r3, r4, r5, lr}
 8011ab6:	4d06      	ldr	r5, [pc, #24]	@ (8011ad0 <_sbrk_r+0x1c>)
 8011ab8:	2300      	movs	r3, #0
 8011aba:	4604      	mov	r4, r0
 8011abc:	4608      	mov	r0, r1
 8011abe:	602b      	str	r3, [r5, #0]
 8011ac0:	f7ef fb1e 	bl	8001100 <_sbrk>
 8011ac4:	1c43      	adds	r3, r0, #1
 8011ac6:	d102      	bne.n	8011ace <_sbrk_r+0x1a>
 8011ac8:	682b      	ldr	r3, [r5, #0]
 8011aca:	b103      	cbz	r3, 8011ace <_sbrk_r+0x1a>
 8011acc:	6023      	str	r3, [r4, #0]
 8011ace:	bd38      	pop	{r3, r4, r5, pc}
 8011ad0:	2000ace0 	.word	0x2000ace0

08011ad4 <__swhatbuf_r>:
 8011ad4:	b570      	push	{r4, r5, r6, lr}
 8011ad6:	460c      	mov	r4, r1
 8011ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011adc:	2900      	cmp	r1, #0
 8011ade:	b096      	sub	sp, #88	@ 0x58
 8011ae0:	4615      	mov	r5, r2
 8011ae2:	461e      	mov	r6, r3
 8011ae4:	da0d      	bge.n	8011b02 <__swhatbuf_r+0x2e>
 8011ae6:	89a3      	ldrh	r3, [r4, #12]
 8011ae8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011aec:	f04f 0100 	mov.w	r1, #0
 8011af0:	bf14      	ite	ne
 8011af2:	2340      	movne	r3, #64	@ 0x40
 8011af4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011af8:	2000      	movs	r0, #0
 8011afa:	6031      	str	r1, [r6, #0]
 8011afc:	602b      	str	r3, [r5, #0]
 8011afe:	b016      	add	sp, #88	@ 0x58
 8011b00:	bd70      	pop	{r4, r5, r6, pc}
 8011b02:	466a      	mov	r2, sp
 8011b04:	f000 f848 	bl	8011b98 <_fstat_r>
 8011b08:	2800      	cmp	r0, #0
 8011b0a:	dbec      	blt.n	8011ae6 <__swhatbuf_r+0x12>
 8011b0c:	9901      	ldr	r1, [sp, #4]
 8011b0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011b12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011b16:	4259      	negs	r1, r3
 8011b18:	4159      	adcs	r1, r3
 8011b1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b1e:	e7eb      	b.n	8011af8 <__swhatbuf_r+0x24>

08011b20 <__smakebuf_r>:
 8011b20:	898b      	ldrh	r3, [r1, #12]
 8011b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b24:	079d      	lsls	r5, r3, #30
 8011b26:	4606      	mov	r6, r0
 8011b28:	460c      	mov	r4, r1
 8011b2a:	d507      	bpl.n	8011b3c <__smakebuf_r+0x1c>
 8011b2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011b30:	6023      	str	r3, [r4, #0]
 8011b32:	6123      	str	r3, [r4, #16]
 8011b34:	2301      	movs	r3, #1
 8011b36:	6163      	str	r3, [r4, #20]
 8011b38:	b003      	add	sp, #12
 8011b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b3c:	ab01      	add	r3, sp, #4
 8011b3e:	466a      	mov	r2, sp
 8011b40:	f7ff ffc8 	bl	8011ad4 <__swhatbuf_r>
 8011b44:	9f00      	ldr	r7, [sp, #0]
 8011b46:	4605      	mov	r5, r0
 8011b48:	4639      	mov	r1, r7
 8011b4a:	4630      	mov	r0, r6
 8011b4c:	f7ff fae2 	bl	8011114 <_malloc_r>
 8011b50:	b948      	cbnz	r0, 8011b66 <__smakebuf_r+0x46>
 8011b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b56:	059a      	lsls	r2, r3, #22
 8011b58:	d4ee      	bmi.n	8011b38 <__smakebuf_r+0x18>
 8011b5a:	f023 0303 	bic.w	r3, r3, #3
 8011b5e:	f043 0302 	orr.w	r3, r3, #2
 8011b62:	81a3      	strh	r3, [r4, #12]
 8011b64:	e7e2      	b.n	8011b2c <__smakebuf_r+0xc>
 8011b66:	89a3      	ldrh	r3, [r4, #12]
 8011b68:	6020      	str	r0, [r4, #0]
 8011b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b6e:	81a3      	strh	r3, [r4, #12]
 8011b70:	9b01      	ldr	r3, [sp, #4]
 8011b72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011b76:	b15b      	cbz	r3, 8011b90 <__smakebuf_r+0x70>
 8011b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b7c:	4630      	mov	r0, r6
 8011b7e:	f000 f81d 	bl	8011bbc <_isatty_r>
 8011b82:	b128      	cbz	r0, 8011b90 <__smakebuf_r+0x70>
 8011b84:	89a3      	ldrh	r3, [r4, #12]
 8011b86:	f023 0303 	bic.w	r3, r3, #3
 8011b8a:	f043 0301 	orr.w	r3, r3, #1
 8011b8e:	81a3      	strh	r3, [r4, #12]
 8011b90:	89a3      	ldrh	r3, [r4, #12]
 8011b92:	431d      	orrs	r5, r3
 8011b94:	81a5      	strh	r5, [r4, #12]
 8011b96:	e7cf      	b.n	8011b38 <__smakebuf_r+0x18>

08011b98 <_fstat_r>:
 8011b98:	b538      	push	{r3, r4, r5, lr}
 8011b9a:	4d07      	ldr	r5, [pc, #28]	@ (8011bb8 <_fstat_r+0x20>)
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	4604      	mov	r4, r0
 8011ba0:	4608      	mov	r0, r1
 8011ba2:	4611      	mov	r1, r2
 8011ba4:	602b      	str	r3, [r5, #0]
 8011ba6:	f7ef fa82 	bl	80010ae <_fstat>
 8011baa:	1c43      	adds	r3, r0, #1
 8011bac:	d102      	bne.n	8011bb4 <_fstat_r+0x1c>
 8011bae:	682b      	ldr	r3, [r5, #0]
 8011bb0:	b103      	cbz	r3, 8011bb4 <_fstat_r+0x1c>
 8011bb2:	6023      	str	r3, [r4, #0]
 8011bb4:	bd38      	pop	{r3, r4, r5, pc}
 8011bb6:	bf00      	nop
 8011bb8:	2000ace0 	.word	0x2000ace0

08011bbc <_isatty_r>:
 8011bbc:	b538      	push	{r3, r4, r5, lr}
 8011bbe:	4d06      	ldr	r5, [pc, #24]	@ (8011bd8 <_isatty_r+0x1c>)
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	4608      	mov	r0, r1
 8011bc6:	602b      	str	r3, [r5, #0]
 8011bc8:	f7ef fa81 	bl	80010ce <_isatty>
 8011bcc:	1c43      	adds	r3, r0, #1
 8011bce:	d102      	bne.n	8011bd6 <_isatty_r+0x1a>
 8011bd0:	682b      	ldr	r3, [r5, #0]
 8011bd2:	b103      	cbz	r3, 8011bd6 <_isatty_r+0x1a>
 8011bd4:	6023      	str	r3, [r4, #0]
 8011bd6:	bd38      	pop	{r3, r4, r5, pc}
 8011bd8:	2000ace0 	.word	0x2000ace0

08011bdc <_init>:
 8011bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bde:	bf00      	nop
 8011be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011be2:	bc08      	pop	{r3}
 8011be4:	469e      	mov	lr, r3
 8011be6:	4770      	bx	lr

08011be8 <_fini>:
 8011be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bea:	bf00      	nop
 8011bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bee:	bc08      	pop	{r3}
 8011bf0:	469e      	mov	lr, r3
 8011bf2:	4770      	bx	lr
