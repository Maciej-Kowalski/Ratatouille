
RTOS_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b00  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08011c40  08011c40  00012c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011e70  08011e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011e78  08011e78  00012e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011e7c  08011e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  20000008  08011e80  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000ab88  20000168  08011fe0  00013168  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000acf0  08011fe0  00013cf0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00013168  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003370d  00000000  00000000  00013198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006895  00000000  00000000  000468a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002e68  00000000  00000000  0004d140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000023b0  00000000  00000000  0004ffa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000091e7  00000000  00000000  00052358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00033153  00000000  00000000  0005b53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00103956  00000000  00000000  0008e692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00191fe8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ce04  00000000  00000000  0019202c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007b  00000000  00000000  0019ee30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000168 	.word	0x20000168
 800015c:	00000000 	.word	0x00000000
 8000160:	08011c28 	.word	0x08011c28

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000016c 	.word	0x2000016c
 800017c:	08011c28 	.word	0x08011c28

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000558:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800055a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4313      	orrs	r3, r2
 8000562:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4013      	ands	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000570:	68fb      	ldr	r3, [r7, #12]
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800057e:	b480      	push	{r7}
 8000580:	b085      	sub	sp, #20
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800058a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800058c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4313      	orrs	r3, r2
 8000594:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800059a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4013      	ands	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <USB_transmit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USB_transmit(uint8_t *USB_buffer, size_t length){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	osStatus_t status;

	osMutexAcquire(TransmitMutexHandle, osWaitForever);
 80005ba:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <USB_transmit+0x48>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f04f 31ff 	mov.w	r1, #4294967295
 80005c2:	4618      	mov	r0, r3
 80005c4:	f00c fa33 	bl	800ca2e <osMutexAcquire>
	status = CDC_Transmit_FS(USB_buffer, length);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	4619      	mov	r1, r3
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f00f fed8 	bl	8010384 <CDC_Transmit_FS>
 80005d4:	4603      	mov	r3, r0
 80005d6:	60fb      	str	r3, [r7, #12]
	osMutexRelease(TransmitMutexHandle);
 80005d8:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <USB_transmit+0x48>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f00c fa71 	bl	800cac4 <osMutexRelease>

	if (status != osOK){
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d003      	beq.n	80005f0 <USB_transmit+0x40>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005e8:	2102      	movs	r1, #2
 80005ea:	4804      	ldr	r0, [pc, #16]	@ (80005fc <USB_transmit+0x4c>)
 80005ec:	f002 fe2c 	bl	8003248 <HAL_GPIO_TogglePin>
		//sprintf(msg, "Error, status code: %d \r\n", status);
		//sprintf(msg, "Error");
		//HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);

	}
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000384 	.word	0x20000384
 80005fc:	48000400 	.word	0x48000400

08000600 <update_data_packet_audio_buffered>:
void update_data_packet_audio_buffered(uint16_t var1, uint8_t *buffer, size_t *length) {
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
 800060c:	81fb      	strh	r3, [r7, #14]
    // Define the start byte
	if (*length == 0){
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d107      	bne.n	8000626 <update_data_packet_audio_buffered+0x26>
		buffer[0] = (uint8_t)-128;
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	2280      	movs	r2, #128	@ 0x80
 800061a:	701a      	strb	r2, [r3, #0]
		(*length)++;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	601a      	str	r2, [r3, #0]
	}
    memcpy(&buffer[*length], &var1, sizeof(uint16_t));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	4413      	add	r3, r2
 800062e:	89fa      	ldrh	r2, [r7, #14]
 8000630:	801a      	strh	r2, [r3, #0]

    // Set the total length of the packet
    (*length) += sizeof(uint16_t);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	1c9a      	adds	r2, r3, #2
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	601a      	str	r2, [r3, #0]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 fe38 	bl	80012c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f84e 	bl	80006f0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000654:	f000 f8b0 	bl	80007b8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 fa30 	bl	8000abc <MX_GPIO_Init>
  MX_DMA_Init();
 800065c:	f000 fa1c 	bl	8000a98 <MX_DMA_Init>
  MX_ADC1_Init();
 8000660:	f000 f8dc 	bl	800081c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000664:	f000 f93e 	bl	80008e4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000668:	f000 f97c 	bl	8000964 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800066c:	f000 f9c8 	bl	8000a00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2120      	movs	r1, #32
 8000674:	4813      	ldr	r0, [pc, #76]	@ (80006c4 <main+0x7c>)
 8000676:	f002 fdcf 	bl	8003218 <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_reading, 1);
 800067a:	2201      	movs	r2, #1
 800067c:	4912      	ldr	r1, [pc, #72]	@ (80006c8 <main+0x80>)
 800067e:	4813      	ldr	r0, [pc, #76]	@ (80006cc <main+0x84>)
 8000680:	f001 f99e 	bl	80019c0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000684:	4812      	ldr	r0, [pc, #72]	@ (80006d0 <main+0x88>)
 8000686:	f006 fad1 	bl	8006c2c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800068a:	f00b ff9f 	bl	800c5cc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of TransmitMutex */
  TransmitMutexHandle = osMutexNew(&TransmitMutex_attributes);
 800068e:	4811      	ldr	r0, [pc, #68]	@ (80006d4 <main+0x8c>)
 8000690:	f00c f947 	bl	800c922 <osMutexNew>
 8000694:	4603      	mov	r3, r0
 8000696:	4a10      	ldr	r2, [pc, #64]	@ (80006d8 <main+0x90>)
 8000698:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of AudioQueue */
  AudioQueueHandle = osMessageQueueNew (2000, sizeof(uint16_t), &AudioQueue_attributes);
 800069a:	4a10      	ldr	r2, [pc, #64]	@ (80006dc <main+0x94>)
 800069c:	2102      	movs	r1, #2
 800069e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006a2:	f00c fa4c 	bl	800cb3e <osMessageQueueNew>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a0d      	ldr	r2, [pc, #52]	@ (80006e0 <main+0x98>)
 80006aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(task1_handler, NULL, &Task1_attributes);
 80006ac:	4a0d      	ldr	r2, [pc, #52]	@ (80006e4 <main+0x9c>)
 80006ae:	2100      	movs	r1, #0
 80006b0:	480d      	ldr	r0, [pc, #52]	@ (80006e8 <main+0xa0>)
 80006b2:	f00b ffd5 	bl	800c660 <osThreadNew>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a0c      	ldr	r2, [pc, #48]	@ (80006ec <main+0xa4>)
 80006ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006bc:	f00b ffaa 	bl	800c614 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <main+0x78>
 80006c4:	48000400 	.word	0x48000400
 80006c8:	20000388 	.word	0x20000388
 80006cc:	20000184 	.word	0x20000184
 80006d0:	2000029c 	.word	0x2000029c
 80006d4:	08011d64 	.word	0x08011d64
 80006d8:	20000384 	.word	0x20000384
 80006dc:	08011d4c 	.word	0x08011d4c
 80006e0:	20000380 	.word	0x20000380
 80006e4:	08011d28 	.word	0x08011d28
 80006e8:	08000b15 	.word	0x08000b15
 80006ec:	2000037c 	.word	0x2000037c

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b09a      	sub	sp, #104	@ 0x68
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2248      	movs	r2, #72	@ 0x48
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f010 fbdb 	bl	8010eba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000716:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <SystemClock_Config+0xc4>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800071e:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <SystemClock_Config+0xc4>)
 8000720:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000724:	6013      	str	r3, [r2, #0]
 8000726:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <SystemClock_Config+0xc4>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000732:	2303      	movs	r3, #3
 8000734:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000736:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800073a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000742:	2340      	movs	r3, #64	@ 0x40
 8000744:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	2303      	movs	r3, #3
 800074c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800074e:	2310      	movs	r3, #16
 8000750:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000752:	2308      	movs	r3, #8
 8000754:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000756:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800075a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800075c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000760:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000762:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000766:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	4618      	mov	r0, r3
 800076e:	f004 ff9b 	bl	80056a8 <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000778:	f000 fa58 	bl	8000c2c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800077c:	236f      	movs	r3, #111	@ 0x6f
 800077e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2303      	movs	r3, #3
 8000782:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000790:	2380      	movs	r3, #128	@ 0x80
 8000792:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2103      	movs	r1, #3
 800079c:	4618      	mov	r0, r3
 800079e:	f005 faf7 	bl	8005d90 <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80007a8:	f000 fa40 	bl	8000c2c <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3768      	adds	r7, #104	@ 0x68
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	58000400 	.word	0x58000400

080007b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	@ 0x50
 80007bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2250      	movs	r2, #80	@ 0x50
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f010 fb78 	bl	8010eba <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 80007ca:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 80007ce:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80007d0:	2306      	movs	r3, #6
 80007d2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80007d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80007d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80007da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007de:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80007e0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007e4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 80007e6:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 80007ea:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80007ec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80007f0:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80007f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80007f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80007f8:	2300      	movs	r3, #0
 80007fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000800:	463b      	mov	r3, r7
 8000802:	4618      	mov	r0, r3
 8000804:	f005 ff33 	bl	800666e <HAL_RCCEx_PeriphCLKConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800080e:	f000 fa0d 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000812:	bf00      	nop
 8000814:	3750      	adds	r7, #80	@ 0x50
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000822:	463b      	mov	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
 8000830:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000832:	4b29      	ldr	r3, [pc, #164]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000834:	4a29      	ldr	r2, [pc, #164]	@ (80008dc <MX_ADC1_Init+0xc0>)
 8000836:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000838:	4b27      	ldr	r3, [pc, #156]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800083e:	4b26      	ldr	r3, [pc, #152]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000844:	4b24      	ldr	r3, [pc, #144]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800084a:	4b23      	ldr	r3, [pc, #140]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000850:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000852:	2204      	movs	r2, #4
 8000854:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000856:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000858:	2200      	movs	r2, #0
 800085a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800085c:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 800085e:	2201      	movs	r2, #1
 8000860:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000862:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000864:	2201      	movs	r2, #1
 8000866:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000868:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 800086a:	2200      	movs	r2, #0
 800086c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000872:	2200      	movs	r2, #0
 8000874:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000878:	2200      	movs	r2, #0
 800087a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800087c:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 800087e:	2201      	movs	r2, #1
 8000880:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000886:	2200      	movs	r2, #0
 8000888:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800088a:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000892:	4811      	ldr	r0, [pc, #68]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000894:	f000 ff48 	bl	8001728 <HAL_ADC_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800089e:	f000 f9c5 	bl	8000c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_ADC1_Init+0xc4>)
 80008a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a6:	2306      	movs	r3, #6
 80008a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80008aa:	2306      	movs	r3, #6
 80008ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ae:	237f      	movs	r3, #127	@ 0x7f
 80008b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008b2:	2304      	movs	r3, #4
 80008b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ba:	463b      	mov	r3, r7
 80008bc:	4619      	mov	r1, r3
 80008be:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 80008c0:	f001 fae0 	bl	8001e84 <HAL_ADC_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008ca:	f000 f9af 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000184 	.word	0x20000184
 80008dc:	50040000 	.word	0x50040000
 80008e0:	04300002 	.word	0x04300002

080008e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <MX_I2C1_Init+0x74>)
 80008ea:	4a1c      	ldr	r2, [pc, #112]	@ (800095c <MX_I2C1_Init+0x78>)
 80008ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_I2C1_Init+0x74>)
 80008f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000960 <MX_I2C1_Init+0x7c>)
 80008f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <MX_I2C1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fa:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_I2C1_Init+0x74>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <MX_I2C1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_I2C1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800091e:	480e      	ldr	r0, [pc, #56]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000920:	f002 fcac 	bl	800327c <HAL_I2C_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800092a:	f000 f97f 	bl	8000c2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800092e:	2100      	movs	r1, #0
 8000930:	4809      	ldr	r0, [pc, #36]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000932:	f002 fd3e 	bl	80033b2 <HAL_I2CEx_ConfigAnalogFilter>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800093c:	f000 f976 	bl	8000c2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000940:	2100      	movs	r1, #0
 8000942:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000944:	f002 fd80 	bl	8003448 <HAL_I2CEx_ConfigDigitalFilter>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800094e:	f000 f96d 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000248 	.word	0x20000248
 800095c:	40005400 	.word	0x40005400
 8000960:	10b17db5 	.word	0x10b17db5

08000964 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000982:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <MX_TIM2_Init+0x98>)
 8000984:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000988:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800098a:	4b1c      	ldr	r3, [pc, #112]	@ (80009fc <MX_TIM2_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <MX_TIM2_Init+0x98>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000-1;
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <MX_TIM2_Init+0x98>)
 8000998:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800099c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099e:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <MX_TIM2_Init+0x98>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009a4:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <MX_TIM2_Init+0x98>)
 80009a6:	2280      	movs	r2, #128	@ 0x80
 80009a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009aa:	4814      	ldr	r0, [pc, #80]	@ (80009fc <MX_TIM2_Init+0x98>)
 80009ac:	f006 f8e6 	bl	8006b7c <HAL_TIM_Base_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009b6:	f000 f939 	bl	8000c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4619      	mov	r1, r3
 80009c6:	480d      	ldr	r0, [pc, #52]	@ (80009fc <MX_TIM2_Init+0x98>)
 80009c8:	f006 fa85 	bl	8006ed6 <HAL_TIM_ConfigClockSource>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009d2:	f000 f92b 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009d6:	2320      	movs	r3, #32
 80009d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	@ (80009fc <MX_TIM2_Init+0x98>)
 80009e4:	f006 fc74 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009ee:	f000 f91d 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	3720      	adds	r7, #32
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000029c 	.word	0x2000029c

08000a00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a04:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <MX_USART1_UART_Init+0x90>)
 8000a06:	4a23      	ldr	r2, [pc, #140]	@ (8000a94 <MX_USART1_UART_Init+0x94>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	@ (8000a90 <MX_USART1_UART_Init+0x90>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <MX_USART1_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <MX_USART1_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <MX_USART1_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <MX_USART1_UART_Init+0x90>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <MX_USART1_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b17      	ldr	r3, [pc, #92]	@ (8000a90 <MX_USART1_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <MX_USART1_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <MX_USART1_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a42:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <MX_USART1_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a48:	4811      	ldr	r0, [pc, #68]	@ (8000a90 <MX_USART1_UART_Init+0x90>)
 8000a4a:	f006 fcdf 	bl	800740c <HAL_UART_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a54:	f000 f8ea 	bl	8000c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	480d      	ldr	r0, [pc, #52]	@ (8000a90 <MX_USART1_UART_Init+0x90>)
 8000a5c:	f007 f9a6 	bl	8007dac <HAL_UARTEx_SetTxFifoThreshold>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a66:	f000 f8e1 	bl	8000c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4808      	ldr	r0, [pc, #32]	@ (8000a90 <MX_USART1_UART_Init+0x90>)
 8000a6e:	f007 f9db 	bl	8007e28 <HAL_UARTEx_SetRxFifoThreshold>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a78:	f000 f8d8 	bl	8000c2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <MX_USART1_UART_Init+0x90>)
 8000a7e:	f007 f95c 	bl	8007d3a <HAL_UARTEx_DisableFifoMode>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a88:	f000 f8d0 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200002e8 	.word	0x200002e8
 8000a94:	40013800 	.word	0x40013800

08000a98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a9c:	2004      	movs	r0, #4
 8000a9e:	f7ff fd55 	bl	800054c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f7ff fd52 	bl	800054c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2105      	movs	r1, #5
 8000aac:	200b      	movs	r0, #11
 8000aae:	f001 ffa7 	bl	8002a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ab2:	200b      	movs	r0, #11
 8000ab4:	f001 ffbe 	bl	8002a34 <HAL_NVIC_EnableIRQ>

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad0:	2004      	movs	r0, #4
 8000ad2:	f7ff fd54 	bl	800057e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f7ff fd51 	bl	800057e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	2001      	movs	r0, #1
 8000ade:	f7ff fd4e 	bl	800057e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2123      	movs	r1, #35	@ 0x23
 8000ae6:	480a      	ldr	r0, [pc, #40]	@ (8000b10 <MX_GPIO_Init+0x54>)
 8000ae8:	f002 fb96 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000aec:	2323      	movs	r3, #35	@ 0x23
 8000aee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4803      	ldr	r0, [pc, #12]	@ (8000b10 <MX_GPIO_Init+0x54>)
 8000b02:	f002 fa19 	bl	8002f38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	48000400 	.word	0x48000400

08000b14 <task1_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task1_handler */
void task1_handler(void *argument)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	f5ad 6dfd 	sub.w	sp, sp, #2024	@ 0x7e8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	f507 63fd 	add.w	r3, r7, #2024	@ 0x7e8
 8000b20:	f2a3 73e4 	subw	r3, r3, #2020	@ 0x7e4
 8000b24:	6018      	str	r0, [r3, #0]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8000b26:	f00f fb6f 	bl	8010208 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  uint16_t sample;
  uint8_t USB_buffer[2000];
  size_t length = 0;
 8000b2a:	f507 63fd 	add.w	r3, r7, #2024	@ 0x7e8
 8000b2e:	f2a3 73dc 	subw	r3, r3, #2012	@ 0x7dc
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
  uint16_t test = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f8a7 37e4 	strh.w	r3, [r7, #2020]	@ 0x7e4


  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b40:	2100      	movs	r1, #0
 8000b42:	2001      	movs	r0, #1
 8000b44:	f00b fe6c 	bl	800c820 <osThreadFlagsWait>
	  //sprintf(msg, "task1_unblocked \r\n\n");
	  //HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b48:	2101      	movs	r1, #1
 8000b4a:	481a      	ldr	r0, [pc, #104]	@ (8000bb4 <task1_handler+0xa0>)
 8000b4c:	f002 fb7c 	bl	8003248 <HAL_GPIO_TogglePin>

//	  test = osMessageQueueGetCount(AudioQueueHandle);
//	  sprintf(msg, "queue accessed - %d in queue\r\n", test);
//	  HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);

	  for(uint16_t i = 0; i < AUDIO_PACKET_SIZE; i++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	f8a7 37e6 	strh.w	r3, [r7, #2022]	@ 0x7e6
 8000b56:	e016      	b.n	8000b86 <task1_handler+0x72>
	  {
		  osMessageQueueGet(AudioQueueHandle, &sample, NULL, osWaitForever);
 8000b58:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <task1_handler+0xa4>)
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	f207 71e2 	addw	r1, r7, #2018	@ 0x7e2
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	2200      	movs	r2, #0
 8000b66:	f00c f8bd 	bl	800cce4 <osMessageQueueGet>
		  //sprintf(msg, "queue gotten - %d \r\n", sample);
		  //HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
		  update_data_packet_audio_buffered(sample,USB_buffer,&length);
 8000b6a:	f8b7 37e2 	ldrh.w	r3, [r7, #2018]	@ 0x7e2
 8000b6e:	f107 020c 	add.w	r2, r7, #12
 8000b72:	f107 0110 	add.w	r1, r7, #16
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fd42 	bl	8000600 <update_data_packet_audio_buffered>
	  for(uint16_t i = 0; i < AUDIO_PACKET_SIZE; i++)
 8000b7c:	f8b7 37e6 	ldrh.w	r3, [r7, #2022]	@ 0x7e6
 8000b80:	3301      	adds	r3, #1
 8000b82:	f8a7 37e6 	strh.w	r3, [r7, #2022]	@ 0x7e6
 8000b86:	f8b7 37e6 	ldrh.w	r3, [r7, #2022]	@ 0x7e6
 8000b8a:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000b8e:	d3e3      	bcc.n	8000b58 <task1_handler+0x44>
	  }

	  USB_transmit(USB_buffer, length);
 8000b90:	f507 63fd 	add.w	r3, r7, #2024	@ 0x7e8
 8000b94:	f2a3 73dc 	subw	r3, r3, #2012	@ 0x7dc
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fd05 	bl	80005b0 <USB_transmit>
	  length = 0;
 8000ba6:	f507 63fd 	add.w	r3, r7, #2024	@ 0x7e8
 8000baa:	f2a3 73dc 	subw	r3, r3, #2012	@ 0x7dc
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
	  osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000bb2:	e7c3      	b.n	8000b3c <task1_handler+0x28>
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	20000380 	.word	0x20000380

08000bbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a14      	ldr	r2, [pc, #80]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d101      	bne.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bce:	f000 fb97 	bl	8001300 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bda:	d11a      	bne.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0x56>
	static uint16_t sample_count = 0;

	// Add to queue
	//osMessageQueuePut(AudioQueueHandle, (const void*)&ADC_reading, 0, 0);
	osMessageQueuePut(AudioQueueHandle, (const void*)&sample_count, 0, 0);
 8000bdc:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	2300      	movs	r3, #0
 8000be2:	2200      	movs	r2, #0
 8000be4:	490f      	ldr	r1, [pc, #60]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000be6:	f00c f81d 	bl	800cc24 <osMessageQueuePut>

	//sprintf(msg, "Put on queue - %d \r\n", sample_count);
	//HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);

	sample_count++;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000bf4:	801a      	strh	r2, [r3, #0]

	// Use the local counter to determine when to signal
	if(sample_count == AUDIO_PACKET_SIZE)
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000bfe:	d108      	bne.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		sample_count = 0;
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	801a      	strh	r2, [r3, #0]
		osThreadFlagsSet(Task1Handle, 0x01);
 8000c06:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f00b fdb9 	bl	800c784 <osThreadFlagsSet>
	}
  }
  /* USER CODE END Callback 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40012c00 	.word	0x40012c00
 8000c20:	20000380 	.word	0x20000380
 8000c24:	2000038a 	.word	0x2000038a
 8000c28:	2000037c 	.word	0x2000037c

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <Error_Handler+0x8>

08000c38 <LL_AHB2_GRP1_EnableClock>:
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b085      	sub	sp, #20
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ca8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000caa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
}
 8000cc2:	bf00      	nop
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	f06f 0001 	mvn.w	r0, #1
 8000cda:	f001 fe91 	bl	8002a00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a26      	ldr	r2, [pc, #152]	@ (8000d9c <HAL_ADC_MspInit+0xb8>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d145      	bne.n	8000d92 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d06:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d0a:	f7ff ff95 	bl	8000c38 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	2004      	movs	r0, #4
 8000d10:	f7ff ff92 	bl	8000c38 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d14:	2301      	movs	r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	481e      	ldr	r0, [pc, #120]	@ (8000da0 <HAL_ADC_MspInit+0xbc>)
 8000d28:	f002 f906 	bl	8002f38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <HAL_ADC_MspInit+0xc0>)
 8000d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000da8 <HAL_ADC_MspInit+0xc4>)
 8000d30:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d32:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <HAL_ADC_MspInit+0xc0>)
 8000d34:	2205      	movs	r2, #5
 8000d36:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <HAL_ADC_MspInit+0xc0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <HAL_ADC_MspInit+0xc0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d44:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <HAL_ADC_MspInit+0xc0>)
 8000d46:	2280      	movs	r2, #128	@ 0x80
 8000d48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d4a:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <HAL_ADC_MspInit+0xc0>)
 8000d4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d50:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d52:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <HAL_ADC_MspInit+0xc0>)
 8000d54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d5a:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <HAL_ADC_MspInit+0xc0>)
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d60:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <HAL_ADC_MspInit+0xc0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d66:	480f      	ldr	r0, [pc, #60]	@ (8000da4 <HAL_ADC_MspInit+0xc0>)
 8000d68:	f001 fe72 	bl	8002a50 <HAL_DMA_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 8000d72:	f7ff ff5b 	bl	8000c2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <HAL_ADC_MspInit+0xc0>)
 8000d7a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d7c:	4a09      	ldr	r2, [pc, #36]	@ (8000da4 <HAL_ADC_MspInit+0xc0>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2105      	movs	r1, #5
 8000d86:	2012      	movs	r0, #18
 8000d88:	f001 fe3a 	bl	8002a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000d8c:	2012      	movs	r0, #18
 8000d8e:	f001 fe51 	bl	8002a34 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d92:	bf00      	nop
 8000d94:	3720      	adds	r7, #32
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	50040000 	.word	0x50040000
 8000da0:	48000800 	.word	0x48000800
 8000da4:	200001e8 	.word	0x200001e8
 8000da8:	40020008 	.word	0x40020008

08000dac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b09c      	sub	sp, #112	@ 0x70
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	2250      	movs	r2, #80	@ 0x50
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f010 f874 	bl	8010eba <memset>
  if(hi2c->Instance==I2C1)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a17      	ldr	r2, [pc, #92]	@ (8000e34 <HAL_I2C_MspInit+0x88>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d126      	bne.n	8000e2a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000de0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4618      	mov	r0, r3
 8000dec:	f005 fc3f 	bl	800666e <HAL_RCCEx_PeriphCLKConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000df6:	f7ff ff19 	bl	8000c2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f7ff ff1c 	bl	8000c38 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e06:	2312      	movs	r3, #18
 8000e08:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e12:	2304      	movs	r3, #4
 8000e14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e16:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4806      	ldr	r0, [pc, #24]	@ (8000e38 <HAL_I2C_MspInit+0x8c>)
 8000e1e:	f002 f88b 	bl	8002f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e22:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000e26:	f7ff ff20 	bl	8000c6a <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3770      	adds	r7, #112	@ 0x70
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40005400 	.word	0x40005400
 8000e38:	48000400 	.word	0x48000400

08000e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e4c:	d10a      	bne.n	8000e64 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff ff0b 	bl	8000c6a <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2105      	movs	r1, #5
 8000e58:	201c      	movs	r0, #28
 8000e5a:	f001 fdd1 	bl	8002a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e5e:	201c      	movs	r0, #28
 8000e60:	f001 fde8 	bl	8002a34 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b09c      	sub	sp, #112	@ 0x70
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2250      	movs	r2, #80	@ 0x50
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f010 f814 	bl	8010eba <memset>
  if(huart->Instance==USART1)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a16      	ldr	r2, [pc, #88]	@ (8000ef0 <HAL_UART_MspInit+0x84>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d124      	bne.n	8000ee6 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f005 fbe0 	bl	800666e <HAL_RCCEx_PeriphCLKConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eb4:	f7ff feba 	bl	8000c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eb8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000ebc:	f7ff feee 	bl	8000c9c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f7ff feb9 	bl	8000c38 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ec6:	23c0      	movs	r3, #192	@ 0xc0
 8000ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ed6:	2307      	movs	r3, #7
 8000ed8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <HAL_UART_MspInit+0x88>)
 8000ee2:	f002 f829 	bl	8002f38 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3770      	adds	r7, #112	@ 0x70
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40013800 	.word	0x40013800
 8000ef4:	48000400 	.word	0x48000400

08000ef8 <LL_APB2_GRP1_EnableClock>:
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	@ 0x30
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	2019      	movs	r0, #25
 8000f42:	f001 fd5d 	bl	8002a00 <HAL_NVIC_SetPriority>
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f46:	2019      	movs	r0, #25
 8000f48:	f001 fd74 	bl	8002a34 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f4c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000f50:	f7ff ffd2 	bl	8000ef8 <LL_APB2_GRP1_EnableClock>
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f54:	f107 0208 	add.w	r2, r7, #8
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f005 f902 	bl	8006168 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f64:	f005 f8ea 	bl	800613c <HAL_RCC_GetPCLK2Freq>
 8000f68:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f6c:	4a12      	ldr	r2, [pc, #72]	@ (8000fb8 <HAL_InitTick+0x8c>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	0c9b      	lsrs	r3, r3, #18
 8000f74:	3b01      	subs	r3, #1
 8000f76:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f78:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <HAL_InitTick+0x90>)
 8000f7a:	4a11      	ldr	r2, [pc, #68]	@ (8000fc0 <HAL_InitTick+0x94>)
 8000f7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <HAL_InitTick+0x90>)
 8000f80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f84:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f86:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <HAL_InitTick+0x90>)
 8000f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f8a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <HAL_InitTick+0x90>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <HAL_InitTick+0x90>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f98:	4808      	ldr	r0, [pc, #32]	@ (8000fbc <HAL_InitTick+0x90>)
 8000f9a:	f005 fdef 	bl	8006b7c <HAL_TIM_Base_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d104      	bne.n	8000fae <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000fa4:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <HAL_InitTick+0x90>)
 8000fa6:	f005 fe41 	bl	8006c2c <HAL_TIM_Base_Start_IT>
 8000faa:	4603      	mov	r3, r0
 8000fac:	e000      	b.n	8000fb0 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3730      	adds	r7, #48	@ 0x30
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	431bde83 	.word	0x431bde83
 8000fbc:	2000038c 	.word	0x2000038c
 8000fc0:	40012c00 	.word	0x40012c00

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <NMI_Handler+0x4>

08000fcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <DMA1_Channel1_IRQHandler+0x10>)
 8001002:	f001 fe48 	bl	8002c96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001e8 	.word	0x200001e8

08001010 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <ADC1_IRQHandler+0x10>)
 8001016:	f000 fd57 	bl	8001ac8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000184 	.word	0x20000184

08001024 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <USB_LP_IRQHandler+0x10>)
 800102a:	f002 fb49 	bl	80036c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000a6a8 	.word	0x2000a6a8

08001038 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800103c:	4802      	ldr	r0, [pc, #8]	@ (8001048 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800103e:	f005 fe43 	bl	8006cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000038c 	.word	0x2000038c

0800104c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <TIM2_IRQHandler+0x10>)
 8001052:	f005 fe39 	bl	8006cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000029c 	.word	0x2000029c

08001060 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e00a      	b.n	8001088 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001072:	f3af 8000 	nop.w
 8001076:	4601      	mov	r1, r0
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	60ba      	str	r2, [r7, #8]
 800107e:	b2ca      	uxtb	r2, r1
 8001080:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	dbf0      	blt.n	8001072 <_read+0x12>
  }

  return len;
 8001090:	687b      	ldr	r3, [r7, #4]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	e009      	b.n	80010c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	60ba      	str	r2, [r7, #8]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	dbf1      	blt.n	80010ac <_write+0x12>
  }
  return len;
 80010c8:	687b      	ldr	r3, [r7, #4]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <_close>:

int _close(int file)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010fa:	605a      	str	r2, [r3, #4]
  return 0;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <_isatty>:

int _isatty(int file)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001144:	4a14      	ldr	r2, [pc, #80]	@ (8001198 <_sbrk+0x5c>)
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <_sbrk+0x60>)
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001150:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001158:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <_sbrk+0x64>)
 800115a:	4a12      	ldr	r2, [pc, #72]	@ (80011a4 <_sbrk+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	429a      	cmp	r2, r3
 800116a:	d207      	bcs.n	800117c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800116c:	f00f ff52 	bl	8011014 <__errno>
 8001170:	4603      	mov	r3, r0
 8001172:	220c      	movs	r2, #12
 8001174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	e009      	b.n	8001190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001182:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <_sbrk+0x64>)
 800118c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20030000 	.word	0x20030000
 800119c:	00000400 	.word	0x00000400
 80011a0:	200003d8 	.word	0x200003d8
 80011a4:	2000acf0 	.word	0x2000acf0

080011a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80011ac:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <SystemInit+0x98>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011b2:	4a23      	ldr	r2, [pc, #140]	@ (8001240 <SystemInit+0x98>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80011cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011d0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80011d4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80011d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <SystemInit+0x9c>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80011e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011f2:	f023 0305 	bic.w	r3, r3, #5
 80011f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80011fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001202:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001206:	f023 0301 	bic.w	r3, r3, #1
 800120a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800120e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001212:	4a0d      	ldr	r2, [pc, #52]	@ (8001248 <SystemInit+0xa0>)
 8001214:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800121a:	4a0b      	ldr	r2, [pc, #44]	@ (8001248 <SystemInit+0xa0>)
 800121c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800121e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001228:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800122c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800122e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00
 8001244:	faf6fefb 	.word	0xfaf6fefb
 8001248:	22041000 	.word	0x22041000

0800124c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800124c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001250:	3304      	adds	r3, #4

08001252 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001252:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001254:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001256:	d3f9      	bcc.n	800124c <CopyDataInit>
  bx lr
 8001258:	4770      	bx	lr

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800125a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800125c:	3004      	adds	r0, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800125e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>
  bx lr
 8001262:	4770      	bx	lr

08001264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001264:	480c      	ldr	r0, [pc, #48]	@ (8001298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001266:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001268:	f7ff ff9e 	bl	80011a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800126c:	480b      	ldr	r0, [pc, #44]	@ (800129c <LoopForever+0x6>)
 800126e:	490c      	ldr	r1, [pc, #48]	@ (80012a0 <LoopForever+0xa>)
 8001270:	4a0c      	ldr	r2, [pc, #48]	@ (80012a4 <LoopForever+0xe>)
 8001272:	2300      	movs	r3, #0
 8001274:	f7ff ffed 	bl	8001252 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001278:	480b      	ldr	r0, [pc, #44]	@ (80012a8 <LoopForever+0x12>)
 800127a:	490c      	ldr	r1, [pc, #48]	@ (80012ac <LoopForever+0x16>)
 800127c:	4a0c      	ldr	r2, [pc, #48]	@ (80012b0 <LoopForever+0x1a>)
 800127e:	2300      	movs	r3, #0
 8001280:	f7ff ffe7 	bl	8001252 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001284:	480b      	ldr	r0, [pc, #44]	@ (80012b4 <LoopForever+0x1e>)
 8001286:	490c      	ldr	r1, [pc, #48]	@ (80012b8 <LoopForever+0x22>)
 8001288:	2300      	movs	r3, #0
 800128a:	f7ff ffe8 	bl	800125e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800128e:	f00f fec7 	bl	8011020 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001292:	f7ff f9d9 	bl	8000648 <main>

08001296 <LoopForever>:

LoopForever:
  b LoopForever
 8001296:	e7fe      	b.n	8001296 <LoopForever>
  ldr   r0, =_estack
 8001298:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000168 	.word	0x20000168
 80012a4:	08011e80 	.word	0x08011e80
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80012a8:	20030000 	.word	0x20030000
 80012ac:	20030000 	.word	0x20030000
 80012b0:	08011fe0 	.word	0x08011fe0
  INIT_BSS _sbss, _ebss
 80012b4:	20000168 	.word	0x20000168
 80012b8:	2000acf0 	.word	0x2000acf0

080012bc <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <AES1_IRQHandler>
	...

080012c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ca:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <HAL_Init+0x3c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a0b      	ldr	r2, [pc, #44]	@ (80012fc <HAL_Init+0x3c>)
 80012d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d6:	2003      	movs	r0, #3
 80012d8:	f001 fb87 	bl	80029ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012dc:	200f      	movs	r0, #15
 80012de:	f7ff fe25 	bl	8000f2c <HAL_InitTick>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	e001      	b.n	80012f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012ee:	f7ff fcee 	bl	8000cce <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	58004000 	.word	0x58004000

08001300 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000010 	.word	0x20000010
 8001324:	200003dc 	.word	0x200003dc

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	200003dc 	.word	0x200003dc

08001340 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001344:	4b03      	ldr	r3, [pc, #12]	@ (8001354 <HAL_GetTickPrio+0x14>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	2000000c 	.word	0x2000000c

08001358 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	609a      	str	r2, [r3, #8]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3360      	adds	r3, #96	@ 0x60
 80013d2:	461a      	mov	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <LL_ADC_SetOffset+0x44>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	4313      	orrs	r3, r2
 80013f0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013f8:	bf00      	nop
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	03fff000 	.word	0x03fff000

08001408 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3360      	adds	r3, #96	@ 0x60
 8001416:	461a      	mov	r2, r3
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3360      	adds	r3, #96	@ 0x60
 8001444:	461a      	mov	r2, r3
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	431a      	orrs	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800145e:	bf00      	nop
 8001460:	371c      	adds	r7, #28
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001482:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3330      	adds	r3, #48	@ 0x30
 80014a0:	461a      	mov	r2, r3
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	f003 030c 	and.w	r3, r3, #12
 80014ac:	4413      	add	r3, r2
 80014ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	211f      	movs	r1, #31
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	401a      	ands	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	0e9b      	lsrs	r3, r3, #26
 80014c8:	f003 011f 	and.w	r1, r3, #31
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	431a      	orrs	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80014dc:	bf00      	nop
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800152a:	b480      	push	{r7}
 800152c:	b087      	sub	sp, #28
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	3314      	adds	r3, #20
 800153a:	461a      	mov	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	0e5b      	lsrs	r3, r3, #25
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	4413      	add	r3, r2
 8001548:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	0d1b      	lsrs	r3, r3, #20
 8001552:	f003 031f 	and.w	r3, r3, #31
 8001556:	2107      	movs	r1, #7
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	401a      	ands	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	0d1b      	lsrs	r3, r3, #20
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	431a      	orrs	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001574:	bf00      	nop
 8001576:	371c      	adds	r7, #28
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001598:	43db      	mvns	r3, r3
 800159a:	401a      	ands	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0318 	and.w	r3, r3, #24
 80015a2:	4908      	ldr	r1, [pc, #32]	@ (80015c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015a4:	40d9      	lsrs	r1, r3
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	400b      	ands	r3, r1
 80015aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ae:	431a      	orrs	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	0007ffff 	.word	0x0007ffff

080015c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80015d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6093      	str	r3, [r2, #8]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001600:	d101      	bne.n	8001606 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001624:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001628:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001650:	d101      	bne.n	8001656 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001674:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001678:	f043 0201 	orr.w	r2, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <LL_ADC_IsEnabled+0x18>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <LL_ADC_IsEnabled+0x1a>
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016c6:	f043 0204 	orr.w	r2, r3, #4
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d101      	bne.n	80016f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b08      	cmp	r3, #8
 8001712:	d101      	bne.n	8001718 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e12e      	b.n	80019a4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001750:	2b00      	cmp	r3, #0
 8001752:	d109      	bne.n	8001768 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fac5 	bl	8000ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff3d 	bl	80015ec <LL_ADC_IsDeepPowerDownEnabled>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d004      	beq.n	8001782 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff23 	bl	80015c8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff58 	bl	800163c <LL_ADC_IsInternalRegulatorEnabled>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d115      	bne.n	80017be <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff3c 	bl	8001614 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800179c:	4b83      	ldr	r3, [pc, #524]	@ (80019ac <HAL_ADC_Init+0x284>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	099b      	lsrs	r3, r3, #6
 80017a2:	4a83      	ldr	r2, [pc, #524]	@ (80019b0 <HAL_ADC_Init+0x288>)
 80017a4:	fba2 2303 	umull	r2, r3, r2, r3
 80017a8:	099b      	lsrs	r3, r3, #6
 80017aa:	3301      	adds	r3, #1
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017b0:	e002      	b.n	80017b8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f9      	bne.n	80017b2 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff3a 	bl	800163c <LL_ADC_IsInternalRegulatorEnabled>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10d      	bne.n	80017ea <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d2:	f043 0210 	orr.w	r2, r3, #16
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ff73 	bl	80016da <LL_ADC_REG_IsConversionOngoing>
 80017f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 80c7 	bne.w	8001992 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f040 80c3 	bne.w	8001992 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001810:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001814:	f043 0202 	orr.w	r2, r3, #2
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff33 	bl	800168c <LL_ADC_IsEnabled>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10b      	bne.n	8001844 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800182c:	4861      	ldr	r0, [pc, #388]	@ (80019b4 <HAL_ADC_Init+0x28c>)
 800182e:	f7ff ff2d 	bl	800168c <LL_ADC_IsEnabled>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d105      	bne.n	8001844 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	4619      	mov	r1, r3
 800183e:	485e      	ldr	r0, [pc, #376]	@ (80019b8 <HAL_ADC_Init+0x290>)
 8001840:	f7ff fd8a 	bl	8001358 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7e5b      	ldrb	r3, [r3, #25]
 8001848:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800184e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001854:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800185a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001862:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001864:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d106      	bne.n	8001884 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	3b01      	subs	r3, #1
 800187c:	045b      	lsls	r3, r3, #17
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001888:	2b00      	cmp	r3, #0
 800188a:	d009      	beq.n	80018a0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001890:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001898:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	4b45      	ldr	r3, [pc, #276]	@ (80019bc <HAL_ADC_Init+0x294>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	69b9      	ldr	r1, [r7, #24]
 80018b0:	430b      	orrs	r3, r1
 80018b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff0e 	bl	80016da <LL_ADC_REG_IsConversionOngoing>
 80018be:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff1b 	bl	8001700 <LL_ADC_INJ_IsConversionOngoing>
 80018ca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d13d      	bne.n	800194e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d13a      	bne.n	800194e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018dc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018e4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018f4:	f023 0302 	bic.w	r3, r3, #2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	69b9      	ldr	r1, [r7, #24]
 80018fe:	430b      	orrs	r3, r1
 8001900:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001908:	2b01      	cmp	r3, #1
 800190a:	d118      	bne.n	800193e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001916:	f023 0304 	bic.w	r3, r3, #4
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001922:	4311      	orrs	r1, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001928:	4311      	orrs	r1, r2
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800192e:	430a      	orrs	r2, r1
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	e007      	b.n	800194e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0201 	bic.w	r2, r2, #1
 800194c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d10c      	bne.n	8001970 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195c:	f023 010f 	bic.w	r1, r3, #15
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	1e5a      	subs	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	631a      	str	r2, [r3, #48]	@ 0x30
 800196e:	e007      	b.n	8001980 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 020f 	bic.w	r2, r2, #15
 800197e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001984:	f023 0303 	bic.w	r3, r3, #3
 8001988:	f043 0201 	orr.w	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001990:	e007      	b.n	80019a2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001996:	f043 0210 	orr.w	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000008 	.word	0x20000008
 80019b0:	053e2d63 	.word	0x053e2d63
 80019b4:	50040000 	.word	0x50040000
 80019b8:	50040300 	.word	0x50040300
 80019bc:	fff0c007 	.word	0xfff0c007

080019c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fe82 	bl	80016da <LL_ADC_REG_IsConversionOngoing>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d167      	bne.n	8001aac <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_Start_DMA+0x2a>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e063      	b.n	8001ab2 <HAL_ADC_Start_DMA+0xf2>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 fe0c 	bl	8002610 <ADC_Enable>
 80019f8:	4603      	mov	r3, r0
 80019fa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d14f      	bne.n	8001aa2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a06:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a0a:	f023 0301 	bic.w	r3, r3, #1
 8001a0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a26:	f023 0206 	bic.w	r2, r3, #6
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a2e:	e002      	b.n	8001a36 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3a:	4a20      	ldr	r2, [pc, #128]	@ (8001abc <HAL_ADC_Start_DMA+0xfc>)
 8001a3c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a42:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac0 <HAL_ADC_Start_DMA+0x100>)
 8001a44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac4 <HAL_ADC_Start_DMA+0x104>)
 8001a4c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	221c      	movs	r2, #28
 8001a54:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0210 	orr.w	r2, r2, #16
 8001a6c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0201 	orr.w	r2, r2, #1
 8001a7c:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3340      	adds	r3, #64	@ 0x40
 8001a88:	4619      	mov	r1, r3
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f001 f887 	bl	8002ba0 <HAL_DMA_Start_IT>
 8001a92:	4603      	mov	r3, r0
 8001a94:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fe09 	bl	80016b2 <LL_ADC_REG_StartConversion>
 8001aa0:	e006      	b.n	8001ab0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001aaa:	e001      	b.n	8001ab0 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001aac:	2302      	movs	r3, #2
 8001aae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	08002705 	.word	0x08002705
 8001ac0:	080027dd 	.word	0x080027dd
 8001ac4:	080027f9 	.word	0x080027f9

08001ac8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d017      	beq.n	8001b1e <HAL_ADC_IRQHandler+0x56>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d012      	beq.n	8001b1e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b08:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 feb3 	bl	800287c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <HAL_ADC_IRQHandler+0x6a>
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d05d      	beq.n	8001bf8 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d058      	beq.n	8001bf8 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d105      	bne.n	8001b5e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fc81 	bl	800146a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d03d      	beq.n	8001bea <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b7c:	d035      	beq.n	8001bea <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d12e      	bne.n	8001bea <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fda2 	bl	80016da <LL_ADC_REG_IsConversionOngoing>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d11a      	bne.n	8001bd2 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 020c 	bic.w	r2, r2, #12
 8001baa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d112      	bne.n	8001bea <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc8:	f043 0201 	orr.w	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	655a      	str	r2, [r3, #84]	@ 0x54
 8001bd0:	e00b      	b.n	8001bea <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd6:	f043 0210 	orr.w	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be2:	f043 0201 	orr.w	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f922 	bl	8001e34 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	220c      	movs	r2, #12
 8001bf6:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f003 0320 	and.w	r3, r3, #32
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d004      	beq.n	8001c0c <HAL_ADC_IRQHandler+0x144>
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d109      	bne.n	8001c20 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d074      	beq.n	8001d00 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d06f      	beq.n	8001d00 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d105      	bne.n	8001c38 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c30:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fc61 	bl	8001504 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001c42:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fc0e 	bl	800146a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c4e:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d049      	beq.n	8001cf2 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <HAL_ADC_IRQHandler+0x1b0>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d041      	beq.n	8001cf2 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d13c      	bne.n	8001cf2 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c82:	2b40      	cmp	r3, #64	@ 0x40
 8001c84:	d135      	bne.n	8001cf2 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d12e      	bne.n	8001cf2 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fd31 	bl	8001700 <LL_ADC_INJ_IsConversionOngoing>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d11a      	bne.n	8001cda <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001cb2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d112      	bne.n	8001cf2 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	655a      	str	r2, [r3, #84]	@ 0x54
 8001cd8:	e00b      	b.n	8001cf2 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cde:	f043 0210 	orr.w	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 fd9a 	bl	800282c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2260      	movs	r2, #96	@ 0x60
 8001cfe:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d011      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x266>
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00c      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f89b 	bl	8001e5c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2280      	movs	r2, #128	@ 0x80
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d012      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x296>
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00d      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fd80 	bl	8002854 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d012      	beq.n	8001d8e <HAL_ADC_IRQHandler+0x2c6>
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00d      	beq.n	8001d8e <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d76:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fd72 	bl	8002868 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d02b      	beq.n	8001df0 <HAL_ADC_IRQHandler+0x328>
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d026      	beq.n	8001df0 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d102      	bne.n	8001db0 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8001daa:	2301      	movs	r3, #1
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	e009      	b.n	8001dc4 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fb97 	bl	80014e8 <LL_ADC_REG_GetDMATransfer>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d10e      	bne.n	8001de8 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dce:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dda:	f043 0202 	orr.w	r2, r3, #2
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f844 	bl	8001e70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2210      	movs	r2, #16
 8001dee:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d018      	beq.n	8001e2c <HAL_ADC_IRQHandler+0x364>
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d013      	beq.n	8001e2c <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e08:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e14:	f043 0208 	orr.w	r2, r3, #8
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e24:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fd0a 	bl	8002840 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8001e2c:	bf00      	nop
 8001e2e:	3720      	adds	r7, #32
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b0b6      	sub	sp, #216	@ 0xd8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x22>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e39f      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x762>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fc11 	bl	80016da <LL_ADC_REG_IsConversionOngoing>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f040 8384 	bne.w	80025c8 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f7ff fadf 	bl	8001490 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fbff 	bl	80016da <LL_ADC_REG_IsConversionOngoing>
 8001edc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fc0b 	bl	8001700 <LL_ADC_INJ_IsConversionOngoing>
 8001eea:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f040 81a6 	bne.w	8002244 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ef8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f040 81a1 	bne.w	8002244 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6819      	ldr	r1, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f7ff fb0b 	bl	800152a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	08db      	lsrs	r3, r3, #3
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d00a      	beq.n	8001f4c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6919      	ldr	r1, [r3, #16]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f46:	f7ff fa3b 	bl	80013c0 <LL_ADC_SetOffset>
 8001f4a:	e17b      	b.n	8002244 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fa58 	bl	8001408 <LL_ADC_GetOffsetChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10a      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0xf4>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fa4d 	bl	8001408 <LL_ADC_GetOffsetChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	0e9b      	lsrs	r3, r3, #26
 8001f72:	f003 021f 	and.w	r2, r3, #31
 8001f76:	e01e      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x132>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fa42 	bl	8001408 <LL_ADC_GetOffsetChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	e004      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8001faa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x14a>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	0e9b      	lsrs	r3, r3, #26
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	e018      	b.n	8002000 <HAL_ADC_ConfigChannel+0x17c>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001fea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	e004      	b.n	8002000 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8001ff6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	429a      	cmp	r2, r3
 8002002:	d106      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2200      	movs	r2, #0
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fa11 	bl	8001434 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2101      	movs	r1, #1
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff f9f5 	bl	8001408 <LL_ADC_GetOffsetChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10a      	bne.n	800203e <HAL_ADC_ConfigChannel+0x1ba>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2101      	movs	r1, #1
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff f9ea 	bl	8001408 <LL_ADC_GetOffsetChannel>
 8002034:	4603      	mov	r3, r0
 8002036:	0e9b      	lsrs	r3, r3, #26
 8002038:	f003 021f 	and.w	r2, r3, #31
 800203c:	e01e      	b.n	800207c <HAL_ADC_ConfigChannel+0x1f8>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2101      	movs	r1, #1
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff f9df 	bl	8001408 <LL_ADC_GetOffsetChannel>
 800204a:	4603      	mov	r3, r0
 800204c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800205c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002060:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800206c:	2320      	movs	r3, #32
 800206e:	e004      	b.n	800207a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002070:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002084:	2b00      	cmp	r3, #0
 8002086:	d105      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x210>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0e9b      	lsrs	r3, r3, #26
 800208e:	f003 031f 	and.w	r3, r3, #31
 8002092:	e018      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x242>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80020a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80020b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80020b8:	2320      	movs	r3, #32
 80020ba:	e004      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80020bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020c0:	fab3 f383 	clz	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d106      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2200      	movs	r2, #0
 80020d0:	2101      	movs	r1, #1
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f9ae 	bl	8001434 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2102      	movs	r1, #2
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff f992 	bl	8001408 <LL_ADC_GetOffsetChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10a      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x280>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2102      	movs	r1, #2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff f987 	bl	8001408 <LL_ADC_GetOffsetChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	0e9b      	lsrs	r3, r3, #26
 80020fe:	f003 021f 	and.w	r2, r3, #31
 8002102:	e01e      	b.n	8002142 <HAL_ADC_ConfigChannel+0x2be>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2102      	movs	r1, #2
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff f97c 	bl	8001408 <LL_ADC_GetOffsetChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002122:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002126:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800212a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002132:	2320      	movs	r3, #32
 8002134:	e004      	b.n	8002140 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002136:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214a:	2b00      	cmp	r3, #0
 800214c:	d105      	bne.n	800215a <HAL_ADC_ConfigChannel+0x2d6>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	0e9b      	lsrs	r3, r3, #26
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	e016      	b.n	8002188 <HAL_ADC_ConfigChannel+0x304>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800216c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800216e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002172:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800217a:	2320      	movs	r3, #32
 800217c:	e004      	b.n	8002188 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800217e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	429a      	cmp	r2, r3
 800218a:	d106      	bne.n	800219a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2200      	movs	r2, #0
 8002192:	2102      	movs	r1, #2
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff f94d 	bl	8001434 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2103      	movs	r1, #3
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff f931 	bl	8001408 <LL_ADC_GetOffsetChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10a      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x342>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2103      	movs	r1, #3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff f926 	bl	8001408 <LL_ADC_GetOffsetChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	0e9b      	lsrs	r3, r3, #26
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	e017      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x372>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2103      	movs	r1, #3
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff f91b 	bl	8001408 <LL_ADC_GetOffsetChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80021de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021e0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80021e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80021e8:	2320      	movs	r3, #32
 80021ea:	e003      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80021ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <HAL_ADC_ConfigChannel+0x38a>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	0e9b      	lsrs	r3, r3, #26
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	e011      	b.n	8002232 <HAL_ADC_ConfigChannel+0x3ae>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800221c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800221e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002226:	2320      	movs	r3, #32
 8002228:	e003      	b.n	8002232 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800222a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	429a      	cmp	r2, r3
 8002234:	d106      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2200      	movs	r2, #0
 800223c:	2103      	movs	r1, #3
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff f8f8 	bl	8001434 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fa1f 	bl	800168c <LL_ADC_IsEnabled>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	f040 81c2 	bne.w	80025da <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6819      	ldr	r1, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	461a      	mov	r2, r3
 8002264:	f7ff f98c 	bl	8001580 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a8e      	ldr	r2, [pc, #568]	@ (80024a8 <HAL_ADC_ConfigChannel+0x624>)
 800226e:	4293      	cmp	r3, r2
 8002270:	f040 8130 	bne.w	80024d4 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10b      	bne.n	800229c <HAL_ADC_ConfigChannel+0x418>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	3301      	adds	r3, #1
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	2b09      	cmp	r3, #9
 8002292:	bf94      	ite	ls
 8002294:	2301      	movls	r3, #1
 8002296:	2300      	movhi	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e019      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x44c>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80022aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022ac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80022ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80022b4:	2320      	movs	r3, #32
 80022b6:	e003      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80022b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	3301      	adds	r3, #1
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	2b09      	cmp	r3, #9
 80022c8:	bf94      	ite	ls
 80022ca:	2301      	movls	r3, #1
 80022cc:	2300      	movhi	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d079      	beq.n	80023c8 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d107      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x46c>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	3301      	adds	r3, #1
 80022e8:	069b      	lsls	r3, r3, #26
 80022ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022ee:	e015      	b.n	800231c <HAL_ADC_ConfigChannel+0x498>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80022fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002300:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002308:	2320      	movs	r3, #32
 800230a:	e003      	b.n	8002314 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800230c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	3301      	adds	r3, #1
 8002316:	069b      	lsls	r3, r3, #26
 8002318:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002324:	2b00      	cmp	r3, #0
 8002326:	d109      	bne.n	800233c <HAL_ADC_ConfigChannel+0x4b8>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0e9b      	lsrs	r3, r3, #26
 800232e:	3301      	adds	r3, #1
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	2101      	movs	r1, #1
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	e017      	b.n	800236c <HAL_ADC_ConfigChannel+0x4e8>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800234a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800234c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800234e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002354:	2320      	movs	r3, #32
 8002356:	e003      	b.n	8002360 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	2101      	movs	r1, #1
 8002368:	fa01 f303 	lsl.w	r3, r1, r3
 800236c:	ea42 0103 	orr.w	r1, r2, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10a      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x50e>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	0e9b      	lsrs	r3, r3, #26
 8002382:	3301      	adds	r3, #1
 8002384:	f003 021f 	and.w	r2, r3, #31
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	051b      	lsls	r3, r3, #20
 8002390:	e018      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x540>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80023a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80023a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80023aa:	2320      	movs	r3, #32
 80023ac:	e003      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80023ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c4:	430b      	orrs	r3, r1
 80023c6:	e080      	b.n	80024ca <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d107      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x560>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0e9b      	lsrs	r3, r3, #26
 80023da:	3301      	adds	r3, #1
 80023dc:	069b      	lsls	r3, r3, #26
 80023de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023e2:	e015      	b.n	8002410 <HAL_ADC_ConfigChannel+0x58c>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ec:	fa93 f3a3 	rbit	r3, r3
 80023f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80023f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80023f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80023fc:	2320      	movs	r3, #32
 80023fe:	e003      	b.n	8002408 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	3301      	adds	r3, #1
 800240a:	069b      	lsls	r3, r3, #26
 800240c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x5ac>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0e9b      	lsrs	r3, r3, #26
 8002422:	3301      	adds	r3, #1
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2101      	movs	r1, #1
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	e017      	b.n	8002460 <HAL_ADC_ConfigChannel+0x5dc>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	61fb      	str	r3, [r7, #28]
  return result;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002448:	2320      	movs	r3, #32
 800244a:	e003      	b.n	8002454 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	3301      	adds	r3, #1
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	2101      	movs	r1, #1
 800245c:	fa01 f303 	lsl.w	r3, r1, r3
 8002460:	ea42 0103 	orr.w	r1, r2, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10d      	bne.n	800248c <HAL_ADC_ConfigChannel+0x608>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0e9b      	lsrs	r3, r3, #26
 8002476:	3301      	adds	r3, #1
 8002478:	f003 021f 	and.w	r2, r3, #31
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	3b1e      	subs	r3, #30
 8002484:	051b      	lsls	r3, r3, #20
 8002486:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800248a:	e01d      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x644>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	613b      	str	r3, [r7, #16]
  return result;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d103      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80024a4:	2320      	movs	r3, #32
 80024a6:	e005      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x630>
 80024a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	f003 021f 	and.w	r2, r3, #31
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	3b1e      	subs	r3, #30
 80024c2:	051b      	lsls	r3, r3, #20
 80024c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c8:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7ff f82b 	bl	800152a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b45      	ldr	r3, [pc, #276]	@ (80025f0 <HAL_ADC_ConfigChannel+0x76c>)
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d07c      	beq.n	80025da <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024e0:	4844      	ldr	r0, [pc, #272]	@ (80025f4 <HAL_ADC_ConfigChannel+0x770>)
 80024e2:	f7fe ff5f 	bl	80013a4 <LL_ADC_GetCommonPathInternalCh>
 80024e6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024ea:	4843      	ldr	r0, [pc, #268]	@ (80025f8 <HAL_ADC_ConfigChannel+0x774>)
 80024ec:	f7ff f8ce 	bl	800168c <LL_ADC_IsEnabled>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d15e      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a40      	ldr	r2, [pc, #256]	@ (80025fc <HAL_ADC_ConfigChannel+0x778>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d127      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x6cc>
 8002500:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002504:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d121      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a39      	ldr	r2, [pc, #228]	@ (80025f8 <HAL_ADC_ConfigChannel+0x774>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d161      	bne.n	80025da <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002516:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800251a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800251e:	4619      	mov	r1, r3
 8002520:	4834      	ldr	r0, [pc, #208]	@ (80025f4 <HAL_ADC_ConfigChannel+0x770>)
 8002522:	f7fe ff2c 	bl	800137e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002526:	4b36      	ldr	r3, [pc, #216]	@ (8002600 <HAL_ADC_ConfigChannel+0x77c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	099b      	lsrs	r3, r3, #6
 800252c:	4a35      	ldr	r2, [pc, #212]	@ (8002604 <HAL_ADC_ConfigChannel+0x780>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	099b      	lsrs	r3, r3, #6
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002540:	e002      	b.n	8002548 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3b01      	subs	r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f9      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800254e:	e044      	b.n	80025da <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a2c      	ldr	r2, [pc, #176]	@ (8002608 <HAL_ADC_ConfigChannel+0x784>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d113      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x6fe>
 800255a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800255e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10d      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a23      	ldr	r2, [pc, #140]	@ (80025f8 <HAL_ADC_ConfigChannel+0x774>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d134      	bne.n	80025da <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002570:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002574:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002578:	4619      	mov	r1, r3
 800257a:	481e      	ldr	r0, [pc, #120]	@ (80025f4 <HAL_ADC_ConfigChannel+0x770>)
 800257c:	f7fe feff 	bl	800137e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002580:	e02b      	b.n	80025da <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a21      	ldr	r2, [pc, #132]	@ (800260c <HAL_ADC_ConfigChannel+0x788>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d126      	bne.n	80025da <HAL_ADC_ConfigChannel+0x756>
 800258c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002590:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d120      	bne.n	80025da <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a16      	ldr	r2, [pc, #88]	@ (80025f8 <HAL_ADC_ConfigChannel+0x774>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d11b      	bne.n	80025da <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80025a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025aa:	4619      	mov	r1, r3
 80025ac:	4811      	ldr	r0, [pc, #68]	@ (80025f4 <HAL_ADC_ConfigChannel+0x770>)
 80025ae:	f7fe fee6 	bl	800137e <LL_ADC_SetCommonPathInternalCh>
 80025b2:	e012      	b.n	80025da <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b8:	f043 0220 	orr.w	r2, r3, #32
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80025c6:	e008      	b.n	80025da <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80025e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	37d8      	adds	r7, #216	@ 0xd8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	80080000 	.word	0x80080000
 80025f4:	50040300 	.word	0x50040300
 80025f8:	50040000 	.word	0x50040000
 80025fc:	c7520000 	.word	0xc7520000
 8002600:	20000008 	.word	0x20000008
 8002604:	053e2d63 	.word	0x053e2d63
 8002608:	cb840000 	.word	0xcb840000
 800260c:	80000001 	.word	0x80000001

08002610 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff f833 	bl	800168c <LL_ADC_IsEnabled>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d15e      	bne.n	80026ea <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	4b30      	ldr	r3, [pc, #192]	@ (80026f4 <ADC_Enable+0xe4>)
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00d      	beq.n	8002656 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263e:	f043 0210 	orr.w	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264a:	f043 0201 	orr.w	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e04a      	b.n	80026ec <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff f802 	bl	8001664 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002660:	4825      	ldr	r0, [pc, #148]	@ (80026f8 <ADC_Enable+0xe8>)
 8002662:	f7fe fe9f 	bl	80013a4 <LL_ADC_GetCommonPathInternalCh>
 8002666:	4603      	mov	r3, r0
 8002668:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00f      	beq.n	8002690 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002670:	4b22      	ldr	r3, [pc, #136]	@ (80026fc <ADC_Enable+0xec>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	099b      	lsrs	r3, r3, #6
 8002676:	4a22      	ldr	r2, [pc, #136]	@ (8002700 <ADC_Enable+0xf0>)
 8002678:	fba2 2303 	umull	r2, r3, r2, r3
 800267c:	099b      	lsrs	r3, r3, #6
 800267e:	3301      	adds	r3, #1
 8002680:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002682:	e002      	b.n	800268a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	3b01      	subs	r3, #1
 8002688:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f9      	bne.n	8002684 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002690:	f7fe fe4a 	bl	8001328 <HAL_GetTick>
 8002694:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002696:	e021      	b.n	80026dc <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fff5 	bl	800168c <LL_ADC_IsEnabled>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d104      	bne.n	80026b2 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe ffd9 	bl	8001664 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026b2:	f7fe fe39 	bl	8001328 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d90d      	bls.n	80026dc <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c4:	f043 0210 	orr.w	r2, r3, #16
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e007      	b.n	80026ec <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d1d6      	bne.n	8002698 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	8000003f 	.word	0x8000003f
 80026f8:	50040300 	.word	0x50040300
 80026fc:	20000008 	.word	0x20000008
 8002700:	053e2d63 	.word	0x053e2d63

08002704 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002710:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002716:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800271a:	2b00      	cmp	r3, #0
 800271c:	d14b      	bne.n	80027b6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d021      	beq.n	800277c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe fe94 	bl	800146a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d032      	beq.n	80027ae <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d12b      	bne.n	80027ae <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002766:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d11f      	bne.n	80027ae <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002772:	f043 0201 	orr.w	r2, r3, #1
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	655a      	str	r2, [r3, #84]	@ 0x54
 800277a:	e018      	b.n	80027ae <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d111      	bne.n	80027ae <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d105      	bne.n	80027ae <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a6:	f043 0201 	orr.w	r2, r3, #1
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f7ff fb40 	bl	8001e34 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027b4:	e00e      	b.n	80027d4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f7ff fb54 	bl	8001e70 <HAL_ADC_ErrorCallback>
}
 80027c8:	e004      	b.n	80027d4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	4798      	blx	r3
}
 80027d4:	bf00      	nop
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f7ff fb2c 	bl	8001e48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002804:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800280a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002816:	f043 0204 	orr.w	r2, r3, #4
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f7ff fb26 	bl	8001e70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a0:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028ac:	4013      	ands	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c2:	4a04      	ldr	r2, [pc, #16]	@ (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b04      	ldr	r3, [pc, #16]	@ (80028f0 <__NVIC_GetPriorityGrouping+0x18>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 0307 	and.w	r3, r3, #7
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	db0b      	blt.n	800291e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	4907      	ldr	r1, [pc, #28]	@ (800292c <__NVIC_EnableIRQ+0x38>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2001      	movs	r0, #1
 8002916:	fa00 f202 	lsl.w	r2, r0, r2
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000e100 	.word	0xe000e100

08002930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	2b00      	cmp	r3, #0
 8002942:	db0a      	blt.n	800295a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	490c      	ldr	r1, [pc, #48]	@ (800297c <__NVIC_SetPriority+0x4c>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	0112      	lsls	r2, r2, #4
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	440b      	add	r3, r1
 8002954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002958:	e00a      	b.n	8002970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4908      	ldr	r1, [pc, #32]	@ (8002980 <__NVIC_SetPriority+0x50>)
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	3b04      	subs	r3, #4
 8002968:	0112      	lsls	r2, r2, #4
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	440b      	add	r3, r1
 800296e:	761a      	strb	r2, [r3, #24]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000e100 	.word	0xe000e100
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	@ 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f1c3 0307 	rsb	r3, r3, #7
 800299e:	2b04      	cmp	r3, #4
 80029a0:	bf28      	it	cs
 80029a2:	2304      	movcs	r3, #4
 80029a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d902      	bls.n	80029b4 <NVIC_EncodePriority+0x30>
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3b03      	subs	r3, #3
 80029b2:	e000      	b.n	80029b6 <NVIC_EncodePriority+0x32>
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43da      	mvns	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	401a      	ands	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43d9      	mvns	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	4313      	orrs	r3, r2
         );
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3724      	adds	r7, #36	@ 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff ff4c 	bl	8002890 <__NVIC_SetPriorityGrouping>
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a0e:	f7ff ff63 	bl	80028d8 <__NVIC_GetPriorityGrouping>
 8002a12:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	6978      	ldr	r0, [r7, #20]
 8002a1a:	f7ff ffb3 	bl	8002984 <NVIC_EncodePriority>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ff82 	bl	8002930 <__NVIC_SetPriority>
}
 8002a2c:	bf00      	nop
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ff56 	bl	80028f4 <__NVIC_EnableIRQ>
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e08e      	b.n	8002b80 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b47      	ldr	r3, [pc, #284]	@ (8002b88 <HAL_DMA_Init+0x138>)
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d80f      	bhi.n	8002a8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	4b45      	ldr	r3, [pc, #276]	@ (8002b8c <HAL_DMA_Init+0x13c>)
 8002a76:	4413      	add	r3, r2
 8002a78:	4a45      	ldr	r2, [pc, #276]	@ (8002b90 <HAL_DMA_Init+0x140>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	009a      	lsls	r2, r3, #2
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a42      	ldr	r2, [pc, #264]	@ (8002b94 <HAL_DMA_Init+0x144>)
 8002a8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a8c:	e00e      	b.n	8002aac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	4b40      	ldr	r3, [pc, #256]	@ (8002b98 <HAL_DMA_Init+0x148>)
 8002a96:	4413      	add	r3, r2
 8002a98:	4a3d      	ldr	r2, [pc, #244]	@ (8002b90 <HAL_DMA_Init+0x140>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	009a      	lsls	r2, r3, #2
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a3c      	ldr	r2, [pc, #240]	@ (8002b9c <HAL_DMA_Init+0x14c>)
 8002aaa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ac6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f9b6 	bl	8002e70 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b0c:	d102      	bne.n	8002b14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b1c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002b20:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b2a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d010      	beq.n	8002b56 <HAL_DMA_Init+0x106>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d80c      	bhi.n	8002b56 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f9d5 	bl	8002eec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	e008      	b.n	8002b68 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40020407 	.word	0x40020407
 8002b8c:	bffdfff8 	.word	0xbffdfff8
 8002b90:	cccccccd 	.word	0xcccccccd
 8002b94:	40020000 	.word	0x40020000
 8002b98:	bffdfbf8 	.word	0xbffdfbf8
 8002b9c:	40020400 	.word	0x40020400

08002ba0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_DMA_Start_IT+0x20>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e066      	b.n	8002c8e <HAL_DMA_Start_IT+0xee>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d155      	bne.n	8002c80 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	68b9      	ldr	r1, [r7, #8]
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f8fb 	bl	8002df4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 020e 	orr.w	r2, r2, #14
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e00f      	b.n	8002c38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0204 	bic.w	r2, r2, #4
 8002c26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 020a 	orr.w	r2, r2, #10
 8002c36:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c54:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0201 	orr.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	e005      	b.n	8002c8c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	f003 031c 	and.w	r3, r3, #28
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d026      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x7a>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d021      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d107      	bne.n	8002cea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0204 	bic.w	r2, r2, #4
 8002ce8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	f003 021c 	and.w	r2, r3, #28
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	2104      	movs	r1, #4
 8002cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d071      	beq.n	8002dea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002d0e:	e06c      	b.n	8002dea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d14:	f003 031c 	and.w	r3, r3, #28
 8002d18:	2202      	movs	r2, #2
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d02e      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xec>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d029      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10b      	bne.n	8002d54 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 020a 	bic.w	r2, r2, #10
 8002d4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d58:	f003 021c 	and.w	r2, r3, #28
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	2102      	movs	r1, #2
 8002d62:	fa01 f202 	lsl.w	r2, r1, r2
 8002d66:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d038      	beq.n	8002dea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002d80:	e033      	b.n	8002dea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	f003 031c 	and.w	r3, r3, #28
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d02a      	beq.n	8002dec <HAL_DMA_IRQHandler+0x156>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d025      	beq.n	8002dec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 020e 	bic.w	r2, r2, #14
 8002dae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db4:	f003 021c 	and.w	r2, r3, #28
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d004      	beq.n	8002dec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002dea:	bf00      	nop
 8002dec:	bf00      	nop
}
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e0a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d004      	beq.n	8002e1e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e1c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e22:	f003 021c 	and.w	r2, r3, #28
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d108      	bne.n	8002e54 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e52:	e007      	b.n	8002e64 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	60da      	str	r2, [r3, #12]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b17      	ldr	r3, [pc, #92]	@ (8002edc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d80a      	bhi.n	8002e9a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e88:	089b      	lsrs	r3, r3, #2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e90:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6493      	str	r3, [r2, #72]	@ 0x48
 8002e98:	e007      	b.n	8002eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	009a      	lsls	r2, r3, #2
 8002ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002ea4:	4413      	add	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	3b08      	subs	r3, #8
 8002eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002ec0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	2201      	movs	r2, #1
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	40020407 	.word	0x40020407
 8002ee0:	4002081c 	.word	0x4002081c
 8002ee4:	cccccccd 	.word	0xcccccccd
 8002ee8:	40020880 	.word	0x40020880

08002eec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002efc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4b0b      	ldr	r3, [pc, #44]	@ (8002f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	461a      	mov	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a09      	ldr	r2, [pc, #36]	@ (8002f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002f10:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002f22:	bf00      	nop
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	1000823f 	.word	0x1000823f
 8002f34:	40020940 	.word	0x40020940

08002f38 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f46:	e14c      	b.n	80031e2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	4013      	ands	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 813e 	beq.w	80031dc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d005      	beq.n	8002f78 <HAL_GPIO_Init+0x40>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d130      	bne.n	8002fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	2203      	movs	r2, #3
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fae:	2201      	movs	r2, #1
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	f003 0201 	and.w	r2, r3, #1
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d017      	beq.n	8003016 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d123      	bne.n	800306a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	08da      	lsrs	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3208      	adds	r2, #8
 800302a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800302e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	220f      	movs	r2, #15
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	08da      	lsrs	r2, r3, #3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3208      	adds	r2, #8
 8003064:	6939      	ldr	r1, [r7, #16]
 8003066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	2203      	movs	r2, #3
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0203 	and.w	r2, r3, #3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 8098 	beq.w	80031dc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80030ac:	4a54      	ldr	r2, [pc, #336]	@ (8003200 <HAL_GPIO_Init+0x2c8>)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	089b      	lsrs	r3, r3, #2
 80030b2:	3302      	adds	r3, #2
 80030b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	220f      	movs	r2, #15
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030d6:	d019      	beq.n	800310c <HAL_GPIO_Init+0x1d4>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a4a      	ldr	r2, [pc, #296]	@ (8003204 <HAL_GPIO_Init+0x2cc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d013      	beq.n	8003108 <HAL_GPIO_Init+0x1d0>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a49      	ldr	r2, [pc, #292]	@ (8003208 <HAL_GPIO_Init+0x2d0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00d      	beq.n	8003104 <HAL_GPIO_Init+0x1cc>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a48      	ldr	r2, [pc, #288]	@ (800320c <HAL_GPIO_Init+0x2d4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d007      	beq.n	8003100 <HAL_GPIO_Init+0x1c8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a47      	ldr	r2, [pc, #284]	@ (8003210 <HAL_GPIO_Init+0x2d8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d101      	bne.n	80030fc <HAL_GPIO_Init+0x1c4>
 80030f8:	2304      	movs	r3, #4
 80030fa:	e008      	b.n	800310e <HAL_GPIO_Init+0x1d6>
 80030fc:	2307      	movs	r3, #7
 80030fe:	e006      	b.n	800310e <HAL_GPIO_Init+0x1d6>
 8003100:	2303      	movs	r3, #3
 8003102:	e004      	b.n	800310e <HAL_GPIO_Init+0x1d6>
 8003104:	2302      	movs	r3, #2
 8003106:	e002      	b.n	800310e <HAL_GPIO_Init+0x1d6>
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <HAL_GPIO_Init+0x1d6>
 800310c:	2300      	movs	r3, #0
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	f002 0203 	and.w	r2, r2, #3
 8003114:	0092      	lsls	r2, r2, #2
 8003116:	4093      	lsls	r3, r2
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800311e:	4938      	ldr	r1, [pc, #224]	@ (8003200 <HAL_GPIO_Init+0x2c8>)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	3302      	adds	r3, #2
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800312c:	4b39      	ldr	r3, [pc, #228]	@ (8003214 <HAL_GPIO_Init+0x2dc>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	43db      	mvns	r3, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003150:	4a30      	ldr	r2, [pc, #192]	@ (8003214 <HAL_GPIO_Init+0x2dc>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003156:	4b2f      	ldr	r3, [pc, #188]	@ (8003214 <HAL_GPIO_Init+0x2dc>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	43db      	mvns	r3, r3
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4013      	ands	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800317a:	4a26      	ldr	r2, [pc, #152]	@ (8003214 <HAL_GPIO_Init+0x2dc>)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003180:	4b24      	ldr	r3, [pc, #144]	@ (8003214 <HAL_GPIO_Init+0x2dc>)
 8003182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	43db      	mvns	r3, r3
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4013      	ands	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003214 <HAL_GPIO_Init+0x2dc>)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80031ae:	4b19      	ldr	r3, [pc, #100]	@ (8003214 <HAL_GPIO_Init+0x2dc>)
 80031b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003214 <HAL_GPIO_Init+0x2dc>)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	3301      	adds	r3, #1
 80031e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f47f aeab 	bne.w	8002f48 <HAL_GPIO_Init+0x10>
  }
}
 80031f2:	bf00      	nop
 80031f4:	bf00      	nop
 80031f6:	371c      	adds	r7, #28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	40010000 	.word	0x40010000
 8003204:	48000400 	.word	0x48000400
 8003208:	48000800 	.word	0x48000800
 800320c:	48000c00 	.word	0x48000c00
 8003210:	48001000 	.word	0x48001000
 8003214:	58000800 	.word	0x58000800

08003218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	807b      	strh	r3, [r7, #2]
 8003224:	4613      	mov	r3, r2
 8003226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003228:	787b      	ldrb	r3, [r7, #1]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003234:	e002      	b.n	800323c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003236:	887a      	ldrh	r2, [r7, #2]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4013      	ands	r3, r2
 8003260:	041a      	lsls	r2, r3, #16
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	43d9      	mvns	r1, r3
 8003266:	887b      	ldrh	r3, [r7, #2]
 8003268:	400b      	ands	r3, r1
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	619a      	str	r2, [r3, #24]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e08d      	b.n	80033aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7fd fd82 	bl	8000dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2224      	movs	r2, #36	@ 0x24
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d107      	bne.n	80032f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	e006      	b.n	8003304 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003302:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d108      	bne.n	800331e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	e007      	b.n	800332e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800332c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800333c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003340:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003350:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69d9      	ldr	r1, [r3, #28]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1a      	ldr	r2, [r3, #32]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d138      	bne.n	800343a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e032      	b.n	800343c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2224      	movs	r2, #36	@ 0x24
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003404:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	e000      	b.n	800343c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800343a:	2302      	movs	r3, #2
  }
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b20      	cmp	r3, #32
 800345c:	d139      	bne.n	80034d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003468:	2302      	movs	r3, #2
 800346a:	e033      	b.n	80034d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2224      	movs	r2, #36	@ 0x24
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800349a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e000      	b.n	80034d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
  }
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0c0      	b.n	8003674 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f00d f8b6 	bl	8010678 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2203      	movs	r2, #3
 8003510:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f004 fd28 	bl	8007f6e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800351e:	2300      	movs	r3, #0
 8003520:	73fb      	strb	r3, [r7, #15]
 8003522:	e03e      	b.n	80035a2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	440b      	add	r3, r1
 8003532:	3311      	adds	r3, #17
 8003534:	2201      	movs	r2, #1
 8003536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	440b      	add	r3, r1
 8003546:	3310      	adds	r3, #16
 8003548:	7bfa      	ldrb	r2, [r7, #15]
 800354a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800354c:	7bfa      	ldrb	r2, [r7, #15]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	440b      	add	r3, r1
 800355a:	3313      	adds	r3, #19
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003560:	7bfa      	ldrb	r2, [r7, #15]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	440b      	add	r3, r1
 800356e:	3320      	adds	r3, #32
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003574:	7bfa      	ldrb	r2, [r7, #15]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	440b      	add	r3, r1
 8003582:	3324      	adds	r3, #36	@ 0x24
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	440b      	add	r3, r1
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	3301      	adds	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	791b      	ldrb	r3, [r3, #4]
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d3bb      	bcc.n	8003524 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ac:	2300      	movs	r3, #0
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	e044      	b.n	800363c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035b2:	7bfa      	ldrb	r2, [r7, #15]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	440b      	add	r3, r1
 80035c0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035c8:	7bfa      	ldrb	r2, [r7, #15]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	440b      	add	r3, r1
 80035d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035da:	7bfa      	ldrb	r2, [r7, #15]
 80035dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035de:	7bfa      	ldrb	r2, [r7, #15]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	440b      	add	r3, r1
 80035ec:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	440b      	add	r3, r1
 8003602:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	440b      	add	r3, r1
 8003618:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	440b      	add	r3, r1
 800362e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	3301      	adds	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	791b      	ldrb	r3, [r3, #4]
 8003640:	7bfa      	ldrb	r2, [r7, #15]
 8003642:	429a      	cmp	r2, r3
 8003644:	d3b5      	bcc.n	80035b2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003652:	f004 fca7 	bl	8007fa4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7a9b      	ldrb	r3, [r3, #10]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d102      	bne.n	8003672 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f001 fc40 	bl	8004ef2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_PCD_Start+0x16>
 800368e:	2302      	movs	r3, #2
 8003690:	e012      	b.n	80036b8 <HAL_PCD_Start+0x3c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f004 fc4e 	bl	8007f40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f006 ff0e 	bl	800a4ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f006 ff13 	bl	800a4f8 <USB_ReadInterrupts>
 80036d2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fb04 	bl	8003cec <PCD_EP_ISR_Handler>

    return;
 80036e4:	e110      	b.n	8003908 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d013      	beq.n	8003718 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003702:	b292      	uxth	r2, r2
 8003704:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f00d f842 	bl	8010792 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800370e:	2100      	movs	r1, #0
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f8fc 	bl	800390e <HAL_PCD_SetAddress>

    return;
 8003716:	e0f7      	b.n	8003908 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00c      	beq.n	800373c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003734:	b292      	uxth	r2, r2
 8003736:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800373a:	e0e5      	b.n	8003908 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00c      	beq.n	8003760 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800374e:	b29a      	uxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003758:	b292      	uxth	r2, r2
 800375a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800375e:	e0d3      	b.n	8003908 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d034      	beq.n	80037d4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003772:	b29a      	uxth	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0204 	bic.w	r2, r2, #4
 800377c:	b292      	uxth	r2, r2
 800377e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0208 	bic.w	r2, r2, #8
 8003794:	b292      	uxth	r2, r2
 8003796:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d107      	bne.n	80037b4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037ac:	2100      	movs	r1, #0
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f00d f9e4 	bl	8010b7c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f00d f825 	bl	8010804 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037cc:	b292      	uxth	r2, r2
 80037ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80037d2:	e099      	b.n	8003908 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d027      	beq.n	800382e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0208 	orr.w	r2, r2, #8
 80037f0:	b292      	uxth	r2, r2
 80037f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003808:	b292      	uxth	r2, r2
 800380a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003816:	b29a      	uxth	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0204 	orr.w	r2, r2, #4
 8003820:	b292      	uxth	r2, r2
 8003822:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f00c ffd2 	bl	80107d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800382c:	e06c      	b.n	8003908 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003834:	2b00      	cmp	r3, #0
 8003836:	d040      	beq.n	80038ba <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003840:	b29a      	uxth	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800384a:	b292      	uxth	r2, r2
 800384c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d12b      	bne.n	80038b2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0204 	orr.w	r2, r2, #4
 800386c:	b292      	uxth	r2, r2
 800386e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800387a:	b29a      	uxth	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0208 	orr.w	r2, r2, #8
 8003884:	b292      	uxth	r2, r2
 8003886:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800389a:	b29b      	uxth	r3, r3
 800389c:	089b      	lsrs	r3, r3, #2
 800389e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80038a8:	2101      	movs	r1, #1
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f00d f966 	bl	8010b7c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80038b0:	e02a      	b.n	8003908 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f00c ff8c 	bl	80107d0 <HAL_PCD_SuspendCallback>
    return;
 80038b8:	e026      	b.n	8003908 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00f      	beq.n	80038e4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038d6:	b292      	uxth	r2, r2
 80038d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f00c ff4a 	bl	8010776 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038e2:	e011      	b.n	8003908 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00c      	beq.n	8003908 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003900:	b292      	uxth	r2, r2
 8003902:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003906:	bf00      	nop
  }
}
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	460b      	mov	r3, r1
 8003918:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_PCD_SetAddress+0x1a>
 8003924:	2302      	movs	r3, #2
 8003926:	e012      	b.n	800394e <HAL_PCD_SetAddress+0x40>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	4611      	mov	r1, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f006 fdaf 	bl	800a4a2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	4608      	mov	r0, r1
 8003960:	4611      	mov	r1, r2
 8003962:	461a      	mov	r2, r3
 8003964:	4603      	mov	r3, r0
 8003966:	70fb      	strb	r3, [r7, #3]
 8003968:	460b      	mov	r3, r1
 800396a:	803b      	strh	r3, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003978:	2b00      	cmp	r3, #0
 800397a:	da0e      	bge.n	800399a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	f003 0207 	and.w	r2, r3, #7
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	3310      	adds	r3, #16
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	4413      	add	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	705a      	strb	r2, [r3, #1]
 8003998:	e00e      	b.n	80039b8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	f003 0207 	and.w	r2, r3, #7
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	4413      	add	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039c4:	883a      	ldrh	r2, [r7, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	78ba      	ldrb	r2, [r7, #2]
 80039ce:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039d0:	78bb      	ldrb	r3, [r7, #2]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d102      	bne.n	80039dc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_PCD_EP_Open+0x94>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e00e      	b.n	8003a08 <HAL_PCD_EP_Open+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68f9      	ldr	r1, [r7, #12]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f004 faf1 	bl	8007fe0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003a06:	7afb      	ldrb	r3, [r7, #11]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	da0e      	bge.n	8003a42 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	f003 0207 	and.w	r2, r3, #7
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	3310      	adds	r3, #16
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4413      	add	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	705a      	strb	r2, [r3, #1]
 8003a40:	e00e      	b.n	8003a60 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	f003 0207 	and.w	r2, r3, #7
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	4413      	add	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_PCD_EP_Close+0x6a>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e00e      	b.n	8003a98 <HAL_PCD_EP_Close+0x88>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68f9      	ldr	r1, [r7, #12]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f004 fe6d 	bl	8008768 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	460b      	mov	r3, r1
 8003aae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab0:	7afb      	ldrb	r3, [r7, #11]
 8003ab2:	f003 0207 	and.w	r2, r3, #7
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ae0:	7afb      	ldrb	r3, [r7, #11]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6979      	ldr	r1, [r7, #20]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f005 f825 	bl	8008b42 <USB_EPStartXfer>

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	f003 0207 	and.w	r2, r3, #7
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	440b      	add	r3, r1
 8003b20:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003b24:	681b      	ldr	r3, [r3, #0]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b086      	sub	sp, #24
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b42:	7afb      	ldrb	r3, [r7, #11]
 8003b44:	f003 0207 	and.w	r2, r3, #7
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	3310      	adds	r3, #16
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2200      	movs	r2, #0
 8003b76:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b7e:	7afb      	ldrb	r3, [r7, #11]
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6979      	ldr	r1, [r7, #20]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f004 ffd6 	bl	8008b42 <USB_EPStartXfer>

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	7912      	ldrb	r2, [r2, #4]
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e03e      	b.n	8003c3c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	da0e      	bge.n	8003be4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	f003 0207 	and.w	r2, r3, #7
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	3310      	adds	r3, #16
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	705a      	strb	r2, [r3, #1]
 8003be2:	e00c      	b.n	8003bfe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2201      	movs	r2, #1
 8003c02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_PCD_EP_SetStall+0x7e>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e00e      	b.n	8003c3c <HAL_PCD_EP_SetStall+0x9c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68f9      	ldr	r1, [r7, #12]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f006 fb39 	bl	800a2a4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	7912      	ldrb	r2, [r2, #4]
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e040      	b.n	8003ce4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	da0e      	bge.n	8003c88 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c6a:	78fb      	ldrb	r3, [r7, #3]
 8003c6c:	f003 0207 	and.w	r2, r3, #7
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	3310      	adds	r3, #16
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	705a      	strb	r2, [r3, #1]
 8003c86:	e00e      	b.n	8003ca6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	f003 0207 	and.w	r2, r3, #7
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cac:	78fb      	ldrb	r3, [r7, #3]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_PCD_EP_ClrStall+0x82>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e00e      	b.n	8003ce4 <HAL_PCD_EP_ClrStall+0xa0>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68f9      	ldr	r1, [r7, #12]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f006 fb36 	bl	800a346 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b096      	sub	sp, #88	@ 0x58
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cf4:	e3ad      	b.n	8004452 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cfe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003d10:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f040 816f 	bne.w	8003ff8 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d14c      	bne.n	8003dc0 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d36:	81fb      	strh	r3, [r7, #14]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	89fb      	ldrh	r3, [r7, #14]
 8003d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3310      	adds	r3, #16
 8003d4e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6812      	ldr	r2, [r2, #0]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d76:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	441a      	add	r2, r3
 8003d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d84:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d86:	2100      	movs	r1, #0
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f00c fcda 	bl	8010742 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	7b1b      	ldrb	r3, [r3, #12]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 835c 	beq.w	8004452 <PCD_EP_ISR_Handler+0x766>
 8003d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f040 8357 	bne.w	8004452 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	7b1b      	ldrb	r3, [r3, #12]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	731a      	strb	r2, [r3, #12]
 8003dbe:	e348      	b.n	8004452 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003dc6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003dd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003dd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d032      	beq.n	8003e44 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	4413      	add	r3, r2
 8003df8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e04:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e12:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e16:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f006 fbc0 	bl	800a59e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	823b      	strh	r3, [r7, #16]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	8a3a      	ldrh	r2, [r7, #16]
 8003e34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e38:	b292      	uxth	r2, r2
 8003e3a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f00c fc53 	bl	80106e8 <HAL_PCD_SetupStageCallback>
 8003e42:	e306      	b.n	8004452 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e44:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f280 8302 	bge.w	8004452 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	83fb      	strh	r3, [r7, #30]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	8bfa      	ldrh	r2, [r7, #30]
 8003e64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e68:	b292      	uxth	r2, r2
 8003e6a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4413      	add	r3, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	4413      	add	r3, r2
 8003e86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e92:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d019      	beq.n	8003ed0 <PCD_EP_ISR_Handler+0x1e4>
 8003e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d015      	beq.n	8003ed0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eaa:	6959      	ldr	r1, [r3, #20]
 8003eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	f006 fb72 	bl	800a59e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ebc:	695a      	ldr	r2, [r3, #20]
 8003ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	441a      	add	r2, r3
 8003ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ec8:	2100      	movs	r1, #0
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f00c fc1e 	bl	801070c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003eda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ede:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f040 82b5 	bne.w	8004452 <PCD_EP_ISR_Handler+0x766>
 8003ee8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003eec:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003ef0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ef4:	f000 82ad 	beq.w	8004452 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	801a      	strh	r2, [r3, #0]
 8003f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f2e:	d91d      	bls.n	8003f6c <PCD_EP_ISR_Handler+0x280>
 8003f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <PCD_EP_ISR_Handler+0x25e>
 8003f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f46:	3b01      	subs	r3, #1
 8003f48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	029b      	lsls	r3, r3, #10
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	801a      	strh	r2, [r3, #0]
 8003f6a:	e026      	b.n	8003fba <PCD_EP_ISR_Handler+0x2ce>
 8003f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <PCD_EP_ISR_Handler+0x29e>
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	801a      	strh	r2, [r3, #0]
 8003f88:	e017      	b.n	8003fba <PCD_EP_ISR_Handler+0x2ce>
 8003f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <PCD_EP_ISR_Handler+0x2b8>
 8003f9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	029b      	lsls	r3, r3, #10
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fca:	827b      	strh	r3, [r7, #18]
 8003fcc:	8a7b      	ldrh	r3, [r7, #18]
 8003fce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003fd2:	827b      	strh	r3, [r7, #18]
 8003fd4:	8a7b      	ldrh	r3, [r7, #18]
 8003fd6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fda:	827b      	strh	r3, [r7, #18]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	8a7b      	ldrh	r3, [r7, #18]
 8003fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	8013      	strh	r3, [r2, #0]
 8003ff6:	e22c      	b.n	8004452 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800400c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004010:	2b00      	cmp	r3, #0
 8004012:	f280 80f6 	bge.w	8004202 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	b29a      	uxth	r2, r3
 8004028:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800402c:	4013      	ands	r3, r2
 800402e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004044:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004048:	b292      	uxth	r2, r2
 800404a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800404c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	4413      	add	r3, r2
 8004060:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004064:	7b1b      	ldrb	r3, [r3, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d123      	bne.n	80040b2 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004072:	b29b      	uxth	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4413      	add	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	4413      	add	r3, r2
 8004084:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800408e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004092:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 808e 	beq.w	80041b8 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a2:	6959      	ldr	r1, [r3, #20]
 80040a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a6:	88da      	ldrh	r2, [r3, #6]
 80040a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040ac:	f006 fa77 	bl	800a59e <USB_ReadPMA>
 80040b0:	e082      	b.n	80041b8 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80040b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b4:	78db      	ldrb	r3, [r3, #3]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d10a      	bne.n	80040d0 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80040ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80040be:	461a      	mov	r2, r3
 80040c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f9d3 	bl	800446e <HAL_PCD_EP_DB_Receive>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80040ce:	e073      	b.n	80041b8 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ea:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	441a      	add	r2, r3
 80040fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800410c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004110:	b29b      	uxth	r3, r3
 8004112:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	b29b      	uxth	r3, r3
 8004126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d022      	beq.n	8004174 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004136:	b29b      	uxth	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	4413      	add	r3, r2
 8004148:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004152:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004156:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800415a:	2b00      	cmp	r3, #0
 800415c:	d02c      	beq.n	80041b8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004164:	6959      	ldr	r1, [r3, #20]
 8004166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004168:	891a      	ldrh	r2, [r3, #8]
 800416a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800416e:	f006 fa16 	bl	800a59e <USB_ReadPMA>
 8004172:	e021      	b.n	80041b8 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800417c:	b29b      	uxth	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4413      	add	r3, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	4413      	add	r3, r2
 800418e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004198:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800419c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041aa:	6959      	ldr	r1, [r3, #20]
 80041ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ae:	895a      	ldrh	r2, [r3, #10]
 80041b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041b4:	f006 f9f3 	bl	800a59e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80041b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041c0:	441a      	add	r2, r3
 80041c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80041c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c8:	695a      	ldr	r2, [r3, #20]
 80041ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041ce:	441a      	add	r2, r3
 80041d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80041d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <PCD_EP_ISR_Handler+0x4fc>
 80041dc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80041e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d206      	bcs.n	80041f6 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80041e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	4619      	mov	r1, r3
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f00c fa8c 	bl	801070c <HAL_PCD_DataOutStageCallback>
 80041f4:	e005      	b.n	8004202 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041fc:	4618      	mov	r0, r3
 80041fe:	f004 fca0 	bl	8008b42 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004202:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 8121 	beq.w	8004452 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8004210:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	3310      	adds	r3, #16
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	4413      	add	r3, r2
 8004222:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800423a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800423e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	441a      	add	r2, r3
 8004250:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800425c:	b29b      	uxth	r3, r3
 800425e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004262:	78db      	ldrb	r3, [r3, #3]
 8004264:	2b01      	cmp	r3, #1
 8004266:	f040 80a2 	bne.w	80043ae <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800426a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426c:	2200      	movs	r2, #0
 800426e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004272:	7b1b      	ldrb	r3, [r3, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8093 	beq.w	80043a0 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800427a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800427e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d046      	beq.n	8004314 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004288:	785b      	ldrb	r3, [r3, #1]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d126      	bne.n	80042dc <PCD_EP_ISR_Handler+0x5f0>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	627b      	str	r3, [r7, #36]	@ 0x24
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800429c:	b29b      	uxth	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	4413      	add	r3, r2
 80042a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	00da      	lsls	r2, r3, #3
 80042ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ae:	4413      	add	r3, r2
 80042b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80042b4:	623b      	str	r3, [r7, #32]
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	801a      	strh	r2, [r3, #0]
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	801a      	strh	r2, [r3, #0]
 80042da:	e061      	b.n	80043a0 <PCD_EP_ISR_Handler+0x6b4>
 80042dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042de:	785b      	ldrb	r3, [r3, #1]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d15d      	bne.n	80043a0 <PCD_EP_ISR_Handler+0x6b4>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f8:	4413      	add	r3, r2
 80042fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	00da      	lsls	r2, r3, #3
 8004302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004304:	4413      	add	r3, r2
 8004306:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800430a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800430c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430e:	2200      	movs	r2, #0
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	e045      	b.n	80043a0 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800431a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431c:	785b      	ldrb	r3, [r3, #1]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d126      	bne.n	8004370 <PCD_EP_ISR_Handler+0x684>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	637b      	str	r3, [r7, #52]	@ 0x34
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004330:	b29b      	uxth	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004336:	4413      	add	r3, r2
 8004338:	637b      	str	r3, [r7, #52]	@ 0x34
 800433a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	00da      	lsls	r2, r3, #3
 8004340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004342:	4413      	add	r3, r2
 8004344:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004348:	633b      	str	r3, [r7, #48]	@ 0x30
 800434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004354:	b29a      	uxth	r2, r3
 8004356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004358:	801a      	strh	r2, [r3, #0]
 800435a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004368:	b29a      	uxth	r2, r3
 800436a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436c:	801a      	strh	r2, [r3, #0]
 800436e:	e017      	b.n	80043a0 <PCD_EP_ISR_Handler+0x6b4>
 8004370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004372:	785b      	ldrb	r3, [r3, #1]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d113      	bne.n	80043a0 <PCD_EP_ISR_Handler+0x6b4>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004380:	b29b      	uxth	r3, r3
 8004382:	461a      	mov	r2, r3
 8004384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004386:	4413      	add	r3, r2
 8004388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800438a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	00da      	lsls	r2, r3, #3
 8004390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004392:	4413      	add	r3, r2
 8004394:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004398:	63bb      	str	r3, [r7, #56]	@ 0x38
 800439a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439c:	2200      	movs	r2, #0
 800439e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	4619      	mov	r1, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f00c f9cb 	bl	8010742 <HAL_PCD_DataInStageCallback>
 80043ac:	e051      	b.n	8004452 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80043ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d144      	bne.n	8004444 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	4413      	add	r3, r2
 80043d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80043e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d907      	bls.n	80043fe <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80043ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043f6:	1ad2      	subs	r2, r2, r3
 80043f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043fa:	619a      	str	r2, [r3, #24]
 80043fc:	e002      	b.n	8004404 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80043fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004400:	2200      	movs	r2, #0
 8004402:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d106      	bne.n	800441a <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800440c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	4619      	mov	r1, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f00c f995 	bl	8010742 <HAL_PCD_DataInStageCallback>
 8004418:	e01b      	b.n	8004452 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800441a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004422:	441a      	add	r2, r3
 8004424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004426:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004430:	441a      	add	r2, r3
 8004432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004434:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800443c:	4618      	mov	r0, r3
 800443e:	f004 fb80 	bl	8008b42 <USB_EPStartXfer>
 8004442:	e006      	b.n	8004452 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004444:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004448:	461a      	mov	r2, r3
 800444a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f917 	bl	8004680 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800445a:	b29b      	uxth	r3, r3
 800445c:	b21b      	sxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	f6ff ac49 	blt.w	8003cf6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3758      	adds	r7, #88	@ 0x58
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b088      	sub	sp, #32
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	4613      	mov	r3, r2
 800447a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d07c      	beq.n	8004580 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800448e:	b29b      	uxth	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4413      	add	r3, r2
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	4413      	add	r3, r2
 80044a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044aa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	699a      	ldr	r2, [r3, #24]
 80044b0:	8b7b      	ldrh	r3, [r7, #26]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d306      	bcc.n	80044c4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	8b7b      	ldrh	r3, [r7, #26]
 80044bc:	1ad2      	subs	r2, r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	619a      	str	r2, [r3, #24]
 80044c2:	e002      	b.n	80044ca <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2200      	movs	r2, #0
 80044c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d123      	bne.n	800451a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ec:	833b      	strh	r3, [r7, #24]
 80044ee:	8b3b      	ldrh	r3, [r7, #24]
 80044f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044f4:	833b      	strh	r3, [r7, #24]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	441a      	add	r2, r3
 8004504:	8b3b      	ldrh	r3, [r7, #24]
 8004506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800450a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800450e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004516:	b29b      	uxth	r3, r3
 8004518:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01f      	beq.n	8004564 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	b29b      	uxth	r3, r3
 8004536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800453a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453e:	82fb      	strh	r3, [r7, #22]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	441a      	add	r2, r3
 800454e:	8afb      	ldrh	r3, [r7, #22]
 8004550:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004554:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004558:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800455c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004560:	b29b      	uxth	r3, r3
 8004562:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004564:	8b7b      	ldrh	r3, [r7, #26]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8085 	beq.w	8004676 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	6959      	ldr	r1, [r3, #20]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	891a      	ldrh	r2, [r3, #8]
 8004578:	8b7b      	ldrh	r3, [r7, #26]
 800457a:	f006 f810 	bl	800a59e <USB_ReadPMA>
 800457e:	e07a      	b.n	8004676 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004588:	b29b      	uxth	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	4413      	add	r3, r2
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	4413      	add	r3, r2
 800459a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045a4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	8b7b      	ldrh	r3, [r7, #26]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d306      	bcc.n	80045be <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	699a      	ldr	r2, [r3, #24]
 80045b4:	8b7b      	ldrh	r3, [r7, #26]
 80045b6:	1ad2      	subs	r2, r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	619a      	str	r2, [r3, #24]
 80045bc:	e002      	b.n	80045c4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2200      	movs	r2, #0
 80045c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d123      	bne.n	8004614 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e6:	83fb      	strh	r3, [r7, #30]
 80045e8:	8bfb      	ldrh	r3, [r7, #30]
 80045ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045ee:	83fb      	strh	r3, [r7, #30]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	441a      	add	r2, r3
 80045fe:	8bfb      	ldrh	r3, [r7, #30]
 8004600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800460c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004610:	b29b      	uxth	r3, r3
 8004612:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	d11f      	bne.n	800465e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	b29b      	uxth	r3, r3
 8004630:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004638:	83bb      	strh	r3, [r7, #28]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	441a      	add	r2, r3
 8004648:	8bbb      	ldrh	r3, [r7, #28]
 800464a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800464e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004656:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800465a:	b29b      	uxth	r3, r3
 800465c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800465e:	8b7b      	ldrh	r3, [r7, #26]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d008      	beq.n	8004676 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6818      	ldr	r0, [r3, #0]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	6959      	ldr	r1, [r3, #20]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	895a      	ldrh	r2, [r3, #10]
 8004670:	8b7b      	ldrh	r3, [r7, #26]
 8004672:	f005 ff94 	bl	800a59e <USB_ReadPMA>
    }
  }

  return count;
 8004676:	8b7b      	ldrh	r3, [r7, #26]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3720      	adds	r7, #32
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b0a4      	sub	sp, #144	@ 0x90
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	4613      	mov	r3, r2
 800468c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 81db 	beq.w	8004a50 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	4413      	add	r3, r2
 80046b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046be:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d907      	bls.n	80046de <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046d6:	1ad2      	subs	r2, r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	619a      	str	r2, [r3, #24]
 80046dc:	e002      	b.n	80046e4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2200      	movs	r2, #0
 80046e2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f040 80b9 	bne.w	8004860 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	785b      	ldrb	r3, [r3, #1]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d126      	bne.n	8004744 <HAL_PCD_EP_DB_Transmit+0xc4>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004704:	b29b      	uxth	r3, r3
 8004706:	461a      	mov	r2, r3
 8004708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470a:	4413      	add	r3, r2
 800470c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	00da      	lsls	r2, r3, #3
 8004714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004716:	4413      	add	r3, r2
 8004718:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800471c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800471e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004728:	b29a      	uxth	r2, r3
 800472a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472c:	801a      	strh	r2, [r3, #0]
 800472e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b29b      	uxth	r3, r3
 8004734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800473c:	b29a      	uxth	r2, r3
 800473e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004740:	801a      	strh	r2, [r3, #0]
 8004742:	e01a      	b.n	800477a <HAL_PCD_EP_DB_Transmit+0xfa>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	785b      	ldrb	r3, [r3, #1]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d116      	bne.n	800477a <HAL_PCD_EP_DB_Transmit+0xfa>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	637b      	str	r3, [r7, #52]	@ 0x34
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800475a:	b29b      	uxth	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004760:	4413      	add	r3, r2
 8004762:	637b      	str	r3, [r7, #52]	@ 0x34
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	00da      	lsls	r2, r3, #3
 800476a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800476c:	4413      	add	r3, r2
 800476e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004772:	633b      	str	r3, [r7, #48]	@ 0x30
 8004774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004776:	2200      	movs	r2, #0
 8004778:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d126      	bne.n	80047d6 <HAL_PCD_EP_DB_Transmit+0x156>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004796:	b29b      	uxth	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	4413      	add	r3, r2
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	00da      	lsls	r2, r3, #3
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80047ae:	61bb      	str	r3, [r7, #24]
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	801a      	strh	r2, [r3, #0]
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	801a      	strh	r2, [r3, #0]
 80047d4:	e017      	b.n	8004806 <HAL_PCD_EP_DB_Transmit+0x186>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	785b      	ldrb	r3, [r3, #1]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d113      	bne.n	8004806 <HAL_PCD_EP_DB_Transmit+0x186>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	4413      	add	r3, r2
 80047ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	00da      	lsls	r2, r3, #3
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	4413      	add	r3, r2
 80047fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80047fe:	623b      	str	r3, [r7, #32]
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	2200      	movs	r2, #0
 8004804:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	4619      	mov	r1, r3
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f00b ff98 	bl	8010742 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004812:	88fb      	ldrh	r3, [r7, #6]
 8004814:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 82fa 	beq.w	8004e12 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004838:	82fb      	strh	r3, [r7, #22]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	441a      	add	r2, r3
 8004848:	8afb      	ldrh	r3, [r7, #22]
 800484a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800484e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004852:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800485a:	b29b      	uxth	r3, r3
 800485c:	8013      	strh	r3, [r2, #0]
 800485e:	e2d8      	b.n	8004e12 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004860:	88fb      	ldrh	r3, [r7, #6]
 8004862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d021      	beq.n	80048ae <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004884:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	441a      	add	r2, r3
 8004896:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800489a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800489e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	f040 82ac 	bne.w	8004e12 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048c2:	441a      	add	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048d0:	441a      	add	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6a1a      	ldr	r2, [r3, #32]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d30b      	bcc.n	80048fa <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6a1a      	ldr	r2, [r3, #32]
 80048ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048f2:	1ad2      	subs	r2, r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	621a      	str	r2, [r3, #32]
 80048f8:	e017      	b.n	800492a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d108      	bne.n	8004914 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004902:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004906:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004912:	e00a      	b.n	800492a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2200      	movs	r2, #0
 8004928:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	785b      	ldrb	r3, [r3, #1]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d165      	bne.n	80049fe <HAL_PCD_EP_DB_Transmit+0x37e>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004940:	b29b      	uxth	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004946:	4413      	add	r3, r2
 8004948:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	00da      	lsls	r2, r3, #3
 8004950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004952:	4413      	add	r3, r2
 8004954:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004958:	63bb      	str	r3, [r7, #56]	@ 0x38
 800495a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	b29b      	uxth	r3, r3
 8004960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004964:	b29a      	uxth	r2, r3
 8004966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004968:	801a      	strh	r2, [r3, #0]
 800496a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800496e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004970:	d91d      	bls.n	80049ae <HAL_PCD_EP_DB_Transmit+0x32e>
 8004972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	64bb      	str	r3, [r7, #72]	@ 0x48
 800497a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800497e:	f003 031f 	and.w	r3, r3, #31
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <HAL_PCD_EP_DB_Transmit+0x30c>
 8004986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004988:	3b01      	subs	r3, #1
 800498a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800498c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29a      	uxth	r2, r3
 8004992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004994:	b29b      	uxth	r3, r3
 8004996:	029b      	lsls	r3, r3, #10
 8004998:	b29b      	uxth	r3, r3
 800499a:	4313      	orrs	r3, r2
 800499c:	b29b      	uxth	r3, r3
 800499e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049aa:	801a      	strh	r2, [r3, #0]
 80049ac:	e044      	b.n	8004a38 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80049ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10a      	bne.n	80049cc <HAL_PCD_EP_DB_Transmit+0x34c>
 80049b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c8:	801a      	strh	r2, [r3, #0]
 80049ca:	e035      	b.n	8004a38 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80049cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049d0:	085b      	lsrs	r3, r3, #1
 80049d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_PCD_EP_DB_Transmit+0x366>
 80049e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049e2:	3301      	adds	r3, #1
 80049e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	029b      	lsls	r3, r3, #10
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	4313      	orrs	r3, r2
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fa:	801a      	strh	r2, [r3, #0]
 80049fc:	e01c      	b.n	8004a38 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	785b      	ldrb	r3, [r3, #1]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d118      	bne.n	8004a38 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a1a:	4413      	add	r3, r2
 8004a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	00da      	lsls	r2, r3, #3
 8004a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a26:	4413      	add	r3, r2
 8004a28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a36:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	6959      	ldr	r1, [r3, #20]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	891a      	ldrh	r2, [r3, #8]
 8004a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	f005 fd65 	bl	800a518 <USB_WritePMA>
 8004a4e:	e1e0      	b.n	8004e12 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4413      	add	r3, r2
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	6812      	ldr	r2, [r2, #0]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a74:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	699a      	ldr	r2, [r3, #24]
 8004a7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d307      	bcc.n	8004a94 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	699a      	ldr	r2, [r3, #24]
 8004a88:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a8c:	1ad2      	subs	r2, r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	619a      	str	r2, [r3, #24]
 8004a92:	e002      	b.n	8004a9a <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2200      	movs	r2, #0
 8004a98:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f040 80c0 	bne.w	8004c24 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	785b      	ldrb	r3, [r3, #1]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d126      	bne.n	8004afa <HAL_PCD_EP_DB_Transmit+0x47a>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ac0:	4413      	add	r3, r2
 8004ac2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	00da      	lsls	r2, r3, #3
 8004aca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004acc:	4413      	add	r3, r2
 8004ace:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ad2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ad4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ae2:	801a      	strh	r2, [r3, #0]
 8004ae4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004af6:	801a      	strh	r2, [r3, #0]
 8004af8:	e01a      	b.n	8004b30 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	785b      	ldrb	r3, [r3, #1]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d116      	bne.n	8004b30 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b16:	4413      	add	r3, r2
 8004b18:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	00da      	lsls	r2, r3, #3
 8004b20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b22:	4413      	add	r3, r2
 8004b24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b28:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d12b      	bne.n	8004b96 <HAL_PCD_EP_DB_Transmit+0x516>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b52:	4413      	add	r3, r2
 8004b54:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	00da      	lsls	r2, r3, #3
 8004b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b5e:	4413      	add	r3, r2
 8004b60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b7a:	801a      	strh	r2, [r3, #0]
 8004b7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b92:	801a      	strh	r2, [r3, #0]
 8004b94:	e017      	b.n	8004bc6 <HAL_PCD_EP_DB_Transmit+0x546>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	785b      	ldrb	r3, [r3, #1]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d113      	bne.n	8004bc6 <HAL_PCD_EP_DB_Transmit+0x546>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bac:	4413      	add	r3, r2
 8004bae:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	00da      	lsls	r2, r3, #3
 8004bb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bb8:	4413      	add	r3, r2
 8004bba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004bbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	4619      	mov	r1, r3
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f00b fdb8 	bl	8010742 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f040 811a 	bne.w	8004e12 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	441a      	add	r2, r3
 8004c0a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004c0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	8013      	strh	r3, [r2, #0]
 8004c22:	e0f6      	b.n	8004e12 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d121      	bne.n	8004c72 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c48:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	441a      	add	r2, r3
 8004c5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	f040 80ca 	bne.w	8004e12 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	695a      	ldr	r2, [r3, #20]
 8004c82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c86:	441a      	add	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c94:	441a      	add	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	6a1a      	ldr	r2, [r3, #32]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d30b      	bcc.n	8004cbe <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6a1a      	ldr	r2, [r3, #32]
 8004cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cb6:	1ad2      	subs	r2, r2, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	621a      	str	r2, [r3, #32]
 8004cbc:	e017      	b.n	8004cee <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d108      	bne.n	8004cd8 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004cc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004cd6:	e00a      	b.n	8004cee <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d165      	bne.n	8004dc8 <HAL_PCD_EP_DB_Transmit+0x748>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d10:	4413      	add	r3, r2
 8004d12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	00da      	lsls	r2, r3, #3
 8004d1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d32:	801a      	strh	r2, [r3, #0]
 8004d34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d38:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d3a:	d91d      	bls.n	8004d78 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d48:	f003 031f 	and.w	r3, r3, #31
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004d50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d52:	3b01      	subs	r3, #1
 8004d54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	029b      	lsls	r3, r3, #10
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	4313      	orrs	r3, r2
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	e041      	b.n	8004dfc <HAL_PCD_EP_DB_Transmit+0x77c>
 8004d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <HAL_PCD_EP_DB_Transmit+0x716>
 8004d80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d92:	801a      	strh	r2, [r3, #0]
 8004d94:	e032      	b.n	8004dfc <HAL_PCD_EP_DB_Transmit+0x77c>
 8004d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d9a:	085b      	lsrs	r3, r3, #1
 8004d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_PCD_EP_DB_Transmit+0x730>
 8004daa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dac:	3301      	adds	r3, #1
 8004dae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004db0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	029b      	lsls	r3, r3, #10
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dc4:	801a      	strh	r2, [r3, #0]
 8004dc6:	e019      	b.n	8004dfc <HAL_PCD_EP_DB_Transmit+0x77c>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	785b      	ldrb	r3, [r3, #1]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d115      	bne.n	8004dfc <HAL_PCD_EP_DB_Transmit+0x77c>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	461a      	mov	r2, r3
 8004ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dde:	4413      	add	r3, r2
 8004de0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	00da      	lsls	r2, r3, #3
 8004de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dea:	4413      	add	r3, r2
 8004dec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004df0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dfa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	6959      	ldr	r1, [r3, #20]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	895a      	ldrh	r2, [r3, #10]
 8004e08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f005 fb83 	bl	800a518 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e2c:	82bb      	strh	r3, [r7, #20]
 8004e2e:	8abb      	ldrh	r3, [r7, #20]
 8004e30:	f083 0310 	eor.w	r3, r3, #16
 8004e34:	82bb      	strh	r3, [r7, #20]
 8004e36:	8abb      	ldrh	r3, [r7, #20]
 8004e38:	f083 0320 	eor.w	r3, r3, #32
 8004e3c:	82bb      	strh	r3, [r7, #20]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	461a      	mov	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	441a      	add	r2, r3
 8004e4c:	8abb      	ldrh	r3, [r7, #20]
 8004e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3790      	adds	r7, #144	@ 0x90
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	607b      	str	r3, [r7, #4]
 8004e76:	460b      	mov	r3, r1
 8004e78:	817b      	strh	r3, [r7, #10]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004e7e:	897b      	ldrh	r3, [r7, #10]
 8004e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00b      	beq.n	8004ea2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e8a:	897b      	ldrh	r3, [r7, #10]
 8004e8c:	f003 0207 	and.w	r2, r3, #7
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	3310      	adds	r3, #16
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e009      	b.n	8004eb6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ea2:	897a      	ldrh	r2, [r7, #10]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004eb6:	893b      	ldrh	r3, [r7, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d107      	bne.n	8004ecc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	80da      	strh	r2, [r3, #6]
 8004eca:	e00b      	b.n	8004ee4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	0c1b      	lsrs	r3, r3, #16
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f043 0301 	orr.w	r3, r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f043 0302 	orr.w	r3, r3, #2
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
	...

08004f48 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f4c:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a04      	ldr	r2, [pc, #16]	@ (8004f64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f56:	6013      	str	r3, [r2, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	58000400 	.word	0x58000400

08004f68 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004f6c:	4b04      	ldr	r3, [pc, #16]	@ (8004f80 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	58000400 	.word	0x58000400

08004f84 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004f88:	4b05      	ldr	r3, [pc, #20]	@ (8004fa0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	4a04      	ldr	r2, [pc, #16]	@ (8004fa0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f92:	6053      	str	r3, [r2, #4]
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	58000400 	.word	0x58000400

08004fa4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fb6:	d101      	bne.n	8004fbc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fda:	6013      	str	r3, [r2, #0]
}
 8004fdc:	bf00      	nop
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ff8:	6013      	str	r3, [r2, #0]
}
 8004ffa:	bf00      	nop
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005008:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005012:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005016:	d101      	bne.n	800501c <LL_RCC_HSE_IsReady+0x18>
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <LL_RCC_HSE_IsReady+0x1a>
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800502c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800503a:	6013      	str	r3, [r2, #0]
}
 800503c:	bf00      	nop
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8005046:	b480      	push	{r7}
 8005048:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800504a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005058:	6013      	str	r3, [r2, #0]
}
 800505a:	bf00      	nop
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005076:	d101      	bne.n	800507c <LL_RCC_HSI_IsReady+0x18>
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <LL_RCC_HSI_IsReady+0x1a>
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	061b      	lsls	r3, r3, #24
 800509e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050a2:	4313      	orrs	r3, r2
 80050a4:	604b      	str	r3, [r1, #4]
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80050b2:	b480      	push	{r7}
 80050b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80050b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80050ca:	bf00      	nop
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80050d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80050f6:	b480      	push	{r7}
 80050f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80050fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b02      	cmp	r3, #2
 8005108:	d101      	bne.n	800510e <LL_RCC_HSI48_IsReady+0x18>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <LL_RCC_HSI48_IsReady+0x1a>
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800511a:	b480      	push	{r7}
 800511c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800511e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005126:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005132:	bf00      	nop
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005148:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800514c:	f023 0301 	bic.w	r3, r3, #1
 8005150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005154:	bf00      	nop
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800515e:	b480      	push	{r7}
 8005160:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800516a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800516e:	f043 0304 	orr.w	r3, r3, #4
 8005172:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005176:	bf00      	nop
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005190:	f023 0304 	bic.w	r3, r3, #4
 8005194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005198:	bf00      	nop
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80051a2:	b480      	push	{r7}
 80051a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80051a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d101      	bne.n	80051ba <LL_RCC_LSE_IsReady+0x18>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e000      	b.n	80051bc <LL_RCC_LSE_IsReady+0x1a>
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80051c6:	b480      	push	{r7}
 80051c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80051ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051d6:	f043 0301 	orr.w	r3, r3, #1
 80051da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80051de:	bf00      	nop
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80051ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051f8:	f023 0301 	bic.w	r3, r3, #1
 80051fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005200:	bf00      	nop
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800520a:	b480      	push	{r7}
 800520c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800520e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005212:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b02      	cmp	r3, #2
 800521c:	d101      	bne.n	8005222 <LL_RCC_LSI1_IsReady+0x18>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <LL_RCC_LSI1_IsReady+0x1a>
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800522e:	b480      	push	{r7}
 8005230:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005236:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800523a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800523e:	f043 0304 	orr.w	r3, r3, #4
 8005242:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005246:	bf00      	nop
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005258:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800525c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005260:	f023 0304 	bic.w	r3, r3, #4
 8005264:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005268:	bf00      	nop
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8005272:	b480      	push	{r7}
 8005274:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800527a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b08      	cmp	r3, #8
 8005284:	d101      	bne.n	800528a <LL_RCC_LSI2_IsReady+0x18>
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <LL_RCC_LSI2_IsReady+0x1a>
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800529e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052a6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80052c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	6013      	str	r3, [r2, #0]
}
 80052d8:	bf00      	nop
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80052e2:	b480      	push	{r7}
 80052e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80052e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052f0:	f023 0301 	bic.w	r3, r3, #1
 80052f4:	6013      	str	r3, [r2, #0]
}
 80052f6:	bf00      	nop
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b02      	cmp	r3, #2
 8005310:	d101      	bne.n	8005316 <LL_RCC_MSI_IsReady+0x16>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <LL_RCC_MSI_IsReady+0x18>
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800532a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005334:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4313      	orrs	r3, r2
 800533c:	600b      	str	r3, [r1, #0]
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800535a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2bb0      	cmp	r3, #176	@ 0xb0
 8005360:	d901      	bls.n	8005366 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8005362:	23b0      	movs	r3, #176	@ 0xb0
 8005364:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8005366:	687b      	ldr	r3, [r7, #4]
}
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800537c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800538e:	4313      	orrs	r3, r2
 8005390:	604b      	str	r3, [r1, #4]
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80053a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f023 0203 	bic.w	r2, r3, #3
 80053b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	608b      	str	r3, [r1, #8]
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80053c6:	b480      	push	{r7}
 80053c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80053ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 030c 	and.w	r3, r3, #12
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80053e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	608b      	str	r3, [r1, #8]
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800540e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005412:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005416:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800541a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800543a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800543e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005442:	f023 020f 	bic.w	r2, r3, #15
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005468:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005472:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4313      	orrs	r3, r2
 800547a:	608b      	str	r3, [r1, #8]
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800549a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	608b      	str	r3, [r1, #8]
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80054b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80054cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80054d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80054e2:	b480      	push	{r7}
 80054e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80054e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80054fe:	b480      	push	{r7}
 8005500:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800550c:	4618      	mov	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005516:	b480      	push	{r7}
 8005518:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800551a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005524:	4618      	mov	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800552e:	b480      	push	{r7}
 8005530:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800553c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005540:	6013      	str	r3, [r2, #0]
}
 8005542:	bf00      	nop
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800555a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800555e:	6013      	str	r3, [r2, #0]
}
 8005560:	bf00      	nop
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800556a:	b480      	push	{r7}
 800556c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800556e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005578:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800557c:	d101      	bne.n	8005582 <LL_RCC_PLL_IsReady+0x18>
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <LL_RCC_PLL_IsReady+0x1a>
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800558e:	b480      	push	{r7}
 8005590:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005592:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	0a1b      	lsrs	r3, r3, #8
 800559a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800559e:	4618      	mov	r0, r3
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80055ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80055c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80055dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f003 0303 	and.w	r3, r3, #3
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80055f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005602:	d101      	bne.n	8005608 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005604:	2301      	movs	r3, #1
 8005606:	e000      	b.n	800560a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800561c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005624:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005628:	d101      	bne.n	800562e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800563a:	b480      	push	{r7}
 800563c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800563e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005642:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800564a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800564e:	d101      	bne.n	8005654 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005650:	2301      	movs	r3, #1
 8005652:	e000      	b.n	8005656 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800566e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005672:	d101      	bne.n	8005678 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005674:	2301      	movs	r3, #1
 8005676:	e000      	b.n	800567a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005692:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005696:	d101      	bne.n	800569c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056a8:	b590      	push	{r4, r7, lr}
 80056aa:	b08d      	sub	sp, #52	@ 0x34
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e363      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 808d 	beq.w	80057e2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056c8:	f7ff fe7d 	bl	80053c6 <LL_RCC_GetSysClkSource>
 80056cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056ce:	f7ff ff83 	bl	80055d8 <LL_RCC_PLL_GetMainSource>
 80056d2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80056d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d005      	beq.n	80056e6 <HAL_RCC_OscConfig+0x3e>
 80056da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056dc:	2b0c      	cmp	r3, #12
 80056de:	d147      	bne.n	8005770 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80056e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d144      	bne.n	8005770 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e347      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80056f6:	f7ff fe28 	bl	800534a <LL_RCC_MSI_GetRange>
 80056fa:	4603      	mov	r3, r0
 80056fc:	429c      	cmp	r4, r3
 80056fe:	d914      	bls.n	800572a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fd61 	bl	80061cc <RCC_SetFlashLatencyFromMSIRange>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e336      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff fe02 	bl	8005322 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff fe26 	bl	8005374 <LL_RCC_MSI_SetCalibTrimming>
 8005728:	e013      	b.n	8005752 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff fdf7 	bl	8005322 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff fe1b 	bl	8005374 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fd42 	bl	80061cc <RCC_SetFlashLatencyFromMSIRange>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e317      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005752:	f000 fcc9 	bl	80060e8 <HAL_RCC_GetHCLKFreq>
 8005756:	4603      	mov	r3, r0
 8005758:	4aa4      	ldr	r2, [pc, #656]	@ (80059ec <HAL_RCC_OscConfig+0x344>)
 800575a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800575c:	4ba4      	ldr	r3, [pc, #656]	@ (80059f0 <HAL_RCC_OscConfig+0x348>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4618      	mov	r0, r3
 8005762:	f7fb fbe3 	bl	8000f2c <HAL_InitTick>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d039      	beq.n	80057e0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e308      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01e      	beq.n	80057b6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005778:	f7ff fda4 	bl	80052c4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800577c:	f7fb fdd4 	bl	8001328 <HAL_GetTick>
 8005780:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005784:	f7fb fdd0 	bl	8001328 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e2f5      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005796:	f7ff fdb3 	bl	8005300 <LL_RCC_MSI_IsReady>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0f1      	beq.n	8005784 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff fdbc 	bl	8005322 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff fde0 	bl	8005374 <LL_RCC_MSI_SetCalibTrimming>
 80057b4:	e015      	b.n	80057e2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057b6:	f7ff fd94 	bl	80052e2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057ba:	f7fb fdb5 	bl	8001328 <HAL_GetTick>
 80057be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80057c0:	e008      	b.n	80057d4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057c2:	f7fb fdb1 	bl	8001328 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e2d6      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80057d4:	f7ff fd94 	bl	8005300 <LL_RCC_MSI_IsReady>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f1      	bne.n	80057c2 <HAL_RCC_OscConfig+0x11a>
 80057de:	e000      	b.n	80057e2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80057e0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d047      	beq.n	800587e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057ee:	f7ff fdea 	bl	80053c6 <LL_RCC_GetSysClkSource>
 80057f2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057f4:	f7ff fef0 	bl	80055d8 <LL_RCC_PLL_GetMainSource>
 80057f8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d005      	beq.n	800580c <HAL_RCC_OscConfig+0x164>
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	2b0c      	cmp	r3, #12
 8005804:	d108      	bne.n	8005818 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	2b03      	cmp	r3, #3
 800580a:	d105      	bne.n	8005818 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d134      	bne.n	800587e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e2b4      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005820:	d102      	bne.n	8005828 <HAL_RCC_OscConfig+0x180>
 8005822:	f7ff fbd1 	bl	8004fc8 <LL_RCC_HSE_Enable>
 8005826:	e001      	b.n	800582c <HAL_RCC_OscConfig+0x184>
 8005828:	f7ff fbdd 	bl	8004fe6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d012      	beq.n	800585a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7fb fd78 	bl	8001328 <HAL_GetTick>
 8005838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800583c:	f7fb fd74 	bl	8001328 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b64      	cmp	r3, #100	@ 0x64
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e299      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800584e:	f7ff fbd9 	bl	8005004 <LL_RCC_HSE_IsReady>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0f1      	beq.n	800583c <HAL_RCC_OscConfig+0x194>
 8005858:	e011      	b.n	800587e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585a:	f7fb fd65 	bl	8001328 <HAL_GetTick>
 800585e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005862:	f7fb fd61 	bl	8001328 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b64      	cmp	r3, #100	@ 0x64
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e286      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005874:	f7ff fbc6 	bl	8005004 <LL_RCC_HSE_IsReady>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f1      	bne.n	8005862 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d04c      	beq.n	8005924 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800588a:	f7ff fd9c 	bl	80053c6 <LL_RCC_GetSysClkSource>
 800588e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005890:	f7ff fea2 	bl	80055d8 <LL_RCC_PLL_GetMainSource>
 8005894:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b04      	cmp	r3, #4
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_OscConfig+0x200>
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	2b0c      	cmp	r3, #12
 80058a0:	d10e      	bne.n	80058c0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d10b      	bne.n	80058c0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e266      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff fbe5 	bl	8005088 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80058be:	e031      	b.n	8005924 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d019      	beq.n	80058fc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058c8:	f7ff fbae 	bl	8005028 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058cc:	f7fb fd2c 	bl	8001328 <HAL_GetTick>
 80058d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058d4:	f7fb fd28 	bl	8001328 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e24d      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80058e6:	f7ff fbbd 	bl	8005064 <LL_RCC_HSI_IsReady>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0f1      	beq.n	80058d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fbc7 	bl	8005088 <LL_RCC_HSI_SetCalibTrimming>
 80058fa:	e013      	b.n	8005924 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058fc:	f7ff fba3 	bl	8005046 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005900:	f7fb fd12 	bl	8001328 <HAL_GetTick>
 8005904:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005908:	f7fb fd0e 	bl	8001328 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e233      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800591a:	f7ff fba3 	bl	8005064 <LL_RCC_HSI_IsReady>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1f1      	bne.n	8005908 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b00      	cmp	r3, #0
 800592e:	d106      	bne.n	800593e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 80a3 	beq.w	8005a84 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d076      	beq.n	8005a34 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	2b00      	cmp	r3, #0
 8005950:	d046      	beq.n	80059e0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005952:	f7ff fc5a 	bl	800520a <LL_RCC_LSI1_IsReady>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d113      	bne.n	8005984 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800595c:	f7ff fc33 	bl	80051c6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005960:	f7fb fce2 	bl	8001328 <HAL_GetTick>
 8005964:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005968:	f7fb fcde 	bl	8001328 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e203      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800597a:	f7ff fc46 	bl	800520a <LL_RCC_LSI1_IsReady>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0f1      	beq.n	8005968 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005984:	f7ff fc53 	bl	800522e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005988:	f7fb fcce 	bl	8001328 <HAL_GetTick>
 800598c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005990:	f7fb fcca 	bl	8001328 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b03      	cmp	r3, #3
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e1ef      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80059a2:	f7ff fc66 	bl	8005272 <LL_RCC_LSI2_IsReady>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f1      	beq.n	8005990 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fc70 	bl	8005296 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80059b6:	f7ff fc17 	bl	80051e8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ba:	f7fb fcb5 	bl	8001328 <HAL_GetTick>
 80059be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80059c0:	e008      	b.n	80059d4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80059c2:	f7fb fcb1 	bl	8001328 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d901      	bls.n	80059d4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e1d6      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80059d4:	f7ff fc19 	bl	800520a <LL_RCC_LSI1_IsReady>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1f1      	bne.n	80059c2 <HAL_RCC_OscConfig+0x31a>
 80059de:	e051      	b.n	8005a84 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80059e0:	f7ff fbf1 	bl	80051c6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e4:	f7fb fca0 	bl	8001328 <HAL_GetTick>
 80059e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80059ea:	e00c      	b.n	8005a06 <HAL_RCC_OscConfig+0x35e>
 80059ec:	20000008 	.word	0x20000008
 80059f0:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80059f4:	f7fb fc98 	bl	8001328 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e1bd      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005a06:	f7ff fc00 	bl	800520a <LL_RCC_LSI1_IsReady>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0f1      	beq.n	80059f4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005a10:	f7ff fc1e 	bl	8005250 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005a14:	e008      	b.n	8005a28 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a16:	f7fb fc87 	bl	8001328 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e1ac      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005a28:	f7ff fc23 	bl	8005272 <LL_RCC_LSI2_IsReady>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f1      	bne.n	8005a16 <HAL_RCC_OscConfig+0x36e>
 8005a32:	e027      	b.n	8005a84 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005a34:	f7ff fc0c 	bl	8005250 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a38:	f7fb fc76 	bl	8001328 <HAL_GetTick>
 8005a3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a40:	f7fb fc72 	bl	8001328 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e197      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005a52:	f7ff fc0e 	bl	8005272 <LL_RCC_LSI2_IsReady>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f1      	bne.n	8005a40 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005a5c:	f7ff fbc4 	bl	80051e8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a60:	f7fb fc62 	bl	8001328 <HAL_GetTick>
 8005a64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a68:	f7fb fc5e 	bl	8001328 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e183      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005a7a:	f7ff fbc6 	bl	800520a <LL_RCC_LSI1_IsReady>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f1      	bne.n	8005a68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d05b      	beq.n	8005b48 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a90:	4ba7      	ldr	r3, [pc, #668]	@ (8005d30 <HAL_RCC_OscConfig+0x688>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d114      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005a9c:	f7ff fa54 	bl	8004f48 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aa0:	f7fb fc42 	bl	8001328 <HAL_GetTick>
 8005aa4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa8:	f7fb fc3e 	bl	8001328 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e163      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aba:	4b9d      	ldr	r3, [pc, #628]	@ (8005d30 <HAL_RCC_OscConfig+0x688>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0f0      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d102      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x42c>
 8005ace:	f7ff fb24 	bl	800511a <LL_RCC_LSE_Enable>
 8005ad2:	e00c      	b.n	8005aee <HAL_RCC_OscConfig+0x446>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	2b05      	cmp	r3, #5
 8005ada:	d104      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x43e>
 8005adc:	f7ff fb3f 	bl	800515e <LL_RCC_LSE_EnableBypass>
 8005ae0:	f7ff fb1b 	bl	800511a <LL_RCC_LSE_Enable>
 8005ae4:	e003      	b.n	8005aee <HAL_RCC_OscConfig+0x446>
 8005ae6:	f7ff fb29 	bl	800513c <LL_RCC_LSE_Disable>
 8005aea:	f7ff fb49 	bl	8005180 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d014      	beq.n	8005b20 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af6:	f7fb fc17 	bl	8001328 <HAL_GetTick>
 8005afa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005afc:	e00a      	b.n	8005b14 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afe:	f7fb fc13 	bl	8001328 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e136      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005b14:	f7ff fb45 	bl	80051a2 <LL_RCC_LSE_IsReady>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0ef      	beq.n	8005afe <HAL_RCC_OscConfig+0x456>
 8005b1e:	e013      	b.n	8005b48 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b20:	f7fb fc02 	bl	8001328 <HAL_GetTick>
 8005b24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005b26:	e00a      	b.n	8005b3e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b28:	f7fb fbfe 	bl	8001328 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e121      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005b3e:	f7ff fb30 	bl	80051a2 <LL_RCC_LSE_IsReady>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1ef      	bne.n	8005b28 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d02c      	beq.n	8005bae <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d014      	beq.n	8005b86 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b5c:	f7ff faa9 	bl	80050b2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b60:	f7fb fbe2 	bl	8001328 <HAL_GetTick>
 8005b64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b68:	f7fb fbde 	bl	8001328 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e103      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005b7a:	f7ff fabc 	bl	80050f6 <LL_RCC_HSI48_IsReady>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0f1      	beq.n	8005b68 <HAL_RCC_OscConfig+0x4c0>
 8005b84:	e013      	b.n	8005bae <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b86:	f7ff faa5 	bl	80050d4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8a:	f7fb fbcd 	bl	8001328 <HAL_GetTick>
 8005b8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005b90:	e008      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b92:	f7fb fbc9 	bl	8001328 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e0ee      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005ba4:	f7ff faa7 	bl	80050f6 <LL_RCC_HSI48_IsReady>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f1      	bne.n	8005b92 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 80e4 	beq.w	8005d80 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bb8:	f7ff fc05 	bl	80053c6 <LL_RCC_GetSysClkSource>
 8005bbc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	f040 80b4 	bne.w	8005d38 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f003 0203 	and.w	r2, r3, #3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d123      	bne.n	8005c26 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d11c      	bne.n	8005c26 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	0a1b      	lsrs	r3, r3, #8
 8005bf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d114      	bne.n	8005c26 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d10d      	bne.n	8005c26 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d106      	bne.n	8005c26 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d05d      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b0c      	cmp	r3, #12
 8005c2a:	d058      	beq.n	8005cde <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e0a1      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c3e:	f7ff fc85 	bl	800554c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c42:	f7fb fb71 	bl	8001328 <HAL_GetTick>
 8005c46:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c48:	e008      	b.n	8005c5c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c4a:	f7fb fb6d 	bl	8001328 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e092      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1ef      	bne.n	8005c4a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	4b30      	ldr	r3, [pc, #192]	@ (8005d34 <HAL_RCC_OscConfig+0x68c>)
 8005c72:	4013      	ands	r3, r2
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c7c:	4311      	orrs	r1, r2
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c82:	0212      	lsls	r2, r2, #8
 8005c84:	4311      	orrs	r1, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c8a:	4311      	orrs	r1, r2
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c90:	4311      	orrs	r1, r2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005c96:	430a      	orrs	r2, r1
 8005c98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ca0:	f7ff fc45 	bl	800552e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005cb4:	f7fb fb38 	bl	8001328 <HAL_GetTick>
 8005cb8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cbc:	f7fb fb34 	bl	8001328 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e059      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0ef      	beq.n	8005cbc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cdc:	e050      	b.n	8005d80 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e04f      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d147      	bne.n	8005d80 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005cf0:	f7ff fc1d 	bl	800552e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d04:	f7fb fb10 	bl	8001328 <HAL_GetTick>
 8005d08:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d0c:	f7fb fb0c 	bl	8001328 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e031      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0ef      	beq.n	8005d0c <HAL_RCC_OscConfig+0x664>
 8005d2c:	e028      	b.n	8005d80 <HAL_RCC_OscConfig+0x6d8>
 8005d2e:	bf00      	nop
 8005d30:	58000400 	.word	0x58000400
 8005d34:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	2b0c      	cmp	r3, #12
 8005d3c:	d01e      	beq.n	8005d7c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d3e:	f7ff fc05 	bl	800554c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d42:	f7fb faf1 	bl	8001328 <HAL_GetTick>
 8005d46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d48:	e008      	b.n	8005d5c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4a:	f7fb faed 	bl	8001328 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e012      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1ef      	bne.n	8005d4a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d74:	4b05      	ldr	r3, [pc, #20]	@ (8005d8c <HAL_RCC_OscConfig+0x6e4>)
 8005d76:	4013      	ands	r3, r2
 8005d78:	60cb      	str	r3, [r1, #12]
 8005d7a:	e001      	b.n	8005d80 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3734      	adds	r7, #52	@ 0x34
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd90      	pop	{r4, r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	eefefffc 	.word	0xeefefffc

08005d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e12d      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005da4:	4b98      	ldr	r3, [pc, #608]	@ (8006008 <HAL_RCC_ClockConfig+0x278>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d91b      	bls.n	8005dea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005db2:	4b95      	ldr	r3, [pc, #596]	@ (8006008 <HAL_RCC_ClockConfig+0x278>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f023 0207 	bic.w	r2, r3, #7
 8005dba:	4993      	ldr	r1, [pc, #588]	@ (8006008 <HAL_RCC_ClockConfig+0x278>)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc2:	f7fb fab1 	bl	8001328 <HAL_GetTick>
 8005dc6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005dca:	f7fb faad 	bl	8001328 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e111      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ddc:	4b8a      	ldr	r3, [pc, #552]	@ (8006008 <HAL_RCC_ClockConfig+0x278>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d1ef      	bne.n	8005dca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d016      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff faef 	bl	80053de <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e00:	f7fb fa92 	bl	8001328 <HAL_GetTick>
 8005e04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e08:	f7fb fa8e 	bl	8001328 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e0f2      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005e1a:	f7ff fbe9 	bl	80055f0 <LL_RCC_IsActiveFlag_HPRE>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0f1      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0320 	and.w	r3, r3, #32
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d016      	beq.n	8005e5e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fae6 	bl	8005406 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e3a:	f7fb fa75 	bl	8001328 <HAL_GetTick>
 8005e3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e42:	f7fb fa71 	bl	8001328 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e0d5      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005e54:	f7ff fbde 	bl	8005614 <LL_RCC_IsActiveFlag_C2HPRE>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0f1      	beq.n	8005e42 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d016      	beq.n	8005e98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff fadf 	bl	8005432 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e74:	f7fb fa58 	bl	8001328 <HAL_GetTick>
 8005e78:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e7c:	f7fb fa54 	bl	8001328 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e0b8      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e8e:	f7ff fbd4 	bl	800563a <LL_RCC_IsActiveFlag_SHDHPRE>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0f1      	beq.n	8005e7c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d016      	beq.n	8005ed2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff fad9 	bl	8005460 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005eae:	f7fb fa3b 	bl	8001328 <HAL_GetTick>
 8005eb2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005eb6:	f7fb fa37 	bl	8001328 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e09b      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005ec8:	f7ff fbca 	bl	8005660 <LL_RCC_IsActiveFlag_PPRE1>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f1      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d017      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7ff facf 	bl	8005488 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005eea:	f7fb fa1d 	bl	8001328 <HAL_GetTick>
 8005eee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005ef0:	e008      	b.n	8005f04 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ef2:	f7fb fa19 	bl	8001328 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e07d      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005f04:	f7ff fbbe 	bl	8005684 <LL_RCC_IsActiveFlag_PPRE2>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f1      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d043      	beq.n	8005fa2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d106      	bne.n	8005f30 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005f22:	f7ff f86f 	bl	8005004 <LL_RCC_HSE_IsReady>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d11e      	bne.n	8005f6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e067      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d106      	bne.n	8005f46 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005f38:	f7ff fb17 	bl	800556a <LL_RCC_PLL_IsReady>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d113      	bne.n	8005f6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e05c      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d106      	bne.n	8005f5c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005f4e:	f7ff f9d7 	bl	8005300 <LL_RCC_MSI_IsReady>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d108      	bne.n	8005f6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e051      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005f5c:	f7ff f882 	bl	8005064 <LL_RCC_HSI_IsReady>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e04a      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fa15 	bl	800539e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f74:	f7fb f9d8 	bl	8001328 <HAL_GetTick>
 8005f78:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f7a:	e00a      	b.n	8005f92 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f7c:	f7fb f9d4 	bl	8001328 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e036      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f92:	f7ff fa18 	bl	80053c6 <LL_RCC_GetSysClkSource>
 8005f96:	4602      	mov	r2, r0
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d1ec      	bne.n	8005f7c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fa2:	4b19      	ldr	r3, [pc, #100]	@ (8006008 <HAL_RCC_ClockConfig+0x278>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d21b      	bcs.n	8005fe8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb0:	4b15      	ldr	r3, [pc, #84]	@ (8006008 <HAL_RCC_ClockConfig+0x278>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f023 0207 	bic.w	r2, r3, #7
 8005fb8:	4913      	ldr	r1, [pc, #76]	@ (8006008 <HAL_RCC_ClockConfig+0x278>)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fc0:	f7fb f9b2 	bl	8001328 <HAL_GetTick>
 8005fc4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005fc8:	f7fb f9ae 	bl	8001328 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e012      	b.n	8006000 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fda:	4b0b      	ldr	r3, [pc, #44]	@ (8006008 <HAL_RCC_ClockConfig+0x278>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d1ef      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005fe8:	f000 f87e 	bl	80060e8 <HAL_RCC_GetHCLKFreq>
 8005fec:	4603      	mov	r3, r0
 8005fee:	4a07      	ldr	r2, [pc, #28]	@ (800600c <HAL_RCC_ClockConfig+0x27c>)
 8005ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005ff2:	f7fb f9a5 	bl	8001340 <HAL_GetTickPrio>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fa ff97 	bl	8000f2c <HAL_InitTick>
 8005ffe:	4603      	mov	r3, r0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	58004000 	.word	0x58004000
 800600c:	20000008 	.word	0x20000008

08006010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006010:	b590      	push	{r4, r7, lr}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006016:	f7ff f9d6 	bl	80053c6 <LL_RCC_GetSysClkSource>
 800601a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10a      	bne.n	8006038 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006022:	f7ff f992 	bl	800534a <LL_RCC_MSI_GetRange>
 8006026:	4603      	mov	r3, r0
 8006028:	091b      	lsrs	r3, r3, #4
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	4a2b      	ldr	r2, [pc, #172]	@ (80060dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8006030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	e04b      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b04      	cmp	r3, #4
 800603c:	d102      	bne.n	8006044 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800603e:	4b28      	ldr	r3, [pc, #160]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	e045      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b08      	cmp	r3, #8
 8006048:	d10a      	bne.n	8006060 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800604a:	f7fe ffab 	bl	8004fa4 <LL_RCC_HSE_IsEnabledDiv2>
 800604e:	4603      	mov	r3, r0
 8006050:	2b01      	cmp	r3, #1
 8006052:	d102      	bne.n	800605a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006054:	4b22      	ldr	r3, [pc, #136]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e03a      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800605a:	4b22      	ldr	r3, [pc, #136]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	e037      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006060:	f7ff faba 	bl	80055d8 <LL_RCC_PLL_GetMainSource>
 8006064:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b02      	cmp	r3, #2
 800606a:	d003      	beq.n	8006074 <HAL_RCC_GetSysClockFreq+0x64>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b03      	cmp	r3, #3
 8006070:	d003      	beq.n	800607a <HAL_RCC_GetSysClockFreq+0x6a>
 8006072:	e00d      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006074:	4b1a      	ldr	r3, [pc, #104]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006076:	60bb      	str	r3, [r7, #8]
        break;
 8006078:	e015      	b.n	80060a6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800607a:	f7fe ff93 	bl	8004fa4 <LL_RCC_HSE_IsEnabledDiv2>
 800607e:	4603      	mov	r3, r0
 8006080:	2b01      	cmp	r3, #1
 8006082:	d102      	bne.n	800608a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006084:	4b16      	ldr	r3, [pc, #88]	@ (80060e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006086:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006088:	e00d      	b.n	80060a6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800608a:	4b16      	ldr	r3, [pc, #88]	@ (80060e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800608c:	60bb      	str	r3, [r7, #8]
        break;
 800608e:	e00a      	b.n	80060a6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006090:	f7ff f95b 	bl	800534a <LL_RCC_MSI_GetRange>
 8006094:	4603      	mov	r3, r0
 8006096:	091b      	lsrs	r3, r3, #4
 8006098:	f003 030f 	and.w	r3, r3, #15
 800609c:	4a0f      	ldr	r2, [pc, #60]	@ (80060dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800609e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060a2:	60bb      	str	r3, [r7, #8]
        break;
 80060a4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80060a6:	f7ff fa72 	bl	800558e <LL_RCC_PLL_GetN>
 80060aa:	4602      	mov	r2, r0
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	fb03 f402 	mul.w	r4, r3, r2
 80060b2:	f7ff fa85 	bl	80055c0 <LL_RCC_PLL_GetDivider>
 80060b6:	4603      	mov	r3, r0
 80060b8:	091b      	lsrs	r3, r3, #4
 80060ba:	3301      	adds	r3, #1
 80060bc:	fbb4 f4f3 	udiv	r4, r4, r3
 80060c0:	f7ff fa72 	bl	80055a8 <LL_RCC_PLL_GetR>
 80060c4:	4603      	mov	r3, r0
 80060c6:	0f5b      	lsrs	r3, r3, #29
 80060c8:	3301      	adds	r3, #1
 80060ca:	fbb4 f3f3 	udiv	r3, r4, r3
 80060ce:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80060d0:	68fb      	ldr	r3, [r7, #12]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd90      	pop	{r4, r7, pc}
 80060da:	bf00      	nop
 80060dc:	08011dd4 	.word	0x08011dd4
 80060e0:	00f42400 	.word	0x00f42400
 80060e4:	01e84800 	.word	0x01e84800

080060e8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060e8:	b598      	push	{r3, r4, r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80060ec:	f7ff ff90 	bl	8006010 <HAL_RCC_GetSysClockFreq>
 80060f0:	4604      	mov	r4, r0
 80060f2:	f7ff f9dd 	bl	80054b0 <LL_RCC_GetAHBPrescaler>
 80060f6:	4603      	mov	r3, r0
 80060f8:	091b      	lsrs	r3, r3, #4
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	4a03      	ldr	r2, [pc, #12]	@ (800610c <HAL_RCC_GetHCLKFreq+0x24>)
 8006100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006104:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006108:	4618      	mov	r0, r3
 800610a:	bd98      	pop	{r3, r4, r7, pc}
 800610c:	08011d74 	.word	0x08011d74

08006110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006110:	b598      	push	{r3, r4, r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006114:	f7ff ffe8 	bl	80060e8 <HAL_RCC_GetHCLKFreq>
 8006118:	4604      	mov	r4, r0
 800611a:	f7ff f9f0 	bl	80054fe <LL_RCC_GetAPB1Prescaler>
 800611e:	4603      	mov	r3, r0
 8006120:	0a1b      	lsrs	r3, r3, #8
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	4a04      	ldr	r2, [pc, #16]	@ (8006138 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800612c:	f003 031f 	and.w	r3, r3, #31
 8006130:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006134:	4618      	mov	r0, r3
 8006136:	bd98      	pop	{r3, r4, r7, pc}
 8006138:	08011db4 	.word	0x08011db4

0800613c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800613c:	b598      	push	{r3, r4, r7, lr}
 800613e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006140:	f7ff ffd2 	bl	80060e8 <HAL_RCC_GetHCLKFreq>
 8006144:	4604      	mov	r4, r0
 8006146:	f7ff f9e6 	bl	8005516 <LL_RCC_GetAPB2Prescaler>
 800614a:	4603      	mov	r3, r0
 800614c:	0adb      	lsrs	r3, r3, #11
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	4a04      	ldr	r2, [pc, #16]	@ (8006164 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006158:	f003 031f 	and.w	r3, r3, #31
 800615c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006160:	4618      	mov	r0, r3
 8006162:	bd98      	pop	{r3, r4, r7, pc}
 8006164:	08011db4 	.word	0x08011db4

08006168 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	226f      	movs	r2, #111	@ 0x6f
 8006176:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8006178:	f7ff f925 	bl	80053c6 <LL_RCC_GetSysClkSource>
 800617c:	4602      	mov	r2, r0
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8006182:	f7ff f995 	bl	80054b0 <LL_RCC_GetAHBPrescaler>
 8006186:	4602      	mov	r2, r0
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800618c:	f7ff f9b7 	bl	80054fe <LL_RCC_GetAPB1Prescaler>
 8006190:	4602      	mov	r2, r0
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8006196:	f7ff f9be 	bl	8005516 <LL_RCC_GetAPB2Prescaler>
 800619a:	4602      	mov	r2, r0
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80061a0:	f7ff f992 	bl	80054c8 <LL_C2_RCC_GetAHBPrescaler>
 80061a4:	4602      	mov	r2, r0
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80061aa:	f7ff f99a 	bl	80054e2 <LL_RCC_GetAHB4Prescaler>
 80061ae:	4602      	mov	r2, r0
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80061b4:	4b04      	ldr	r3, [pc, #16]	@ (80061c8 <HAL_RCC_GetClockConfig+0x60>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0207 	and.w	r2, r3, #7
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	601a      	str	r2, [r3, #0]
}
 80061c0:	bf00      	nop
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	58004000 	.word	0x58004000

080061cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80061cc:	b590      	push	{r4, r7, lr}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2bb0      	cmp	r3, #176	@ 0xb0
 80061d8:	d903      	bls.n	80061e2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80061da:	4b15      	ldr	r3, [pc, #84]	@ (8006230 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80061dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	e007      	b.n	80061f2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	091b      	lsrs	r3, r3, #4
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	4a11      	ldr	r2, [pc, #68]	@ (8006230 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80061ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80061f2:	f7ff f976 	bl	80054e2 <LL_RCC_GetAHB4Prescaler>
 80061f6:	4603      	mov	r3, r0
 80061f8:	091b      	lsrs	r3, r3, #4
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	4a0d      	ldr	r2, [pc, #52]	@ (8006234 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	fbb2 f3f3 	udiv	r3, r2, r3
 800620a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4a0a      	ldr	r2, [pc, #40]	@ (8006238 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006210:	fba2 2303 	umull	r2, r3, r2, r3
 8006214:	0c9c      	lsrs	r4, r3, #18
 8006216:	f7fe fea7 	bl	8004f68 <HAL_PWREx_GetVoltageRange>
 800621a:	4603      	mov	r3, r0
 800621c:	4619      	mov	r1, r3
 800621e:	4620      	mov	r0, r4
 8006220:	f000 f80c 	bl	800623c <RCC_SetFlashLatency>
 8006224:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	bd90      	pop	{r4, r7, pc}
 800622e:	bf00      	nop
 8006230:	08011dd4 	.word	0x08011dd4
 8006234:	08011d74 	.word	0x08011d74
 8006238:	431bde83 	.word	0x431bde83

0800623c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800623c:	b590      	push	{r4, r7, lr}
 800623e:	b093      	sub	sp, #76	@ 0x4c
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006246:	4b37      	ldr	r3, [pc, #220]	@ (8006324 <RCC_SetFlashLatency+0xe8>)
 8006248:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800624c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800624e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006252:	4a35      	ldr	r2, [pc, #212]	@ (8006328 <RCC_SetFlashLatency+0xec>)
 8006254:	f107 031c 	add.w	r3, r7, #28
 8006258:	ca07      	ldmia	r2, {r0, r1, r2}
 800625a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800625e:	4b33      	ldr	r3, [pc, #204]	@ (800632c <RCC_SetFlashLatency+0xf0>)
 8006260:	f107 040c 	add.w	r4, r7, #12
 8006264:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006266:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800626a:	2300      	movs	r3, #0
 800626c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006274:	d11a      	bne.n	80062ac <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006276:	2300      	movs	r3, #0
 8006278:	643b      	str	r3, [r7, #64]	@ 0x40
 800627a:	e013      	b.n	80062a4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800627c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	3348      	adds	r3, #72	@ 0x48
 8006282:	443b      	add	r3, r7
 8006284:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	429a      	cmp	r2, r3
 800628c:	d807      	bhi.n	800629e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800628e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	3348      	adds	r3, #72	@ 0x48
 8006294:	443b      	add	r3, r7
 8006296:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800629a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800629c:	e020      	b.n	80062e0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800629e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062a0:	3301      	adds	r3, #1
 80062a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80062a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d9e8      	bls.n	800627c <RCC_SetFlashLatency+0x40>
 80062aa:	e019      	b.n	80062e0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80062ac:	2300      	movs	r3, #0
 80062ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062b0:	e013      	b.n	80062da <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80062b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	3348      	adds	r3, #72	@ 0x48
 80062b8:	443b      	add	r3, r7
 80062ba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d807      	bhi.n	80062d4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80062c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	3348      	adds	r3, #72	@ 0x48
 80062ca:	443b      	add	r3, r7
 80062cc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80062d0:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80062d2:	e005      	b.n	80062e0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80062d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062d6:	3301      	adds	r3, #1
 80062d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d9e8      	bls.n	80062b2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80062e0:	4b13      	ldr	r3, [pc, #76]	@ (8006330 <RCC_SetFlashLatency+0xf4>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f023 0207 	bic.w	r2, r3, #7
 80062e8:	4911      	ldr	r1, [pc, #68]	@ (8006330 <RCC_SetFlashLatency+0xf4>)
 80062ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ec:	4313      	orrs	r3, r2
 80062ee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062f0:	f7fb f81a 	bl	8001328 <HAL_GetTick>
 80062f4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80062f6:	e008      	b.n	800630a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80062f8:	f7fb f816 	bl	8001328 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d901      	bls.n	800630a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e007      	b.n	800631a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800630a:	4b09      	ldr	r3, [pc, #36]	@ (8006330 <RCC_SetFlashLatency+0xf4>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0307 	and.w	r3, r3, #7
 8006312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006314:	429a      	cmp	r2, r3
 8006316:	d1ef      	bne.n	80062f8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	374c      	adds	r7, #76	@ 0x4c
 800631e:	46bd      	mov	sp, r7
 8006320:	bd90      	pop	{r4, r7, pc}
 8006322:	bf00      	nop
 8006324:	08011c64 	.word	0x08011c64
 8006328:	08011c74 	.word	0x08011c74
 800632c:	08011c80 	.word	0x08011c80
 8006330:	58004000 	.word	0x58004000

08006334 <LL_RCC_LSE_IsEnabled>:
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800633c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <LL_RCC_LSE_IsEnabled+0x18>
 8006348:	2301      	movs	r3, #1
 800634a:	e000      	b.n	800634e <LL_RCC_LSE_IsEnabled+0x1a>
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <LL_RCC_LSE_IsReady>:
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800635c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b02      	cmp	r3, #2
 800636a:	d101      	bne.n	8006370 <LL_RCC_LSE_IsReady+0x18>
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <LL_RCC_LSE_IsReady+0x1a>
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <LL_RCC_SetRFWKPClockSource>:
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006388:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800638c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006390:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4313      	orrs	r3, r2
 8006398:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <LL_RCC_SetSMPSClockSource>:
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80063b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b6:	f023 0203 	bic.w	r2, r3, #3
 80063ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <LL_RCC_SetSMPSPrescaler>:
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80063d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063de:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80063e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <LL_RCC_SetUSARTClockSource>:
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006408:	f023 0203 	bic.w	r2, r3, #3
 800640c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <LL_RCC_SetLPUARTClockSource>:
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800642c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006434:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006438:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <LL_RCC_SetI2CClockSource>:
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800645c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	091b      	lsrs	r3, r3, #4
 8006464:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006468:	43db      	mvns	r3, r3
 800646a:	401a      	ands	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006474:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006478:	4313      	orrs	r3, r2
 800647a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <LL_RCC_SetLPTIMClockSource>:
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006496:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	0c1b      	lsrs	r3, r3, #16
 800649e:	041b      	lsls	r3, r3, #16
 80064a0:	43db      	mvns	r3, r3
 80064a2:	401a      	ands	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	041b      	lsls	r3, r3, #16
 80064a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <LL_RCC_SetSAIClockSource>:
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80064c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80064d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <LL_RCC_SetRNGClockSource>:
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80064f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064fa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80064fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4313      	orrs	r3, r2
 8006506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <LL_RCC_SetCLK48ClockSource>:
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800651e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006526:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800652a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4313      	orrs	r3, r2
 8006532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <LL_RCC_SetUSBClockSource>:
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b082      	sub	sp, #8
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff ffe3 	bl	8006516 <LL_RCC_SetCLK48ClockSource>
}
 8006550:	bf00      	nop
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <LL_RCC_SetADCClockSource>:
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006568:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800656c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4313      	orrs	r3, r2
 8006574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <LL_RCC_SetRTCClockSource>:
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800658c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006594:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006598:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4313      	orrs	r3, r2
 80065a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <LL_RCC_GetRTCClockSource>:
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80065b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <LL_RCC_ForceBackupDomainReset>:
{
 80065ca:	b480      	push	{r7}
 80065cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80065ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80065e2:	bf00      	nop
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <LL_RCC_ReleaseBackupDomainReset>:
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80065f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006604:	bf00      	nop
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <LL_RCC_PLLSAI1_Enable>:
{
 800660e:	b480      	push	{r7}
 8006610:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800661c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006620:	6013      	str	r3, [r2, #0]
}
 8006622:	bf00      	nop
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <LL_RCC_PLLSAI1_Disable>:
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800663a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800663e:	6013      	str	r3, [r2, #0]
}
 8006640:	bf00      	nop
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <LL_RCC_PLLSAI1_IsReady>:
{
 800664a:	b480      	push	{r7}
 800664c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800664e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006658:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800665c:	d101      	bne.n	8006662 <LL_RCC_PLLSAI1_IsReady+0x18>
 800665e:	2301      	movs	r3, #1
 8006660:	e000      	b.n	8006664 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b088      	sub	sp, #32
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006676:	2300      	movs	r3, #0
 8006678:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800667a:	2300      	movs	r3, #0
 800667c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006686:	2b00      	cmp	r3, #0
 8006688:	d034      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006692:	d021      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006694:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006698:	d81b      	bhi.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800669a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800669e:	d01d      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80066a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066a4:	d815      	bhi.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00b      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80066aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066ae:	d110      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80066b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066be:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80066c0:	e00d      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3304      	adds	r3, #4
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 f947 	bl	800695a <RCCEx_PLLSAI1_ConfigNP>
 80066cc:	4603      	mov	r3, r0
 80066ce:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80066d0:	e005      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	77fb      	strb	r3, [r7, #31]
        break;
 80066d6:	e002      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80066d8:	bf00      	nop
 80066da:	e000      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80066dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066de:	7ffb      	ldrb	r3, [r7, #31]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d105      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff fee8 	bl	80064be <LL_RCC_SetSAIClockSource>
 80066ee:	e001      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f0:	7ffb      	ldrb	r3, [r7, #31]
 80066f2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d046      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006700:	f7ff ff56 	bl	80065b0 <LL_RCC_GetRTCClockSource>
 8006704:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	429a      	cmp	r2, r3
 800670e:	d03c      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006710:	f7fe fc1a 	bl	8004f48 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d105      	bne.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff ff30 	bl	8006584 <LL_RCC_SetRTCClockSource>
 8006724:	e02e      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800672a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800672e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006730:	f7ff ff4b 	bl	80065ca <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006734:	f7ff ff5a 	bl	80065ec <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006746:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006750:	f7ff fdf0 	bl	8006334 <LL_RCC_LSE_IsEnabled>
 8006754:	4603      	mov	r3, r0
 8006756:	2b01      	cmp	r3, #1
 8006758:	d114      	bne.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800675a:	f7fa fde5 	bl	8001328 <HAL_GetTick>
 800675e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006760:	e00b      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006762:	f7fa fde1 	bl	8001328 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006770:	4293      	cmp	r3, r2
 8006772:	d902      	bls.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	77fb      	strb	r3, [r7, #31]
              break;
 8006778:	e004      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800677a:	f7ff fded 	bl	8006358 <LL_RCC_LSE_IsReady>
 800677e:	4603      	mov	r3, r0
 8006780:	2b01      	cmp	r3, #1
 8006782:	d1ee      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006784:	7ffb      	ldrb	r3, [r7, #31]
 8006786:	77bb      	strb	r3, [r7, #30]
 8006788:	e001      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678a:	7ffb      	ldrb	r3, [r7, #31]
 800678c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d004      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff fe2a 	bl	80063f8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d004      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff fe35 	bl	8006424 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0310 	and.w	r3, r3, #16
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d004      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fe5d 	bl	800648a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d004      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff fe52 	bl	800648a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d004      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff fe2a 	bl	8006450 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0308 	and.w	r3, r3, #8
 8006804:	2b00      	cmp	r3, #0
 8006806:	d004      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff fe1f 	bl	8006450 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800681a:	2b00      	cmp	r3, #0
 800681c:	d022      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006822:	4618      	mov	r0, r3
 8006824:	f7ff fe8d 	bl	8006542 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800682c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006830:	d107      	bne.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800683c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006840:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006846:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800684a:	d10b      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3304      	adds	r3, #4
 8006850:	4618      	mov	r0, r3
 8006852:	f000 f8dd 	bl	8006a10 <RCCEx_PLLSAI1_ConfigNQ>
 8006856:	4603      	mov	r3, r0
 8006858:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800685a:	7ffb      	ldrb	r3, [r7, #31]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006860:	7ffb      	ldrb	r3, [r7, #31]
 8006862:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800686c:	2b00      	cmp	r3, #0
 800686e:	d02b      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006878:	d008      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006882:	d003      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006888:	2b00      	cmp	r3, #0
 800688a:	d105      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff fe2a 	bl	80064ea <LL_RCC_SetRNGClockSource>
 8006896:	e00a      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	2000      	movs	r0, #0
 80068a4:	f7ff fe21 	bl	80064ea <LL_RCC_SetRNGClockSource>
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f7ff fe34 	bl	8006516 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80068b6:	d107      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80068b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d022      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff fe3d 	bl	8006558 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068e6:	d107      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068f6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006900:	d10b      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3304      	adds	r3, #4
 8006906:	4618      	mov	r0, r3
 8006908:	f000 f8dd 	bl	8006ac6 <RCCEx_PLLSAI1_ConfigNR>
 800690c:	4603      	mov	r3, r0
 800690e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006910:	7ffb      	ldrb	r3, [r7, #31]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006916:	7ffb      	ldrb	r3, [r7, #31]
 8006918:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d004      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692a:	4618      	mov	r0, r3
 800692c:	f7ff fd26 	bl	800637c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d009      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff fd45 	bl	80063d0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff fd2c 	bl	80063a8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006950:	7fbb      	ldrb	r3, [r7, #30]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3720      	adds	r7, #32
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006966:	f7ff fe61 	bl	800662c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800696a:	f7fa fcdd 	bl	8001328 <HAL_GetTick>
 800696e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006970:	e009      	b.n	8006986 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006972:	f7fa fcd9 	bl	8001328 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d902      	bls.n	8006986 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	73fb      	strb	r3, [r7, #15]
      break;
 8006984:	e004      	b.n	8006990 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006986:	f7ff fe60 	bl	800664a <LL_RCC_PLLSAI1_IsReady>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f0      	bne.n	8006972 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006990:	7bfb      	ldrb	r3, [r7, #15]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d137      	bne.n	8006a06 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	021b      	lsls	r3, r3, #8
 80069a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069aa:	4313      	orrs	r3, r2
 80069ac:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80069ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069c0:	4313      	orrs	r3, r2
 80069c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80069c4:	f7ff fe23 	bl	800660e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069c8:	f7fa fcae 	bl	8001328 <HAL_GetTick>
 80069cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80069ce:	e009      	b.n	80069e4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069d0:	f7fa fcaa 	bl	8001328 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d902      	bls.n	80069e4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	73fb      	strb	r3, [r7, #15]
        break;
 80069e2:	e004      	b.n	80069ee <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80069e4:	f7ff fe31 	bl	800664a <LL_RCC_PLLSAI1_IsReady>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d1f0      	bne.n	80069d0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d108      	bne.n	8006a06 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80069f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069f8:	691a      	ldr	r2, [r3, #16]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a02:	4313      	orrs	r3, r2
 8006a04:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006a1c:	f7ff fe06 	bl	800662c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a20:	f7fa fc82 	bl	8001328 <HAL_GetTick>
 8006a24:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006a26:	e009      	b.n	8006a3c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a28:	f7fa fc7e 	bl	8001328 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d902      	bls.n	8006a3c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	73fb      	strb	r3, [r7, #15]
      break;
 8006a3a:	e004      	b.n	8006a46 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006a3c:	f7ff fe05 	bl	800664a <LL_RCC_PLLSAI1_IsReady>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1f0      	bne.n	8006a28 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d137      	bne.n	8006abc <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	021b      	lsls	r3, r3, #8
 8006a5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a60:	4313      	orrs	r3, r2
 8006a62:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a76:	4313      	orrs	r3, r2
 8006a78:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006a7a:	f7ff fdc8 	bl	800660e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a7e:	f7fa fc53 	bl	8001328 <HAL_GetTick>
 8006a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006a84:	e009      	b.n	8006a9a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a86:	f7fa fc4f 	bl	8001328 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d902      	bls.n	8006a9a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	73fb      	strb	r3, [r7, #15]
        break;
 8006a98:	e004      	b.n	8006aa4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006a9a:	f7ff fdd6 	bl	800664a <LL_RCC_PLLSAI1_IsReady>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d1f0      	bne.n	8006a86 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d108      	bne.n	8006abc <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aae:	691a      	ldr	r2, [r3, #16]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b084      	sub	sp, #16
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006ad2:	f7ff fdab 	bl	800662c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ad6:	f7fa fc27 	bl	8001328 <HAL_GetTick>
 8006ada:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006adc:	e009      	b.n	8006af2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ade:	f7fa fc23 	bl	8001328 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d902      	bls.n	8006af2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	73fb      	strb	r3, [r7, #15]
      break;
 8006af0:	e004      	b.n	8006afc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006af2:	f7ff fdaa 	bl	800664a <LL_RCC_PLLSAI1_IsReady>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1f0      	bne.n	8006ade <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d137      	bne.n	8006b72 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	021b      	lsls	r3, r3, #8
 8006b12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b16:	4313      	orrs	r3, r2
 8006b18:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006b30:	f7ff fd6d 	bl	800660e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b34:	f7fa fbf8 	bl	8001328 <HAL_GetTick>
 8006b38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b3a:	e009      	b.n	8006b50 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b3c:	f7fa fbf4 	bl	8001328 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d902      	bls.n	8006b50 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b4e:	e004      	b.n	8006b5a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b50:	f7ff fd7b 	bl	800664a <LL_RCC_PLLSAI1_IsReady>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d1f0      	bne.n	8006b3c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d108      	bne.n	8006b72 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b64:	691a      	ldr	r2, [r3, #16]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e049      	b.n	8006c22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fa f94a 	bl	8000e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4610      	mov	r0, r2
 8006bbc:	f000 fa7c 	bl	80070b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d001      	beq.n	8006c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e036      	b.n	8006cb2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68da      	ldr	r2, [r3, #12]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0201 	orr.w	r2, r2, #1
 8006c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a17      	ldr	r2, [pc, #92]	@ (8006cc0 <HAL_TIM_Base_Start_IT+0x94>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d004      	beq.n	8006c70 <HAL_TIM_Base_Start_IT+0x44>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c6e:	d115      	bne.n	8006c9c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689a      	ldr	r2, [r3, #8]
 8006c76:	4b13      	ldr	r3, [pc, #76]	@ (8006cc4 <HAL_TIM_Base_Start_IT+0x98>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2b06      	cmp	r3, #6
 8006c80:	d015      	beq.n	8006cae <HAL_TIM_Base_Start_IT+0x82>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c88:	d011      	beq.n	8006cae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f042 0201 	orr.w	r2, r2, #1
 8006c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c9a:	e008      	b.n	8006cae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	e000      	b.n	8006cb0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40012c00 	.word	0x40012c00
 8006cc4:	00010007 	.word	0x00010007

08006cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d020      	beq.n	8006d2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d01b      	beq.n	8006d2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f06f 0202 	mvn.w	r2, #2
 8006cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f9b2 	bl	800707c <HAL_TIM_IC_CaptureCallback>
 8006d18:	e005      	b.n	8006d26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f9a4 	bl	8007068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f9b5 	bl	8007090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d020      	beq.n	8006d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01b      	beq.n	8006d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f06f 0204 	mvn.w	r2, #4
 8006d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f98c 	bl	800707c <HAL_TIM_IC_CaptureCallback>
 8006d64:	e005      	b.n	8006d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f97e 	bl	8007068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f98f 	bl	8007090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d020      	beq.n	8006dc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01b      	beq.n	8006dc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0208 	mvn.w	r2, #8
 8006d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2204      	movs	r2, #4
 8006d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	f003 0303 	and.w	r3, r3, #3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f966 	bl	800707c <HAL_TIM_IC_CaptureCallback>
 8006db0:	e005      	b.n	8006dbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f958 	bl	8007068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f969 	bl	8007090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f003 0310 	and.w	r3, r3, #16
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d020      	beq.n	8006e10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f003 0310 	and.w	r3, r3, #16
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01b      	beq.n	8006e10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f06f 0210 	mvn.w	r2, #16
 8006de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2208      	movs	r2, #8
 8006de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f940 	bl	800707c <HAL_TIM_IC_CaptureCallback>
 8006dfc:	e005      	b.n	8006e0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f932 	bl	8007068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f943 	bl	8007090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00c      	beq.n	8006e34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d007      	beq.n	8006e34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f06f 0201 	mvn.w	r2, #1
 8006e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7f9 fec4 	bl	8000bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d104      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00c      	beq.n	8006e62 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d007      	beq.n	8006e62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 faa1 	bl	80073a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00c      	beq.n	8006e86 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d007      	beq.n	8006e86 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fa99 	bl	80073b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00c      	beq.n	8006eaa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d007      	beq.n	8006eaa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f8fd 	bl	80070a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f003 0320 	and.w	r3, r3, #32
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00c      	beq.n	8006ece <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d007      	beq.n	8006ece <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f06f 0220 	mvn.w	r2, #32
 8006ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fa61 	bl	8007390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ece:	bf00      	nop
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_TIM_ConfigClockSource+0x1c>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e0b6      	b.n	8007060 <HAL_TIM_ConfigClockSource+0x18a>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2202      	movs	r2, #2
 8006efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006f10:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006f14:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f1c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f2e:	d03e      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0xd8>
 8006f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f34:	f200 8087 	bhi.w	8007046 <HAL_TIM_ConfigClockSource+0x170>
 8006f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f3c:	f000 8086 	beq.w	800704c <HAL_TIM_ConfigClockSource+0x176>
 8006f40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f44:	d87f      	bhi.n	8007046 <HAL_TIM_ConfigClockSource+0x170>
 8006f46:	2b70      	cmp	r3, #112	@ 0x70
 8006f48:	d01a      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0xaa>
 8006f4a:	2b70      	cmp	r3, #112	@ 0x70
 8006f4c:	d87b      	bhi.n	8007046 <HAL_TIM_ConfigClockSource+0x170>
 8006f4e:	2b60      	cmp	r3, #96	@ 0x60
 8006f50:	d050      	beq.n	8006ff4 <HAL_TIM_ConfigClockSource+0x11e>
 8006f52:	2b60      	cmp	r3, #96	@ 0x60
 8006f54:	d877      	bhi.n	8007046 <HAL_TIM_ConfigClockSource+0x170>
 8006f56:	2b50      	cmp	r3, #80	@ 0x50
 8006f58:	d03c      	beq.n	8006fd4 <HAL_TIM_ConfigClockSource+0xfe>
 8006f5a:	2b50      	cmp	r3, #80	@ 0x50
 8006f5c:	d873      	bhi.n	8007046 <HAL_TIM_ConfigClockSource+0x170>
 8006f5e:	2b40      	cmp	r3, #64	@ 0x40
 8006f60:	d058      	beq.n	8007014 <HAL_TIM_ConfigClockSource+0x13e>
 8006f62:	2b40      	cmp	r3, #64	@ 0x40
 8006f64:	d86f      	bhi.n	8007046 <HAL_TIM_ConfigClockSource+0x170>
 8006f66:	2b30      	cmp	r3, #48	@ 0x30
 8006f68:	d064      	beq.n	8007034 <HAL_TIM_ConfigClockSource+0x15e>
 8006f6a:	2b30      	cmp	r3, #48	@ 0x30
 8006f6c:	d86b      	bhi.n	8007046 <HAL_TIM_ConfigClockSource+0x170>
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	d060      	beq.n	8007034 <HAL_TIM_ConfigClockSource+0x15e>
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	d867      	bhi.n	8007046 <HAL_TIM_ConfigClockSource+0x170>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d05c      	beq.n	8007034 <HAL_TIM_ConfigClockSource+0x15e>
 8006f7a:	2b10      	cmp	r3, #16
 8006f7c:	d05a      	beq.n	8007034 <HAL_TIM_ConfigClockSource+0x15e>
 8006f7e:	e062      	b.n	8007046 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f90:	f000 f97e 	bl	8007290 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006fa2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	609a      	str	r2, [r3, #8]
      break;
 8006fac:	e04f      	b.n	800704e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006fbe:	f000 f967 	bl	8007290 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fd0:	609a      	str	r2, [r3, #8]
      break;
 8006fd2:	e03c      	b.n	800704e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	f000 f8d9 	bl	8007198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2150      	movs	r1, #80	@ 0x50
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 f932 	bl	8007256 <TIM_ITRx_SetConfig>
      break;
 8006ff2:	e02c      	b.n	800704e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007000:	461a      	mov	r2, r3
 8007002:	f000 f8f8 	bl	80071f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2160      	movs	r1, #96	@ 0x60
 800700c:	4618      	mov	r0, r3
 800700e:	f000 f922 	bl	8007256 <TIM_ITRx_SetConfig>
      break;
 8007012:	e01c      	b.n	800704e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007020:	461a      	mov	r2, r3
 8007022:	f000 f8b9 	bl	8007198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2140      	movs	r1, #64	@ 0x40
 800702c:	4618      	mov	r0, r3
 800702e:	f000 f912 	bl	8007256 <TIM_ITRx_SetConfig>
      break;
 8007032:	e00c      	b.n	800704e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4619      	mov	r1, r3
 800703e:	4610      	mov	r0, r2
 8007040:	f000 f909 	bl	8007256 <TIM_ITRx_SetConfig>
      break;
 8007044:	e003      	b.n	800704e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	73fb      	strb	r3, [r7, #15]
      break;
 800704a:	e000      	b.n	800704e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800704c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800705e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a30      	ldr	r2, [pc, #192]	@ (800718c <TIM_Base_SetConfig+0xd4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d003      	beq.n	80070d8 <TIM_Base_SetConfig+0x20>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070d6:	d108      	bne.n	80070ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a27      	ldr	r2, [pc, #156]	@ (800718c <TIM_Base_SetConfig+0xd4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d00b      	beq.n	800710a <TIM_Base_SetConfig+0x52>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f8:	d007      	beq.n	800710a <TIM_Base_SetConfig+0x52>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a24      	ldr	r2, [pc, #144]	@ (8007190 <TIM_Base_SetConfig+0xd8>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d003      	beq.n	800710a <TIM_Base_SetConfig+0x52>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a23      	ldr	r2, [pc, #140]	@ (8007194 <TIM_Base_SetConfig+0xdc>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d108      	bne.n	800711c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	4313      	orrs	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a12      	ldr	r2, [pc, #72]	@ (800718c <TIM_Base_SetConfig+0xd4>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d007      	beq.n	8007158 <TIM_Base_SetConfig+0xa0>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a11      	ldr	r2, [pc, #68]	@ (8007190 <TIM_Base_SetConfig+0xd8>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d003      	beq.n	8007158 <TIM_Base_SetConfig+0xa0>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a10      	ldr	r2, [pc, #64]	@ (8007194 <TIM_Base_SetConfig+0xdc>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d103      	bne.n	8007160 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	691a      	ldr	r2, [r3, #16]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b01      	cmp	r3, #1
 8007170:	d105      	bne.n	800717e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	f023 0201 	bic.w	r2, r3, #1
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	611a      	str	r2, [r3, #16]
  }
}
 800717e:	bf00      	nop
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40012c00 	.word	0x40012c00
 8007190:	40014400 	.word	0x40014400
 8007194:	40014800 	.word	0x40014800

08007198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	f023 0201 	bic.w	r2, r3, #1
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	011b      	lsls	r3, r3, #4
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f023 030a 	bic.w	r3, r3, #10
 80071d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	4313      	orrs	r3, r2
 80071dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	621a      	str	r2, [r3, #32]
}
 80071ea:	bf00      	nop
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b087      	sub	sp, #28
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	f023 0210 	bic.w	r2, r3, #16
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007220:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	031b      	lsls	r3, r3, #12
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007232:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	011b      	lsls	r3, r3, #4
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	4313      	orrs	r3, r2
 800723c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	621a      	str	r2, [r3, #32]
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007256:	b480      	push	{r7}
 8007258:	b085      	sub	sp, #20
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800726c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4313      	orrs	r3, r2
 8007278:	f043 0307 	orr.w	r3, r3, #7
 800727c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	609a      	str	r2, [r3, #8]
}
 8007284:	bf00      	nop
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	021a      	lsls	r2, r3, #8
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	431a      	orrs	r2, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	609a      	str	r2, [r3, #8]
}
 80072c4:	bf00      	nop
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e04a      	b.n	800737e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a1f      	ldr	r2, [pc, #124]	@ (800738c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d108      	bne.n	8007324 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007318:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800732a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a12      	ldr	r2, [pc, #72]	@ (800738c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d004      	beq.n	8007352 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007350:	d10c      	bne.n	800736c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007358:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	4313      	orrs	r3, r2
 8007362:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	40012c00 	.word	0x40012c00

08007390 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <LL_RCC_GetUSARTClockSource>:
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80073d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4013      	ands	r3, r2
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <LL_RCC_GetLPUARTClockSource>:
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80073f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4013      	ands	r3, r2
}
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e042      	b.n	80074a4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007424:	2b00      	cmp	r3, #0
 8007426:	d106      	bne.n	8007436 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7f9 fd1b 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2224      	movs	r2, #36	@ 0x24
 800743a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0201 	bic.w	r2, r2, #1
 800744c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fa50 	bl	80078fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f825 	bl	80074ac <UART_SetConfig>
 8007462:	4603      	mov	r3, r0
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e01b      	b.n	80074a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800747a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800748a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0201 	orr.w	r2, r2, #1
 800749a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 facf 	bl	8007a40 <UART_CheckIdleState>
 80074a2:	4603      	mov	r3, r0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074b0:	b08c      	sub	sp, #48	@ 0x30
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	431a      	orrs	r2, r3
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	4baf      	ldr	r3, [pc, #700]	@ (8007798 <UART_SetConfig+0x2ec>)
 80074dc:	4013      	ands	r3, r2
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	6812      	ldr	r2, [r2, #0]
 80074e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074e4:	430b      	orrs	r3, r1
 80074e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4aa4      	ldr	r2, [pc, #656]	@ (800779c <UART_SetConfig+0x2f0>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d004      	beq.n	8007518 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007514:	4313      	orrs	r3, r2
 8007516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007522:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	6812      	ldr	r2, [r2, #0]
 800752a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800752c:	430b      	orrs	r3, r1
 800752e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007536:	f023 010f 	bic.w	r1, r3, #15
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a95      	ldr	r2, [pc, #596]	@ (80077a0 <UART_SetConfig+0x2f4>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d125      	bne.n	800759c <UART_SetConfig+0xf0>
 8007550:	2003      	movs	r0, #3
 8007552:	f7ff ff3b 	bl	80073cc <LL_RCC_GetUSARTClockSource>
 8007556:	4603      	mov	r3, r0
 8007558:	2b03      	cmp	r3, #3
 800755a:	d81b      	bhi.n	8007594 <UART_SetConfig+0xe8>
 800755c:	a201      	add	r2, pc, #4	@ (adr r2, 8007564 <UART_SetConfig+0xb8>)
 800755e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007562:	bf00      	nop
 8007564:	08007575 	.word	0x08007575
 8007568:	08007585 	.word	0x08007585
 800756c:	0800757d 	.word	0x0800757d
 8007570:	0800758d 	.word	0x0800758d
 8007574:	2301      	movs	r3, #1
 8007576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800757a:	e042      	b.n	8007602 <UART_SetConfig+0x156>
 800757c:	2302      	movs	r3, #2
 800757e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007582:	e03e      	b.n	8007602 <UART_SetConfig+0x156>
 8007584:	2304      	movs	r3, #4
 8007586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800758a:	e03a      	b.n	8007602 <UART_SetConfig+0x156>
 800758c:	2308      	movs	r3, #8
 800758e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007592:	e036      	b.n	8007602 <UART_SetConfig+0x156>
 8007594:	2310      	movs	r3, #16
 8007596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800759a:	e032      	b.n	8007602 <UART_SetConfig+0x156>
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a7e      	ldr	r2, [pc, #504]	@ (800779c <UART_SetConfig+0x2f0>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d12a      	bne.n	80075fc <UART_SetConfig+0x150>
 80075a6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80075aa:	f7ff ff1f 	bl	80073ec <LL_RCC_GetLPUARTClockSource>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075b4:	d01a      	beq.n	80075ec <UART_SetConfig+0x140>
 80075b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075ba:	d81b      	bhi.n	80075f4 <UART_SetConfig+0x148>
 80075bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075c0:	d00c      	beq.n	80075dc <UART_SetConfig+0x130>
 80075c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075c6:	d815      	bhi.n	80075f4 <UART_SetConfig+0x148>
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <UART_SetConfig+0x128>
 80075cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075d0:	d008      	beq.n	80075e4 <UART_SetConfig+0x138>
 80075d2:	e00f      	b.n	80075f4 <UART_SetConfig+0x148>
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075da:	e012      	b.n	8007602 <UART_SetConfig+0x156>
 80075dc:	2302      	movs	r3, #2
 80075de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075e2:	e00e      	b.n	8007602 <UART_SetConfig+0x156>
 80075e4:	2304      	movs	r3, #4
 80075e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ea:	e00a      	b.n	8007602 <UART_SetConfig+0x156>
 80075ec:	2308      	movs	r3, #8
 80075ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075f2:	e006      	b.n	8007602 <UART_SetConfig+0x156>
 80075f4:	2310      	movs	r3, #16
 80075f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075fa:	e002      	b.n	8007602 <UART_SetConfig+0x156>
 80075fc:	2310      	movs	r3, #16
 80075fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a65      	ldr	r2, [pc, #404]	@ (800779c <UART_SetConfig+0x2f0>)
 8007608:	4293      	cmp	r3, r2
 800760a:	f040 8097 	bne.w	800773c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800760e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007612:	2b08      	cmp	r3, #8
 8007614:	d823      	bhi.n	800765e <UART_SetConfig+0x1b2>
 8007616:	a201      	add	r2, pc, #4	@ (adr r2, 800761c <UART_SetConfig+0x170>)
 8007618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761c:	08007641 	.word	0x08007641
 8007620:	0800765f 	.word	0x0800765f
 8007624:	08007649 	.word	0x08007649
 8007628:	0800765f 	.word	0x0800765f
 800762c:	0800764f 	.word	0x0800764f
 8007630:	0800765f 	.word	0x0800765f
 8007634:	0800765f 	.word	0x0800765f
 8007638:	0800765f 	.word	0x0800765f
 800763c:	08007657 	.word	0x08007657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007640:	f7fe fd66 	bl	8006110 <HAL_RCC_GetPCLK1Freq>
 8007644:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007646:	e010      	b.n	800766a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007648:	4b56      	ldr	r3, [pc, #344]	@ (80077a4 <UART_SetConfig+0x2f8>)
 800764a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800764c:	e00d      	b.n	800766a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800764e:	f7fe fcdf 	bl	8006010 <HAL_RCC_GetSysClockFreq>
 8007652:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007654:	e009      	b.n	800766a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800765a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800765c:	e005      	b.n	800766a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800765e:	2300      	movs	r3, #0
 8007660:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007668:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800766a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 812b 	beq.w	80078c8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007676:	4a4c      	ldr	r2, [pc, #304]	@ (80077a8 <UART_SetConfig+0x2fc>)
 8007678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800767c:	461a      	mov	r2, r3
 800767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007680:	fbb3 f3f2 	udiv	r3, r3, r2
 8007684:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	4413      	add	r3, r2
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	429a      	cmp	r2, r3
 8007694:	d305      	bcc.n	80076a2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d903      	bls.n	80076aa <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076a8:	e10e      	b.n	80078c8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	2200      	movs	r2, #0
 80076ae:	60bb      	str	r3, [r7, #8]
 80076b0:	60fa      	str	r2, [r7, #12]
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b6:	4a3c      	ldr	r2, [pc, #240]	@ (80077a8 <UART_SetConfig+0x2fc>)
 80076b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2200      	movs	r2, #0
 80076c0:	603b      	str	r3, [r7, #0]
 80076c2:	607a      	str	r2, [r7, #4]
 80076c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076cc:	f7f8 fda8 	bl	8000220 <__aeabi_uldivmod>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4610      	mov	r0, r2
 80076d6:	4619      	mov	r1, r3
 80076d8:	f04f 0200 	mov.w	r2, #0
 80076dc:	f04f 0300 	mov.w	r3, #0
 80076e0:	020b      	lsls	r3, r1, #8
 80076e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076e6:	0202      	lsls	r2, r0, #8
 80076e8:	6979      	ldr	r1, [r7, #20]
 80076ea:	6849      	ldr	r1, [r1, #4]
 80076ec:	0849      	lsrs	r1, r1, #1
 80076ee:	2000      	movs	r0, #0
 80076f0:	460c      	mov	r4, r1
 80076f2:	4605      	mov	r5, r0
 80076f4:	eb12 0804 	adds.w	r8, r2, r4
 80076f8:	eb43 0905 	adc.w	r9, r3, r5
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	469a      	mov	sl, r3
 8007704:	4693      	mov	fp, r2
 8007706:	4652      	mov	r2, sl
 8007708:	465b      	mov	r3, fp
 800770a:	4640      	mov	r0, r8
 800770c:	4649      	mov	r1, r9
 800770e:	f7f8 fd87 	bl	8000220 <__aeabi_uldivmod>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	4613      	mov	r3, r2
 8007718:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007720:	d308      	bcc.n	8007734 <UART_SetConfig+0x288>
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007728:	d204      	bcs.n	8007734 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6a3a      	ldr	r2, [r7, #32]
 8007730:	60da      	str	r2, [r3, #12]
 8007732:	e0c9      	b.n	80078c8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800773a:	e0c5      	b.n	80078c8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	69db      	ldr	r3, [r3, #28]
 8007740:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007744:	d16d      	bne.n	8007822 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007746:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800774a:	3b01      	subs	r3, #1
 800774c:	2b07      	cmp	r3, #7
 800774e:	d82d      	bhi.n	80077ac <UART_SetConfig+0x300>
 8007750:	a201      	add	r2, pc, #4	@ (adr r2, 8007758 <UART_SetConfig+0x2ac>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	08007779 	.word	0x08007779
 800775c:	08007781 	.word	0x08007781
 8007760:	080077ad 	.word	0x080077ad
 8007764:	08007787 	.word	0x08007787
 8007768:	080077ad 	.word	0x080077ad
 800776c:	080077ad 	.word	0x080077ad
 8007770:	080077ad 	.word	0x080077ad
 8007774:	0800778f 	.word	0x0800778f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007778:	f7fe fce0 	bl	800613c <HAL_RCC_GetPCLK2Freq>
 800777c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800777e:	e01b      	b.n	80077b8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007780:	4b08      	ldr	r3, [pc, #32]	@ (80077a4 <UART_SetConfig+0x2f8>)
 8007782:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007784:	e018      	b.n	80077b8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007786:	f7fe fc43 	bl	8006010 <HAL_RCC_GetSysClockFreq>
 800778a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800778c:	e014      	b.n	80077b8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800778e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007792:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007794:	e010      	b.n	80077b8 <UART_SetConfig+0x30c>
 8007796:	bf00      	nop
 8007798:	cfff69f3 	.word	0xcfff69f3
 800779c:	40008000 	.word	0x40008000
 80077a0:	40013800 	.word	0x40013800
 80077a4:	00f42400 	.word	0x00f42400
 80077a8:	08011e14 	.word	0x08011e14
      default:
        pclk = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80077b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 8084 	beq.w	80078c8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c4:	4a4b      	ldr	r2, [pc, #300]	@ (80078f4 <UART_SetConfig+0x448>)
 80077c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077ca:	461a      	mov	r2, r3
 80077cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80077d2:	005a      	lsls	r2, r3, #1
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	085b      	lsrs	r3, r3, #1
 80077da:	441a      	add	r2, r3
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	2b0f      	cmp	r3, #15
 80077ea:	d916      	bls.n	800781a <UART_SetConfig+0x36e>
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077f2:	d212      	bcs.n	800781a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	f023 030f 	bic.w	r3, r3, #15
 80077fc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	085b      	lsrs	r3, r3, #1
 8007802:	b29b      	uxth	r3, r3
 8007804:	f003 0307 	and.w	r3, r3, #7
 8007808:	b29a      	uxth	r2, r3
 800780a:	8bfb      	ldrh	r3, [r7, #30]
 800780c:	4313      	orrs	r3, r2
 800780e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	8bfa      	ldrh	r2, [r7, #30]
 8007816:	60da      	str	r2, [r3, #12]
 8007818:	e056      	b.n	80078c8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007820:	e052      	b.n	80078c8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007822:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007826:	3b01      	subs	r3, #1
 8007828:	2b07      	cmp	r3, #7
 800782a:	d822      	bhi.n	8007872 <UART_SetConfig+0x3c6>
 800782c:	a201      	add	r2, pc, #4	@ (adr r2, 8007834 <UART_SetConfig+0x388>)
 800782e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007832:	bf00      	nop
 8007834:	08007855 	.word	0x08007855
 8007838:	0800785d 	.word	0x0800785d
 800783c:	08007873 	.word	0x08007873
 8007840:	08007863 	.word	0x08007863
 8007844:	08007873 	.word	0x08007873
 8007848:	08007873 	.word	0x08007873
 800784c:	08007873 	.word	0x08007873
 8007850:	0800786b 	.word	0x0800786b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007854:	f7fe fc72 	bl	800613c <HAL_RCC_GetPCLK2Freq>
 8007858:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800785a:	e010      	b.n	800787e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800785c:	4b26      	ldr	r3, [pc, #152]	@ (80078f8 <UART_SetConfig+0x44c>)
 800785e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007860:	e00d      	b.n	800787e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007862:	f7fe fbd5 	bl	8006010 <HAL_RCC_GetSysClockFreq>
 8007866:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007868:	e009      	b.n	800787e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800786a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800786e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007870:	e005      	b.n	800787e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007872:	2300      	movs	r3, #0
 8007874:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800787c:	bf00      	nop
    }

    if (pclk != 0U)
 800787e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007880:	2b00      	cmp	r3, #0
 8007882:	d021      	beq.n	80078c8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007888:	4a1a      	ldr	r2, [pc, #104]	@ (80078f4 <UART_SetConfig+0x448>)
 800788a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800788e:	461a      	mov	r2, r3
 8007890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007892:	fbb3 f2f2 	udiv	r2, r3, r2
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	085b      	lsrs	r3, r3, #1
 800789c:	441a      	add	r2, r3
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	2b0f      	cmp	r3, #15
 80078ac:	d909      	bls.n	80078c2 <UART_SetConfig+0x416>
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078b4:	d205      	bcs.n	80078c2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60da      	str	r2, [r3, #12]
 80078c0:	e002      	b.n	80078c8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	2200      	movs	r2, #0
 80078dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	2200      	movs	r2, #0
 80078e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80078e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3730      	adds	r7, #48	@ 0x30
 80078ec:	46bd      	mov	sp, r7
 80078ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078f2:	bf00      	nop
 80078f4:	08011e14 	.word	0x08011e14
 80078f8:	00f42400 	.word	0x00f42400

080078fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007908:	f003 0308 	and.w	r3, r3, #8
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00a      	beq.n	8007926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	430a      	orrs	r2, r1
 8007946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00a      	beq.n	800796a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800796e:	f003 0304 	and.w	r3, r3, #4
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007990:	f003 0310 	and.w	r3, r3, #16
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00a      	beq.n	80079ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b2:	f003 0320 	and.w	r3, r3, #32
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00a      	beq.n	80079d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01a      	beq.n	8007a12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079fa:	d10a      	bne.n	8007a12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00a      	beq.n	8007a34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	605a      	str	r2, [r3, #4]
  }
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b098      	sub	sp, #96	@ 0x60
 8007a44:	af02      	add	r7, sp, #8
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a50:	f7f9 fc6a 	bl	8001328 <HAL_GetTick>
 8007a54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0308 	and.w	r3, r3, #8
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d12f      	bne.n	8007ac4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f88e 	bl	8007b94 <UART_WaitOnFlagUntilTimeout>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d022      	beq.n	8007ac4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a92:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007aa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e6      	bne.n	8007a7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e063      	b.n	8007b8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0304 	and.w	r3, r3, #4
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d149      	bne.n	8007b66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ad2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ada:	2200      	movs	r2, #0
 8007adc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f857 	bl	8007b94 <UART_WaitOnFlagUntilTimeout>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d03c      	beq.n	8007b66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af4:	e853 3f00 	ldrex	r3, [r3]
 8007af8:	623b      	str	r3, [r7, #32]
   return(result);
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e6      	bne.n	8007aec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3308      	adds	r3, #8
 8007b24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f023 0301 	bic.w	r3, r3, #1
 8007b34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b3e:	61fa      	str	r2, [r7, #28]
 8007b40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	69b9      	ldr	r1, [r7, #24]
 8007b44:	69fa      	ldr	r2, [r7, #28]
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	617b      	str	r3, [r7, #20]
   return(result);
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e5      	bne.n	8007b1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e012      	b.n	8007b8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3758      	adds	r7, #88	@ 0x58
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	603b      	str	r3, [r7, #0]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ba4:	e04f      	b.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bac:	d04b      	beq.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bae:	f7f9 fbbb 	bl	8001328 <HAL_GetTick>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d302      	bcc.n	8007bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e04e      	b.n	8007c66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0304 	and.w	r3, r3, #4
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d037      	beq.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2b80      	cmp	r3, #128	@ 0x80
 8007bda:	d034      	beq.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2b40      	cmp	r3, #64	@ 0x40
 8007be0:	d031      	beq.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	f003 0308 	and.w	r3, r3, #8
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d110      	bne.n	8007c12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2208      	movs	r2, #8
 8007bf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 f838 	bl	8007c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2208      	movs	r2, #8
 8007c02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e029      	b.n	8007c66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c20:	d111      	bne.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 f81e 	bl	8007c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e00f      	b.n	8007c66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	69da      	ldr	r2, [r3, #28]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	4013      	ands	r3, r2
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	bf0c      	ite	eq
 8007c56:	2301      	moveq	r3, #1
 8007c58:	2300      	movne	r3, #0
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	79fb      	ldrb	r3, [r7, #7]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d0a0      	beq.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b095      	sub	sp, #84	@ 0x54
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	461a      	mov	r2, r3
 8007c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c94:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e6      	bne.n	8007c76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3308      	adds	r3, #8
 8007cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cbe:	f023 0301 	bic.w	r3, r3, #1
 8007cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3308      	adds	r3, #8
 8007cca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ccc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cd4:	e841 2300 	strex	r3, r2, [r1]
 8007cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1e3      	bne.n	8007ca8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d118      	bne.n	8007d1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f023 0310 	bic.w	r3, r3, #16
 8007cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d06:	61bb      	str	r3, [r7, #24]
 8007d08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	6979      	ldr	r1, [r7, #20]
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	613b      	str	r3, [r7, #16]
   return(result);
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e6      	bne.n	8007ce8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007d2e:	bf00      	nop
 8007d30:	3754      	adds	r7, #84	@ 0x54
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b085      	sub	sp, #20
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d101      	bne.n	8007d50 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e027      	b.n	8007da0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2224      	movs	r2, #36	@ 0x24
 8007d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 0201 	bic.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007d7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d101      	bne.n	8007dc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e02d      	b.n	8007e20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2224      	movs	r2, #36	@ 0x24
 8007dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f022 0201 	bic.w	r2, r2, #1
 8007dea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f84f 	bl	8007ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d101      	bne.n	8007e40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e02d      	b.n	8007e9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2224      	movs	r2, #36	@ 0x24
 8007e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0201 	bic.w	r2, r2, #1
 8007e66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f811 	bl	8007ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d108      	bne.n	8007ec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ec4:	e031      	b.n	8007f2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ec6:	2308      	movs	r3, #8
 8007ec8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007eca:	2308      	movs	r3, #8
 8007ecc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	0e5b      	lsrs	r3, r3, #25
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	f003 0307 	and.w	r3, r3, #7
 8007edc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	0f5b      	lsrs	r3, r3, #29
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	f003 0307 	and.w	r3, r3, #7
 8007eec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	7b3a      	ldrb	r2, [r7, #12]
 8007ef2:	4911      	ldr	r1, [pc, #68]	@ (8007f38 <UARTEx_SetNbDataToProcess+0x94>)
 8007ef4:	5c8a      	ldrb	r2, [r1, r2]
 8007ef6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007efa:	7b3a      	ldrb	r2, [r7, #12]
 8007efc:	490f      	ldr	r1, [pc, #60]	@ (8007f3c <UARTEx_SetNbDataToProcess+0x98>)
 8007efe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f00:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	7b7a      	ldrb	r2, [r7, #13]
 8007f10:	4909      	ldr	r1, [pc, #36]	@ (8007f38 <UARTEx_SetNbDataToProcess+0x94>)
 8007f12:	5c8a      	ldrb	r2, [r1, r2]
 8007f14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f18:	7b7a      	ldrb	r2, [r7, #13]
 8007f1a:	4908      	ldr	r1, [pc, #32]	@ (8007f3c <UARTEx_SetNbDataToProcess+0x98>)
 8007f1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007f2a:	bf00      	nop
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	08011e2c 	.word	0x08011e2c
 8007f3c:	08011e34 	.word	0x08011e34

08007f40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007f50:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007f54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b085      	sub	sp, #20
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007f76:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007f7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	43db      	mvns	r3, r3
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3714      	adds	r7, #20
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	1d3b      	adds	r3, r7, #4
 8007fae:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b09d      	sub	sp, #116	@ 0x74
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	881b      	ldrh	r3, [r3, #0]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008006:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	78db      	ldrb	r3, [r3, #3]
 800800e:	2b03      	cmp	r3, #3
 8008010:	d81f      	bhi.n	8008052 <USB_ActivateEndpoint+0x72>
 8008012:	a201      	add	r2, pc, #4	@ (adr r2, 8008018 <USB_ActivateEndpoint+0x38>)
 8008014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008018:	08008029 	.word	0x08008029
 800801c:	08008045 	.word	0x08008045
 8008020:	0800805b 	.word	0x0800805b
 8008024:	08008037 	.word	0x08008037
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008028:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800802c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008030:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008034:	e012      	b.n	800805c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008036:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800803a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800803e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008042:	e00b      	b.n	800805c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008044:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008048:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800804c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008050:	e004      	b.n	800805c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8008058:	e000      	b.n	800805c <USB_ActivateEndpoint+0x7c>
      break;
 800805a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	441a      	add	r2, r3
 8008066:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800806a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800806e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800807a:	b29b      	uxth	r3, r3
 800807c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	881b      	ldrh	r3, [r3, #0]
 800808a:	b29b      	uxth	r3, r3
 800808c:	b21b      	sxth	r3, r3
 800808e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008096:	b21a      	sxth	r2, r3
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	b21b      	sxth	r3, r3
 800809e:	4313      	orrs	r3, r2
 80080a0:	b21b      	sxth	r3, r3
 80080a2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	441a      	add	r2, r3
 80080b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80080b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	7b1b      	ldrb	r3, [r3, #12]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f040 8178 	bne.w	80083c2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	785b      	ldrb	r3, [r3, #1]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 8084 	beq.w	80081e4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	61bb      	str	r3, [r7, #24]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	461a      	mov	r2, r3
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	4413      	add	r3, r2
 80080ee:	61bb      	str	r3, [r7, #24]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	00da      	lsls	r2, r3, #3
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080fe:	617b      	str	r3, [r7, #20]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	88db      	ldrh	r3, [r3, #6]
 8008104:	085b      	lsrs	r3, r3, #1
 8008106:	b29b      	uxth	r3, r3
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	b29a      	uxth	r2, r3
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	827b      	strh	r3, [r7, #18]
 800811e:	8a7b      	ldrh	r3, [r7, #18]
 8008120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01b      	beq.n	8008160 <USB_ActivateEndpoint+0x180>
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	b29b      	uxth	r3, r3
 8008136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800813a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800813e:	823b      	strh	r3, [r7, #16]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	441a      	add	r2, r3
 800814a:	8a3b      	ldrh	r3, [r7, #16]
 800814c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008150:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008158:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800815c:	b29b      	uxth	r3, r3
 800815e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	78db      	ldrb	r3, [r3, #3]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d020      	beq.n	80081aa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	b29b      	uxth	r3, r3
 8008176:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800817a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800817e:	81bb      	strh	r3, [r7, #12]
 8008180:	89bb      	ldrh	r3, [r7, #12]
 8008182:	f083 0320 	eor.w	r3, r3, #32
 8008186:	81bb      	strh	r3, [r7, #12]
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	441a      	add	r2, r3
 8008192:	89bb      	ldrh	r3, [r7, #12]
 8008194:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008198:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800819c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	8013      	strh	r3, [r2, #0]
 80081a8:	e2d5      	b.n	8008756 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	881b      	ldrh	r3, [r3, #0]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081c0:	81fb      	strh	r3, [r7, #14]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	441a      	add	r2, r3
 80081cc:	89fb      	ldrh	r3, [r7, #14]
 80081ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081de:	b29b      	uxth	r3, r3
 80081e0:	8013      	strh	r3, [r2, #0]
 80081e2:	e2b8      	b.n	8008756 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	461a      	mov	r2, r3
 80081f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f4:	4413      	add	r3, r2
 80081f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	00da      	lsls	r2, r3, #3
 80081fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008200:	4413      	add	r3, r2
 8008202:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	88db      	ldrh	r3, [r3, #6]
 800820c:	085b      	lsrs	r3, r3, #1
 800820e:	b29b      	uxth	r3, r3
 8008210:	005b      	lsls	r3, r3, #1
 8008212:	b29a      	uxth	r2, r3
 8008214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008216:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008222:	b29b      	uxth	r3, r3
 8008224:	461a      	mov	r2, r3
 8008226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008228:	4413      	add	r3, r2
 800822a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	00da      	lsls	r2, r3, #3
 8008232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008234:	4413      	add	r3, r2
 8008236:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800823a:	627b      	str	r3, [r7, #36]	@ 0x24
 800823c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	b29b      	uxth	r3, r3
 8008242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008246:	b29a      	uxth	r2, r3
 8008248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824a:	801a      	strh	r2, [r3, #0]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	2b3e      	cmp	r3, #62	@ 0x3e
 8008252:	d91d      	bls.n	8008290 <USB_ActivateEndpoint+0x2b0>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	095b      	lsrs	r3, r3, #5
 800825a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	f003 031f 	and.w	r3, r3, #31
 8008264:	2b00      	cmp	r3, #0
 8008266:	d102      	bne.n	800826e <USB_ActivateEndpoint+0x28e>
 8008268:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800826a:	3b01      	subs	r3, #1
 800826c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800826e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b29a      	uxth	r2, r3
 8008274:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008276:	b29b      	uxth	r3, r3
 8008278:	029b      	lsls	r3, r3, #10
 800827a:	b29b      	uxth	r3, r3
 800827c:	4313      	orrs	r3, r2
 800827e:	b29b      	uxth	r3, r3
 8008280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008288:	b29a      	uxth	r2, r3
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828c:	801a      	strh	r2, [r3, #0]
 800828e:	e026      	b.n	80082de <USB_ActivateEndpoint+0x2fe>
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10a      	bne.n	80082ae <USB_ActivateEndpoint+0x2ce>
 8008298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	b29b      	uxth	r3, r3
 800829e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082aa:	801a      	strh	r2, [r3, #0]
 80082ac:	e017      	b.n	80082de <USB_ActivateEndpoint+0x2fe>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	085b      	lsrs	r3, r3, #1
 80082b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d002      	beq.n	80082c8 <USB_ActivateEndpoint+0x2e8>
 80082c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082c4:	3301      	adds	r3, #1
 80082c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	029b      	lsls	r3, r3, #10
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	4313      	orrs	r3, r2
 80082d8:	b29a      	uxth	r2, r3
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	847b      	strh	r3, [r7, #34]	@ 0x22
 80082ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80082ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d01b      	beq.n	800832e <USB_ActivateEndpoint+0x34e>
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008308:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800830c:	843b      	strh	r3, [r7, #32]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	441a      	add	r2, r3
 8008318:	8c3b      	ldrh	r3, [r7, #32]
 800831a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800831e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008322:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800832a:	b29b      	uxth	r3, r3
 800832c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d124      	bne.n	8008380 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800834c:	83bb      	strh	r3, [r7, #28]
 800834e:	8bbb      	ldrh	r3, [r7, #28]
 8008350:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008354:	83bb      	strh	r3, [r7, #28]
 8008356:	8bbb      	ldrh	r3, [r7, #28]
 8008358:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800835c:	83bb      	strh	r3, [r7, #28]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	441a      	add	r2, r3
 8008368:	8bbb      	ldrh	r3, [r7, #28]
 800836a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800836e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800837a:	b29b      	uxth	r3, r3
 800837c:	8013      	strh	r3, [r2, #0]
 800837e:	e1ea      	b.n	8008756 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	b29b      	uxth	r3, r3
 800838e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008396:	83fb      	strh	r3, [r7, #30]
 8008398:	8bfb      	ldrh	r3, [r7, #30]
 800839a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800839e:	83fb      	strh	r3, [r7, #30]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	441a      	add	r2, r3
 80083aa:	8bfb      	ldrh	r3, [r7, #30]
 80083ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083bc:	b29b      	uxth	r3, r3
 80083be:	8013      	strh	r3, [r2, #0]
 80083c0:	e1c9      	b.n	8008756 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	78db      	ldrb	r3, [r3, #3]
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d11e      	bne.n	8008408 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083e0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	441a      	add	r2, r3
 80083ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80083f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083fa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80083fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008402:	b29b      	uxth	r3, r3
 8008404:	8013      	strh	r3, [r2, #0]
 8008406:	e01d      	b.n	8008444 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	b29b      	uxth	r3, r3
 8008416:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800841a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800841e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	441a      	add	r2, r3
 800842c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008430:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008434:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008438:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800843c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008440:	b29b      	uxth	r3, r3
 8008442:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800844e:	b29b      	uxth	r3, r3
 8008450:	461a      	mov	r2, r3
 8008452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008454:	4413      	add	r3, r2
 8008456:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	00da      	lsls	r2, r3, #3
 800845e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008460:	4413      	add	r3, r2
 8008462:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008466:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	891b      	ldrh	r3, [r3, #8]
 800846c:	085b      	lsrs	r3, r3, #1
 800846e:	b29b      	uxth	r3, r3
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	b29a      	uxth	r2, r3
 8008474:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008476:	801a      	strh	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	657b      	str	r3, [r7, #84]	@ 0x54
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008482:	b29b      	uxth	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008488:	4413      	add	r3, r2
 800848a:	657b      	str	r3, [r7, #84]	@ 0x54
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	00da      	lsls	r2, r3, #3
 8008492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008494:	4413      	add	r3, r2
 8008496:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800849a:	653b      	str	r3, [r7, #80]	@ 0x50
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	895b      	ldrh	r3, [r3, #10]
 80084a0:	085b      	lsrs	r3, r3, #1
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084aa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	785b      	ldrb	r3, [r3, #1]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f040 8093 	bne.w	80085dc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80084c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80084ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d01b      	beq.n	800850a <USB_ActivateEndpoint+0x52a>
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084e8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	441a      	add	r2, r3
 80084f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80084f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008506:	b29b      	uxth	r3, r3
 8008508:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008518:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800851a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800851e:	2b00      	cmp	r3, #0
 8008520:	d01b      	beq.n	800855a <USB_ActivateEndpoint+0x57a>
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	b29b      	uxth	r3, r3
 8008530:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008538:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	441a      	add	r2, r3
 8008544:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800854a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800854e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008552:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008556:	b29b      	uxth	r3, r3
 8008558:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29b      	uxth	r3, r3
 8008568:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800856c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008570:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008572:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008574:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008578:	873b      	strh	r3, [r7, #56]	@ 0x38
 800857a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800857c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008580:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	441a      	add	r2, r3
 800858c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800858e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800859a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800859e:	b29b      	uxth	r3, r3
 80085a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	441a      	add	r2, r3
 80085c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80085c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	8013      	strh	r3, [r2, #0]
 80085da:	e0bc      	b.n	8008756 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80085ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80085f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d01d      	beq.n	8008634 <USB_ActivateEndpoint+0x654>
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	b29b      	uxth	r3, r3
 8008606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800860a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800860e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	441a      	add	r2, r3
 800861c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008620:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008624:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008628:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800862c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008630:	b29b      	uxth	r3, r3
 8008632:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008644:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800864c:	2b00      	cmp	r3, #0
 800864e:	d01d      	beq.n	800868c <USB_ActivateEndpoint+0x6ac>
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	b29b      	uxth	r3, r3
 800865e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008666:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	441a      	add	r2, r3
 8008674:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008678:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800867c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008680:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008684:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008688:	b29b      	uxth	r3, r3
 800868a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	78db      	ldrb	r3, [r3, #3]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d024      	beq.n	80086de <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086aa:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80086ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80086b2:	f083 0320 	eor.w	r3, r3, #32
 80086b6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	441a      	add	r2, r3
 80086c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80086c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086d8:	b29b      	uxth	r3, r3
 80086da:	8013      	strh	r3, [r2, #0]
 80086dc:	e01d      	b.n	800871a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	881b      	ldrh	r3, [r3, #0]
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086f4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	441a      	add	r2, r3
 8008702:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008706:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800870a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800870e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008716:	b29b      	uxth	r3, r3
 8008718:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	b29b      	uxth	r3, r3
 8008728:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800872c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008730:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	441a      	add	r2, r3
 800873e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008742:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008746:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800874a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800874e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008752:	b29b      	uxth	r3, r3
 8008754:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008756:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800875a:	4618      	mov	r0, r3
 800875c:	3774      	adds	r7, #116	@ 0x74
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop

08008768 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008768:	b480      	push	{r7}
 800876a:	b08d      	sub	sp, #52	@ 0x34
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	7b1b      	ldrb	r3, [r3, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	f040 808e 	bne.w	8008898 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	785b      	ldrb	r3, [r3, #1]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d044      	beq.n	800880e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	881b      	ldrh	r3, [r3, #0]
 8008790:	81bb      	strh	r3, [r7, #12]
 8008792:	89bb      	ldrh	r3, [r7, #12]
 8008794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01b      	beq.n	80087d4 <USB_DeactivateEndpoint+0x6c>
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087b2:	817b      	strh	r3, [r7, #10]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	441a      	add	r2, r3
 80087be:	897b      	ldrh	r3, [r7, #10]
 80087c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087ea:	813b      	strh	r3, [r7, #8]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	441a      	add	r2, r3
 80087f6:	893b      	ldrh	r3, [r7, #8]
 80087f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008808:	b29b      	uxth	r3, r3
 800880a:	8013      	strh	r3, [r2, #0]
 800880c:	e192      	b.n	8008b34 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	827b      	strh	r3, [r7, #18]
 800881c:	8a7b      	ldrh	r3, [r7, #18]
 800881e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d01b      	beq.n	800885e <USB_DeactivateEndpoint+0xf6>
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	b29b      	uxth	r3, r3
 8008834:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800883c:	823b      	strh	r3, [r7, #16]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	441a      	add	r2, r3
 8008848:	8a3b      	ldrh	r3, [r7, #16]
 800884a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800884e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008852:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800885a:	b29b      	uxth	r3, r3
 800885c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	881b      	ldrh	r3, [r3, #0]
 800886a:	b29b      	uxth	r3, r3
 800886c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008874:	81fb      	strh	r3, [r7, #14]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	441a      	add	r2, r3
 8008880:	89fb      	ldrh	r3, [r7, #14]
 8008882:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008886:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800888a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800888e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008892:	b29b      	uxth	r3, r3
 8008894:	8013      	strh	r3, [r2, #0]
 8008896:	e14d      	b.n	8008b34 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	785b      	ldrb	r3, [r3, #1]
 800889c:	2b00      	cmp	r3, #0
 800889e:	f040 80a5 	bne.w	80089ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	881b      	ldrh	r3, [r3, #0]
 80088ae:	843b      	strh	r3, [r7, #32]
 80088b0:	8c3b      	ldrh	r3, [r7, #32]
 80088b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d01b      	beq.n	80088f2 <USB_DeactivateEndpoint+0x18a>
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	881b      	ldrh	r3, [r3, #0]
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088d0:	83fb      	strh	r3, [r7, #30]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	441a      	add	r2, r3
 80088dc:	8bfb      	ldrh	r3, [r7, #30]
 80088de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80088ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	83bb      	strh	r3, [r7, #28]
 8008900:	8bbb      	ldrh	r3, [r7, #28]
 8008902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008906:	2b00      	cmp	r3, #0
 8008908:	d01b      	beq.n	8008942 <USB_DeactivateEndpoint+0x1da>
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	b29b      	uxth	r3, r3
 8008918:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800891c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008920:	837b      	strh	r3, [r7, #26]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	441a      	add	r2, r3
 800892c:	8b7b      	ldrh	r3, [r7, #26]
 800892e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800893a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800893e:	b29b      	uxth	r3, r3
 8008940:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	b29b      	uxth	r3, r3
 8008950:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008954:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008958:	833b      	strh	r3, [r7, #24]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	441a      	add	r2, r3
 8008964:	8b3b      	ldrh	r3, [r7, #24]
 8008966:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800896a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800896e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008972:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008976:	b29b      	uxth	r3, r3
 8008978:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	b29b      	uxth	r3, r3
 8008988:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800898c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008990:	82fb      	strh	r3, [r7, #22]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	441a      	add	r2, r3
 800899c:	8afb      	ldrh	r3, [r7, #22]
 800899e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	881b      	ldrh	r3, [r3, #0]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089c8:	82bb      	strh	r3, [r7, #20]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	441a      	add	r2, r3
 80089d4:	8abb      	ldrh	r3, [r7, #20]
 80089d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	8013      	strh	r3, [r2, #0]
 80089ea:	e0a3      	b.n	8008b34 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80089fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80089fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d01b      	beq.n	8008a3c <USB_DeactivateEndpoint+0x2d4>
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a1a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	441a      	add	r2, r3
 8008a26:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008a28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008a4a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d01b      	beq.n	8008a8c <USB_DeactivateEndpoint+0x324>
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	881b      	ldrh	r3, [r3, #0]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a6a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	441a      	add	r2, r3
 8008a76:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008a78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aa2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	441a      	add	r2, r3
 8008aae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008ab0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ab4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ab8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ad6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ada:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	441a      	add	r2, r3
 8008ae6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ae8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008af0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b12:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	441a      	add	r2, r3
 8008b1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008b20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3734      	adds	r7, #52	@ 0x34
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b0c2      	sub	sp, #264	@ 0x108
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b50:	6018      	str	r0, [r3, #0]
 8008b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b5a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	785b      	ldrb	r3, [r3, #1]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	f040 86b7 	bne.w	80098dc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	699a      	ldr	r2, [r3, #24]
 8008b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d908      	bls.n	8008b9c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008b9a:	e007      	b.n	8008bac <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	7b1b      	ldrb	r3, [r3, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d13a      	bne.n	8008c32 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6959      	ldr	r1, [r3, #20]
 8008bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	88da      	ldrh	r2, [r3, #6]
 8008bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008bde:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008be2:	6800      	ldr	r0, [r0, #0]
 8008be4:	f001 fc98 	bl	800a518 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	613b      	str	r3, [r7, #16]
 8008bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	461a      	mov	r2, r3
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	4413      	add	r3, r2
 8008c0a:	613b      	str	r3, [r7, #16]
 8008c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	00da      	lsls	r2, r3, #3
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	801a      	strh	r2, [r3, #0]
 8008c2e:	f000 be1f 	b.w	8009870 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	78db      	ldrb	r3, [r3, #3]
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	f040 8462 	bne.w	8009508 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6a1a      	ldr	r2, [r3, #32]
 8008c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	f240 83df 	bls.w	8009420 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	881b      	ldrh	r3, [r3, #0]
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c88:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	441a      	add	r2, r3
 8008ca6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008caa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cb2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6a1a      	ldr	r2, [r3, #32]
 8008cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cce:	1ad2      	subs	r2, r2, r3
 8008cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	881b      	ldrh	r3, [r3, #0]
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 81c7 	beq.w	8009092 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	785b      	ldrb	r3, [r3, #1]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d177      	bne.n	8008e10 <USB_EPStartXfer+0x2ce>
 8008d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d40:	4413      	add	r3, r2
 8008d42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	00da      	lsls	r2, r3, #3
 8008d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d54:	4413      	add	r3, r2
 8008d56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5e:	881b      	ldrh	r3, [r3, #0]
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6a:	801a      	strh	r2, [r3, #0]
 8008d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d70:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d72:	d921      	bls.n	8008db8 <USB_EPStartXfer+0x276>
 8008d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d78:	095b      	lsrs	r3, r3, #5
 8008d7a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d82:	f003 031f 	and.w	r3, r3, #31
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d104      	bne.n	8008d94 <USB_EPStartXfer+0x252>
 8008d8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	029b      	lsls	r3, r3, #10
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	4313      	orrs	r3, r2
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db4:	801a      	strh	r2, [r3, #0]
 8008db6:	e050      	b.n	8008e5a <USB_EPStartXfer+0x318>
 8008db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10a      	bne.n	8008dd6 <USB_EPStartXfer+0x294>
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd2:	801a      	strh	r2, [r3, #0]
 8008dd4:	e041      	b.n	8008e5a <USB_EPStartXfer+0x318>
 8008dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dda:	085b      	lsrs	r3, r3, #1
 8008ddc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008de4:	f003 0301 	and.w	r3, r3, #1
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d004      	beq.n	8008df6 <USB_EPStartXfer+0x2b4>
 8008dec:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008df0:	3301      	adds	r3, #1
 8008df2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	029b      	lsls	r3, r3, #10
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	4313      	orrs	r3, r2
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0c:	801a      	strh	r2, [r3, #0]
 8008e0e:	e024      	b.n	8008e5a <USB_EPStartXfer+0x318>
 8008e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	785b      	ldrb	r3, [r3, #1]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d11c      	bne.n	8008e5a <USB_EPStartXfer+0x318>
 8008e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	461a      	mov	r2, r3
 8008e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e34:	4413      	add	r3, r2
 8008e36:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	00da      	lsls	r2, r3, #3
 8008e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e48:	4413      	add	r3, r2
 8008e4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	895b      	ldrh	r3, [r3, #10]
 8008e66:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6959      	ldr	r1, [r3, #20]
 8008e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008e80:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008e84:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008e88:	6800      	ldr	r0, [r0, #0]
 8008e8a:	f001 fb45 	bl	800a518 <USB_WritePMA>
            ep->xfer_buff += len;
 8008e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	695a      	ldr	r2, [r3, #20]
 8008e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e9e:	441a      	add	r2, r3
 8008ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	6a1a      	ldr	r2, [r3, #32]
 8008eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d90f      	bls.n	8008ee8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6a1a      	ldr	r2, [r3, #32]
 8008ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ed8:	1ad2      	subs	r2, r2, r3
 8008eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	621a      	str	r2, [r3, #32]
 8008ee6:	e00e      	b.n	8008f06 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2200      	movs	r2, #0
 8008f04:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	785b      	ldrb	r3, [r3, #1]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d177      	bne.n	8009006 <USB_EPStartXfer+0x4c4>
 8008f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	61bb      	str	r3, [r7, #24]
 8008f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	461a      	mov	r2, r3
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	4413      	add	r3, r2
 8008f38:	61bb      	str	r3, [r7, #24]
 8008f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	00da      	lsls	r2, r3, #3
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f50:	617b      	str	r3, [r7, #20]
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	881b      	ldrh	r3, [r3, #0]
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	801a      	strh	r2, [r3, #0]
 8008f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f66:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f68:	d921      	bls.n	8008fae <USB_EPStartXfer+0x46c>
 8008f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f6e:	095b      	lsrs	r3, r3, #5
 8008f70:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f78:	f003 031f 	and.w	r3, r3, #31
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d104      	bne.n	8008f8a <USB_EPStartXfer+0x448>
 8008f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f84:	3b01      	subs	r3, #1
 8008f86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	029b      	lsls	r3, r3, #10
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	801a      	strh	r2, [r3, #0]
 8008fac:	e056      	b.n	800905c <USB_EPStartXfer+0x51a>
 8008fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10a      	bne.n	8008fcc <USB_EPStartXfer+0x48a>
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	881b      	ldrh	r3, [r3, #0]
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	801a      	strh	r2, [r3, #0]
 8008fca:	e047      	b.n	800905c <USB_EPStartXfer+0x51a>
 8008fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fd0:	085b      	lsrs	r3, r3, #1
 8008fd2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d004      	beq.n	8008fec <USB_EPStartXfer+0x4aa>
 8008fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	029b      	lsls	r3, r3, #10
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	801a      	strh	r2, [r3, #0]
 8009004:	e02a      	b.n	800905c <USB_EPStartXfer+0x51a>
 8009006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800900a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	785b      	ldrb	r3, [r3, #1]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d122      	bne.n	800905c <USB_EPStartXfer+0x51a>
 8009016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800901a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	623b      	str	r3, [r7, #32]
 8009022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009026:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009030:	b29b      	uxth	r3, r3
 8009032:	461a      	mov	r2, r3
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	4413      	add	r3, r2
 8009038:	623b      	str	r3, [r7, #32]
 800903a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800903e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	00da      	lsls	r2, r3, #3
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	4413      	add	r3, r2
 800904c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009050:	61fb      	str	r3, [r7, #28]
 8009052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009056:	b29a      	uxth	r2, r3
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800905c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	891b      	ldrh	r3, [r3, #8]
 8009068:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800906c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6959      	ldr	r1, [r3, #20]
 8009078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800907c:	b29b      	uxth	r3, r3
 800907e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009082:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009086:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800908a:	6800      	ldr	r0, [r0, #0]
 800908c:	f001 fa44 	bl	800a518 <USB_WritePMA>
 8009090:	e3ee      	b.n	8009870 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	785b      	ldrb	r3, [r3, #1]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d177      	bne.n	8009192 <USB_EPStartXfer+0x650>
 80090a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090bc:	b29b      	uxth	r3, r3
 80090be:	461a      	mov	r2, r3
 80090c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090c2:	4413      	add	r3, r2
 80090c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	00da      	lsls	r2, r3, #3
 80090d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090d6:	4413      	add	r3, r2
 80090d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80090dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80090de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090ec:	801a      	strh	r2, [r3, #0]
 80090ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80090f4:	d921      	bls.n	800913a <USB_EPStartXfer+0x5f8>
 80090f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090fa:	095b      	lsrs	r3, r3, #5
 80090fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009104:	f003 031f 	and.w	r3, r3, #31
 8009108:	2b00      	cmp	r3, #0
 800910a:	d104      	bne.n	8009116 <USB_EPStartXfer+0x5d4>
 800910c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009110:	3b01      	subs	r3, #1
 8009112:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009118:	881b      	ldrh	r3, [r3, #0]
 800911a:	b29a      	uxth	r2, r3
 800911c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009120:	b29b      	uxth	r3, r3
 8009122:	029b      	lsls	r3, r3, #10
 8009124:	b29b      	uxth	r3, r3
 8009126:	4313      	orrs	r3, r2
 8009128:	b29b      	uxth	r3, r3
 800912a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800912e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009132:	b29a      	uxth	r2, r3
 8009134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009136:	801a      	strh	r2, [r3, #0]
 8009138:	e056      	b.n	80091e8 <USB_EPStartXfer+0x6a6>
 800913a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10a      	bne.n	8009158 <USB_EPStartXfer+0x616>
 8009142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	b29b      	uxth	r3, r3
 8009148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800914c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009150:	b29a      	uxth	r2, r3
 8009152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009154:	801a      	strh	r2, [r3, #0]
 8009156:	e047      	b.n	80091e8 <USB_EPStartXfer+0x6a6>
 8009158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800915c:	085b      	lsrs	r3, r3, #1
 800915e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	2b00      	cmp	r3, #0
 800916c:	d004      	beq.n	8009178 <USB_EPStartXfer+0x636>
 800916e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009172:	3301      	adds	r3, #1
 8009174:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	b29a      	uxth	r2, r3
 800917e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009182:	b29b      	uxth	r3, r3
 8009184:	029b      	lsls	r3, r3, #10
 8009186:	b29b      	uxth	r3, r3
 8009188:	4313      	orrs	r3, r2
 800918a:	b29a      	uxth	r2, r3
 800918c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800918e:	801a      	strh	r2, [r3, #0]
 8009190:	e02a      	b.n	80091e8 <USB_EPStartXfer+0x6a6>
 8009192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	785b      	ldrb	r3, [r3, #1]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d122      	bne.n	80091e8 <USB_EPStartXfer+0x6a6>
 80091a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80091ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091bc:	b29b      	uxth	r3, r3
 80091be:	461a      	mov	r2, r3
 80091c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091c2:	4413      	add	r3, r2
 80091c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80091c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	00da      	lsls	r2, r3, #3
 80091d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091d6:	4413      	add	r3, r2
 80091d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80091dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80091e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	891b      	ldrh	r3, [r3, #8]
 80091f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6959      	ldr	r1, [r3, #20]
 8009204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009208:	b29b      	uxth	r3, r3
 800920a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800920e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009212:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009216:	6800      	ldr	r0, [r0, #0]
 8009218:	f001 f97e 	bl	800a518 <USB_WritePMA>
            ep->xfer_buff += len;
 800921c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	695a      	ldr	r2, [r3, #20]
 8009228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800922c:	441a      	add	r2, r3
 800922e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800923a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800923e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6a1a      	ldr	r2, [r3, #32]
 8009246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800924a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	429a      	cmp	r2, r3
 8009254:	d90f      	bls.n	8009276 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800925a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6a1a      	ldr	r2, [r3, #32]
 8009262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009266:	1ad2      	subs	r2, r2, r3
 8009268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800926c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	621a      	str	r2, [r3, #32]
 8009274:	e00e      	b.n	8009294 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800927a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800928a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2200      	movs	r2, #0
 8009292:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	643b      	str	r3, [r7, #64]	@ 0x40
 80092a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	785b      	ldrb	r3, [r3, #1]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d177      	bne.n	80093a0 <USB_EPStartXfer+0x85e>
 80092b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80092bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	461a      	mov	r2, r3
 80092ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d0:	4413      	add	r3, r2
 80092d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80092d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	00da      	lsls	r2, r3, #3
 80092e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e4:	4413      	add	r3, r2
 80092e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80092ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092fa:	801a      	strh	r2, [r3, #0]
 80092fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009300:	2b3e      	cmp	r3, #62	@ 0x3e
 8009302:	d921      	bls.n	8009348 <USB_EPStartXfer+0x806>
 8009304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009308:	095b      	lsrs	r3, r3, #5
 800930a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800930e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009312:	f003 031f 	and.w	r3, r3, #31
 8009316:	2b00      	cmp	r3, #0
 8009318:	d104      	bne.n	8009324 <USB_EPStartXfer+0x7e2>
 800931a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800931e:	3b01      	subs	r3, #1
 8009320:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	b29a      	uxth	r2, r3
 800932a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800932e:	b29b      	uxth	r3, r3
 8009330:	029b      	lsls	r3, r3, #10
 8009332:	b29b      	uxth	r3, r3
 8009334:	4313      	orrs	r3, r2
 8009336:	b29b      	uxth	r3, r3
 8009338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800933c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009340:	b29a      	uxth	r2, r3
 8009342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009344:	801a      	strh	r2, [r3, #0]
 8009346:	e050      	b.n	80093ea <USB_EPStartXfer+0x8a8>
 8009348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10a      	bne.n	8009366 <USB_EPStartXfer+0x824>
 8009350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	b29b      	uxth	r3, r3
 8009356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800935a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800935e:	b29a      	uxth	r2, r3
 8009360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009362:	801a      	strh	r2, [r3, #0]
 8009364:	e041      	b.n	80093ea <USB_EPStartXfer+0x8a8>
 8009366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800936a:	085b      	lsrs	r3, r3, #1
 800936c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	2b00      	cmp	r3, #0
 800937a:	d004      	beq.n	8009386 <USB_EPStartXfer+0x844>
 800937c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009380:	3301      	adds	r3, #1
 8009382:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009388:	881b      	ldrh	r3, [r3, #0]
 800938a:	b29a      	uxth	r2, r3
 800938c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009390:	b29b      	uxth	r3, r3
 8009392:	029b      	lsls	r3, r3, #10
 8009394:	b29b      	uxth	r3, r3
 8009396:	4313      	orrs	r3, r2
 8009398:	b29a      	uxth	r2, r3
 800939a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800939c:	801a      	strh	r2, [r3, #0]
 800939e:	e024      	b.n	80093ea <USB_EPStartXfer+0x8a8>
 80093a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	785b      	ldrb	r3, [r3, #1]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d11c      	bne.n	80093ea <USB_EPStartXfer+0x8a8>
 80093b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093be:	b29b      	uxth	r3, r3
 80093c0:	461a      	mov	r2, r3
 80093c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093c4:	4413      	add	r3, r2
 80093c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80093c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	00da      	lsls	r2, r3, #3
 80093d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093d8:	4413      	add	r3, r2
 80093da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80093de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80093ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	895b      	ldrh	r3, [r3, #10]
 80093f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6959      	ldr	r1, [r3, #20]
 8009406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800940a:	b29b      	uxth	r3, r3
 800940c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009410:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009414:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009418:	6800      	ldr	r0, [r0, #0]
 800941a:	f001 f87d 	bl	800a518 <USB_WritePMA>
 800941e:	e227      	b.n	8009870 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6a1b      	ldr	r3, [r3, #32]
 800942c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009434:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800943e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	881b      	ldrh	r3, [r3, #0]
 800944c:	b29b      	uxth	r3, r3
 800944e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009456:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800945a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800945e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	441a      	add	r2, r3
 8009474:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009478:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800947c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009480:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009488:	b29b      	uxth	r3, r3
 800948a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800948c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009490:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800949c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	461a      	mov	r2, r3
 80094aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094ac:	4413      	add	r3, r2
 80094ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80094b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	00da      	lsls	r2, r3, #3
 80094be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094c0:	4413      	add	r3, r2
 80094c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80094c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80094d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80094d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	891b      	ldrh	r3, [r3, #8]
 80094de:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6959      	ldr	r1, [r3, #20]
 80094ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80094f8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80094fc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009500:	6800      	ldr	r0, [r0, #0]
 8009502:	f001 f809 	bl	800a518 <USB_WritePMA>
 8009506:	e1b3      	b.n	8009870 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800950c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6a1a      	ldr	r2, [r3, #32]
 8009514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009518:	1ad2      	subs	r2, r2, r3
 800951a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800951e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800952a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	881b      	ldrh	r3, [r3, #0]
 8009542:	b29b      	uxth	r3, r3
 8009544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 80c6 	beq.w	80096da <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800954e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009552:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	673b      	str	r3, [r7, #112]	@ 0x70
 800955a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800955e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	785b      	ldrb	r3, [r3, #1]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d177      	bne.n	800965a <USB_EPStartXfer+0xb18>
 800956a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800956e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800957a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009584:	b29b      	uxth	r3, r3
 8009586:	461a      	mov	r2, r3
 8009588:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800958a:	4413      	add	r3, r2
 800958c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800958e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	00da      	lsls	r2, r3, #3
 800959c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800959e:	4413      	add	r3, r2
 80095a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80095a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80095a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095a8:	881b      	ldrh	r3, [r3, #0]
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095b4:	801a      	strh	r2, [r3, #0]
 80095b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80095bc:	d921      	bls.n	8009602 <USB_EPStartXfer+0xac0>
 80095be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095c2:	095b      	lsrs	r3, r3, #5
 80095c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80095c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095cc:	f003 031f 	and.w	r3, r3, #31
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d104      	bne.n	80095de <USB_EPStartXfer+0xa9c>
 80095d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80095d8:	3b01      	subs	r3, #1
 80095da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80095de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095e0:	881b      	ldrh	r3, [r3, #0]
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	029b      	lsls	r3, r3, #10
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	4313      	orrs	r3, r2
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095fe:	801a      	strh	r2, [r3, #0]
 8009600:	e050      	b.n	80096a4 <USB_EPStartXfer+0xb62>
 8009602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10a      	bne.n	8009620 <USB_EPStartXfer+0xade>
 800960a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800960c:	881b      	ldrh	r3, [r3, #0]
 800960e:	b29b      	uxth	r3, r3
 8009610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009618:	b29a      	uxth	r2, r3
 800961a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800961c:	801a      	strh	r2, [r3, #0]
 800961e:	e041      	b.n	80096a4 <USB_EPStartXfer+0xb62>
 8009620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009624:	085b      	lsrs	r3, r3, #1
 8009626:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800962a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b00      	cmp	r3, #0
 8009634:	d004      	beq.n	8009640 <USB_EPStartXfer+0xafe>
 8009636:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800963a:	3301      	adds	r3, #1
 800963c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009642:	881b      	ldrh	r3, [r3, #0]
 8009644:	b29a      	uxth	r2, r3
 8009646:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800964a:	b29b      	uxth	r3, r3
 800964c:	029b      	lsls	r3, r3, #10
 800964e:	b29b      	uxth	r3, r3
 8009650:	4313      	orrs	r3, r2
 8009652:	b29a      	uxth	r2, r3
 8009654:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009656:	801a      	strh	r2, [r3, #0]
 8009658:	e024      	b.n	80096a4 <USB_EPStartXfer+0xb62>
 800965a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800965e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	785b      	ldrb	r3, [r3, #1]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d11c      	bne.n	80096a4 <USB_EPStartXfer+0xb62>
 800966a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800966e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009678:	b29b      	uxth	r3, r3
 800967a:	461a      	mov	r2, r3
 800967c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800967e:	4413      	add	r3, r2
 8009680:	673b      	str	r3, [r7, #112]	@ 0x70
 8009682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	00da      	lsls	r2, r3, #3
 8009690:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009692:	4413      	add	r3, r2
 8009694:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009698:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800969a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800969e:	b29a      	uxth	r2, r3
 80096a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80096a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	895b      	ldrh	r3, [r3, #10]
 80096b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	6959      	ldr	r1, [r3, #20]
 80096c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80096ca:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80096ce:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80096d2:	6800      	ldr	r0, [r0, #0]
 80096d4:	f000 ff20 	bl	800a518 <USB_WritePMA>
 80096d8:	e0ca      	b.n	8009870 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80096da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	785b      	ldrb	r3, [r3, #1]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d177      	bne.n	80097da <USB_EPStartXfer+0xc98>
 80096ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80096f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009704:	b29b      	uxth	r3, r3
 8009706:	461a      	mov	r2, r3
 8009708:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800970a:	4413      	add	r3, r2
 800970c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800970e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	00da      	lsls	r2, r3, #3
 800971c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800971e:	4413      	add	r3, r2
 8009720:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009724:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009726:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009728:	881b      	ldrh	r3, [r3, #0]
 800972a:	b29b      	uxth	r3, r3
 800972c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009730:	b29a      	uxth	r2, r3
 8009732:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009734:	801a      	strh	r2, [r3, #0]
 8009736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800973a:	2b3e      	cmp	r3, #62	@ 0x3e
 800973c:	d921      	bls.n	8009782 <USB_EPStartXfer+0xc40>
 800973e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009742:	095b      	lsrs	r3, r3, #5
 8009744:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800974c:	f003 031f 	and.w	r3, r3, #31
 8009750:	2b00      	cmp	r3, #0
 8009752:	d104      	bne.n	800975e <USB_EPStartXfer+0xc1c>
 8009754:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009758:	3b01      	subs	r3, #1
 800975a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800975e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009760:	881b      	ldrh	r3, [r3, #0]
 8009762:	b29a      	uxth	r2, r3
 8009764:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009768:	b29b      	uxth	r3, r3
 800976a:	029b      	lsls	r3, r3, #10
 800976c:	b29b      	uxth	r3, r3
 800976e:	4313      	orrs	r3, r2
 8009770:	b29b      	uxth	r3, r3
 8009772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800977a:	b29a      	uxth	r2, r3
 800977c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800977e:	801a      	strh	r2, [r3, #0]
 8009780:	e05c      	b.n	800983c <USB_EPStartXfer+0xcfa>
 8009782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10a      	bne.n	80097a0 <USB_EPStartXfer+0xc5e>
 800978a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800978c:	881b      	ldrh	r3, [r3, #0]
 800978e:	b29b      	uxth	r3, r3
 8009790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009798:	b29a      	uxth	r2, r3
 800979a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800979c:	801a      	strh	r2, [r3, #0]
 800979e:	e04d      	b.n	800983c <USB_EPStartXfer+0xcfa>
 80097a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a4:	085b      	lsrs	r3, r3, #1
 80097a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80097aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d004      	beq.n	80097c0 <USB_EPStartXfer+0xc7e>
 80097b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80097ba:	3301      	adds	r3, #1
 80097bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80097c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097c2:	881b      	ldrh	r3, [r3, #0]
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	029b      	lsls	r3, r3, #10
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	4313      	orrs	r3, r2
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097d6:	801a      	strh	r2, [r3, #0]
 80097d8:	e030      	b.n	800983c <USB_EPStartXfer+0xcfa>
 80097da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	785b      	ldrb	r3, [r3, #1]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d128      	bne.n	800983c <USB_EPStartXfer+0xcfa>
 80097ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80097f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009806:	b29b      	uxth	r3, r3
 8009808:	461a      	mov	r2, r3
 800980a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800980e:	4413      	add	r3, r2
 8009810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	00da      	lsls	r2, r3, #3
 8009822:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009826:	4413      	add	r3, r2
 8009828:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800982c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009834:	b29a      	uxth	r2, r3
 8009836:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800983a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800983c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	891b      	ldrh	r3, [r3, #8]
 8009848:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800984c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6959      	ldr	r1, [r3, #20]
 8009858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800985c:	b29b      	uxth	r3, r3
 800985e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009862:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009866:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800986a:	6800      	ldr	r0, [r0, #0]
 800986c:	f000 fe54 	bl	800a518 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800987e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	b29b      	uxth	r3, r3
 800988e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009892:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009896:	817b      	strh	r3, [r7, #10]
 8009898:	897b      	ldrh	r3, [r7, #10]
 800989a:	f083 0310 	eor.w	r3, r3, #16
 800989e:	817b      	strh	r3, [r7, #10]
 80098a0:	897b      	ldrh	r3, [r7, #10]
 80098a2:	f083 0320 	eor.w	r3, r3, #32
 80098a6:	817b      	strh	r3, [r7, #10]
 80098a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	441a      	add	r2, r3
 80098c2:	897b      	ldrh	r3, [r7, #10]
 80098c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	8013      	strh	r3, [r2, #0]
 80098d8:	f000 bcde 	b.w	800a298 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80098dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	7b1b      	ldrb	r3, [r3, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f040 80bb 	bne.w	8009a64 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80098ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	699a      	ldr	r2, [r3, #24]
 80098fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	429a      	cmp	r2, r3
 8009908:	d917      	bls.n	800993a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800990a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800990e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800991a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800991e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	699a      	ldr	r2, [r3, #24]
 8009926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800992a:	1ad2      	subs	r2, r2, r3
 800992c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	619a      	str	r2, [r3, #24]
 8009938:	e00e      	b.n	8009958 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800993a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800993e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800994a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800994e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2200      	movs	r2, #0
 8009956:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800995c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800996a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009974:	b29b      	uxth	r3, r3
 8009976:	461a      	mov	r2, r3
 8009978:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800997c:	4413      	add	r3, r2
 800997e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	00da      	lsls	r2, r3, #3
 8009990:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009994:	4413      	add	r3, r2
 8009996:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800999a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800999e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099b0:	801a      	strh	r2, [r3, #0]
 80099b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80099b8:	d924      	bls.n	8009a04 <USB_EPStartXfer+0xec2>
 80099ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099be:	095b      	lsrs	r3, r3, #5
 80099c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80099c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c8:	f003 031f 	and.w	r3, r3, #31
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d104      	bne.n	80099da <USB_EPStartXfer+0xe98>
 80099d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80099d4:	3b01      	subs	r3, #1
 80099d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80099da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099de:	881b      	ldrh	r3, [r3, #0]
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	029b      	lsls	r3, r3, #10
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	4313      	orrs	r3, r2
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099fe:	801a      	strh	r2, [r3, #0]
 8009a00:	f000 bc10 	b.w	800a224 <USB_EPStartXfer+0x16e2>
 8009a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10c      	bne.n	8009a26 <USB_EPStartXfer+0xee4>
 8009a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a10:	881b      	ldrh	r3, [r3, #0]
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a22:	801a      	strh	r2, [r3, #0]
 8009a24:	e3fe      	b.n	800a224 <USB_EPStartXfer+0x16e2>
 8009a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a2a:	085b      	lsrs	r3, r3, #1
 8009a2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a34:	f003 0301 	and.w	r3, r3, #1
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d004      	beq.n	8009a46 <USB_EPStartXfer+0xf04>
 8009a3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009a40:	3301      	adds	r3, #1
 8009a42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a4a:	881b      	ldrh	r3, [r3, #0]
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	029b      	lsls	r3, r3, #10
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a60:	801a      	strh	r2, [r3, #0]
 8009a62:	e3df      	b.n	800a224 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	78db      	ldrb	r3, [r3, #3]
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	f040 8218 	bne.w	8009ea6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	785b      	ldrb	r3, [r3, #1]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f040 809d 	bne.w	8009bc2 <USB_EPStartXfer+0x1080>
 8009a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009aac:	4413      	add	r3, r2
 8009aae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	00da      	lsls	r2, r3, #3
 8009ac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009aca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ace:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ad2:	881b      	ldrh	r3, [r3, #0]
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ae0:	801a      	strh	r2, [r3, #0]
 8009ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	2b3e      	cmp	r3, #62	@ 0x3e
 8009af0:	d92b      	bls.n	8009b4a <USB_EPStartXfer+0x1008>
 8009af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	095b      	lsrs	r3, r3, #5
 8009b00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	f003 031f 	and.w	r3, r3, #31
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d104      	bne.n	8009b22 <USB_EPStartXfer+0xfe0>
 8009b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b26:	881b      	ldrh	r3, [r3, #0]
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	029b      	lsls	r3, r3, #10
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	4313      	orrs	r3, r2
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b46:	801a      	strh	r2, [r3, #0]
 8009b48:	e070      	b.n	8009c2c <USB_EPStartXfer+0x10ea>
 8009b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d10c      	bne.n	8009b74 <USB_EPStartXfer+0x1032>
 8009b5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b5e:	881b      	ldrh	r3, [r3, #0]
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b70:	801a      	strh	r2, [r3, #0]
 8009b72:	e05b      	b.n	8009c2c <USB_EPStartXfer+0x10ea>
 8009b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	085b      	lsrs	r3, r3, #1
 8009b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d004      	beq.n	8009ba4 <USB_EPStartXfer+0x1062>
 8009b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009ba4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	029b      	lsls	r3, r3, #10
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009bbe:	801a      	strh	r2, [r3, #0]
 8009bc0:	e034      	b.n	8009c2c <USB_EPStartXfer+0x10ea>
 8009bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	785b      	ldrb	r3, [r3, #1]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d12c      	bne.n	8009c2c <USB_EPStartXfer+0x10ea>
 8009bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009be4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009bf6:	4413      	add	r3, r2
 8009bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	00da      	lsls	r2, r3, #3
 8009c0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c0e:	4413      	add	r3, r2
 8009c10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009c2a:	801a      	strh	r2, [r3, #0]
 8009c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	785b      	ldrb	r3, [r3, #1]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f040 809d 	bne.w	8009d86 <USB_EPStartXfer+0x1244>
 8009c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c70:	4413      	add	r3, r2
 8009c72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	00da      	lsls	r2, r3, #3
 8009c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c88:	4413      	add	r3, r2
 8009c8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c96:	881b      	ldrh	r3, [r3, #0]
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ca4:	801a      	strh	r2, [r3, #0]
 8009ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009cb4:	d92b      	bls.n	8009d0e <USB_EPStartXfer+0x11cc>
 8009cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	095b      	lsrs	r3, r3, #5
 8009cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	f003 031f 	and.w	r3, r3, #31
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d104      	bne.n	8009ce6 <USB_EPStartXfer+0x11a4>
 8009cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ce6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009cea:	881b      	ldrh	r3, [r3, #0]
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	029b      	lsls	r3, r3, #10
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d0a:	801a      	strh	r2, [r3, #0]
 8009d0c:	e069      	b.n	8009de2 <USB_EPStartXfer+0x12a0>
 8009d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d10c      	bne.n	8009d38 <USB_EPStartXfer+0x11f6>
 8009d1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d34:	801a      	strh	r2, [r3, #0]
 8009d36:	e054      	b.n	8009de2 <USB_EPStartXfer+0x12a0>
 8009d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	085b      	lsrs	r3, r3, #1
 8009d46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d004      	beq.n	8009d68 <USB_EPStartXfer+0x1226>
 8009d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d62:	3301      	adds	r3, #1
 8009d64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	029b      	lsls	r3, r3, #10
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d82:	801a      	strh	r2, [r3, #0]
 8009d84:	e02d      	b.n	8009de2 <USB_EPStartXfer+0x12a0>
 8009d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	785b      	ldrb	r3, [r3, #1]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d125      	bne.n	8009de2 <USB_EPStartXfer+0x12a0>
 8009d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	461a      	mov	r2, r3
 8009da8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009dac:	4413      	add	r3, r2
 8009dae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	00da      	lsls	r2, r3, #3
 8009dc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009dca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009de0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f000 8218 	beq.w	800a224 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009df8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	881b      	ldrh	r3, [r3, #0]
 8009e10:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009e14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009e18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d005      	beq.n	8009e2c <USB_EPStartXfer+0x12ea>
 8009e20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10d      	bne.n	8009e48 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009e2c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009e30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f040 81f5 	bne.w	800a224 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009e3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f040 81ee 	bne.w	800a224 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	881b      	ldrh	r3, [r3, #0]
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e6e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	441a      	add	r2, r3
 8009e8c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009e90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	8013      	strh	r3, [r2, #0]
 8009ea4:	e1be      	b.n	800a224 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	78db      	ldrb	r3, [r3, #3]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	f040 81b4 	bne.w	800a220 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	699a      	ldr	r2, [r3, #24]
 8009ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d917      	bls.n	8009f04 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	699a      	ldr	r2, [r3, #24]
 8009ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef4:	1ad2      	subs	r2, r2, r3
 8009ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	619a      	str	r2, [r3, #24]
 8009f02:	e00e      	b.n	8009f22 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8009f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	785b      	ldrb	r3, [r3, #1]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f040 8085 	bne.w	800a03e <USB_EPStartXfer+0x14fc>
 8009f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009f42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	461a      	mov	r2, r3
 8009f54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009f58:	4413      	add	r3, r2
 8009f5a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	00da      	lsls	r2, r3, #3
 8009f6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009f70:	4413      	add	r3, r2
 8009f72:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009f76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f8c:	801a      	strh	r2, [r3, #0]
 8009f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f92:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f94:	d923      	bls.n	8009fde <USB_EPStartXfer+0x149c>
 8009f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f9a:	095b      	lsrs	r3, r3, #5
 8009f9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fa4:	f003 031f 	and.w	r3, r3, #31
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d104      	bne.n	8009fb6 <USB_EPStartXfer+0x1474>
 8009fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009fb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009fba:	881b      	ldrh	r3, [r3, #0]
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	029b      	lsls	r3, r3, #10
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009fda:	801a      	strh	r2, [r3, #0]
 8009fdc:	e060      	b.n	800a0a0 <USB_EPStartXfer+0x155e>
 8009fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10c      	bne.n	800a000 <USB_EPStartXfer+0x14be>
 8009fe6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009fea:	881b      	ldrh	r3, [r3, #0]
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ffc:	801a      	strh	r2, [r3, #0]
 8009ffe:	e04f      	b.n	800a0a0 <USB_EPStartXfer+0x155e>
 800a000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a004:	085b      	lsrs	r3, r3, #1
 800a006:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a00e:	f003 0301 	and.w	r3, r3, #1
 800a012:	2b00      	cmp	r3, #0
 800a014:	d004      	beq.n	800a020 <USB_EPStartXfer+0x14de>
 800a016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a01a:	3301      	adds	r3, #1
 800a01c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a020:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a024:	881b      	ldrh	r3, [r3, #0]
 800a026:	b29a      	uxth	r2, r3
 800a028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	029b      	lsls	r3, r3, #10
 800a030:	b29b      	uxth	r3, r3
 800a032:	4313      	orrs	r3, r2
 800a034:	b29a      	uxth	r2, r3
 800a036:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a03a:	801a      	strh	r2, [r3, #0]
 800a03c:	e030      	b.n	800a0a0 <USB_EPStartXfer+0x155e>
 800a03e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	785b      	ldrb	r3, [r3, #1]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d128      	bne.n	800a0a0 <USB_EPStartXfer+0x155e>
 800a04e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a052:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a05c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a060:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	461a      	mov	r2, r3
 800a06e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a072:	4413      	add	r3, r2
 800a074:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a07c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	00da      	lsls	r2, r3, #3
 800a086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a08a:	4413      	add	r3, r2
 800a08c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a090:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a098:	b29a      	uxth	r2, r3
 800a09a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a09e:	801a      	strh	r2, [r3, #0]
 800a0a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a0ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	785b      	ldrb	r3, [r3, #1]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f040 8085 	bne.w	800a1ca <USB_EPStartXfer+0x1688>
 800a0c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a0ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	461a      	mov	r2, r3
 800a0e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a0e4:	4413      	add	r3, r2
 800a0e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a0ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	00da      	lsls	r2, r3, #3
 800a0f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a102:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a106:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a112:	b29a      	uxth	r2, r3
 800a114:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a118:	801a      	strh	r2, [r3, #0]
 800a11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a11e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a120:	d923      	bls.n	800a16a <USB_EPStartXfer+0x1628>
 800a122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a126:	095b      	lsrs	r3, r3, #5
 800a128:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a130:	f003 031f 	and.w	r3, r3, #31
 800a134:	2b00      	cmp	r3, #0
 800a136:	d104      	bne.n	800a142 <USB_EPStartXfer+0x1600>
 800a138:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a13c:	3b01      	subs	r3, #1
 800a13e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a142:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a146:	881b      	ldrh	r3, [r3, #0]
 800a148:	b29a      	uxth	r2, r3
 800a14a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a14e:	b29b      	uxth	r3, r3
 800a150:	029b      	lsls	r3, r3, #10
 800a152:	b29b      	uxth	r3, r3
 800a154:	4313      	orrs	r3, r2
 800a156:	b29b      	uxth	r3, r3
 800a158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a15c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a160:	b29a      	uxth	r2, r3
 800a162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a166:	801a      	strh	r2, [r3, #0]
 800a168:	e05c      	b.n	800a224 <USB_EPStartXfer+0x16e2>
 800a16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10c      	bne.n	800a18c <USB_EPStartXfer+0x164a>
 800a172:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a176:	881b      	ldrh	r3, [r3, #0]
 800a178:	b29b      	uxth	r3, r3
 800a17a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a17e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a182:	b29a      	uxth	r2, r3
 800a184:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a188:	801a      	strh	r2, [r3, #0]
 800a18a:	e04b      	b.n	800a224 <USB_EPStartXfer+0x16e2>
 800a18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a190:	085b      	lsrs	r3, r3, #1
 800a192:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d004      	beq.n	800a1ac <USB_EPStartXfer+0x166a>
 800a1a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a1ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a1b0:	881b      	ldrh	r3, [r3, #0]
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	029b      	lsls	r3, r3, #10
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a1c6:	801a      	strh	r2, [r3, #0]
 800a1c8:	e02c      	b.n	800a224 <USB_EPStartXfer+0x16e2>
 800a1ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	785b      	ldrb	r3, [r3, #1]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d124      	bne.n	800a224 <USB_EPStartXfer+0x16e2>
 800a1da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a1f0:	4413      	add	r3, r2
 800a1f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a1f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	00da      	lsls	r2, r3, #3
 800a204:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a208:	4413      	add	r3, r2
 800a20a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a20e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a216:	b29a      	uxth	r2, r3
 800a218:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a21c:	801a      	strh	r2, [r3, #0]
 800a21e:	e001      	b.n	800a224 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e03a      	b.n	800a29a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	4413      	add	r3, r2
 800a23e:	881b      	ldrh	r3, [r3, #0]
 800a240:	b29b      	uxth	r3, r3
 800a242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a24a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a24e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a252:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a256:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a25a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a25e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a262:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a26a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	441a      	add	r2, r3
 800a280:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a284:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a288:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a28c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a294:	b29b      	uxth	r3, r3
 800a296:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	785b      	ldrb	r3, [r3, #1]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d020      	beq.n	800a2f8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4413      	add	r3, r2
 800a2c0:	881b      	ldrh	r3, [r3, #0]
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2cc:	81bb      	strh	r3, [r7, #12]
 800a2ce:	89bb      	ldrh	r3, [r7, #12]
 800a2d0:	f083 0310 	eor.w	r3, r3, #16
 800a2d4:	81bb      	strh	r3, [r7, #12]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	441a      	add	r2, r3
 800a2e0:	89bb      	ldrh	r3, [r7, #12]
 800a2e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	8013      	strh	r3, [r2, #0]
 800a2f6:	e01f      	b.n	800a338 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	4413      	add	r3, r2
 800a302:	881b      	ldrh	r3, [r3, #0]
 800a304:	b29b      	uxth	r3, r3
 800a306:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a30a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a30e:	81fb      	strh	r3, [r7, #14]
 800a310:	89fb      	ldrh	r3, [r7, #14]
 800a312:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a316:	81fb      	strh	r3, [r7, #14]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	441a      	add	r2, r3
 800a322:	89fb      	ldrh	r3, [r7, #14]
 800a324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a32c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a334:	b29b      	uxth	r3, r3
 800a336:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a346:	b480      	push	{r7}
 800a348:	b087      	sub	sp, #28
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	7b1b      	ldrb	r3, [r3, #12]
 800a354:	2b00      	cmp	r3, #0
 800a356:	f040 809d 	bne.w	800a494 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	785b      	ldrb	r3, [r3, #1]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d04c      	beq.n	800a3fc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4413      	add	r3, r2
 800a36c:	881b      	ldrh	r3, [r3, #0]
 800a36e:	823b      	strh	r3, [r7, #16]
 800a370:	8a3b      	ldrh	r3, [r7, #16]
 800a372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a376:	2b00      	cmp	r3, #0
 800a378:	d01b      	beq.n	800a3b2 <USB_EPClearStall+0x6c>
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	b29b      	uxth	r3, r3
 800a388:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a38c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a390:	81fb      	strh	r3, [r7, #14]
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	441a      	add	r2, r3
 800a39c:	89fb      	ldrh	r3, [r7, #14]
 800a39e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	78db      	ldrb	r3, [r3, #3]
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d06c      	beq.n	800a494 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	4413      	add	r3, r2
 800a3c4:	881b      	ldrh	r3, [r3, #0]
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3d0:	81bb      	strh	r3, [r7, #12]
 800a3d2:	89bb      	ldrh	r3, [r7, #12]
 800a3d4:	f083 0320 	eor.w	r3, r3, #32
 800a3d8:	81bb      	strh	r3, [r7, #12]
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	441a      	add	r2, r3
 800a3e4:	89bb      	ldrh	r3, [r7, #12]
 800a3e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	8013      	strh	r3, [r2, #0]
 800a3fa:	e04b      	b.n	800a494 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	881b      	ldrh	r3, [r3, #0]
 800a408:	82fb      	strh	r3, [r7, #22]
 800a40a:	8afb      	ldrh	r3, [r7, #22]
 800a40c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a410:	2b00      	cmp	r3, #0
 800a412:	d01b      	beq.n	800a44c <USB_EPClearStall+0x106>
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	881b      	ldrh	r3, [r3, #0]
 800a420:	b29b      	uxth	r3, r3
 800a422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a42a:	82bb      	strh	r3, [r7, #20]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	441a      	add	r2, r3
 800a436:	8abb      	ldrh	r3, [r7, #20]
 800a438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a43c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a440:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a448:	b29b      	uxth	r3, r3
 800a44a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4413      	add	r3, r2
 800a456:	881b      	ldrh	r3, [r3, #0]
 800a458:	b29b      	uxth	r3, r3
 800a45a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a45e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a462:	827b      	strh	r3, [r7, #18]
 800a464:	8a7b      	ldrh	r3, [r7, #18]
 800a466:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a46a:	827b      	strh	r3, [r7, #18]
 800a46c:	8a7b      	ldrh	r3, [r7, #18]
 800a46e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a472:	827b      	strh	r3, [r7, #18]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	441a      	add	r2, r3
 800a47e:	8a7b      	ldrh	r3, [r7, #18]
 800a480:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a484:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a48c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a490:	b29b      	uxth	r3, r3
 800a492:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	371c      	adds	r7, #28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a4ae:	78fb      	ldrb	r3, [r7, #3]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d103      	bne.n	800a4bc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2280      	movs	r2, #128	@ 0x80
 800a4b8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b083      	sub	sp, #12
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a506:	b29b      	uxth	r3, r3
 800a508:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a50a:	68fb      	ldr	r3, [r7, #12]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3714      	adds	r7, #20
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a518:	b480      	push	{r7}
 800a51a:	b08b      	sub	sp, #44	@ 0x2c
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	4611      	mov	r1, r2
 800a524:	461a      	mov	r2, r3
 800a526:	460b      	mov	r3, r1
 800a528:	80fb      	strh	r3, [r7, #6]
 800a52a:	4613      	mov	r3, r2
 800a52c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a52e:	88bb      	ldrh	r3, [r7, #4]
 800a530:	3301      	adds	r3, #1
 800a532:	085b      	lsrs	r3, r3, #1
 800a534:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a53e:	88fa      	ldrh	r2, [r7, #6]
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a548:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a54e:	e01c      	b.n	800a58a <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	3301      	adds	r3, #1
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	b21b      	sxth	r3, r3
 800a55e:	021b      	lsls	r3, r3, #8
 800a560:	b21a      	sxth	r2, r3
 800a562:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a566:	4313      	orrs	r3, r2
 800a568:	b21b      	sxth	r3, r3
 800a56a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a56c:	6a3b      	ldr	r3, [r7, #32]
 800a56e:	8a7a      	ldrh	r2, [r7, #18]
 800a570:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a572:	6a3b      	ldr	r3, [r7, #32]
 800a574:	3302      	adds	r3, #2
 800a576:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	3301      	adds	r3, #1
 800a57c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	3301      	adds	r3, #1
 800a582:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a586:	3b01      	subs	r3, #1
 800a588:	627b      	str	r3, [r7, #36]	@ 0x24
 800a58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1df      	bne.n	800a550 <USB_WritePMA+0x38>
  }
}
 800a590:	bf00      	nop
 800a592:	bf00      	nop
 800a594:	372c      	adds	r7, #44	@ 0x2c
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b08b      	sub	sp, #44	@ 0x2c
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	60f8      	str	r0, [r7, #12]
 800a5a6:	60b9      	str	r1, [r7, #8]
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	80fb      	strh	r3, [r7, #6]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a5b4:	88bb      	ldrh	r3, [r7, #4]
 800a5b6:	085b      	lsrs	r3, r3, #1
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a5c4:	88fa      	ldrh	r2, [r7, #6]
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a5ce:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5d4:	e018      	b.n	800a608 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a5d6:	6a3b      	ldr	r3, [r7, #32]
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a5de:	6a3b      	ldr	r3, [r7, #32]
 800a5e0:	3302      	adds	r3, #2
 800a5e2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	0a1b      	lsrs	r3, r3, #8
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	3301      	adds	r3, #1
 800a600:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a604:	3b01      	subs	r3, #1
 800a606:	627b      	str	r3, [r7, #36]	@ 0x24
 800a608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1e3      	bne.n	800a5d6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a60e:	88bb      	ldrh	r3, [r7, #4]
 800a610:	f003 0301 	and.w	r3, r3, #1
 800a614:	b29b      	uxth	r3, r3
 800a616:	2b00      	cmp	r3, #0
 800a618:	d007      	beq.n	800a62a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a61a:	6a3b      	ldr	r3, [r7, #32]
 800a61c:	881b      	ldrh	r3, [r3, #0]
 800a61e:	b29b      	uxth	r3, r3
 800a620:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	b2da      	uxtb	r2, r3
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	701a      	strb	r2, [r3, #0]
  }
}
 800a62a:	bf00      	nop
 800a62c:	372c      	adds	r7, #44	@ 0x2c
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
	...

0800a638 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	460b      	mov	r3, r1
 800a642:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a644:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a648:	f006 face 	bl	8010be8 <USBD_static_malloc>
 800a64c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d109      	bne.n	800a668 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	32b0      	adds	r2, #176	@ 0xb0
 800a65e:	2100      	movs	r1, #0
 800a660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a664:	2302      	movs	r3, #2
 800a666:	e0d4      	b.n	800a812 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a668:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a66c:	2100      	movs	r1, #0
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f006 fc23 	bl	8010eba <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	32b0      	adds	r2, #176	@ 0xb0
 800a67e:	68f9      	ldr	r1, [r7, #12]
 800a680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	32b0      	adds	r2, #176	@ 0xb0
 800a68e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	7c1b      	ldrb	r3, [r3, #16]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d138      	bne.n	800a712 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a6a0:	4b5e      	ldr	r3, [pc, #376]	@ (800a81c <USBD_CDC_Init+0x1e4>)
 800a6a2:	7819      	ldrb	r1, [r3, #0]
 800a6a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6a8:	2202      	movs	r2, #2
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f006 f943 	bl	8010936 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a6b0:	4b5a      	ldr	r3, [pc, #360]	@ (800a81c <USBD_CDC_Init+0x1e4>)
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	f003 020f 	and.w	r2, r3, #15
 800a6b8:	6879      	ldr	r1, [r7, #4]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	440b      	add	r3, r1
 800a6c4:	3324      	adds	r3, #36	@ 0x24
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a6ca:	4b55      	ldr	r3, [pc, #340]	@ (800a820 <USBD_CDC_Init+0x1e8>)
 800a6cc:	7819      	ldrb	r1, [r3, #0]
 800a6ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f006 f92e 	bl	8010936 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a6da:	4b51      	ldr	r3, [pc, #324]	@ (800a820 <USBD_CDC_Init+0x1e8>)
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	f003 020f 	and.w	r2, r3, #15
 800a6e2:	6879      	ldr	r1, [r7, #4]
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	4413      	add	r3, r2
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	440b      	add	r3, r1
 800a6ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a6f6:	4b4b      	ldr	r3, [pc, #300]	@ (800a824 <USBD_CDC_Init+0x1ec>)
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	f003 020f 	and.w	r2, r3, #15
 800a6fe:	6879      	ldr	r1, [r7, #4]
 800a700:	4613      	mov	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4413      	add	r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	440b      	add	r3, r1
 800a70a:	3326      	adds	r3, #38	@ 0x26
 800a70c:	2210      	movs	r2, #16
 800a70e:	801a      	strh	r2, [r3, #0]
 800a710:	e035      	b.n	800a77e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a712:	4b42      	ldr	r3, [pc, #264]	@ (800a81c <USBD_CDC_Init+0x1e4>)
 800a714:	7819      	ldrb	r1, [r3, #0]
 800a716:	2340      	movs	r3, #64	@ 0x40
 800a718:	2202      	movs	r2, #2
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f006 f90b 	bl	8010936 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a720:	4b3e      	ldr	r3, [pc, #248]	@ (800a81c <USBD_CDC_Init+0x1e4>)
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	f003 020f 	and.w	r2, r3, #15
 800a728:	6879      	ldr	r1, [r7, #4]
 800a72a:	4613      	mov	r3, r2
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	4413      	add	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	440b      	add	r3, r1
 800a734:	3324      	adds	r3, #36	@ 0x24
 800a736:	2201      	movs	r2, #1
 800a738:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a73a:	4b39      	ldr	r3, [pc, #228]	@ (800a820 <USBD_CDC_Init+0x1e8>)
 800a73c:	7819      	ldrb	r1, [r3, #0]
 800a73e:	2340      	movs	r3, #64	@ 0x40
 800a740:	2202      	movs	r2, #2
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f006 f8f7 	bl	8010936 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a748:	4b35      	ldr	r3, [pc, #212]	@ (800a820 <USBD_CDC_Init+0x1e8>)
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	f003 020f 	and.w	r2, r3, #15
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	4613      	mov	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	440b      	add	r3, r1
 800a75c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a760:	2201      	movs	r2, #1
 800a762:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a764:	4b2f      	ldr	r3, [pc, #188]	@ (800a824 <USBD_CDC_Init+0x1ec>)
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	f003 020f 	and.w	r2, r3, #15
 800a76c:	6879      	ldr	r1, [r7, #4]
 800a76e:	4613      	mov	r3, r2
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	4413      	add	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	440b      	add	r3, r1
 800a778:	3326      	adds	r3, #38	@ 0x26
 800a77a:	2210      	movs	r2, #16
 800a77c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a77e:	4b29      	ldr	r3, [pc, #164]	@ (800a824 <USBD_CDC_Init+0x1ec>)
 800a780:	7819      	ldrb	r1, [r3, #0]
 800a782:	2308      	movs	r3, #8
 800a784:	2203      	movs	r2, #3
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f006 f8d5 	bl	8010936 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a78c:	4b25      	ldr	r3, [pc, #148]	@ (800a824 <USBD_CDC_Init+0x1ec>)
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	f003 020f 	and.w	r2, r3, #15
 800a794:	6879      	ldr	r1, [r7, #4]
 800a796:	4613      	mov	r3, r2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	4413      	add	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	440b      	add	r3, r1
 800a7a0:	3324      	adds	r3, #36	@ 0x24
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	33b0      	adds	r3, #176	@ 0xb0
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d101      	bne.n	800a7e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a7dc:	2302      	movs	r3, #2
 800a7de:	e018      	b.n	800a812 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	7c1b      	ldrb	r3, [r3, #16]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d10a      	bne.n	800a7fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7e8:	4b0d      	ldr	r3, [pc, #52]	@ (800a820 <USBD_CDC_Init+0x1e8>)
 800a7ea:	7819      	ldrb	r1, [r3, #0]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f006 f98c 	bl	8010b14 <USBD_LL_PrepareReceive>
 800a7fc:	e008      	b.n	800a810 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7fe:	4b08      	ldr	r3, [pc, #32]	@ (800a820 <USBD_CDC_Init+0x1e8>)
 800a800:	7819      	ldrb	r1, [r3, #0]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a808:	2340      	movs	r3, #64	@ 0x40
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f006 f982 	bl	8010b14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	2000009b 	.word	0x2000009b
 800a820:	2000009c 	.word	0x2000009c
 800a824:	2000009d 	.word	0x2000009d

0800a828 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	460b      	mov	r3, r1
 800a832:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a834:	4b3a      	ldr	r3, [pc, #232]	@ (800a920 <USBD_CDC_DeInit+0xf8>)
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	4619      	mov	r1, r3
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f006 f8a1 	bl	8010982 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a840:	4b37      	ldr	r3, [pc, #220]	@ (800a920 <USBD_CDC_DeInit+0xf8>)
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	f003 020f 	and.w	r2, r3, #15
 800a848:	6879      	ldr	r1, [r7, #4]
 800a84a:	4613      	mov	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4413      	add	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	440b      	add	r3, r1
 800a854:	3324      	adds	r3, #36	@ 0x24
 800a856:	2200      	movs	r2, #0
 800a858:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a85a:	4b32      	ldr	r3, [pc, #200]	@ (800a924 <USBD_CDC_DeInit+0xfc>)
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	4619      	mov	r1, r3
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f006 f88e 	bl	8010982 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a866:	4b2f      	ldr	r3, [pc, #188]	@ (800a924 <USBD_CDC_DeInit+0xfc>)
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	f003 020f 	and.w	r2, r3, #15
 800a86e:	6879      	ldr	r1, [r7, #4]
 800a870:	4613      	mov	r3, r2
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	4413      	add	r3, r2
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	440b      	add	r3, r1
 800a87a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a87e:	2200      	movs	r2, #0
 800a880:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a882:	4b29      	ldr	r3, [pc, #164]	@ (800a928 <USBD_CDC_DeInit+0x100>)
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	4619      	mov	r1, r3
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f006 f87a 	bl	8010982 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a88e:	4b26      	ldr	r3, [pc, #152]	@ (800a928 <USBD_CDC_DeInit+0x100>)
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	f003 020f 	and.w	r2, r3, #15
 800a896:	6879      	ldr	r1, [r7, #4]
 800a898:	4613      	mov	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4413      	add	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	440b      	add	r3, r1
 800a8a2:	3324      	adds	r3, #36	@ 0x24
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a8a8:	4b1f      	ldr	r3, [pc, #124]	@ (800a928 <USBD_CDC_DeInit+0x100>)
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	f003 020f 	and.w	r2, r3, #15
 800a8b0:	6879      	ldr	r1, [r7, #4]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	4413      	add	r3, r2
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	440b      	add	r3, r1
 800a8bc:	3326      	adds	r3, #38	@ 0x26
 800a8be:	2200      	movs	r2, #0
 800a8c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	32b0      	adds	r2, #176	@ 0xb0
 800a8cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d01f      	beq.n	800a914 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	33b0      	adds	r3, #176	@ 0xb0
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4413      	add	r3, r2
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	32b0      	adds	r2, #176	@ 0xb0
 800a8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f006 f984 	bl	8010c04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	32b0      	adds	r2, #176	@ 0xb0
 800a906:	2100      	movs	r1, #0
 800a908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	2000009b 	.word	0x2000009b
 800a924:	2000009c 	.word	0x2000009c
 800a928:	2000009d 	.word	0x2000009d

0800a92c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b086      	sub	sp, #24
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	32b0      	adds	r2, #176	@ 0xb0
 800a940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a944:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a946:	2300      	movs	r3, #0
 800a948:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a94e:	2300      	movs	r3, #0
 800a950:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d101      	bne.n	800a95c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a958:	2303      	movs	r3, #3
 800a95a:	e0bf      	b.n	800aadc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a964:	2b00      	cmp	r3, #0
 800a966:	d050      	beq.n	800aa0a <USBD_CDC_Setup+0xde>
 800a968:	2b20      	cmp	r3, #32
 800a96a:	f040 80af 	bne.w	800aacc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	88db      	ldrh	r3, [r3, #6]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d03a      	beq.n	800a9ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	b25b      	sxtb	r3, r3
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	da1b      	bge.n	800a9b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	33b0      	adds	r3, #176	@ 0xb0
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	4413      	add	r3, r2
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a996:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	88d2      	ldrh	r2, [r2, #6]
 800a99c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	88db      	ldrh	r3, [r3, #6]
 800a9a2:	2b07      	cmp	r3, #7
 800a9a4:	bf28      	it	cs
 800a9a6:	2307      	movcs	r3, #7
 800a9a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	89fa      	ldrh	r2, [r7, #14]
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f001 fd47 	bl	800c444 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a9b6:	e090      	b.n	800aada <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	785a      	ldrb	r2, [r3, #1]
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	88db      	ldrh	r3, [r3, #6]
 800a9c6:	2b3f      	cmp	r3, #63	@ 0x3f
 800a9c8:	d803      	bhi.n	800a9d2 <USBD_CDC_Setup+0xa6>
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	88db      	ldrh	r3, [r3, #6]
 800a9ce:	b2da      	uxtb	r2, r3
 800a9d0:	e000      	b.n	800a9d4 <USBD_CDC_Setup+0xa8>
 800a9d2:	2240      	movs	r2, #64	@ 0x40
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a9da:	6939      	ldr	r1, [r7, #16]
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f001 fd59 	bl	800c49c <USBD_CtlPrepareRx>
      break;
 800a9ea:	e076      	b.n	800aada <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	33b0      	adds	r3, #176	@ 0xb0
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	7850      	ldrb	r0, [r2, #1]
 800aa02:	2200      	movs	r2, #0
 800aa04:	6839      	ldr	r1, [r7, #0]
 800aa06:	4798      	blx	r3
      break;
 800aa08:	e067      	b.n	800aada <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	785b      	ldrb	r3, [r3, #1]
 800aa0e:	2b0b      	cmp	r3, #11
 800aa10:	d851      	bhi.n	800aab6 <USBD_CDC_Setup+0x18a>
 800aa12:	a201      	add	r2, pc, #4	@ (adr r2, 800aa18 <USBD_CDC_Setup+0xec>)
 800aa14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa18:	0800aa49 	.word	0x0800aa49
 800aa1c:	0800aac5 	.word	0x0800aac5
 800aa20:	0800aab7 	.word	0x0800aab7
 800aa24:	0800aab7 	.word	0x0800aab7
 800aa28:	0800aab7 	.word	0x0800aab7
 800aa2c:	0800aab7 	.word	0x0800aab7
 800aa30:	0800aab7 	.word	0x0800aab7
 800aa34:	0800aab7 	.word	0x0800aab7
 800aa38:	0800aab7 	.word	0x0800aab7
 800aa3c:	0800aab7 	.word	0x0800aab7
 800aa40:	0800aa73 	.word	0x0800aa73
 800aa44:	0800aa9d 	.word	0x0800aa9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2b03      	cmp	r3, #3
 800aa52:	d107      	bne.n	800aa64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aa54:	f107 030a 	add.w	r3, r7, #10
 800aa58:	2202      	movs	r2, #2
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f001 fcf1 	bl	800c444 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa62:	e032      	b.n	800aaca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa64:	6839      	ldr	r1, [r7, #0]
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f001 fc6f 	bl	800c34a <USBD_CtlError>
            ret = USBD_FAIL;
 800aa6c:	2303      	movs	r3, #3
 800aa6e:	75fb      	strb	r3, [r7, #23]
          break;
 800aa70:	e02b      	b.n	800aaca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	d107      	bne.n	800aa8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa7e:	f107 030d 	add.w	r3, r7, #13
 800aa82:	2201      	movs	r2, #1
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f001 fcdc 	bl	800c444 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa8c:	e01d      	b.n	800aaca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa8e:	6839      	ldr	r1, [r7, #0]
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f001 fc5a 	bl	800c34a <USBD_CtlError>
            ret = USBD_FAIL;
 800aa96:	2303      	movs	r3, #3
 800aa98:	75fb      	strb	r3, [r7, #23]
          break;
 800aa9a:	e016      	b.n	800aaca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	2b03      	cmp	r3, #3
 800aaa6:	d00f      	beq.n	800aac8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aaa8:	6839      	ldr	r1, [r7, #0]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f001 fc4d 	bl	800c34a <USBD_CtlError>
            ret = USBD_FAIL;
 800aab0:	2303      	movs	r3, #3
 800aab2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aab4:	e008      	b.n	800aac8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f001 fc46 	bl	800c34a <USBD_CtlError>
          ret = USBD_FAIL;
 800aabe:	2303      	movs	r3, #3
 800aac0:	75fb      	strb	r3, [r7, #23]
          break;
 800aac2:	e002      	b.n	800aaca <USBD_CDC_Setup+0x19e>
          break;
 800aac4:	bf00      	nop
 800aac6:	e008      	b.n	800aada <USBD_CDC_Setup+0x1ae>
          break;
 800aac8:	bf00      	nop
      }
      break;
 800aaca:	e006      	b.n	800aada <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f001 fc3b 	bl	800c34a <USBD_CtlError>
      ret = USBD_FAIL;
 800aad4:	2303      	movs	r3, #3
 800aad6:	75fb      	strb	r3, [r7, #23]
      break;
 800aad8:	bf00      	nop
  }

  return (uint8_t)ret;
 800aada:	7dfb      	ldrb	r3, [r7, #23]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3718      	adds	r7, #24
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	460b      	mov	r3, r1
 800aaee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aaf6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	32b0      	adds	r2, #176	@ 0xb0
 800ab02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d101      	bne.n	800ab0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ab0a:	2303      	movs	r3, #3
 800ab0c:	e065      	b.n	800abda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	32b0      	adds	r2, #176	@ 0xb0
 800ab18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab1e:	78fb      	ldrb	r3, [r7, #3]
 800ab20:	f003 020f 	and.w	r2, r3, #15
 800ab24:	6879      	ldr	r1, [r7, #4]
 800ab26:	4613      	mov	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	4413      	add	r3, r2
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	440b      	add	r3, r1
 800ab30:	3318      	adds	r3, #24
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d02f      	beq.n	800ab98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ab38:	78fb      	ldrb	r3, [r7, #3]
 800ab3a:	f003 020f 	and.w	r2, r3, #15
 800ab3e:	6879      	ldr	r1, [r7, #4]
 800ab40:	4613      	mov	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	440b      	add	r3, r1
 800ab4a:	3318      	adds	r3, #24
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	78fb      	ldrb	r3, [r7, #3]
 800ab50:	f003 010f 	and.w	r1, r3, #15
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	460b      	mov	r3, r1
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	440b      	add	r3, r1
 800ab5c:	00db      	lsls	r3, r3, #3
 800ab5e:	4403      	add	r3, r0
 800ab60:	3320      	adds	r3, #32
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab68:	fb01 f303 	mul.w	r3, r1, r3
 800ab6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d112      	bne.n	800ab98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ab72:	78fb      	ldrb	r3, [r7, #3]
 800ab74:	f003 020f 	and.w	r2, r3, #15
 800ab78:	6879      	ldr	r1, [r7, #4]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	4413      	add	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	440b      	add	r3, r1
 800ab84:	3318      	adds	r3, #24
 800ab86:	2200      	movs	r2, #0
 800ab88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab8a:	78f9      	ldrb	r1, [r7, #3]
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	2200      	movs	r2, #0
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f005 ff9e 	bl	8010ad2 <USBD_LL_Transmit>
 800ab96:	e01f      	b.n	800abd8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	33b0      	adds	r3, #176	@ 0xb0
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	4413      	add	r3, r2
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d010      	beq.n	800abd8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	33b0      	adds	r3, #176	@ 0xb0
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	4413      	add	r3, r2
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	691b      	ldr	r3, [r3, #16]
 800abc8:	68ba      	ldr	r2, [r7, #8]
 800abca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800abd4:	78fa      	ldrb	r2, [r7, #3]
 800abd6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b084      	sub	sp, #16
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	460b      	mov	r3, r1
 800abec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	32b0      	adds	r2, #176	@ 0xb0
 800abf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abfc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	32b0      	adds	r2, #176	@ 0xb0
 800ac08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d101      	bne.n	800ac14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ac10:	2303      	movs	r3, #3
 800ac12:	e01a      	b.n	800ac4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ac14:	78fb      	ldrb	r3, [r7, #3]
 800ac16:	4619      	mov	r1, r3
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f005 ff9c 	bl	8010b56 <USBD_LL_GetRxDataSize>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	33b0      	adds	r3, #176	@ 0xb0
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ac44:	4611      	mov	r1, r2
 800ac46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b084      	sub	sp, #16
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	32b0      	adds	r2, #176	@ 0xb0
 800ac64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d101      	bne.n	800ac74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac70:	2303      	movs	r3, #3
 800ac72:	e024      	b.n	800acbe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	33b0      	adds	r3, #176	@ 0xb0
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	4413      	add	r3, r2
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d019      	beq.n	800acbc <USBD_CDC_EP0_RxReady+0x6a>
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ac8e:	2bff      	cmp	r3, #255	@ 0xff
 800ac90:	d014      	beq.n	800acbc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	33b0      	adds	r3, #176	@ 0xb0
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	4413      	add	r3, r2
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800acaa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800acb2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	22ff      	movs	r2, #255	@ 0xff
 800acb8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
	...

0800acc8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800acd0:	2182      	movs	r1, #130	@ 0x82
 800acd2:	4818      	ldr	r0, [pc, #96]	@ (800ad34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acd4:	f000 fcd9 	bl	800b68a <USBD_GetEpDesc>
 800acd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800acda:	2101      	movs	r1, #1
 800acdc:	4815      	ldr	r0, [pc, #84]	@ (800ad34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acde:	f000 fcd4 	bl	800b68a <USBD_GetEpDesc>
 800ace2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ace4:	2181      	movs	r1, #129	@ 0x81
 800ace6:	4813      	ldr	r0, [pc, #76]	@ (800ad34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ace8:	f000 fccf 	bl	800b68a <USBD_GetEpDesc>
 800acec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	2210      	movs	r2, #16
 800acf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d006      	beq.n	800ad0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad08:	711a      	strb	r2, [r3, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d006      	beq.n	800ad22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad1c:	711a      	strb	r2, [r3, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2243      	movs	r2, #67	@ 0x43
 800ad26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad28:	4b02      	ldr	r3, [pc, #8]	@ (800ad34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3718      	adds	r7, #24
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	20000058 	.word	0x20000058

0800ad38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad40:	2182      	movs	r1, #130	@ 0x82
 800ad42:	4818      	ldr	r0, [pc, #96]	@ (800ada4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad44:	f000 fca1 	bl	800b68a <USBD_GetEpDesc>
 800ad48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad4a:	2101      	movs	r1, #1
 800ad4c:	4815      	ldr	r0, [pc, #84]	@ (800ada4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad4e:	f000 fc9c 	bl	800b68a <USBD_GetEpDesc>
 800ad52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad54:	2181      	movs	r1, #129	@ 0x81
 800ad56:	4813      	ldr	r0, [pc, #76]	@ (800ada4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad58:	f000 fc97 	bl	800b68a <USBD_GetEpDesc>
 800ad5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d002      	beq.n	800ad6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2210      	movs	r2, #16
 800ad68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d006      	beq.n	800ad7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	2200      	movs	r2, #0
 800ad74:	711a      	strb	r2, [r3, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f042 0202 	orr.w	r2, r2, #2
 800ad7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d006      	beq.n	800ad92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2200      	movs	r2, #0
 800ad88:	711a      	strb	r2, [r3, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f042 0202 	orr.w	r2, r2, #2
 800ad90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2243      	movs	r2, #67	@ 0x43
 800ad96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad98:	4b02      	ldr	r3, [pc, #8]	@ (800ada4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3718      	adds	r7, #24
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	20000058 	.word	0x20000058

0800ada8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800adb0:	2182      	movs	r1, #130	@ 0x82
 800adb2:	4818      	ldr	r0, [pc, #96]	@ (800ae14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800adb4:	f000 fc69 	bl	800b68a <USBD_GetEpDesc>
 800adb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800adba:	2101      	movs	r1, #1
 800adbc:	4815      	ldr	r0, [pc, #84]	@ (800ae14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800adbe:	f000 fc64 	bl	800b68a <USBD_GetEpDesc>
 800adc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800adc4:	2181      	movs	r1, #129	@ 0x81
 800adc6:	4813      	ldr	r0, [pc, #76]	@ (800ae14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800adc8:	f000 fc5f 	bl	800b68a <USBD_GetEpDesc>
 800adcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	2210      	movs	r2, #16
 800add8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d006      	beq.n	800adee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ade8:	711a      	strb	r2, [r3, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d006      	beq.n	800ae02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800adfc:	711a      	strb	r2, [r3, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2243      	movs	r2, #67	@ 0x43
 800ae06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae08:	4b02      	ldr	r3, [pc, #8]	@ (800ae14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3718      	adds	r7, #24
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	20000058 	.word	0x20000058

0800ae18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	220a      	movs	r2, #10
 800ae24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ae26:	4b03      	ldr	r3, [pc, #12]	@ (800ae34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr
 800ae34:	20000014 	.word	0x20000014

0800ae38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d101      	bne.n	800ae4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ae48:	2303      	movs	r3, #3
 800ae4a:	e009      	b.n	800ae60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	33b0      	adds	r3, #176	@ 0xb0
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	683a      	ldr	r2, [r7, #0]
 800ae5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b087      	sub	sp, #28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	32b0      	adds	r2, #176	@ 0xb0
 800ae82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae86:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d101      	bne.n	800ae92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	e008      	b.n	800aea4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	371c      	adds	r7, #28
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	32b0      	adds	r2, #176	@ 0xb0
 800aec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d101      	bne.n	800aed4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800aed0:	2303      	movs	r3, #3
 800aed2:	e004      	b.n	800aede <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
	...

0800aeec <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	32b0      	adds	r2, #176	@ 0xb0
 800aefe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af02:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800af04:	2301      	movs	r3, #1
 800af06:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d101      	bne.n	800af12 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800af0e:	2303      	movs	r3, #3
 800af10:	e025      	b.n	800af5e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d11f      	bne.n	800af5c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2201      	movs	r2, #1
 800af20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800af24:	4b10      	ldr	r3, [pc, #64]	@ (800af68 <USBD_CDC_TransmitPacket+0x7c>)
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	f003 020f 	and.w	r2, r3, #15
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	4613      	mov	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4413      	add	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4403      	add	r3, r0
 800af3e:	3318      	adds	r3, #24
 800af40:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800af42:	4b09      	ldr	r3, [pc, #36]	@ (800af68 <USBD_CDC_TransmitPacket+0x7c>)
 800af44:	7819      	ldrb	r1, [r3, #0]
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f005 fdbd 	bl	8010ad2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800af58:	2300      	movs	r3, #0
 800af5a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	2000009b 	.word	0x2000009b

0800af6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	32b0      	adds	r2, #176	@ 0xb0
 800af7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af82:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	32b0      	adds	r2, #176	@ 0xb0
 800af8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d101      	bne.n	800af9a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800af96:	2303      	movs	r3, #3
 800af98:	e018      	b.n	800afcc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	7c1b      	ldrb	r3, [r3, #16]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10a      	bne.n	800afb8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afa2:	4b0c      	ldr	r3, [pc, #48]	@ (800afd4 <USBD_CDC_ReceivePacket+0x68>)
 800afa4:	7819      	ldrb	r1, [r3, #0]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f005 fdaf 	bl	8010b14 <USBD_LL_PrepareReceive>
 800afb6:	e008      	b.n	800afca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afb8:	4b06      	ldr	r3, [pc, #24]	@ (800afd4 <USBD_CDC_ReceivePacket+0x68>)
 800afba:	7819      	ldrb	r1, [r3, #0]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afc2:	2340      	movs	r3, #64	@ 0x40
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f005 fda5 	bl	8010b14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3710      	adds	r7, #16
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	2000009c 	.word	0x2000009c

0800afd8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	4613      	mov	r3, r2
 800afe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10a      	bne.n	800b002 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800afec:	4817      	ldr	r0, [pc, #92]	@ (800b04c <USBD_Init+0x74>)
 800afee:	f005 ff07 	bl	8010e00 <iprintf>
 800aff2:	4817      	ldr	r0, [pc, #92]	@ (800b050 <USBD_Init+0x78>)
 800aff4:	f005 ff04 	bl	8010e00 <iprintf>
 800aff8:	200a      	movs	r0, #10
 800affa:	f005 ff13 	bl	8010e24 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800affe:	2303      	movs	r3, #3
 800b000:	e01f      	b.n	800b042 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2200      	movs	r2, #0
 800b00e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d003      	beq.n	800b028 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	68ba      	ldr	r2, [r7, #8]
 800b024:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	79fa      	ldrb	r2, [r7, #7]
 800b034:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f005 fc00 	bl	801083c <USBD_LL_Init>
 800b03c:	4603      	mov	r3, r0
 800b03e:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b040:	7dfb      	ldrb	r3, [r7, #23]
}
 800b042:	4618      	mov	r0, r3
 800b044:	3718      	adds	r7, #24
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	08011c90 	.word	0x08011c90
 800b050:	08011c98 	.word	0x08011c98

0800b054 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b05e:	2300      	movs	r3, #0
 800b060:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10a      	bne.n	800b07e <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800b068:	481a      	ldr	r0, [pc, #104]	@ (800b0d4 <USBD_RegisterClass+0x80>)
 800b06a:	f005 fec9 	bl	8010e00 <iprintf>
 800b06e:	481a      	ldr	r0, [pc, #104]	@ (800b0d8 <USBD_RegisterClass+0x84>)
 800b070:	f005 fec6 	bl	8010e00 <iprintf>
 800b074:	200a      	movs	r0, #10
 800b076:	f005 fed5 	bl	8010e24 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b07a:	2303      	movs	r3, #3
 800b07c:	e025      	b.n	800b0ca <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	32ae      	adds	r2, #174	@ 0xae
 800b090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00f      	beq.n	800b0ba <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	32ae      	adds	r2, #174	@ 0xae
 800b0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0aa:	f107 020e 	add.w	r2, r7, #14
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	4798      	blx	r3
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b0c0:	1c5a      	adds	r2, r3, #1
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	08011c90 	.word	0x08011c90
 800b0d8:	08011cb0 	.word	0x08011cb0

0800b0dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f005 fc0b 	bl	8010900 <USBD_LL_Start>
 800b0ea:	4603      	mov	r3, r0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	370c      	adds	r7, #12
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b084      	sub	sp, #16
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	460b      	mov	r3, r1
 800b114:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b116:	2300      	movs	r3, #0
 800b118:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b120:	2b00      	cmp	r3, #0
 800b122:	d009      	beq.n	800b138 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	78fa      	ldrb	r2, [r7, #3]
 800b12e:	4611      	mov	r1, r2
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	4798      	blx	r3
 800b134:	4603      	mov	r3, r0
 800b136:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b138:	7bfb      	ldrb	r3, [r7, #15]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b084      	sub	sp, #16
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	460b      	mov	r3, r1
 800b14c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b14e:	2300      	movs	r3, #0
 800b150:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	78fa      	ldrb	r2, [r7, #3]
 800b15c:	4611      	mov	r1, r2
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	4798      	blx	r3
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d001      	beq.n	800b16c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b168:	2303      	movs	r3, #3
 800b16a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b084      	sub	sp, #16
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
 800b17e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b186:	6839      	ldr	r1, [r7, #0]
 800b188:	4618      	mov	r0, r3
 800b18a:	f001 f8a4 	bl	800c2d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2201      	movs	r2, #1
 800b192:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b19c:	461a      	mov	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b1aa:	f003 031f 	and.w	r3, r3, #31
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d01a      	beq.n	800b1e8 <USBD_LL_SetupStage+0x72>
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d822      	bhi.n	800b1fc <USBD_LL_SetupStage+0x86>
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d002      	beq.n	800b1c0 <USBD_LL_SetupStage+0x4a>
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d00a      	beq.n	800b1d4 <USBD_LL_SetupStage+0x5e>
 800b1be:	e01d      	b.n	800b1fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fad1 	bl	800b770 <USBD_StdDevReq>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b1d2:	e020      	b.n	800b216 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fb39 	bl	800b854 <USBD_StdItfReq>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b1e6:	e016      	b.n	800b216 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fb9b 	bl	800b92c <USBD_StdEPReq>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	73fb      	strb	r3, [r7, #15]
      break;
 800b1fa:	e00c      	b.n	800b216 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b202:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b206:	b2db      	uxtb	r3, r3
 800b208:	4619      	mov	r1, r3
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f005 fbd8 	bl	80109c0 <USBD_LL_StallEP>
 800b210:	4603      	mov	r3, r0
 800b212:	73fb      	strb	r3, [r7, #15]
      break;
 800b214:	bf00      	nop
  }

  return ret;
 800b216:	7bfb      	ldrb	r3, [r7, #15]
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	460b      	mov	r3, r1
 800b22a:	607a      	str	r2, [r7, #4]
 800b22c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b22e:	2300      	movs	r3, #0
 800b230:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b232:	7afb      	ldrb	r3, [r7, #11]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d16e      	bne.n	800b316 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b23e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b246:	2b03      	cmp	r3, #3
 800b248:	f040 8098 	bne.w	800b37c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	689a      	ldr	r2, [r3, #8]
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	429a      	cmp	r2, r3
 800b256:	d913      	bls.n	800b280 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	689a      	ldr	r2, [r3, #8]
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	1ad2      	subs	r2, r2, r3
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	68da      	ldr	r2, [r3, #12]
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	4293      	cmp	r3, r2
 800b270:	bf28      	it	cs
 800b272:	4613      	movcs	r3, r2
 800b274:	461a      	mov	r2, r3
 800b276:	6879      	ldr	r1, [r7, #4]
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f001 f92c 	bl	800c4d6 <USBD_CtlContinueRx>
 800b27e:	e07d      	b.n	800b37c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b286:	f003 031f 	and.w	r3, r3, #31
 800b28a:	2b02      	cmp	r3, #2
 800b28c:	d014      	beq.n	800b2b8 <USBD_LL_DataOutStage+0x98>
 800b28e:	2b02      	cmp	r3, #2
 800b290:	d81d      	bhi.n	800b2ce <USBD_LL_DataOutStage+0xae>
 800b292:	2b00      	cmp	r3, #0
 800b294:	d002      	beq.n	800b29c <USBD_LL_DataOutStage+0x7c>
 800b296:	2b01      	cmp	r3, #1
 800b298:	d003      	beq.n	800b2a2 <USBD_LL_DataOutStage+0x82>
 800b29a:	e018      	b.n	800b2ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b29c:	2300      	movs	r3, #0
 800b29e:	75bb      	strb	r3, [r7, #22]
            break;
 800b2a0:	e018      	b.n	800b2d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f000 f9d2 	bl	800b656 <USBD_CoreFindIF>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	75bb      	strb	r3, [r7, #22]
            break;
 800b2b6:	e00d      	b.n	800b2d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	68f8      	ldr	r0, [r7, #12]
 800b2c4:	f000 f9d4 	bl	800b670 <USBD_CoreFindEP>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	75bb      	strb	r3, [r7, #22]
            break;
 800b2cc:	e002      	b.n	800b2d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	75bb      	strb	r3, [r7, #22]
            break;
 800b2d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b2d4:	7dbb      	ldrb	r3, [r7, #22]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d119      	bne.n	800b30e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	2b03      	cmp	r3, #3
 800b2e4:	d113      	bne.n	800b30e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b2e6:	7dba      	ldrb	r2, [r7, #22]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	32ae      	adds	r2, #174	@ 0xae
 800b2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d00b      	beq.n	800b30e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b2f6:	7dba      	ldrb	r2, [r7, #22]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b2fe:	7dba      	ldrb	r2, [r7, #22]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	32ae      	adds	r2, #174	@ 0xae
 800b304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b308:	691b      	ldr	r3, [r3, #16]
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f001 f8f2 	bl	800c4f8 <USBD_CtlSendStatus>
 800b314:	e032      	b.n	800b37c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b316:	7afb      	ldrb	r3, [r7, #11]
 800b318:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	4619      	mov	r1, r3
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	f000 f9a5 	bl	800b670 <USBD_CoreFindEP>
 800b326:	4603      	mov	r3, r0
 800b328:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b32a:	7dbb      	ldrb	r3, [r7, #22]
 800b32c:	2bff      	cmp	r3, #255	@ 0xff
 800b32e:	d025      	beq.n	800b37c <USBD_LL_DataOutStage+0x15c>
 800b330:	7dbb      	ldrb	r3, [r7, #22]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d122      	bne.n	800b37c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d117      	bne.n	800b372 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b342:	7dba      	ldrb	r2, [r7, #22]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	32ae      	adds	r2, #174	@ 0xae
 800b348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b34c:	699b      	ldr	r3, [r3, #24]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00f      	beq.n	800b372 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b352:	7dba      	ldrb	r2, [r7, #22]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b35a:	7dba      	ldrb	r2, [r7, #22]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	32ae      	adds	r2, #174	@ 0xae
 800b360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b364:	699b      	ldr	r3, [r3, #24]
 800b366:	7afa      	ldrb	r2, [r7, #11]
 800b368:	4611      	mov	r1, r2
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	4798      	blx	r3
 800b36e:	4603      	mov	r3, r0
 800b370:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b372:	7dfb      	ldrb	r3, [r7, #23]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d001      	beq.n	800b37c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b378:	7dfb      	ldrb	r3, [r7, #23]
 800b37a:	e000      	b.n	800b37e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b086      	sub	sp, #24
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	60f8      	str	r0, [r7, #12]
 800b38e:	460b      	mov	r3, r1
 800b390:	607a      	str	r2, [r7, #4]
 800b392:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b394:	7afb      	ldrb	r3, [r7, #11]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d16f      	bne.n	800b47a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3314      	adds	r3, #20
 800b39e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d15a      	bne.n	800b460 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	689a      	ldr	r2, [r3, #8]
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d914      	bls.n	800b3e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	689a      	ldr	r2, [r3, #8]
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	1ad2      	subs	r2, r2, r3
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	6879      	ldr	r1, [r7, #4]
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f001 f854 	bl	800c47a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	2100      	movs	r1, #0
 800b3d8:	68f8      	ldr	r0, [r7, #12]
 800b3da:	f005 fb9b 	bl	8010b14 <USBD_LL_PrepareReceive>
 800b3de:	e03f      	b.n	800b460 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	68da      	ldr	r2, [r3, #12]
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d11c      	bne.n	800b426 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	685a      	ldr	r2, [r3, #4]
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d316      	bcc.n	800b426 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	685a      	ldr	r2, [r3, #4]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b402:	429a      	cmp	r2, r3
 800b404:	d20f      	bcs.n	800b426 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b406:	2200      	movs	r2, #0
 800b408:	2100      	movs	r1, #0
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f001 f835 	bl	800c47a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b418:	2300      	movs	r3, #0
 800b41a:	2200      	movs	r2, #0
 800b41c:	2100      	movs	r1, #0
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	f005 fb78 	bl	8010b14 <USBD_LL_PrepareReceive>
 800b424:	e01c      	b.n	800b460 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	2b03      	cmp	r3, #3
 800b430:	d10f      	bne.n	800b452 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d009      	beq.n	800b452 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2200      	movs	r2, #0
 800b442:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b452:	2180      	movs	r1, #128	@ 0x80
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f005 fab3 	bl	80109c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f001 f85f 	bl	800c51e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d03a      	beq.n	800b4e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f7ff fe42 	bl	800b0f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b478:	e032      	b.n	800b4e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b47a:	7afb      	ldrb	r3, [r7, #11]
 800b47c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b480:	b2db      	uxtb	r3, r3
 800b482:	4619      	mov	r1, r3
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f000 f8f3 	bl	800b670 <USBD_CoreFindEP>
 800b48a:	4603      	mov	r3, r0
 800b48c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b48e:	7dfb      	ldrb	r3, [r7, #23]
 800b490:	2bff      	cmp	r3, #255	@ 0xff
 800b492:	d025      	beq.n	800b4e0 <USBD_LL_DataInStage+0x15a>
 800b494:	7dfb      	ldrb	r3, [r7, #23]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d122      	bne.n	800b4e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	2b03      	cmp	r3, #3
 800b4a4:	d11c      	bne.n	800b4e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b4a6:	7dfa      	ldrb	r2, [r7, #23]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	32ae      	adds	r2, #174	@ 0xae
 800b4ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d014      	beq.n	800b4e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b4b6:	7dfa      	ldrb	r2, [r7, #23]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b4be:	7dfa      	ldrb	r2, [r7, #23]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	32ae      	adds	r2, #174	@ 0xae
 800b4c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	7afa      	ldrb	r2, [r7, #11]
 800b4cc:	4611      	mov	r1, r2
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	4798      	blx	r3
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b4d6:	7dbb      	ldrb	r3, [r7, #22]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b4dc:	7dbb      	ldrb	r3, [r7, #22]
 800b4de:	e000      	b.n	800b4e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3718      	adds	r7, #24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2200      	movs	r2, #0
 800b50a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b522:	2b00      	cmp	r3, #0
 800b524:	d014      	beq.n	800b550 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00e      	beq.n	800b550 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	6852      	ldr	r2, [r2, #4]
 800b53e:	b2d2      	uxtb	r2, r2
 800b540:	4611      	mov	r1, r2
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	4798      	blx	r3
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d001      	beq.n	800b550 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b54c:	2303      	movs	r3, #3
 800b54e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b550:	2340      	movs	r3, #64	@ 0x40
 800b552:	2200      	movs	r2, #0
 800b554:	2100      	movs	r1, #0
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f005 f9ed 	bl	8010936 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2240      	movs	r2, #64	@ 0x40
 800b568:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b56c:	2340      	movs	r3, #64	@ 0x40
 800b56e:	2200      	movs	r2, #0
 800b570:	2180      	movs	r1, #128	@ 0x80
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f005 f9df 	bl	8010936 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2240      	movs	r2, #64	@ 0x40
 800b582:	621a      	str	r2, [r3, #32]

  return ret;
 800b584:	7bfb      	ldrb	r3, [r7, #15]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b58e:	b480      	push	{r7}
 800b590:	b083      	sub	sp, #12
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	460b      	mov	r3, r1
 800b598:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	78fa      	ldrb	r2, [r7, #3]
 800b59e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	370c      	adds	r7, #12
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b5ae:	b480      	push	{r7}
 800b5b0:	b083      	sub	sp, #12
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	2b04      	cmp	r3, #4
 800b5c0:	d006      	beq.n	800b5d0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2204      	movs	r2, #4
 800b5d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	370c      	adds	r7, #12
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr

0800b5e6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5e6:	b480      	push	{r7}
 800b5e8:	b083      	sub	sp, #12
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2b04      	cmp	r3, #4
 800b5f8:	d106      	bne.n	800b608 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b600:	b2da      	uxtb	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	370c      	adds	r7, #12
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr

0800b616 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b082      	sub	sp, #8
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b624:	b2db      	uxtb	r3, r3
 800b626:	2b03      	cmp	r3, #3
 800b628:	d110      	bne.n	800b64c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00b      	beq.n	800b64c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b63a:	69db      	ldr	r3, [r3, #28]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d005      	beq.n	800b64c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b646:	69db      	ldr	r3, [r3, #28]
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b656:	b480      	push	{r7}
 800b658:	b083      	sub	sp, #12
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
 800b65e:	460b      	mov	r3, r1
 800b660:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b662:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b664:	4618      	mov	r0, r3
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	460b      	mov	r3, r1
 800b67a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b67c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b67e:	4618      	mov	r0, r3
 800b680:	370c      	adds	r7, #12
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b086      	sub	sp, #24
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	460b      	mov	r3, r1
 800b694:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	885b      	ldrh	r3, [r3, #2]
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	7812      	ldrb	r2, [r2, #0]
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d91f      	bls.n	800b6f0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b6b6:	e013      	b.n	800b6e0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b6b8:	f107 030a 	add.w	r3, r7, #10
 800b6bc:	4619      	mov	r1, r3
 800b6be:	6978      	ldr	r0, [r7, #20]
 800b6c0:	f000 f81b 	bl	800b6fa <USBD_GetNextDesc>
 800b6c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	785b      	ldrb	r3, [r3, #1]
 800b6ca:	2b05      	cmp	r3, #5
 800b6cc:	d108      	bne.n	800b6e0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	789b      	ldrb	r3, [r3, #2]
 800b6d6:	78fa      	ldrb	r2, [r7, #3]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d008      	beq.n	800b6ee <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	885b      	ldrh	r3, [r3, #2]
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	897b      	ldrh	r3, [r7, #10]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d8e5      	bhi.n	800b6b8 <USBD_GetEpDesc+0x2e>
 800b6ec:	e000      	b.n	800b6f0 <USBD_GetEpDesc+0x66>
          break;
 800b6ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b6f0:	693b      	ldr	r3, [r7, #16]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3718      	adds	r7, #24
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b6fa:	b480      	push	{r7}
 800b6fc:	b085      	sub	sp, #20
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	881b      	ldrh	r3, [r3, #0]
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	7812      	ldrb	r2, [r2, #0]
 800b710:	4413      	add	r3, r2
 800b712:	b29a      	uxth	r2, r3
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	461a      	mov	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4413      	add	r3, r2
 800b722:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b724:	68fb      	ldr	r3, [r7, #12]
}
 800b726:	4618      	mov	r0, r3
 800b728:	3714      	adds	r7, #20
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b732:	b480      	push	{r7}
 800b734:	b087      	sub	sp, #28
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	3301      	adds	r3, #1
 800b748:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b750:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b754:	021b      	lsls	r3, r3, #8
 800b756:	b21a      	sxth	r2, r3
 800b758:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b75c:	4313      	orrs	r3, r2
 800b75e:	b21b      	sxth	r3, r3
 800b760:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b762:	89fb      	ldrh	r3, [r7, #14]
}
 800b764:	4618      	mov	r0, r3
 800b766:	371c      	adds	r7, #28
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b786:	2b40      	cmp	r3, #64	@ 0x40
 800b788:	d005      	beq.n	800b796 <USBD_StdDevReq+0x26>
 800b78a:	2b40      	cmp	r3, #64	@ 0x40
 800b78c:	d857      	bhi.n	800b83e <USBD_StdDevReq+0xce>
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00f      	beq.n	800b7b2 <USBD_StdDevReq+0x42>
 800b792:	2b20      	cmp	r3, #32
 800b794:	d153      	bne.n	800b83e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	32ae      	adds	r2, #174	@ 0xae
 800b7a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	6839      	ldr	r1, [r7, #0]
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	4798      	blx	r3
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b7b0:	e04a      	b.n	800b848 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	785b      	ldrb	r3, [r3, #1]
 800b7b6:	2b09      	cmp	r3, #9
 800b7b8:	d83b      	bhi.n	800b832 <USBD_StdDevReq+0xc2>
 800b7ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b7c0 <USBD_StdDevReq+0x50>)
 800b7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c0:	0800b815 	.word	0x0800b815
 800b7c4:	0800b829 	.word	0x0800b829
 800b7c8:	0800b833 	.word	0x0800b833
 800b7cc:	0800b81f 	.word	0x0800b81f
 800b7d0:	0800b833 	.word	0x0800b833
 800b7d4:	0800b7f3 	.word	0x0800b7f3
 800b7d8:	0800b7e9 	.word	0x0800b7e9
 800b7dc:	0800b833 	.word	0x0800b833
 800b7e0:	0800b80b 	.word	0x0800b80b
 800b7e4:	0800b7fd 	.word	0x0800b7fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b7e8:	6839      	ldr	r1, [r7, #0]
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 fa3c 	bl	800bc68 <USBD_GetDescriptor>
          break;
 800b7f0:	e024      	b.n	800b83c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b7f2:	6839      	ldr	r1, [r7, #0]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fbcb 	bl	800bf90 <USBD_SetAddress>
          break;
 800b7fa:	e01f      	b.n	800b83c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fc0a 	bl	800c018 <USBD_SetConfig>
 800b804:	4603      	mov	r3, r0
 800b806:	73fb      	strb	r3, [r7, #15]
          break;
 800b808:	e018      	b.n	800b83c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b80a:	6839      	ldr	r1, [r7, #0]
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 fcad 	bl	800c16c <USBD_GetConfig>
          break;
 800b812:	e013      	b.n	800b83c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fcde 	bl	800c1d8 <USBD_GetStatus>
          break;
 800b81c:	e00e      	b.n	800b83c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b81e:	6839      	ldr	r1, [r7, #0]
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 fd0d 	bl	800c240 <USBD_SetFeature>
          break;
 800b826:	e009      	b.n	800b83c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fd31 	bl	800c292 <USBD_ClrFeature>
          break;
 800b830:	e004      	b.n	800b83c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b832:	6839      	ldr	r1, [r7, #0]
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fd88 	bl	800c34a <USBD_CtlError>
          break;
 800b83a:	bf00      	nop
      }
      break;
 800b83c:	e004      	b.n	800b848 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 fd82 	bl	800c34a <USBD_CtlError>
      break;
 800b846:	bf00      	nop
  }

  return ret;
 800b848:	7bfb      	ldrb	r3, [r7, #15]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop

0800b854 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b86a:	2b40      	cmp	r3, #64	@ 0x40
 800b86c:	d005      	beq.n	800b87a <USBD_StdItfReq+0x26>
 800b86e:	2b40      	cmp	r3, #64	@ 0x40
 800b870:	d852      	bhi.n	800b918 <USBD_StdItfReq+0xc4>
 800b872:	2b00      	cmp	r3, #0
 800b874:	d001      	beq.n	800b87a <USBD_StdItfReq+0x26>
 800b876:	2b20      	cmp	r3, #32
 800b878:	d14e      	bne.n	800b918 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b880:	b2db      	uxtb	r3, r3
 800b882:	3b01      	subs	r3, #1
 800b884:	2b02      	cmp	r3, #2
 800b886:	d840      	bhi.n	800b90a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	889b      	ldrh	r3, [r3, #4]
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d836      	bhi.n	800b900 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	889b      	ldrh	r3, [r3, #4]
 800b896:	b2db      	uxtb	r3, r3
 800b898:	4619      	mov	r1, r3
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f7ff fedb 	bl	800b656 <USBD_CoreFindIF>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8a4:	7bbb      	ldrb	r3, [r7, #14]
 800b8a6:	2bff      	cmp	r3, #255	@ 0xff
 800b8a8:	d01d      	beq.n	800b8e6 <USBD_StdItfReq+0x92>
 800b8aa:	7bbb      	ldrb	r3, [r7, #14]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d11a      	bne.n	800b8e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b8b0:	7bba      	ldrb	r2, [r7, #14]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	32ae      	adds	r2, #174	@ 0xae
 800b8b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00f      	beq.n	800b8e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b8c0:	7bba      	ldrb	r2, [r7, #14]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b8c8:	7bba      	ldrb	r2, [r7, #14]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	32ae      	adds	r2, #174	@ 0xae
 800b8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	6839      	ldr	r1, [r7, #0]
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	4798      	blx	r3
 800b8da:	4603      	mov	r3, r0
 800b8dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8de:	e004      	b.n	800b8ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8e4:	e001      	b.n	800b8ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	88db      	ldrh	r3, [r3, #6]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d110      	bne.n	800b914 <USBD_StdItfReq+0xc0>
 800b8f2:	7bfb      	ldrb	r3, [r7, #15]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d10d      	bne.n	800b914 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 fdfd 	bl	800c4f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b8fe:	e009      	b.n	800b914 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b900:	6839      	ldr	r1, [r7, #0]
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fd21 	bl	800c34a <USBD_CtlError>
          break;
 800b908:	e004      	b.n	800b914 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b90a:	6839      	ldr	r1, [r7, #0]
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 fd1c 	bl	800c34a <USBD_CtlError>
          break;
 800b912:	e000      	b.n	800b916 <USBD_StdItfReq+0xc2>
          break;
 800b914:	bf00      	nop
      }
      break;
 800b916:	e004      	b.n	800b922 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b918:	6839      	ldr	r1, [r7, #0]
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 fd15 	bl	800c34a <USBD_CtlError>
      break;
 800b920:	bf00      	nop
  }

  return ret;
 800b922:	7bfb      	ldrb	r3, [r7, #15]
}
 800b924:	4618      	mov	r0, r3
 800b926:	3710      	adds	r7, #16
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b936:	2300      	movs	r3, #0
 800b938:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	889b      	ldrh	r3, [r3, #4]
 800b93e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b948:	2b40      	cmp	r3, #64	@ 0x40
 800b94a:	d007      	beq.n	800b95c <USBD_StdEPReq+0x30>
 800b94c:	2b40      	cmp	r3, #64	@ 0x40
 800b94e:	f200 817f 	bhi.w	800bc50 <USBD_StdEPReq+0x324>
 800b952:	2b00      	cmp	r3, #0
 800b954:	d02a      	beq.n	800b9ac <USBD_StdEPReq+0x80>
 800b956:	2b20      	cmp	r3, #32
 800b958:	f040 817a 	bne.w	800bc50 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b95c:	7bbb      	ldrb	r3, [r7, #14]
 800b95e:	4619      	mov	r1, r3
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f7ff fe85 	bl	800b670 <USBD_CoreFindEP>
 800b966:	4603      	mov	r3, r0
 800b968:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b96a:	7b7b      	ldrb	r3, [r7, #13]
 800b96c:	2bff      	cmp	r3, #255	@ 0xff
 800b96e:	f000 8174 	beq.w	800bc5a <USBD_StdEPReq+0x32e>
 800b972:	7b7b      	ldrb	r3, [r7, #13]
 800b974:	2b00      	cmp	r3, #0
 800b976:	f040 8170 	bne.w	800bc5a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b97a:	7b7a      	ldrb	r2, [r7, #13]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b982:	7b7a      	ldrb	r2, [r7, #13]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	32ae      	adds	r2, #174	@ 0xae
 800b988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f000 8163 	beq.w	800bc5a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b994:	7b7a      	ldrb	r2, [r7, #13]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	32ae      	adds	r2, #174	@ 0xae
 800b99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	6839      	ldr	r1, [r7, #0]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	4798      	blx	r3
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b9aa:	e156      	b.n	800bc5a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	785b      	ldrb	r3, [r3, #1]
 800b9b0:	2b03      	cmp	r3, #3
 800b9b2:	d008      	beq.n	800b9c6 <USBD_StdEPReq+0x9a>
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	f300 8145 	bgt.w	800bc44 <USBD_StdEPReq+0x318>
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f000 809b 	beq.w	800baf6 <USBD_StdEPReq+0x1ca>
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d03c      	beq.n	800ba3e <USBD_StdEPReq+0x112>
 800b9c4:	e13e      	b.n	800bc44 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b02      	cmp	r3, #2
 800b9d0:	d002      	beq.n	800b9d8 <USBD_StdEPReq+0xac>
 800b9d2:	2b03      	cmp	r3, #3
 800b9d4:	d016      	beq.n	800ba04 <USBD_StdEPReq+0xd8>
 800b9d6:	e02c      	b.n	800ba32 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9d8:	7bbb      	ldrb	r3, [r7, #14]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00d      	beq.n	800b9fa <USBD_StdEPReq+0xce>
 800b9de:	7bbb      	ldrb	r3, [r7, #14]
 800b9e0:	2b80      	cmp	r3, #128	@ 0x80
 800b9e2:	d00a      	beq.n	800b9fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9e4:	7bbb      	ldrb	r3, [r7, #14]
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f004 ffe9 	bl	80109c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9ee:	2180      	movs	r1, #128	@ 0x80
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f004 ffe5 	bl	80109c0 <USBD_LL_StallEP>
 800b9f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9f8:	e020      	b.n	800ba3c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b9fa:	6839      	ldr	r1, [r7, #0]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fca4 	bl	800c34a <USBD_CtlError>
              break;
 800ba02:	e01b      	b.n	800ba3c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	885b      	ldrh	r3, [r3, #2]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d10e      	bne.n	800ba2a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba0c:	7bbb      	ldrb	r3, [r7, #14]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00b      	beq.n	800ba2a <USBD_StdEPReq+0xfe>
 800ba12:	7bbb      	ldrb	r3, [r7, #14]
 800ba14:	2b80      	cmp	r3, #128	@ 0x80
 800ba16:	d008      	beq.n	800ba2a <USBD_StdEPReq+0xfe>
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	88db      	ldrh	r3, [r3, #6]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d104      	bne.n	800ba2a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba20:	7bbb      	ldrb	r3, [r7, #14]
 800ba22:	4619      	mov	r1, r3
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f004 ffcb 	bl	80109c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fd64 	bl	800c4f8 <USBD_CtlSendStatus>

              break;
 800ba30:	e004      	b.n	800ba3c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ba32:	6839      	ldr	r1, [r7, #0]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 fc88 	bl	800c34a <USBD_CtlError>
              break;
 800ba3a:	bf00      	nop
          }
          break;
 800ba3c:	e107      	b.n	800bc4e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d002      	beq.n	800ba50 <USBD_StdEPReq+0x124>
 800ba4a:	2b03      	cmp	r3, #3
 800ba4c:	d016      	beq.n	800ba7c <USBD_StdEPReq+0x150>
 800ba4e:	e04b      	b.n	800bae8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba50:	7bbb      	ldrb	r3, [r7, #14]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00d      	beq.n	800ba72 <USBD_StdEPReq+0x146>
 800ba56:	7bbb      	ldrb	r3, [r7, #14]
 800ba58:	2b80      	cmp	r3, #128	@ 0x80
 800ba5a:	d00a      	beq.n	800ba72 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f004 ffad 	bl	80109c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba66:	2180      	movs	r1, #128	@ 0x80
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f004 ffa9 	bl	80109c0 <USBD_LL_StallEP>
 800ba6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba70:	e040      	b.n	800baf4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ba72:	6839      	ldr	r1, [r7, #0]
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 fc68 	bl	800c34a <USBD_CtlError>
              break;
 800ba7a:	e03b      	b.n	800baf4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	885b      	ldrh	r3, [r3, #2]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d136      	bne.n	800baf2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba84:	7bbb      	ldrb	r3, [r7, #14]
 800ba86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d004      	beq.n	800ba98 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba8e:	7bbb      	ldrb	r3, [r7, #14]
 800ba90:	4619      	mov	r1, r3
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f004 ffb3 	bl	80109fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fd2d 	bl	800c4f8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba9e:	7bbb      	ldrb	r3, [r7, #14]
 800baa0:	4619      	mov	r1, r3
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7ff fde4 	bl	800b670 <USBD_CoreFindEP>
 800baa8:	4603      	mov	r3, r0
 800baaa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800baac:	7b7b      	ldrb	r3, [r7, #13]
 800baae:	2bff      	cmp	r3, #255	@ 0xff
 800bab0:	d01f      	beq.n	800baf2 <USBD_StdEPReq+0x1c6>
 800bab2:	7b7b      	ldrb	r3, [r7, #13]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d11c      	bne.n	800baf2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bab8:	7b7a      	ldrb	r2, [r7, #13]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bac0:	7b7a      	ldrb	r2, [r7, #13]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	32ae      	adds	r2, #174	@ 0xae
 800bac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d010      	beq.n	800baf2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bad0:	7b7a      	ldrb	r2, [r7, #13]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	32ae      	adds	r2, #174	@ 0xae
 800bad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	4798      	blx	r3
 800bae2:	4603      	mov	r3, r0
 800bae4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bae6:	e004      	b.n	800baf2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fc2d 	bl	800c34a <USBD_CtlError>
              break;
 800baf0:	e000      	b.n	800baf4 <USBD_StdEPReq+0x1c8>
              break;
 800baf2:	bf00      	nop
          }
          break;
 800baf4:	e0ab      	b.n	800bc4e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	d002      	beq.n	800bb08 <USBD_StdEPReq+0x1dc>
 800bb02:	2b03      	cmp	r3, #3
 800bb04:	d032      	beq.n	800bb6c <USBD_StdEPReq+0x240>
 800bb06:	e097      	b.n	800bc38 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb08:	7bbb      	ldrb	r3, [r7, #14]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d007      	beq.n	800bb1e <USBD_StdEPReq+0x1f2>
 800bb0e:	7bbb      	ldrb	r3, [r7, #14]
 800bb10:	2b80      	cmp	r3, #128	@ 0x80
 800bb12:	d004      	beq.n	800bb1e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bb14:	6839      	ldr	r1, [r7, #0]
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 fc17 	bl	800c34a <USBD_CtlError>
                break;
 800bb1c:	e091      	b.n	800bc42 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	da0b      	bge.n	800bb3e <USBD_StdEPReq+0x212>
 800bb26:	7bbb      	ldrb	r3, [r7, #14]
 800bb28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	4413      	add	r3, r2
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	3310      	adds	r3, #16
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	4413      	add	r3, r2
 800bb3a:	3304      	adds	r3, #4
 800bb3c:	e00b      	b.n	800bb56 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb3e:	7bbb      	ldrb	r3, [r7, #14]
 800bb40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb44:	4613      	mov	r3, r2
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	4413      	add	r3, r2
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	4413      	add	r3, r2
 800bb54:	3304      	adds	r3, #4
 800bb56:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	2202      	movs	r2, #2
 800bb62:	4619      	mov	r1, r3
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fc6d 	bl	800c444 <USBD_CtlSendData>
              break;
 800bb6a:	e06a      	b.n	800bc42 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	da11      	bge.n	800bb98 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb74:	7bbb      	ldrb	r3, [r7, #14]
 800bb76:	f003 020f 	and.w	r2, r3, #15
 800bb7a:	6879      	ldr	r1, [r7, #4]
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	4413      	add	r3, r2
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	440b      	add	r3, r1
 800bb86:	3324      	adds	r3, #36	@ 0x24
 800bb88:	881b      	ldrh	r3, [r3, #0]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d117      	bne.n	800bbbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 fbda 	bl	800c34a <USBD_CtlError>
                  break;
 800bb96:	e054      	b.n	800bc42 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb98:	7bbb      	ldrb	r3, [r7, #14]
 800bb9a:	f003 020f 	and.w	r2, r3, #15
 800bb9e:	6879      	ldr	r1, [r7, #4]
 800bba0:	4613      	mov	r3, r2
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	4413      	add	r3, r2
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	440b      	add	r3, r1
 800bbaa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bbae:	881b      	ldrh	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d104      	bne.n	800bbbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bbb4:	6839      	ldr	r1, [r7, #0]
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 fbc7 	bl	800c34a <USBD_CtlError>
                  break;
 800bbbc:	e041      	b.n	800bc42 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	da0b      	bge.n	800bbde <USBD_StdEPReq+0x2b2>
 800bbc6:	7bbb      	ldrb	r3, [r7, #14]
 800bbc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bbcc:	4613      	mov	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4413      	add	r3, r2
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	3310      	adds	r3, #16
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	4413      	add	r3, r2
 800bbda:	3304      	adds	r3, #4
 800bbdc:	e00b      	b.n	800bbf6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbde:	7bbb      	ldrb	r3, [r7, #14]
 800bbe0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	4413      	add	r3, r2
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	3304      	adds	r3, #4
 800bbf6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bbf8:	7bbb      	ldrb	r3, [r7, #14]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d002      	beq.n	800bc04 <USBD_StdEPReq+0x2d8>
 800bbfe:	7bbb      	ldrb	r3, [r7, #14]
 800bc00:	2b80      	cmp	r3, #128	@ 0x80
 800bc02:	d103      	bne.n	800bc0c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	2200      	movs	r2, #0
 800bc08:	601a      	str	r2, [r3, #0]
 800bc0a:	e00e      	b.n	800bc2a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bc0c:	7bbb      	ldrb	r3, [r7, #14]
 800bc0e:	4619      	mov	r1, r3
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f004 ff13 	bl	8010a3c <USBD_LL_IsStallEP>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d003      	beq.n	800bc24 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	601a      	str	r2, [r3, #0]
 800bc22:	e002      	b.n	800bc2a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	2200      	movs	r2, #0
 800bc28:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2202      	movs	r2, #2
 800bc2e:	4619      	mov	r1, r3
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 fc07 	bl	800c444 <USBD_CtlSendData>
              break;
 800bc36:	e004      	b.n	800bc42 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fb85 	bl	800c34a <USBD_CtlError>
              break;
 800bc40:	bf00      	nop
          }
          break;
 800bc42:	e004      	b.n	800bc4e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bc44:	6839      	ldr	r1, [r7, #0]
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 fb7f 	bl	800c34a <USBD_CtlError>
          break;
 800bc4c:	bf00      	nop
      }
      break;
 800bc4e:	e005      	b.n	800bc5c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bc50:	6839      	ldr	r1, [r7, #0]
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 fb79 	bl	800c34a <USBD_CtlError>
      break;
 800bc58:	e000      	b.n	800bc5c <USBD_StdEPReq+0x330>
      break;
 800bc5a:	bf00      	nop
  }

  return ret;
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
	...

0800bc68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc72:	2300      	movs	r3, #0
 800bc74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc76:	2300      	movs	r3, #0
 800bc78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	885b      	ldrh	r3, [r3, #2]
 800bc82:	0a1b      	lsrs	r3, r3, #8
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	3b01      	subs	r3, #1
 800bc88:	2b0e      	cmp	r3, #14
 800bc8a:	f200 8152 	bhi.w	800bf32 <USBD_GetDescriptor+0x2ca>
 800bc8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc94 <USBD_GetDescriptor+0x2c>)
 800bc90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc94:	0800bd05 	.word	0x0800bd05
 800bc98:	0800bd1d 	.word	0x0800bd1d
 800bc9c:	0800bd5d 	.word	0x0800bd5d
 800bca0:	0800bf33 	.word	0x0800bf33
 800bca4:	0800bf33 	.word	0x0800bf33
 800bca8:	0800bed3 	.word	0x0800bed3
 800bcac:	0800beff 	.word	0x0800beff
 800bcb0:	0800bf33 	.word	0x0800bf33
 800bcb4:	0800bf33 	.word	0x0800bf33
 800bcb8:	0800bf33 	.word	0x0800bf33
 800bcbc:	0800bf33 	.word	0x0800bf33
 800bcc0:	0800bf33 	.word	0x0800bf33
 800bcc4:	0800bf33 	.word	0x0800bf33
 800bcc8:	0800bf33 	.word	0x0800bf33
 800bccc:	0800bcd1 	.word	0x0800bcd1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcd6:	69db      	ldr	r3, [r3, #28]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00b      	beq.n	800bcf4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bce2:	69db      	ldr	r3, [r3, #28]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	7c12      	ldrb	r2, [r2, #16]
 800bce8:	f107 0108 	add.w	r1, r7, #8
 800bcec:	4610      	mov	r0, r2
 800bcee:	4798      	blx	r3
 800bcf0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcf2:	e126      	b.n	800bf42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fb27 	bl	800c34a <USBD_CtlError>
        err++;
 800bcfc:	7afb      	ldrb	r3, [r7, #11]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	72fb      	strb	r3, [r7, #11]
      break;
 800bd02:	e11e      	b.n	800bf42 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	7c12      	ldrb	r2, [r2, #16]
 800bd10:	f107 0108 	add.w	r1, r7, #8
 800bd14:	4610      	mov	r0, r2
 800bd16:	4798      	blx	r3
 800bd18:	60f8      	str	r0, [r7, #12]
      break;
 800bd1a:	e112      	b.n	800bf42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	7c1b      	ldrb	r3, [r3, #16]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10d      	bne.n	800bd40 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd2c:	f107 0208 	add.w	r2, r7, #8
 800bd30:	4610      	mov	r0, r2
 800bd32:	4798      	blx	r3
 800bd34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	3301      	adds	r3, #1
 800bd3a:	2202      	movs	r2, #2
 800bd3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bd3e:	e100      	b.n	800bf42 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd48:	f107 0208 	add.w	r2, r7, #8
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	4798      	blx	r3
 800bd50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	3301      	adds	r3, #1
 800bd56:	2202      	movs	r2, #2
 800bd58:	701a      	strb	r2, [r3, #0]
      break;
 800bd5a:	e0f2      	b.n	800bf42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	885b      	ldrh	r3, [r3, #2]
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	2b05      	cmp	r3, #5
 800bd64:	f200 80ac 	bhi.w	800bec0 <USBD_GetDescriptor+0x258>
 800bd68:	a201      	add	r2, pc, #4	@ (adr r2, 800bd70 <USBD_GetDescriptor+0x108>)
 800bd6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd6e:	bf00      	nop
 800bd70:	0800bd89 	.word	0x0800bd89
 800bd74:	0800bdbd 	.word	0x0800bdbd
 800bd78:	0800bdf1 	.word	0x0800bdf1
 800bd7c:	0800be25 	.word	0x0800be25
 800bd80:	0800be59 	.word	0x0800be59
 800bd84:	0800be8d 	.word	0x0800be8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00b      	beq.n	800bdac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	7c12      	ldrb	r2, [r2, #16]
 800bda0:	f107 0108 	add.w	r1, r7, #8
 800bda4:	4610      	mov	r0, r2
 800bda6:	4798      	blx	r3
 800bda8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdaa:	e091      	b.n	800bed0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdac:	6839      	ldr	r1, [r7, #0]
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 facb 	bl	800c34a <USBD_CtlError>
            err++;
 800bdb4:	7afb      	ldrb	r3, [r7, #11]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	72fb      	strb	r3, [r7, #11]
          break;
 800bdba:	e089      	b.n	800bed0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00b      	beq.n	800bde0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	7c12      	ldrb	r2, [r2, #16]
 800bdd4:	f107 0108 	add.w	r1, r7, #8
 800bdd8:	4610      	mov	r0, r2
 800bdda:	4798      	blx	r3
 800bddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdde:	e077      	b.n	800bed0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bde0:	6839      	ldr	r1, [r7, #0]
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 fab1 	bl	800c34a <USBD_CtlError>
            err++;
 800bde8:	7afb      	ldrb	r3, [r7, #11]
 800bdea:	3301      	adds	r3, #1
 800bdec:	72fb      	strb	r3, [r7, #11]
          break;
 800bdee:	e06f      	b.n	800bed0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00b      	beq.n	800be14 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	7c12      	ldrb	r2, [r2, #16]
 800be08:	f107 0108 	add.w	r1, r7, #8
 800be0c:	4610      	mov	r0, r2
 800be0e:	4798      	blx	r3
 800be10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be12:	e05d      	b.n	800bed0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be14:	6839      	ldr	r1, [r7, #0]
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 fa97 	bl	800c34a <USBD_CtlError>
            err++;
 800be1c:	7afb      	ldrb	r3, [r7, #11]
 800be1e:	3301      	adds	r3, #1
 800be20:	72fb      	strb	r3, [r7, #11]
          break;
 800be22:	e055      	b.n	800bed0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be2a:	691b      	ldr	r3, [r3, #16]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00b      	beq.n	800be48 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	7c12      	ldrb	r2, [r2, #16]
 800be3c:	f107 0108 	add.w	r1, r7, #8
 800be40:	4610      	mov	r0, r2
 800be42:	4798      	blx	r3
 800be44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be46:	e043      	b.n	800bed0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be48:	6839      	ldr	r1, [r7, #0]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fa7d 	bl	800c34a <USBD_CtlError>
            err++;
 800be50:	7afb      	ldrb	r3, [r7, #11]
 800be52:	3301      	adds	r3, #1
 800be54:	72fb      	strb	r3, [r7, #11]
          break;
 800be56:	e03b      	b.n	800bed0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be5e:	695b      	ldr	r3, [r3, #20]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d00b      	beq.n	800be7c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be6a:	695b      	ldr	r3, [r3, #20]
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	7c12      	ldrb	r2, [r2, #16]
 800be70:	f107 0108 	add.w	r1, r7, #8
 800be74:	4610      	mov	r0, r2
 800be76:	4798      	blx	r3
 800be78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be7a:	e029      	b.n	800bed0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fa63 	bl	800c34a <USBD_CtlError>
            err++;
 800be84:	7afb      	ldrb	r3, [r7, #11]
 800be86:	3301      	adds	r3, #1
 800be88:	72fb      	strb	r3, [r7, #11]
          break;
 800be8a:	e021      	b.n	800bed0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be92:	699b      	ldr	r3, [r3, #24]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00b      	beq.n	800beb0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be9e:	699b      	ldr	r3, [r3, #24]
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	7c12      	ldrb	r2, [r2, #16]
 800bea4:	f107 0108 	add.w	r1, r7, #8
 800bea8:	4610      	mov	r0, r2
 800beaa:	4798      	blx	r3
 800beac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800beae:	e00f      	b.n	800bed0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800beb0:	6839      	ldr	r1, [r7, #0]
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fa49 	bl	800c34a <USBD_CtlError>
            err++;
 800beb8:	7afb      	ldrb	r3, [r7, #11]
 800beba:	3301      	adds	r3, #1
 800bebc:	72fb      	strb	r3, [r7, #11]
          break;
 800bebe:	e007      	b.n	800bed0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bec0:	6839      	ldr	r1, [r7, #0]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fa41 	bl	800c34a <USBD_CtlError>
          err++;
 800bec8:	7afb      	ldrb	r3, [r7, #11]
 800beca:	3301      	adds	r3, #1
 800becc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bece:	bf00      	nop
      }
      break;
 800bed0:	e037      	b.n	800bf42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	7c1b      	ldrb	r3, [r3, #16]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d109      	bne.n	800beee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bee2:	f107 0208 	add.w	r2, r7, #8
 800bee6:	4610      	mov	r0, r2
 800bee8:	4798      	blx	r3
 800beea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800beec:	e029      	b.n	800bf42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800beee:	6839      	ldr	r1, [r7, #0]
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 fa2a 	bl	800c34a <USBD_CtlError>
        err++;
 800bef6:	7afb      	ldrb	r3, [r7, #11]
 800bef8:	3301      	adds	r3, #1
 800befa:	72fb      	strb	r3, [r7, #11]
      break;
 800befc:	e021      	b.n	800bf42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	7c1b      	ldrb	r3, [r3, #16]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d10d      	bne.n	800bf22 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf0e:	f107 0208 	add.w	r2, r7, #8
 800bf12:	4610      	mov	r0, r2
 800bf14:	4798      	blx	r3
 800bf16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	2207      	movs	r2, #7
 800bf1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf20:	e00f      	b.n	800bf42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bf22:	6839      	ldr	r1, [r7, #0]
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 fa10 	bl	800c34a <USBD_CtlError>
        err++;
 800bf2a:	7afb      	ldrb	r3, [r7, #11]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	72fb      	strb	r3, [r7, #11]
      break;
 800bf30:	e007      	b.n	800bf42 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bf32:	6839      	ldr	r1, [r7, #0]
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fa08 	bl	800c34a <USBD_CtlError>
      err++;
 800bf3a:	7afb      	ldrb	r3, [r7, #11]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	72fb      	strb	r3, [r7, #11]
      break;
 800bf40:	bf00      	nop
  }

  if (err != 0U)
 800bf42:	7afb      	ldrb	r3, [r7, #11]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d11e      	bne.n	800bf86 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	88db      	ldrh	r3, [r3, #6]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d016      	beq.n	800bf7e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bf50:	893b      	ldrh	r3, [r7, #8]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00e      	beq.n	800bf74 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	88da      	ldrh	r2, [r3, #6]
 800bf5a:	893b      	ldrh	r3, [r7, #8]
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	bf28      	it	cs
 800bf60:	4613      	movcs	r3, r2
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf66:	893b      	ldrh	r3, [r7, #8]
 800bf68:	461a      	mov	r2, r3
 800bf6a:	68f9      	ldr	r1, [r7, #12]
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fa69 	bl	800c444 <USBD_CtlSendData>
 800bf72:	e009      	b.n	800bf88 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bf74:	6839      	ldr	r1, [r7, #0]
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f9e7 	bl	800c34a <USBD_CtlError>
 800bf7c:	e004      	b.n	800bf88 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 faba 	bl	800c4f8 <USBD_CtlSendStatus>
 800bf84:	e000      	b.n	800bf88 <USBD_GetDescriptor+0x320>
    return;
 800bf86:	bf00      	nop
  }
}
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop

0800bf90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	889b      	ldrh	r3, [r3, #4]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d131      	bne.n	800c006 <USBD_SetAddress+0x76>
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	88db      	ldrh	r3, [r3, #6]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d12d      	bne.n	800c006 <USBD_SetAddress+0x76>
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	885b      	ldrh	r3, [r3, #2]
 800bfae:	2b7f      	cmp	r3, #127	@ 0x7f
 800bfb0:	d829      	bhi.n	800c006 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	885b      	ldrh	r3, [r3, #2]
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	2b03      	cmp	r3, #3
 800bfc8:	d104      	bne.n	800bfd4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bfca:	6839      	ldr	r1, [r7, #0]
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 f9bc 	bl	800c34a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfd2:	e01d      	b.n	800c010 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	7bfa      	ldrb	r2, [r7, #15]
 800bfd8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bfdc:	7bfb      	ldrb	r3, [r7, #15]
 800bfde:	4619      	mov	r1, r3
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f004 fd57 	bl	8010a94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 fa86 	bl	800c4f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bfec:	7bfb      	ldrb	r3, [r7, #15]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d004      	beq.n	800bffc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2202      	movs	r2, #2
 800bff6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bffa:	e009      	b.n	800c010 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c004:	e004      	b.n	800c010 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c006:	6839      	ldr	r1, [r7, #0]
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 f99e 	bl	800c34a <USBD_CtlError>
  }
}
 800c00e:	bf00      	nop
 800c010:	bf00      	nop
 800c012:	3710      	adds	r7, #16
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c022:	2300      	movs	r3, #0
 800c024:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	885b      	ldrh	r3, [r3, #2]
 800c02a:	b2da      	uxtb	r2, r3
 800c02c:	4b4e      	ldr	r3, [pc, #312]	@ (800c168 <USBD_SetConfig+0x150>)
 800c02e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c030:	4b4d      	ldr	r3, [pc, #308]	@ (800c168 <USBD_SetConfig+0x150>)
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d905      	bls.n	800c044 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c038:	6839      	ldr	r1, [r7, #0]
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 f985 	bl	800c34a <USBD_CtlError>
    return USBD_FAIL;
 800c040:	2303      	movs	r3, #3
 800c042:	e08c      	b.n	800c15e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d002      	beq.n	800c056 <USBD_SetConfig+0x3e>
 800c050:	2b03      	cmp	r3, #3
 800c052:	d029      	beq.n	800c0a8 <USBD_SetConfig+0x90>
 800c054:	e075      	b.n	800c142 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c056:	4b44      	ldr	r3, [pc, #272]	@ (800c168 <USBD_SetConfig+0x150>)
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d020      	beq.n	800c0a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c05e:	4b42      	ldr	r3, [pc, #264]	@ (800c168 <USBD_SetConfig+0x150>)
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	461a      	mov	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c068:	4b3f      	ldr	r3, [pc, #252]	@ (800c168 <USBD_SetConfig+0x150>)
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	4619      	mov	r1, r3
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7ff f84b 	bl	800b10a <USBD_SetClassConfig>
 800c074:	4603      	mov	r3, r0
 800c076:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c078:	7bfb      	ldrb	r3, [r7, #15]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d008      	beq.n	800c090 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c07e:	6839      	ldr	r1, [r7, #0]
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 f962 	bl	800c34a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2202      	movs	r2, #2
 800c08a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c08e:	e065      	b.n	800c15c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 fa31 	bl	800c4f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2203      	movs	r2, #3
 800c09a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c09e:	e05d      	b.n	800c15c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fa29 	bl	800c4f8 <USBD_CtlSendStatus>
      break;
 800c0a6:	e059      	b.n	800c15c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c0a8:	4b2f      	ldr	r3, [pc, #188]	@ (800c168 <USBD_SetConfig+0x150>)
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d112      	bne.n	800c0d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2202      	movs	r2, #2
 800c0b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c0b8:	4b2b      	ldr	r3, [pc, #172]	@ (800c168 <USBD_SetConfig+0x150>)
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	461a      	mov	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c0c2:	4b29      	ldr	r3, [pc, #164]	@ (800c168 <USBD_SetConfig+0x150>)
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7ff f83a 	bl	800b142 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fa12 	bl	800c4f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c0d4:	e042      	b.n	800c15c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c0d6:	4b24      	ldr	r3, [pc, #144]	@ (800c168 <USBD_SetConfig+0x150>)
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d02a      	beq.n	800c13a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f7ff f828 	bl	800b142 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c0f2:	4b1d      	ldr	r3, [pc, #116]	@ (800c168 <USBD_SetConfig+0x150>)
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0fc:	4b1a      	ldr	r3, [pc, #104]	@ (800c168 <USBD_SetConfig+0x150>)
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	4619      	mov	r1, r3
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f7ff f801 	bl	800b10a <USBD_SetClassConfig>
 800c108:	4603      	mov	r3, r0
 800c10a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c10c:	7bfb      	ldrb	r3, [r7, #15]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d00f      	beq.n	800c132 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c112:	6839      	ldr	r1, [r7, #0]
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 f918 	bl	800c34a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	4619      	mov	r1, r3
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7ff f80d 	bl	800b142 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2202      	movs	r2, #2
 800c12c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c130:	e014      	b.n	800c15c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f9e0 	bl	800c4f8 <USBD_CtlSendStatus>
      break;
 800c138:	e010      	b.n	800c15c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 f9dc 	bl	800c4f8 <USBD_CtlSendStatus>
      break;
 800c140:	e00c      	b.n	800c15c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c142:	6839      	ldr	r1, [r7, #0]
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 f900 	bl	800c34a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c14a:	4b07      	ldr	r3, [pc, #28]	@ (800c168 <USBD_SetConfig+0x150>)
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	4619      	mov	r1, r3
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7fe fff6 	bl	800b142 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c156:	2303      	movs	r3, #3
 800c158:	73fb      	strb	r3, [r7, #15]
      break;
 800c15a:	bf00      	nop
  }

  return ret;
 800c15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	200003e0 	.word	0x200003e0

0800c16c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	88db      	ldrh	r3, [r3, #6]
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d004      	beq.n	800c188 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 f8e2 	bl	800c34a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c186:	e023      	b.n	800c1d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	2b02      	cmp	r3, #2
 800c192:	dc02      	bgt.n	800c19a <USBD_GetConfig+0x2e>
 800c194:	2b00      	cmp	r3, #0
 800c196:	dc03      	bgt.n	800c1a0 <USBD_GetConfig+0x34>
 800c198:	e015      	b.n	800c1c6 <USBD_GetConfig+0x5a>
 800c19a:	2b03      	cmp	r3, #3
 800c19c:	d00b      	beq.n	800c1b6 <USBD_GetConfig+0x4a>
 800c19e:	e012      	b.n	800c1c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	3308      	adds	r3, #8
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 f948 	bl	800c444 <USBD_CtlSendData>
        break;
 800c1b4:	e00c      	b.n	800c1d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	3304      	adds	r3, #4
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f940 	bl	800c444 <USBD_CtlSendData>
        break;
 800c1c4:	e004      	b.n	800c1d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 f8be 	bl	800c34a <USBD_CtlError>
        break;
 800c1ce:	bf00      	nop
}
 800c1d0:	bf00      	nop
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	d81e      	bhi.n	800c22e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	88db      	ldrh	r3, [r3, #6]
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	d004      	beq.n	800c202 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c1f8:	6839      	ldr	r1, [r7, #0]
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 f8a5 	bl	800c34a <USBD_CtlError>
        break;
 800c200:	e01a      	b.n	800c238 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2201      	movs	r2, #1
 800c206:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d005      	beq.n	800c21e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	f043 0202 	orr.w	r2, r3, #2
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	330c      	adds	r3, #12
 800c222:	2202      	movs	r2, #2
 800c224:	4619      	mov	r1, r3
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 f90c 	bl	800c444 <USBD_CtlSendData>
      break;
 800c22c:	e004      	b.n	800c238 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c22e:	6839      	ldr	r1, [r7, #0]
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 f88a 	bl	800c34a <USBD_CtlError>
      break;
 800c236:	bf00      	nop
  }
}
 800c238:	bf00      	nop
 800c23a:	3708      	adds	r7, #8
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	885b      	ldrh	r3, [r3, #2]
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d107      	bne.n	800c262 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2201      	movs	r2, #1
 800c256:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 f94c 	bl	800c4f8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c260:	e013      	b.n	800c28a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	885b      	ldrh	r3, [r3, #2]
 800c266:	2b02      	cmp	r3, #2
 800c268:	d10b      	bne.n	800c282 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	889b      	ldrh	r3, [r3, #4]
 800c26e:	0a1b      	lsrs	r3, r3, #8
 800c270:	b29b      	uxth	r3, r3
 800c272:	b2da      	uxtb	r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 f93c 	bl	800c4f8 <USBD_CtlSendStatus>
}
 800c280:	e003      	b.n	800c28a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c282:	6839      	ldr	r1, [r7, #0]
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 f860 	bl	800c34a <USBD_CtlError>
}
 800c28a:	bf00      	nop
 800c28c:	3708      	adds	r7, #8
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b082      	sub	sp, #8
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
 800c29a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	3b01      	subs	r3, #1
 800c2a6:	2b02      	cmp	r3, #2
 800c2a8:	d80b      	bhi.n	800c2c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	885b      	ldrh	r3, [r3, #2]
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d10c      	bne.n	800c2cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 f91c 	bl	800c4f8 <USBD_CtlSendStatus>
      }
      break;
 800c2c0:	e004      	b.n	800c2cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c2c2:	6839      	ldr	r1, [r7, #0]
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 f840 	bl	800c34a <USBD_CtlError>
      break;
 800c2ca:	e000      	b.n	800c2ce <USBD_ClrFeature+0x3c>
      break;
 800c2cc:	bf00      	nop
  }
}
 800c2ce:	bf00      	nop
 800c2d0:	3708      	adds	r7, #8
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b084      	sub	sp, #16
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
 800c2de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	781a      	ldrb	r2, [r3, #0]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	781a      	ldrb	r2, [r3, #0]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f7ff fa16 	bl	800b732 <SWAPBYTE>
 800c306:	4603      	mov	r3, r0
 800c308:	461a      	mov	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	3301      	adds	r3, #1
 800c312:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	3301      	adds	r3, #1
 800c318:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f7ff fa09 	bl	800b732 <SWAPBYTE>
 800c320:	4603      	mov	r3, r0
 800c322:	461a      	mov	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	3301      	adds	r3, #1
 800c32c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	3301      	adds	r3, #1
 800c332:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f7ff f9fc 	bl	800b732 <SWAPBYTE>
 800c33a:	4603      	mov	r3, r0
 800c33c:	461a      	mov	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	80da      	strh	r2, [r3, #6]
}
 800c342:	bf00      	nop
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b082      	sub	sp, #8
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
 800c352:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c354:	2180      	movs	r1, #128	@ 0x80
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f004 fb32 	bl	80109c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c35c:	2100      	movs	r1, #0
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f004 fb2e 	bl	80109c0 <USBD_LL_StallEP>
}
 800c364:	bf00      	nop
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b086      	sub	sp, #24
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c378:	2300      	movs	r3, #0
 800c37a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d042      	beq.n	800c408 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c386:	6938      	ldr	r0, [r7, #16]
 800c388:	f000 f842 	bl	800c410 <USBD_GetLen>
 800c38c:	4603      	mov	r3, r0
 800c38e:	3301      	adds	r3, #1
 800c390:	005b      	lsls	r3, r3, #1
 800c392:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c396:	d808      	bhi.n	800c3aa <USBD_GetString+0x3e>
 800c398:	6938      	ldr	r0, [r7, #16]
 800c39a:	f000 f839 	bl	800c410 <USBD_GetLen>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	005b      	lsls	r3, r3, #1
 800c3a6:	b29a      	uxth	r2, r3
 800c3a8:	e001      	b.n	800c3ae <USBD_GetString+0x42>
 800c3aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c3b2:	7dfb      	ldrb	r3, [r7, #23]
 800c3b4:	68ba      	ldr	r2, [r7, #8]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	7812      	ldrb	r2, [r2, #0]
 800c3bc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c3be:	7dfb      	ldrb	r3, [r7, #23]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c3c4:	7dfb      	ldrb	r3, [r7, #23]
 800c3c6:	68ba      	ldr	r2, [r7, #8]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	2203      	movs	r2, #3
 800c3cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c3ce:	7dfb      	ldrb	r3, [r7, #23]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c3d4:	e013      	b.n	800c3fe <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c3d6:	7dfb      	ldrb	r3, [r7, #23]
 800c3d8:	68ba      	ldr	r2, [r7, #8]
 800c3da:	4413      	add	r3, r2
 800c3dc:	693a      	ldr	r2, [r7, #16]
 800c3de:	7812      	ldrb	r2, [r2, #0]
 800c3e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	613b      	str	r3, [r7, #16]
    idx++;
 800c3e8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c3ee:	7dfb      	ldrb	r3, [r7, #23]
 800c3f0:	68ba      	ldr	r2, [r7, #8]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c3f8:	7dfb      	ldrb	r3, [r7, #23]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1e7      	bne.n	800c3d6 <USBD_GetString+0x6a>
 800c406:	e000      	b.n	800c40a <USBD_GetString+0x9e>
    return;
 800c408:	bf00      	nop
  }
}
 800c40a:	3718      	adds	r7, #24
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c418:	2300      	movs	r3, #0
 800c41a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c420:	e005      	b.n	800c42e <USBD_GetLen+0x1e>
  {
    len++;
 800c422:	7bfb      	ldrb	r3, [r7, #15]
 800c424:	3301      	adds	r3, #1
 800c426:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	3301      	adds	r3, #1
 800c42c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d1f5      	bne.n	800c422 <USBD_GetLen+0x12>
  }

  return len;
 800c436:	7bfb      	ldrb	r3, [r7, #15]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3714      	adds	r7, #20
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2202      	movs	r2, #2
 800c454:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	68ba      	ldr	r2, [r7, #8]
 800c468:	2100      	movs	r1, #0
 800c46a:	68f8      	ldr	r0, [r7, #12]
 800c46c:	f004 fb31 	bl	8010ad2 <USBD_LL_Transmit>

  return USBD_OK;
 800c470:	2300      	movs	r3, #0
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b084      	sub	sp, #16
 800c47e:	af00      	add	r7, sp, #0
 800c480:	60f8      	str	r0, [r7, #12]
 800c482:	60b9      	str	r1, [r7, #8]
 800c484:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	68ba      	ldr	r2, [r7, #8]
 800c48a:	2100      	movs	r1, #0
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f004 fb20 	bl	8010ad2 <USBD_LL_Transmit>

  return USBD_OK;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2203      	movs	r2, #3
 800c4ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	68ba      	ldr	r2, [r7, #8]
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f004 fb24 	bl	8010b14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4cc:	2300      	movs	r3, #0
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b084      	sub	sp, #16
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	60f8      	str	r0, [r7, #12]
 800c4de:	60b9      	str	r1, [r7, #8]
 800c4e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	68ba      	ldr	r2, [r7, #8]
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f004 fb13 	bl	8010b14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4ee:	2300      	movs	r3, #0
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3710      	adds	r7, #16
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2204      	movs	r2, #4
 800c504:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c508:	2300      	movs	r3, #0
 800c50a:	2200      	movs	r2, #0
 800c50c:	2100      	movs	r1, #0
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f004 fadf 	bl	8010ad2 <USBD_LL_Transmit>

  return USBD_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3708      	adds	r7, #8
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b082      	sub	sp, #8
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2205      	movs	r2, #5
 800c52a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c52e:	2300      	movs	r3, #0
 800c530:	2200      	movs	r2, #0
 800c532:	2100      	movs	r1, #0
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f004 faed 	bl	8010b14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c53a:	2300      	movs	r3, #0
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3708      	adds	r7, #8
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <__NVIC_SetPriority>:
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	4603      	mov	r3, r0
 800c54c:	6039      	str	r1, [r7, #0]
 800c54e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c554:	2b00      	cmp	r3, #0
 800c556:	db0a      	blt.n	800c56e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	b2da      	uxtb	r2, r3
 800c55c:	490c      	ldr	r1, [pc, #48]	@ (800c590 <__NVIC_SetPriority+0x4c>)
 800c55e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c562:	0112      	lsls	r2, r2, #4
 800c564:	b2d2      	uxtb	r2, r2
 800c566:	440b      	add	r3, r1
 800c568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c56c:	e00a      	b.n	800c584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	b2da      	uxtb	r2, r3
 800c572:	4908      	ldr	r1, [pc, #32]	@ (800c594 <__NVIC_SetPriority+0x50>)
 800c574:	79fb      	ldrb	r3, [r7, #7]
 800c576:	f003 030f 	and.w	r3, r3, #15
 800c57a:	3b04      	subs	r3, #4
 800c57c:	0112      	lsls	r2, r2, #4
 800c57e:	b2d2      	uxtb	r2, r2
 800c580:	440b      	add	r3, r1
 800c582:	761a      	strb	r2, [r3, #24]
}
 800c584:	bf00      	nop
 800c586:	370c      	adds	r7, #12
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr
 800c590:	e000e100 	.word	0xe000e100
 800c594:	e000ed00 	.word	0xe000ed00

0800c598 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c598:	b580      	push	{r7, lr}
 800c59a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c59c:	4b05      	ldr	r3, [pc, #20]	@ (800c5b4 <SysTick_Handler+0x1c>)
 800c59e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c5a0:	f002 fab0 	bl	800eb04 <xTaskGetSchedulerState>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d001      	beq.n	800c5ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c5aa:	f003 fbad 	bl	800fd08 <xPortSysTickHandler>
  }
}
 800c5ae:	bf00      	nop
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	e000e010 	.word	0xe000e010

0800c5b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c5bc:	2100      	movs	r1, #0
 800c5be:	f06f 0004 	mvn.w	r0, #4
 800c5c2:	f7ff ffbf 	bl	800c544 <__NVIC_SetPriority>
#endif
}
 800c5c6:	bf00      	nop
 800c5c8:	bd80      	pop	{r7, pc}
	...

0800c5cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5d2:	f3ef 8305 	mrs	r3, IPSR
 800c5d6:	603b      	str	r3, [r7, #0]
  return(result);
 800c5d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d003      	beq.n	800c5e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c5de:	f06f 0305 	mvn.w	r3, #5
 800c5e2:	607b      	str	r3, [r7, #4]
 800c5e4:	e00c      	b.n	800c600 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c5e6:	4b0a      	ldr	r3, [pc, #40]	@ (800c610 <osKernelInitialize+0x44>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d105      	bne.n	800c5fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c5ee:	4b08      	ldr	r3, [pc, #32]	@ (800c610 <osKernelInitialize+0x44>)
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	607b      	str	r3, [r7, #4]
 800c5f8:	e002      	b.n	800c600 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c5fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c5fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c600:	687b      	ldr	r3, [r7, #4]
}
 800c602:	4618      	mov	r0, r3
 800c604:	370c      	adds	r7, #12
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	200003e4 	.word	0x200003e4

0800c614 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c61a:	f3ef 8305 	mrs	r3, IPSR
 800c61e:	603b      	str	r3, [r7, #0]
  return(result);
 800c620:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c622:	2b00      	cmp	r3, #0
 800c624:	d003      	beq.n	800c62e <osKernelStart+0x1a>
    stat = osErrorISR;
 800c626:	f06f 0305 	mvn.w	r3, #5
 800c62a:	607b      	str	r3, [r7, #4]
 800c62c:	e010      	b.n	800c650 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c62e:	4b0b      	ldr	r3, [pc, #44]	@ (800c65c <osKernelStart+0x48>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b01      	cmp	r3, #1
 800c634:	d109      	bne.n	800c64a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c636:	f7ff ffbf 	bl	800c5b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c63a:	4b08      	ldr	r3, [pc, #32]	@ (800c65c <osKernelStart+0x48>)
 800c63c:	2202      	movs	r2, #2
 800c63e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c640:	f001 fdec 	bl	800e21c <vTaskStartScheduler>
      stat = osOK;
 800c644:	2300      	movs	r3, #0
 800c646:	607b      	str	r3, [r7, #4]
 800c648:	e002      	b.n	800c650 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c64a:	f04f 33ff 	mov.w	r3, #4294967295
 800c64e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c650:	687b      	ldr	r3, [r7, #4]
}
 800c652:	4618      	mov	r0, r3
 800c654:	3708      	adds	r7, #8
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	200003e4 	.word	0x200003e4

0800c660 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c660:	b580      	push	{r7, lr}
 800c662:	b08e      	sub	sp, #56	@ 0x38
 800c664:	af04      	add	r7, sp, #16
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c66c:	2300      	movs	r3, #0
 800c66e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c670:	f3ef 8305 	mrs	r3, IPSR
 800c674:	617b      	str	r3, [r7, #20]
  return(result);
 800c676:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d17e      	bne.n	800c77a <osThreadNew+0x11a>
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d07b      	beq.n	800c77a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c682:	2380      	movs	r3, #128	@ 0x80
 800c684:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c686:	2318      	movs	r3, #24
 800c688:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c68a:	2300      	movs	r3, #0
 800c68c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c68e:	f04f 33ff 	mov.w	r3, #4294967295
 800c692:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d045      	beq.n	800c726 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d002      	beq.n	800c6a8 <osThreadNew+0x48>
        name = attr->name;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	699b      	ldr	r3, [r3, #24]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d002      	beq.n	800c6b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	699b      	ldr	r3, [r3, #24]
 800c6b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d008      	beq.n	800c6ce <osThreadNew+0x6e>
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	2b38      	cmp	r3, #56	@ 0x38
 800c6c0:	d805      	bhi.n	800c6ce <osThreadNew+0x6e>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	f003 0301 	and.w	r3, r3, #1
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d001      	beq.n	800c6d2 <osThreadNew+0x72>
        return (NULL);
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	e054      	b.n	800c77c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	695b      	ldr	r3, [r3, #20]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d003      	beq.n	800c6e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	695b      	ldr	r3, [r3, #20]
 800c6de:	089b      	lsrs	r3, r3, #2
 800c6e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	689b      	ldr	r3, [r3, #8]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00e      	beq.n	800c708 <osThreadNew+0xa8>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	68db      	ldr	r3, [r3, #12]
 800c6ee:	2ba7      	cmp	r3, #167	@ 0xa7
 800c6f0:	d90a      	bls.n	800c708 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d006      	beq.n	800c708 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	695b      	ldr	r3, [r3, #20]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d002      	beq.n	800c708 <osThreadNew+0xa8>
        mem = 1;
 800c702:	2301      	movs	r3, #1
 800c704:	61bb      	str	r3, [r7, #24]
 800c706:	e010      	b.n	800c72a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10c      	bne.n	800c72a <osThreadNew+0xca>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d108      	bne.n	800c72a <osThreadNew+0xca>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	691b      	ldr	r3, [r3, #16]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d104      	bne.n	800c72a <osThreadNew+0xca>
          mem = 0;
 800c720:	2300      	movs	r3, #0
 800c722:	61bb      	str	r3, [r7, #24]
 800c724:	e001      	b.n	800c72a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c726:	2300      	movs	r3, #0
 800c728:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d110      	bne.n	800c752 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c738:	9202      	str	r2, [sp, #8]
 800c73a:	9301      	str	r3, [sp, #4]
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	6a3a      	ldr	r2, [r7, #32]
 800c744:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c746:	68f8      	ldr	r0, [r7, #12]
 800c748:	f001 fbaa 	bl	800dea0 <xTaskCreateStatic>
 800c74c:	4603      	mov	r3, r0
 800c74e:	613b      	str	r3, [r7, #16]
 800c750:	e013      	b.n	800c77a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c752:	69bb      	ldr	r3, [r7, #24]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d110      	bne.n	800c77a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c758:	6a3b      	ldr	r3, [r7, #32]
 800c75a:	b29a      	uxth	r2, r3
 800c75c:	f107 0310 	add.w	r3, r7, #16
 800c760:	9301      	str	r3, [sp, #4]
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c76a:	68f8      	ldr	r0, [r7, #12]
 800c76c:	f001 fbf8 	bl	800df60 <xTaskCreate>
 800c770:	4603      	mov	r3, r0
 800c772:	2b01      	cmp	r3, #1
 800c774:	d001      	beq.n	800c77a <osThreadNew+0x11a>
            hTask = NULL;
 800c776:	2300      	movs	r3, #0
 800c778:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c77a:	693b      	ldr	r3, [r7, #16]
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3728      	adds	r7, #40	@ 0x28
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800c784:	b580      	push	{r7, lr}
 800c786:	b088      	sub	sp, #32
 800c788:	af02      	add	r7, sp, #8
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d002      	beq.n	800c79e <osThreadFlagsSet+0x1a>
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	da03      	bge.n	800c7a6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800c79e:	f06f 0303 	mvn.w	r3, #3
 800c7a2:	60fb      	str	r3, [r7, #12]
 800c7a4:	e035      	b.n	800c812 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800c7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7ac:	f3ef 8305 	mrs	r3, IPSR
 800c7b0:	613b      	str	r3, [r7, #16]
  return(result);
 800c7b2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d01f      	beq.n	800c7f8 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800c7bc:	f107 0308 	add.w	r3, r7, #8
 800c7c0:	9300      	str	r3, [sp, #0]
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	6839      	ldr	r1, [r7, #0]
 800c7c8:	6978      	ldr	r0, [r7, #20]
 800c7ca:	f002 fc4b 	bl	800f064 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800c7ce:	f107 030c 	add.w	r3, r7, #12
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	9200      	str	r2, [sp, #0]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	2100      	movs	r1, #0
 800c7da:	6978      	ldr	r0, [r7, #20]
 800c7dc:	f002 fc42 	bl	800f064 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d015      	beq.n	800c812 <osThreadFlagsSet+0x8e>
 800c7e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c81c <osThreadFlagsSet+0x98>)
 800c7e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7ec:	601a      	str	r2, [r3, #0]
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	f3bf 8f6f 	isb	sy
 800c7f6:	e00c      	b.n	800c812 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	6839      	ldr	r1, [r7, #0]
 800c7fe:	6978      	ldr	r0, [r7, #20]
 800c800:	f002 fb6e 	bl	800eee0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800c804:	f107 030c 	add.w	r3, r7, #12
 800c808:	2200      	movs	r2, #0
 800c80a:	2100      	movs	r1, #0
 800c80c:	6978      	ldr	r0, [r7, #20]
 800c80e:	f002 fb67 	bl	800eee0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800c812:	68fb      	ldr	r3, [r7, #12]
}
 800c814:	4618      	mov	r0, r3
 800c816:	3718      	adds	r7, #24
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	e000ed04 	.word	0xe000ed04

0800c820 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800c820:	b580      	push	{r7, lr}
 800c822:	b08c      	sub	sp, #48	@ 0x30
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c82c:	f3ef 8305 	mrs	r3, IPSR
 800c830:	617b      	str	r3, [r7, #20]
  return(result);
 800c832:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800c834:	2b00      	cmp	r3, #0
 800c836:	d003      	beq.n	800c840 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800c838:	f06f 0305 	mvn.w	r3, #5
 800c83c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c83e:	e06b      	b.n	800c918 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2b00      	cmp	r3, #0
 800c844:	da03      	bge.n	800c84e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800c846:	f06f 0303 	mvn.w	r3, #3
 800c84a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c84c:	e064      	b.n	800c918 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	f003 0302 	and.w	r3, r3, #2
 800c854:	2b00      	cmp	r3, #0
 800c856:	d002      	beq.n	800c85e <osThreadFlagsWait+0x3e>
      clear = 0U;
 800c858:	2300      	movs	r3, #0
 800c85a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c85c:	e001      	b.n	800c862 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800c862:	2300      	movs	r3, #0
 800c864:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800c86a:	f001 fdf3 	bl	800e454 <xTaskGetTickCount>
 800c86e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800c870:	f107 0210 	add.w	r2, r7, #16
 800c874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c876:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c878:	2000      	movs	r0, #0
 800c87a:	f002 fad1 	bl	800ee20 <xTaskNotifyWait>
 800c87e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d137      	bne.n	800c8f6 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800c886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	4013      	ands	r3, r2
 800c88c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c892:	4313      	orrs	r3, r2
 800c894:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	f003 0301 	and.w	r3, r3, #1
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00c      	beq.n	800c8ba <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a4:	4013      	ands	r3, r2
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d032      	beq.n	800c912 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10f      	bne.n	800c8d2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800c8b2:	f06f 0302 	mvn.w	r3, #2
 800c8b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800c8b8:	e02e      	b.n	800c918 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8be:	4013      	ands	r3, r2
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d128      	bne.n	800c916 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d103      	bne.n	800c8d2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800c8ca:	f06f 0302 	mvn.w	r3, #2
 800c8ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800c8d0:	e022      	b.n	800c918 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800c8d2:	f001 fdbf 	bl	800e454 <xTaskGetTickCount>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	6a3b      	ldr	r3, [r7, #32]
 800c8da:	1ad3      	subs	r3, r2, r3
 800c8dc:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800c8de:	69ba      	ldr	r2, [r7, #24]
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d902      	bls.n	800c8ec <osThreadFlagsWait+0xcc>
          tout  = 0;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8ea:	e00e      	b.n	800c90a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800c8ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	1ad3      	subs	r3, r2, r3
 800c8f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8f4:	e009      	b.n	800c90a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d103      	bne.n	800c904 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800c8fc:	f06f 0302 	mvn.w	r3, #2
 800c900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c902:	e002      	b.n	800c90a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800c904:	f06f 0301 	mvn.w	r3, #1
 800c908:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d1af      	bne.n	800c870 <osThreadFlagsWait+0x50>
 800c910:	e002      	b.n	800c918 <osThreadFlagsWait+0xf8>
            break;
 800c912:	bf00      	nop
 800c914:	e000      	b.n	800c918 <osThreadFlagsWait+0xf8>
            break;
 800c916:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800c918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3730      	adds	r7, #48	@ 0x30
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c922:	b580      	push	{r7, lr}
 800c924:	b088      	sub	sp, #32
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c92a:	2300      	movs	r3, #0
 800c92c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c92e:	f3ef 8305 	mrs	r3, IPSR
 800c932:	60bb      	str	r3, [r7, #8]
  return(result);
 800c934:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c936:	2b00      	cmp	r3, #0
 800c938:	d174      	bne.n	800ca24 <osMutexNew+0x102>
    if (attr != NULL) {
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d003      	beq.n	800c948 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	61bb      	str	r3, [r7, #24]
 800c946:	e001      	b.n	800c94c <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c948:	2300      	movs	r3, #0
 800c94a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	f003 0301 	and.w	r3, r3, #1
 800c952:	2b00      	cmp	r3, #0
 800c954:	d002      	beq.n	800c95c <osMutexNew+0x3a>
      rmtx = 1U;
 800c956:	2301      	movs	r3, #1
 800c958:	617b      	str	r3, [r7, #20]
 800c95a:	e001      	b.n	800c960 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c95c:	2300      	movs	r3, #0
 800c95e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	f003 0308 	and.w	r3, r3, #8
 800c966:	2b00      	cmp	r3, #0
 800c968:	d15c      	bne.n	800ca24 <osMutexNew+0x102>
      mem = -1;
 800c96a:	f04f 33ff 	mov.w	r3, #4294967295
 800c96e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d015      	beq.n	800c9a2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d006      	beq.n	800c98c <osMutexNew+0x6a>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	2b4f      	cmp	r3, #79	@ 0x4f
 800c984:	d902      	bls.n	800c98c <osMutexNew+0x6a>
          mem = 1;
 800c986:	2301      	movs	r3, #1
 800c988:	613b      	str	r3, [r7, #16]
 800c98a:	e00c      	b.n	800c9a6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d108      	bne.n	800c9a6 <osMutexNew+0x84>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d104      	bne.n	800c9a6 <osMutexNew+0x84>
            mem = 0;
 800c99c:	2300      	movs	r3, #0
 800c99e:	613b      	str	r3, [r7, #16]
 800c9a0:	e001      	b.n	800c9a6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d112      	bne.n	800c9d2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d007      	beq.n	800c9c2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	2004      	movs	r0, #4
 800c9ba:	f000 fc50 	bl	800d25e <xQueueCreateMutexStatic>
 800c9be:	61f8      	str	r0, [r7, #28]
 800c9c0:	e016      	b.n	800c9f0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	2001      	movs	r0, #1
 800c9ca:	f000 fc48 	bl	800d25e <xQueueCreateMutexStatic>
 800c9ce:	61f8      	str	r0, [r7, #28]
 800c9d0:	e00e      	b.n	800c9f0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10b      	bne.n	800c9f0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d004      	beq.n	800c9e8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c9de:	2004      	movs	r0, #4
 800c9e0:	f000 fc25 	bl	800d22e <xQueueCreateMutex>
 800c9e4:	61f8      	str	r0, [r7, #28]
 800c9e6:	e003      	b.n	800c9f0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c9e8:	2001      	movs	r0, #1
 800c9ea:	f000 fc20 	bl	800d22e <xQueueCreateMutex>
 800c9ee:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00c      	beq.n	800ca10 <osMutexNew+0xee>
        if (attr != NULL) {
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d003      	beq.n	800ca04 <osMutexNew+0xe2>
          name = attr->name;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	60fb      	str	r3, [r7, #12]
 800ca02:	e001      	b.n	800ca08 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ca04:	2300      	movs	r3, #0
 800ca06:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ca08:	68f9      	ldr	r1, [r7, #12]
 800ca0a:	69f8      	ldr	r0, [r7, #28]
 800ca0c:	f001 f9ea 	bl	800dde4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d006      	beq.n	800ca24 <osMutexNew+0x102>
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d003      	beq.n	800ca24 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	f043 0301 	orr.w	r3, r3, #1
 800ca22:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ca24:	69fb      	ldr	r3, [r7, #28]
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3720      	adds	r7, #32
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}

0800ca2e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ca2e:	b580      	push	{r7, lr}
 800ca30:	b086      	sub	sp, #24
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
 800ca36:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f023 0301 	bic.w	r3, r3, #1
 800ca3e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f003 0301 	and.w	r3, r3, #1
 800ca46:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca4c:	f3ef 8305 	mrs	r3, IPSR
 800ca50:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca52:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d003      	beq.n	800ca60 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800ca58:	f06f 0305 	mvn.w	r3, #5
 800ca5c:	617b      	str	r3, [r7, #20]
 800ca5e:	e02c      	b.n	800caba <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d103      	bne.n	800ca6e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800ca66:	f06f 0303 	mvn.w	r3, #3
 800ca6a:	617b      	str	r3, [r7, #20]
 800ca6c:	e025      	b.n	800caba <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d011      	beq.n	800ca98 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6938      	ldr	r0, [r7, #16]
 800ca78:	f000 fc41 	bl	800d2fe <xQueueTakeMutexRecursive>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d01b      	beq.n	800caba <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d003      	beq.n	800ca90 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ca88:	f06f 0301 	mvn.w	r3, #1
 800ca8c:	617b      	str	r3, [r7, #20]
 800ca8e:	e014      	b.n	800caba <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ca90:	f06f 0302 	mvn.w	r3, #2
 800ca94:	617b      	str	r3, [r7, #20]
 800ca96:	e010      	b.n	800caba <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ca98:	6839      	ldr	r1, [r7, #0]
 800ca9a:	6938      	ldr	r0, [r7, #16]
 800ca9c:	f000 fee8 	bl	800d870 <xQueueSemaphoreTake>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d009      	beq.n	800caba <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d003      	beq.n	800cab4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800caac:	f06f 0301 	mvn.w	r3, #1
 800cab0:	617b      	str	r3, [r7, #20]
 800cab2:	e002      	b.n	800caba <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cab4:	f06f 0302 	mvn.w	r3, #2
 800cab8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800caba:	697b      	ldr	r3, [r7, #20]
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3718      	adds	r7, #24
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b086      	sub	sp, #24
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f023 0301 	bic.w	r3, r3, #1
 800cad2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f003 0301 	and.w	r3, r3, #1
 800cada:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cadc:	2300      	movs	r3, #0
 800cade:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cae0:	f3ef 8305 	mrs	r3, IPSR
 800cae4:	60bb      	str	r3, [r7, #8]
  return(result);
 800cae6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d003      	beq.n	800caf4 <osMutexRelease+0x30>
    stat = osErrorISR;
 800caec:	f06f 0305 	mvn.w	r3, #5
 800caf0:	617b      	str	r3, [r7, #20]
 800caf2:	e01f      	b.n	800cb34 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d103      	bne.n	800cb02 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800cafa:	f06f 0303 	mvn.w	r3, #3
 800cafe:	617b      	str	r3, [r7, #20]
 800cb00:	e018      	b.n	800cb34 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d009      	beq.n	800cb1c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cb08:	6938      	ldr	r0, [r7, #16]
 800cb0a:	f000 fbc3 	bl	800d294 <xQueueGiveMutexRecursive>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d00f      	beq.n	800cb34 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cb14:	f06f 0302 	mvn.w	r3, #2
 800cb18:	617b      	str	r3, [r7, #20]
 800cb1a:	e00b      	b.n	800cb34 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	2200      	movs	r2, #0
 800cb20:	2100      	movs	r1, #0
 800cb22:	6938      	ldr	r0, [r7, #16]
 800cb24:	f000 fc22 	bl	800d36c <xQueueGenericSend>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d002      	beq.n	800cb34 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cb2e:	f06f 0302 	mvn.w	r3, #2
 800cb32:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cb34:	697b      	ldr	r3, [r7, #20]
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3718      	adds	r7, #24
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b08a      	sub	sp, #40	@ 0x28
 800cb42:	af02      	add	r7, sp, #8
 800cb44:	60f8      	str	r0, [r7, #12]
 800cb46:	60b9      	str	r1, [r7, #8]
 800cb48:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb4e:	f3ef 8305 	mrs	r3, IPSR
 800cb52:	613b      	str	r3, [r7, #16]
  return(result);
 800cb54:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d15f      	bne.n	800cc1a <osMessageQueueNew+0xdc>
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d05c      	beq.n	800cc1a <osMessageQueueNew+0xdc>
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d059      	beq.n	800cc1a <osMessageQueueNew+0xdc>
    mem = -1;
 800cb66:	f04f 33ff 	mov.w	r3, #4294967295
 800cb6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d029      	beq.n	800cbc6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d012      	beq.n	800cba0 <osMessageQueueNew+0x62>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	2b4f      	cmp	r3, #79	@ 0x4f
 800cb80:	d90e      	bls.n	800cba0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00a      	beq.n	800cba0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	695a      	ldr	r2, [r3, #20]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	68b9      	ldr	r1, [r7, #8]
 800cb92:	fb01 f303 	mul.w	r3, r1, r3
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d302      	bcc.n	800cba0 <osMessageQueueNew+0x62>
        mem = 1;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	61bb      	str	r3, [r7, #24]
 800cb9e:	e014      	b.n	800cbca <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d110      	bne.n	800cbca <osMessageQueueNew+0x8c>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d10c      	bne.n	800cbca <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d108      	bne.n	800cbca <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	695b      	ldr	r3, [r3, #20]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d104      	bne.n	800cbca <osMessageQueueNew+0x8c>
          mem = 0;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	61bb      	str	r3, [r7, #24]
 800cbc4:	e001      	b.n	800cbca <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d10b      	bne.n	800cbe8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	691a      	ldr	r2, [r3, #16]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	2100      	movs	r1, #0
 800cbda:	9100      	str	r1, [sp, #0]
 800cbdc:	68b9      	ldr	r1, [r7, #8]
 800cbde:	68f8      	ldr	r0, [r7, #12]
 800cbe0:	f000 fa30 	bl	800d044 <xQueueGenericCreateStatic>
 800cbe4:	61f8      	str	r0, [r7, #28]
 800cbe6:	e008      	b.n	800cbfa <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d105      	bne.n	800cbfa <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800cbee:	2200      	movs	r2, #0
 800cbf0:	68b9      	ldr	r1, [r7, #8]
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f000 faa3 	bl	800d13e <xQueueGenericCreate>
 800cbf8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cbfa:	69fb      	ldr	r3, [r7, #28]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00c      	beq.n	800cc1a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d003      	beq.n	800cc0e <osMessageQueueNew+0xd0>
        name = attr->name;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	617b      	str	r3, [r7, #20]
 800cc0c:	e001      	b.n	800cc12 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cc12:	6979      	ldr	r1, [r7, #20]
 800cc14:	69f8      	ldr	r0, [r7, #28]
 800cc16:	f001 f8e5 	bl	800dde4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cc1a:	69fb      	ldr	r3, [r7, #28]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3720      	adds	r7, #32
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b088      	sub	sp, #32
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	603b      	str	r3, [r7, #0]
 800cc30:	4613      	mov	r3, r2
 800cc32:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc3c:	f3ef 8305 	mrs	r3, IPSR
 800cc40:	617b      	str	r3, [r7, #20]
  return(result);
 800cc42:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d028      	beq.n	800cc9a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d005      	beq.n	800cc5a <osMessageQueuePut+0x36>
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d002      	beq.n	800cc5a <osMessageQueuePut+0x36>
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d003      	beq.n	800cc62 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800cc5a:	f06f 0303 	mvn.w	r3, #3
 800cc5e:	61fb      	str	r3, [r7, #28]
 800cc60:	e038      	b.n	800ccd4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800cc62:	2300      	movs	r3, #0
 800cc64:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cc66:	f107 0210 	add.w	r2, r7, #16
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	68b9      	ldr	r1, [r7, #8]
 800cc6e:	69b8      	ldr	r0, [r7, #24]
 800cc70:	f000 fc7e 	bl	800d570 <xQueueGenericSendFromISR>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b01      	cmp	r3, #1
 800cc78:	d003      	beq.n	800cc82 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800cc7a:	f06f 0302 	mvn.w	r3, #2
 800cc7e:	61fb      	str	r3, [r7, #28]
 800cc80:	e028      	b.n	800ccd4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d025      	beq.n	800ccd4 <osMessageQueuePut+0xb0>
 800cc88:	4b15      	ldr	r3, [pc, #84]	@ (800cce0 <osMessageQueuePut+0xbc>)
 800cc8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc8e:	601a      	str	r2, [r3, #0]
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	f3bf 8f6f 	isb	sy
 800cc98:	e01c      	b.n	800ccd4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d002      	beq.n	800cca6 <osMessageQueuePut+0x82>
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d103      	bne.n	800ccae <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800cca6:	f06f 0303 	mvn.w	r3, #3
 800ccaa:	61fb      	str	r3, [r7, #28]
 800ccac:	e012      	b.n	800ccd4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ccae:	2300      	movs	r3, #0
 800ccb0:	683a      	ldr	r2, [r7, #0]
 800ccb2:	68b9      	ldr	r1, [r7, #8]
 800ccb4:	69b8      	ldr	r0, [r7, #24]
 800ccb6:	f000 fb59 	bl	800d36c <xQueueGenericSend>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d009      	beq.n	800ccd4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d003      	beq.n	800ccce <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ccc6:	f06f 0301 	mvn.w	r3, #1
 800ccca:	61fb      	str	r3, [r7, #28]
 800cccc:	e002      	b.n	800ccd4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ccce:	f06f 0302 	mvn.w	r3, #2
 800ccd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ccd4:	69fb      	ldr	r3, [r7, #28]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3720      	adds	r7, #32
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	e000ed04 	.word	0xe000ed04

0800cce4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b088      	sub	sp, #32
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
 800ccf0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccfa:	f3ef 8305 	mrs	r3, IPSR
 800ccfe:	617b      	str	r3, [r7, #20]
  return(result);
 800cd00:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d028      	beq.n	800cd58 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d005      	beq.n	800cd18 <osMessageQueueGet+0x34>
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d002      	beq.n	800cd18 <osMessageQueueGet+0x34>
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d003      	beq.n	800cd20 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cd18:	f06f 0303 	mvn.w	r3, #3
 800cd1c:	61fb      	str	r3, [r7, #28]
 800cd1e:	e037      	b.n	800cd90 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cd20:	2300      	movs	r3, #0
 800cd22:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cd24:	f107 0310 	add.w	r3, r7, #16
 800cd28:	461a      	mov	r2, r3
 800cd2a:	68b9      	ldr	r1, [r7, #8]
 800cd2c:	69b8      	ldr	r0, [r7, #24]
 800cd2e:	f000 feaf 	bl	800da90 <xQueueReceiveFromISR>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d003      	beq.n	800cd40 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cd38:	f06f 0302 	mvn.w	r3, #2
 800cd3c:	61fb      	str	r3, [r7, #28]
 800cd3e:	e027      	b.n	800cd90 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d024      	beq.n	800cd90 <osMessageQueueGet+0xac>
 800cd46:	4b15      	ldr	r3, [pc, #84]	@ (800cd9c <osMessageQueueGet+0xb8>)
 800cd48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd4c:	601a      	str	r2, [r3, #0]
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	e01b      	b.n	800cd90 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d002      	beq.n	800cd64 <osMessageQueueGet+0x80>
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d103      	bne.n	800cd6c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cd64:	f06f 0303 	mvn.w	r3, #3
 800cd68:	61fb      	str	r3, [r7, #28]
 800cd6a:	e011      	b.n	800cd90 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cd6c:	683a      	ldr	r2, [r7, #0]
 800cd6e:	68b9      	ldr	r1, [r7, #8]
 800cd70:	69b8      	ldr	r0, [r7, #24]
 800cd72:	f000 fc9b 	bl	800d6ac <xQueueReceive>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d009      	beq.n	800cd90 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d003      	beq.n	800cd8a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cd82:	f06f 0301 	mvn.w	r3, #1
 800cd86:	61fb      	str	r3, [r7, #28]
 800cd88:	e002      	b.n	800cd90 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cd8a:	f06f 0302 	mvn.w	r3, #2
 800cd8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cd90:	69fb      	ldr	r3, [r7, #28]
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3720      	adds	r7, #32
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	e000ed04 	.word	0xe000ed04

0800cda0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	4a07      	ldr	r2, [pc, #28]	@ (800cdcc <vApplicationGetIdleTaskMemory+0x2c>)
 800cdb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	4a06      	ldr	r2, [pc, #24]	@ (800cdd0 <vApplicationGetIdleTaskMemory+0x30>)
 800cdb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2280      	movs	r2, #128	@ 0x80
 800cdbc:	601a      	str	r2, [r3, #0]
}
 800cdbe:	bf00      	nop
 800cdc0:	3714      	adds	r7, #20
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop
 800cdcc:	200003e8 	.word	0x200003e8
 800cdd0:	20000490 	.word	0x20000490

0800cdd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cdd4:	b480      	push	{r7}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	4a07      	ldr	r2, [pc, #28]	@ (800ce00 <vApplicationGetTimerTaskMemory+0x2c>)
 800cde4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	4a06      	ldr	r2, [pc, #24]	@ (800ce04 <vApplicationGetTimerTaskMemory+0x30>)
 800cdea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cdf2:	601a      	str	r2, [r3, #0]
}
 800cdf4:	bf00      	nop
 800cdf6:	3714      	adds	r7, #20
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr
 800ce00:	20000690 	.word	0x20000690
 800ce04:	20000738 	.word	0x20000738

0800ce08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f103 0208 	add.w	r2, r3, #8
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f103 0208 	add.w	r2, r3, #8
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f103 0208 	add.w	r2, r3, #8
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ce3c:	bf00      	nop
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b083      	sub	sp, #12
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ce56:	bf00      	nop
 800ce58:	370c      	adds	r7, #12
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr

0800ce62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ce62:	b480      	push	{r7}
 800ce64:	b085      	sub	sp, #20
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	689a      	ldr	r2, [r3, #8]
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	689b      	ldr	r3, [r3, #8]
 800ce84:	683a      	ldr	r2, [r7, #0]
 800ce86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	683a      	ldr	r2, [r7, #0]
 800ce8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	1c5a      	adds	r2, r3, #1
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	601a      	str	r2, [r3, #0]
}
 800ce9e:	bf00      	nop
 800cea0:	3714      	adds	r7, #20
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr

0800ceaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ceaa:	b480      	push	{r7}
 800ceac:	b085      	sub	sp, #20
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec0:	d103      	bne.n	800ceca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	691b      	ldr	r3, [r3, #16]
 800cec6:	60fb      	str	r3, [r7, #12]
 800cec8:	e00c      	b.n	800cee4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	3308      	adds	r3, #8
 800cece:	60fb      	str	r3, [r7, #12]
 800ced0:	e002      	b.n	800ced8 <vListInsert+0x2e>
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	60fb      	str	r3, [r7, #12]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	68ba      	ldr	r2, [r7, #8]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d2f6      	bcs.n	800ced2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	685a      	ldr	r2, [r3, #4]
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	683a      	ldr	r2, [r7, #0]
 800cef2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	68fa      	ldr	r2, [r7, #12]
 800cef8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	683a      	ldr	r2, [r7, #0]
 800cefe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	1c5a      	adds	r2, r3, #1
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	601a      	str	r2, [r3, #0]
}
 800cf10:	bf00      	nop
 800cf12:	3714      	adds	r7, #20
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	691b      	ldr	r3, [r3, #16]
 800cf28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	6892      	ldr	r2, [r2, #8]
 800cf32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	6852      	ldr	r2, [r2, #4]
 800cf3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d103      	bne.n	800cf50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	689a      	ldr	r2, [r3, #8]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	1e5a      	subs	r2, r3, #1
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3714      	adds	r7, #20
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d10b      	bne.n	800cf9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cf84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf88:	f383 8811 	msr	BASEPRI, r3
 800cf8c:	f3bf 8f6f 	isb	sy
 800cf90:	f3bf 8f4f 	dsb	sy
 800cf94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cf96:	bf00      	nop
 800cf98:	bf00      	nop
 800cf9a:	e7fd      	b.n	800cf98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cf9c:	f002 fe24 	bl	800fbe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681a      	ldr	r2, [r3, #0]
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfa8:	68f9      	ldr	r1, [r7, #12]
 800cfaa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cfac:	fb01 f303 	mul.w	r3, r1, r3
 800cfb0:	441a      	add	r2, r3
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfcc:	3b01      	subs	r3, #1
 800cfce:	68f9      	ldr	r1, [r7, #12]
 800cfd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cfd2:	fb01 f303 	mul.w	r3, r1, r3
 800cfd6:	441a      	add	r2, r3
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	22ff      	movs	r2, #255	@ 0xff
 800cfe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	22ff      	movs	r2, #255	@ 0xff
 800cfe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d114      	bne.n	800d01c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	691b      	ldr	r3, [r3, #16]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d01a      	beq.n	800d030 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	3310      	adds	r3, #16
 800cffe:	4618      	mov	r0, r3
 800d000:	f001 fbaa 	bl	800e758 <xTaskRemoveFromEventList>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d012      	beq.n	800d030 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d00a:	4b0d      	ldr	r3, [pc, #52]	@ (800d040 <xQueueGenericReset+0xd0>)
 800d00c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d010:	601a      	str	r2, [r3, #0]
 800d012:	f3bf 8f4f 	dsb	sy
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	e009      	b.n	800d030 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	3310      	adds	r3, #16
 800d020:	4618      	mov	r0, r3
 800d022:	f7ff fef1 	bl	800ce08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	3324      	adds	r3, #36	@ 0x24
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7ff feec 	bl	800ce08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d030:	f002 fe0c 	bl	800fc4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d034:	2301      	movs	r3, #1
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	e000ed04 	.word	0xe000ed04

0800d044 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d044:	b580      	push	{r7, lr}
 800d046:	b08e      	sub	sp, #56	@ 0x38
 800d048:	af02      	add	r7, sp, #8
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
 800d050:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d10b      	bne.n	800d070 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d05c:	f383 8811 	msr	BASEPRI, r3
 800d060:	f3bf 8f6f 	isb	sy
 800d064:	f3bf 8f4f 	dsb	sy
 800d068:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d06a:	bf00      	nop
 800d06c:	bf00      	nop
 800d06e:	e7fd      	b.n	800d06c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10b      	bne.n	800d08e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d07a:	f383 8811 	msr	BASEPRI, r3
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f3bf 8f4f 	dsb	sy
 800d086:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d088:	bf00      	nop
 800d08a:	bf00      	nop
 800d08c:	e7fd      	b.n	800d08a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d002      	beq.n	800d09a <xQueueGenericCreateStatic+0x56>
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d001      	beq.n	800d09e <xQueueGenericCreateStatic+0x5a>
 800d09a:	2301      	movs	r3, #1
 800d09c:	e000      	b.n	800d0a0 <xQueueGenericCreateStatic+0x5c>
 800d09e:	2300      	movs	r3, #0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d10b      	bne.n	800d0bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0a8:	f383 8811 	msr	BASEPRI, r3
 800d0ac:	f3bf 8f6f 	isb	sy
 800d0b0:	f3bf 8f4f 	dsb	sy
 800d0b4:	623b      	str	r3, [r7, #32]
}
 800d0b6:	bf00      	nop
 800d0b8:	bf00      	nop
 800d0ba:	e7fd      	b.n	800d0b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d102      	bne.n	800d0c8 <xQueueGenericCreateStatic+0x84>
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d101      	bne.n	800d0cc <xQueueGenericCreateStatic+0x88>
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e000      	b.n	800d0ce <xQueueGenericCreateStatic+0x8a>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10b      	bne.n	800d0ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d6:	f383 8811 	msr	BASEPRI, r3
 800d0da:	f3bf 8f6f 	isb	sy
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	61fb      	str	r3, [r7, #28]
}
 800d0e4:	bf00      	nop
 800d0e6:	bf00      	nop
 800d0e8:	e7fd      	b.n	800d0e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d0ea:	2350      	movs	r3, #80	@ 0x50
 800d0ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	2b50      	cmp	r3, #80	@ 0x50
 800d0f2:	d00b      	beq.n	800d10c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f8:	f383 8811 	msr	BASEPRI, r3
 800d0fc:	f3bf 8f6f 	isb	sy
 800d100:	f3bf 8f4f 	dsb	sy
 800d104:	61bb      	str	r3, [r7, #24]
}
 800d106:	bf00      	nop
 800d108:	bf00      	nop
 800d10a:	e7fd      	b.n	800d108 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d10c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d114:	2b00      	cmp	r3, #0
 800d116:	d00d      	beq.n	800d134 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d120:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	4613      	mov	r3, r2
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	68b9      	ldr	r1, [r7, #8]
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f000 f840 	bl	800d1b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d136:	4618      	mov	r0, r3
 800d138:	3730      	adds	r7, #48	@ 0x30
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b08a      	sub	sp, #40	@ 0x28
 800d142:	af02      	add	r7, sp, #8
 800d144:	60f8      	str	r0, [r7, #12]
 800d146:	60b9      	str	r1, [r7, #8]
 800d148:	4613      	mov	r3, r2
 800d14a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d10b      	bne.n	800d16a <xQueueGenericCreate+0x2c>
	__asm volatile
 800d152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d156:	f383 8811 	msr	BASEPRI, r3
 800d15a:	f3bf 8f6f 	isb	sy
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	613b      	str	r3, [r7, #16]
}
 800d164:	bf00      	nop
 800d166:	bf00      	nop
 800d168:	e7fd      	b.n	800d166 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	68ba      	ldr	r2, [r7, #8]
 800d16e:	fb02 f303 	mul.w	r3, r2, r3
 800d172:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	3350      	adds	r3, #80	@ 0x50
 800d178:	4618      	mov	r0, r3
 800d17a:	f002 fe57 	bl	800fe2c <pvPortMalloc>
 800d17e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d180:	69bb      	ldr	r3, [r7, #24]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d011      	beq.n	800d1aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	3350      	adds	r3, #80	@ 0x50
 800d18e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	2200      	movs	r2, #0
 800d194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d198:	79fa      	ldrb	r2, [r7, #7]
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	4613      	mov	r3, r2
 800d1a0:	697a      	ldr	r2, [r7, #20]
 800d1a2:	68b9      	ldr	r1, [r7, #8]
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	f000 f805 	bl	800d1b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d1aa:	69bb      	ldr	r3, [r7, #24]
	}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3720      	adds	r7, #32
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
 800d1c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d103      	bne.n	800d1d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d1c8:	69bb      	ldr	r3, [r7, #24]
 800d1ca:	69ba      	ldr	r2, [r7, #24]
 800d1cc:	601a      	str	r2, [r3, #0]
 800d1ce:	e002      	b.n	800d1d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	68ba      	ldr	r2, [r7, #8]
 800d1e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d1e2:	2101      	movs	r1, #1
 800d1e4:	69b8      	ldr	r0, [r7, #24]
 800d1e6:	f7ff fec3 	bl	800cf70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	78fa      	ldrb	r2, [r7, #3]
 800d1ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d1f2:	bf00      	nop
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b082      	sub	sp, #8
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00e      	beq.n	800d226 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2200      	movs	r2, #0
 800d20c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2200      	movs	r2, #0
 800d212:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d21a:	2300      	movs	r3, #0
 800d21c:	2200      	movs	r2, #0
 800d21e:	2100      	movs	r1, #0
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 f8a3 	bl	800d36c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d226:	bf00      	nop
 800d228:	3708      	adds	r7, #8
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}

0800d22e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d22e:	b580      	push	{r7, lr}
 800d230:	b086      	sub	sp, #24
 800d232:	af00      	add	r7, sp, #0
 800d234:	4603      	mov	r3, r0
 800d236:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d238:	2301      	movs	r3, #1
 800d23a:	617b      	str	r3, [r7, #20]
 800d23c:	2300      	movs	r3, #0
 800d23e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d240:	79fb      	ldrb	r3, [r7, #7]
 800d242:	461a      	mov	r2, r3
 800d244:	6939      	ldr	r1, [r7, #16]
 800d246:	6978      	ldr	r0, [r7, #20]
 800d248:	f7ff ff79 	bl	800d13e <xQueueGenericCreate>
 800d24c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d24e:	68f8      	ldr	r0, [r7, #12]
 800d250:	f7ff ffd3 	bl	800d1fa <prvInitialiseMutex>

		return xNewQueue;
 800d254:	68fb      	ldr	r3, [r7, #12]
	}
 800d256:	4618      	mov	r0, r3
 800d258:	3718      	adds	r7, #24
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b088      	sub	sp, #32
 800d262:	af02      	add	r7, sp, #8
 800d264:	4603      	mov	r3, r0
 800d266:	6039      	str	r1, [r7, #0]
 800d268:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d26a:	2301      	movs	r3, #1
 800d26c:	617b      	str	r3, [r7, #20]
 800d26e:	2300      	movs	r3, #0
 800d270:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d272:	79fb      	ldrb	r3, [r7, #7]
 800d274:	9300      	str	r3, [sp, #0]
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	2200      	movs	r2, #0
 800d27a:	6939      	ldr	r1, [r7, #16]
 800d27c:	6978      	ldr	r0, [r7, #20]
 800d27e:	f7ff fee1 	bl	800d044 <xQueueGenericCreateStatic>
 800d282:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d284:	68f8      	ldr	r0, [r7, #12]
 800d286:	f7ff ffb8 	bl	800d1fa <prvInitialiseMutex>

		return xNewQueue;
 800d28a:	68fb      	ldr	r3, [r7, #12]
	}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3718      	adds	r7, #24
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d294:	b590      	push	{r4, r7, lr}
 800d296:	b087      	sub	sp, #28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d10b      	bne.n	800d2be <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2aa:	f383 8811 	msr	BASEPRI, r3
 800d2ae:	f3bf 8f6f 	isb	sy
 800d2b2:	f3bf 8f4f 	dsb	sy
 800d2b6:	60fb      	str	r3, [r7, #12]
}
 800d2b8:	bf00      	nop
 800d2ba:	bf00      	nop
 800d2bc:	e7fd      	b.n	800d2ba <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	689c      	ldr	r4, [r3, #8]
 800d2c2:	f001 fc0f 	bl	800eae4 <xTaskGetCurrentTaskHandle>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	429c      	cmp	r4, r3
 800d2ca:	d111      	bne.n	800d2f0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	1e5a      	subs	r2, r3, #1
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d105      	bne.n	800d2ea <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d2de:	2300      	movs	r3, #0
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	6938      	ldr	r0, [r7, #16]
 800d2e6:	f000 f841 	bl	800d36c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	617b      	str	r3, [r7, #20]
 800d2ee:	e001      	b.n	800d2f4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d2f4:	697b      	ldr	r3, [r7, #20]
	}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	371c      	adds	r7, #28
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd90      	pop	{r4, r7, pc}

0800d2fe <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d2fe:	b590      	push	{r4, r7, lr}
 800d300:	b087      	sub	sp, #28
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
 800d306:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d10b      	bne.n	800d32a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d316:	f383 8811 	msr	BASEPRI, r3
 800d31a:	f3bf 8f6f 	isb	sy
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	60fb      	str	r3, [r7, #12]
}
 800d324:	bf00      	nop
 800d326:	bf00      	nop
 800d328:	e7fd      	b.n	800d326 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	689c      	ldr	r4, [r3, #8]
 800d32e:	f001 fbd9 	bl	800eae4 <xTaskGetCurrentTaskHandle>
 800d332:	4603      	mov	r3, r0
 800d334:	429c      	cmp	r4, r3
 800d336:	d107      	bne.n	800d348 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	1c5a      	adds	r2, r3, #1
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d342:	2301      	movs	r3, #1
 800d344:	617b      	str	r3, [r7, #20]
 800d346:	e00c      	b.n	800d362 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d348:	6839      	ldr	r1, [r7, #0]
 800d34a:	6938      	ldr	r0, [r7, #16]
 800d34c:	f000 fa90 	bl	800d870 <xQueueSemaphoreTake>
 800d350:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d004      	beq.n	800d362 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	1c5a      	adds	r2, r3, #1
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d362:	697b      	ldr	r3, [r7, #20]
	}
 800d364:	4618      	mov	r0, r3
 800d366:	371c      	adds	r7, #28
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd90      	pop	{r4, r7, pc}

0800d36c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b08e      	sub	sp, #56	@ 0x38
 800d370:	af00      	add	r7, sp, #0
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	607a      	str	r2, [r7, #4]
 800d378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d37a:	2300      	movs	r3, #0
 800d37c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10b      	bne.n	800d3a0 <xQueueGenericSend+0x34>
	__asm volatile
 800d388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d38c:	f383 8811 	msr	BASEPRI, r3
 800d390:	f3bf 8f6f 	isb	sy
 800d394:	f3bf 8f4f 	dsb	sy
 800d398:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d39a:	bf00      	nop
 800d39c:	bf00      	nop
 800d39e:	e7fd      	b.n	800d39c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d103      	bne.n	800d3ae <xQueueGenericSend+0x42>
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d101      	bne.n	800d3b2 <xQueueGenericSend+0x46>
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	e000      	b.n	800d3b4 <xQueueGenericSend+0x48>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d10b      	bne.n	800d3d0 <xQueueGenericSend+0x64>
	__asm volatile
 800d3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3bc:	f383 8811 	msr	BASEPRI, r3
 800d3c0:	f3bf 8f6f 	isb	sy
 800d3c4:	f3bf 8f4f 	dsb	sy
 800d3c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d3ca:	bf00      	nop
 800d3cc:	bf00      	nop
 800d3ce:	e7fd      	b.n	800d3cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	d103      	bne.n	800d3de <xQueueGenericSend+0x72>
 800d3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d101      	bne.n	800d3e2 <xQueueGenericSend+0x76>
 800d3de:	2301      	movs	r3, #1
 800d3e0:	e000      	b.n	800d3e4 <xQueueGenericSend+0x78>
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d10b      	bne.n	800d400 <xQueueGenericSend+0x94>
	__asm volatile
 800d3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ec:	f383 8811 	msr	BASEPRI, r3
 800d3f0:	f3bf 8f6f 	isb	sy
 800d3f4:	f3bf 8f4f 	dsb	sy
 800d3f8:	623b      	str	r3, [r7, #32]
}
 800d3fa:	bf00      	nop
 800d3fc:	bf00      	nop
 800d3fe:	e7fd      	b.n	800d3fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d400:	f001 fb80 	bl	800eb04 <xTaskGetSchedulerState>
 800d404:	4603      	mov	r3, r0
 800d406:	2b00      	cmp	r3, #0
 800d408:	d102      	bne.n	800d410 <xQueueGenericSend+0xa4>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d101      	bne.n	800d414 <xQueueGenericSend+0xa8>
 800d410:	2301      	movs	r3, #1
 800d412:	e000      	b.n	800d416 <xQueueGenericSend+0xaa>
 800d414:	2300      	movs	r3, #0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d10b      	bne.n	800d432 <xQueueGenericSend+0xc6>
	__asm volatile
 800d41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d41e:	f383 8811 	msr	BASEPRI, r3
 800d422:	f3bf 8f6f 	isb	sy
 800d426:	f3bf 8f4f 	dsb	sy
 800d42a:	61fb      	str	r3, [r7, #28]
}
 800d42c:	bf00      	nop
 800d42e:	bf00      	nop
 800d430:	e7fd      	b.n	800d42e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d432:	f002 fbd9 	bl	800fbe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d438:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d43c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d43e:	429a      	cmp	r2, r3
 800d440:	d302      	bcc.n	800d448 <xQueueGenericSend+0xdc>
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	2b02      	cmp	r3, #2
 800d446:	d129      	bne.n	800d49c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d448:	683a      	ldr	r2, [r7, #0]
 800d44a:	68b9      	ldr	r1, [r7, #8]
 800d44c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d44e:	f000 fbb9 	bl	800dbc4 <prvCopyDataToQueue>
 800d452:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d010      	beq.n	800d47e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d45e:	3324      	adds	r3, #36	@ 0x24
 800d460:	4618      	mov	r0, r3
 800d462:	f001 f979 	bl	800e758 <xTaskRemoveFromEventList>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d013      	beq.n	800d494 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d46c:	4b3f      	ldr	r3, [pc, #252]	@ (800d56c <xQueueGenericSend+0x200>)
 800d46e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d472:	601a      	str	r2, [r3, #0]
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	e00a      	b.n	800d494 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d480:	2b00      	cmp	r3, #0
 800d482:	d007      	beq.n	800d494 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d484:	4b39      	ldr	r3, [pc, #228]	@ (800d56c <xQueueGenericSend+0x200>)
 800d486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d48a:	601a      	str	r2, [r3, #0]
 800d48c:	f3bf 8f4f 	dsb	sy
 800d490:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d494:	f002 fbda 	bl	800fc4c <vPortExitCritical>
				return pdPASS;
 800d498:	2301      	movs	r3, #1
 800d49a:	e063      	b.n	800d564 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d103      	bne.n	800d4aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d4a2:	f002 fbd3 	bl	800fc4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	e05c      	b.n	800d564 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d4aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d106      	bne.n	800d4be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d4b0:	f107 0314 	add.w	r3, r7, #20
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f001 f9b3 	bl	800e820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d4be:	f002 fbc5 	bl	800fc4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d4c2:	f000 ff1b 	bl	800e2fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d4c6:	f002 fb8f 	bl	800fbe8 <vPortEnterCritical>
 800d4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d4d0:	b25b      	sxtb	r3, r3
 800d4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d6:	d103      	bne.n	800d4e0 <xQueueGenericSend+0x174>
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4e6:	b25b      	sxtb	r3, r3
 800d4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ec:	d103      	bne.n	800d4f6 <xQueueGenericSend+0x18a>
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d4f6:	f002 fba9 	bl	800fc4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4fa:	1d3a      	adds	r2, r7, #4
 800d4fc:	f107 0314 	add.w	r3, r7, #20
 800d500:	4611      	mov	r1, r2
 800d502:	4618      	mov	r0, r3
 800d504:	f001 f9a2 	bl	800e84c <xTaskCheckForTimeOut>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d124      	bne.n	800d558 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d50e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d510:	f000 fc50 	bl	800ddb4 <prvIsQueueFull>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d018      	beq.n	800d54c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d51c:	3310      	adds	r3, #16
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	4611      	mov	r1, r2
 800d522:	4618      	mov	r0, r3
 800d524:	f001 f8c6 	bl	800e6b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d528:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d52a:	f000 fbdb 	bl	800dce4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d52e:	f000 fef3 	bl	800e318 <xTaskResumeAll>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	f47f af7c 	bne.w	800d432 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d53a:	4b0c      	ldr	r3, [pc, #48]	@ (800d56c <xQueueGenericSend+0x200>)
 800d53c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d540:	601a      	str	r2, [r3, #0]
 800d542:	f3bf 8f4f 	dsb	sy
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	e772      	b.n	800d432 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d54c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d54e:	f000 fbc9 	bl	800dce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d552:	f000 fee1 	bl	800e318 <xTaskResumeAll>
 800d556:	e76c      	b.n	800d432 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d55a:	f000 fbc3 	bl	800dce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d55e:	f000 fedb 	bl	800e318 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d562:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d564:	4618      	mov	r0, r3
 800d566:	3738      	adds	r7, #56	@ 0x38
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	e000ed04 	.word	0xe000ed04

0800d570 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b090      	sub	sp, #64	@ 0x40
 800d574:	af00      	add	r7, sp, #0
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	60b9      	str	r1, [r7, #8]
 800d57a:	607a      	str	r2, [r7, #4]
 800d57c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d584:	2b00      	cmp	r3, #0
 800d586:	d10b      	bne.n	800d5a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d58c:	f383 8811 	msr	BASEPRI, r3
 800d590:	f3bf 8f6f 	isb	sy
 800d594:	f3bf 8f4f 	dsb	sy
 800d598:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d59a:	bf00      	nop
 800d59c:	bf00      	nop
 800d59e:	e7fd      	b.n	800d59c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d103      	bne.n	800d5ae <xQueueGenericSendFromISR+0x3e>
 800d5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d101      	bne.n	800d5b2 <xQueueGenericSendFromISR+0x42>
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e000      	b.n	800d5b4 <xQueueGenericSendFromISR+0x44>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d10b      	bne.n	800d5d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5bc:	f383 8811 	msr	BASEPRI, r3
 800d5c0:	f3bf 8f6f 	isb	sy
 800d5c4:	f3bf 8f4f 	dsb	sy
 800d5c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d5ca:	bf00      	nop
 800d5cc:	bf00      	nop
 800d5ce:	e7fd      	b.n	800d5cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	d103      	bne.n	800d5de <xQueueGenericSendFromISR+0x6e>
 800d5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d101      	bne.n	800d5e2 <xQueueGenericSendFromISR+0x72>
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e000      	b.n	800d5e4 <xQueueGenericSendFromISR+0x74>
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d10b      	bne.n	800d600 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ec:	f383 8811 	msr	BASEPRI, r3
 800d5f0:	f3bf 8f6f 	isb	sy
 800d5f4:	f3bf 8f4f 	dsb	sy
 800d5f8:	623b      	str	r3, [r7, #32]
}
 800d5fa:	bf00      	nop
 800d5fc:	bf00      	nop
 800d5fe:	e7fd      	b.n	800d5fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d600:	f002 fbd2 	bl	800fda8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d604:	f3ef 8211 	mrs	r2, BASEPRI
 800d608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d60c:	f383 8811 	msr	BASEPRI, r3
 800d610:	f3bf 8f6f 	isb	sy
 800d614:	f3bf 8f4f 	dsb	sy
 800d618:	61fa      	str	r2, [r7, #28]
 800d61a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d61c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d61e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d622:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d628:	429a      	cmp	r2, r3
 800d62a:	d302      	bcc.n	800d632 <xQueueGenericSendFromISR+0xc2>
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	2b02      	cmp	r3, #2
 800d630:	d12f      	bne.n	800d692 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d634:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d638:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d63c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d63e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d640:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d642:	683a      	ldr	r2, [r7, #0]
 800d644:	68b9      	ldr	r1, [r7, #8]
 800d646:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d648:	f000 fabc 	bl	800dbc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d64c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d654:	d112      	bne.n	800d67c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d016      	beq.n	800d68c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d660:	3324      	adds	r3, #36	@ 0x24
 800d662:	4618      	mov	r0, r3
 800d664:	f001 f878 	bl	800e758 <xTaskRemoveFromEventList>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d00e      	beq.n	800d68c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00b      	beq.n	800d68c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2201      	movs	r2, #1
 800d678:	601a      	str	r2, [r3, #0]
 800d67a:	e007      	b.n	800d68c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d67c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d680:	3301      	adds	r3, #1
 800d682:	b2db      	uxtb	r3, r3
 800d684:	b25a      	sxtb	r2, r3
 800d686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d68c:	2301      	movs	r3, #1
 800d68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d690:	e001      	b.n	800d696 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d692:	2300      	movs	r3, #0
 800d694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d698:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d6a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d6a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3740      	adds	r7, #64	@ 0x40
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b08c      	sub	sp, #48	@ 0x30
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d10b      	bne.n	800d6de <xQueueReceive+0x32>
	__asm volatile
 800d6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ca:	f383 8811 	msr	BASEPRI, r3
 800d6ce:	f3bf 8f6f 	isb	sy
 800d6d2:	f3bf 8f4f 	dsb	sy
 800d6d6:	623b      	str	r3, [r7, #32]
}
 800d6d8:	bf00      	nop
 800d6da:	bf00      	nop
 800d6dc:	e7fd      	b.n	800d6da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d103      	bne.n	800d6ec <xQueueReceive+0x40>
 800d6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d101      	bne.n	800d6f0 <xQueueReceive+0x44>
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e000      	b.n	800d6f2 <xQueueReceive+0x46>
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d10b      	bne.n	800d70e <xQueueReceive+0x62>
	__asm volatile
 800d6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6fa:	f383 8811 	msr	BASEPRI, r3
 800d6fe:	f3bf 8f6f 	isb	sy
 800d702:	f3bf 8f4f 	dsb	sy
 800d706:	61fb      	str	r3, [r7, #28]
}
 800d708:	bf00      	nop
 800d70a:	bf00      	nop
 800d70c:	e7fd      	b.n	800d70a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d70e:	f001 f9f9 	bl	800eb04 <xTaskGetSchedulerState>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d102      	bne.n	800d71e <xQueueReceive+0x72>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d101      	bne.n	800d722 <xQueueReceive+0x76>
 800d71e:	2301      	movs	r3, #1
 800d720:	e000      	b.n	800d724 <xQueueReceive+0x78>
 800d722:	2300      	movs	r3, #0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d10b      	bne.n	800d740 <xQueueReceive+0x94>
	__asm volatile
 800d728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d72c:	f383 8811 	msr	BASEPRI, r3
 800d730:	f3bf 8f6f 	isb	sy
 800d734:	f3bf 8f4f 	dsb	sy
 800d738:	61bb      	str	r3, [r7, #24]
}
 800d73a:	bf00      	nop
 800d73c:	bf00      	nop
 800d73e:	e7fd      	b.n	800d73c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d740:	f002 fa52 	bl	800fbe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d748:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d01f      	beq.n	800d790 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d750:	68b9      	ldr	r1, [r7, #8]
 800d752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d754:	f000 faa0 	bl	800dc98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75a:	1e5a      	subs	r2, r3, #1
 800d75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d75e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d762:	691b      	ldr	r3, [r3, #16]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d00f      	beq.n	800d788 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d76a:	3310      	adds	r3, #16
 800d76c:	4618      	mov	r0, r3
 800d76e:	f000 fff3 	bl	800e758 <xTaskRemoveFromEventList>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d007      	beq.n	800d788 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d778:	4b3c      	ldr	r3, [pc, #240]	@ (800d86c <xQueueReceive+0x1c0>)
 800d77a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d77e:	601a      	str	r2, [r3, #0]
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d788:	f002 fa60 	bl	800fc4c <vPortExitCritical>
				return pdPASS;
 800d78c:	2301      	movs	r3, #1
 800d78e:	e069      	b.n	800d864 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d103      	bne.n	800d79e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d796:	f002 fa59 	bl	800fc4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d79a:	2300      	movs	r3, #0
 800d79c:	e062      	b.n	800d864 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d106      	bne.n	800d7b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7a4:	f107 0310 	add.w	r3, r7, #16
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f001 f839 	bl	800e820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7b2:	f002 fa4b 	bl	800fc4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7b6:	f000 fda1 	bl	800e2fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7ba:	f002 fa15 	bl	800fbe8 <vPortEnterCritical>
 800d7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d7c4:	b25b      	sxtb	r3, r3
 800d7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ca:	d103      	bne.n	800d7d4 <xQueueReceive+0x128>
 800d7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7da:	b25b      	sxtb	r3, r3
 800d7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e0:	d103      	bne.n	800d7ea <xQueueReceive+0x13e>
 800d7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d7ea:	f002 fa2f 	bl	800fc4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7ee:	1d3a      	adds	r2, r7, #4
 800d7f0:	f107 0310 	add.w	r3, r7, #16
 800d7f4:	4611      	mov	r1, r2
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f001 f828 	bl	800e84c <xTaskCheckForTimeOut>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d123      	bne.n	800d84a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d802:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d804:	f000 fac0 	bl	800dd88 <prvIsQueueEmpty>
 800d808:	4603      	mov	r3, r0
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d017      	beq.n	800d83e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d810:	3324      	adds	r3, #36	@ 0x24
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	4611      	mov	r1, r2
 800d816:	4618      	mov	r0, r3
 800d818:	f000 ff4c 	bl	800e6b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d81c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d81e:	f000 fa61 	bl	800dce4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d822:	f000 fd79 	bl	800e318 <xTaskResumeAll>
 800d826:	4603      	mov	r3, r0
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d189      	bne.n	800d740 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d82c:	4b0f      	ldr	r3, [pc, #60]	@ (800d86c <xQueueReceive+0x1c0>)
 800d82e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d832:	601a      	str	r2, [r3, #0]
 800d834:	f3bf 8f4f 	dsb	sy
 800d838:	f3bf 8f6f 	isb	sy
 800d83c:	e780      	b.n	800d740 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d83e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d840:	f000 fa50 	bl	800dce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d844:	f000 fd68 	bl	800e318 <xTaskResumeAll>
 800d848:	e77a      	b.n	800d740 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d84a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d84c:	f000 fa4a 	bl	800dce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d850:	f000 fd62 	bl	800e318 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d854:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d856:	f000 fa97 	bl	800dd88 <prvIsQueueEmpty>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f43f af6f 	beq.w	800d740 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d862:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d864:	4618      	mov	r0, r3
 800d866:	3730      	adds	r7, #48	@ 0x30
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	e000ed04 	.word	0xe000ed04

0800d870 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b08e      	sub	sp, #56	@ 0x38
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d87a:	2300      	movs	r3, #0
 800d87c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d882:	2300      	movs	r3, #0
 800d884:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d10b      	bne.n	800d8a4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d890:	f383 8811 	msr	BASEPRI, r3
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	623b      	str	r3, [r7, #32]
}
 800d89e:	bf00      	nop
 800d8a0:	bf00      	nop
 800d8a2:	e7fd      	b.n	800d8a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00b      	beq.n	800d8c4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	61fb      	str	r3, [r7, #28]
}
 800d8be:	bf00      	nop
 800d8c0:	bf00      	nop
 800d8c2:	e7fd      	b.n	800d8c0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8c4:	f001 f91e 	bl	800eb04 <xTaskGetSchedulerState>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d102      	bne.n	800d8d4 <xQueueSemaphoreTake+0x64>
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d101      	bne.n	800d8d8 <xQueueSemaphoreTake+0x68>
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	e000      	b.n	800d8da <xQueueSemaphoreTake+0x6a>
 800d8d8:	2300      	movs	r3, #0
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d10b      	bne.n	800d8f6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e2:	f383 8811 	msr	BASEPRI, r3
 800d8e6:	f3bf 8f6f 	isb	sy
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	61bb      	str	r3, [r7, #24]
}
 800d8f0:	bf00      	nop
 800d8f2:	bf00      	nop
 800d8f4:	e7fd      	b.n	800d8f2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8f6:	f002 f977 	bl	800fbe8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d8fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8fe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d902:	2b00      	cmp	r3, #0
 800d904:	d024      	beq.n	800d950 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d908:	1e5a      	subs	r2, r3, #1
 800d90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d90c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d104      	bne.n	800d920 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d916:	f001 fa6f 	bl	800edf8 <pvTaskIncrementMutexHeldCount>
 800d91a:	4602      	mov	r2, r0
 800d91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d91e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d922:	691b      	ldr	r3, [r3, #16]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00f      	beq.n	800d948 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92a:	3310      	adds	r3, #16
 800d92c:	4618      	mov	r0, r3
 800d92e:	f000 ff13 	bl	800e758 <xTaskRemoveFromEventList>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d007      	beq.n	800d948 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d938:	4b54      	ldr	r3, [pc, #336]	@ (800da8c <xQueueSemaphoreTake+0x21c>)
 800d93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d93e:	601a      	str	r2, [r3, #0]
 800d940:	f3bf 8f4f 	dsb	sy
 800d944:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d948:	f002 f980 	bl	800fc4c <vPortExitCritical>
				return pdPASS;
 800d94c:	2301      	movs	r3, #1
 800d94e:	e098      	b.n	800da82 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d112      	bne.n	800d97c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d00b      	beq.n	800d974 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d960:	f383 8811 	msr	BASEPRI, r3
 800d964:	f3bf 8f6f 	isb	sy
 800d968:	f3bf 8f4f 	dsb	sy
 800d96c:	617b      	str	r3, [r7, #20]
}
 800d96e:	bf00      	nop
 800d970:	bf00      	nop
 800d972:	e7fd      	b.n	800d970 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d974:	f002 f96a 	bl	800fc4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d978:	2300      	movs	r3, #0
 800d97a:	e082      	b.n	800da82 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d97c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d106      	bne.n	800d990 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d982:	f107 030c 	add.w	r3, r7, #12
 800d986:	4618      	mov	r0, r3
 800d988:	f000 ff4a 	bl	800e820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d98c:	2301      	movs	r3, #1
 800d98e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d990:	f002 f95c 	bl	800fc4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d994:	f000 fcb2 	bl	800e2fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d998:	f002 f926 	bl	800fbe8 <vPortEnterCritical>
 800d99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d99e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9a2:	b25b      	sxtb	r3, r3
 800d9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9a8:	d103      	bne.n	800d9b2 <xQueueSemaphoreTake+0x142>
 800d9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d9b8:	b25b      	sxtb	r3, r3
 800d9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9be:	d103      	bne.n	800d9c8 <xQueueSemaphoreTake+0x158>
 800d9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d9c8:	f002 f940 	bl	800fc4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9cc:	463a      	mov	r2, r7
 800d9ce:	f107 030c 	add.w	r3, r7, #12
 800d9d2:	4611      	mov	r1, r2
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f000 ff39 	bl	800e84c <xTaskCheckForTimeOut>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d132      	bne.n	800da46 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9e2:	f000 f9d1 	bl	800dd88 <prvIsQueueEmpty>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d026      	beq.n	800da3a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d109      	bne.n	800da08 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d9f4:	f002 f8f8 	bl	800fbe8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f001 f89f 	bl	800eb40 <xTaskPriorityInherit>
 800da02:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800da04:	f002 f922 	bl	800fc4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da0a:	3324      	adds	r3, #36	@ 0x24
 800da0c:	683a      	ldr	r2, [r7, #0]
 800da0e:	4611      	mov	r1, r2
 800da10:	4618      	mov	r0, r3
 800da12:	f000 fe4f 	bl	800e6b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da18:	f000 f964 	bl	800dce4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da1c:	f000 fc7c 	bl	800e318 <xTaskResumeAll>
 800da20:	4603      	mov	r3, r0
 800da22:	2b00      	cmp	r3, #0
 800da24:	f47f af67 	bne.w	800d8f6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800da28:	4b18      	ldr	r3, [pc, #96]	@ (800da8c <xQueueSemaphoreTake+0x21c>)
 800da2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da2e:	601a      	str	r2, [r3, #0]
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	e75d      	b.n	800d8f6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800da3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da3c:	f000 f952 	bl	800dce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da40:	f000 fc6a 	bl	800e318 <xTaskResumeAll>
 800da44:	e757      	b.n	800d8f6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800da46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da48:	f000 f94c 	bl	800dce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da4c:	f000 fc64 	bl	800e318 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da52:	f000 f999 	bl	800dd88 <prvIsQueueEmpty>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f43f af4c 	beq.w	800d8f6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800da5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da60:	2b00      	cmp	r3, #0
 800da62:	d00d      	beq.n	800da80 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800da64:	f002 f8c0 	bl	800fbe8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800da68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da6a:	f000 f893 	bl	800db94 <prvGetDisinheritPriorityAfterTimeout>
 800da6e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800da70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da76:	4618      	mov	r0, r3
 800da78:	f001 f93a 	bl	800ecf0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800da7c:	f002 f8e6 	bl	800fc4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da82:	4618      	mov	r0, r3
 800da84:	3738      	adds	r7, #56	@ 0x38
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	e000ed04 	.word	0xe000ed04

0800da90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b08e      	sub	sp, #56	@ 0x38
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800daa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d10b      	bne.n	800dabe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800daa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daaa:	f383 8811 	msr	BASEPRI, r3
 800daae:	f3bf 8f6f 	isb	sy
 800dab2:	f3bf 8f4f 	dsb	sy
 800dab6:	623b      	str	r3, [r7, #32]
}
 800dab8:	bf00      	nop
 800daba:	bf00      	nop
 800dabc:	e7fd      	b.n	800daba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d103      	bne.n	800dacc <xQueueReceiveFromISR+0x3c>
 800dac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d101      	bne.n	800dad0 <xQueueReceiveFromISR+0x40>
 800dacc:	2301      	movs	r3, #1
 800dace:	e000      	b.n	800dad2 <xQueueReceiveFromISR+0x42>
 800dad0:	2300      	movs	r3, #0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d10b      	bne.n	800daee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800dad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dada:	f383 8811 	msr	BASEPRI, r3
 800dade:	f3bf 8f6f 	isb	sy
 800dae2:	f3bf 8f4f 	dsb	sy
 800dae6:	61fb      	str	r3, [r7, #28]
}
 800dae8:	bf00      	nop
 800daea:	bf00      	nop
 800daec:	e7fd      	b.n	800daea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800daee:	f002 f95b 	bl	800fda8 <vPortValidateInterruptPriority>
	__asm volatile
 800daf2:	f3ef 8211 	mrs	r2, BASEPRI
 800daf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dafa:	f383 8811 	msr	BASEPRI, r3
 800dafe:	f3bf 8f6f 	isb	sy
 800db02:	f3bf 8f4f 	dsb	sy
 800db06:	61ba      	str	r2, [r7, #24]
 800db08:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800db0a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db12:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db16:	2b00      	cmp	r3, #0
 800db18:	d02f      	beq.n	800db7a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800db1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db24:	68b9      	ldr	r1, [r7, #8]
 800db26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800db28:	f000 f8b6 	bl	800dc98 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db2e:	1e5a      	subs	r2, r3, #1
 800db30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db32:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800db34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800db38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db3c:	d112      	bne.n	800db64 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db40:	691b      	ldr	r3, [r3, #16]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d016      	beq.n	800db74 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db48:	3310      	adds	r3, #16
 800db4a:	4618      	mov	r0, r3
 800db4c:	f000 fe04 	bl	800e758 <xTaskRemoveFromEventList>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00e      	beq.n	800db74 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d00b      	beq.n	800db74 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	601a      	str	r2, [r3, #0]
 800db62:	e007      	b.n	800db74 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800db64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db68:	3301      	adds	r3, #1
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	b25a      	sxtb	r2, r3
 800db6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800db74:	2301      	movs	r3, #1
 800db76:	637b      	str	r3, [r7, #52]	@ 0x34
 800db78:	e001      	b.n	800db7e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800db7a:	2300      	movs	r3, #0
 800db7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800db7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db80:	613b      	str	r3, [r7, #16]
	__asm volatile
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	f383 8811 	msr	BASEPRI, r3
}
 800db88:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3738      	adds	r7, #56	@ 0x38
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800db94:	b480      	push	{r7}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d006      	beq.n	800dbb2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800dbae:	60fb      	str	r3, [r7, #12]
 800dbb0:	e001      	b.n	800dbb6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
	}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3714      	adds	r7, #20
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b086      	sub	sp, #24
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d10d      	bne.n	800dbfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d14d      	bne.n	800dc86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	689b      	ldr	r3, [r3, #8]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f001 f80e 	bl	800ec10 <xTaskPriorityDisinherit>
 800dbf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	609a      	str	r2, [r3, #8]
 800dbfc:	e043      	b.n	800dc86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d119      	bne.n	800dc38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6858      	ldr	r0, [r3, #4]
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	68b9      	ldr	r1, [r7, #8]
 800dc10:	f003 fa2d 	bl	801106e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	685a      	ldr	r2, [r3, #4]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc1c:	441a      	add	r2, r3
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	685a      	ldr	r2, [r3, #4]
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	689b      	ldr	r3, [r3, #8]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d32b      	bcc.n	800dc86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	605a      	str	r2, [r3, #4]
 800dc36:	e026      	b.n	800dc86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	68d8      	ldr	r0, [r3, #12]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc40:	461a      	mov	r2, r3
 800dc42:	68b9      	ldr	r1, [r7, #8]
 800dc44:	f003 fa13 	bl	801106e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	68da      	ldr	r2, [r3, #12]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc50:	425b      	negs	r3, r3
 800dc52:	441a      	add	r2, r3
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	68da      	ldr	r2, [r3, #12]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d207      	bcs.n	800dc74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	689a      	ldr	r2, [r3, #8]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc6c:	425b      	negs	r3, r3
 800dc6e:	441a      	add	r2, r3
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2b02      	cmp	r3, #2
 800dc78:	d105      	bne.n	800dc86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d002      	beq.n	800dc86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	3b01      	subs	r3, #1
 800dc84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	1c5a      	adds	r2, r3, #1
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dc8e:	697b      	ldr	r3, [r7, #20]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3718      	adds	r7, #24
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d018      	beq.n	800dcdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	68da      	ldr	r2, [r3, #12]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcb2:	441a      	add	r2, r3
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	68da      	ldr	r2, [r3, #12]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	689b      	ldr	r3, [r3, #8]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d303      	bcc.n	800dccc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	68d9      	ldr	r1, [r3, #12]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	6838      	ldr	r0, [r7, #0]
 800dcd8:	f003 f9c9 	bl	801106e <memcpy>
	}
}
 800dcdc:	bf00      	nop
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b084      	sub	sp, #16
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dcec:	f001 ff7c 	bl	800fbe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dcf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dcf8:	e011      	b.n	800dd1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d012      	beq.n	800dd28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	3324      	adds	r3, #36	@ 0x24
 800dd06:	4618      	mov	r0, r3
 800dd08:	f000 fd26 	bl	800e758 <xTaskRemoveFromEventList>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d001      	beq.n	800dd16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd12:	f000 fdff 	bl	800e914 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd16:	7bfb      	ldrb	r3, [r7, #15]
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	dce9      	bgt.n	800dcfa <prvUnlockQueue+0x16>
 800dd26:	e000      	b.n	800dd2a <prvUnlockQueue+0x46>
					break;
 800dd28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	22ff      	movs	r2, #255	@ 0xff
 800dd2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dd32:	f001 ff8b 	bl	800fc4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dd36:	f001 ff57 	bl	800fbe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd42:	e011      	b.n	800dd68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	691b      	ldr	r3, [r3, #16]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d012      	beq.n	800dd72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	3310      	adds	r3, #16
 800dd50:	4618      	mov	r0, r3
 800dd52:	f000 fd01 	bl	800e758 <xTaskRemoveFromEventList>
 800dd56:	4603      	mov	r3, r0
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d001      	beq.n	800dd60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dd5c:	f000 fdda 	bl	800e914 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dd60:	7bbb      	ldrb	r3, [r7, #14]
 800dd62:	3b01      	subs	r3, #1
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	dce9      	bgt.n	800dd44 <prvUnlockQueue+0x60>
 800dd70:	e000      	b.n	800dd74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dd72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	22ff      	movs	r2, #255	@ 0xff
 800dd78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800dd7c:	f001 ff66 	bl	800fc4c <vPortExitCritical>
}
 800dd80:	bf00      	nop
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd90:	f001 ff2a 	bl	800fbe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d102      	bne.n	800dda2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	60fb      	str	r3, [r7, #12]
 800dda0:	e001      	b.n	800dda6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dda2:	2300      	movs	r3, #0
 800dda4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dda6:	f001 ff51 	bl	800fc4c <vPortExitCritical>

	return xReturn;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ddbc:	f001 ff14 	bl	800fbe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d102      	bne.n	800ddd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ddcc:	2301      	movs	r3, #1
 800ddce:	60fb      	str	r3, [r7, #12]
 800ddd0:	e001      	b.n	800ddd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ddd6:	f001 ff39 	bl	800fc4c <vPortExitCritical>

	return xReturn;
 800ddda:	68fb      	ldr	r3, [r7, #12]
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3710      	adds	r7, #16
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ddee:	2300      	movs	r3, #0
 800ddf0:	60fb      	str	r3, [r7, #12]
 800ddf2:	e014      	b.n	800de1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ddf4:	4a0f      	ldr	r2, [pc, #60]	@ (800de34 <vQueueAddToRegistry+0x50>)
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d10b      	bne.n	800de18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800de00:	490c      	ldr	r1, [pc, #48]	@ (800de34 <vQueueAddToRegistry+0x50>)
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	683a      	ldr	r2, [r7, #0]
 800de06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de0a:	4a0a      	ldr	r2, [pc, #40]	@ (800de34 <vQueueAddToRegistry+0x50>)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	00db      	lsls	r3, r3, #3
 800de10:	4413      	add	r3, r2
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800de16:	e006      	b.n	800de26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	3301      	adds	r3, #1
 800de1c:	60fb      	str	r3, [r7, #12]
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2b07      	cmp	r3, #7
 800de22:	d9e7      	bls.n	800ddf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800de24:	bf00      	nop
 800de26:	bf00      	nop
 800de28:	3714      	adds	r7, #20
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr
 800de32:	bf00      	nop
 800de34:	20000b38 	.word	0x20000b38

0800de38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b086      	sub	sp, #24
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800de48:	f001 fece 	bl	800fbe8 <vPortEnterCritical>
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de52:	b25b      	sxtb	r3, r3
 800de54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de58:	d103      	bne.n	800de62 <vQueueWaitForMessageRestricted+0x2a>
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	2200      	movs	r2, #0
 800de5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de68:	b25b      	sxtb	r3, r3
 800de6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de6e:	d103      	bne.n	800de78 <vQueueWaitForMessageRestricted+0x40>
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	2200      	movs	r2, #0
 800de74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de78:	f001 fee8 	bl	800fc4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de80:	2b00      	cmp	r3, #0
 800de82:	d106      	bne.n	800de92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	3324      	adds	r3, #36	@ 0x24
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	68b9      	ldr	r1, [r7, #8]
 800de8c:	4618      	mov	r0, r3
 800de8e:	f000 fc37 	bl	800e700 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800de92:	6978      	ldr	r0, [r7, #20]
 800de94:	f7ff ff26 	bl	800dce4 <prvUnlockQueue>
	}
 800de98:	bf00      	nop
 800de9a:	3718      	adds	r7, #24
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b08e      	sub	sp, #56	@ 0x38
 800dea4:	af04      	add	r7, sp, #16
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	607a      	str	r2, [r7, #4]
 800deac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800deae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d10b      	bne.n	800decc <xTaskCreateStatic+0x2c>
	__asm volatile
 800deb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb8:	f383 8811 	msr	BASEPRI, r3
 800debc:	f3bf 8f6f 	isb	sy
 800dec0:	f3bf 8f4f 	dsb	sy
 800dec4:	623b      	str	r3, [r7, #32]
}
 800dec6:	bf00      	nop
 800dec8:	bf00      	nop
 800deca:	e7fd      	b.n	800dec8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800decc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d10b      	bne.n	800deea <xTaskCreateStatic+0x4a>
	__asm volatile
 800ded2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded6:	f383 8811 	msr	BASEPRI, r3
 800deda:	f3bf 8f6f 	isb	sy
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	61fb      	str	r3, [r7, #28]
}
 800dee4:	bf00      	nop
 800dee6:	bf00      	nop
 800dee8:	e7fd      	b.n	800dee6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800deea:	23a8      	movs	r3, #168	@ 0xa8
 800deec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	2ba8      	cmp	r3, #168	@ 0xa8
 800def2:	d00b      	beq.n	800df0c <xTaskCreateStatic+0x6c>
	__asm volatile
 800def4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def8:	f383 8811 	msr	BASEPRI, r3
 800defc:	f3bf 8f6f 	isb	sy
 800df00:	f3bf 8f4f 	dsb	sy
 800df04:	61bb      	str	r3, [r7, #24]
}
 800df06:	bf00      	nop
 800df08:	bf00      	nop
 800df0a:	e7fd      	b.n	800df08 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df10:	2b00      	cmp	r3, #0
 800df12:	d01e      	beq.n	800df52 <xTaskCreateStatic+0xb2>
 800df14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df16:	2b00      	cmp	r3, #0
 800df18:	d01b      	beq.n	800df52 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df1c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df22:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800df24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df26:	2202      	movs	r2, #2
 800df28:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800df2c:	2300      	movs	r3, #0
 800df2e:	9303      	str	r3, [sp, #12]
 800df30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df32:	9302      	str	r3, [sp, #8]
 800df34:	f107 0314 	add.w	r3, r7, #20
 800df38:	9301      	str	r3, [sp, #4]
 800df3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df3c:	9300      	str	r3, [sp, #0]
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	687a      	ldr	r2, [r7, #4]
 800df42:	68b9      	ldr	r1, [r7, #8]
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f000 f851 	bl	800dfec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800df4c:	f000 f8f6 	bl	800e13c <prvAddNewTaskToReadyList>
 800df50:	e001      	b.n	800df56 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800df52:	2300      	movs	r3, #0
 800df54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800df56:	697b      	ldr	r3, [r7, #20]
	}
 800df58:	4618      	mov	r0, r3
 800df5a:	3728      	adds	r7, #40	@ 0x28
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800df60:	b580      	push	{r7, lr}
 800df62:	b08c      	sub	sp, #48	@ 0x30
 800df64:	af04      	add	r7, sp, #16
 800df66:	60f8      	str	r0, [r7, #12]
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	603b      	str	r3, [r7, #0]
 800df6c:	4613      	mov	r3, r2
 800df6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800df70:	88fb      	ldrh	r3, [r7, #6]
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	4618      	mov	r0, r3
 800df76:	f001 ff59 	bl	800fe2c <pvPortMalloc>
 800df7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d00e      	beq.n	800dfa0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800df82:	20a8      	movs	r0, #168	@ 0xa8
 800df84:	f001 ff52 	bl	800fe2c <pvPortMalloc>
 800df88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d003      	beq.n	800df98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800df90:	69fb      	ldr	r3, [r7, #28]
 800df92:	697a      	ldr	r2, [r7, #20]
 800df94:	631a      	str	r2, [r3, #48]	@ 0x30
 800df96:	e005      	b.n	800dfa4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800df98:	6978      	ldr	r0, [r7, #20]
 800df9a:	f002 f815 	bl	800ffc8 <vPortFree>
 800df9e:	e001      	b.n	800dfa4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dfa4:	69fb      	ldr	r3, [r7, #28]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d017      	beq.n	800dfda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dfaa:	69fb      	ldr	r3, [r7, #28]
 800dfac:	2200      	movs	r2, #0
 800dfae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dfb2:	88fa      	ldrh	r2, [r7, #6]
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	9303      	str	r3, [sp, #12]
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	9302      	str	r3, [sp, #8]
 800dfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfbe:	9301      	str	r3, [sp, #4]
 800dfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfc2:	9300      	str	r3, [sp, #0]
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	68b9      	ldr	r1, [r7, #8]
 800dfc8:	68f8      	ldr	r0, [r7, #12]
 800dfca:	f000 f80f 	bl	800dfec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfce:	69f8      	ldr	r0, [r7, #28]
 800dfd0:	f000 f8b4 	bl	800e13c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	61bb      	str	r3, [r7, #24]
 800dfd8:	e002      	b.n	800dfe0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dfda:	f04f 33ff 	mov.w	r3, #4294967295
 800dfde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dfe0:	69bb      	ldr	r3, [r7, #24]
	}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3720      	adds	r7, #32
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
	...

0800dfec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b088      	sub	sp, #32
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	607a      	str	r2, [r7, #4]
 800dff8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dffc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	461a      	mov	r2, r3
 800e004:	21a5      	movs	r1, #165	@ 0xa5
 800e006:	f002 ff58 	bl	8010eba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e00c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e014:	3b01      	subs	r3, #1
 800e016:	009b      	lsls	r3, r3, #2
 800e018:	4413      	add	r3, r2
 800e01a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e01c:	69bb      	ldr	r3, [r7, #24]
 800e01e:	f023 0307 	bic.w	r3, r3, #7
 800e022:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	f003 0307 	and.w	r3, r3, #7
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00b      	beq.n	800e046 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e032:	f383 8811 	msr	BASEPRI, r3
 800e036:	f3bf 8f6f 	isb	sy
 800e03a:	f3bf 8f4f 	dsb	sy
 800e03e:	617b      	str	r3, [r7, #20]
}
 800e040:	bf00      	nop
 800e042:	bf00      	nop
 800e044:	e7fd      	b.n	800e042 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d01f      	beq.n	800e08c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e04c:	2300      	movs	r3, #0
 800e04e:	61fb      	str	r3, [r7, #28]
 800e050:	e012      	b.n	800e078 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e052:	68ba      	ldr	r2, [r7, #8]
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	4413      	add	r3, r2
 800e058:	7819      	ldrb	r1, [r3, #0]
 800e05a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e05c:	69fb      	ldr	r3, [r7, #28]
 800e05e:	4413      	add	r3, r2
 800e060:	3334      	adds	r3, #52	@ 0x34
 800e062:	460a      	mov	r2, r1
 800e064:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e066:	68ba      	ldr	r2, [r7, #8]
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	4413      	add	r3, r2
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d006      	beq.n	800e080 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e072:	69fb      	ldr	r3, [r7, #28]
 800e074:	3301      	adds	r3, #1
 800e076:	61fb      	str	r3, [r7, #28]
 800e078:	69fb      	ldr	r3, [r7, #28]
 800e07a:	2b0f      	cmp	r3, #15
 800e07c:	d9e9      	bls.n	800e052 <prvInitialiseNewTask+0x66>
 800e07e:	e000      	b.n	800e082 <prvInitialiseNewTask+0x96>
			{
				break;
 800e080:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e084:	2200      	movs	r2, #0
 800e086:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e08a:	e003      	b.n	800e094 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e08e:	2200      	movs	r2, #0
 800e090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e096:	2b37      	cmp	r3, #55	@ 0x37
 800e098:	d901      	bls.n	800e09e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e09a:	2337      	movs	r3, #55	@ 0x37
 800e09c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e0a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e0a8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b2:	3304      	adds	r3, #4
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7fe fec7 	bl	800ce48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0bc:	3318      	adds	r3, #24
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7fe fec2 	bl	800ce48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0dc:	2200      	movs	r2, #0
 800e0de:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ec:	3354      	adds	r3, #84	@ 0x54
 800e0ee:	224c      	movs	r2, #76	@ 0x4c
 800e0f0:	2100      	movs	r1, #0
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f002 fee1 	bl	8010eba <memset>
 800e0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0fa:	4a0d      	ldr	r2, [pc, #52]	@ (800e130 <prvInitialiseNewTask+0x144>)
 800e0fc:	659a      	str	r2, [r3, #88]	@ 0x58
 800e0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e100:	4a0c      	ldr	r2, [pc, #48]	@ (800e134 <prvInitialiseNewTask+0x148>)
 800e102:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e106:	4a0c      	ldr	r2, [pc, #48]	@ (800e138 <prvInitialiseNewTask+0x14c>)
 800e108:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e10a:	683a      	ldr	r2, [r7, #0]
 800e10c:	68f9      	ldr	r1, [r7, #12]
 800e10e:	69b8      	ldr	r0, [r7, #24]
 800e110:	f001 fc3c 	bl	800f98c <pxPortInitialiseStack>
 800e114:	4602      	mov	r2, r0
 800e116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e118:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d002      	beq.n	800e126 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e126:	bf00      	nop
 800e128:	3720      	adds	r7, #32
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	2000aba4 	.word	0x2000aba4
 800e134:	2000ac0c 	.word	0x2000ac0c
 800e138:	2000ac74 	.word	0x2000ac74

0800e13c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b082      	sub	sp, #8
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e144:	f001 fd50 	bl	800fbe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e148:	4b2d      	ldr	r3, [pc, #180]	@ (800e200 <prvAddNewTaskToReadyList+0xc4>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	3301      	adds	r3, #1
 800e14e:	4a2c      	ldr	r2, [pc, #176]	@ (800e200 <prvAddNewTaskToReadyList+0xc4>)
 800e150:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e152:	4b2c      	ldr	r3, [pc, #176]	@ (800e204 <prvAddNewTaskToReadyList+0xc8>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d109      	bne.n	800e16e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e15a:	4a2a      	ldr	r2, [pc, #168]	@ (800e204 <prvAddNewTaskToReadyList+0xc8>)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e160:	4b27      	ldr	r3, [pc, #156]	@ (800e200 <prvAddNewTaskToReadyList+0xc4>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d110      	bne.n	800e18a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e168:	f000 fbf8 	bl	800e95c <prvInitialiseTaskLists>
 800e16c:	e00d      	b.n	800e18a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e16e:	4b26      	ldr	r3, [pc, #152]	@ (800e208 <prvAddNewTaskToReadyList+0xcc>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d109      	bne.n	800e18a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e176:	4b23      	ldr	r3, [pc, #140]	@ (800e204 <prvAddNewTaskToReadyList+0xc8>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e180:	429a      	cmp	r2, r3
 800e182:	d802      	bhi.n	800e18a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e184:	4a1f      	ldr	r2, [pc, #124]	@ (800e204 <prvAddNewTaskToReadyList+0xc8>)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e18a:	4b20      	ldr	r3, [pc, #128]	@ (800e20c <prvAddNewTaskToReadyList+0xd0>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	3301      	adds	r3, #1
 800e190:	4a1e      	ldr	r2, [pc, #120]	@ (800e20c <prvAddNewTaskToReadyList+0xd0>)
 800e192:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e194:	4b1d      	ldr	r3, [pc, #116]	@ (800e20c <prvAddNewTaskToReadyList+0xd0>)
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1a0:	4b1b      	ldr	r3, [pc, #108]	@ (800e210 <prvAddNewTaskToReadyList+0xd4>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d903      	bls.n	800e1b0 <prvAddNewTaskToReadyList+0x74>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ac:	4a18      	ldr	r2, [pc, #96]	@ (800e210 <prvAddNewTaskToReadyList+0xd4>)
 800e1ae:	6013      	str	r3, [r2, #0]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1b4:	4613      	mov	r3, r2
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	4413      	add	r3, r2
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	4a15      	ldr	r2, [pc, #84]	@ (800e214 <prvAddNewTaskToReadyList+0xd8>)
 800e1be:	441a      	add	r2, r3
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	3304      	adds	r3, #4
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	4610      	mov	r0, r2
 800e1c8:	f7fe fe4b 	bl	800ce62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e1cc:	f001 fd3e 	bl	800fc4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e1d0:	4b0d      	ldr	r3, [pc, #52]	@ (800e208 <prvAddNewTaskToReadyList+0xcc>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d00e      	beq.n	800e1f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e1d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e204 <prvAddNewTaskToReadyList+0xc8>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d207      	bcs.n	800e1f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e1e6:	4b0c      	ldr	r3, [pc, #48]	@ (800e218 <prvAddNewTaskToReadyList+0xdc>)
 800e1e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1ec:	601a      	str	r2, [r3, #0]
 800e1ee:	f3bf 8f4f 	dsb	sy
 800e1f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1f6:	bf00      	nop
 800e1f8:	3708      	adds	r7, #8
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	2000104c 	.word	0x2000104c
 800e204:	20000b78 	.word	0x20000b78
 800e208:	20001058 	.word	0x20001058
 800e20c:	20001068 	.word	0x20001068
 800e210:	20001054 	.word	0x20001054
 800e214:	20000b7c 	.word	0x20000b7c
 800e218:	e000ed04 	.word	0xe000ed04

0800e21c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b08a      	sub	sp, #40	@ 0x28
 800e220:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e222:	2300      	movs	r3, #0
 800e224:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e226:	2300      	movs	r3, #0
 800e228:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e22a:	463a      	mov	r2, r7
 800e22c:	1d39      	adds	r1, r7, #4
 800e22e:	f107 0308 	add.w	r3, r7, #8
 800e232:	4618      	mov	r0, r3
 800e234:	f7fe fdb4 	bl	800cda0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e238:	6839      	ldr	r1, [r7, #0]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	68ba      	ldr	r2, [r7, #8]
 800e23e:	9202      	str	r2, [sp, #8]
 800e240:	9301      	str	r3, [sp, #4]
 800e242:	2300      	movs	r3, #0
 800e244:	9300      	str	r3, [sp, #0]
 800e246:	2300      	movs	r3, #0
 800e248:	460a      	mov	r2, r1
 800e24a:	4924      	ldr	r1, [pc, #144]	@ (800e2dc <vTaskStartScheduler+0xc0>)
 800e24c:	4824      	ldr	r0, [pc, #144]	@ (800e2e0 <vTaskStartScheduler+0xc4>)
 800e24e:	f7ff fe27 	bl	800dea0 <xTaskCreateStatic>
 800e252:	4603      	mov	r3, r0
 800e254:	4a23      	ldr	r2, [pc, #140]	@ (800e2e4 <vTaskStartScheduler+0xc8>)
 800e256:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e258:	4b22      	ldr	r3, [pc, #136]	@ (800e2e4 <vTaskStartScheduler+0xc8>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d002      	beq.n	800e266 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e260:	2301      	movs	r3, #1
 800e262:	617b      	str	r3, [r7, #20]
 800e264:	e001      	b.n	800e26a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e266:	2300      	movs	r3, #0
 800e268:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d102      	bne.n	800e276 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e270:	f001 f832 	bl	800f2d8 <xTimerCreateTimerTask>
 800e274:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d11b      	bne.n	800e2b4 <vTaskStartScheduler+0x98>
	__asm volatile
 800e27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e280:	f383 8811 	msr	BASEPRI, r3
 800e284:	f3bf 8f6f 	isb	sy
 800e288:	f3bf 8f4f 	dsb	sy
 800e28c:	613b      	str	r3, [r7, #16]
}
 800e28e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e290:	4b15      	ldr	r3, [pc, #84]	@ (800e2e8 <vTaskStartScheduler+0xcc>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	3354      	adds	r3, #84	@ 0x54
 800e296:	4a15      	ldr	r2, [pc, #84]	@ (800e2ec <vTaskStartScheduler+0xd0>)
 800e298:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e29a:	4b15      	ldr	r3, [pc, #84]	@ (800e2f0 <vTaskStartScheduler+0xd4>)
 800e29c:	f04f 32ff 	mov.w	r2, #4294967295
 800e2a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e2a2:	4b14      	ldr	r3, [pc, #80]	@ (800e2f4 <vTaskStartScheduler+0xd8>)
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e2a8:	4b13      	ldr	r3, [pc, #76]	@ (800e2f8 <vTaskStartScheduler+0xdc>)
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e2ae:	f001 fbf7 	bl	800faa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e2b2:	e00f      	b.n	800e2d4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ba:	d10b      	bne.n	800e2d4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c0:	f383 8811 	msr	BASEPRI, r3
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	60fb      	str	r3, [r7, #12]
}
 800e2ce:	bf00      	nop
 800e2d0:	bf00      	nop
 800e2d2:	e7fd      	b.n	800e2d0 <vTaskStartScheduler+0xb4>
}
 800e2d4:	bf00      	nop
 800e2d6:	3718      	adds	r7, #24
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	08011cc8 	.word	0x08011cc8
 800e2e0:	0800e92d 	.word	0x0800e92d
 800e2e4:	20001070 	.word	0x20001070
 800e2e8:	20000b78 	.word	0x20000b78
 800e2ec:	20000118 	.word	0x20000118
 800e2f0:	2000106c 	.word	0x2000106c
 800e2f4:	20001058 	.word	0x20001058
 800e2f8:	20001050 	.word	0x20001050

0800e2fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e300:	4b04      	ldr	r3, [pc, #16]	@ (800e314 <vTaskSuspendAll+0x18>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	3301      	adds	r3, #1
 800e306:	4a03      	ldr	r2, [pc, #12]	@ (800e314 <vTaskSuspendAll+0x18>)
 800e308:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e30a:	bf00      	nop
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr
 800e314:	20001074 	.word	0x20001074

0800e318 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e31e:	2300      	movs	r3, #0
 800e320:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e322:	2300      	movs	r3, #0
 800e324:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e326:	4b42      	ldr	r3, [pc, #264]	@ (800e430 <xTaskResumeAll+0x118>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d10b      	bne.n	800e346 <xTaskResumeAll+0x2e>
	__asm volatile
 800e32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e332:	f383 8811 	msr	BASEPRI, r3
 800e336:	f3bf 8f6f 	isb	sy
 800e33a:	f3bf 8f4f 	dsb	sy
 800e33e:	603b      	str	r3, [r7, #0]
}
 800e340:	bf00      	nop
 800e342:	bf00      	nop
 800e344:	e7fd      	b.n	800e342 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e346:	f001 fc4f 	bl	800fbe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e34a:	4b39      	ldr	r3, [pc, #228]	@ (800e430 <xTaskResumeAll+0x118>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	3b01      	subs	r3, #1
 800e350:	4a37      	ldr	r2, [pc, #220]	@ (800e430 <xTaskResumeAll+0x118>)
 800e352:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e354:	4b36      	ldr	r3, [pc, #216]	@ (800e430 <xTaskResumeAll+0x118>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d162      	bne.n	800e422 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e35c:	4b35      	ldr	r3, [pc, #212]	@ (800e434 <xTaskResumeAll+0x11c>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d05e      	beq.n	800e422 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e364:	e02f      	b.n	800e3c6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e366:	4b34      	ldr	r3, [pc, #208]	@ (800e438 <xTaskResumeAll+0x120>)
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	3318      	adds	r3, #24
 800e372:	4618      	mov	r0, r3
 800e374:	f7fe fdd2 	bl	800cf1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	3304      	adds	r3, #4
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7fe fdcd 	bl	800cf1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e386:	4b2d      	ldr	r3, [pc, #180]	@ (800e43c <xTaskResumeAll+0x124>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d903      	bls.n	800e396 <xTaskResumeAll+0x7e>
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e392:	4a2a      	ldr	r2, [pc, #168]	@ (800e43c <xTaskResumeAll+0x124>)
 800e394:	6013      	str	r3, [r2, #0]
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e39a:	4613      	mov	r3, r2
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	4413      	add	r3, r2
 800e3a0:	009b      	lsls	r3, r3, #2
 800e3a2:	4a27      	ldr	r2, [pc, #156]	@ (800e440 <xTaskResumeAll+0x128>)
 800e3a4:	441a      	add	r2, r3
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	3304      	adds	r3, #4
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	4610      	mov	r0, r2
 800e3ae:	f7fe fd58 	bl	800ce62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3b6:	4b23      	ldr	r3, [pc, #140]	@ (800e444 <xTaskResumeAll+0x12c>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d302      	bcc.n	800e3c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e3c0:	4b21      	ldr	r3, [pc, #132]	@ (800e448 <xTaskResumeAll+0x130>)
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3c6:	4b1c      	ldr	r3, [pc, #112]	@ (800e438 <xTaskResumeAll+0x120>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d1cb      	bne.n	800e366 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d001      	beq.n	800e3d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e3d4:	f000 fb66 	bl	800eaa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e3d8:	4b1c      	ldr	r3, [pc, #112]	@ (800e44c <xTaskResumeAll+0x134>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d010      	beq.n	800e406 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e3e4:	f000 f846 	bl	800e474 <xTaskIncrementTick>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d002      	beq.n	800e3f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e3ee:	4b16      	ldr	r3, [pc, #88]	@ (800e448 <xTaskResumeAll+0x130>)
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	3b01      	subs	r3, #1
 800e3f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d1f1      	bne.n	800e3e4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e400:	4b12      	ldr	r3, [pc, #72]	@ (800e44c <xTaskResumeAll+0x134>)
 800e402:	2200      	movs	r2, #0
 800e404:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e406:	4b10      	ldr	r3, [pc, #64]	@ (800e448 <xTaskResumeAll+0x130>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d009      	beq.n	800e422 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e40e:	2301      	movs	r3, #1
 800e410:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e412:	4b0f      	ldr	r3, [pc, #60]	@ (800e450 <xTaskResumeAll+0x138>)
 800e414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e418:	601a      	str	r2, [r3, #0]
 800e41a:	f3bf 8f4f 	dsb	sy
 800e41e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e422:	f001 fc13 	bl	800fc4c <vPortExitCritical>

	return xAlreadyYielded;
 800e426:	68bb      	ldr	r3, [r7, #8]
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3710      	adds	r7, #16
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	20001074 	.word	0x20001074
 800e434:	2000104c 	.word	0x2000104c
 800e438:	2000100c 	.word	0x2000100c
 800e43c:	20001054 	.word	0x20001054
 800e440:	20000b7c 	.word	0x20000b7c
 800e444:	20000b78 	.word	0x20000b78
 800e448:	20001060 	.word	0x20001060
 800e44c:	2000105c 	.word	0x2000105c
 800e450:	e000ed04 	.word	0xe000ed04

0800e454 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e454:	b480      	push	{r7}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e45a:	4b05      	ldr	r3, [pc, #20]	@ (800e470 <xTaskGetTickCount+0x1c>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e460:	687b      	ldr	r3, [r7, #4]
}
 800e462:	4618      	mov	r0, r3
 800e464:	370c      	adds	r7, #12
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop
 800e470:	20001050 	.word	0x20001050

0800e474 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e47a:	2300      	movs	r3, #0
 800e47c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e47e:	4b4f      	ldr	r3, [pc, #316]	@ (800e5bc <xTaskIncrementTick+0x148>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	f040 8090 	bne.w	800e5a8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e488:	4b4d      	ldr	r3, [pc, #308]	@ (800e5c0 <xTaskIncrementTick+0x14c>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	3301      	adds	r3, #1
 800e48e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e490:	4a4b      	ldr	r2, [pc, #300]	@ (800e5c0 <xTaskIncrementTick+0x14c>)
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d121      	bne.n	800e4e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e49c:	4b49      	ldr	r3, [pc, #292]	@ (800e5c4 <xTaskIncrementTick+0x150>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00b      	beq.n	800e4be <xTaskIncrementTick+0x4a>
	__asm volatile
 800e4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4aa:	f383 8811 	msr	BASEPRI, r3
 800e4ae:	f3bf 8f6f 	isb	sy
 800e4b2:	f3bf 8f4f 	dsb	sy
 800e4b6:	603b      	str	r3, [r7, #0]
}
 800e4b8:	bf00      	nop
 800e4ba:	bf00      	nop
 800e4bc:	e7fd      	b.n	800e4ba <xTaskIncrementTick+0x46>
 800e4be:	4b41      	ldr	r3, [pc, #260]	@ (800e5c4 <xTaskIncrementTick+0x150>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	60fb      	str	r3, [r7, #12]
 800e4c4:	4b40      	ldr	r3, [pc, #256]	@ (800e5c8 <xTaskIncrementTick+0x154>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	4a3e      	ldr	r2, [pc, #248]	@ (800e5c4 <xTaskIncrementTick+0x150>)
 800e4ca:	6013      	str	r3, [r2, #0]
 800e4cc:	4a3e      	ldr	r2, [pc, #248]	@ (800e5c8 <xTaskIncrementTick+0x154>)
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	6013      	str	r3, [r2, #0]
 800e4d2:	4b3e      	ldr	r3, [pc, #248]	@ (800e5cc <xTaskIncrementTick+0x158>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	4a3c      	ldr	r2, [pc, #240]	@ (800e5cc <xTaskIncrementTick+0x158>)
 800e4da:	6013      	str	r3, [r2, #0]
 800e4dc:	f000 fae2 	bl	800eaa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e4e0:	4b3b      	ldr	r3, [pc, #236]	@ (800e5d0 <xTaskIncrementTick+0x15c>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	693a      	ldr	r2, [r7, #16]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d349      	bcc.n	800e57e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4ea:	4b36      	ldr	r3, [pc, #216]	@ (800e5c4 <xTaskIncrementTick+0x150>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d104      	bne.n	800e4fe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4f4:	4b36      	ldr	r3, [pc, #216]	@ (800e5d0 <xTaskIncrementTick+0x15c>)
 800e4f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4fa:	601a      	str	r2, [r3, #0]
					break;
 800e4fc:	e03f      	b.n	800e57e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4fe:	4b31      	ldr	r3, [pc, #196]	@ (800e5c4 <xTaskIncrementTick+0x150>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	68db      	ldr	r3, [r3, #12]
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e50e:	693a      	ldr	r2, [r7, #16]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	429a      	cmp	r2, r3
 800e514:	d203      	bcs.n	800e51e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e516:	4a2e      	ldr	r2, [pc, #184]	@ (800e5d0 <xTaskIncrementTick+0x15c>)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e51c:	e02f      	b.n	800e57e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	3304      	adds	r3, #4
 800e522:	4618      	mov	r0, r3
 800e524:	f7fe fcfa 	bl	800cf1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d004      	beq.n	800e53a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	3318      	adds	r3, #24
 800e534:	4618      	mov	r0, r3
 800e536:	f7fe fcf1 	bl	800cf1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e53e:	4b25      	ldr	r3, [pc, #148]	@ (800e5d4 <xTaskIncrementTick+0x160>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	429a      	cmp	r2, r3
 800e544:	d903      	bls.n	800e54e <xTaskIncrementTick+0xda>
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e54a:	4a22      	ldr	r2, [pc, #136]	@ (800e5d4 <xTaskIncrementTick+0x160>)
 800e54c:	6013      	str	r3, [r2, #0]
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e552:	4613      	mov	r3, r2
 800e554:	009b      	lsls	r3, r3, #2
 800e556:	4413      	add	r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4a1f      	ldr	r2, [pc, #124]	@ (800e5d8 <xTaskIncrementTick+0x164>)
 800e55c:	441a      	add	r2, r3
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	3304      	adds	r3, #4
 800e562:	4619      	mov	r1, r3
 800e564:	4610      	mov	r0, r2
 800e566:	f7fe fc7c 	bl	800ce62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e56e:	4b1b      	ldr	r3, [pc, #108]	@ (800e5dc <xTaskIncrementTick+0x168>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e574:	429a      	cmp	r2, r3
 800e576:	d3b8      	bcc.n	800e4ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e578:	2301      	movs	r3, #1
 800e57a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e57c:	e7b5      	b.n	800e4ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e57e:	4b17      	ldr	r3, [pc, #92]	@ (800e5dc <xTaskIncrementTick+0x168>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e584:	4914      	ldr	r1, [pc, #80]	@ (800e5d8 <xTaskIncrementTick+0x164>)
 800e586:	4613      	mov	r3, r2
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	4413      	add	r3, r2
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	440b      	add	r3, r1
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	2b01      	cmp	r3, #1
 800e594:	d901      	bls.n	800e59a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e596:	2301      	movs	r3, #1
 800e598:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e59a:	4b11      	ldr	r3, [pc, #68]	@ (800e5e0 <xTaskIncrementTick+0x16c>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d007      	beq.n	800e5b2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	617b      	str	r3, [r7, #20]
 800e5a6:	e004      	b.n	800e5b2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e5a8:	4b0e      	ldr	r3, [pc, #56]	@ (800e5e4 <xTaskIncrementTick+0x170>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	4a0d      	ldr	r2, [pc, #52]	@ (800e5e4 <xTaskIncrementTick+0x170>)
 800e5b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e5b2:	697b      	ldr	r3, [r7, #20]
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3718      	adds	r7, #24
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	20001074 	.word	0x20001074
 800e5c0:	20001050 	.word	0x20001050
 800e5c4:	20001004 	.word	0x20001004
 800e5c8:	20001008 	.word	0x20001008
 800e5cc:	20001064 	.word	0x20001064
 800e5d0:	2000106c 	.word	0x2000106c
 800e5d4:	20001054 	.word	0x20001054
 800e5d8:	20000b7c 	.word	0x20000b7c
 800e5dc:	20000b78 	.word	0x20000b78
 800e5e0:	20001060 	.word	0x20001060
 800e5e4:	2000105c 	.word	0x2000105c

0800e5e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b085      	sub	sp, #20
 800e5ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e5ee:	4b2b      	ldr	r3, [pc, #172]	@ (800e69c <vTaskSwitchContext+0xb4>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d003      	beq.n	800e5fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e5f6:	4b2a      	ldr	r3, [pc, #168]	@ (800e6a0 <vTaskSwitchContext+0xb8>)
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e5fc:	e047      	b.n	800e68e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e5fe:	4b28      	ldr	r3, [pc, #160]	@ (800e6a0 <vTaskSwitchContext+0xb8>)
 800e600:	2200      	movs	r2, #0
 800e602:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e604:	4b27      	ldr	r3, [pc, #156]	@ (800e6a4 <vTaskSwitchContext+0xbc>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	60fb      	str	r3, [r7, #12]
 800e60a:	e011      	b.n	800e630 <vTaskSwitchContext+0x48>
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d10b      	bne.n	800e62a <vTaskSwitchContext+0x42>
	__asm volatile
 800e612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e616:	f383 8811 	msr	BASEPRI, r3
 800e61a:	f3bf 8f6f 	isb	sy
 800e61e:	f3bf 8f4f 	dsb	sy
 800e622:	607b      	str	r3, [r7, #4]
}
 800e624:	bf00      	nop
 800e626:	bf00      	nop
 800e628:	e7fd      	b.n	800e626 <vTaskSwitchContext+0x3e>
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	3b01      	subs	r3, #1
 800e62e:	60fb      	str	r3, [r7, #12]
 800e630:	491d      	ldr	r1, [pc, #116]	@ (800e6a8 <vTaskSwitchContext+0xc0>)
 800e632:	68fa      	ldr	r2, [r7, #12]
 800e634:	4613      	mov	r3, r2
 800e636:	009b      	lsls	r3, r3, #2
 800e638:	4413      	add	r3, r2
 800e63a:	009b      	lsls	r3, r3, #2
 800e63c:	440b      	add	r3, r1
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d0e3      	beq.n	800e60c <vTaskSwitchContext+0x24>
 800e644:	68fa      	ldr	r2, [r7, #12]
 800e646:	4613      	mov	r3, r2
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	4413      	add	r3, r2
 800e64c:	009b      	lsls	r3, r3, #2
 800e64e:	4a16      	ldr	r2, [pc, #88]	@ (800e6a8 <vTaskSwitchContext+0xc0>)
 800e650:	4413      	add	r3, r2
 800e652:	60bb      	str	r3, [r7, #8]
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	685a      	ldr	r2, [r3, #4]
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	605a      	str	r2, [r3, #4]
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	685a      	ldr	r2, [r3, #4]
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	3308      	adds	r3, #8
 800e666:	429a      	cmp	r2, r3
 800e668:	d104      	bne.n	800e674 <vTaskSwitchContext+0x8c>
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	685a      	ldr	r2, [r3, #4]
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	605a      	str	r2, [r3, #4]
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	4a0c      	ldr	r2, [pc, #48]	@ (800e6ac <vTaskSwitchContext+0xc4>)
 800e67c:	6013      	str	r3, [r2, #0]
 800e67e:	4a09      	ldr	r2, [pc, #36]	@ (800e6a4 <vTaskSwitchContext+0xbc>)
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e684:	4b09      	ldr	r3, [pc, #36]	@ (800e6ac <vTaskSwitchContext+0xc4>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	3354      	adds	r3, #84	@ 0x54
 800e68a:	4a09      	ldr	r2, [pc, #36]	@ (800e6b0 <vTaskSwitchContext+0xc8>)
 800e68c:	6013      	str	r3, [r2, #0]
}
 800e68e:	bf00      	nop
 800e690:	3714      	adds	r7, #20
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr
 800e69a:	bf00      	nop
 800e69c:	20001074 	.word	0x20001074
 800e6a0:	20001060 	.word	0x20001060
 800e6a4:	20001054 	.word	0x20001054
 800e6a8:	20000b7c 	.word	0x20000b7c
 800e6ac:	20000b78 	.word	0x20000b78
 800e6b0:	20000118 	.word	0x20000118

0800e6b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d10b      	bne.n	800e6dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c8:	f383 8811 	msr	BASEPRI, r3
 800e6cc:	f3bf 8f6f 	isb	sy
 800e6d0:	f3bf 8f4f 	dsb	sy
 800e6d4:	60fb      	str	r3, [r7, #12]
}
 800e6d6:	bf00      	nop
 800e6d8:	bf00      	nop
 800e6da:	e7fd      	b.n	800e6d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e6dc:	4b07      	ldr	r3, [pc, #28]	@ (800e6fc <vTaskPlaceOnEventList+0x48>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	3318      	adds	r3, #24
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f7fe fbe0 	bl	800ceaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e6ea:	2101      	movs	r1, #1
 800e6ec:	6838      	ldr	r0, [r7, #0]
 800e6ee:	f000 fd9f 	bl	800f230 <prvAddCurrentTaskToDelayedList>
}
 800e6f2:	bf00      	nop
 800e6f4:	3710      	adds	r7, #16
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	20000b78 	.word	0x20000b78

0800e700 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e700:	b580      	push	{r7, lr}
 800e702:	b086      	sub	sp, #24
 800e704:	af00      	add	r7, sp, #0
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d10b      	bne.n	800e72a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e716:	f383 8811 	msr	BASEPRI, r3
 800e71a:	f3bf 8f6f 	isb	sy
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	617b      	str	r3, [r7, #20]
}
 800e724:	bf00      	nop
 800e726:	bf00      	nop
 800e728:	e7fd      	b.n	800e726 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e72a:	4b0a      	ldr	r3, [pc, #40]	@ (800e754 <vTaskPlaceOnEventListRestricted+0x54>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	3318      	adds	r3, #24
 800e730:	4619      	mov	r1, r3
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f7fe fb95 	bl	800ce62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d002      	beq.n	800e744 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e73e:	f04f 33ff 	mov.w	r3, #4294967295
 800e742:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e744:	6879      	ldr	r1, [r7, #4]
 800e746:	68b8      	ldr	r0, [r7, #8]
 800e748:	f000 fd72 	bl	800f230 <prvAddCurrentTaskToDelayedList>
	}
 800e74c:	bf00      	nop
 800e74e:	3718      	adds	r7, #24
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}
 800e754:	20000b78 	.word	0x20000b78

0800e758 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b086      	sub	sp, #24
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	68db      	ldr	r3, [r3, #12]
 800e766:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d10b      	bne.n	800e786 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e772:	f383 8811 	msr	BASEPRI, r3
 800e776:	f3bf 8f6f 	isb	sy
 800e77a:	f3bf 8f4f 	dsb	sy
 800e77e:	60fb      	str	r3, [r7, #12]
}
 800e780:	bf00      	nop
 800e782:	bf00      	nop
 800e784:	e7fd      	b.n	800e782 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	3318      	adds	r3, #24
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7fe fbc6 	bl	800cf1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e790:	4b1d      	ldr	r3, [pc, #116]	@ (800e808 <xTaskRemoveFromEventList+0xb0>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d11d      	bne.n	800e7d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	3304      	adds	r3, #4
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7fe fbbd 	bl	800cf1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7a6:	4b19      	ldr	r3, [pc, #100]	@ (800e80c <xTaskRemoveFromEventList+0xb4>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d903      	bls.n	800e7b6 <xTaskRemoveFromEventList+0x5e>
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7b2:	4a16      	ldr	r2, [pc, #88]	@ (800e80c <xTaskRemoveFromEventList+0xb4>)
 800e7b4:	6013      	str	r3, [r2, #0]
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7ba:	4613      	mov	r3, r2
 800e7bc:	009b      	lsls	r3, r3, #2
 800e7be:	4413      	add	r3, r2
 800e7c0:	009b      	lsls	r3, r3, #2
 800e7c2:	4a13      	ldr	r2, [pc, #76]	@ (800e810 <xTaskRemoveFromEventList+0xb8>)
 800e7c4:	441a      	add	r2, r3
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	3304      	adds	r3, #4
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	4610      	mov	r0, r2
 800e7ce:	f7fe fb48 	bl	800ce62 <vListInsertEnd>
 800e7d2:	e005      	b.n	800e7e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	3318      	adds	r3, #24
 800e7d8:	4619      	mov	r1, r3
 800e7da:	480e      	ldr	r0, [pc, #56]	@ (800e814 <xTaskRemoveFromEventList+0xbc>)
 800e7dc:	f7fe fb41 	bl	800ce62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7e4:	4b0c      	ldr	r3, [pc, #48]	@ (800e818 <xTaskRemoveFromEventList+0xc0>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d905      	bls.n	800e7fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e7f2:	4b0a      	ldr	r3, [pc, #40]	@ (800e81c <xTaskRemoveFromEventList+0xc4>)
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	601a      	str	r2, [r3, #0]
 800e7f8:	e001      	b.n	800e7fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e7fe:	697b      	ldr	r3, [r7, #20]
}
 800e800:	4618      	mov	r0, r3
 800e802:	3718      	adds	r7, #24
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}
 800e808:	20001074 	.word	0x20001074
 800e80c:	20001054 	.word	0x20001054
 800e810:	20000b7c 	.word	0x20000b7c
 800e814:	2000100c 	.word	0x2000100c
 800e818:	20000b78 	.word	0x20000b78
 800e81c:	20001060 	.word	0x20001060

0800e820 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e828:	4b06      	ldr	r3, [pc, #24]	@ (800e844 <vTaskInternalSetTimeOutState+0x24>)
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e830:	4b05      	ldr	r3, [pc, #20]	@ (800e848 <vTaskInternalSetTimeOutState+0x28>)
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	605a      	str	r2, [r3, #4]
}
 800e838:	bf00      	nop
 800e83a:	370c      	adds	r7, #12
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr
 800e844:	20001064 	.word	0x20001064
 800e848:	20001050 	.word	0x20001050

0800e84c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b088      	sub	sp, #32
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d10b      	bne.n	800e874 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e860:	f383 8811 	msr	BASEPRI, r3
 800e864:	f3bf 8f6f 	isb	sy
 800e868:	f3bf 8f4f 	dsb	sy
 800e86c:	613b      	str	r3, [r7, #16]
}
 800e86e:	bf00      	nop
 800e870:	bf00      	nop
 800e872:	e7fd      	b.n	800e870 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d10b      	bne.n	800e892 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e87e:	f383 8811 	msr	BASEPRI, r3
 800e882:	f3bf 8f6f 	isb	sy
 800e886:	f3bf 8f4f 	dsb	sy
 800e88a:	60fb      	str	r3, [r7, #12]
}
 800e88c:	bf00      	nop
 800e88e:	bf00      	nop
 800e890:	e7fd      	b.n	800e88e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e892:	f001 f9a9 	bl	800fbe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e896:	4b1d      	ldr	r3, [pc, #116]	@ (800e90c <xTaskCheckForTimeOut+0xc0>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	69ba      	ldr	r2, [r7, #24]
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ae:	d102      	bne.n	800e8b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	61fb      	str	r3, [r7, #28]
 800e8b4:	e023      	b.n	800e8fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	4b15      	ldr	r3, [pc, #84]	@ (800e910 <xTaskCheckForTimeOut+0xc4>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d007      	beq.n	800e8d2 <xTaskCheckForTimeOut+0x86>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	69ba      	ldr	r2, [r7, #24]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d302      	bcc.n	800e8d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	61fb      	str	r3, [r7, #28]
 800e8d0:	e015      	b.n	800e8fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	697a      	ldr	r2, [r7, #20]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d20b      	bcs.n	800e8f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	1ad2      	subs	r2, r2, r3
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f7ff ff99 	bl	800e820 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	61fb      	str	r3, [r7, #28]
 800e8f2:	e004      	b.n	800e8fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e8fe:	f001 f9a5 	bl	800fc4c <vPortExitCritical>

	return xReturn;
 800e902:	69fb      	ldr	r3, [r7, #28]
}
 800e904:	4618      	mov	r0, r3
 800e906:	3720      	adds	r7, #32
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}
 800e90c:	20001050 	.word	0x20001050
 800e910:	20001064 	.word	0x20001064

0800e914 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e914:	b480      	push	{r7}
 800e916:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e918:	4b03      	ldr	r3, [pc, #12]	@ (800e928 <vTaskMissedYield+0x14>)
 800e91a:	2201      	movs	r2, #1
 800e91c:	601a      	str	r2, [r3, #0]
}
 800e91e:	bf00      	nop
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr
 800e928:	20001060 	.word	0x20001060

0800e92c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e934:	f000 f852 	bl	800e9dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e938:	4b06      	ldr	r3, [pc, #24]	@ (800e954 <prvIdleTask+0x28>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d9f9      	bls.n	800e934 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e940:	4b05      	ldr	r3, [pc, #20]	@ (800e958 <prvIdleTask+0x2c>)
 800e942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e946:	601a      	str	r2, [r3, #0]
 800e948:	f3bf 8f4f 	dsb	sy
 800e94c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e950:	e7f0      	b.n	800e934 <prvIdleTask+0x8>
 800e952:	bf00      	nop
 800e954:	20000b7c 	.word	0x20000b7c
 800e958:	e000ed04 	.word	0xe000ed04

0800e95c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b082      	sub	sp, #8
 800e960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e962:	2300      	movs	r3, #0
 800e964:	607b      	str	r3, [r7, #4]
 800e966:	e00c      	b.n	800e982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e968:	687a      	ldr	r2, [r7, #4]
 800e96a:	4613      	mov	r3, r2
 800e96c:	009b      	lsls	r3, r3, #2
 800e96e:	4413      	add	r3, r2
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	4a12      	ldr	r2, [pc, #72]	@ (800e9bc <prvInitialiseTaskLists+0x60>)
 800e974:	4413      	add	r3, r2
 800e976:	4618      	mov	r0, r3
 800e978:	f7fe fa46 	bl	800ce08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	3301      	adds	r3, #1
 800e980:	607b      	str	r3, [r7, #4]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2b37      	cmp	r3, #55	@ 0x37
 800e986:	d9ef      	bls.n	800e968 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e988:	480d      	ldr	r0, [pc, #52]	@ (800e9c0 <prvInitialiseTaskLists+0x64>)
 800e98a:	f7fe fa3d 	bl	800ce08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e98e:	480d      	ldr	r0, [pc, #52]	@ (800e9c4 <prvInitialiseTaskLists+0x68>)
 800e990:	f7fe fa3a 	bl	800ce08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e994:	480c      	ldr	r0, [pc, #48]	@ (800e9c8 <prvInitialiseTaskLists+0x6c>)
 800e996:	f7fe fa37 	bl	800ce08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e99a:	480c      	ldr	r0, [pc, #48]	@ (800e9cc <prvInitialiseTaskLists+0x70>)
 800e99c:	f7fe fa34 	bl	800ce08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e9a0:	480b      	ldr	r0, [pc, #44]	@ (800e9d0 <prvInitialiseTaskLists+0x74>)
 800e9a2:	f7fe fa31 	bl	800ce08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e9a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e9d4 <prvInitialiseTaskLists+0x78>)
 800e9a8:	4a05      	ldr	r2, [pc, #20]	@ (800e9c0 <prvInitialiseTaskLists+0x64>)
 800e9aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e9d8 <prvInitialiseTaskLists+0x7c>)
 800e9ae:	4a05      	ldr	r2, [pc, #20]	@ (800e9c4 <prvInitialiseTaskLists+0x68>)
 800e9b0:	601a      	str	r2, [r3, #0]
}
 800e9b2:	bf00      	nop
 800e9b4:	3708      	adds	r7, #8
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	20000b7c 	.word	0x20000b7c
 800e9c0:	20000fdc 	.word	0x20000fdc
 800e9c4:	20000ff0 	.word	0x20000ff0
 800e9c8:	2000100c 	.word	0x2000100c
 800e9cc:	20001020 	.word	0x20001020
 800e9d0:	20001038 	.word	0x20001038
 800e9d4:	20001004 	.word	0x20001004
 800e9d8:	20001008 	.word	0x20001008

0800e9dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9e2:	e019      	b.n	800ea18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e9e4:	f001 f900 	bl	800fbe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9e8:	4b10      	ldr	r3, [pc, #64]	@ (800ea2c <prvCheckTasksWaitingTermination+0x50>)
 800e9ea:	68db      	ldr	r3, [r3, #12]
 800e9ec:	68db      	ldr	r3, [r3, #12]
 800e9ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	3304      	adds	r3, #4
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7fe fa91 	bl	800cf1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e9fa:	4b0d      	ldr	r3, [pc, #52]	@ (800ea30 <prvCheckTasksWaitingTermination+0x54>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	3b01      	subs	r3, #1
 800ea00:	4a0b      	ldr	r2, [pc, #44]	@ (800ea30 <prvCheckTasksWaitingTermination+0x54>)
 800ea02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea04:	4b0b      	ldr	r3, [pc, #44]	@ (800ea34 <prvCheckTasksWaitingTermination+0x58>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	3b01      	subs	r3, #1
 800ea0a:	4a0a      	ldr	r2, [pc, #40]	@ (800ea34 <prvCheckTasksWaitingTermination+0x58>)
 800ea0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea0e:	f001 f91d 	bl	800fc4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 f810 	bl	800ea38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea18:	4b06      	ldr	r3, [pc, #24]	@ (800ea34 <prvCheckTasksWaitingTermination+0x58>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d1e1      	bne.n	800e9e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea20:	bf00      	nop
 800ea22:	bf00      	nop
 800ea24:	3708      	adds	r7, #8
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	20001020 	.word	0x20001020
 800ea30:	2000104c 	.word	0x2000104c
 800ea34:	20001034 	.word	0x20001034

0800ea38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	3354      	adds	r3, #84	@ 0x54
 800ea44:	4618      	mov	r0, r3
 800ea46:	f002 fa51 	bl	8010eec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d108      	bne.n	800ea66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f001 fab5 	bl	800ffc8 <vPortFree>
				vPortFree( pxTCB );
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f001 fab2 	bl	800ffc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ea64:	e019      	b.n	800ea9a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d103      	bne.n	800ea78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f001 faa9 	bl	800ffc8 <vPortFree>
	}
 800ea76:	e010      	b.n	800ea9a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ea7e:	2b02      	cmp	r3, #2
 800ea80:	d00b      	beq.n	800ea9a <prvDeleteTCB+0x62>
	__asm volatile
 800ea82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea86:	f383 8811 	msr	BASEPRI, r3
 800ea8a:	f3bf 8f6f 	isb	sy
 800ea8e:	f3bf 8f4f 	dsb	sy
 800ea92:	60fb      	str	r3, [r7, #12]
}
 800ea94:	bf00      	nop
 800ea96:	bf00      	nop
 800ea98:	e7fd      	b.n	800ea96 <prvDeleteTCB+0x5e>
	}
 800ea9a:	bf00      	nop
 800ea9c:	3710      	adds	r7, #16
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
	...

0800eaa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eaaa:	4b0c      	ldr	r3, [pc, #48]	@ (800eadc <prvResetNextTaskUnblockTime+0x38>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d104      	bne.n	800eabe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eab4:	4b0a      	ldr	r3, [pc, #40]	@ (800eae0 <prvResetNextTaskUnblockTime+0x3c>)
 800eab6:	f04f 32ff 	mov.w	r2, #4294967295
 800eaba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eabc:	e008      	b.n	800ead0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eabe:	4b07      	ldr	r3, [pc, #28]	@ (800eadc <prvResetNextTaskUnblockTime+0x38>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	68db      	ldr	r3, [r3, #12]
 800eac4:	68db      	ldr	r3, [r3, #12]
 800eac6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	4a04      	ldr	r2, [pc, #16]	@ (800eae0 <prvResetNextTaskUnblockTime+0x3c>)
 800eace:	6013      	str	r3, [r2, #0]
}
 800ead0:	bf00      	nop
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr
 800eadc:	20001004 	.word	0x20001004
 800eae0:	2000106c 	.word	0x2000106c

0800eae4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800eae4:	b480      	push	{r7}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800eaea:	4b05      	ldr	r3, [pc, #20]	@ (800eb00 <xTaskGetCurrentTaskHandle+0x1c>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	607b      	str	r3, [r7, #4]

		return xReturn;
 800eaf0:	687b      	ldr	r3, [r7, #4]
	}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	370c      	adds	r7, #12
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop
 800eb00:	20000b78 	.word	0x20000b78

0800eb04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eb0a:	4b0b      	ldr	r3, [pc, #44]	@ (800eb38 <xTaskGetSchedulerState+0x34>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d102      	bne.n	800eb18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb12:	2301      	movs	r3, #1
 800eb14:	607b      	str	r3, [r7, #4]
 800eb16:	e008      	b.n	800eb2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb18:	4b08      	ldr	r3, [pc, #32]	@ (800eb3c <xTaskGetSchedulerState+0x38>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d102      	bne.n	800eb26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eb20:	2302      	movs	r3, #2
 800eb22:	607b      	str	r3, [r7, #4]
 800eb24:	e001      	b.n	800eb2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb26:	2300      	movs	r3, #0
 800eb28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eb2a:	687b      	ldr	r3, [r7, #4]
	}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	370c      	adds	r7, #12
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr
 800eb38:	20001058 	.word	0x20001058
 800eb3c:	20001074 	.word	0x20001074

0800eb40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b084      	sub	sp, #16
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d051      	beq.n	800ebfa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb5a:	4b2a      	ldr	r3, [pc, #168]	@ (800ec04 <xTaskPriorityInherit+0xc4>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d241      	bcs.n	800ebe8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	699b      	ldr	r3, [r3, #24]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	db06      	blt.n	800eb7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb6c:	4b25      	ldr	r3, [pc, #148]	@ (800ec04 <xTaskPriorityInherit+0xc4>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	6959      	ldr	r1, [r3, #20]
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb82:	4613      	mov	r3, r2
 800eb84:	009b      	lsls	r3, r3, #2
 800eb86:	4413      	add	r3, r2
 800eb88:	009b      	lsls	r3, r3, #2
 800eb8a:	4a1f      	ldr	r2, [pc, #124]	@ (800ec08 <xTaskPriorityInherit+0xc8>)
 800eb8c:	4413      	add	r3, r2
 800eb8e:	4299      	cmp	r1, r3
 800eb90:	d122      	bne.n	800ebd8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	3304      	adds	r3, #4
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7fe f9c0 	bl	800cf1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb9c:	4b19      	ldr	r3, [pc, #100]	@ (800ec04 <xTaskPriorityInherit+0xc4>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebaa:	4b18      	ldr	r3, [pc, #96]	@ (800ec0c <xTaskPriorityInherit+0xcc>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d903      	bls.n	800ebba <xTaskPriorityInherit+0x7a>
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebb6:	4a15      	ldr	r2, [pc, #84]	@ (800ec0c <xTaskPriorityInherit+0xcc>)
 800ebb8:	6013      	str	r3, [r2, #0]
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebbe:	4613      	mov	r3, r2
 800ebc0:	009b      	lsls	r3, r3, #2
 800ebc2:	4413      	add	r3, r2
 800ebc4:	009b      	lsls	r3, r3, #2
 800ebc6:	4a10      	ldr	r2, [pc, #64]	@ (800ec08 <xTaskPriorityInherit+0xc8>)
 800ebc8:	441a      	add	r2, r3
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	3304      	adds	r3, #4
 800ebce:	4619      	mov	r1, r3
 800ebd0:	4610      	mov	r0, r2
 800ebd2:	f7fe f946 	bl	800ce62 <vListInsertEnd>
 800ebd6:	e004      	b.n	800ebe2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ebd8:	4b0a      	ldr	r3, [pc, #40]	@ (800ec04 <xTaskPriorityInherit+0xc4>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	60fb      	str	r3, [r7, #12]
 800ebe6:	e008      	b.n	800ebfa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ebec:	4b05      	ldr	r3, [pc, #20]	@ (800ec04 <xTaskPriorityInherit+0xc4>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d201      	bcs.n	800ebfa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
	}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3710      	adds	r7, #16
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	20000b78 	.word	0x20000b78
 800ec08:	20000b7c 	.word	0x20000b7c
 800ec0c:	20001054 	.word	0x20001054

0800ec10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b086      	sub	sp, #24
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d058      	beq.n	800ecd8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ec26:	4b2f      	ldr	r3, [pc, #188]	@ (800ece4 <xTaskPriorityDisinherit+0xd4>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	693a      	ldr	r2, [r7, #16]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d00b      	beq.n	800ec48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ec30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec34:	f383 8811 	msr	BASEPRI, r3
 800ec38:	f3bf 8f6f 	isb	sy
 800ec3c:	f3bf 8f4f 	dsb	sy
 800ec40:	60fb      	str	r3, [r7, #12]
}
 800ec42:	bf00      	nop
 800ec44:	bf00      	nop
 800ec46:	e7fd      	b.n	800ec44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d10b      	bne.n	800ec68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ec50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec54:	f383 8811 	msr	BASEPRI, r3
 800ec58:	f3bf 8f6f 	isb	sy
 800ec5c:	f3bf 8f4f 	dsb	sy
 800ec60:	60bb      	str	r3, [r7, #8]
}
 800ec62:	bf00      	nop
 800ec64:	bf00      	nop
 800ec66:	e7fd      	b.n	800ec64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec6c:	1e5a      	subs	r2, r3, #1
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d02c      	beq.n	800ecd8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d128      	bne.n	800ecd8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	3304      	adds	r3, #4
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7fe f946 	bl	800cf1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eca8:	4b0f      	ldr	r3, [pc, #60]	@ (800ece8 <xTaskPriorityDisinherit+0xd8>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d903      	bls.n	800ecb8 <xTaskPriorityDisinherit+0xa8>
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecb4:	4a0c      	ldr	r2, [pc, #48]	@ (800ece8 <xTaskPriorityDisinherit+0xd8>)
 800ecb6:	6013      	str	r3, [r2, #0]
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecbc:	4613      	mov	r3, r2
 800ecbe:	009b      	lsls	r3, r3, #2
 800ecc0:	4413      	add	r3, r2
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	4a09      	ldr	r2, [pc, #36]	@ (800ecec <xTaskPriorityDisinherit+0xdc>)
 800ecc6:	441a      	add	r2, r3
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	3304      	adds	r3, #4
 800eccc:	4619      	mov	r1, r3
 800ecce:	4610      	mov	r0, r2
 800ecd0:	f7fe f8c7 	bl	800ce62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ecd8:	697b      	ldr	r3, [r7, #20]
	}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3718      	adds	r7, #24
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	20000b78 	.word	0x20000b78
 800ece8:	20001054 	.word	0x20001054
 800ecec:	20000b7c 	.word	0x20000b7c

0800ecf0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b088      	sub	sp, #32
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d06c      	beq.n	800ede2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d10b      	bne.n	800ed28 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ed10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	60fb      	str	r3, [r7, #12]
}
 800ed22:	bf00      	nop
 800ed24:	bf00      	nop
 800ed26:	e7fd      	b.n	800ed24 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ed28:	69bb      	ldr	r3, [r7, #24]
 800ed2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed2c:	683a      	ldr	r2, [r7, #0]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d902      	bls.n	800ed38 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	61fb      	str	r3, [r7, #28]
 800ed36:	e002      	b.n	800ed3e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed3c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed42:	69fa      	ldr	r2, [r7, #28]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d04c      	beq.n	800ede2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed4c:	697a      	ldr	r2, [r7, #20]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d147      	bne.n	800ede2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ed52:	4b26      	ldr	r3, [pc, #152]	@ (800edec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	69ba      	ldr	r2, [r7, #24]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d10b      	bne.n	800ed74 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ed5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed60:	f383 8811 	msr	BASEPRI, r3
 800ed64:	f3bf 8f6f 	isb	sy
 800ed68:	f3bf 8f4f 	dsb	sy
 800ed6c:	60bb      	str	r3, [r7, #8]
}
 800ed6e:	bf00      	nop
 800ed70:	bf00      	nop
 800ed72:	e7fd      	b.n	800ed70 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ed74:	69bb      	ldr	r3, [r7, #24]
 800ed76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed78:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ed7a:	69bb      	ldr	r3, [r7, #24]
 800ed7c:	69fa      	ldr	r2, [r7, #28]
 800ed7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed80:	69bb      	ldr	r3, [r7, #24]
 800ed82:	699b      	ldr	r3, [r3, #24]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	db04      	blt.n	800ed92 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed88:	69fb      	ldr	r3, [r7, #28]
 800ed8a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ed8e:	69bb      	ldr	r3, [r7, #24]
 800ed90:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	6959      	ldr	r1, [r3, #20]
 800ed96:	693a      	ldr	r2, [r7, #16]
 800ed98:	4613      	mov	r3, r2
 800ed9a:	009b      	lsls	r3, r3, #2
 800ed9c:	4413      	add	r3, r2
 800ed9e:	009b      	lsls	r3, r3, #2
 800eda0:	4a13      	ldr	r2, [pc, #76]	@ (800edf0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eda2:	4413      	add	r3, r2
 800eda4:	4299      	cmp	r1, r3
 800eda6:	d11c      	bne.n	800ede2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	3304      	adds	r3, #4
 800edac:	4618      	mov	r0, r3
 800edae:	f7fe f8b5 	bl	800cf1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edb6:	4b0f      	ldr	r3, [pc, #60]	@ (800edf4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	429a      	cmp	r2, r3
 800edbc:	d903      	bls.n	800edc6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800edbe:	69bb      	ldr	r3, [r7, #24]
 800edc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc2:	4a0c      	ldr	r2, [pc, #48]	@ (800edf4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800edc4:	6013      	str	r3, [r2, #0]
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edca:	4613      	mov	r3, r2
 800edcc:	009b      	lsls	r3, r3, #2
 800edce:	4413      	add	r3, r2
 800edd0:	009b      	lsls	r3, r3, #2
 800edd2:	4a07      	ldr	r2, [pc, #28]	@ (800edf0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800edd4:	441a      	add	r2, r3
 800edd6:	69bb      	ldr	r3, [r7, #24]
 800edd8:	3304      	adds	r3, #4
 800edda:	4619      	mov	r1, r3
 800eddc:	4610      	mov	r0, r2
 800edde:	f7fe f840 	bl	800ce62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ede2:	bf00      	nop
 800ede4:	3720      	adds	r7, #32
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop
 800edec:	20000b78 	.word	0x20000b78
 800edf0:	20000b7c 	.word	0x20000b7c
 800edf4:	20001054 	.word	0x20001054

0800edf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800edf8:	b480      	push	{r7}
 800edfa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800edfc:	4b07      	ldr	r3, [pc, #28]	@ (800ee1c <pvTaskIncrementMutexHeldCount+0x24>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d004      	beq.n	800ee0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ee04:	4b05      	ldr	r3, [pc, #20]	@ (800ee1c <pvTaskIncrementMutexHeldCount+0x24>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee0a:	3201      	adds	r2, #1
 800ee0c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ee0e:	4b03      	ldr	r3, [pc, #12]	@ (800ee1c <pvTaskIncrementMutexHeldCount+0x24>)
 800ee10:	681b      	ldr	r3, [r3, #0]
	}
 800ee12:	4618      	mov	r0, r3
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr
 800ee1c:	20000b78 	.word	0x20000b78

0800ee20 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
 800ee2c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ee2e:	f000 fedb 	bl	800fbe8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ee32:	4b29      	ldr	r3, [pc, #164]	@ (800eed8 <xTaskNotifyWait+0xb8>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	2b02      	cmp	r3, #2
 800ee3e:	d01c      	beq.n	800ee7a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ee40:	4b25      	ldr	r3, [pc, #148]	@ (800eed8 <xTaskNotifyWait+0xb8>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800ee48:	68fa      	ldr	r2, [r7, #12]
 800ee4a:	43d2      	mvns	r2, r2
 800ee4c:	400a      	ands	r2, r1
 800ee4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ee52:	4b21      	ldr	r3, [pc, #132]	@ (800eed8 <xTaskNotifyWait+0xb8>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	2201      	movs	r2, #1
 800ee58:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d00b      	beq.n	800ee7a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee62:	2101      	movs	r1, #1
 800ee64:	6838      	ldr	r0, [r7, #0]
 800ee66:	f000 f9e3 	bl	800f230 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ee6a:	4b1c      	ldr	r3, [pc, #112]	@ (800eedc <xTaskNotifyWait+0xbc>)
 800ee6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee70:	601a      	str	r2, [r3, #0]
 800ee72:	f3bf 8f4f 	dsb	sy
 800ee76:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ee7a:	f000 fee7 	bl	800fc4c <vPortExitCritical>

		taskENTER_CRITICAL();
 800ee7e:	f000 feb3 	bl	800fbe8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d005      	beq.n	800ee94 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ee88:	4b13      	ldr	r3, [pc, #76]	@ (800eed8 <xTaskNotifyWait+0xb8>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ee94:	4b10      	ldr	r3, [pc, #64]	@ (800eed8 <xTaskNotifyWait+0xb8>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	2b02      	cmp	r3, #2
 800eea0:	d002      	beq.n	800eea8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800eea2:	2300      	movs	r3, #0
 800eea4:	617b      	str	r3, [r7, #20]
 800eea6:	e00a      	b.n	800eebe <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800eea8:	4b0b      	ldr	r3, [pc, #44]	@ (800eed8 <xTaskNotifyWait+0xb8>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800eeb0:	68ba      	ldr	r2, [r7, #8]
 800eeb2:	43d2      	mvns	r2, r2
 800eeb4:	400a      	ands	r2, r1
 800eeb6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800eeba:	2301      	movs	r3, #1
 800eebc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eebe:	4b06      	ldr	r3, [pc, #24]	@ (800eed8 <xTaskNotifyWait+0xb8>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	2200      	movs	r2, #0
 800eec4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800eec8:	f000 fec0 	bl	800fc4c <vPortExitCritical>

		return xReturn;
 800eecc:	697b      	ldr	r3, [r7, #20]
	}
 800eece:	4618      	mov	r0, r3
 800eed0:	3718      	adds	r7, #24
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	20000b78 	.word	0x20000b78
 800eedc:	e000ed04 	.word	0xe000ed04

0800eee0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b08a      	sub	sp, #40	@ 0x28
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	60f8      	str	r0, [r7, #12]
 800eee8:	60b9      	str	r1, [r7, #8]
 800eeea:	603b      	str	r3, [r7, #0]
 800eeec:	4613      	mov	r3, r2
 800eeee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800eef0:	2301      	movs	r3, #1
 800eef2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d10b      	bne.n	800ef12 <xTaskGenericNotify+0x32>
	__asm volatile
 800eefa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eefe:	f383 8811 	msr	BASEPRI, r3
 800ef02:	f3bf 8f6f 	isb	sy
 800ef06:	f3bf 8f4f 	dsb	sy
 800ef0a:	61bb      	str	r3, [r7, #24]
}
 800ef0c:	bf00      	nop
 800ef0e:	bf00      	nop
 800ef10:	e7fd      	b.n	800ef0e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ef16:	f000 fe67 	bl	800fbe8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d004      	beq.n	800ef2a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ef20:	6a3b      	ldr	r3, [r7, #32]
 800ef22:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ef2a:	6a3b      	ldr	r3, [r7, #32]
 800ef2c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ef30:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ef32:	6a3b      	ldr	r3, [r7, #32]
 800ef34:	2202      	movs	r2, #2
 800ef36:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800ef3a:	79fb      	ldrb	r3, [r7, #7]
 800ef3c:	2b04      	cmp	r3, #4
 800ef3e:	d82e      	bhi.n	800ef9e <xTaskGenericNotify+0xbe>
 800ef40:	a201      	add	r2, pc, #4	@ (adr r2, 800ef48 <xTaskGenericNotify+0x68>)
 800ef42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef46:	bf00      	nop
 800ef48:	0800efc3 	.word	0x0800efc3
 800ef4c:	0800ef5d 	.word	0x0800ef5d
 800ef50:	0800ef6f 	.word	0x0800ef6f
 800ef54:	0800ef7f 	.word	0x0800ef7f
 800ef58:	0800ef89 	.word	0x0800ef89
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ef5c:	6a3b      	ldr	r3, [r7, #32]
 800ef5e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	431a      	orrs	r2, r3
 800ef66:	6a3b      	ldr	r3, [r7, #32]
 800ef68:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ef6c:	e02c      	b.n	800efc8 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ef6e:	6a3b      	ldr	r3, [r7, #32]
 800ef70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef74:	1c5a      	adds	r2, r3, #1
 800ef76:	6a3b      	ldr	r3, [r7, #32]
 800ef78:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ef7c:	e024      	b.n	800efc8 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ef7e:	6a3b      	ldr	r3, [r7, #32]
 800ef80:	68ba      	ldr	r2, [r7, #8]
 800ef82:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ef86:	e01f      	b.n	800efc8 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ef88:	7ffb      	ldrb	r3, [r7, #31]
 800ef8a:	2b02      	cmp	r3, #2
 800ef8c:	d004      	beq.n	800ef98 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ef8e:	6a3b      	ldr	r3, [r7, #32]
 800ef90:	68ba      	ldr	r2, [r7, #8]
 800ef92:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ef96:	e017      	b.n	800efc8 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800ef9c:	e014      	b.n	800efc8 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ef9e:	6a3b      	ldr	r3, [r7, #32]
 800efa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800efa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa8:	d00d      	beq.n	800efc6 <xTaskGenericNotify+0xe6>
	__asm volatile
 800efaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efae:	f383 8811 	msr	BASEPRI, r3
 800efb2:	f3bf 8f6f 	isb	sy
 800efb6:	f3bf 8f4f 	dsb	sy
 800efba:	617b      	str	r3, [r7, #20]
}
 800efbc:	bf00      	nop
 800efbe:	bf00      	nop
 800efc0:	e7fd      	b.n	800efbe <xTaskGenericNotify+0xde>
					break;
 800efc2:	bf00      	nop
 800efc4:	e000      	b.n	800efc8 <xTaskGenericNotify+0xe8>

					break;
 800efc6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800efc8:	7ffb      	ldrb	r3, [r7, #31]
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d13b      	bne.n	800f046 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efce:	6a3b      	ldr	r3, [r7, #32]
 800efd0:	3304      	adds	r3, #4
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7fd ffa2 	bl	800cf1c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800efd8:	6a3b      	ldr	r3, [r7, #32]
 800efda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efdc:	4b1d      	ldr	r3, [pc, #116]	@ (800f054 <xTaskGenericNotify+0x174>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d903      	bls.n	800efec <xTaskGenericNotify+0x10c>
 800efe4:	6a3b      	ldr	r3, [r7, #32]
 800efe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efe8:	4a1a      	ldr	r2, [pc, #104]	@ (800f054 <xTaskGenericNotify+0x174>)
 800efea:	6013      	str	r3, [r2, #0]
 800efec:	6a3b      	ldr	r3, [r7, #32]
 800efee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eff0:	4613      	mov	r3, r2
 800eff2:	009b      	lsls	r3, r3, #2
 800eff4:	4413      	add	r3, r2
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	4a17      	ldr	r2, [pc, #92]	@ (800f058 <xTaskGenericNotify+0x178>)
 800effa:	441a      	add	r2, r3
 800effc:	6a3b      	ldr	r3, [r7, #32]
 800effe:	3304      	adds	r3, #4
 800f000:	4619      	mov	r1, r3
 800f002:	4610      	mov	r0, r2
 800f004:	f7fd ff2d 	bl	800ce62 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f008:	6a3b      	ldr	r3, [r7, #32]
 800f00a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d00b      	beq.n	800f028 <xTaskGenericNotify+0x148>
	__asm volatile
 800f010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f014:	f383 8811 	msr	BASEPRI, r3
 800f018:	f3bf 8f6f 	isb	sy
 800f01c:	f3bf 8f4f 	dsb	sy
 800f020:	613b      	str	r3, [r7, #16]
}
 800f022:	bf00      	nop
 800f024:	bf00      	nop
 800f026:	e7fd      	b.n	800f024 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f028:	6a3b      	ldr	r3, [r7, #32]
 800f02a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f02c:	4b0b      	ldr	r3, [pc, #44]	@ (800f05c <xTaskGenericNotify+0x17c>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f032:	429a      	cmp	r2, r3
 800f034:	d907      	bls.n	800f046 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f036:	4b0a      	ldr	r3, [pc, #40]	@ (800f060 <xTaskGenericNotify+0x180>)
 800f038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f03c:	601a      	str	r2, [r3, #0]
 800f03e:	f3bf 8f4f 	dsb	sy
 800f042:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f046:	f000 fe01 	bl	800fc4c <vPortExitCritical>

		return xReturn;
 800f04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3728      	adds	r7, #40	@ 0x28
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}
 800f054:	20001054 	.word	0x20001054
 800f058:	20000b7c 	.word	0x20000b7c
 800f05c:	20000b78 	.word	0x20000b78
 800f060:	e000ed04 	.word	0xe000ed04

0800f064 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f064:	b580      	push	{r7, lr}
 800f066:	b08e      	sub	sp, #56	@ 0x38
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	603b      	str	r3, [r7, #0]
 800f070:	4613      	mov	r3, r2
 800f072:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800f074:	2301      	movs	r3, #1
 800f076:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d10b      	bne.n	800f096 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800f07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f082:	f383 8811 	msr	BASEPRI, r3
 800f086:	f3bf 8f6f 	isb	sy
 800f08a:	f3bf 8f4f 	dsb	sy
 800f08e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f090:	bf00      	nop
 800f092:	bf00      	nop
 800f094:	e7fd      	b.n	800f092 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f096:	f000 fe87 	bl	800fda8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800f09e:	f3ef 8211 	mrs	r2, BASEPRI
 800f0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0a6:	f383 8811 	msr	BASEPRI, r3
 800f0aa:	f3bf 8f6f 	isb	sy
 800f0ae:	f3bf 8f4f 	dsb	sy
 800f0b2:	623a      	str	r2, [r7, #32]
 800f0b4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800f0b6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d004      	beq.n	800f0ca <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0cc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f0d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0d6:	2202      	movs	r2, #2
 800f0d8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f0dc:	79fb      	ldrb	r3, [r7, #7]
 800f0de:	2b04      	cmp	r3, #4
 800f0e0:	d82e      	bhi.n	800f140 <xTaskGenericNotifyFromISR+0xdc>
 800f0e2:	a201      	add	r2, pc, #4	@ (adr r2, 800f0e8 <xTaskGenericNotifyFromISR+0x84>)
 800f0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e8:	0800f165 	.word	0x0800f165
 800f0ec:	0800f0fd 	.word	0x0800f0fd
 800f0f0:	0800f10f 	.word	0x0800f10f
 800f0f4:	0800f11f 	.word	0x0800f11f
 800f0f8:	0800f129 	.word	0x0800f129
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0fe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	431a      	orrs	r2, r3
 800f106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f108:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f10c:	e02d      	b.n	800f16a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f110:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f114:	1c5a      	adds	r2, r3, #1
 800f116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f118:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f11c:	e025      	b.n	800f16a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f120:	68ba      	ldr	r2, [r7, #8]
 800f122:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f126:	e020      	b.n	800f16a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f128:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f12c:	2b02      	cmp	r3, #2
 800f12e:	d004      	beq.n	800f13a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f132:	68ba      	ldr	r2, [r7, #8]
 800f134:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f138:	e017      	b.n	800f16a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800f13a:	2300      	movs	r3, #0
 800f13c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800f13e:	e014      	b.n	800f16a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f142:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f14a:	d00d      	beq.n	800f168 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800f14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f150:	f383 8811 	msr	BASEPRI, r3
 800f154:	f3bf 8f6f 	isb	sy
 800f158:	f3bf 8f4f 	dsb	sy
 800f15c:	61bb      	str	r3, [r7, #24]
}
 800f15e:	bf00      	nop
 800f160:	bf00      	nop
 800f162:	e7fd      	b.n	800f160 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800f164:	bf00      	nop
 800f166:	e000      	b.n	800f16a <xTaskGenericNotifyFromISR+0x106>
					break;
 800f168:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f16a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f16e:	2b01      	cmp	r3, #1
 800f170:	d147      	bne.n	800f202 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f176:	2b00      	cmp	r3, #0
 800f178:	d00b      	beq.n	800f192 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800f17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f17e:	f383 8811 	msr	BASEPRI, r3
 800f182:	f3bf 8f6f 	isb	sy
 800f186:	f3bf 8f4f 	dsb	sy
 800f18a:	617b      	str	r3, [r7, #20]
}
 800f18c:	bf00      	nop
 800f18e:	bf00      	nop
 800f190:	e7fd      	b.n	800f18e <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f192:	4b21      	ldr	r3, [pc, #132]	@ (800f218 <xTaskGenericNotifyFromISR+0x1b4>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d11d      	bne.n	800f1d6 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f19c:	3304      	adds	r3, #4
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7fd febc 	bl	800cf1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1a8:	4b1c      	ldr	r3, [pc, #112]	@ (800f21c <xTaskGenericNotifyFromISR+0x1b8>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d903      	bls.n	800f1b8 <xTaskGenericNotifyFromISR+0x154>
 800f1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1b4:	4a19      	ldr	r2, [pc, #100]	@ (800f21c <xTaskGenericNotifyFromISR+0x1b8>)
 800f1b6:	6013      	str	r3, [r2, #0]
 800f1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1bc:	4613      	mov	r3, r2
 800f1be:	009b      	lsls	r3, r3, #2
 800f1c0:	4413      	add	r3, r2
 800f1c2:	009b      	lsls	r3, r3, #2
 800f1c4:	4a16      	ldr	r2, [pc, #88]	@ (800f220 <xTaskGenericNotifyFromISR+0x1bc>)
 800f1c6:	441a      	add	r2, r3
 800f1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ca:	3304      	adds	r3, #4
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	4610      	mov	r0, r2
 800f1d0:	f7fd fe47 	bl	800ce62 <vListInsertEnd>
 800f1d4:	e005      	b.n	800f1e2 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d8:	3318      	adds	r3, #24
 800f1da:	4619      	mov	r1, r3
 800f1dc:	4811      	ldr	r0, [pc, #68]	@ (800f224 <xTaskGenericNotifyFromISR+0x1c0>)
 800f1de:	f7fd fe40 	bl	800ce62 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1e6:	4b10      	ldr	r3, [pc, #64]	@ (800f228 <xTaskGenericNotifyFromISR+0x1c4>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d908      	bls.n	800f202 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f1f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d002      	beq.n	800f1fc <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f1f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f1fc:	4b0b      	ldr	r3, [pc, #44]	@ (800f22c <xTaskGenericNotifyFromISR+0x1c8>)
 800f1fe:	2201      	movs	r2, #1
 800f200:	601a      	str	r2, [r3, #0]
 800f202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f204:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	f383 8811 	msr	BASEPRI, r3
}
 800f20c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f20e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800f210:	4618      	mov	r0, r3
 800f212:	3738      	adds	r7, #56	@ 0x38
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	20001074 	.word	0x20001074
 800f21c:	20001054 	.word	0x20001054
 800f220:	20000b7c 	.word	0x20000b7c
 800f224:	2000100c 	.word	0x2000100c
 800f228:	20000b78 	.word	0x20000b78
 800f22c:	20001060 	.word	0x20001060

0800f230 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f23a:	4b21      	ldr	r3, [pc, #132]	@ (800f2c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f240:	4b20      	ldr	r3, [pc, #128]	@ (800f2c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	3304      	adds	r3, #4
 800f246:	4618      	mov	r0, r3
 800f248:	f7fd fe68 	bl	800cf1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f252:	d10a      	bne.n	800f26a <prvAddCurrentTaskToDelayedList+0x3a>
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d007      	beq.n	800f26a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f25a:	4b1a      	ldr	r3, [pc, #104]	@ (800f2c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	3304      	adds	r3, #4
 800f260:	4619      	mov	r1, r3
 800f262:	4819      	ldr	r0, [pc, #100]	@ (800f2c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800f264:	f7fd fdfd 	bl	800ce62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f268:	e026      	b.n	800f2b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f26a:	68fa      	ldr	r2, [r7, #12]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4413      	add	r3, r2
 800f270:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f272:	4b14      	ldr	r3, [pc, #80]	@ (800f2c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	68ba      	ldr	r2, [r7, #8]
 800f278:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f27a:	68ba      	ldr	r2, [r7, #8]
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d209      	bcs.n	800f296 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f282:	4b12      	ldr	r3, [pc, #72]	@ (800f2cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	4b0f      	ldr	r3, [pc, #60]	@ (800f2c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	3304      	adds	r3, #4
 800f28c:	4619      	mov	r1, r3
 800f28e:	4610      	mov	r0, r2
 800f290:	f7fd fe0b 	bl	800ceaa <vListInsert>
}
 800f294:	e010      	b.n	800f2b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f296:	4b0e      	ldr	r3, [pc, #56]	@ (800f2d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f298:	681a      	ldr	r2, [r3, #0]
 800f29a:	4b0a      	ldr	r3, [pc, #40]	@ (800f2c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	3304      	adds	r3, #4
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	4610      	mov	r0, r2
 800f2a4:	f7fd fe01 	bl	800ceaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f2a8:	4b0a      	ldr	r3, [pc, #40]	@ (800f2d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	68ba      	ldr	r2, [r7, #8]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d202      	bcs.n	800f2b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f2b2:	4a08      	ldr	r2, [pc, #32]	@ (800f2d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	6013      	str	r3, [r2, #0]
}
 800f2b8:	bf00      	nop
 800f2ba:	3710      	adds	r7, #16
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}
 800f2c0:	20001050 	.word	0x20001050
 800f2c4:	20000b78 	.word	0x20000b78
 800f2c8:	20001038 	.word	0x20001038
 800f2cc:	20001008 	.word	0x20001008
 800f2d0:	20001004 	.word	0x20001004
 800f2d4:	2000106c 	.word	0x2000106c

0800f2d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b08a      	sub	sp, #40	@ 0x28
 800f2dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f2e2:	f000 fb13 	bl	800f90c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f2e6:	4b1d      	ldr	r3, [pc, #116]	@ (800f35c <xTimerCreateTimerTask+0x84>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d021      	beq.n	800f332 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f2f6:	1d3a      	adds	r2, r7, #4
 800f2f8:	f107 0108 	add.w	r1, r7, #8
 800f2fc:	f107 030c 	add.w	r3, r7, #12
 800f300:	4618      	mov	r0, r3
 800f302:	f7fd fd67 	bl	800cdd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f306:	6879      	ldr	r1, [r7, #4]
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	68fa      	ldr	r2, [r7, #12]
 800f30c:	9202      	str	r2, [sp, #8]
 800f30e:	9301      	str	r3, [sp, #4]
 800f310:	2302      	movs	r3, #2
 800f312:	9300      	str	r3, [sp, #0]
 800f314:	2300      	movs	r3, #0
 800f316:	460a      	mov	r2, r1
 800f318:	4911      	ldr	r1, [pc, #68]	@ (800f360 <xTimerCreateTimerTask+0x88>)
 800f31a:	4812      	ldr	r0, [pc, #72]	@ (800f364 <xTimerCreateTimerTask+0x8c>)
 800f31c:	f7fe fdc0 	bl	800dea0 <xTaskCreateStatic>
 800f320:	4603      	mov	r3, r0
 800f322:	4a11      	ldr	r2, [pc, #68]	@ (800f368 <xTimerCreateTimerTask+0x90>)
 800f324:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f326:	4b10      	ldr	r3, [pc, #64]	@ (800f368 <xTimerCreateTimerTask+0x90>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d001      	beq.n	800f332 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f32e:	2301      	movs	r3, #1
 800f330:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d10b      	bne.n	800f350 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f33c:	f383 8811 	msr	BASEPRI, r3
 800f340:	f3bf 8f6f 	isb	sy
 800f344:	f3bf 8f4f 	dsb	sy
 800f348:	613b      	str	r3, [r7, #16]
}
 800f34a:	bf00      	nop
 800f34c:	bf00      	nop
 800f34e:	e7fd      	b.n	800f34c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f350:	697b      	ldr	r3, [r7, #20]
}
 800f352:	4618      	mov	r0, r3
 800f354:	3718      	adds	r7, #24
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	200010a8 	.word	0x200010a8
 800f360:	08011cd0 	.word	0x08011cd0
 800f364:	0800f4a5 	.word	0x0800f4a5
 800f368:	200010ac 	.word	0x200010ac

0800f36c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b08a      	sub	sp, #40	@ 0x28
 800f370:	af00      	add	r7, sp, #0
 800f372:	60f8      	str	r0, [r7, #12]
 800f374:	60b9      	str	r1, [r7, #8]
 800f376:	607a      	str	r2, [r7, #4]
 800f378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f37a:	2300      	movs	r3, #0
 800f37c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d10b      	bne.n	800f39c <xTimerGenericCommand+0x30>
	__asm volatile
 800f384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f388:	f383 8811 	msr	BASEPRI, r3
 800f38c:	f3bf 8f6f 	isb	sy
 800f390:	f3bf 8f4f 	dsb	sy
 800f394:	623b      	str	r3, [r7, #32]
}
 800f396:	bf00      	nop
 800f398:	bf00      	nop
 800f39a:	e7fd      	b.n	800f398 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f39c:	4b19      	ldr	r3, [pc, #100]	@ (800f404 <xTimerGenericCommand+0x98>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d02a      	beq.n	800f3fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	2b05      	cmp	r3, #5
 800f3b4:	dc18      	bgt.n	800f3e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f3b6:	f7ff fba5 	bl	800eb04 <xTaskGetSchedulerState>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	2b02      	cmp	r3, #2
 800f3be:	d109      	bne.n	800f3d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f3c0:	4b10      	ldr	r3, [pc, #64]	@ (800f404 <xTimerGenericCommand+0x98>)
 800f3c2:	6818      	ldr	r0, [r3, #0]
 800f3c4:	f107 0110 	add.w	r1, r7, #16
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3cc:	f7fd ffce 	bl	800d36c <xQueueGenericSend>
 800f3d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800f3d2:	e012      	b.n	800f3fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f3d4:	4b0b      	ldr	r3, [pc, #44]	@ (800f404 <xTimerGenericCommand+0x98>)
 800f3d6:	6818      	ldr	r0, [r3, #0]
 800f3d8:	f107 0110 	add.w	r1, r7, #16
 800f3dc:	2300      	movs	r3, #0
 800f3de:	2200      	movs	r2, #0
 800f3e0:	f7fd ffc4 	bl	800d36c <xQueueGenericSend>
 800f3e4:	6278      	str	r0, [r7, #36]	@ 0x24
 800f3e6:	e008      	b.n	800f3fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f3e8:	4b06      	ldr	r3, [pc, #24]	@ (800f404 <xTimerGenericCommand+0x98>)
 800f3ea:	6818      	ldr	r0, [r3, #0]
 800f3ec:	f107 0110 	add.w	r1, r7, #16
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	683a      	ldr	r2, [r7, #0]
 800f3f4:	f7fe f8bc 	bl	800d570 <xQueueGenericSendFromISR>
 800f3f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3728      	adds	r7, #40	@ 0x28
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}
 800f404:	200010a8 	.word	0x200010a8

0800f408 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b088      	sub	sp, #32
 800f40c:	af02      	add	r7, sp, #8
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f412:	4b23      	ldr	r3, [pc, #140]	@ (800f4a0 <prvProcessExpiredTimer+0x98>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	68db      	ldr	r3, [r3, #12]
 800f418:	68db      	ldr	r3, [r3, #12]
 800f41a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	3304      	adds	r3, #4
 800f420:	4618      	mov	r0, r3
 800f422:	f7fd fd7b 	bl	800cf1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f426:	697b      	ldr	r3, [r7, #20]
 800f428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f42c:	f003 0304 	and.w	r3, r3, #4
 800f430:	2b00      	cmp	r3, #0
 800f432:	d023      	beq.n	800f47c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	699a      	ldr	r2, [r3, #24]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	18d1      	adds	r1, r2, r3
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	683a      	ldr	r2, [r7, #0]
 800f440:	6978      	ldr	r0, [r7, #20]
 800f442:	f000 f8d5 	bl	800f5f0 <prvInsertTimerInActiveList>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d020      	beq.n	800f48e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f44c:	2300      	movs	r3, #0
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	2300      	movs	r3, #0
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	2100      	movs	r1, #0
 800f456:	6978      	ldr	r0, [r7, #20]
 800f458:	f7ff ff88 	bl	800f36c <xTimerGenericCommand>
 800f45c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d114      	bne.n	800f48e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f468:	f383 8811 	msr	BASEPRI, r3
 800f46c:	f3bf 8f6f 	isb	sy
 800f470:	f3bf 8f4f 	dsb	sy
 800f474:	60fb      	str	r3, [r7, #12]
}
 800f476:	bf00      	nop
 800f478:	bf00      	nop
 800f47a:	e7fd      	b.n	800f478 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f482:	f023 0301 	bic.w	r3, r3, #1
 800f486:	b2da      	uxtb	r2, r3
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	6a1b      	ldr	r3, [r3, #32]
 800f492:	6978      	ldr	r0, [r7, #20]
 800f494:	4798      	blx	r3
}
 800f496:	bf00      	nop
 800f498:	3718      	adds	r7, #24
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}
 800f49e:	bf00      	nop
 800f4a0:	200010a0 	.word	0x200010a0

0800f4a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f4ac:	f107 0308 	add.w	r3, r7, #8
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f000 f859 	bl	800f568 <prvGetNextExpireTime>
 800f4b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	68f8      	ldr	r0, [r7, #12]
 800f4be:	f000 f805 	bl	800f4cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f4c2:	f000 f8d7 	bl	800f674 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f4c6:	bf00      	nop
 800f4c8:	e7f0      	b.n	800f4ac <prvTimerTask+0x8>
	...

0800f4cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f4d6:	f7fe ff11 	bl	800e2fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f4da:	f107 0308 	add.w	r3, r7, #8
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f000 f866 	bl	800f5b0 <prvSampleTimeNow>
 800f4e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d130      	bne.n	800f54e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d10a      	bne.n	800f508 <prvProcessTimerOrBlockTask+0x3c>
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d806      	bhi.n	800f508 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f4fa:	f7fe ff0d 	bl	800e318 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f4fe:	68f9      	ldr	r1, [r7, #12]
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f7ff ff81 	bl	800f408 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f506:	e024      	b.n	800f552 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d008      	beq.n	800f520 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f50e:	4b13      	ldr	r3, [pc, #76]	@ (800f55c <prvProcessTimerOrBlockTask+0x90>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d101      	bne.n	800f51c <prvProcessTimerOrBlockTask+0x50>
 800f518:	2301      	movs	r3, #1
 800f51a:	e000      	b.n	800f51e <prvProcessTimerOrBlockTask+0x52>
 800f51c:	2300      	movs	r3, #0
 800f51e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f520:	4b0f      	ldr	r3, [pc, #60]	@ (800f560 <prvProcessTimerOrBlockTask+0x94>)
 800f522:	6818      	ldr	r0, [r3, #0]
 800f524:	687a      	ldr	r2, [r7, #4]
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	1ad3      	subs	r3, r2, r3
 800f52a:	683a      	ldr	r2, [r7, #0]
 800f52c:	4619      	mov	r1, r3
 800f52e:	f7fe fc83 	bl	800de38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f532:	f7fe fef1 	bl	800e318 <xTaskResumeAll>
 800f536:	4603      	mov	r3, r0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d10a      	bne.n	800f552 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f53c:	4b09      	ldr	r3, [pc, #36]	@ (800f564 <prvProcessTimerOrBlockTask+0x98>)
 800f53e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f542:	601a      	str	r2, [r3, #0]
 800f544:	f3bf 8f4f 	dsb	sy
 800f548:	f3bf 8f6f 	isb	sy
}
 800f54c:	e001      	b.n	800f552 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f54e:	f7fe fee3 	bl	800e318 <xTaskResumeAll>
}
 800f552:	bf00      	nop
 800f554:	3710      	adds	r7, #16
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	200010a4 	.word	0x200010a4
 800f560:	200010a8 	.word	0x200010a8
 800f564:	e000ed04 	.word	0xe000ed04

0800f568 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f568:	b480      	push	{r7}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f570:	4b0e      	ldr	r3, [pc, #56]	@ (800f5ac <prvGetNextExpireTime+0x44>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d101      	bne.n	800f57e <prvGetNextExpireTime+0x16>
 800f57a:	2201      	movs	r2, #1
 800f57c:	e000      	b.n	800f580 <prvGetNextExpireTime+0x18>
 800f57e:	2200      	movs	r2, #0
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d105      	bne.n	800f598 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f58c:	4b07      	ldr	r3, [pc, #28]	@ (800f5ac <prvGetNextExpireTime+0x44>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	60fb      	str	r3, [r7, #12]
 800f596:	e001      	b.n	800f59c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f598:	2300      	movs	r3, #0
 800f59a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f59c:	68fb      	ldr	r3, [r7, #12]
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3714      	adds	r7, #20
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr
 800f5aa:	bf00      	nop
 800f5ac:	200010a0 	.word	0x200010a0

0800f5b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f5b8:	f7fe ff4c 	bl	800e454 <xTaskGetTickCount>
 800f5bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f5be:	4b0b      	ldr	r3, [pc, #44]	@ (800f5ec <prvSampleTimeNow+0x3c>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	68fa      	ldr	r2, [r7, #12]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d205      	bcs.n	800f5d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f5c8:	f000 f93a 	bl	800f840 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2201      	movs	r2, #1
 800f5d0:	601a      	str	r2, [r3, #0]
 800f5d2:	e002      	b.n	800f5da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f5da:	4a04      	ldr	r2, [pc, #16]	@ (800f5ec <prvSampleTimeNow+0x3c>)
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3710      	adds	r7, #16
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	200010b0 	.word	0x200010b0

0800f5f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b086      	sub	sp, #24
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	60b9      	str	r1, [r7, #8]
 800f5fa:	607a      	str	r2, [r7, #4]
 800f5fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f5fe:	2300      	movs	r3, #0
 800f600:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	68ba      	ldr	r2, [r7, #8]
 800f606:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	68fa      	ldr	r2, [r7, #12]
 800f60c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f60e:	68ba      	ldr	r2, [r7, #8]
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	429a      	cmp	r2, r3
 800f614:	d812      	bhi.n	800f63c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f616:	687a      	ldr	r2, [r7, #4]
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	1ad2      	subs	r2, r2, r3
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	699b      	ldr	r3, [r3, #24]
 800f620:	429a      	cmp	r2, r3
 800f622:	d302      	bcc.n	800f62a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f624:	2301      	movs	r3, #1
 800f626:	617b      	str	r3, [r7, #20]
 800f628:	e01b      	b.n	800f662 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f62a:	4b10      	ldr	r3, [pc, #64]	@ (800f66c <prvInsertTimerInActiveList+0x7c>)
 800f62c:	681a      	ldr	r2, [r3, #0]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	3304      	adds	r3, #4
 800f632:	4619      	mov	r1, r3
 800f634:	4610      	mov	r0, r2
 800f636:	f7fd fc38 	bl	800ceaa <vListInsert>
 800f63a:	e012      	b.n	800f662 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	429a      	cmp	r2, r3
 800f642:	d206      	bcs.n	800f652 <prvInsertTimerInActiveList+0x62>
 800f644:	68ba      	ldr	r2, [r7, #8]
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d302      	bcc.n	800f652 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f64c:	2301      	movs	r3, #1
 800f64e:	617b      	str	r3, [r7, #20]
 800f650:	e007      	b.n	800f662 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f652:	4b07      	ldr	r3, [pc, #28]	@ (800f670 <prvInsertTimerInActiveList+0x80>)
 800f654:	681a      	ldr	r2, [r3, #0]
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	3304      	adds	r3, #4
 800f65a:	4619      	mov	r1, r3
 800f65c:	4610      	mov	r0, r2
 800f65e:	f7fd fc24 	bl	800ceaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f662:	697b      	ldr	r3, [r7, #20]
}
 800f664:	4618      	mov	r0, r3
 800f666:	3718      	adds	r7, #24
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}
 800f66c:	200010a4 	.word	0x200010a4
 800f670:	200010a0 	.word	0x200010a0

0800f674 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b08e      	sub	sp, #56	@ 0x38
 800f678:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f67a:	e0ce      	b.n	800f81a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	da19      	bge.n	800f6b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f682:	1d3b      	adds	r3, r7, #4
 800f684:	3304      	adds	r3, #4
 800f686:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d10b      	bne.n	800f6a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f692:	f383 8811 	msr	BASEPRI, r3
 800f696:	f3bf 8f6f 	isb	sy
 800f69a:	f3bf 8f4f 	dsb	sy
 800f69e:	61fb      	str	r3, [r7, #28]
}
 800f6a0:	bf00      	nop
 800f6a2:	bf00      	nop
 800f6a4:	e7fd      	b.n	800f6a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6ac:	6850      	ldr	r0, [r2, #4]
 800f6ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6b0:	6892      	ldr	r2, [r2, #8]
 800f6b2:	4611      	mov	r1, r2
 800f6b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f2c0 80ae 	blt.w	800f81a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6c4:	695b      	ldr	r3, [r3, #20]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d004      	beq.n	800f6d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6cc:	3304      	adds	r3, #4
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7fd fc24 	bl	800cf1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f6d4:	463b      	mov	r3, r7
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7ff ff6a 	bl	800f5b0 <prvSampleTimeNow>
 800f6dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2b09      	cmp	r3, #9
 800f6e2:	f200 8097 	bhi.w	800f814 <prvProcessReceivedCommands+0x1a0>
 800f6e6:	a201      	add	r2, pc, #4	@ (adr r2, 800f6ec <prvProcessReceivedCommands+0x78>)
 800f6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ec:	0800f715 	.word	0x0800f715
 800f6f0:	0800f715 	.word	0x0800f715
 800f6f4:	0800f715 	.word	0x0800f715
 800f6f8:	0800f78b 	.word	0x0800f78b
 800f6fc:	0800f79f 	.word	0x0800f79f
 800f700:	0800f7eb 	.word	0x0800f7eb
 800f704:	0800f715 	.word	0x0800f715
 800f708:	0800f715 	.word	0x0800f715
 800f70c:	0800f78b 	.word	0x0800f78b
 800f710:	0800f79f 	.word	0x0800f79f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f716:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f71a:	f043 0301 	orr.w	r3, r3, #1
 800f71e:	b2da      	uxtb	r2, r3
 800f720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f722:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f726:	68ba      	ldr	r2, [r7, #8]
 800f728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f72a:	699b      	ldr	r3, [r3, #24]
 800f72c:	18d1      	adds	r1, r2, r3
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f734:	f7ff ff5c 	bl	800f5f0 <prvInsertTimerInActiveList>
 800f738:	4603      	mov	r3, r0
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d06c      	beq.n	800f818 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f740:	6a1b      	ldr	r3, [r3, #32]
 800f742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f744:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f74c:	f003 0304 	and.w	r3, r3, #4
 800f750:	2b00      	cmp	r3, #0
 800f752:	d061      	beq.n	800f818 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f754:	68ba      	ldr	r2, [r7, #8]
 800f756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f758:	699b      	ldr	r3, [r3, #24]
 800f75a:	441a      	add	r2, r3
 800f75c:	2300      	movs	r3, #0
 800f75e:	9300      	str	r3, [sp, #0]
 800f760:	2300      	movs	r3, #0
 800f762:	2100      	movs	r1, #0
 800f764:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f766:	f7ff fe01 	bl	800f36c <xTimerGenericCommand>
 800f76a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f76c:	6a3b      	ldr	r3, [r7, #32]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d152      	bne.n	800f818 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f776:	f383 8811 	msr	BASEPRI, r3
 800f77a:	f3bf 8f6f 	isb	sy
 800f77e:	f3bf 8f4f 	dsb	sy
 800f782:	61bb      	str	r3, [r7, #24]
}
 800f784:	bf00      	nop
 800f786:	bf00      	nop
 800f788:	e7fd      	b.n	800f786 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f78c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f790:	f023 0301 	bic.w	r3, r3, #1
 800f794:	b2da      	uxtb	r2, r3
 800f796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f798:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f79c:	e03d      	b.n	800f81a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f7a4:	f043 0301 	orr.w	r3, r3, #1
 800f7a8:	b2da      	uxtb	r2, r3
 800f7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f7b0:	68ba      	ldr	r2, [r7, #8]
 800f7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7b8:	699b      	ldr	r3, [r3, #24]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d10b      	bne.n	800f7d6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c2:	f383 8811 	msr	BASEPRI, r3
 800f7c6:	f3bf 8f6f 	isb	sy
 800f7ca:	f3bf 8f4f 	dsb	sy
 800f7ce:	617b      	str	r3, [r7, #20]
}
 800f7d0:	bf00      	nop
 800f7d2:	bf00      	nop
 800f7d4:	e7fd      	b.n	800f7d2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7d8:	699a      	ldr	r2, [r3, #24]
 800f7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7dc:	18d1      	adds	r1, r2, r3
 800f7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f7e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7e4:	f7ff ff04 	bl	800f5f0 <prvInsertTimerInActiveList>
					break;
 800f7e8:	e017      	b.n	800f81a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f7f0:	f003 0302 	and.w	r3, r3, #2
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d103      	bne.n	800f800 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f7f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7fa:	f000 fbe5 	bl	800ffc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f7fe:	e00c      	b.n	800f81a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f802:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f806:	f023 0301 	bic.w	r3, r3, #1
 800f80a:	b2da      	uxtb	r2, r3
 800f80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f80e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f812:	e002      	b.n	800f81a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f814:	bf00      	nop
 800f816:	e000      	b.n	800f81a <prvProcessReceivedCommands+0x1a6>
					break;
 800f818:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f81a:	4b08      	ldr	r3, [pc, #32]	@ (800f83c <prvProcessReceivedCommands+0x1c8>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	1d39      	adds	r1, r7, #4
 800f820:	2200      	movs	r2, #0
 800f822:	4618      	mov	r0, r3
 800f824:	f7fd ff42 	bl	800d6ac <xQueueReceive>
 800f828:	4603      	mov	r3, r0
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	f47f af26 	bne.w	800f67c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f830:	bf00      	nop
 800f832:	bf00      	nop
 800f834:	3730      	adds	r7, #48	@ 0x30
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}
 800f83a:	bf00      	nop
 800f83c:	200010a8 	.word	0x200010a8

0800f840 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b088      	sub	sp, #32
 800f844:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f846:	e049      	b.n	800f8dc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f848:	4b2e      	ldr	r3, [pc, #184]	@ (800f904 <prvSwitchTimerLists+0xc4>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f852:	4b2c      	ldr	r3, [pc, #176]	@ (800f904 <prvSwitchTimerLists+0xc4>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	68db      	ldr	r3, [r3, #12]
 800f858:	68db      	ldr	r3, [r3, #12]
 800f85a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	3304      	adds	r3, #4
 800f860:	4618      	mov	r0, r3
 800f862:	f7fd fb5b 	bl	800cf1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	6a1b      	ldr	r3, [r3, #32]
 800f86a:	68f8      	ldr	r0, [r7, #12]
 800f86c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f874:	f003 0304 	and.w	r3, r3, #4
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d02f      	beq.n	800f8dc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	699b      	ldr	r3, [r3, #24]
 800f880:	693a      	ldr	r2, [r7, #16]
 800f882:	4413      	add	r3, r2
 800f884:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f886:	68ba      	ldr	r2, [r7, #8]
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d90e      	bls.n	800f8ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	68ba      	ldr	r2, [r7, #8]
 800f892:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	68fa      	ldr	r2, [r7, #12]
 800f898:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f89a:	4b1a      	ldr	r3, [pc, #104]	@ (800f904 <prvSwitchTimerLists+0xc4>)
 800f89c:	681a      	ldr	r2, [r3, #0]
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	3304      	adds	r3, #4
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	4610      	mov	r0, r2
 800f8a6:	f7fd fb00 	bl	800ceaa <vListInsert>
 800f8aa:	e017      	b.n	800f8dc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	9300      	str	r3, [sp, #0]
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	693a      	ldr	r2, [r7, #16]
 800f8b4:	2100      	movs	r1, #0
 800f8b6:	68f8      	ldr	r0, [r7, #12]
 800f8b8:	f7ff fd58 	bl	800f36c <xTimerGenericCommand>
 800f8bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d10b      	bne.n	800f8dc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8c8:	f383 8811 	msr	BASEPRI, r3
 800f8cc:	f3bf 8f6f 	isb	sy
 800f8d0:	f3bf 8f4f 	dsb	sy
 800f8d4:	603b      	str	r3, [r7, #0]
}
 800f8d6:	bf00      	nop
 800f8d8:	bf00      	nop
 800f8da:	e7fd      	b.n	800f8d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f8dc:	4b09      	ldr	r3, [pc, #36]	@ (800f904 <prvSwitchTimerLists+0xc4>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d1b0      	bne.n	800f848 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f8e6:	4b07      	ldr	r3, [pc, #28]	@ (800f904 <prvSwitchTimerLists+0xc4>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f8ec:	4b06      	ldr	r3, [pc, #24]	@ (800f908 <prvSwitchTimerLists+0xc8>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	4a04      	ldr	r2, [pc, #16]	@ (800f904 <prvSwitchTimerLists+0xc4>)
 800f8f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f8f4:	4a04      	ldr	r2, [pc, #16]	@ (800f908 <prvSwitchTimerLists+0xc8>)
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	6013      	str	r3, [r2, #0]
}
 800f8fa:	bf00      	nop
 800f8fc:	3718      	adds	r7, #24
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}
 800f902:	bf00      	nop
 800f904:	200010a0 	.word	0x200010a0
 800f908:	200010a4 	.word	0x200010a4

0800f90c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b082      	sub	sp, #8
 800f910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f912:	f000 f969 	bl	800fbe8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f916:	4b15      	ldr	r3, [pc, #84]	@ (800f96c <prvCheckForValidListAndQueue+0x60>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d120      	bne.n	800f960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f91e:	4814      	ldr	r0, [pc, #80]	@ (800f970 <prvCheckForValidListAndQueue+0x64>)
 800f920:	f7fd fa72 	bl	800ce08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f924:	4813      	ldr	r0, [pc, #76]	@ (800f974 <prvCheckForValidListAndQueue+0x68>)
 800f926:	f7fd fa6f 	bl	800ce08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f92a:	4b13      	ldr	r3, [pc, #76]	@ (800f978 <prvCheckForValidListAndQueue+0x6c>)
 800f92c:	4a10      	ldr	r2, [pc, #64]	@ (800f970 <prvCheckForValidListAndQueue+0x64>)
 800f92e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f930:	4b12      	ldr	r3, [pc, #72]	@ (800f97c <prvCheckForValidListAndQueue+0x70>)
 800f932:	4a10      	ldr	r2, [pc, #64]	@ (800f974 <prvCheckForValidListAndQueue+0x68>)
 800f934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f936:	2300      	movs	r3, #0
 800f938:	9300      	str	r3, [sp, #0]
 800f93a:	4b11      	ldr	r3, [pc, #68]	@ (800f980 <prvCheckForValidListAndQueue+0x74>)
 800f93c:	4a11      	ldr	r2, [pc, #68]	@ (800f984 <prvCheckForValidListAndQueue+0x78>)
 800f93e:	2110      	movs	r1, #16
 800f940:	200a      	movs	r0, #10
 800f942:	f7fd fb7f 	bl	800d044 <xQueueGenericCreateStatic>
 800f946:	4603      	mov	r3, r0
 800f948:	4a08      	ldr	r2, [pc, #32]	@ (800f96c <prvCheckForValidListAndQueue+0x60>)
 800f94a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f94c:	4b07      	ldr	r3, [pc, #28]	@ (800f96c <prvCheckForValidListAndQueue+0x60>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d005      	beq.n	800f960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f954:	4b05      	ldr	r3, [pc, #20]	@ (800f96c <prvCheckForValidListAndQueue+0x60>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	490b      	ldr	r1, [pc, #44]	@ (800f988 <prvCheckForValidListAndQueue+0x7c>)
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7fe fa42 	bl	800dde4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f960:	f000 f974 	bl	800fc4c <vPortExitCritical>
}
 800f964:	bf00      	nop
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	200010a8 	.word	0x200010a8
 800f970:	20001078 	.word	0x20001078
 800f974:	2000108c 	.word	0x2000108c
 800f978:	200010a0 	.word	0x200010a0
 800f97c:	200010a4 	.word	0x200010a4
 800f980:	20001154 	.word	0x20001154
 800f984:	200010b4 	.word	0x200010b4
 800f988:	08011cd8 	.word	0x08011cd8

0800f98c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f98c:	b480      	push	{r7}
 800f98e:	b085      	sub	sp, #20
 800f990:	af00      	add	r7, sp, #0
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	60b9      	str	r1, [r7, #8]
 800f996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	3b04      	subs	r3, #4
 800f99c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f9a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	3b04      	subs	r3, #4
 800f9aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	f023 0201 	bic.w	r2, r3, #1
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	3b04      	subs	r3, #4
 800f9ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f9bc:	4a0c      	ldr	r2, [pc, #48]	@ (800f9f0 <pxPortInitialiseStack+0x64>)
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	3b14      	subs	r3, #20
 800f9c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f9c8:	687a      	ldr	r2, [r7, #4]
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	3b04      	subs	r3, #4
 800f9d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f06f 0202 	mvn.w	r2, #2
 800f9da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	3b20      	subs	r3, #32
 800f9e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3714      	adds	r7, #20
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr
 800f9f0:	0800f9f5 	.word	0x0800f9f5

0800f9f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b085      	sub	sp, #20
 800f9f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f9fe:	4b13      	ldr	r3, [pc, #76]	@ (800fa4c <prvTaskExitError+0x58>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa06:	d00b      	beq.n	800fa20 <prvTaskExitError+0x2c>
	__asm volatile
 800fa08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa0c:	f383 8811 	msr	BASEPRI, r3
 800fa10:	f3bf 8f6f 	isb	sy
 800fa14:	f3bf 8f4f 	dsb	sy
 800fa18:	60fb      	str	r3, [r7, #12]
}
 800fa1a:	bf00      	nop
 800fa1c:	bf00      	nop
 800fa1e:	e7fd      	b.n	800fa1c <prvTaskExitError+0x28>
	__asm volatile
 800fa20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa24:	f383 8811 	msr	BASEPRI, r3
 800fa28:	f3bf 8f6f 	isb	sy
 800fa2c:	f3bf 8f4f 	dsb	sy
 800fa30:	60bb      	str	r3, [r7, #8]
}
 800fa32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fa34:	bf00      	nop
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d0fc      	beq.n	800fa36 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fa3c:	bf00      	nop
 800fa3e:	bf00      	nop
 800fa40:	3714      	adds	r7, #20
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr
 800fa4a:	bf00      	nop
 800fa4c:	200000a0 	.word	0x200000a0

0800fa50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fa50:	4b07      	ldr	r3, [pc, #28]	@ (800fa70 <pxCurrentTCBConst2>)
 800fa52:	6819      	ldr	r1, [r3, #0]
 800fa54:	6808      	ldr	r0, [r1, #0]
 800fa56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa5a:	f380 8809 	msr	PSP, r0
 800fa5e:	f3bf 8f6f 	isb	sy
 800fa62:	f04f 0000 	mov.w	r0, #0
 800fa66:	f380 8811 	msr	BASEPRI, r0
 800fa6a:	4770      	bx	lr
 800fa6c:	f3af 8000 	nop.w

0800fa70 <pxCurrentTCBConst2>:
 800fa70:	20000b78 	.word	0x20000b78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fa74:	bf00      	nop
 800fa76:	bf00      	nop

0800fa78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fa78:	4808      	ldr	r0, [pc, #32]	@ (800fa9c <prvPortStartFirstTask+0x24>)
 800fa7a:	6800      	ldr	r0, [r0, #0]
 800fa7c:	6800      	ldr	r0, [r0, #0]
 800fa7e:	f380 8808 	msr	MSP, r0
 800fa82:	f04f 0000 	mov.w	r0, #0
 800fa86:	f380 8814 	msr	CONTROL, r0
 800fa8a:	b662      	cpsie	i
 800fa8c:	b661      	cpsie	f
 800fa8e:	f3bf 8f4f 	dsb	sy
 800fa92:	f3bf 8f6f 	isb	sy
 800fa96:	df00      	svc	0
 800fa98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fa9a:	bf00      	nop
 800fa9c:	e000ed08 	.word	0xe000ed08

0800faa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b086      	sub	sp, #24
 800faa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800faa6:	4b47      	ldr	r3, [pc, #284]	@ (800fbc4 <xPortStartScheduler+0x124>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	4a47      	ldr	r2, [pc, #284]	@ (800fbc8 <xPortStartScheduler+0x128>)
 800faac:	4293      	cmp	r3, r2
 800faae:	d10b      	bne.n	800fac8 <xPortStartScheduler+0x28>
	__asm volatile
 800fab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fab4:	f383 8811 	msr	BASEPRI, r3
 800fab8:	f3bf 8f6f 	isb	sy
 800fabc:	f3bf 8f4f 	dsb	sy
 800fac0:	60fb      	str	r3, [r7, #12]
}
 800fac2:	bf00      	nop
 800fac4:	bf00      	nop
 800fac6:	e7fd      	b.n	800fac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fac8:	4b3e      	ldr	r3, [pc, #248]	@ (800fbc4 <xPortStartScheduler+0x124>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4a3f      	ldr	r2, [pc, #252]	@ (800fbcc <xPortStartScheduler+0x12c>)
 800face:	4293      	cmp	r3, r2
 800fad0:	d10b      	bne.n	800faea <xPortStartScheduler+0x4a>
	__asm volatile
 800fad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fad6:	f383 8811 	msr	BASEPRI, r3
 800fada:	f3bf 8f6f 	isb	sy
 800fade:	f3bf 8f4f 	dsb	sy
 800fae2:	613b      	str	r3, [r7, #16]
}
 800fae4:	bf00      	nop
 800fae6:	bf00      	nop
 800fae8:	e7fd      	b.n	800fae6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800faea:	4b39      	ldr	r3, [pc, #228]	@ (800fbd0 <xPortStartScheduler+0x130>)
 800faec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	22ff      	movs	r2, #255	@ 0xff
 800fafa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fb04:	78fb      	ldrb	r3, [r7, #3]
 800fb06:	b2db      	uxtb	r3, r3
 800fb08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fb0c:	b2da      	uxtb	r2, r3
 800fb0e:	4b31      	ldr	r3, [pc, #196]	@ (800fbd4 <xPortStartScheduler+0x134>)
 800fb10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fb12:	4b31      	ldr	r3, [pc, #196]	@ (800fbd8 <xPortStartScheduler+0x138>)
 800fb14:	2207      	movs	r2, #7
 800fb16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fb18:	e009      	b.n	800fb2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fb1a:	4b2f      	ldr	r3, [pc, #188]	@ (800fbd8 <xPortStartScheduler+0x138>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	3b01      	subs	r3, #1
 800fb20:	4a2d      	ldr	r2, [pc, #180]	@ (800fbd8 <xPortStartScheduler+0x138>)
 800fb22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fb24:	78fb      	ldrb	r3, [r7, #3]
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	005b      	lsls	r3, r3, #1
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fb2e:	78fb      	ldrb	r3, [r7, #3]
 800fb30:	b2db      	uxtb	r3, r3
 800fb32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb36:	2b80      	cmp	r3, #128	@ 0x80
 800fb38:	d0ef      	beq.n	800fb1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fb3a:	4b27      	ldr	r3, [pc, #156]	@ (800fbd8 <xPortStartScheduler+0x138>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f1c3 0307 	rsb	r3, r3, #7
 800fb42:	2b04      	cmp	r3, #4
 800fb44:	d00b      	beq.n	800fb5e <xPortStartScheduler+0xbe>
	__asm volatile
 800fb46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb4a:	f383 8811 	msr	BASEPRI, r3
 800fb4e:	f3bf 8f6f 	isb	sy
 800fb52:	f3bf 8f4f 	dsb	sy
 800fb56:	60bb      	str	r3, [r7, #8]
}
 800fb58:	bf00      	nop
 800fb5a:	bf00      	nop
 800fb5c:	e7fd      	b.n	800fb5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fb5e:	4b1e      	ldr	r3, [pc, #120]	@ (800fbd8 <xPortStartScheduler+0x138>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	021b      	lsls	r3, r3, #8
 800fb64:	4a1c      	ldr	r2, [pc, #112]	@ (800fbd8 <xPortStartScheduler+0x138>)
 800fb66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fb68:	4b1b      	ldr	r3, [pc, #108]	@ (800fbd8 <xPortStartScheduler+0x138>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fb70:	4a19      	ldr	r2, [pc, #100]	@ (800fbd8 <xPortStartScheduler+0x138>)
 800fb72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	b2da      	uxtb	r2, r3
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fb7c:	4b17      	ldr	r3, [pc, #92]	@ (800fbdc <xPortStartScheduler+0x13c>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	4a16      	ldr	r2, [pc, #88]	@ (800fbdc <xPortStartScheduler+0x13c>)
 800fb82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fb86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fb88:	4b14      	ldr	r3, [pc, #80]	@ (800fbdc <xPortStartScheduler+0x13c>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	4a13      	ldr	r2, [pc, #76]	@ (800fbdc <xPortStartScheduler+0x13c>)
 800fb8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fb92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fb94:	f000 f8da 	bl	800fd4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fb98:	4b11      	ldr	r3, [pc, #68]	@ (800fbe0 <xPortStartScheduler+0x140>)
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fb9e:	f000 f8f9 	bl	800fd94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fba2:	4b10      	ldr	r3, [pc, #64]	@ (800fbe4 <xPortStartScheduler+0x144>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	4a0f      	ldr	r2, [pc, #60]	@ (800fbe4 <xPortStartScheduler+0x144>)
 800fba8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fbac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fbae:	f7ff ff63 	bl	800fa78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fbb2:	f7fe fd19 	bl	800e5e8 <vTaskSwitchContext>
	prvTaskExitError();
 800fbb6:	f7ff ff1d 	bl	800f9f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fbba:	2300      	movs	r3, #0
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3718      	adds	r7, #24
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}
 800fbc4:	e000ed00 	.word	0xe000ed00
 800fbc8:	410fc271 	.word	0x410fc271
 800fbcc:	410fc270 	.word	0x410fc270
 800fbd0:	e000e400 	.word	0xe000e400
 800fbd4:	200011a4 	.word	0x200011a4
 800fbd8:	200011a8 	.word	0x200011a8
 800fbdc:	e000ed20 	.word	0xe000ed20
 800fbe0:	200000a0 	.word	0x200000a0
 800fbe4:	e000ef34 	.word	0xe000ef34

0800fbe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
	__asm volatile
 800fbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbf2:	f383 8811 	msr	BASEPRI, r3
 800fbf6:	f3bf 8f6f 	isb	sy
 800fbfa:	f3bf 8f4f 	dsb	sy
 800fbfe:	607b      	str	r3, [r7, #4]
}
 800fc00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fc02:	4b10      	ldr	r3, [pc, #64]	@ (800fc44 <vPortEnterCritical+0x5c>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	3301      	adds	r3, #1
 800fc08:	4a0e      	ldr	r2, [pc, #56]	@ (800fc44 <vPortEnterCritical+0x5c>)
 800fc0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fc0c:	4b0d      	ldr	r3, [pc, #52]	@ (800fc44 <vPortEnterCritical+0x5c>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	2b01      	cmp	r3, #1
 800fc12:	d110      	bne.n	800fc36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fc14:	4b0c      	ldr	r3, [pc, #48]	@ (800fc48 <vPortEnterCritical+0x60>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	b2db      	uxtb	r3, r3
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d00b      	beq.n	800fc36 <vPortEnterCritical+0x4e>
	__asm volatile
 800fc1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc22:	f383 8811 	msr	BASEPRI, r3
 800fc26:	f3bf 8f6f 	isb	sy
 800fc2a:	f3bf 8f4f 	dsb	sy
 800fc2e:	603b      	str	r3, [r7, #0]
}
 800fc30:	bf00      	nop
 800fc32:	bf00      	nop
 800fc34:	e7fd      	b.n	800fc32 <vPortEnterCritical+0x4a>
	}
}
 800fc36:	bf00      	nop
 800fc38:	370c      	adds	r7, #12
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr
 800fc42:	bf00      	nop
 800fc44:	200000a0 	.word	0x200000a0
 800fc48:	e000ed04 	.word	0xe000ed04

0800fc4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b083      	sub	sp, #12
 800fc50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fc52:	4b12      	ldr	r3, [pc, #72]	@ (800fc9c <vPortExitCritical+0x50>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d10b      	bne.n	800fc72 <vPortExitCritical+0x26>
	__asm volatile
 800fc5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc5e:	f383 8811 	msr	BASEPRI, r3
 800fc62:	f3bf 8f6f 	isb	sy
 800fc66:	f3bf 8f4f 	dsb	sy
 800fc6a:	607b      	str	r3, [r7, #4]
}
 800fc6c:	bf00      	nop
 800fc6e:	bf00      	nop
 800fc70:	e7fd      	b.n	800fc6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fc72:	4b0a      	ldr	r3, [pc, #40]	@ (800fc9c <vPortExitCritical+0x50>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	3b01      	subs	r3, #1
 800fc78:	4a08      	ldr	r2, [pc, #32]	@ (800fc9c <vPortExitCritical+0x50>)
 800fc7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fc7c:	4b07      	ldr	r3, [pc, #28]	@ (800fc9c <vPortExitCritical+0x50>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d105      	bne.n	800fc90 <vPortExitCritical+0x44>
 800fc84:	2300      	movs	r3, #0
 800fc86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	f383 8811 	msr	BASEPRI, r3
}
 800fc8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fc90:	bf00      	nop
 800fc92:	370c      	adds	r7, #12
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr
 800fc9c:	200000a0 	.word	0x200000a0

0800fca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fca0:	f3ef 8009 	mrs	r0, PSP
 800fca4:	f3bf 8f6f 	isb	sy
 800fca8:	4b15      	ldr	r3, [pc, #84]	@ (800fd00 <pxCurrentTCBConst>)
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	f01e 0f10 	tst.w	lr, #16
 800fcb0:	bf08      	it	eq
 800fcb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fcb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcba:	6010      	str	r0, [r2, #0]
 800fcbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fcc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fcc4:	f380 8811 	msr	BASEPRI, r0
 800fcc8:	f3bf 8f4f 	dsb	sy
 800fccc:	f3bf 8f6f 	isb	sy
 800fcd0:	f7fe fc8a 	bl	800e5e8 <vTaskSwitchContext>
 800fcd4:	f04f 0000 	mov.w	r0, #0
 800fcd8:	f380 8811 	msr	BASEPRI, r0
 800fcdc:	bc09      	pop	{r0, r3}
 800fcde:	6819      	ldr	r1, [r3, #0]
 800fce0:	6808      	ldr	r0, [r1, #0]
 800fce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce6:	f01e 0f10 	tst.w	lr, #16
 800fcea:	bf08      	it	eq
 800fcec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fcf0:	f380 8809 	msr	PSP, r0
 800fcf4:	f3bf 8f6f 	isb	sy
 800fcf8:	4770      	bx	lr
 800fcfa:	bf00      	nop
 800fcfc:	f3af 8000 	nop.w

0800fd00 <pxCurrentTCBConst>:
 800fd00:	20000b78 	.word	0x20000b78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fd04:	bf00      	nop
 800fd06:	bf00      	nop

0800fd08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b082      	sub	sp, #8
 800fd0c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd12:	f383 8811 	msr	BASEPRI, r3
 800fd16:	f3bf 8f6f 	isb	sy
 800fd1a:	f3bf 8f4f 	dsb	sy
 800fd1e:	607b      	str	r3, [r7, #4]
}
 800fd20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fd22:	f7fe fba7 	bl	800e474 <xTaskIncrementTick>
 800fd26:	4603      	mov	r3, r0
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d003      	beq.n	800fd34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fd2c:	4b06      	ldr	r3, [pc, #24]	@ (800fd48 <xPortSysTickHandler+0x40>)
 800fd2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd32:	601a      	str	r2, [r3, #0]
 800fd34:	2300      	movs	r3, #0
 800fd36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	f383 8811 	msr	BASEPRI, r3
}
 800fd3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fd40:	bf00      	nop
 800fd42:	3708      	adds	r7, #8
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	e000ed04 	.word	0xe000ed04

0800fd4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fd50:	4b0b      	ldr	r3, [pc, #44]	@ (800fd80 <vPortSetupTimerInterrupt+0x34>)
 800fd52:	2200      	movs	r2, #0
 800fd54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fd56:	4b0b      	ldr	r3, [pc, #44]	@ (800fd84 <vPortSetupTimerInterrupt+0x38>)
 800fd58:	2200      	movs	r2, #0
 800fd5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fd5c:	4b0a      	ldr	r3, [pc, #40]	@ (800fd88 <vPortSetupTimerInterrupt+0x3c>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	4a0a      	ldr	r2, [pc, #40]	@ (800fd8c <vPortSetupTimerInterrupt+0x40>)
 800fd62:	fba2 2303 	umull	r2, r3, r2, r3
 800fd66:	0a1b      	lsrs	r3, r3, #8
 800fd68:	4a09      	ldr	r2, [pc, #36]	@ (800fd90 <vPortSetupTimerInterrupt+0x44>)
 800fd6a:	3b01      	subs	r3, #1
 800fd6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fd6e:	4b04      	ldr	r3, [pc, #16]	@ (800fd80 <vPortSetupTimerInterrupt+0x34>)
 800fd70:	2207      	movs	r2, #7
 800fd72:	601a      	str	r2, [r3, #0]
}
 800fd74:	bf00      	nop
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr
 800fd7e:	bf00      	nop
 800fd80:	e000e010 	.word	0xe000e010
 800fd84:	e000e018 	.word	0xe000e018
 800fd88:	20000008 	.word	0x20000008
 800fd8c:	51eb851f 	.word	0x51eb851f
 800fd90:	e000e014 	.word	0xe000e014

0800fd94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fd94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fda4 <vPortEnableVFP+0x10>
 800fd98:	6801      	ldr	r1, [r0, #0]
 800fd9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fd9e:	6001      	str	r1, [r0, #0]
 800fda0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fda2:	bf00      	nop
 800fda4:	e000ed88 	.word	0xe000ed88

0800fda8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fda8:	b480      	push	{r7}
 800fdaa:	b085      	sub	sp, #20
 800fdac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fdae:	f3ef 8305 	mrs	r3, IPSR
 800fdb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2b0f      	cmp	r3, #15
 800fdb8:	d915      	bls.n	800fde6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fdba:	4a18      	ldr	r2, [pc, #96]	@ (800fe1c <vPortValidateInterruptPriority+0x74>)
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	4413      	add	r3, r2
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fdc4:	4b16      	ldr	r3, [pc, #88]	@ (800fe20 <vPortValidateInterruptPriority+0x78>)
 800fdc6:	781b      	ldrb	r3, [r3, #0]
 800fdc8:	7afa      	ldrb	r2, [r7, #11]
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d20b      	bcs.n	800fde6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fdce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdd2:	f383 8811 	msr	BASEPRI, r3
 800fdd6:	f3bf 8f6f 	isb	sy
 800fdda:	f3bf 8f4f 	dsb	sy
 800fdde:	607b      	str	r3, [r7, #4]
}
 800fde0:	bf00      	nop
 800fde2:	bf00      	nop
 800fde4:	e7fd      	b.n	800fde2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fde6:	4b0f      	ldr	r3, [pc, #60]	@ (800fe24 <vPortValidateInterruptPriority+0x7c>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fdee:	4b0e      	ldr	r3, [pc, #56]	@ (800fe28 <vPortValidateInterruptPriority+0x80>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d90b      	bls.n	800fe0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fdf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdfa:	f383 8811 	msr	BASEPRI, r3
 800fdfe:	f3bf 8f6f 	isb	sy
 800fe02:	f3bf 8f4f 	dsb	sy
 800fe06:	603b      	str	r3, [r7, #0]
}
 800fe08:	bf00      	nop
 800fe0a:	bf00      	nop
 800fe0c:	e7fd      	b.n	800fe0a <vPortValidateInterruptPriority+0x62>
	}
 800fe0e:	bf00      	nop
 800fe10:	3714      	adds	r7, #20
 800fe12:	46bd      	mov	sp, r7
 800fe14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe18:	4770      	bx	lr
 800fe1a:	bf00      	nop
 800fe1c:	e000e3f0 	.word	0xe000e3f0
 800fe20:	200011a4 	.word	0x200011a4
 800fe24:	e000ed0c 	.word	0xe000ed0c
 800fe28:	200011a8 	.word	0x200011a8

0800fe2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b08a      	sub	sp, #40	@ 0x28
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fe34:	2300      	movs	r3, #0
 800fe36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fe38:	f7fe fa60 	bl	800e2fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fe3c:	4b5c      	ldr	r3, [pc, #368]	@ (800ffb0 <pvPortMalloc+0x184>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d101      	bne.n	800fe48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fe44:	f000 f924 	bl	8010090 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fe48:	4b5a      	ldr	r3, [pc, #360]	@ (800ffb4 <pvPortMalloc+0x188>)
 800fe4a:	681a      	ldr	r2, [r3, #0]
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	4013      	ands	r3, r2
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	f040 8095 	bne.w	800ff80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d01e      	beq.n	800fe9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fe5c:	2208      	movs	r2, #8
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	4413      	add	r3, r2
 800fe62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f003 0307 	and.w	r3, r3, #7
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d015      	beq.n	800fe9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f023 0307 	bic.w	r3, r3, #7
 800fe74:	3308      	adds	r3, #8
 800fe76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f003 0307 	and.w	r3, r3, #7
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d00b      	beq.n	800fe9a <pvPortMalloc+0x6e>
	__asm volatile
 800fe82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe86:	f383 8811 	msr	BASEPRI, r3
 800fe8a:	f3bf 8f6f 	isb	sy
 800fe8e:	f3bf 8f4f 	dsb	sy
 800fe92:	617b      	str	r3, [r7, #20]
}
 800fe94:	bf00      	nop
 800fe96:	bf00      	nop
 800fe98:	e7fd      	b.n	800fe96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d06f      	beq.n	800ff80 <pvPortMalloc+0x154>
 800fea0:	4b45      	ldr	r3, [pc, #276]	@ (800ffb8 <pvPortMalloc+0x18c>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d86a      	bhi.n	800ff80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800feaa:	4b44      	ldr	r3, [pc, #272]	@ (800ffbc <pvPortMalloc+0x190>)
 800feac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800feae:	4b43      	ldr	r3, [pc, #268]	@ (800ffbc <pvPortMalloc+0x190>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800feb4:	e004      	b.n	800fec0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800feb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800feba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d903      	bls.n	800fed2 <pvPortMalloc+0xa6>
 800feca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d1f1      	bne.n	800feb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fed2:	4b37      	ldr	r3, [pc, #220]	@ (800ffb0 <pvPortMalloc+0x184>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fed8:	429a      	cmp	r2, r3
 800feda:	d051      	beq.n	800ff80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fedc:	6a3b      	ldr	r3, [r7, #32]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	2208      	movs	r2, #8
 800fee2:	4413      	add	r3, r2
 800fee4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fee8:	681a      	ldr	r2, [r3, #0]
 800feea:	6a3b      	ldr	r3, [r7, #32]
 800feec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800feee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fef0:	685a      	ldr	r2, [r3, #4]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	1ad2      	subs	r2, r2, r3
 800fef6:	2308      	movs	r3, #8
 800fef8:	005b      	lsls	r3, r3, #1
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d920      	bls.n	800ff40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fefe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	4413      	add	r3, r2
 800ff04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	f003 0307 	and.w	r3, r3, #7
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d00b      	beq.n	800ff28 <pvPortMalloc+0xfc>
	__asm volatile
 800ff10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff14:	f383 8811 	msr	BASEPRI, r3
 800ff18:	f3bf 8f6f 	isb	sy
 800ff1c:	f3bf 8f4f 	dsb	sy
 800ff20:	613b      	str	r3, [r7, #16]
}
 800ff22:	bf00      	nop
 800ff24:	bf00      	nop
 800ff26:	e7fd      	b.n	800ff24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ff28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff2a:	685a      	ldr	r2, [r3, #4]
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	1ad2      	subs	r2, r2, r3
 800ff30:	69bb      	ldr	r3, [r7, #24]
 800ff32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ff34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ff3a:	69b8      	ldr	r0, [r7, #24]
 800ff3c:	f000 f90a 	bl	8010154 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ff40:	4b1d      	ldr	r3, [pc, #116]	@ (800ffb8 <pvPortMalloc+0x18c>)
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	1ad3      	subs	r3, r2, r3
 800ff4a:	4a1b      	ldr	r2, [pc, #108]	@ (800ffb8 <pvPortMalloc+0x18c>)
 800ff4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ff4e:	4b1a      	ldr	r3, [pc, #104]	@ (800ffb8 <pvPortMalloc+0x18c>)
 800ff50:	681a      	ldr	r2, [r3, #0]
 800ff52:	4b1b      	ldr	r3, [pc, #108]	@ (800ffc0 <pvPortMalloc+0x194>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d203      	bcs.n	800ff62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ff5a:	4b17      	ldr	r3, [pc, #92]	@ (800ffb8 <pvPortMalloc+0x18c>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	4a18      	ldr	r2, [pc, #96]	@ (800ffc0 <pvPortMalloc+0x194>)
 800ff60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ff62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff64:	685a      	ldr	r2, [r3, #4]
 800ff66:	4b13      	ldr	r3, [pc, #76]	@ (800ffb4 <pvPortMalloc+0x188>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	431a      	orrs	r2, r3
 800ff6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ff70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff72:	2200      	movs	r2, #0
 800ff74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ff76:	4b13      	ldr	r3, [pc, #76]	@ (800ffc4 <pvPortMalloc+0x198>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	4a11      	ldr	r2, [pc, #68]	@ (800ffc4 <pvPortMalloc+0x198>)
 800ff7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ff80:	f7fe f9ca 	bl	800e318 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	f003 0307 	and.w	r3, r3, #7
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d00b      	beq.n	800ffa6 <pvPortMalloc+0x17a>
	__asm volatile
 800ff8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff92:	f383 8811 	msr	BASEPRI, r3
 800ff96:	f3bf 8f6f 	isb	sy
 800ff9a:	f3bf 8f4f 	dsb	sy
 800ff9e:	60fb      	str	r3, [r7, #12]
}
 800ffa0:	bf00      	nop
 800ffa2:	bf00      	nop
 800ffa4:	e7fd      	b.n	800ffa2 <pvPortMalloc+0x176>
	return pvReturn;
 800ffa6:	69fb      	ldr	r3, [r7, #28]
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3728      	adds	r7, #40	@ 0x28
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	200091b4 	.word	0x200091b4
 800ffb4:	200091c8 	.word	0x200091c8
 800ffb8:	200091b8 	.word	0x200091b8
 800ffbc:	200091ac 	.word	0x200091ac
 800ffc0:	200091bc 	.word	0x200091bc
 800ffc4:	200091c0 	.word	0x200091c0

0800ffc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b086      	sub	sp, #24
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d04f      	beq.n	801007a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ffda:	2308      	movs	r3, #8
 800ffdc:	425b      	negs	r3, r3
 800ffde:	697a      	ldr	r2, [r7, #20]
 800ffe0:	4413      	add	r3, r2
 800ffe2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	685a      	ldr	r2, [r3, #4]
 800ffec:	4b25      	ldr	r3, [pc, #148]	@ (8010084 <vPortFree+0xbc>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	4013      	ands	r3, r2
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d10b      	bne.n	801000e <vPortFree+0x46>
	__asm volatile
 800fff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fffa:	f383 8811 	msr	BASEPRI, r3
 800fffe:	f3bf 8f6f 	isb	sy
 8010002:	f3bf 8f4f 	dsb	sy
 8010006:	60fb      	str	r3, [r7, #12]
}
 8010008:	bf00      	nop
 801000a:	bf00      	nop
 801000c:	e7fd      	b.n	801000a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d00b      	beq.n	801002e <vPortFree+0x66>
	__asm volatile
 8010016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801001a:	f383 8811 	msr	BASEPRI, r3
 801001e:	f3bf 8f6f 	isb	sy
 8010022:	f3bf 8f4f 	dsb	sy
 8010026:	60bb      	str	r3, [r7, #8]
}
 8010028:	bf00      	nop
 801002a:	bf00      	nop
 801002c:	e7fd      	b.n	801002a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	685a      	ldr	r2, [r3, #4]
 8010032:	4b14      	ldr	r3, [pc, #80]	@ (8010084 <vPortFree+0xbc>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	4013      	ands	r3, r2
 8010038:	2b00      	cmp	r3, #0
 801003a:	d01e      	beq.n	801007a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d11a      	bne.n	801007a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	685a      	ldr	r2, [r3, #4]
 8010048:	4b0e      	ldr	r3, [pc, #56]	@ (8010084 <vPortFree+0xbc>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	43db      	mvns	r3, r3
 801004e:	401a      	ands	r2, r3
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010054:	f7fe f952 	bl	800e2fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	685a      	ldr	r2, [r3, #4]
 801005c:	4b0a      	ldr	r3, [pc, #40]	@ (8010088 <vPortFree+0xc0>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4413      	add	r3, r2
 8010062:	4a09      	ldr	r2, [pc, #36]	@ (8010088 <vPortFree+0xc0>)
 8010064:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010066:	6938      	ldr	r0, [r7, #16]
 8010068:	f000 f874 	bl	8010154 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801006c:	4b07      	ldr	r3, [pc, #28]	@ (801008c <vPortFree+0xc4>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	3301      	adds	r3, #1
 8010072:	4a06      	ldr	r2, [pc, #24]	@ (801008c <vPortFree+0xc4>)
 8010074:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010076:	f7fe f94f 	bl	800e318 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801007a:	bf00      	nop
 801007c:	3718      	adds	r7, #24
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	200091c8 	.word	0x200091c8
 8010088:	200091b8 	.word	0x200091b8
 801008c:	200091c4 	.word	0x200091c4

08010090 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010090:	b480      	push	{r7}
 8010092:	b085      	sub	sp, #20
 8010094:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801009a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801009c:	4b27      	ldr	r3, [pc, #156]	@ (801013c <prvHeapInit+0xac>)
 801009e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f003 0307 	and.w	r3, r3, #7
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d00c      	beq.n	80100c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	3307      	adds	r3, #7
 80100ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f023 0307 	bic.w	r3, r3, #7
 80100b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80100b8:	68ba      	ldr	r2, [r7, #8]
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	1ad3      	subs	r3, r2, r3
 80100be:	4a1f      	ldr	r2, [pc, #124]	@ (801013c <prvHeapInit+0xac>)
 80100c0:	4413      	add	r3, r2
 80100c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80100c8:	4a1d      	ldr	r2, [pc, #116]	@ (8010140 <prvHeapInit+0xb0>)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80100ce:	4b1c      	ldr	r3, [pc, #112]	@ (8010140 <prvHeapInit+0xb0>)
 80100d0:	2200      	movs	r2, #0
 80100d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	68ba      	ldr	r2, [r7, #8]
 80100d8:	4413      	add	r3, r2
 80100da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80100dc:	2208      	movs	r2, #8
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	1a9b      	subs	r3, r3, r2
 80100e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f023 0307 	bic.w	r3, r3, #7
 80100ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	4a15      	ldr	r2, [pc, #84]	@ (8010144 <prvHeapInit+0xb4>)
 80100f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80100f2:	4b14      	ldr	r3, [pc, #80]	@ (8010144 <prvHeapInit+0xb4>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	2200      	movs	r2, #0
 80100f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80100fa:	4b12      	ldr	r3, [pc, #72]	@ (8010144 <prvHeapInit+0xb4>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	2200      	movs	r2, #0
 8010100:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	68fa      	ldr	r2, [r7, #12]
 801010a:	1ad2      	subs	r2, r2, r3
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010110:	4b0c      	ldr	r3, [pc, #48]	@ (8010144 <prvHeapInit+0xb4>)
 8010112:	681a      	ldr	r2, [r3, #0]
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	4a0a      	ldr	r2, [pc, #40]	@ (8010148 <prvHeapInit+0xb8>)
 801011e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	4a09      	ldr	r2, [pc, #36]	@ (801014c <prvHeapInit+0xbc>)
 8010126:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010128:	4b09      	ldr	r3, [pc, #36]	@ (8010150 <prvHeapInit+0xc0>)
 801012a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801012e:	601a      	str	r2, [r3, #0]
}
 8010130:	bf00      	nop
 8010132:	3714      	adds	r7, #20
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr
 801013c:	200011ac 	.word	0x200011ac
 8010140:	200091ac 	.word	0x200091ac
 8010144:	200091b4 	.word	0x200091b4
 8010148:	200091bc 	.word	0x200091bc
 801014c:	200091b8 	.word	0x200091b8
 8010150:	200091c8 	.word	0x200091c8

08010154 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010154:	b480      	push	{r7}
 8010156:	b085      	sub	sp, #20
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801015c:	4b28      	ldr	r3, [pc, #160]	@ (8010200 <prvInsertBlockIntoFreeList+0xac>)
 801015e:	60fb      	str	r3, [r7, #12]
 8010160:	e002      	b.n	8010168 <prvInsertBlockIntoFreeList+0x14>
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	60fb      	str	r3, [r7, #12]
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	429a      	cmp	r2, r3
 8010170:	d8f7      	bhi.n	8010162 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	685b      	ldr	r3, [r3, #4]
 801017a:	68ba      	ldr	r2, [r7, #8]
 801017c:	4413      	add	r3, r2
 801017e:	687a      	ldr	r2, [r7, #4]
 8010180:	429a      	cmp	r2, r3
 8010182:	d108      	bne.n	8010196 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	685a      	ldr	r2, [r3, #4]
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	441a      	add	r2, r3
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	68ba      	ldr	r2, [r7, #8]
 80101a0:	441a      	add	r2, r3
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d118      	bne.n	80101dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	4b15      	ldr	r3, [pc, #84]	@ (8010204 <prvInsertBlockIntoFreeList+0xb0>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d00d      	beq.n	80101d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	685a      	ldr	r2, [r3, #4]
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	441a      	add	r2, r3
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	681a      	ldr	r2, [r3, #0]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	601a      	str	r2, [r3, #0]
 80101d0:	e008      	b.n	80101e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80101d2:	4b0c      	ldr	r3, [pc, #48]	@ (8010204 <prvInsertBlockIntoFreeList+0xb0>)
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	601a      	str	r2, [r3, #0]
 80101da:	e003      	b.n	80101e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80101e4:	68fa      	ldr	r2, [r7, #12]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d002      	beq.n	80101f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	687a      	ldr	r2, [r7, #4]
 80101f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80101f2:	bf00      	nop
 80101f4:	3714      	adds	r7, #20
 80101f6:	46bd      	mov	sp, r7
 80101f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fc:	4770      	bx	lr
 80101fe:	bf00      	nop
 8010200:	200091ac 	.word	0x200091ac
 8010204:	200091b4 	.word	0x200091b4

08010208 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801020c:	2200      	movs	r2, #0
 801020e:	4912      	ldr	r1, [pc, #72]	@ (8010258 <MX_USB_Device_Init+0x50>)
 8010210:	4812      	ldr	r0, [pc, #72]	@ (801025c <MX_USB_Device_Init+0x54>)
 8010212:	f7fa fee1 	bl	800afd8 <USBD_Init>
 8010216:	4603      	mov	r3, r0
 8010218:	2b00      	cmp	r3, #0
 801021a:	d001      	beq.n	8010220 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801021c:	f7f0 fd06 	bl	8000c2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010220:	490f      	ldr	r1, [pc, #60]	@ (8010260 <MX_USB_Device_Init+0x58>)
 8010222:	480e      	ldr	r0, [pc, #56]	@ (801025c <MX_USB_Device_Init+0x54>)
 8010224:	f7fa ff16 	bl	800b054 <USBD_RegisterClass>
 8010228:	4603      	mov	r3, r0
 801022a:	2b00      	cmp	r3, #0
 801022c:	d001      	beq.n	8010232 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801022e:	f7f0 fcfd 	bl	8000c2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8010232:	490c      	ldr	r1, [pc, #48]	@ (8010264 <MX_USB_Device_Init+0x5c>)
 8010234:	4809      	ldr	r0, [pc, #36]	@ (801025c <MX_USB_Device_Init+0x54>)
 8010236:	f7fa fdff 	bl	800ae38 <USBD_CDC_RegisterInterface>
 801023a:	4603      	mov	r3, r0
 801023c:	2b00      	cmp	r3, #0
 801023e:	d001      	beq.n	8010244 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8010240:	f7f0 fcf4 	bl	8000c2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010244:	4805      	ldr	r0, [pc, #20]	@ (801025c <MX_USB_Device_Init+0x54>)
 8010246:	f7fa ff49 	bl	800b0dc <USBD_Start>
 801024a:	4603      	mov	r3, r0
 801024c:	2b00      	cmp	r3, #0
 801024e:	d001      	beq.n	8010254 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8010250:	f7f0 fcec 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010254:	bf00      	nop
 8010256:	bd80      	pop	{r7, pc}
 8010258:	200000b8 	.word	0x200000b8
 801025c:	200091cc 	.word	0x200091cc
 8010260:	20000020 	.word	0x20000020
 8010264:	200000a4 	.word	0x200000a4

08010268 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801026c:	2200      	movs	r2, #0
 801026e:	4905      	ldr	r1, [pc, #20]	@ (8010284 <CDC_Init_FS+0x1c>)
 8010270:	4805      	ldr	r0, [pc, #20]	@ (8010288 <CDC_Init_FS+0x20>)
 8010272:	f7fa fdfb 	bl	800ae6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010276:	4905      	ldr	r1, [pc, #20]	@ (801028c <CDC_Init_FS+0x24>)
 8010278:	4803      	ldr	r0, [pc, #12]	@ (8010288 <CDC_Init_FS+0x20>)
 801027a:	f7fa fe19 	bl	800aeb0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801027e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010280:	4618      	mov	r0, r3
 8010282:	bd80      	pop	{r7, pc}
 8010284:	20009ca8 	.word	0x20009ca8
 8010288:	200091cc 	.word	0x200091cc
 801028c:	200094a8 	.word	0x200094a8

08010290 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010290:	b480      	push	{r7}
 8010292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010294:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010296:	4618      	mov	r0, r3
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr

080102a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	4603      	mov	r3, r0
 80102a8:	6039      	str	r1, [r7, #0]
 80102aa:	71fb      	strb	r3, [r7, #7]
 80102ac:	4613      	mov	r3, r2
 80102ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80102b0:	79fb      	ldrb	r3, [r7, #7]
 80102b2:	2b23      	cmp	r3, #35	@ 0x23
 80102b4:	d84a      	bhi.n	801034c <CDC_Control_FS+0xac>
 80102b6:	a201      	add	r2, pc, #4	@ (adr r2, 80102bc <CDC_Control_FS+0x1c>)
 80102b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102bc:	0801034d 	.word	0x0801034d
 80102c0:	0801034d 	.word	0x0801034d
 80102c4:	0801034d 	.word	0x0801034d
 80102c8:	0801034d 	.word	0x0801034d
 80102cc:	0801034d 	.word	0x0801034d
 80102d0:	0801034d 	.word	0x0801034d
 80102d4:	0801034d 	.word	0x0801034d
 80102d8:	0801034d 	.word	0x0801034d
 80102dc:	0801034d 	.word	0x0801034d
 80102e0:	0801034d 	.word	0x0801034d
 80102e4:	0801034d 	.word	0x0801034d
 80102e8:	0801034d 	.word	0x0801034d
 80102ec:	0801034d 	.word	0x0801034d
 80102f0:	0801034d 	.word	0x0801034d
 80102f4:	0801034d 	.word	0x0801034d
 80102f8:	0801034d 	.word	0x0801034d
 80102fc:	0801034d 	.word	0x0801034d
 8010300:	0801034d 	.word	0x0801034d
 8010304:	0801034d 	.word	0x0801034d
 8010308:	0801034d 	.word	0x0801034d
 801030c:	0801034d 	.word	0x0801034d
 8010310:	0801034d 	.word	0x0801034d
 8010314:	0801034d 	.word	0x0801034d
 8010318:	0801034d 	.word	0x0801034d
 801031c:	0801034d 	.word	0x0801034d
 8010320:	0801034d 	.word	0x0801034d
 8010324:	0801034d 	.word	0x0801034d
 8010328:	0801034d 	.word	0x0801034d
 801032c:	0801034d 	.word	0x0801034d
 8010330:	0801034d 	.word	0x0801034d
 8010334:	0801034d 	.word	0x0801034d
 8010338:	0801034d 	.word	0x0801034d
 801033c:	0801034d 	.word	0x0801034d
 8010340:	0801034d 	.word	0x0801034d
 8010344:	0801034d 	.word	0x0801034d
 8010348:	0801034d 	.word	0x0801034d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801034c:	bf00      	nop
  }

  return (USBD_OK);
 801034e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010350:	4618      	mov	r0, r3
 8010352:	370c      	adds	r7, #12
 8010354:	46bd      	mov	sp, r7
 8010356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035a:	4770      	bx	lr

0801035c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b082      	sub	sp, #8
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
 8010364:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010366:	6879      	ldr	r1, [r7, #4]
 8010368:	4805      	ldr	r0, [pc, #20]	@ (8010380 <CDC_Receive_FS+0x24>)
 801036a:	f7fa fda1 	bl	800aeb0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801036e:	4804      	ldr	r0, [pc, #16]	@ (8010380 <CDC_Receive_FS+0x24>)
 8010370:	f7fa fdfc 	bl	800af6c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010374:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010376:	4618      	mov	r0, r3
 8010378:	3708      	adds	r7, #8
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop
 8010380:	200091cc 	.word	0x200091cc

08010384 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	460b      	mov	r3, r1
 801038e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010390:	2300      	movs	r3, #0
 8010392:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010394:	4b0d      	ldr	r3, [pc, #52]	@ (80103cc <CDC_Transmit_FS+0x48>)
 8010396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801039a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d001      	beq.n	80103aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80103a6:	2301      	movs	r3, #1
 80103a8:	e00b      	b.n	80103c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80103aa:	887b      	ldrh	r3, [r7, #2]
 80103ac:	461a      	mov	r2, r3
 80103ae:	6879      	ldr	r1, [r7, #4]
 80103b0:	4806      	ldr	r0, [pc, #24]	@ (80103cc <CDC_Transmit_FS+0x48>)
 80103b2:	f7fa fd5b 	bl	800ae6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80103b6:	4805      	ldr	r0, [pc, #20]	@ (80103cc <CDC_Transmit_FS+0x48>)
 80103b8:	f7fa fd98 	bl	800aeec <USBD_CDC_TransmitPacket>
 80103bc:	4603      	mov	r3, r0
 80103be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80103c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	3710      	adds	r7, #16
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	bf00      	nop
 80103cc:	200091cc 	.word	0x200091cc

080103d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80103d0:	b480      	push	{r7}
 80103d2:	b087      	sub	sp, #28
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	60f8      	str	r0, [r7, #12]
 80103d8:	60b9      	str	r1, [r7, #8]
 80103da:	4613      	mov	r3, r2
 80103dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80103de:	2300      	movs	r3, #0
 80103e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80103e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	371c      	adds	r7, #28
 80103ea:	46bd      	mov	sp, r7
 80103ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f0:	4770      	bx	lr
	...

080103f4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b083      	sub	sp, #12
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	4603      	mov	r3, r0
 80103fc:	6039      	str	r1, [r7, #0]
 80103fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	2212      	movs	r2, #18
 8010404:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8010406:	4b03      	ldr	r3, [pc, #12]	@ (8010414 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8010408:	4618      	mov	r0, r3
 801040a:	370c      	adds	r7, #12
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr
 8010414:	200000d8 	.word	0x200000d8

08010418 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010418:	b480      	push	{r7}
 801041a:	b083      	sub	sp, #12
 801041c:	af00      	add	r7, sp, #0
 801041e:	4603      	mov	r3, r0
 8010420:	6039      	str	r1, [r7, #0]
 8010422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	2204      	movs	r2, #4
 8010428:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801042a:	4b03      	ldr	r3, [pc, #12]	@ (8010438 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801042c:	4618      	mov	r0, r3
 801042e:	370c      	adds	r7, #12
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr
 8010438:	200000ec 	.word	0x200000ec

0801043c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	4603      	mov	r3, r0
 8010444:	6039      	str	r1, [r7, #0]
 8010446:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010448:	79fb      	ldrb	r3, [r7, #7]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d105      	bne.n	801045a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801044e:	683a      	ldr	r2, [r7, #0]
 8010450:	4907      	ldr	r1, [pc, #28]	@ (8010470 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010452:	4808      	ldr	r0, [pc, #32]	@ (8010474 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010454:	f7fb ff8a 	bl	800c36c <USBD_GetString>
 8010458:	e004      	b.n	8010464 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801045a:	683a      	ldr	r2, [r7, #0]
 801045c:	4904      	ldr	r1, [pc, #16]	@ (8010470 <USBD_CDC_ProductStrDescriptor+0x34>)
 801045e:	4805      	ldr	r0, [pc, #20]	@ (8010474 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010460:	f7fb ff84 	bl	800c36c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010464:	4b02      	ldr	r3, [pc, #8]	@ (8010470 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8010466:	4618      	mov	r0, r3
 8010468:	3708      	adds	r7, #8
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	2000a4a8 	.word	0x2000a4a8
 8010474:	08011ce0 	.word	0x08011ce0

08010478 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b082      	sub	sp, #8
 801047c:	af00      	add	r7, sp, #0
 801047e:	4603      	mov	r3, r0
 8010480:	6039      	str	r1, [r7, #0]
 8010482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010484:	683a      	ldr	r2, [r7, #0]
 8010486:	4904      	ldr	r1, [pc, #16]	@ (8010498 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8010488:	4804      	ldr	r0, [pc, #16]	@ (801049c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801048a:	f7fb ff6f 	bl	800c36c <USBD_GetString>
  return USBD_StrDesc;
 801048e:	4b02      	ldr	r3, [pc, #8]	@ (8010498 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8010490:	4618      	mov	r0, r3
 8010492:	3708      	adds	r7, #8
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}
 8010498:	2000a4a8 	.word	0x2000a4a8
 801049c:	08011cf8 	.word	0x08011cf8

080104a0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	4603      	mov	r3, r0
 80104a8:	6039      	str	r1, [r7, #0]
 80104aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	221a      	movs	r2, #26
 80104b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80104b2:	f000 f843 	bl	801053c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80104b6:	4b02      	ldr	r3, [pc, #8]	@ (80104c0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3708      	adds	r7, #8
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}
 80104c0:	200000f0 	.word	0x200000f0

080104c4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	4603      	mov	r3, r0
 80104cc:	6039      	str	r1, [r7, #0]
 80104ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80104d0:	79fb      	ldrb	r3, [r7, #7]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d105      	bne.n	80104e2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80104d6:	683a      	ldr	r2, [r7, #0]
 80104d8:	4907      	ldr	r1, [pc, #28]	@ (80104f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80104da:	4808      	ldr	r0, [pc, #32]	@ (80104fc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80104dc:	f7fb ff46 	bl	800c36c <USBD_GetString>
 80104e0:	e004      	b.n	80104ec <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80104e2:	683a      	ldr	r2, [r7, #0]
 80104e4:	4904      	ldr	r1, [pc, #16]	@ (80104f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80104e6:	4805      	ldr	r0, [pc, #20]	@ (80104fc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80104e8:	f7fb ff40 	bl	800c36c <USBD_GetString>
  }
  return USBD_StrDesc;
 80104ec:	4b02      	ldr	r3, [pc, #8]	@ (80104f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3708      	adds	r7, #8
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	bf00      	nop
 80104f8:	2000a4a8 	.word	0x2000a4a8
 80104fc:	08011d0c 	.word	0x08011d0c

08010500 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b082      	sub	sp, #8
 8010504:	af00      	add	r7, sp, #0
 8010506:	4603      	mov	r3, r0
 8010508:	6039      	str	r1, [r7, #0]
 801050a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801050c:	79fb      	ldrb	r3, [r7, #7]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d105      	bne.n	801051e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010512:	683a      	ldr	r2, [r7, #0]
 8010514:	4907      	ldr	r1, [pc, #28]	@ (8010534 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010516:	4808      	ldr	r0, [pc, #32]	@ (8010538 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010518:	f7fb ff28 	bl	800c36c <USBD_GetString>
 801051c:	e004      	b.n	8010528 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801051e:	683a      	ldr	r2, [r7, #0]
 8010520:	4904      	ldr	r1, [pc, #16]	@ (8010534 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010522:	4805      	ldr	r0, [pc, #20]	@ (8010538 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010524:	f7fb ff22 	bl	800c36c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010528:	4b02      	ldr	r3, [pc, #8]	@ (8010534 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801052a:	4618      	mov	r0, r3
 801052c:	3708      	adds	r7, #8
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}
 8010532:	bf00      	nop
 8010534:	2000a4a8 	.word	0x2000a4a8
 8010538:	08011d18 	.word	0x08011d18

0801053c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b084      	sub	sp, #16
 8010540:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010542:	4b0f      	ldr	r3, [pc, #60]	@ (8010580 <Get_SerialNum+0x44>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010548:	4b0e      	ldr	r3, [pc, #56]	@ (8010584 <Get_SerialNum+0x48>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801054e:	4b0e      	ldr	r3, [pc, #56]	@ (8010588 <Get_SerialNum+0x4c>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010554:	68fa      	ldr	r2, [r7, #12]
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	4413      	add	r3, r2
 801055a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d009      	beq.n	8010576 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010562:	2208      	movs	r2, #8
 8010564:	4909      	ldr	r1, [pc, #36]	@ (801058c <Get_SerialNum+0x50>)
 8010566:	68f8      	ldr	r0, [r7, #12]
 8010568:	f000 f814 	bl	8010594 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801056c:	2204      	movs	r2, #4
 801056e:	4908      	ldr	r1, [pc, #32]	@ (8010590 <Get_SerialNum+0x54>)
 8010570:	68b8      	ldr	r0, [r7, #8]
 8010572:	f000 f80f 	bl	8010594 <IntToUnicode>
  }
}
 8010576:	bf00      	nop
 8010578:	3710      	adds	r7, #16
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}
 801057e:	bf00      	nop
 8010580:	1fff7590 	.word	0x1fff7590
 8010584:	1fff7594 	.word	0x1fff7594
 8010588:	1fff7598 	.word	0x1fff7598
 801058c:	200000f2 	.word	0x200000f2
 8010590:	20000102 	.word	0x20000102

08010594 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010594:	b480      	push	{r7}
 8010596:	b087      	sub	sp, #28
 8010598:	af00      	add	r7, sp, #0
 801059a:	60f8      	str	r0, [r7, #12]
 801059c:	60b9      	str	r1, [r7, #8]
 801059e:	4613      	mov	r3, r2
 80105a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80105a2:	2300      	movs	r3, #0
 80105a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80105a6:	2300      	movs	r3, #0
 80105a8:	75fb      	strb	r3, [r7, #23]
 80105aa:	e027      	b.n	80105fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	0f1b      	lsrs	r3, r3, #28
 80105b0:	2b09      	cmp	r3, #9
 80105b2:	d80b      	bhi.n	80105cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	0f1b      	lsrs	r3, r3, #28
 80105b8:	b2da      	uxtb	r2, r3
 80105ba:	7dfb      	ldrb	r3, [r7, #23]
 80105bc:	005b      	lsls	r3, r3, #1
 80105be:	4619      	mov	r1, r3
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	440b      	add	r3, r1
 80105c4:	3230      	adds	r2, #48	@ 0x30
 80105c6:	b2d2      	uxtb	r2, r2
 80105c8:	701a      	strb	r2, [r3, #0]
 80105ca:	e00a      	b.n	80105e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	0f1b      	lsrs	r3, r3, #28
 80105d0:	b2da      	uxtb	r2, r3
 80105d2:	7dfb      	ldrb	r3, [r7, #23]
 80105d4:	005b      	lsls	r3, r3, #1
 80105d6:	4619      	mov	r1, r3
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	440b      	add	r3, r1
 80105dc:	3237      	adds	r2, #55	@ 0x37
 80105de:	b2d2      	uxtb	r2, r2
 80105e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	011b      	lsls	r3, r3, #4
 80105e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80105e8:	7dfb      	ldrb	r3, [r7, #23]
 80105ea:	005b      	lsls	r3, r3, #1
 80105ec:	3301      	adds	r3, #1
 80105ee:	68ba      	ldr	r2, [r7, #8]
 80105f0:	4413      	add	r3, r2
 80105f2:	2200      	movs	r2, #0
 80105f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80105f6:	7dfb      	ldrb	r3, [r7, #23]
 80105f8:	3301      	adds	r3, #1
 80105fa:	75fb      	strb	r3, [r7, #23]
 80105fc:	7dfa      	ldrb	r2, [r7, #23]
 80105fe:	79fb      	ldrb	r3, [r7, #7]
 8010600:	429a      	cmp	r2, r3
 8010602:	d3d3      	bcc.n	80105ac <IntToUnicode+0x18>
  }
}
 8010604:	bf00      	nop
 8010606:	bf00      	nop
 8010608:	371c      	adds	r7, #28
 801060a:	46bd      	mov	sp, r7
 801060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010610:	4770      	bx	lr

08010612 <LL_AHB2_GRP1_EnableClock>:
{
 8010612:	b480      	push	{r7}
 8010614:	b085      	sub	sp, #20
 8010616:	af00      	add	r7, sp, #0
 8010618:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801061a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801061e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010620:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	4313      	orrs	r3, r2
 8010628:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801062a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801062e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	4013      	ands	r3, r2
 8010634:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010636:	68fb      	ldr	r3, [r7, #12]
}
 8010638:	bf00      	nop
 801063a:	3714      	adds	r7, #20
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr

08010644 <LL_APB1_GRP1_EnableClock>:
{
 8010644:	b480      	push	{r7}
 8010646:	b085      	sub	sp, #20
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801064c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010650:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010652:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	4313      	orrs	r3, r2
 801065a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801065c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010660:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	4013      	ands	r3, r2
 8010666:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010668:	68fb      	ldr	r3, [r7, #12]
}
 801066a:	bf00      	nop
 801066c:	3714      	adds	r7, #20
 801066e:	46bd      	mov	sp, r7
 8010670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010674:	4770      	bx	lr
	...

08010678 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b088      	sub	sp, #32
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010680:	f107 030c 	add.w	r3, r7, #12
 8010684:	2200      	movs	r2, #0
 8010686:	601a      	str	r2, [r3, #0]
 8010688:	605a      	str	r2, [r3, #4]
 801068a:	609a      	str	r2, [r3, #8]
 801068c:	60da      	str	r2, [r3, #12]
 801068e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4a13      	ldr	r2, [pc, #76]	@ (80106e4 <HAL_PCD_MspInit+0x6c>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d120      	bne.n	80106dc <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801069a:	2001      	movs	r0, #1
 801069c:	f7ff ffb9 	bl	8010612 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80106a0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80106a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80106a6:	2302      	movs	r3, #2
 80106a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106aa:	2300      	movs	r3, #0
 80106ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80106ae:	2300      	movs	r3, #0
 80106b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80106b2:	230a      	movs	r3, #10
 80106b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80106b6:	f107 030c 	add.w	r3, r7, #12
 80106ba:	4619      	mov	r1, r3
 80106bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80106c0:	f7f2 fc3a 	bl	8002f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80106c4:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80106c8:	f7ff ffbc 	bl	8010644 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80106cc:	2200      	movs	r2, #0
 80106ce:	2105      	movs	r1, #5
 80106d0:	2014      	movs	r0, #20
 80106d2:	f7f2 f995 	bl	8002a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80106d6:	2014      	movs	r0, #20
 80106d8:	f7f2 f9ac 	bl	8002a34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80106dc:	bf00      	nop
 80106de:	3720      	adds	r7, #32
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	40006800 	.word	0x40006800

080106e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b082      	sub	sp, #8
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80106fc:	4619      	mov	r1, r3
 80106fe:	4610      	mov	r0, r2
 8010700:	f7fa fd39 	bl	800b176 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010704:	bf00      	nop
 8010706:	3708      	adds	r7, #8
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b082      	sub	sp, #8
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	460b      	mov	r3, r1
 8010716:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 801071e:	78fa      	ldrb	r2, [r7, #3]
 8010720:	6879      	ldr	r1, [r7, #4]
 8010722:	4613      	mov	r3, r2
 8010724:	009b      	lsls	r3, r3, #2
 8010726:	4413      	add	r3, r2
 8010728:	00db      	lsls	r3, r3, #3
 801072a:	440b      	add	r3, r1
 801072c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010730:	681a      	ldr	r2, [r3, #0]
 8010732:	78fb      	ldrb	r3, [r7, #3]
 8010734:	4619      	mov	r1, r3
 8010736:	f7fa fd73 	bl	800b220 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801073a:	bf00      	nop
 801073c:	3708      	adds	r7, #8
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}

08010742 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010742:	b580      	push	{r7, lr}
 8010744:	b082      	sub	sp, #8
 8010746:	af00      	add	r7, sp, #0
 8010748:	6078      	str	r0, [r7, #4]
 801074a:	460b      	mov	r3, r1
 801074c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010754:	78fa      	ldrb	r2, [r7, #3]
 8010756:	6879      	ldr	r1, [r7, #4]
 8010758:	4613      	mov	r3, r2
 801075a:	009b      	lsls	r3, r3, #2
 801075c:	4413      	add	r3, r2
 801075e:	00db      	lsls	r3, r3, #3
 8010760:	440b      	add	r3, r1
 8010762:	3324      	adds	r3, #36	@ 0x24
 8010764:	681a      	ldr	r2, [r3, #0]
 8010766:	78fb      	ldrb	r3, [r7, #3]
 8010768:	4619      	mov	r1, r3
 801076a:	f7fa fe0c 	bl	800b386 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801076e:	bf00      	nop
 8010770:	3708      	adds	r7, #8
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}

08010776 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010776:	b580      	push	{r7, lr}
 8010778:	b082      	sub	sp, #8
 801077a:	af00      	add	r7, sp, #0
 801077c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010784:	4618      	mov	r0, r3
 8010786:	f7fa ff46 	bl	800b616 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801078a:	bf00      	nop
 801078c:	3708      	adds	r7, #8
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}

08010792 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010792:	b580      	push	{r7, lr}
 8010794:	b084      	sub	sp, #16
 8010796:	af00      	add	r7, sp, #0
 8010798:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801079a:	2301      	movs	r3, #1
 801079c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	795b      	ldrb	r3, [r3, #5]
 80107a2:	2b02      	cmp	r3, #2
 80107a4:	d001      	beq.n	80107aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80107a6:	f7f0 fa41 	bl	8000c2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80107b0:	7bfa      	ldrb	r2, [r7, #15]
 80107b2:	4611      	mov	r1, r2
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7fa feea 	bl	800b58e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7fa fe92 	bl	800b4ea <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80107c6:	bf00      	nop
 80107c8:	3710      	adds	r7, #16
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}
	...

080107d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80107de:	4618      	mov	r0, r3
 80107e0:	f7fa fee5 	bl	800b5ae <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	7a5b      	ldrb	r3, [r3, #9]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d005      	beq.n	80107f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80107ec:	4b04      	ldr	r3, [pc, #16]	@ (8010800 <HAL_PCD_SuspendCallback+0x30>)
 80107ee:	691b      	ldr	r3, [r3, #16]
 80107f0:	4a03      	ldr	r2, [pc, #12]	@ (8010800 <HAL_PCD_SuspendCallback+0x30>)
 80107f2:	f043 0306 	orr.w	r3, r3, #6
 80107f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80107f8:	bf00      	nop
 80107fa:	3708      	adds	r7, #8
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	e000ed00 	.word	0xe000ed00

08010804 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	7a5b      	ldrb	r3, [r3, #9]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d007      	beq.n	8010824 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010814:	4b08      	ldr	r3, [pc, #32]	@ (8010838 <HAL_PCD_ResumeCallback+0x34>)
 8010816:	691b      	ldr	r3, [r3, #16]
 8010818:	4a07      	ldr	r2, [pc, #28]	@ (8010838 <HAL_PCD_ResumeCallback+0x34>)
 801081a:	f023 0306 	bic.w	r3, r3, #6
 801081e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010820:	f000 f9fa 	bl	8010c18 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801082a:	4618      	mov	r0, r3
 801082c:	f7fa fedb 	bl	800b5e6 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010830:	bf00      	nop
 8010832:	3708      	adds	r7, #8
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}
 8010838:	e000ed00 	.word	0xe000ed00

0801083c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b082      	sub	sp, #8
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010844:	4a2c      	ldr	r2, [pc, #176]	@ (80108f8 <USBD_LL_Init+0xbc>)
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	4a2a      	ldr	r2, [pc, #168]	@ (80108f8 <USBD_LL_Init+0xbc>)
 8010850:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8010854:	f7f4 fb96 	bl	8004f84 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8010858:	4b27      	ldr	r3, [pc, #156]	@ (80108f8 <USBD_LL_Init+0xbc>)
 801085a:	4a28      	ldr	r2, [pc, #160]	@ (80108fc <USBD_LL_Init+0xc0>)
 801085c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801085e:	4b26      	ldr	r3, [pc, #152]	@ (80108f8 <USBD_LL_Init+0xbc>)
 8010860:	2208      	movs	r2, #8
 8010862:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010864:	4b24      	ldr	r3, [pc, #144]	@ (80108f8 <USBD_LL_Init+0xbc>)
 8010866:	2202      	movs	r2, #2
 8010868:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801086a:	4b23      	ldr	r3, [pc, #140]	@ (80108f8 <USBD_LL_Init+0xbc>)
 801086c:	2202      	movs	r2, #2
 801086e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010870:	4b21      	ldr	r3, [pc, #132]	@ (80108f8 <USBD_LL_Init+0xbc>)
 8010872:	2200      	movs	r2, #0
 8010874:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010876:	4b20      	ldr	r3, [pc, #128]	@ (80108f8 <USBD_LL_Init+0xbc>)
 8010878:	2200      	movs	r2, #0
 801087a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801087c:	4b1e      	ldr	r3, [pc, #120]	@ (80108f8 <USBD_LL_Init+0xbc>)
 801087e:	2200      	movs	r2, #0
 8010880:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010882:	4b1d      	ldr	r3, [pc, #116]	@ (80108f8 <USBD_LL_Init+0xbc>)
 8010884:	2200      	movs	r2, #0
 8010886:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010888:	481b      	ldr	r0, [pc, #108]	@ (80108f8 <USBD_LL_Init+0xbc>)
 801088a:	f7f2 fe29 	bl	80034e0 <HAL_PCD_Init>
 801088e:	4603      	mov	r3, r0
 8010890:	2b00      	cmp	r3, #0
 8010892:	d001      	beq.n	8010898 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8010894:	f7f0 f9ca 	bl	8000c2c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801089e:	2318      	movs	r3, #24
 80108a0:	2200      	movs	r2, #0
 80108a2:	2100      	movs	r1, #0
 80108a4:	f7f4 fae2 	bl	8004e6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80108ae:	2358      	movs	r3, #88	@ 0x58
 80108b0:	2200      	movs	r2, #0
 80108b2:	2180      	movs	r1, #128	@ 0x80
 80108b4:	f7f4 fada 	bl	8004e6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80108be:	23c0      	movs	r3, #192	@ 0xc0
 80108c0:	2200      	movs	r2, #0
 80108c2:	2181      	movs	r1, #129	@ 0x81
 80108c4:	f7f4 fad2 	bl	8004e6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80108ce:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80108d2:	2200      	movs	r2, #0
 80108d4:	2101      	movs	r1, #1
 80108d6:	f7f4 fac9 	bl	8004e6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80108e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80108e4:	2200      	movs	r2, #0
 80108e6:	2182      	movs	r1, #130	@ 0x82
 80108e8:	f7f4 fac0 	bl	8004e6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80108ec:	2300      	movs	r3, #0
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3708      	adds	r7, #8
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
 80108f6:	bf00      	nop
 80108f8:	2000a6a8 	.word	0x2000a6a8
 80108fc:	40006800 	.word	0x40006800

08010900 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b084      	sub	sp, #16
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010908:	2300      	movs	r3, #0
 801090a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801090c:	2300      	movs	r3, #0
 801090e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010916:	4618      	mov	r0, r3
 8010918:	f7f2 feb0 	bl	800367c <HAL_PCD_Start>
 801091c:	4603      	mov	r3, r0
 801091e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010920:	7bfb      	ldrb	r3, [r7, #15]
 8010922:	4618      	mov	r0, r3
 8010924:	f000 f97e 	bl	8010c24 <USBD_Get_USB_Status>
 8010928:	4603      	mov	r3, r0
 801092a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801092c:	7bbb      	ldrb	r3, [r7, #14]
}
 801092e:	4618      	mov	r0, r3
 8010930:	3710      	adds	r7, #16
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}

08010936 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010936:	b580      	push	{r7, lr}
 8010938:	b084      	sub	sp, #16
 801093a:	af00      	add	r7, sp, #0
 801093c:	6078      	str	r0, [r7, #4]
 801093e:	4608      	mov	r0, r1
 8010940:	4611      	mov	r1, r2
 8010942:	461a      	mov	r2, r3
 8010944:	4603      	mov	r3, r0
 8010946:	70fb      	strb	r3, [r7, #3]
 8010948:	460b      	mov	r3, r1
 801094a:	70bb      	strb	r3, [r7, #2]
 801094c:	4613      	mov	r3, r2
 801094e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010950:	2300      	movs	r3, #0
 8010952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010954:	2300      	movs	r3, #0
 8010956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801095e:	78bb      	ldrb	r3, [r7, #2]
 8010960:	883a      	ldrh	r2, [r7, #0]
 8010962:	78f9      	ldrb	r1, [r7, #3]
 8010964:	f7f2 fff7 	bl	8003956 <HAL_PCD_EP_Open>
 8010968:	4603      	mov	r3, r0
 801096a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801096c:	7bfb      	ldrb	r3, [r7, #15]
 801096e:	4618      	mov	r0, r3
 8010970:	f000 f958 	bl	8010c24 <USBD_Get_USB_Status>
 8010974:	4603      	mov	r3, r0
 8010976:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010978:	7bbb      	ldrb	r3, [r7, #14]
}
 801097a:	4618      	mov	r0, r3
 801097c:	3710      	adds	r7, #16
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}

08010982 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010982:	b580      	push	{r7, lr}
 8010984:	b084      	sub	sp, #16
 8010986:	af00      	add	r7, sp, #0
 8010988:	6078      	str	r0, [r7, #4]
 801098a:	460b      	mov	r3, r1
 801098c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801098e:	2300      	movs	r3, #0
 8010990:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010992:	2300      	movs	r3, #0
 8010994:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801099c:	78fa      	ldrb	r2, [r7, #3]
 801099e:	4611      	mov	r1, r2
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7f3 f835 	bl	8003a10 <HAL_PCD_EP_Close>
 80109a6:	4603      	mov	r3, r0
 80109a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109aa:	7bfb      	ldrb	r3, [r7, #15]
 80109ac:	4618      	mov	r0, r3
 80109ae:	f000 f939 	bl	8010c24 <USBD_Get_USB_Status>
 80109b2:	4603      	mov	r3, r0
 80109b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3710      	adds	r7, #16
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}

080109c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b084      	sub	sp, #16
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	460b      	mov	r3, r1
 80109ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109cc:	2300      	movs	r3, #0
 80109ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109d0:	2300      	movs	r3, #0
 80109d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80109da:	78fa      	ldrb	r2, [r7, #3]
 80109dc:	4611      	mov	r1, r2
 80109de:	4618      	mov	r0, r3
 80109e0:	f7f3 f8de 	bl	8003ba0 <HAL_PCD_EP_SetStall>
 80109e4:	4603      	mov	r3, r0
 80109e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109e8:	7bfb      	ldrb	r3, [r7, #15]
 80109ea:	4618      	mov	r0, r3
 80109ec:	f000 f91a 	bl	8010c24 <USBD_Get_USB_Status>
 80109f0:	4603      	mov	r3, r0
 80109f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3710      	adds	r7, #16
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}

080109fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109fe:	b580      	push	{r7, lr}
 8010a00:	b084      	sub	sp, #16
 8010a02:	af00      	add	r7, sp, #0
 8010a04:	6078      	str	r0, [r7, #4]
 8010a06:	460b      	mov	r3, r1
 8010a08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010a18:	78fa      	ldrb	r2, [r7, #3]
 8010a1a:	4611      	mov	r1, r2
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f7f3 f911 	bl	8003c44 <HAL_PCD_EP_ClrStall>
 8010a22:	4603      	mov	r3, r0
 8010a24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a26:	7bfb      	ldrb	r3, [r7, #15]
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f000 f8fb 	bl	8010c24 <USBD_Get_USB_Status>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a32:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3710      	adds	r7, #16
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b085      	sub	sp, #20
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	460b      	mov	r3, r1
 8010a46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010a4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	da0b      	bge.n	8010a70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010a58:	78fb      	ldrb	r3, [r7, #3]
 8010a5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010a5e:	68f9      	ldr	r1, [r7, #12]
 8010a60:	4613      	mov	r3, r2
 8010a62:	009b      	lsls	r3, r3, #2
 8010a64:	4413      	add	r3, r2
 8010a66:	00db      	lsls	r3, r3, #3
 8010a68:	440b      	add	r3, r1
 8010a6a:	3312      	adds	r3, #18
 8010a6c:	781b      	ldrb	r3, [r3, #0]
 8010a6e:	e00b      	b.n	8010a88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010a70:	78fb      	ldrb	r3, [r7, #3]
 8010a72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010a76:	68f9      	ldr	r1, [r7, #12]
 8010a78:	4613      	mov	r3, r2
 8010a7a:	009b      	lsls	r3, r3, #2
 8010a7c:	4413      	add	r3, r2
 8010a7e:	00db      	lsls	r3, r3, #3
 8010a80:	440b      	add	r3, r1
 8010a82:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010a86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3714      	adds	r7, #20
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a92:	4770      	bx	lr

08010a94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b084      	sub	sp, #16
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010aae:	78fa      	ldrb	r2, [r7, #3]
 8010ab0:	4611      	mov	r1, r2
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7f2 ff2b 	bl	800390e <HAL_PCD_SetAddress>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010abc:	7bfb      	ldrb	r3, [r7, #15]
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f000 f8b0 	bl	8010c24 <USBD_Get_USB_Status>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3710      	adds	r7, #16
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}

08010ad2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010ad2:	b580      	push	{r7, lr}
 8010ad4:	b086      	sub	sp, #24
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	60f8      	str	r0, [r7, #12]
 8010ada:	607a      	str	r2, [r7, #4]
 8010adc:	603b      	str	r3, [r7, #0]
 8010ade:	460b      	mov	r3, r1
 8010ae0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010af0:	7af9      	ldrb	r1, [r7, #11]
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	687a      	ldr	r2, [r7, #4]
 8010af6:	f7f3 f81c 	bl	8003b32 <HAL_PCD_EP_Transmit>
 8010afa:	4603      	mov	r3, r0
 8010afc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010afe:	7dfb      	ldrb	r3, [r7, #23]
 8010b00:	4618      	mov	r0, r3
 8010b02:	f000 f88f 	bl	8010c24 <USBD_Get_USB_Status>
 8010b06:	4603      	mov	r3, r0
 8010b08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010b0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3718      	adds	r7, #24
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}

08010b14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b086      	sub	sp, #24
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	607a      	str	r2, [r7, #4]
 8010b1e:	603b      	str	r3, [r7, #0]
 8010b20:	460b      	mov	r3, r1
 8010b22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b24:	2300      	movs	r3, #0
 8010b26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010b32:	7af9      	ldrb	r1, [r7, #11]
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	687a      	ldr	r2, [r7, #4]
 8010b38:	f7f2 ffb2 	bl	8003aa0 <HAL_PCD_EP_Receive>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b40:	7dfb      	ldrb	r3, [r7, #23]
 8010b42:	4618      	mov	r0, r3
 8010b44:	f000 f86e 	bl	8010c24 <USBD_Get_USB_Status>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010b4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3718      	adds	r7, #24
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}

08010b56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b56:	b580      	push	{r7, lr}
 8010b58:	b082      	sub	sp, #8
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
 8010b5e:	460b      	mov	r3, r1
 8010b60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010b68:	78fa      	ldrb	r2, [r7, #3]
 8010b6a:	4611      	mov	r1, r2
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7f2 ffc8 	bl	8003b02 <HAL_PCD_EP_GetRxCount>
 8010b72:	4603      	mov	r3, r0
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3708      	adds	r7, #8
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	460b      	mov	r3, r1
 8010b86:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010b88:	78fb      	ldrb	r3, [r7, #3]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d002      	beq.n	8010b94 <HAL_PCDEx_LPM_Callback+0x18>
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d013      	beq.n	8010bba <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010b92:	e023      	b.n	8010bdc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	7a5b      	ldrb	r3, [r3, #9]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d007      	beq.n	8010bac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010b9c:	f000 f83c 	bl	8010c18 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ba0:	4b10      	ldr	r3, [pc, #64]	@ (8010be4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010ba2:	691b      	ldr	r3, [r3, #16]
 8010ba4:	4a0f      	ldr	r2, [pc, #60]	@ (8010be4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010ba6:	f023 0306 	bic.w	r3, r3, #6
 8010baa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f7fa fd17 	bl	800b5e6 <USBD_LL_Resume>
    break;
 8010bb8:	e010      	b.n	8010bdc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7fa fcf4 	bl	800b5ae <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	7a5b      	ldrb	r3, [r3, #9]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d005      	beq.n	8010bda <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010bce:	4b05      	ldr	r3, [pc, #20]	@ (8010be4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010bd0:	691b      	ldr	r3, [r3, #16]
 8010bd2:	4a04      	ldr	r2, [pc, #16]	@ (8010be4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010bd4:	f043 0306 	orr.w	r3, r3, #6
 8010bd8:	6113      	str	r3, [r2, #16]
    break;
 8010bda:	bf00      	nop
}
 8010bdc:	bf00      	nop
 8010bde:	3708      	adds	r7, #8
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}
 8010be4:	e000ed00 	.word	0xe000ed00

08010be8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010be8:	b480      	push	{r7}
 8010bea:	b083      	sub	sp, #12
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010bf0:	4b03      	ldr	r3, [pc, #12]	@ (8010c00 <USBD_static_malloc+0x18>)
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	370c      	adds	r7, #12
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfc:	4770      	bx	lr
 8010bfe:	bf00      	nop
 8010c00:	2000a984 	.word	0x2000a984

08010c04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010c04:	b480      	push	{r7}
 8010c06:	b083      	sub	sp, #12
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010c0c:	bf00      	nop
 8010c0e:	370c      	adds	r7, #12
 8010c10:	46bd      	mov	sp, r7
 8010c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c16:	4770      	bx	lr

08010c18 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010c1c:	f7ef fd68 	bl	80006f0 <SystemClock_Config>
}
 8010c20:	bf00      	nop
 8010c22:	bd80      	pop	{r7, pc}

08010c24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010c24:	b480      	push	{r7}
 8010c26:	b085      	sub	sp, #20
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010c32:	79fb      	ldrb	r3, [r7, #7]
 8010c34:	2b03      	cmp	r3, #3
 8010c36:	d817      	bhi.n	8010c68 <USBD_Get_USB_Status+0x44>
 8010c38:	a201      	add	r2, pc, #4	@ (adr r2, 8010c40 <USBD_Get_USB_Status+0x1c>)
 8010c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c3e:	bf00      	nop
 8010c40:	08010c51 	.word	0x08010c51
 8010c44:	08010c57 	.word	0x08010c57
 8010c48:	08010c5d 	.word	0x08010c5d
 8010c4c:	08010c63 	.word	0x08010c63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010c50:	2300      	movs	r3, #0
 8010c52:	73fb      	strb	r3, [r7, #15]
    break;
 8010c54:	e00b      	b.n	8010c6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010c56:	2303      	movs	r3, #3
 8010c58:	73fb      	strb	r3, [r7, #15]
    break;
 8010c5a:	e008      	b.n	8010c6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8010c60:	e005      	b.n	8010c6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010c62:	2303      	movs	r3, #3
 8010c64:	73fb      	strb	r3, [r7, #15]
    break;
 8010c66:	e002      	b.n	8010c6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010c68:	2303      	movs	r3, #3
 8010c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8010c6c:	bf00      	nop
  }
  return usb_status;
 8010c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	3714      	adds	r7, #20
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr

08010c7c <std>:
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	b510      	push	{r4, lr}
 8010c80:	4604      	mov	r4, r0
 8010c82:	e9c0 3300 	strd	r3, r3, [r0]
 8010c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c8a:	6083      	str	r3, [r0, #8]
 8010c8c:	8181      	strh	r1, [r0, #12]
 8010c8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010c90:	81c2      	strh	r2, [r0, #14]
 8010c92:	6183      	str	r3, [r0, #24]
 8010c94:	4619      	mov	r1, r3
 8010c96:	2208      	movs	r2, #8
 8010c98:	305c      	adds	r0, #92	@ 0x5c
 8010c9a:	f000 f90e 	bl	8010eba <memset>
 8010c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8010cd4 <std+0x58>)
 8010ca0:	6263      	str	r3, [r4, #36]	@ 0x24
 8010ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8010cd8 <std+0x5c>)
 8010ca4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8010cdc <std+0x60>)
 8010ca8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010caa:	4b0d      	ldr	r3, [pc, #52]	@ (8010ce0 <std+0x64>)
 8010cac:	6323      	str	r3, [r4, #48]	@ 0x30
 8010cae:	4b0d      	ldr	r3, [pc, #52]	@ (8010ce4 <std+0x68>)
 8010cb0:	6224      	str	r4, [r4, #32]
 8010cb2:	429c      	cmp	r4, r3
 8010cb4:	d006      	beq.n	8010cc4 <std+0x48>
 8010cb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010cba:	4294      	cmp	r4, r2
 8010cbc:	d002      	beq.n	8010cc4 <std+0x48>
 8010cbe:	33d0      	adds	r3, #208	@ 0xd0
 8010cc0:	429c      	cmp	r4, r3
 8010cc2:	d105      	bne.n	8010cd0 <std+0x54>
 8010cc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ccc:	f000 b9cc 	b.w	8011068 <__retarget_lock_init_recursive>
 8010cd0:	bd10      	pop	{r4, pc}
 8010cd2:	bf00      	nop
 8010cd4:	08010e35 	.word	0x08010e35
 8010cd8:	08010e57 	.word	0x08010e57
 8010cdc:	08010e8f 	.word	0x08010e8f
 8010ce0:	08010eb3 	.word	0x08010eb3
 8010ce4:	2000aba4 	.word	0x2000aba4

08010ce8 <stdio_exit_handler>:
 8010ce8:	4a02      	ldr	r2, [pc, #8]	@ (8010cf4 <stdio_exit_handler+0xc>)
 8010cea:	4903      	ldr	r1, [pc, #12]	@ (8010cf8 <stdio_exit_handler+0x10>)
 8010cec:	4803      	ldr	r0, [pc, #12]	@ (8010cfc <stdio_exit_handler+0x14>)
 8010cee:	f000 b869 	b.w	8010dc4 <_fwalk_sglue>
 8010cf2:	bf00      	nop
 8010cf4:	2000010c 	.word	0x2000010c
 8010cf8:	08011921 	.word	0x08011921
 8010cfc:	2000011c 	.word	0x2000011c

08010d00 <cleanup_stdio>:
 8010d00:	6841      	ldr	r1, [r0, #4]
 8010d02:	4b0c      	ldr	r3, [pc, #48]	@ (8010d34 <cleanup_stdio+0x34>)
 8010d04:	4299      	cmp	r1, r3
 8010d06:	b510      	push	{r4, lr}
 8010d08:	4604      	mov	r4, r0
 8010d0a:	d001      	beq.n	8010d10 <cleanup_stdio+0x10>
 8010d0c:	f000 fe08 	bl	8011920 <_fflush_r>
 8010d10:	68a1      	ldr	r1, [r4, #8]
 8010d12:	4b09      	ldr	r3, [pc, #36]	@ (8010d38 <cleanup_stdio+0x38>)
 8010d14:	4299      	cmp	r1, r3
 8010d16:	d002      	beq.n	8010d1e <cleanup_stdio+0x1e>
 8010d18:	4620      	mov	r0, r4
 8010d1a:	f000 fe01 	bl	8011920 <_fflush_r>
 8010d1e:	68e1      	ldr	r1, [r4, #12]
 8010d20:	4b06      	ldr	r3, [pc, #24]	@ (8010d3c <cleanup_stdio+0x3c>)
 8010d22:	4299      	cmp	r1, r3
 8010d24:	d004      	beq.n	8010d30 <cleanup_stdio+0x30>
 8010d26:	4620      	mov	r0, r4
 8010d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d2c:	f000 bdf8 	b.w	8011920 <_fflush_r>
 8010d30:	bd10      	pop	{r4, pc}
 8010d32:	bf00      	nop
 8010d34:	2000aba4 	.word	0x2000aba4
 8010d38:	2000ac0c 	.word	0x2000ac0c
 8010d3c:	2000ac74 	.word	0x2000ac74

08010d40 <global_stdio_init.part.0>:
 8010d40:	b510      	push	{r4, lr}
 8010d42:	4b0b      	ldr	r3, [pc, #44]	@ (8010d70 <global_stdio_init.part.0+0x30>)
 8010d44:	4c0b      	ldr	r4, [pc, #44]	@ (8010d74 <global_stdio_init.part.0+0x34>)
 8010d46:	4a0c      	ldr	r2, [pc, #48]	@ (8010d78 <global_stdio_init.part.0+0x38>)
 8010d48:	601a      	str	r2, [r3, #0]
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	2104      	movs	r1, #4
 8010d50:	f7ff ff94 	bl	8010c7c <std>
 8010d54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010d58:	2201      	movs	r2, #1
 8010d5a:	2109      	movs	r1, #9
 8010d5c:	f7ff ff8e 	bl	8010c7c <std>
 8010d60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010d64:	2202      	movs	r2, #2
 8010d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d6a:	2112      	movs	r1, #18
 8010d6c:	f7ff bf86 	b.w	8010c7c <std>
 8010d70:	2000acdc 	.word	0x2000acdc
 8010d74:	2000aba4 	.word	0x2000aba4
 8010d78:	08010ce9 	.word	0x08010ce9

08010d7c <__sfp_lock_acquire>:
 8010d7c:	4801      	ldr	r0, [pc, #4]	@ (8010d84 <__sfp_lock_acquire+0x8>)
 8010d7e:	f000 b974 	b.w	801106a <__retarget_lock_acquire_recursive>
 8010d82:	bf00      	nop
 8010d84:	2000ace5 	.word	0x2000ace5

08010d88 <__sfp_lock_release>:
 8010d88:	4801      	ldr	r0, [pc, #4]	@ (8010d90 <__sfp_lock_release+0x8>)
 8010d8a:	f000 b96f 	b.w	801106c <__retarget_lock_release_recursive>
 8010d8e:	bf00      	nop
 8010d90:	2000ace5 	.word	0x2000ace5

08010d94 <__sinit>:
 8010d94:	b510      	push	{r4, lr}
 8010d96:	4604      	mov	r4, r0
 8010d98:	f7ff fff0 	bl	8010d7c <__sfp_lock_acquire>
 8010d9c:	6a23      	ldr	r3, [r4, #32]
 8010d9e:	b11b      	cbz	r3, 8010da8 <__sinit+0x14>
 8010da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010da4:	f7ff bff0 	b.w	8010d88 <__sfp_lock_release>
 8010da8:	4b04      	ldr	r3, [pc, #16]	@ (8010dbc <__sinit+0x28>)
 8010daa:	6223      	str	r3, [r4, #32]
 8010dac:	4b04      	ldr	r3, [pc, #16]	@ (8010dc0 <__sinit+0x2c>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d1f5      	bne.n	8010da0 <__sinit+0xc>
 8010db4:	f7ff ffc4 	bl	8010d40 <global_stdio_init.part.0>
 8010db8:	e7f2      	b.n	8010da0 <__sinit+0xc>
 8010dba:	bf00      	nop
 8010dbc:	08010d01 	.word	0x08010d01
 8010dc0:	2000acdc 	.word	0x2000acdc

08010dc4 <_fwalk_sglue>:
 8010dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dc8:	4607      	mov	r7, r0
 8010dca:	4688      	mov	r8, r1
 8010dcc:	4614      	mov	r4, r2
 8010dce:	2600      	movs	r6, #0
 8010dd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010dd4:	f1b9 0901 	subs.w	r9, r9, #1
 8010dd8:	d505      	bpl.n	8010de6 <_fwalk_sglue+0x22>
 8010dda:	6824      	ldr	r4, [r4, #0]
 8010ddc:	2c00      	cmp	r4, #0
 8010dde:	d1f7      	bne.n	8010dd0 <_fwalk_sglue+0xc>
 8010de0:	4630      	mov	r0, r6
 8010de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010de6:	89ab      	ldrh	r3, [r5, #12]
 8010de8:	2b01      	cmp	r3, #1
 8010dea:	d907      	bls.n	8010dfc <_fwalk_sglue+0x38>
 8010dec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010df0:	3301      	adds	r3, #1
 8010df2:	d003      	beq.n	8010dfc <_fwalk_sglue+0x38>
 8010df4:	4629      	mov	r1, r5
 8010df6:	4638      	mov	r0, r7
 8010df8:	47c0      	blx	r8
 8010dfa:	4306      	orrs	r6, r0
 8010dfc:	3568      	adds	r5, #104	@ 0x68
 8010dfe:	e7e9      	b.n	8010dd4 <_fwalk_sglue+0x10>

08010e00 <iprintf>:
 8010e00:	b40f      	push	{r0, r1, r2, r3}
 8010e02:	b507      	push	{r0, r1, r2, lr}
 8010e04:	4906      	ldr	r1, [pc, #24]	@ (8010e20 <iprintf+0x20>)
 8010e06:	ab04      	add	r3, sp, #16
 8010e08:	6808      	ldr	r0, [r1, #0]
 8010e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e0e:	6881      	ldr	r1, [r0, #8]
 8010e10:	9301      	str	r3, [sp, #4]
 8010e12:	f000 fa5d 	bl	80112d0 <_vfiprintf_r>
 8010e16:	b003      	add	sp, #12
 8010e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e1c:	b004      	add	sp, #16
 8010e1e:	4770      	bx	lr
 8010e20:	20000118 	.word	0x20000118

08010e24 <putchar>:
 8010e24:	4b02      	ldr	r3, [pc, #8]	@ (8010e30 <putchar+0xc>)
 8010e26:	4601      	mov	r1, r0
 8010e28:	6818      	ldr	r0, [r3, #0]
 8010e2a:	6882      	ldr	r2, [r0, #8]
 8010e2c:	f000 bda0 	b.w	8011970 <_putc_r>
 8010e30:	20000118 	.word	0x20000118

08010e34 <__sread>:
 8010e34:	b510      	push	{r4, lr}
 8010e36:	460c      	mov	r4, r1
 8010e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e3c:	f000 f8c6 	bl	8010fcc <_read_r>
 8010e40:	2800      	cmp	r0, #0
 8010e42:	bfab      	itete	ge
 8010e44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010e46:	89a3      	ldrhlt	r3, [r4, #12]
 8010e48:	181b      	addge	r3, r3, r0
 8010e4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010e4e:	bfac      	ite	ge
 8010e50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010e52:	81a3      	strhlt	r3, [r4, #12]
 8010e54:	bd10      	pop	{r4, pc}

08010e56 <__swrite>:
 8010e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e5a:	461f      	mov	r7, r3
 8010e5c:	898b      	ldrh	r3, [r1, #12]
 8010e5e:	05db      	lsls	r3, r3, #23
 8010e60:	4605      	mov	r5, r0
 8010e62:	460c      	mov	r4, r1
 8010e64:	4616      	mov	r6, r2
 8010e66:	d505      	bpl.n	8010e74 <__swrite+0x1e>
 8010e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e6c:	2302      	movs	r3, #2
 8010e6e:	2200      	movs	r2, #0
 8010e70:	f000 f89a 	bl	8010fa8 <_lseek_r>
 8010e74:	89a3      	ldrh	r3, [r4, #12]
 8010e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010e7e:	81a3      	strh	r3, [r4, #12]
 8010e80:	4632      	mov	r2, r6
 8010e82:	463b      	mov	r3, r7
 8010e84:	4628      	mov	r0, r5
 8010e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e8a:	f000 b8b1 	b.w	8010ff0 <_write_r>

08010e8e <__sseek>:
 8010e8e:	b510      	push	{r4, lr}
 8010e90:	460c      	mov	r4, r1
 8010e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e96:	f000 f887 	bl	8010fa8 <_lseek_r>
 8010e9a:	1c43      	adds	r3, r0, #1
 8010e9c:	89a3      	ldrh	r3, [r4, #12]
 8010e9e:	bf15      	itete	ne
 8010ea0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010ea2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010ea6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010eaa:	81a3      	strheq	r3, [r4, #12]
 8010eac:	bf18      	it	ne
 8010eae:	81a3      	strhne	r3, [r4, #12]
 8010eb0:	bd10      	pop	{r4, pc}

08010eb2 <__sclose>:
 8010eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010eb6:	f000 b809 	b.w	8010ecc <_close_r>

08010eba <memset>:
 8010eba:	4402      	add	r2, r0
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	d100      	bne.n	8010ec4 <memset+0xa>
 8010ec2:	4770      	bx	lr
 8010ec4:	f803 1b01 	strb.w	r1, [r3], #1
 8010ec8:	e7f9      	b.n	8010ebe <memset+0x4>
	...

08010ecc <_close_r>:
 8010ecc:	b538      	push	{r3, r4, r5, lr}
 8010ece:	4d06      	ldr	r5, [pc, #24]	@ (8010ee8 <_close_r+0x1c>)
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	4604      	mov	r4, r0
 8010ed4:	4608      	mov	r0, r1
 8010ed6:	602b      	str	r3, [r5, #0]
 8010ed8:	f7f0 f8fb 	bl	80010d2 <_close>
 8010edc:	1c43      	adds	r3, r0, #1
 8010ede:	d102      	bne.n	8010ee6 <_close_r+0x1a>
 8010ee0:	682b      	ldr	r3, [r5, #0]
 8010ee2:	b103      	cbz	r3, 8010ee6 <_close_r+0x1a>
 8010ee4:	6023      	str	r3, [r4, #0]
 8010ee6:	bd38      	pop	{r3, r4, r5, pc}
 8010ee8:	2000ace0 	.word	0x2000ace0

08010eec <_reclaim_reent>:
 8010eec:	4b2d      	ldr	r3, [pc, #180]	@ (8010fa4 <_reclaim_reent+0xb8>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	4283      	cmp	r3, r0
 8010ef2:	b570      	push	{r4, r5, r6, lr}
 8010ef4:	4604      	mov	r4, r0
 8010ef6:	d053      	beq.n	8010fa0 <_reclaim_reent+0xb4>
 8010ef8:	69c3      	ldr	r3, [r0, #28]
 8010efa:	b31b      	cbz	r3, 8010f44 <_reclaim_reent+0x58>
 8010efc:	68db      	ldr	r3, [r3, #12]
 8010efe:	b163      	cbz	r3, 8010f1a <_reclaim_reent+0x2e>
 8010f00:	2500      	movs	r5, #0
 8010f02:	69e3      	ldr	r3, [r4, #28]
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	5959      	ldr	r1, [r3, r5]
 8010f08:	b9b1      	cbnz	r1, 8010f38 <_reclaim_reent+0x4c>
 8010f0a:	3504      	adds	r5, #4
 8010f0c:	2d80      	cmp	r5, #128	@ 0x80
 8010f0e:	d1f8      	bne.n	8010f02 <_reclaim_reent+0x16>
 8010f10:	69e3      	ldr	r3, [r4, #28]
 8010f12:	4620      	mov	r0, r4
 8010f14:	68d9      	ldr	r1, [r3, #12]
 8010f16:	f000 f8b9 	bl	801108c <_free_r>
 8010f1a:	69e3      	ldr	r3, [r4, #28]
 8010f1c:	6819      	ldr	r1, [r3, #0]
 8010f1e:	b111      	cbz	r1, 8010f26 <_reclaim_reent+0x3a>
 8010f20:	4620      	mov	r0, r4
 8010f22:	f000 f8b3 	bl	801108c <_free_r>
 8010f26:	69e3      	ldr	r3, [r4, #28]
 8010f28:	689d      	ldr	r5, [r3, #8]
 8010f2a:	b15d      	cbz	r5, 8010f44 <_reclaim_reent+0x58>
 8010f2c:	4629      	mov	r1, r5
 8010f2e:	4620      	mov	r0, r4
 8010f30:	682d      	ldr	r5, [r5, #0]
 8010f32:	f000 f8ab 	bl	801108c <_free_r>
 8010f36:	e7f8      	b.n	8010f2a <_reclaim_reent+0x3e>
 8010f38:	680e      	ldr	r6, [r1, #0]
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	f000 f8a6 	bl	801108c <_free_r>
 8010f40:	4631      	mov	r1, r6
 8010f42:	e7e1      	b.n	8010f08 <_reclaim_reent+0x1c>
 8010f44:	6961      	ldr	r1, [r4, #20]
 8010f46:	b111      	cbz	r1, 8010f4e <_reclaim_reent+0x62>
 8010f48:	4620      	mov	r0, r4
 8010f4a:	f000 f89f 	bl	801108c <_free_r>
 8010f4e:	69e1      	ldr	r1, [r4, #28]
 8010f50:	b111      	cbz	r1, 8010f58 <_reclaim_reent+0x6c>
 8010f52:	4620      	mov	r0, r4
 8010f54:	f000 f89a 	bl	801108c <_free_r>
 8010f58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010f5a:	b111      	cbz	r1, 8010f62 <_reclaim_reent+0x76>
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	f000 f895 	bl	801108c <_free_r>
 8010f62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010f64:	b111      	cbz	r1, 8010f6c <_reclaim_reent+0x80>
 8010f66:	4620      	mov	r0, r4
 8010f68:	f000 f890 	bl	801108c <_free_r>
 8010f6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010f6e:	b111      	cbz	r1, 8010f76 <_reclaim_reent+0x8a>
 8010f70:	4620      	mov	r0, r4
 8010f72:	f000 f88b 	bl	801108c <_free_r>
 8010f76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010f78:	b111      	cbz	r1, 8010f80 <_reclaim_reent+0x94>
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	f000 f886 	bl	801108c <_free_r>
 8010f80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010f82:	b111      	cbz	r1, 8010f8a <_reclaim_reent+0x9e>
 8010f84:	4620      	mov	r0, r4
 8010f86:	f000 f881 	bl	801108c <_free_r>
 8010f8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010f8c:	b111      	cbz	r1, 8010f94 <_reclaim_reent+0xa8>
 8010f8e:	4620      	mov	r0, r4
 8010f90:	f000 f87c 	bl	801108c <_free_r>
 8010f94:	6a23      	ldr	r3, [r4, #32]
 8010f96:	b11b      	cbz	r3, 8010fa0 <_reclaim_reent+0xb4>
 8010f98:	4620      	mov	r0, r4
 8010f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f9e:	4718      	bx	r3
 8010fa0:	bd70      	pop	{r4, r5, r6, pc}
 8010fa2:	bf00      	nop
 8010fa4:	20000118 	.word	0x20000118

08010fa8 <_lseek_r>:
 8010fa8:	b538      	push	{r3, r4, r5, lr}
 8010faa:	4d07      	ldr	r5, [pc, #28]	@ (8010fc8 <_lseek_r+0x20>)
 8010fac:	4604      	mov	r4, r0
 8010fae:	4608      	mov	r0, r1
 8010fb0:	4611      	mov	r1, r2
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	602a      	str	r2, [r5, #0]
 8010fb6:	461a      	mov	r2, r3
 8010fb8:	f7f0 f8b2 	bl	8001120 <_lseek>
 8010fbc:	1c43      	adds	r3, r0, #1
 8010fbe:	d102      	bne.n	8010fc6 <_lseek_r+0x1e>
 8010fc0:	682b      	ldr	r3, [r5, #0]
 8010fc2:	b103      	cbz	r3, 8010fc6 <_lseek_r+0x1e>
 8010fc4:	6023      	str	r3, [r4, #0]
 8010fc6:	bd38      	pop	{r3, r4, r5, pc}
 8010fc8:	2000ace0 	.word	0x2000ace0

08010fcc <_read_r>:
 8010fcc:	b538      	push	{r3, r4, r5, lr}
 8010fce:	4d07      	ldr	r5, [pc, #28]	@ (8010fec <_read_r+0x20>)
 8010fd0:	4604      	mov	r4, r0
 8010fd2:	4608      	mov	r0, r1
 8010fd4:	4611      	mov	r1, r2
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	602a      	str	r2, [r5, #0]
 8010fda:	461a      	mov	r2, r3
 8010fdc:	f7f0 f840 	bl	8001060 <_read>
 8010fe0:	1c43      	adds	r3, r0, #1
 8010fe2:	d102      	bne.n	8010fea <_read_r+0x1e>
 8010fe4:	682b      	ldr	r3, [r5, #0]
 8010fe6:	b103      	cbz	r3, 8010fea <_read_r+0x1e>
 8010fe8:	6023      	str	r3, [r4, #0]
 8010fea:	bd38      	pop	{r3, r4, r5, pc}
 8010fec:	2000ace0 	.word	0x2000ace0

08010ff0 <_write_r>:
 8010ff0:	b538      	push	{r3, r4, r5, lr}
 8010ff2:	4d07      	ldr	r5, [pc, #28]	@ (8011010 <_write_r+0x20>)
 8010ff4:	4604      	mov	r4, r0
 8010ff6:	4608      	mov	r0, r1
 8010ff8:	4611      	mov	r1, r2
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	602a      	str	r2, [r5, #0]
 8010ffe:	461a      	mov	r2, r3
 8011000:	f7f0 f84b 	bl	800109a <_write>
 8011004:	1c43      	adds	r3, r0, #1
 8011006:	d102      	bne.n	801100e <_write_r+0x1e>
 8011008:	682b      	ldr	r3, [r5, #0]
 801100a:	b103      	cbz	r3, 801100e <_write_r+0x1e>
 801100c:	6023      	str	r3, [r4, #0]
 801100e:	bd38      	pop	{r3, r4, r5, pc}
 8011010:	2000ace0 	.word	0x2000ace0

08011014 <__errno>:
 8011014:	4b01      	ldr	r3, [pc, #4]	@ (801101c <__errno+0x8>)
 8011016:	6818      	ldr	r0, [r3, #0]
 8011018:	4770      	bx	lr
 801101a:	bf00      	nop
 801101c:	20000118 	.word	0x20000118

08011020 <__libc_init_array>:
 8011020:	b570      	push	{r4, r5, r6, lr}
 8011022:	4d0d      	ldr	r5, [pc, #52]	@ (8011058 <__libc_init_array+0x38>)
 8011024:	4c0d      	ldr	r4, [pc, #52]	@ (801105c <__libc_init_array+0x3c>)
 8011026:	1b64      	subs	r4, r4, r5
 8011028:	10a4      	asrs	r4, r4, #2
 801102a:	2600      	movs	r6, #0
 801102c:	42a6      	cmp	r6, r4
 801102e:	d109      	bne.n	8011044 <__libc_init_array+0x24>
 8011030:	4d0b      	ldr	r5, [pc, #44]	@ (8011060 <__libc_init_array+0x40>)
 8011032:	4c0c      	ldr	r4, [pc, #48]	@ (8011064 <__libc_init_array+0x44>)
 8011034:	f000 fdf8 	bl	8011c28 <_init>
 8011038:	1b64      	subs	r4, r4, r5
 801103a:	10a4      	asrs	r4, r4, #2
 801103c:	2600      	movs	r6, #0
 801103e:	42a6      	cmp	r6, r4
 8011040:	d105      	bne.n	801104e <__libc_init_array+0x2e>
 8011042:	bd70      	pop	{r4, r5, r6, pc}
 8011044:	f855 3b04 	ldr.w	r3, [r5], #4
 8011048:	4798      	blx	r3
 801104a:	3601      	adds	r6, #1
 801104c:	e7ee      	b.n	801102c <__libc_init_array+0xc>
 801104e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011052:	4798      	blx	r3
 8011054:	3601      	adds	r6, #1
 8011056:	e7f2      	b.n	801103e <__libc_init_array+0x1e>
 8011058:	08011e78 	.word	0x08011e78
 801105c:	08011e78 	.word	0x08011e78
 8011060:	08011e78 	.word	0x08011e78
 8011064:	08011e7c 	.word	0x08011e7c

08011068 <__retarget_lock_init_recursive>:
 8011068:	4770      	bx	lr

0801106a <__retarget_lock_acquire_recursive>:
 801106a:	4770      	bx	lr

0801106c <__retarget_lock_release_recursive>:
 801106c:	4770      	bx	lr

0801106e <memcpy>:
 801106e:	440a      	add	r2, r1
 8011070:	4291      	cmp	r1, r2
 8011072:	f100 33ff 	add.w	r3, r0, #4294967295
 8011076:	d100      	bne.n	801107a <memcpy+0xc>
 8011078:	4770      	bx	lr
 801107a:	b510      	push	{r4, lr}
 801107c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011080:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011084:	4291      	cmp	r1, r2
 8011086:	d1f9      	bne.n	801107c <memcpy+0xe>
 8011088:	bd10      	pop	{r4, pc}
	...

0801108c <_free_r>:
 801108c:	b538      	push	{r3, r4, r5, lr}
 801108e:	4605      	mov	r5, r0
 8011090:	2900      	cmp	r1, #0
 8011092:	d041      	beq.n	8011118 <_free_r+0x8c>
 8011094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011098:	1f0c      	subs	r4, r1, #4
 801109a:	2b00      	cmp	r3, #0
 801109c:	bfb8      	it	lt
 801109e:	18e4      	addlt	r4, r4, r3
 80110a0:	f000 f8e0 	bl	8011264 <__malloc_lock>
 80110a4:	4a1d      	ldr	r2, [pc, #116]	@ (801111c <_free_r+0x90>)
 80110a6:	6813      	ldr	r3, [r2, #0]
 80110a8:	b933      	cbnz	r3, 80110b8 <_free_r+0x2c>
 80110aa:	6063      	str	r3, [r4, #4]
 80110ac:	6014      	str	r4, [r2, #0]
 80110ae:	4628      	mov	r0, r5
 80110b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110b4:	f000 b8dc 	b.w	8011270 <__malloc_unlock>
 80110b8:	42a3      	cmp	r3, r4
 80110ba:	d908      	bls.n	80110ce <_free_r+0x42>
 80110bc:	6820      	ldr	r0, [r4, #0]
 80110be:	1821      	adds	r1, r4, r0
 80110c0:	428b      	cmp	r3, r1
 80110c2:	bf01      	itttt	eq
 80110c4:	6819      	ldreq	r1, [r3, #0]
 80110c6:	685b      	ldreq	r3, [r3, #4]
 80110c8:	1809      	addeq	r1, r1, r0
 80110ca:	6021      	streq	r1, [r4, #0]
 80110cc:	e7ed      	b.n	80110aa <_free_r+0x1e>
 80110ce:	461a      	mov	r2, r3
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	b10b      	cbz	r3, 80110d8 <_free_r+0x4c>
 80110d4:	42a3      	cmp	r3, r4
 80110d6:	d9fa      	bls.n	80110ce <_free_r+0x42>
 80110d8:	6811      	ldr	r1, [r2, #0]
 80110da:	1850      	adds	r0, r2, r1
 80110dc:	42a0      	cmp	r0, r4
 80110de:	d10b      	bne.n	80110f8 <_free_r+0x6c>
 80110e0:	6820      	ldr	r0, [r4, #0]
 80110e2:	4401      	add	r1, r0
 80110e4:	1850      	adds	r0, r2, r1
 80110e6:	4283      	cmp	r3, r0
 80110e8:	6011      	str	r1, [r2, #0]
 80110ea:	d1e0      	bne.n	80110ae <_free_r+0x22>
 80110ec:	6818      	ldr	r0, [r3, #0]
 80110ee:	685b      	ldr	r3, [r3, #4]
 80110f0:	6053      	str	r3, [r2, #4]
 80110f2:	4408      	add	r0, r1
 80110f4:	6010      	str	r0, [r2, #0]
 80110f6:	e7da      	b.n	80110ae <_free_r+0x22>
 80110f8:	d902      	bls.n	8011100 <_free_r+0x74>
 80110fa:	230c      	movs	r3, #12
 80110fc:	602b      	str	r3, [r5, #0]
 80110fe:	e7d6      	b.n	80110ae <_free_r+0x22>
 8011100:	6820      	ldr	r0, [r4, #0]
 8011102:	1821      	adds	r1, r4, r0
 8011104:	428b      	cmp	r3, r1
 8011106:	bf04      	itt	eq
 8011108:	6819      	ldreq	r1, [r3, #0]
 801110a:	685b      	ldreq	r3, [r3, #4]
 801110c:	6063      	str	r3, [r4, #4]
 801110e:	bf04      	itt	eq
 8011110:	1809      	addeq	r1, r1, r0
 8011112:	6021      	streq	r1, [r4, #0]
 8011114:	6054      	str	r4, [r2, #4]
 8011116:	e7ca      	b.n	80110ae <_free_r+0x22>
 8011118:	bd38      	pop	{r3, r4, r5, pc}
 801111a:	bf00      	nop
 801111c:	2000acec 	.word	0x2000acec

08011120 <sbrk_aligned>:
 8011120:	b570      	push	{r4, r5, r6, lr}
 8011122:	4e0f      	ldr	r6, [pc, #60]	@ (8011160 <sbrk_aligned+0x40>)
 8011124:	460c      	mov	r4, r1
 8011126:	6831      	ldr	r1, [r6, #0]
 8011128:	4605      	mov	r5, r0
 801112a:	b911      	cbnz	r1, 8011132 <sbrk_aligned+0x12>
 801112c:	f000 fce8 	bl	8011b00 <_sbrk_r>
 8011130:	6030      	str	r0, [r6, #0]
 8011132:	4621      	mov	r1, r4
 8011134:	4628      	mov	r0, r5
 8011136:	f000 fce3 	bl	8011b00 <_sbrk_r>
 801113a:	1c43      	adds	r3, r0, #1
 801113c:	d103      	bne.n	8011146 <sbrk_aligned+0x26>
 801113e:	f04f 34ff 	mov.w	r4, #4294967295
 8011142:	4620      	mov	r0, r4
 8011144:	bd70      	pop	{r4, r5, r6, pc}
 8011146:	1cc4      	adds	r4, r0, #3
 8011148:	f024 0403 	bic.w	r4, r4, #3
 801114c:	42a0      	cmp	r0, r4
 801114e:	d0f8      	beq.n	8011142 <sbrk_aligned+0x22>
 8011150:	1a21      	subs	r1, r4, r0
 8011152:	4628      	mov	r0, r5
 8011154:	f000 fcd4 	bl	8011b00 <_sbrk_r>
 8011158:	3001      	adds	r0, #1
 801115a:	d1f2      	bne.n	8011142 <sbrk_aligned+0x22>
 801115c:	e7ef      	b.n	801113e <sbrk_aligned+0x1e>
 801115e:	bf00      	nop
 8011160:	2000ace8 	.word	0x2000ace8

08011164 <_malloc_r>:
 8011164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011168:	1ccd      	adds	r5, r1, #3
 801116a:	f025 0503 	bic.w	r5, r5, #3
 801116e:	3508      	adds	r5, #8
 8011170:	2d0c      	cmp	r5, #12
 8011172:	bf38      	it	cc
 8011174:	250c      	movcc	r5, #12
 8011176:	2d00      	cmp	r5, #0
 8011178:	4606      	mov	r6, r0
 801117a:	db01      	blt.n	8011180 <_malloc_r+0x1c>
 801117c:	42a9      	cmp	r1, r5
 801117e:	d904      	bls.n	801118a <_malloc_r+0x26>
 8011180:	230c      	movs	r3, #12
 8011182:	6033      	str	r3, [r6, #0]
 8011184:	2000      	movs	r0, #0
 8011186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801118a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011260 <_malloc_r+0xfc>
 801118e:	f000 f869 	bl	8011264 <__malloc_lock>
 8011192:	f8d8 3000 	ldr.w	r3, [r8]
 8011196:	461c      	mov	r4, r3
 8011198:	bb44      	cbnz	r4, 80111ec <_malloc_r+0x88>
 801119a:	4629      	mov	r1, r5
 801119c:	4630      	mov	r0, r6
 801119e:	f7ff ffbf 	bl	8011120 <sbrk_aligned>
 80111a2:	1c43      	adds	r3, r0, #1
 80111a4:	4604      	mov	r4, r0
 80111a6:	d158      	bne.n	801125a <_malloc_r+0xf6>
 80111a8:	f8d8 4000 	ldr.w	r4, [r8]
 80111ac:	4627      	mov	r7, r4
 80111ae:	2f00      	cmp	r7, #0
 80111b0:	d143      	bne.n	801123a <_malloc_r+0xd6>
 80111b2:	2c00      	cmp	r4, #0
 80111b4:	d04b      	beq.n	801124e <_malloc_r+0xea>
 80111b6:	6823      	ldr	r3, [r4, #0]
 80111b8:	4639      	mov	r1, r7
 80111ba:	4630      	mov	r0, r6
 80111bc:	eb04 0903 	add.w	r9, r4, r3
 80111c0:	f000 fc9e 	bl	8011b00 <_sbrk_r>
 80111c4:	4581      	cmp	r9, r0
 80111c6:	d142      	bne.n	801124e <_malloc_r+0xea>
 80111c8:	6821      	ldr	r1, [r4, #0]
 80111ca:	1a6d      	subs	r5, r5, r1
 80111cc:	4629      	mov	r1, r5
 80111ce:	4630      	mov	r0, r6
 80111d0:	f7ff ffa6 	bl	8011120 <sbrk_aligned>
 80111d4:	3001      	adds	r0, #1
 80111d6:	d03a      	beq.n	801124e <_malloc_r+0xea>
 80111d8:	6823      	ldr	r3, [r4, #0]
 80111da:	442b      	add	r3, r5
 80111dc:	6023      	str	r3, [r4, #0]
 80111de:	f8d8 3000 	ldr.w	r3, [r8]
 80111e2:	685a      	ldr	r2, [r3, #4]
 80111e4:	bb62      	cbnz	r2, 8011240 <_malloc_r+0xdc>
 80111e6:	f8c8 7000 	str.w	r7, [r8]
 80111ea:	e00f      	b.n	801120c <_malloc_r+0xa8>
 80111ec:	6822      	ldr	r2, [r4, #0]
 80111ee:	1b52      	subs	r2, r2, r5
 80111f0:	d420      	bmi.n	8011234 <_malloc_r+0xd0>
 80111f2:	2a0b      	cmp	r2, #11
 80111f4:	d917      	bls.n	8011226 <_malloc_r+0xc2>
 80111f6:	1961      	adds	r1, r4, r5
 80111f8:	42a3      	cmp	r3, r4
 80111fa:	6025      	str	r5, [r4, #0]
 80111fc:	bf18      	it	ne
 80111fe:	6059      	strne	r1, [r3, #4]
 8011200:	6863      	ldr	r3, [r4, #4]
 8011202:	bf08      	it	eq
 8011204:	f8c8 1000 	streq.w	r1, [r8]
 8011208:	5162      	str	r2, [r4, r5]
 801120a:	604b      	str	r3, [r1, #4]
 801120c:	4630      	mov	r0, r6
 801120e:	f000 f82f 	bl	8011270 <__malloc_unlock>
 8011212:	f104 000b 	add.w	r0, r4, #11
 8011216:	1d23      	adds	r3, r4, #4
 8011218:	f020 0007 	bic.w	r0, r0, #7
 801121c:	1ac2      	subs	r2, r0, r3
 801121e:	bf1c      	itt	ne
 8011220:	1a1b      	subne	r3, r3, r0
 8011222:	50a3      	strne	r3, [r4, r2]
 8011224:	e7af      	b.n	8011186 <_malloc_r+0x22>
 8011226:	6862      	ldr	r2, [r4, #4]
 8011228:	42a3      	cmp	r3, r4
 801122a:	bf0c      	ite	eq
 801122c:	f8c8 2000 	streq.w	r2, [r8]
 8011230:	605a      	strne	r2, [r3, #4]
 8011232:	e7eb      	b.n	801120c <_malloc_r+0xa8>
 8011234:	4623      	mov	r3, r4
 8011236:	6864      	ldr	r4, [r4, #4]
 8011238:	e7ae      	b.n	8011198 <_malloc_r+0x34>
 801123a:	463c      	mov	r4, r7
 801123c:	687f      	ldr	r7, [r7, #4]
 801123e:	e7b6      	b.n	80111ae <_malloc_r+0x4a>
 8011240:	461a      	mov	r2, r3
 8011242:	685b      	ldr	r3, [r3, #4]
 8011244:	42a3      	cmp	r3, r4
 8011246:	d1fb      	bne.n	8011240 <_malloc_r+0xdc>
 8011248:	2300      	movs	r3, #0
 801124a:	6053      	str	r3, [r2, #4]
 801124c:	e7de      	b.n	801120c <_malloc_r+0xa8>
 801124e:	230c      	movs	r3, #12
 8011250:	6033      	str	r3, [r6, #0]
 8011252:	4630      	mov	r0, r6
 8011254:	f000 f80c 	bl	8011270 <__malloc_unlock>
 8011258:	e794      	b.n	8011184 <_malloc_r+0x20>
 801125a:	6005      	str	r5, [r0, #0]
 801125c:	e7d6      	b.n	801120c <_malloc_r+0xa8>
 801125e:	bf00      	nop
 8011260:	2000acec 	.word	0x2000acec

08011264 <__malloc_lock>:
 8011264:	4801      	ldr	r0, [pc, #4]	@ (801126c <__malloc_lock+0x8>)
 8011266:	f7ff bf00 	b.w	801106a <__retarget_lock_acquire_recursive>
 801126a:	bf00      	nop
 801126c:	2000ace4 	.word	0x2000ace4

08011270 <__malloc_unlock>:
 8011270:	4801      	ldr	r0, [pc, #4]	@ (8011278 <__malloc_unlock+0x8>)
 8011272:	f7ff befb 	b.w	801106c <__retarget_lock_release_recursive>
 8011276:	bf00      	nop
 8011278:	2000ace4 	.word	0x2000ace4

0801127c <__sfputc_r>:
 801127c:	6893      	ldr	r3, [r2, #8]
 801127e:	3b01      	subs	r3, #1
 8011280:	2b00      	cmp	r3, #0
 8011282:	b410      	push	{r4}
 8011284:	6093      	str	r3, [r2, #8]
 8011286:	da08      	bge.n	801129a <__sfputc_r+0x1e>
 8011288:	6994      	ldr	r4, [r2, #24]
 801128a:	42a3      	cmp	r3, r4
 801128c:	db01      	blt.n	8011292 <__sfputc_r+0x16>
 801128e:	290a      	cmp	r1, #10
 8011290:	d103      	bne.n	801129a <__sfputc_r+0x1e>
 8011292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011296:	f000 bb9f 	b.w	80119d8 <__swbuf_r>
 801129a:	6813      	ldr	r3, [r2, #0]
 801129c:	1c58      	adds	r0, r3, #1
 801129e:	6010      	str	r0, [r2, #0]
 80112a0:	7019      	strb	r1, [r3, #0]
 80112a2:	4608      	mov	r0, r1
 80112a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112a8:	4770      	bx	lr

080112aa <__sfputs_r>:
 80112aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ac:	4606      	mov	r6, r0
 80112ae:	460f      	mov	r7, r1
 80112b0:	4614      	mov	r4, r2
 80112b2:	18d5      	adds	r5, r2, r3
 80112b4:	42ac      	cmp	r4, r5
 80112b6:	d101      	bne.n	80112bc <__sfputs_r+0x12>
 80112b8:	2000      	movs	r0, #0
 80112ba:	e007      	b.n	80112cc <__sfputs_r+0x22>
 80112bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112c0:	463a      	mov	r2, r7
 80112c2:	4630      	mov	r0, r6
 80112c4:	f7ff ffda 	bl	801127c <__sfputc_r>
 80112c8:	1c43      	adds	r3, r0, #1
 80112ca:	d1f3      	bne.n	80112b4 <__sfputs_r+0xa>
 80112cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080112d0 <_vfiprintf_r>:
 80112d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112d4:	460d      	mov	r5, r1
 80112d6:	b09d      	sub	sp, #116	@ 0x74
 80112d8:	4614      	mov	r4, r2
 80112da:	4698      	mov	r8, r3
 80112dc:	4606      	mov	r6, r0
 80112de:	b118      	cbz	r0, 80112e8 <_vfiprintf_r+0x18>
 80112e0:	6a03      	ldr	r3, [r0, #32]
 80112e2:	b90b      	cbnz	r3, 80112e8 <_vfiprintf_r+0x18>
 80112e4:	f7ff fd56 	bl	8010d94 <__sinit>
 80112e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80112ea:	07d9      	lsls	r1, r3, #31
 80112ec:	d405      	bmi.n	80112fa <_vfiprintf_r+0x2a>
 80112ee:	89ab      	ldrh	r3, [r5, #12]
 80112f0:	059a      	lsls	r2, r3, #22
 80112f2:	d402      	bmi.n	80112fa <_vfiprintf_r+0x2a>
 80112f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80112f6:	f7ff feb8 	bl	801106a <__retarget_lock_acquire_recursive>
 80112fa:	89ab      	ldrh	r3, [r5, #12]
 80112fc:	071b      	lsls	r3, r3, #28
 80112fe:	d501      	bpl.n	8011304 <_vfiprintf_r+0x34>
 8011300:	692b      	ldr	r3, [r5, #16]
 8011302:	b99b      	cbnz	r3, 801132c <_vfiprintf_r+0x5c>
 8011304:	4629      	mov	r1, r5
 8011306:	4630      	mov	r0, r6
 8011308:	f000 fba4 	bl	8011a54 <__swsetup_r>
 801130c:	b170      	cbz	r0, 801132c <_vfiprintf_r+0x5c>
 801130e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011310:	07dc      	lsls	r4, r3, #31
 8011312:	d504      	bpl.n	801131e <_vfiprintf_r+0x4e>
 8011314:	f04f 30ff 	mov.w	r0, #4294967295
 8011318:	b01d      	add	sp, #116	@ 0x74
 801131a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801131e:	89ab      	ldrh	r3, [r5, #12]
 8011320:	0598      	lsls	r0, r3, #22
 8011322:	d4f7      	bmi.n	8011314 <_vfiprintf_r+0x44>
 8011324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011326:	f7ff fea1 	bl	801106c <__retarget_lock_release_recursive>
 801132a:	e7f3      	b.n	8011314 <_vfiprintf_r+0x44>
 801132c:	2300      	movs	r3, #0
 801132e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011330:	2320      	movs	r3, #32
 8011332:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011336:	f8cd 800c 	str.w	r8, [sp, #12]
 801133a:	2330      	movs	r3, #48	@ 0x30
 801133c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80114ec <_vfiprintf_r+0x21c>
 8011340:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011344:	f04f 0901 	mov.w	r9, #1
 8011348:	4623      	mov	r3, r4
 801134a:	469a      	mov	sl, r3
 801134c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011350:	b10a      	cbz	r2, 8011356 <_vfiprintf_r+0x86>
 8011352:	2a25      	cmp	r2, #37	@ 0x25
 8011354:	d1f9      	bne.n	801134a <_vfiprintf_r+0x7a>
 8011356:	ebba 0b04 	subs.w	fp, sl, r4
 801135a:	d00b      	beq.n	8011374 <_vfiprintf_r+0xa4>
 801135c:	465b      	mov	r3, fp
 801135e:	4622      	mov	r2, r4
 8011360:	4629      	mov	r1, r5
 8011362:	4630      	mov	r0, r6
 8011364:	f7ff ffa1 	bl	80112aa <__sfputs_r>
 8011368:	3001      	adds	r0, #1
 801136a:	f000 80a7 	beq.w	80114bc <_vfiprintf_r+0x1ec>
 801136e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011370:	445a      	add	r2, fp
 8011372:	9209      	str	r2, [sp, #36]	@ 0x24
 8011374:	f89a 3000 	ldrb.w	r3, [sl]
 8011378:	2b00      	cmp	r3, #0
 801137a:	f000 809f 	beq.w	80114bc <_vfiprintf_r+0x1ec>
 801137e:	2300      	movs	r3, #0
 8011380:	f04f 32ff 	mov.w	r2, #4294967295
 8011384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011388:	f10a 0a01 	add.w	sl, sl, #1
 801138c:	9304      	str	r3, [sp, #16]
 801138e:	9307      	str	r3, [sp, #28]
 8011390:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011394:	931a      	str	r3, [sp, #104]	@ 0x68
 8011396:	4654      	mov	r4, sl
 8011398:	2205      	movs	r2, #5
 801139a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801139e:	4853      	ldr	r0, [pc, #332]	@ (80114ec <_vfiprintf_r+0x21c>)
 80113a0:	f7ee feee 	bl	8000180 <memchr>
 80113a4:	9a04      	ldr	r2, [sp, #16]
 80113a6:	b9d8      	cbnz	r0, 80113e0 <_vfiprintf_r+0x110>
 80113a8:	06d1      	lsls	r1, r2, #27
 80113aa:	bf44      	itt	mi
 80113ac:	2320      	movmi	r3, #32
 80113ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80113b2:	0713      	lsls	r3, r2, #28
 80113b4:	bf44      	itt	mi
 80113b6:	232b      	movmi	r3, #43	@ 0x2b
 80113b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80113bc:	f89a 3000 	ldrb.w	r3, [sl]
 80113c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80113c2:	d015      	beq.n	80113f0 <_vfiprintf_r+0x120>
 80113c4:	9a07      	ldr	r2, [sp, #28]
 80113c6:	4654      	mov	r4, sl
 80113c8:	2000      	movs	r0, #0
 80113ca:	f04f 0c0a 	mov.w	ip, #10
 80113ce:	4621      	mov	r1, r4
 80113d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113d4:	3b30      	subs	r3, #48	@ 0x30
 80113d6:	2b09      	cmp	r3, #9
 80113d8:	d94b      	bls.n	8011472 <_vfiprintf_r+0x1a2>
 80113da:	b1b0      	cbz	r0, 801140a <_vfiprintf_r+0x13a>
 80113dc:	9207      	str	r2, [sp, #28]
 80113de:	e014      	b.n	801140a <_vfiprintf_r+0x13a>
 80113e0:	eba0 0308 	sub.w	r3, r0, r8
 80113e4:	fa09 f303 	lsl.w	r3, r9, r3
 80113e8:	4313      	orrs	r3, r2
 80113ea:	9304      	str	r3, [sp, #16]
 80113ec:	46a2      	mov	sl, r4
 80113ee:	e7d2      	b.n	8011396 <_vfiprintf_r+0xc6>
 80113f0:	9b03      	ldr	r3, [sp, #12]
 80113f2:	1d19      	adds	r1, r3, #4
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	9103      	str	r1, [sp, #12]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	bfbb      	ittet	lt
 80113fc:	425b      	neglt	r3, r3
 80113fe:	f042 0202 	orrlt.w	r2, r2, #2
 8011402:	9307      	strge	r3, [sp, #28]
 8011404:	9307      	strlt	r3, [sp, #28]
 8011406:	bfb8      	it	lt
 8011408:	9204      	strlt	r2, [sp, #16]
 801140a:	7823      	ldrb	r3, [r4, #0]
 801140c:	2b2e      	cmp	r3, #46	@ 0x2e
 801140e:	d10a      	bne.n	8011426 <_vfiprintf_r+0x156>
 8011410:	7863      	ldrb	r3, [r4, #1]
 8011412:	2b2a      	cmp	r3, #42	@ 0x2a
 8011414:	d132      	bne.n	801147c <_vfiprintf_r+0x1ac>
 8011416:	9b03      	ldr	r3, [sp, #12]
 8011418:	1d1a      	adds	r2, r3, #4
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	9203      	str	r2, [sp, #12]
 801141e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011422:	3402      	adds	r4, #2
 8011424:	9305      	str	r3, [sp, #20]
 8011426:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80114fc <_vfiprintf_r+0x22c>
 801142a:	7821      	ldrb	r1, [r4, #0]
 801142c:	2203      	movs	r2, #3
 801142e:	4650      	mov	r0, sl
 8011430:	f7ee fea6 	bl	8000180 <memchr>
 8011434:	b138      	cbz	r0, 8011446 <_vfiprintf_r+0x176>
 8011436:	9b04      	ldr	r3, [sp, #16]
 8011438:	eba0 000a 	sub.w	r0, r0, sl
 801143c:	2240      	movs	r2, #64	@ 0x40
 801143e:	4082      	lsls	r2, r0
 8011440:	4313      	orrs	r3, r2
 8011442:	3401      	adds	r4, #1
 8011444:	9304      	str	r3, [sp, #16]
 8011446:	f814 1b01 	ldrb.w	r1, [r4], #1
 801144a:	4829      	ldr	r0, [pc, #164]	@ (80114f0 <_vfiprintf_r+0x220>)
 801144c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011450:	2206      	movs	r2, #6
 8011452:	f7ee fe95 	bl	8000180 <memchr>
 8011456:	2800      	cmp	r0, #0
 8011458:	d03f      	beq.n	80114da <_vfiprintf_r+0x20a>
 801145a:	4b26      	ldr	r3, [pc, #152]	@ (80114f4 <_vfiprintf_r+0x224>)
 801145c:	bb1b      	cbnz	r3, 80114a6 <_vfiprintf_r+0x1d6>
 801145e:	9b03      	ldr	r3, [sp, #12]
 8011460:	3307      	adds	r3, #7
 8011462:	f023 0307 	bic.w	r3, r3, #7
 8011466:	3308      	adds	r3, #8
 8011468:	9303      	str	r3, [sp, #12]
 801146a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801146c:	443b      	add	r3, r7
 801146e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011470:	e76a      	b.n	8011348 <_vfiprintf_r+0x78>
 8011472:	fb0c 3202 	mla	r2, ip, r2, r3
 8011476:	460c      	mov	r4, r1
 8011478:	2001      	movs	r0, #1
 801147a:	e7a8      	b.n	80113ce <_vfiprintf_r+0xfe>
 801147c:	2300      	movs	r3, #0
 801147e:	3401      	adds	r4, #1
 8011480:	9305      	str	r3, [sp, #20]
 8011482:	4619      	mov	r1, r3
 8011484:	f04f 0c0a 	mov.w	ip, #10
 8011488:	4620      	mov	r0, r4
 801148a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801148e:	3a30      	subs	r2, #48	@ 0x30
 8011490:	2a09      	cmp	r2, #9
 8011492:	d903      	bls.n	801149c <_vfiprintf_r+0x1cc>
 8011494:	2b00      	cmp	r3, #0
 8011496:	d0c6      	beq.n	8011426 <_vfiprintf_r+0x156>
 8011498:	9105      	str	r1, [sp, #20]
 801149a:	e7c4      	b.n	8011426 <_vfiprintf_r+0x156>
 801149c:	fb0c 2101 	mla	r1, ip, r1, r2
 80114a0:	4604      	mov	r4, r0
 80114a2:	2301      	movs	r3, #1
 80114a4:	e7f0      	b.n	8011488 <_vfiprintf_r+0x1b8>
 80114a6:	ab03      	add	r3, sp, #12
 80114a8:	9300      	str	r3, [sp, #0]
 80114aa:	462a      	mov	r2, r5
 80114ac:	4b12      	ldr	r3, [pc, #72]	@ (80114f8 <_vfiprintf_r+0x228>)
 80114ae:	a904      	add	r1, sp, #16
 80114b0:	4630      	mov	r0, r6
 80114b2:	f3af 8000 	nop.w
 80114b6:	4607      	mov	r7, r0
 80114b8:	1c78      	adds	r0, r7, #1
 80114ba:	d1d6      	bne.n	801146a <_vfiprintf_r+0x19a>
 80114bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80114be:	07d9      	lsls	r1, r3, #31
 80114c0:	d405      	bmi.n	80114ce <_vfiprintf_r+0x1fe>
 80114c2:	89ab      	ldrh	r3, [r5, #12]
 80114c4:	059a      	lsls	r2, r3, #22
 80114c6:	d402      	bmi.n	80114ce <_vfiprintf_r+0x1fe>
 80114c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80114ca:	f7ff fdcf 	bl	801106c <__retarget_lock_release_recursive>
 80114ce:	89ab      	ldrh	r3, [r5, #12]
 80114d0:	065b      	lsls	r3, r3, #25
 80114d2:	f53f af1f 	bmi.w	8011314 <_vfiprintf_r+0x44>
 80114d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80114d8:	e71e      	b.n	8011318 <_vfiprintf_r+0x48>
 80114da:	ab03      	add	r3, sp, #12
 80114dc:	9300      	str	r3, [sp, #0]
 80114de:	462a      	mov	r2, r5
 80114e0:	4b05      	ldr	r3, [pc, #20]	@ (80114f8 <_vfiprintf_r+0x228>)
 80114e2:	a904      	add	r1, sp, #16
 80114e4:	4630      	mov	r0, r6
 80114e6:	f000 f879 	bl	80115dc <_printf_i>
 80114ea:	e7e4      	b.n	80114b6 <_vfiprintf_r+0x1e6>
 80114ec:	08011e3c 	.word	0x08011e3c
 80114f0:	08011e46 	.word	0x08011e46
 80114f4:	00000000 	.word	0x00000000
 80114f8:	080112ab 	.word	0x080112ab
 80114fc:	08011e42 	.word	0x08011e42

08011500 <_printf_common>:
 8011500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011504:	4616      	mov	r6, r2
 8011506:	4698      	mov	r8, r3
 8011508:	688a      	ldr	r2, [r1, #8]
 801150a:	690b      	ldr	r3, [r1, #16]
 801150c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011510:	4293      	cmp	r3, r2
 8011512:	bfb8      	it	lt
 8011514:	4613      	movlt	r3, r2
 8011516:	6033      	str	r3, [r6, #0]
 8011518:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801151c:	4607      	mov	r7, r0
 801151e:	460c      	mov	r4, r1
 8011520:	b10a      	cbz	r2, 8011526 <_printf_common+0x26>
 8011522:	3301      	adds	r3, #1
 8011524:	6033      	str	r3, [r6, #0]
 8011526:	6823      	ldr	r3, [r4, #0]
 8011528:	0699      	lsls	r1, r3, #26
 801152a:	bf42      	ittt	mi
 801152c:	6833      	ldrmi	r3, [r6, #0]
 801152e:	3302      	addmi	r3, #2
 8011530:	6033      	strmi	r3, [r6, #0]
 8011532:	6825      	ldr	r5, [r4, #0]
 8011534:	f015 0506 	ands.w	r5, r5, #6
 8011538:	d106      	bne.n	8011548 <_printf_common+0x48>
 801153a:	f104 0a19 	add.w	sl, r4, #25
 801153e:	68e3      	ldr	r3, [r4, #12]
 8011540:	6832      	ldr	r2, [r6, #0]
 8011542:	1a9b      	subs	r3, r3, r2
 8011544:	42ab      	cmp	r3, r5
 8011546:	dc26      	bgt.n	8011596 <_printf_common+0x96>
 8011548:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801154c:	6822      	ldr	r2, [r4, #0]
 801154e:	3b00      	subs	r3, #0
 8011550:	bf18      	it	ne
 8011552:	2301      	movne	r3, #1
 8011554:	0692      	lsls	r2, r2, #26
 8011556:	d42b      	bmi.n	80115b0 <_printf_common+0xb0>
 8011558:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801155c:	4641      	mov	r1, r8
 801155e:	4638      	mov	r0, r7
 8011560:	47c8      	blx	r9
 8011562:	3001      	adds	r0, #1
 8011564:	d01e      	beq.n	80115a4 <_printf_common+0xa4>
 8011566:	6823      	ldr	r3, [r4, #0]
 8011568:	6922      	ldr	r2, [r4, #16]
 801156a:	f003 0306 	and.w	r3, r3, #6
 801156e:	2b04      	cmp	r3, #4
 8011570:	bf02      	ittt	eq
 8011572:	68e5      	ldreq	r5, [r4, #12]
 8011574:	6833      	ldreq	r3, [r6, #0]
 8011576:	1aed      	subeq	r5, r5, r3
 8011578:	68a3      	ldr	r3, [r4, #8]
 801157a:	bf0c      	ite	eq
 801157c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011580:	2500      	movne	r5, #0
 8011582:	4293      	cmp	r3, r2
 8011584:	bfc4      	itt	gt
 8011586:	1a9b      	subgt	r3, r3, r2
 8011588:	18ed      	addgt	r5, r5, r3
 801158a:	2600      	movs	r6, #0
 801158c:	341a      	adds	r4, #26
 801158e:	42b5      	cmp	r5, r6
 8011590:	d11a      	bne.n	80115c8 <_printf_common+0xc8>
 8011592:	2000      	movs	r0, #0
 8011594:	e008      	b.n	80115a8 <_printf_common+0xa8>
 8011596:	2301      	movs	r3, #1
 8011598:	4652      	mov	r2, sl
 801159a:	4641      	mov	r1, r8
 801159c:	4638      	mov	r0, r7
 801159e:	47c8      	blx	r9
 80115a0:	3001      	adds	r0, #1
 80115a2:	d103      	bne.n	80115ac <_printf_common+0xac>
 80115a4:	f04f 30ff 	mov.w	r0, #4294967295
 80115a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115ac:	3501      	adds	r5, #1
 80115ae:	e7c6      	b.n	801153e <_printf_common+0x3e>
 80115b0:	18e1      	adds	r1, r4, r3
 80115b2:	1c5a      	adds	r2, r3, #1
 80115b4:	2030      	movs	r0, #48	@ 0x30
 80115b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80115ba:	4422      	add	r2, r4
 80115bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80115c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80115c4:	3302      	adds	r3, #2
 80115c6:	e7c7      	b.n	8011558 <_printf_common+0x58>
 80115c8:	2301      	movs	r3, #1
 80115ca:	4622      	mov	r2, r4
 80115cc:	4641      	mov	r1, r8
 80115ce:	4638      	mov	r0, r7
 80115d0:	47c8      	blx	r9
 80115d2:	3001      	adds	r0, #1
 80115d4:	d0e6      	beq.n	80115a4 <_printf_common+0xa4>
 80115d6:	3601      	adds	r6, #1
 80115d8:	e7d9      	b.n	801158e <_printf_common+0x8e>
	...

080115dc <_printf_i>:
 80115dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80115e0:	7e0f      	ldrb	r7, [r1, #24]
 80115e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80115e4:	2f78      	cmp	r7, #120	@ 0x78
 80115e6:	4691      	mov	r9, r2
 80115e8:	4680      	mov	r8, r0
 80115ea:	460c      	mov	r4, r1
 80115ec:	469a      	mov	sl, r3
 80115ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80115f2:	d807      	bhi.n	8011604 <_printf_i+0x28>
 80115f4:	2f62      	cmp	r7, #98	@ 0x62
 80115f6:	d80a      	bhi.n	801160e <_printf_i+0x32>
 80115f8:	2f00      	cmp	r7, #0
 80115fa:	f000 80d1 	beq.w	80117a0 <_printf_i+0x1c4>
 80115fe:	2f58      	cmp	r7, #88	@ 0x58
 8011600:	f000 80b8 	beq.w	8011774 <_printf_i+0x198>
 8011604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011608:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801160c:	e03a      	b.n	8011684 <_printf_i+0xa8>
 801160e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011612:	2b15      	cmp	r3, #21
 8011614:	d8f6      	bhi.n	8011604 <_printf_i+0x28>
 8011616:	a101      	add	r1, pc, #4	@ (adr r1, 801161c <_printf_i+0x40>)
 8011618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801161c:	08011675 	.word	0x08011675
 8011620:	08011689 	.word	0x08011689
 8011624:	08011605 	.word	0x08011605
 8011628:	08011605 	.word	0x08011605
 801162c:	08011605 	.word	0x08011605
 8011630:	08011605 	.word	0x08011605
 8011634:	08011689 	.word	0x08011689
 8011638:	08011605 	.word	0x08011605
 801163c:	08011605 	.word	0x08011605
 8011640:	08011605 	.word	0x08011605
 8011644:	08011605 	.word	0x08011605
 8011648:	08011787 	.word	0x08011787
 801164c:	080116b3 	.word	0x080116b3
 8011650:	08011741 	.word	0x08011741
 8011654:	08011605 	.word	0x08011605
 8011658:	08011605 	.word	0x08011605
 801165c:	080117a9 	.word	0x080117a9
 8011660:	08011605 	.word	0x08011605
 8011664:	080116b3 	.word	0x080116b3
 8011668:	08011605 	.word	0x08011605
 801166c:	08011605 	.word	0x08011605
 8011670:	08011749 	.word	0x08011749
 8011674:	6833      	ldr	r3, [r6, #0]
 8011676:	1d1a      	adds	r2, r3, #4
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	6032      	str	r2, [r6, #0]
 801167c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011680:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011684:	2301      	movs	r3, #1
 8011686:	e09c      	b.n	80117c2 <_printf_i+0x1e6>
 8011688:	6833      	ldr	r3, [r6, #0]
 801168a:	6820      	ldr	r0, [r4, #0]
 801168c:	1d19      	adds	r1, r3, #4
 801168e:	6031      	str	r1, [r6, #0]
 8011690:	0606      	lsls	r6, r0, #24
 8011692:	d501      	bpl.n	8011698 <_printf_i+0xbc>
 8011694:	681d      	ldr	r5, [r3, #0]
 8011696:	e003      	b.n	80116a0 <_printf_i+0xc4>
 8011698:	0645      	lsls	r5, r0, #25
 801169a:	d5fb      	bpl.n	8011694 <_printf_i+0xb8>
 801169c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80116a0:	2d00      	cmp	r5, #0
 80116a2:	da03      	bge.n	80116ac <_printf_i+0xd0>
 80116a4:	232d      	movs	r3, #45	@ 0x2d
 80116a6:	426d      	negs	r5, r5
 80116a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80116ac:	4858      	ldr	r0, [pc, #352]	@ (8011810 <_printf_i+0x234>)
 80116ae:	230a      	movs	r3, #10
 80116b0:	e011      	b.n	80116d6 <_printf_i+0xfa>
 80116b2:	6821      	ldr	r1, [r4, #0]
 80116b4:	6833      	ldr	r3, [r6, #0]
 80116b6:	0608      	lsls	r0, r1, #24
 80116b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80116bc:	d402      	bmi.n	80116c4 <_printf_i+0xe8>
 80116be:	0649      	lsls	r1, r1, #25
 80116c0:	bf48      	it	mi
 80116c2:	b2ad      	uxthmi	r5, r5
 80116c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80116c6:	4852      	ldr	r0, [pc, #328]	@ (8011810 <_printf_i+0x234>)
 80116c8:	6033      	str	r3, [r6, #0]
 80116ca:	bf14      	ite	ne
 80116cc:	230a      	movne	r3, #10
 80116ce:	2308      	moveq	r3, #8
 80116d0:	2100      	movs	r1, #0
 80116d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80116d6:	6866      	ldr	r6, [r4, #4]
 80116d8:	60a6      	str	r6, [r4, #8]
 80116da:	2e00      	cmp	r6, #0
 80116dc:	db05      	blt.n	80116ea <_printf_i+0x10e>
 80116de:	6821      	ldr	r1, [r4, #0]
 80116e0:	432e      	orrs	r6, r5
 80116e2:	f021 0104 	bic.w	r1, r1, #4
 80116e6:	6021      	str	r1, [r4, #0]
 80116e8:	d04b      	beq.n	8011782 <_printf_i+0x1a6>
 80116ea:	4616      	mov	r6, r2
 80116ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80116f0:	fb03 5711 	mls	r7, r3, r1, r5
 80116f4:	5dc7      	ldrb	r7, [r0, r7]
 80116f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80116fa:	462f      	mov	r7, r5
 80116fc:	42bb      	cmp	r3, r7
 80116fe:	460d      	mov	r5, r1
 8011700:	d9f4      	bls.n	80116ec <_printf_i+0x110>
 8011702:	2b08      	cmp	r3, #8
 8011704:	d10b      	bne.n	801171e <_printf_i+0x142>
 8011706:	6823      	ldr	r3, [r4, #0]
 8011708:	07df      	lsls	r7, r3, #31
 801170a:	d508      	bpl.n	801171e <_printf_i+0x142>
 801170c:	6923      	ldr	r3, [r4, #16]
 801170e:	6861      	ldr	r1, [r4, #4]
 8011710:	4299      	cmp	r1, r3
 8011712:	bfde      	ittt	le
 8011714:	2330      	movle	r3, #48	@ 0x30
 8011716:	f806 3c01 	strble.w	r3, [r6, #-1]
 801171a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801171e:	1b92      	subs	r2, r2, r6
 8011720:	6122      	str	r2, [r4, #16]
 8011722:	f8cd a000 	str.w	sl, [sp]
 8011726:	464b      	mov	r3, r9
 8011728:	aa03      	add	r2, sp, #12
 801172a:	4621      	mov	r1, r4
 801172c:	4640      	mov	r0, r8
 801172e:	f7ff fee7 	bl	8011500 <_printf_common>
 8011732:	3001      	adds	r0, #1
 8011734:	d14a      	bne.n	80117cc <_printf_i+0x1f0>
 8011736:	f04f 30ff 	mov.w	r0, #4294967295
 801173a:	b004      	add	sp, #16
 801173c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011740:	6823      	ldr	r3, [r4, #0]
 8011742:	f043 0320 	orr.w	r3, r3, #32
 8011746:	6023      	str	r3, [r4, #0]
 8011748:	4832      	ldr	r0, [pc, #200]	@ (8011814 <_printf_i+0x238>)
 801174a:	2778      	movs	r7, #120	@ 0x78
 801174c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011750:	6823      	ldr	r3, [r4, #0]
 8011752:	6831      	ldr	r1, [r6, #0]
 8011754:	061f      	lsls	r7, r3, #24
 8011756:	f851 5b04 	ldr.w	r5, [r1], #4
 801175a:	d402      	bmi.n	8011762 <_printf_i+0x186>
 801175c:	065f      	lsls	r7, r3, #25
 801175e:	bf48      	it	mi
 8011760:	b2ad      	uxthmi	r5, r5
 8011762:	6031      	str	r1, [r6, #0]
 8011764:	07d9      	lsls	r1, r3, #31
 8011766:	bf44      	itt	mi
 8011768:	f043 0320 	orrmi.w	r3, r3, #32
 801176c:	6023      	strmi	r3, [r4, #0]
 801176e:	b11d      	cbz	r5, 8011778 <_printf_i+0x19c>
 8011770:	2310      	movs	r3, #16
 8011772:	e7ad      	b.n	80116d0 <_printf_i+0xf4>
 8011774:	4826      	ldr	r0, [pc, #152]	@ (8011810 <_printf_i+0x234>)
 8011776:	e7e9      	b.n	801174c <_printf_i+0x170>
 8011778:	6823      	ldr	r3, [r4, #0]
 801177a:	f023 0320 	bic.w	r3, r3, #32
 801177e:	6023      	str	r3, [r4, #0]
 8011780:	e7f6      	b.n	8011770 <_printf_i+0x194>
 8011782:	4616      	mov	r6, r2
 8011784:	e7bd      	b.n	8011702 <_printf_i+0x126>
 8011786:	6833      	ldr	r3, [r6, #0]
 8011788:	6825      	ldr	r5, [r4, #0]
 801178a:	6961      	ldr	r1, [r4, #20]
 801178c:	1d18      	adds	r0, r3, #4
 801178e:	6030      	str	r0, [r6, #0]
 8011790:	062e      	lsls	r6, r5, #24
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	d501      	bpl.n	801179a <_printf_i+0x1be>
 8011796:	6019      	str	r1, [r3, #0]
 8011798:	e002      	b.n	80117a0 <_printf_i+0x1c4>
 801179a:	0668      	lsls	r0, r5, #25
 801179c:	d5fb      	bpl.n	8011796 <_printf_i+0x1ba>
 801179e:	8019      	strh	r1, [r3, #0]
 80117a0:	2300      	movs	r3, #0
 80117a2:	6123      	str	r3, [r4, #16]
 80117a4:	4616      	mov	r6, r2
 80117a6:	e7bc      	b.n	8011722 <_printf_i+0x146>
 80117a8:	6833      	ldr	r3, [r6, #0]
 80117aa:	1d1a      	adds	r2, r3, #4
 80117ac:	6032      	str	r2, [r6, #0]
 80117ae:	681e      	ldr	r6, [r3, #0]
 80117b0:	6862      	ldr	r2, [r4, #4]
 80117b2:	2100      	movs	r1, #0
 80117b4:	4630      	mov	r0, r6
 80117b6:	f7ee fce3 	bl	8000180 <memchr>
 80117ba:	b108      	cbz	r0, 80117c0 <_printf_i+0x1e4>
 80117bc:	1b80      	subs	r0, r0, r6
 80117be:	6060      	str	r0, [r4, #4]
 80117c0:	6863      	ldr	r3, [r4, #4]
 80117c2:	6123      	str	r3, [r4, #16]
 80117c4:	2300      	movs	r3, #0
 80117c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80117ca:	e7aa      	b.n	8011722 <_printf_i+0x146>
 80117cc:	6923      	ldr	r3, [r4, #16]
 80117ce:	4632      	mov	r2, r6
 80117d0:	4649      	mov	r1, r9
 80117d2:	4640      	mov	r0, r8
 80117d4:	47d0      	blx	sl
 80117d6:	3001      	adds	r0, #1
 80117d8:	d0ad      	beq.n	8011736 <_printf_i+0x15a>
 80117da:	6823      	ldr	r3, [r4, #0]
 80117dc:	079b      	lsls	r3, r3, #30
 80117de:	d413      	bmi.n	8011808 <_printf_i+0x22c>
 80117e0:	68e0      	ldr	r0, [r4, #12]
 80117e2:	9b03      	ldr	r3, [sp, #12]
 80117e4:	4298      	cmp	r0, r3
 80117e6:	bfb8      	it	lt
 80117e8:	4618      	movlt	r0, r3
 80117ea:	e7a6      	b.n	801173a <_printf_i+0x15e>
 80117ec:	2301      	movs	r3, #1
 80117ee:	4632      	mov	r2, r6
 80117f0:	4649      	mov	r1, r9
 80117f2:	4640      	mov	r0, r8
 80117f4:	47d0      	blx	sl
 80117f6:	3001      	adds	r0, #1
 80117f8:	d09d      	beq.n	8011736 <_printf_i+0x15a>
 80117fa:	3501      	adds	r5, #1
 80117fc:	68e3      	ldr	r3, [r4, #12]
 80117fe:	9903      	ldr	r1, [sp, #12]
 8011800:	1a5b      	subs	r3, r3, r1
 8011802:	42ab      	cmp	r3, r5
 8011804:	dcf2      	bgt.n	80117ec <_printf_i+0x210>
 8011806:	e7eb      	b.n	80117e0 <_printf_i+0x204>
 8011808:	2500      	movs	r5, #0
 801180a:	f104 0619 	add.w	r6, r4, #25
 801180e:	e7f5      	b.n	80117fc <_printf_i+0x220>
 8011810:	08011e4d 	.word	0x08011e4d
 8011814:	08011e5e 	.word	0x08011e5e

08011818 <__sflush_r>:
 8011818:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801181c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011820:	0716      	lsls	r6, r2, #28
 8011822:	4605      	mov	r5, r0
 8011824:	460c      	mov	r4, r1
 8011826:	d454      	bmi.n	80118d2 <__sflush_r+0xba>
 8011828:	684b      	ldr	r3, [r1, #4]
 801182a:	2b00      	cmp	r3, #0
 801182c:	dc02      	bgt.n	8011834 <__sflush_r+0x1c>
 801182e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011830:	2b00      	cmp	r3, #0
 8011832:	dd48      	ble.n	80118c6 <__sflush_r+0xae>
 8011834:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011836:	2e00      	cmp	r6, #0
 8011838:	d045      	beq.n	80118c6 <__sflush_r+0xae>
 801183a:	2300      	movs	r3, #0
 801183c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011840:	682f      	ldr	r7, [r5, #0]
 8011842:	6a21      	ldr	r1, [r4, #32]
 8011844:	602b      	str	r3, [r5, #0]
 8011846:	d030      	beq.n	80118aa <__sflush_r+0x92>
 8011848:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801184a:	89a3      	ldrh	r3, [r4, #12]
 801184c:	0759      	lsls	r1, r3, #29
 801184e:	d505      	bpl.n	801185c <__sflush_r+0x44>
 8011850:	6863      	ldr	r3, [r4, #4]
 8011852:	1ad2      	subs	r2, r2, r3
 8011854:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011856:	b10b      	cbz	r3, 801185c <__sflush_r+0x44>
 8011858:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801185a:	1ad2      	subs	r2, r2, r3
 801185c:	2300      	movs	r3, #0
 801185e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011860:	6a21      	ldr	r1, [r4, #32]
 8011862:	4628      	mov	r0, r5
 8011864:	47b0      	blx	r6
 8011866:	1c43      	adds	r3, r0, #1
 8011868:	89a3      	ldrh	r3, [r4, #12]
 801186a:	d106      	bne.n	801187a <__sflush_r+0x62>
 801186c:	6829      	ldr	r1, [r5, #0]
 801186e:	291d      	cmp	r1, #29
 8011870:	d82b      	bhi.n	80118ca <__sflush_r+0xb2>
 8011872:	4a2a      	ldr	r2, [pc, #168]	@ (801191c <__sflush_r+0x104>)
 8011874:	40ca      	lsrs	r2, r1
 8011876:	07d6      	lsls	r6, r2, #31
 8011878:	d527      	bpl.n	80118ca <__sflush_r+0xb2>
 801187a:	2200      	movs	r2, #0
 801187c:	6062      	str	r2, [r4, #4]
 801187e:	04d9      	lsls	r1, r3, #19
 8011880:	6922      	ldr	r2, [r4, #16]
 8011882:	6022      	str	r2, [r4, #0]
 8011884:	d504      	bpl.n	8011890 <__sflush_r+0x78>
 8011886:	1c42      	adds	r2, r0, #1
 8011888:	d101      	bne.n	801188e <__sflush_r+0x76>
 801188a:	682b      	ldr	r3, [r5, #0]
 801188c:	b903      	cbnz	r3, 8011890 <__sflush_r+0x78>
 801188e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011890:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011892:	602f      	str	r7, [r5, #0]
 8011894:	b1b9      	cbz	r1, 80118c6 <__sflush_r+0xae>
 8011896:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801189a:	4299      	cmp	r1, r3
 801189c:	d002      	beq.n	80118a4 <__sflush_r+0x8c>
 801189e:	4628      	mov	r0, r5
 80118a0:	f7ff fbf4 	bl	801108c <_free_r>
 80118a4:	2300      	movs	r3, #0
 80118a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80118a8:	e00d      	b.n	80118c6 <__sflush_r+0xae>
 80118aa:	2301      	movs	r3, #1
 80118ac:	4628      	mov	r0, r5
 80118ae:	47b0      	blx	r6
 80118b0:	4602      	mov	r2, r0
 80118b2:	1c50      	adds	r0, r2, #1
 80118b4:	d1c9      	bne.n	801184a <__sflush_r+0x32>
 80118b6:	682b      	ldr	r3, [r5, #0]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d0c6      	beq.n	801184a <__sflush_r+0x32>
 80118bc:	2b1d      	cmp	r3, #29
 80118be:	d001      	beq.n	80118c4 <__sflush_r+0xac>
 80118c0:	2b16      	cmp	r3, #22
 80118c2:	d11e      	bne.n	8011902 <__sflush_r+0xea>
 80118c4:	602f      	str	r7, [r5, #0]
 80118c6:	2000      	movs	r0, #0
 80118c8:	e022      	b.n	8011910 <__sflush_r+0xf8>
 80118ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118ce:	b21b      	sxth	r3, r3
 80118d0:	e01b      	b.n	801190a <__sflush_r+0xf2>
 80118d2:	690f      	ldr	r7, [r1, #16]
 80118d4:	2f00      	cmp	r7, #0
 80118d6:	d0f6      	beq.n	80118c6 <__sflush_r+0xae>
 80118d8:	0793      	lsls	r3, r2, #30
 80118da:	680e      	ldr	r6, [r1, #0]
 80118dc:	bf08      	it	eq
 80118de:	694b      	ldreq	r3, [r1, #20]
 80118e0:	600f      	str	r7, [r1, #0]
 80118e2:	bf18      	it	ne
 80118e4:	2300      	movne	r3, #0
 80118e6:	eba6 0807 	sub.w	r8, r6, r7
 80118ea:	608b      	str	r3, [r1, #8]
 80118ec:	f1b8 0f00 	cmp.w	r8, #0
 80118f0:	dde9      	ble.n	80118c6 <__sflush_r+0xae>
 80118f2:	6a21      	ldr	r1, [r4, #32]
 80118f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80118f6:	4643      	mov	r3, r8
 80118f8:	463a      	mov	r2, r7
 80118fa:	4628      	mov	r0, r5
 80118fc:	47b0      	blx	r6
 80118fe:	2800      	cmp	r0, #0
 8011900:	dc08      	bgt.n	8011914 <__sflush_r+0xfc>
 8011902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801190a:	81a3      	strh	r3, [r4, #12]
 801190c:	f04f 30ff 	mov.w	r0, #4294967295
 8011910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011914:	4407      	add	r7, r0
 8011916:	eba8 0800 	sub.w	r8, r8, r0
 801191a:	e7e7      	b.n	80118ec <__sflush_r+0xd4>
 801191c:	20400001 	.word	0x20400001

08011920 <_fflush_r>:
 8011920:	b538      	push	{r3, r4, r5, lr}
 8011922:	690b      	ldr	r3, [r1, #16]
 8011924:	4605      	mov	r5, r0
 8011926:	460c      	mov	r4, r1
 8011928:	b913      	cbnz	r3, 8011930 <_fflush_r+0x10>
 801192a:	2500      	movs	r5, #0
 801192c:	4628      	mov	r0, r5
 801192e:	bd38      	pop	{r3, r4, r5, pc}
 8011930:	b118      	cbz	r0, 801193a <_fflush_r+0x1a>
 8011932:	6a03      	ldr	r3, [r0, #32]
 8011934:	b90b      	cbnz	r3, 801193a <_fflush_r+0x1a>
 8011936:	f7ff fa2d 	bl	8010d94 <__sinit>
 801193a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d0f3      	beq.n	801192a <_fflush_r+0xa>
 8011942:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011944:	07d0      	lsls	r0, r2, #31
 8011946:	d404      	bmi.n	8011952 <_fflush_r+0x32>
 8011948:	0599      	lsls	r1, r3, #22
 801194a:	d402      	bmi.n	8011952 <_fflush_r+0x32>
 801194c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801194e:	f7ff fb8c 	bl	801106a <__retarget_lock_acquire_recursive>
 8011952:	4628      	mov	r0, r5
 8011954:	4621      	mov	r1, r4
 8011956:	f7ff ff5f 	bl	8011818 <__sflush_r>
 801195a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801195c:	07da      	lsls	r2, r3, #31
 801195e:	4605      	mov	r5, r0
 8011960:	d4e4      	bmi.n	801192c <_fflush_r+0xc>
 8011962:	89a3      	ldrh	r3, [r4, #12]
 8011964:	059b      	lsls	r3, r3, #22
 8011966:	d4e1      	bmi.n	801192c <_fflush_r+0xc>
 8011968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801196a:	f7ff fb7f 	bl	801106c <__retarget_lock_release_recursive>
 801196e:	e7dd      	b.n	801192c <_fflush_r+0xc>

08011970 <_putc_r>:
 8011970:	b570      	push	{r4, r5, r6, lr}
 8011972:	460d      	mov	r5, r1
 8011974:	4614      	mov	r4, r2
 8011976:	4606      	mov	r6, r0
 8011978:	b118      	cbz	r0, 8011982 <_putc_r+0x12>
 801197a:	6a03      	ldr	r3, [r0, #32]
 801197c:	b90b      	cbnz	r3, 8011982 <_putc_r+0x12>
 801197e:	f7ff fa09 	bl	8010d94 <__sinit>
 8011982:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011984:	07d8      	lsls	r0, r3, #31
 8011986:	d405      	bmi.n	8011994 <_putc_r+0x24>
 8011988:	89a3      	ldrh	r3, [r4, #12]
 801198a:	0599      	lsls	r1, r3, #22
 801198c:	d402      	bmi.n	8011994 <_putc_r+0x24>
 801198e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011990:	f7ff fb6b 	bl	801106a <__retarget_lock_acquire_recursive>
 8011994:	68a3      	ldr	r3, [r4, #8]
 8011996:	3b01      	subs	r3, #1
 8011998:	2b00      	cmp	r3, #0
 801199a:	60a3      	str	r3, [r4, #8]
 801199c:	da05      	bge.n	80119aa <_putc_r+0x3a>
 801199e:	69a2      	ldr	r2, [r4, #24]
 80119a0:	4293      	cmp	r3, r2
 80119a2:	db12      	blt.n	80119ca <_putc_r+0x5a>
 80119a4:	b2eb      	uxtb	r3, r5
 80119a6:	2b0a      	cmp	r3, #10
 80119a8:	d00f      	beq.n	80119ca <_putc_r+0x5a>
 80119aa:	6823      	ldr	r3, [r4, #0]
 80119ac:	1c5a      	adds	r2, r3, #1
 80119ae:	6022      	str	r2, [r4, #0]
 80119b0:	701d      	strb	r5, [r3, #0]
 80119b2:	b2ed      	uxtb	r5, r5
 80119b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80119b6:	07da      	lsls	r2, r3, #31
 80119b8:	d405      	bmi.n	80119c6 <_putc_r+0x56>
 80119ba:	89a3      	ldrh	r3, [r4, #12]
 80119bc:	059b      	lsls	r3, r3, #22
 80119be:	d402      	bmi.n	80119c6 <_putc_r+0x56>
 80119c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119c2:	f7ff fb53 	bl	801106c <__retarget_lock_release_recursive>
 80119c6:	4628      	mov	r0, r5
 80119c8:	bd70      	pop	{r4, r5, r6, pc}
 80119ca:	4629      	mov	r1, r5
 80119cc:	4622      	mov	r2, r4
 80119ce:	4630      	mov	r0, r6
 80119d0:	f000 f802 	bl	80119d8 <__swbuf_r>
 80119d4:	4605      	mov	r5, r0
 80119d6:	e7ed      	b.n	80119b4 <_putc_r+0x44>

080119d8 <__swbuf_r>:
 80119d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119da:	460e      	mov	r6, r1
 80119dc:	4614      	mov	r4, r2
 80119de:	4605      	mov	r5, r0
 80119e0:	b118      	cbz	r0, 80119ea <__swbuf_r+0x12>
 80119e2:	6a03      	ldr	r3, [r0, #32]
 80119e4:	b90b      	cbnz	r3, 80119ea <__swbuf_r+0x12>
 80119e6:	f7ff f9d5 	bl	8010d94 <__sinit>
 80119ea:	69a3      	ldr	r3, [r4, #24]
 80119ec:	60a3      	str	r3, [r4, #8]
 80119ee:	89a3      	ldrh	r3, [r4, #12]
 80119f0:	071a      	lsls	r2, r3, #28
 80119f2:	d501      	bpl.n	80119f8 <__swbuf_r+0x20>
 80119f4:	6923      	ldr	r3, [r4, #16]
 80119f6:	b943      	cbnz	r3, 8011a0a <__swbuf_r+0x32>
 80119f8:	4621      	mov	r1, r4
 80119fa:	4628      	mov	r0, r5
 80119fc:	f000 f82a 	bl	8011a54 <__swsetup_r>
 8011a00:	b118      	cbz	r0, 8011a0a <__swbuf_r+0x32>
 8011a02:	f04f 37ff 	mov.w	r7, #4294967295
 8011a06:	4638      	mov	r0, r7
 8011a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a0a:	6823      	ldr	r3, [r4, #0]
 8011a0c:	6922      	ldr	r2, [r4, #16]
 8011a0e:	1a98      	subs	r0, r3, r2
 8011a10:	6963      	ldr	r3, [r4, #20]
 8011a12:	b2f6      	uxtb	r6, r6
 8011a14:	4283      	cmp	r3, r0
 8011a16:	4637      	mov	r7, r6
 8011a18:	dc05      	bgt.n	8011a26 <__swbuf_r+0x4e>
 8011a1a:	4621      	mov	r1, r4
 8011a1c:	4628      	mov	r0, r5
 8011a1e:	f7ff ff7f 	bl	8011920 <_fflush_r>
 8011a22:	2800      	cmp	r0, #0
 8011a24:	d1ed      	bne.n	8011a02 <__swbuf_r+0x2a>
 8011a26:	68a3      	ldr	r3, [r4, #8]
 8011a28:	3b01      	subs	r3, #1
 8011a2a:	60a3      	str	r3, [r4, #8]
 8011a2c:	6823      	ldr	r3, [r4, #0]
 8011a2e:	1c5a      	adds	r2, r3, #1
 8011a30:	6022      	str	r2, [r4, #0]
 8011a32:	701e      	strb	r6, [r3, #0]
 8011a34:	6962      	ldr	r2, [r4, #20]
 8011a36:	1c43      	adds	r3, r0, #1
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d004      	beq.n	8011a46 <__swbuf_r+0x6e>
 8011a3c:	89a3      	ldrh	r3, [r4, #12]
 8011a3e:	07db      	lsls	r3, r3, #31
 8011a40:	d5e1      	bpl.n	8011a06 <__swbuf_r+0x2e>
 8011a42:	2e0a      	cmp	r6, #10
 8011a44:	d1df      	bne.n	8011a06 <__swbuf_r+0x2e>
 8011a46:	4621      	mov	r1, r4
 8011a48:	4628      	mov	r0, r5
 8011a4a:	f7ff ff69 	bl	8011920 <_fflush_r>
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	d0d9      	beq.n	8011a06 <__swbuf_r+0x2e>
 8011a52:	e7d6      	b.n	8011a02 <__swbuf_r+0x2a>

08011a54 <__swsetup_r>:
 8011a54:	b538      	push	{r3, r4, r5, lr}
 8011a56:	4b29      	ldr	r3, [pc, #164]	@ (8011afc <__swsetup_r+0xa8>)
 8011a58:	4605      	mov	r5, r0
 8011a5a:	6818      	ldr	r0, [r3, #0]
 8011a5c:	460c      	mov	r4, r1
 8011a5e:	b118      	cbz	r0, 8011a68 <__swsetup_r+0x14>
 8011a60:	6a03      	ldr	r3, [r0, #32]
 8011a62:	b90b      	cbnz	r3, 8011a68 <__swsetup_r+0x14>
 8011a64:	f7ff f996 	bl	8010d94 <__sinit>
 8011a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a6c:	0719      	lsls	r1, r3, #28
 8011a6e:	d422      	bmi.n	8011ab6 <__swsetup_r+0x62>
 8011a70:	06da      	lsls	r2, r3, #27
 8011a72:	d407      	bmi.n	8011a84 <__swsetup_r+0x30>
 8011a74:	2209      	movs	r2, #9
 8011a76:	602a      	str	r2, [r5, #0]
 8011a78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a7c:	81a3      	strh	r3, [r4, #12]
 8011a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a82:	e033      	b.n	8011aec <__swsetup_r+0x98>
 8011a84:	0758      	lsls	r0, r3, #29
 8011a86:	d512      	bpl.n	8011aae <__swsetup_r+0x5a>
 8011a88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011a8a:	b141      	cbz	r1, 8011a9e <__swsetup_r+0x4a>
 8011a8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a90:	4299      	cmp	r1, r3
 8011a92:	d002      	beq.n	8011a9a <__swsetup_r+0x46>
 8011a94:	4628      	mov	r0, r5
 8011a96:	f7ff faf9 	bl	801108c <_free_r>
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a9e:	89a3      	ldrh	r3, [r4, #12]
 8011aa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011aa4:	81a3      	strh	r3, [r4, #12]
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	6063      	str	r3, [r4, #4]
 8011aaa:	6923      	ldr	r3, [r4, #16]
 8011aac:	6023      	str	r3, [r4, #0]
 8011aae:	89a3      	ldrh	r3, [r4, #12]
 8011ab0:	f043 0308 	orr.w	r3, r3, #8
 8011ab4:	81a3      	strh	r3, [r4, #12]
 8011ab6:	6923      	ldr	r3, [r4, #16]
 8011ab8:	b94b      	cbnz	r3, 8011ace <__swsetup_r+0x7a>
 8011aba:	89a3      	ldrh	r3, [r4, #12]
 8011abc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011ac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ac4:	d003      	beq.n	8011ace <__swsetup_r+0x7a>
 8011ac6:	4621      	mov	r1, r4
 8011ac8:	4628      	mov	r0, r5
 8011aca:	f000 f84f 	bl	8011b6c <__smakebuf_r>
 8011ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ad2:	f013 0201 	ands.w	r2, r3, #1
 8011ad6:	d00a      	beq.n	8011aee <__swsetup_r+0x9a>
 8011ad8:	2200      	movs	r2, #0
 8011ada:	60a2      	str	r2, [r4, #8]
 8011adc:	6962      	ldr	r2, [r4, #20]
 8011ade:	4252      	negs	r2, r2
 8011ae0:	61a2      	str	r2, [r4, #24]
 8011ae2:	6922      	ldr	r2, [r4, #16]
 8011ae4:	b942      	cbnz	r2, 8011af8 <__swsetup_r+0xa4>
 8011ae6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011aea:	d1c5      	bne.n	8011a78 <__swsetup_r+0x24>
 8011aec:	bd38      	pop	{r3, r4, r5, pc}
 8011aee:	0799      	lsls	r1, r3, #30
 8011af0:	bf58      	it	pl
 8011af2:	6962      	ldrpl	r2, [r4, #20]
 8011af4:	60a2      	str	r2, [r4, #8]
 8011af6:	e7f4      	b.n	8011ae2 <__swsetup_r+0x8e>
 8011af8:	2000      	movs	r0, #0
 8011afa:	e7f7      	b.n	8011aec <__swsetup_r+0x98>
 8011afc:	20000118 	.word	0x20000118

08011b00 <_sbrk_r>:
 8011b00:	b538      	push	{r3, r4, r5, lr}
 8011b02:	4d06      	ldr	r5, [pc, #24]	@ (8011b1c <_sbrk_r+0x1c>)
 8011b04:	2300      	movs	r3, #0
 8011b06:	4604      	mov	r4, r0
 8011b08:	4608      	mov	r0, r1
 8011b0a:	602b      	str	r3, [r5, #0]
 8011b0c:	f7ef fb16 	bl	800113c <_sbrk>
 8011b10:	1c43      	adds	r3, r0, #1
 8011b12:	d102      	bne.n	8011b1a <_sbrk_r+0x1a>
 8011b14:	682b      	ldr	r3, [r5, #0]
 8011b16:	b103      	cbz	r3, 8011b1a <_sbrk_r+0x1a>
 8011b18:	6023      	str	r3, [r4, #0]
 8011b1a:	bd38      	pop	{r3, r4, r5, pc}
 8011b1c:	2000ace0 	.word	0x2000ace0

08011b20 <__swhatbuf_r>:
 8011b20:	b570      	push	{r4, r5, r6, lr}
 8011b22:	460c      	mov	r4, r1
 8011b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b28:	2900      	cmp	r1, #0
 8011b2a:	b096      	sub	sp, #88	@ 0x58
 8011b2c:	4615      	mov	r5, r2
 8011b2e:	461e      	mov	r6, r3
 8011b30:	da0d      	bge.n	8011b4e <__swhatbuf_r+0x2e>
 8011b32:	89a3      	ldrh	r3, [r4, #12]
 8011b34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011b38:	f04f 0100 	mov.w	r1, #0
 8011b3c:	bf14      	ite	ne
 8011b3e:	2340      	movne	r3, #64	@ 0x40
 8011b40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011b44:	2000      	movs	r0, #0
 8011b46:	6031      	str	r1, [r6, #0]
 8011b48:	602b      	str	r3, [r5, #0]
 8011b4a:	b016      	add	sp, #88	@ 0x58
 8011b4c:	bd70      	pop	{r4, r5, r6, pc}
 8011b4e:	466a      	mov	r2, sp
 8011b50:	f000 f848 	bl	8011be4 <_fstat_r>
 8011b54:	2800      	cmp	r0, #0
 8011b56:	dbec      	blt.n	8011b32 <__swhatbuf_r+0x12>
 8011b58:	9901      	ldr	r1, [sp, #4]
 8011b5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011b5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011b62:	4259      	negs	r1, r3
 8011b64:	4159      	adcs	r1, r3
 8011b66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b6a:	e7eb      	b.n	8011b44 <__swhatbuf_r+0x24>

08011b6c <__smakebuf_r>:
 8011b6c:	898b      	ldrh	r3, [r1, #12]
 8011b6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b70:	079d      	lsls	r5, r3, #30
 8011b72:	4606      	mov	r6, r0
 8011b74:	460c      	mov	r4, r1
 8011b76:	d507      	bpl.n	8011b88 <__smakebuf_r+0x1c>
 8011b78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011b7c:	6023      	str	r3, [r4, #0]
 8011b7e:	6123      	str	r3, [r4, #16]
 8011b80:	2301      	movs	r3, #1
 8011b82:	6163      	str	r3, [r4, #20]
 8011b84:	b003      	add	sp, #12
 8011b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b88:	ab01      	add	r3, sp, #4
 8011b8a:	466a      	mov	r2, sp
 8011b8c:	f7ff ffc8 	bl	8011b20 <__swhatbuf_r>
 8011b90:	9f00      	ldr	r7, [sp, #0]
 8011b92:	4605      	mov	r5, r0
 8011b94:	4639      	mov	r1, r7
 8011b96:	4630      	mov	r0, r6
 8011b98:	f7ff fae4 	bl	8011164 <_malloc_r>
 8011b9c:	b948      	cbnz	r0, 8011bb2 <__smakebuf_r+0x46>
 8011b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ba2:	059a      	lsls	r2, r3, #22
 8011ba4:	d4ee      	bmi.n	8011b84 <__smakebuf_r+0x18>
 8011ba6:	f023 0303 	bic.w	r3, r3, #3
 8011baa:	f043 0302 	orr.w	r3, r3, #2
 8011bae:	81a3      	strh	r3, [r4, #12]
 8011bb0:	e7e2      	b.n	8011b78 <__smakebuf_r+0xc>
 8011bb2:	89a3      	ldrh	r3, [r4, #12]
 8011bb4:	6020      	str	r0, [r4, #0]
 8011bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bba:	81a3      	strh	r3, [r4, #12]
 8011bbc:	9b01      	ldr	r3, [sp, #4]
 8011bbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011bc2:	b15b      	cbz	r3, 8011bdc <__smakebuf_r+0x70>
 8011bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bc8:	4630      	mov	r0, r6
 8011bca:	f000 f81d 	bl	8011c08 <_isatty_r>
 8011bce:	b128      	cbz	r0, 8011bdc <__smakebuf_r+0x70>
 8011bd0:	89a3      	ldrh	r3, [r4, #12]
 8011bd2:	f023 0303 	bic.w	r3, r3, #3
 8011bd6:	f043 0301 	orr.w	r3, r3, #1
 8011bda:	81a3      	strh	r3, [r4, #12]
 8011bdc:	89a3      	ldrh	r3, [r4, #12]
 8011bde:	431d      	orrs	r5, r3
 8011be0:	81a5      	strh	r5, [r4, #12]
 8011be2:	e7cf      	b.n	8011b84 <__smakebuf_r+0x18>

08011be4 <_fstat_r>:
 8011be4:	b538      	push	{r3, r4, r5, lr}
 8011be6:	4d07      	ldr	r5, [pc, #28]	@ (8011c04 <_fstat_r+0x20>)
 8011be8:	2300      	movs	r3, #0
 8011bea:	4604      	mov	r4, r0
 8011bec:	4608      	mov	r0, r1
 8011bee:	4611      	mov	r1, r2
 8011bf0:	602b      	str	r3, [r5, #0]
 8011bf2:	f7ef fa7a 	bl	80010ea <_fstat>
 8011bf6:	1c43      	adds	r3, r0, #1
 8011bf8:	d102      	bne.n	8011c00 <_fstat_r+0x1c>
 8011bfa:	682b      	ldr	r3, [r5, #0]
 8011bfc:	b103      	cbz	r3, 8011c00 <_fstat_r+0x1c>
 8011bfe:	6023      	str	r3, [r4, #0]
 8011c00:	bd38      	pop	{r3, r4, r5, pc}
 8011c02:	bf00      	nop
 8011c04:	2000ace0 	.word	0x2000ace0

08011c08 <_isatty_r>:
 8011c08:	b538      	push	{r3, r4, r5, lr}
 8011c0a:	4d06      	ldr	r5, [pc, #24]	@ (8011c24 <_isatty_r+0x1c>)
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	4604      	mov	r4, r0
 8011c10:	4608      	mov	r0, r1
 8011c12:	602b      	str	r3, [r5, #0]
 8011c14:	f7ef fa79 	bl	800110a <_isatty>
 8011c18:	1c43      	adds	r3, r0, #1
 8011c1a:	d102      	bne.n	8011c22 <_isatty_r+0x1a>
 8011c1c:	682b      	ldr	r3, [r5, #0]
 8011c1e:	b103      	cbz	r3, 8011c22 <_isatty_r+0x1a>
 8011c20:	6023      	str	r3, [r4, #0]
 8011c22:	bd38      	pop	{r3, r4, r5, pc}
 8011c24:	2000ace0 	.word	0x2000ace0

08011c28 <_init>:
 8011c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c2a:	bf00      	nop
 8011c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c2e:	bc08      	pop	{r3}
 8011c30:	469e      	mov	lr, r3
 8011c32:	4770      	bx	lr

08011c34 <_fini>:
 8011c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c36:	bf00      	nop
 8011c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c3a:	bc08      	pop	{r3}
 8011c3c:	469e      	mov	lr, r3
 8011c3e:	4770      	bx	lr
