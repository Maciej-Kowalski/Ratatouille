
Single_Transfer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008054  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080081e8  080081e8  000091e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008250  08008250  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008250  08008250  00009250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008258  08008258  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008258  08008258  00009258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800825c  0800825c  0000925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08008260  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf4  200000fc  0800835c  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001df0  0800835c  0000adf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013eff  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003500  00000000  00000000  0001e02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00021530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdf  00000000  00000000  000224d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019987  00000000  00000000  000230b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016117  00000000  00000000  0003ca3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094ea2  00000000  00000000  00052b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e79f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe8  00000000  00000000  000e7a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000eba24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080081d0 	.word	0x080081d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	080081d0 	.word	0x080081d0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fb10 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f80c 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f91e 	bl	8000710 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 f8fc 	bl	80006d0 <MX_DMA_Init>
  MX_ADC1_Init();
 80004d8:	f000 f870 	bl	80005bc <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80004dc:	f007 f958 	bl	8007790 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f8cc 	bl	800067c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <main+0x20>

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b094      	sub	sp, #80	@ 0x50
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0320 	add.w	r3, r7, #32
 80004f2:	2230      	movs	r2, #48	@ 0x30
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f007 fe3e 	bl	8008178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	4b28      	ldr	r3, [pc, #160]	@ (80005b4 <SystemClock_Config+0xcc>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000514:	4a27      	ldr	r2, [pc, #156]	@ (80005b4 <SystemClock_Config+0xcc>)
 8000516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800051a:	6413      	str	r3, [r2, #64]	@ 0x40
 800051c:	4b25      	ldr	r3, [pc, #148]	@ (80005b4 <SystemClock_Config+0xcc>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000528:	2300      	movs	r3, #0
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	4b22      	ldr	r3, [pc, #136]	@ (80005b8 <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000534:	4a20      	ldr	r2, [pc, #128]	@ (80005b8 <SystemClock_Config+0xd0>)
 8000536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4b1e      	ldr	r3, [pc, #120]	@ (80005b8 <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000548:	2301      	movs	r3, #1
 800054a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800054c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000550:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000556:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800055a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800055c:	2304      	movs	r3, #4
 800055e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000560:	23a8      	movs	r3, #168	@ 0xa8
 8000562:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000564:	2304      	movs	r3, #4
 8000566:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000568:	2307      	movs	r3, #7
 800056a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	4618      	mov	r0, r3
 8000572:	f002 fed7 	bl	8003324 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800057c:	f000 f936 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	230f      	movs	r3, #15
 8000582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	2302      	movs	r3, #2
 8000586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800058c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000590:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2102      	movs	r1, #2
 800059c:	4618      	mov	r0, r3
 800059e:	f003 f939 	bl	8003814 <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005a8:	f000 f920 	bl	80007ec <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	3750      	adds	r7, #80	@ 0x50
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ce:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <MX_ADC1_Init+0xb4>)
 80005d0:	4a28      	ldr	r2, [pc, #160]	@ (8000674 <MX_ADC1_Init+0xb8>)
 80005d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005d4:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <MX_ADC1_Init+0xb4>)
 80005d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005dc:	4b24      	ldr	r3, [pc, #144]	@ (8000670 <MX_ADC1_Init+0xb4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005e2:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <MX_ADC1_Init+0xb4>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e8:	4b21      	ldr	r3, [pc, #132]	@ (8000670 <MX_ADC1_Init+0xb4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ee:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <MX_ADC1_Init+0xb4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <MX_ADC1_Init+0xb4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <MX_ADC1_Init+0xb4>)
 80005fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000678 <MX_ADC1_Init+0xbc>)
 8000600:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000602:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <MX_ADC1_Init+0xb4>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000608:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <MX_ADC1_Init+0xb4>)
 800060a:	2202      	movs	r2, #2
 800060c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800060e:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <MX_ADC1_Init+0xb4>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000616:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <MX_ADC1_Init+0xb4>)
 8000618:	2201      	movs	r2, #1
 800061a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061c:	4814      	ldr	r0, [pc, #80]	@ (8000670 <MX_ADC1_Init+0xb4>)
 800061e:	f000 fafb 	bl	8000c18 <HAL_ADC_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000628:	f000 f8e0 	bl	80007ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000634:	2307      	movs	r3, #7
 8000636:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	4619      	mov	r1, r3
 800063c:	480c      	ldr	r0, [pc, #48]	@ (8000670 <MX_ADC1_Init+0xb4>)
 800063e:	f000 fc5d 	bl	8000efc <HAL_ADC_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000648:	f000 f8d0 	bl	80007ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800064c:	2301      	movs	r3, #1
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4619      	mov	r1, r3
 8000658:	4805      	ldr	r0, [pc, #20]	@ (8000670 <MX_ADC1_Init+0xb4>)
 800065a:	f000 fc4f 	bl	8000efc <HAL_ADC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000664:	f000 f8c2 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000118 	.word	0x20000118
 8000674:	40012000 	.word	0x40012000
 8000678:	0f000001 	.word	0x0f000001

0800067c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000680:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000682:	4a12      	ldr	r2, [pc, #72]	@ (80006cc <MX_USART1_UART_Init+0x50>)
 8000684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000686:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <MX_USART1_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006b4:	f003 face 	bl	8003c54 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006be:	f000 f895 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200001c0 	.word	0x200001c0
 80006cc:	40011000 	.word	0x40011000

080006d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_DMA_Init+0x3c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a0b      	ldr	r2, [pc, #44]	@ (800070c <MX_DMA_Init+0x3c>)
 80006e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_DMA_Init+0x3c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	2038      	movs	r0, #56	@ 0x38
 80006f8:	f000 ff03 	bl	8001502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006fc:	2038      	movs	r0, #56	@ 0x38
 80006fe:	f000 ff1c 	bl	800153a <HAL_NVIC_EnableIRQ>

}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	@ 0x28
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <MX_GPIO_Init+0xd0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a2c      	ldr	r2, [pc, #176]	@ (80007e0 <MX_GPIO_Init+0xd0>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a25      	ldr	r2, [pc, #148]	@ (80007e0 <MX_GPIO_Init+0xd0>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a1e      	ldr	r2, [pc, #120]	@ (80007e0 <MX_GPIO_Init+0xd0>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b1c      	ldr	r3, [pc, #112]	@ (80007e0 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a17      	ldr	r2, [pc, #92]	@ (80007e0 <MX_GPIO_Init+0xd0>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	4812      	ldr	r0, [pc, #72]	@ (80007e4 <MX_GPIO_Init+0xd4>)
 800079c:	f001 fb56 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	480c      	ldr	r0, [pc, #48]	@ (80007e8 <MX_GPIO_Init+0xd8>)
 80007b8:	f001 f9c4 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007bc:	2320      	movs	r3, #32
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <MX_GPIO_Init+0xd4>)
 80007d4:	f001 f9b6 	bl	8001b44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d8:	bf00      	nop
 80007da:	3728      	adds	r7, #40	@ 0x28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020000 	.word	0x40020000
 80007e8:	40020800 	.word	0x40020800

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <Error_Handler+0x8>

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000806:	4a0f      	ldr	r2, [pc, #60]	@ (8000844 <HAL_MspInit+0x4c>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800080c:	6453      	str	r3, [r2, #68]	@ 0x44
 800080e:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000822:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <HAL_MspInit+0x4c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	@ 0x40
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a33      	ldr	r2, [pc, #204]	@ (8000934 <HAL_ADC_MspInit+0xec>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d15f      	bne.n	800092a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b32      	ldr	r3, [pc, #200]	@ (8000938 <HAL_ADC_MspInit+0xf0>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000872:	4a31      	ldr	r2, [pc, #196]	@ (8000938 <HAL_ADC_MspInit+0xf0>)
 8000874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000878:	6453      	str	r3, [r2, #68]	@ 0x44
 800087a:	4b2f      	ldr	r3, [pc, #188]	@ (8000938 <HAL_ADC_MspInit+0xf0>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <HAL_ADC_MspInit+0xf0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a2a      	ldr	r2, [pc, #168]	@ (8000938 <HAL_ADC_MspInit+0xf0>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b28      	ldr	r3, [pc, #160]	@ (8000938 <HAL_ADC_MspInit+0xf0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008a2:	2303      	movs	r3, #3
 80008a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a6:	2303      	movs	r3, #3
 80008a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4821      	ldr	r0, [pc, #132]	@ (800093c <HAL_ADC_MspInit+0xf4>)
 80008b6:	f001 f945 	bl	8001b44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80008ba:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <HAL_ADC_MspInit+0xf8>)
 80008bc:	4a21      	ldr	r2, [pc, #132]	@ (8000944 <HAL_ADC_MspInit+0xfc>)
 80008be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <HAL_ADC_MspInit+0xf8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000940 <HAL_ADC_MspInit+0xf8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <HAL_ADC_MspInit+0xf8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <HAL_ADC_MspInit+0xf8>)
 80008d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008da:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <HAL_ADC_MspInit+0xf8>)
 80008dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <HAL_ADC_MspInit+0xf8>)
 80008e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <HAL_ADC_MspInit+0xf8>)
 80008ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008f2:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <HAL_ADC_MspInit+0xf8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008f8:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <HAL_ADC_MspInit+0xf8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008fe:	4810      	ldr	r0, [pc, #64]	@ (8000940 <HAL_ADC_MspInit+0xf8>)
 8000900:	f000 fe36 	bl	8001570 <HAL_DMA_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800090a:	f7ff ff6f 	bl	80007ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a0b      	ldr	r2, [pc, #44]	@ (8000940 <HAL_ADC_MspInit+0xf8>)
 8000912:	639a      	str	r2, [r3, #56]	@ 0x38
 8000914:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <HAL_ADC_MspInit+0xf8>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2101      	movs	r1, #1
 800091e:	2012      	movs	r0, #18
 8000920:	f000 fdef 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000924:	2012      	movs	r0, #18
 8000926:	f000 fe08 	bl	800153a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800092a:	bf00      	nop
 800092c:	3728      	adds	r7, #40	@ 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40012000 	.word	0x40012000
 8000938:	40023800 	.word	0x40023800
 800093c:	40020000 	.word	0x40020000
 8000940:	20000160 	.word	0x20000160
 8000944:	40026410 	.word	0x40026410

08000948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	@ 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a19      	ldr	r2, [pc, #100]	@ (80009cc <HAL_UART_MspInit+0x84>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d12c      	bne.n	80009c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	4a17      	ldr	r2, [pc, #92]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 8000974:	f043 0310 	orr.w	r3, r3, #16
 8000978:	6453      	str	r3, [r2, #68]	@ 0x44
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a10      	ldr	r2, [pc, #64]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009a2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009b4:	2307      	movs	r3, #7
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <HAL_UART_MspInit+0x8c>)
 80009c0:	f001 f8c0 	bl	8001b44 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	@ 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40011000 	.word	0x40011000
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <NMI_Handler+0x4>

080009e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <MemManage_Handler+0x4>

080009f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <UsageFault_Handler+0x4>

08000a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2e:	f000 f8af 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a3c:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <ADC_IRQHandler+0x10>)
 8000a3e:	f000 f92e 	bl	8000c9e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000118 	.word	0x20000118

08000a4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a50:	4802      	ldr	r0, [pc, #8]	@ (8000a5c <DMA2_Stream0_IRQHandler+0x10>)
 8000a52:	f000 fe3b 	bl	80016cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000160 	.word	0x20000160

08000a60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a64:	4802      	ldr	r0, [pc, #8]	@ (8000a70 <OTG_FS_IRQHandler+0x10>)
 8000a66:	f001 fb4e 	bl	8002106 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200016ec 	.word	0x200016ec

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <SystemInit+0x20>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7e:	4a05      	ldr	r2, [pc, #20]	@ (8000a94 <SystemInit+0x20>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a9c:	f7ff ffea 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa0:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aa2:	490d      	ldr	r1, [pc, #52]	@ (8000ad8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f007 fb5f 	bl	8008188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aca:	f7ff fcfb 	bl	80004c4 <main>
  bx  lr    
 8000ace:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ad0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000adc:	08008260 	.word	0x08008260
  ldr r2, =_sbss
 8000ae0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000ae4:	20001df0 	.word	0x20001df0

08000ae8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <DMA1_Stream0_IRQHandler>
	...

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b2c <HAL_Init+0x40>)
 8000af6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <HAL_Init+0x40>)
 8000b02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	@ (8000b2c <HAL_Init+0x40>)
 8000b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 fce9 	bl	80014ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1a:	200f      	movs	r0, #15
 8000b1c:	f000 f808 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b20:	f7ff fe6a 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023c00 	.word	0x40023c00

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <HAL_InitTick+0x54>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <HAL_InitTick+0x58>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fd01 	bl	8001556 <HAL_SYSTICK_Config>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00e      	b.n	8000b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d80a      	bhi.n	8000b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f000 fcc9 	bl	8001502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b70:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <HAL_InitTick+0x5c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000004 	.word	0x20000004

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000208 	.word	0x20000208

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	@ (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000208 	.word	0x20000208

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffee 	bl	8000bb8 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <HAL_Delay+0x44>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf6:	bf00      	nop
 8000bf8:	f7ff ffde 	bl	8000bb8 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008

08000c18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d101      	bne.n	8000c2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e033      	b.n	8000c96 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d109      	bne.n	8000c4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fe06 	bl	8000848 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	f003 0310 	and.w	r3, r3, #16
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d118      	bne.n	8000c88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c5e:	f023 0302 	bic.w	r3, r3, #2
 8000c62:	f043 0202 	orr.w	r2, r3, #2
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 fa68 	bl	8001140 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	f023 0303 	bic.w	r3, r3, #3
 8000c7e:	f043 0201 	orr.w	r2, r3, #1
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c86:	e001      	b.n	8000c8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	f003 0320 	and.w	r3, r3, #32
 8000ccc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d049      	beq.n	8000d68 <HAL_ADC_IRQHandler+0xca>
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d046      	beq.n	8000d68 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d105      	bne.n	8000cf2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d12b      	bne.n	8000d58 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d127      	bne.n	8000d58 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d0e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d006      	beq.n	8000d24 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d119      	bne.n	8000d58 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 0220 	bic.w	r2, r2, #32
 8000d32:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d105      	bne.n	8000d58 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d50:	f043 0201 	orr.w	r2, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f000 f8b0 	bl	8000ebe <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f06f 0212 	mvn.w	r2, #18
 8000d66:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d76:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d057      	beq.n	8000e2e <HAL_ADC_IRQHandler+0x190>
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d054      	beq.n	8000e2e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d88:	f003 0310 	and.w	r3, r3, #16
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d105      	bne.n	8000d9c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d139      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000db0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d006      	beq.n	8000dc6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d12b      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d124      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d11d      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d119      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000df8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d105      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	f043 0201 	orr.w	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f000 fa8a 	bl	8001338 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f06f 020c 	mvn.w	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e3c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d017      	beq.n	8000e74 <HAL_ADC_IRQHandler+0x1d6>
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d014      	beq.n	8000e74 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d10d      	bne.n	8000e74 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f834 	bl	8000ed2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f06f 0201 	mvn.w	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0320 	and.w	r3, r3, #32
 8000e7a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e82:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d015      	beq.n	8000eb6 <HAL_ADC_IRQHandler+0x218>
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d012      	beq.n	8000eb6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e94:	f043 0202 	orr.w	r2, r3, #2
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f06f 0220 	mvn.w	r2, #32
 8000ea4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 f81d 	bl	8000ee6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f06f 0220 	mvn.w	r2, #32
 8000eb4:	601a      	str	r2, [r3, #0]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d101      	bne.n	8000f18 <HAL_ADC_ConfigChannel+0x1c>
 8000f14:	2302      	movs	r3, #2
 8000f16:	e105      	b.n	8001124 <HAL_ADC_ConfigChannel+0x228>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b09      	cmp	r3, #9
 8000f26:	d925      	bls.n	8000f74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68d9      	ldr	r1, [r3, #12]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3b1e      	subs	r3, #30
 8000f3e:	2207      	movs	r2, #7
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43da      	mvns	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	400a      	ands	r2, r1
 8000f4c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68d9      	ldr	r1, [r3, #12]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	4603      	mov	r3, r0
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4403      	add	r3, r0
 8000f66:	3b1e      	subs	r3, #30
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	e022      	b.n	8000fba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6919      	ldr	r1, [r3, #16]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	461a      	mov	r2, r3
 8000f82:	4613      	mov	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	2207      	movs	r2, #7
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	400a      	ands	r2, r1
 8000f96:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6919      	ldr	r1, [r3, #16]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	4603      	mov	r3, r0
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4403      	add	r3, r0
 8000fb0:	409a      	lsls	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d824      	bhi.n	800100c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3b05      	subs	r3, #5
 8000fd4:	221f      	movs	r2, #31
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3b05      	subs	r3, #5
 8000ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	430a      	orrs	r2, r1
 8001008:	635a      	str	r2, [r3, #52]	@ 0x34
 800100a:	e04c      	b.n	80010a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b0c      	cmp	r3, #12
 8001012:	d824      	bhi.n	800105e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	3b23      	subs	r3, #35	@ 0x23
 8001026:	221f      	movs	r2, #31
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43da      	mvns	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	400a      	ands	r2, r1
 8001034:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	b29b      	uxth	r3, r3
 8001042:	4618      	mov	r0, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	3b23      	subs	r3, #35	@ 0x23
 8001050:	fa00 f203 	lsl.w	r2, r0, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	430a      	orrs	r2, r1
 800105a:	631a      	str	r2, [r3, #48]	@ 0x30
 800105c:	e023      	b.n	80010a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	3b41      	subs	r3, #65	@ 0x41
 8001070:	221f      	movs	r2, #31
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	400a      	ands	r2, r1
 800107e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	3b41      	subs	r3, #65	@ 0x41
 800109a:	fa00 f203 	lsl.w	r2, r0, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010a6:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <HAL_ADC_ConfigChannel+0x234>)
 80010a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a21      	ldr	r2, [pc, #132]	@ (8001134 <HAL_ADC_ConfigChannel+0x238>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d109      	bne.n	80010c8 <HAL_ADC_ConfigChannel+0x1cc>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b12      	cmp	r3, #18
 80010ba:	d105      	bne.n	80010c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a19      	ldr	r2, [pc, #100]	@ (8001134 <HAL_ADC_ConfigChannel+0x238>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d123      	bne.n	800111a <HAL_ADC_ConfigChannel+0x21e>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b10      	cmp	r3, #16
 80010d8:	d003      	beq.n	80010e2 <HAL_ADC_ConfigChannel+0x1e6>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b11      	cmp	r3, #17
 80010e0:	d11b      	bne.n	800111a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b10      	cmp	r3, #16
 80010f4:	d111      	bne.n	800111a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <HAL_ADC_ConfigChannel+0x23c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a10      	ldr	r2, [pc, #64]	@ (800113c <HAL_ADC_ConfigChannel+0x240>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	0c9a      	lsrs	r2, r3, #18
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800110c:	e002      	b.n	8001114 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	3b01      	subs	r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f9      	bne.n	800110e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	40012300 	.word	0x40012300
 8001134:	40012000 	.word	0x40012000
 8001138:	20000000 	.word	0x20000000
 800113c:	431bde83 	.word	0x431bde83

08001140 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001148:	4b79      	ldr	r3, [pc, #484]	@ (8001330 <ADC_Init+0x1f0>)
 800114a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	431a      	orrs	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001174:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6859      	ldr	r1, [r3, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	021a      	lsls	r2, r3, #8
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	430a      	orrs	r2, r1
 8001188:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001198:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6859      	ldr	r1, [r3, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6899      	ldr	r1, [r3, #8]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d2:	4a58      	ldr	r2, [pc, #352]	@ (8001334 <ADC_Init+0x1f4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d022      	beq.n	800121e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80011e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6899      	ldr	r1, [r3, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001208:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6899      	ldr	r1, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	e00f      	b.n	800123e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800122c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800123c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0202 	bic.w	r2, r2, #2
 800124c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6899      	ldr	r1, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7e1b      	ldrb	r3, [r3, #24]
 8001258:	005a      	lsls	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d01b      	beq.n	80012a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800127a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800128a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6859      	ldr	r1, [r3, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001296:	3b01      	subs	r3, #1
 8001298:	035a      	lsls	r2, r3, #13
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	e007      	b.n	80012b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012b2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80012c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	051a      	lsls	r2, r3, #20
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80012e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6899      	ldr	r1, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80012f6:	025a      	lsls	r2, r3, #9
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800130e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6899      	ldr	r1, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	029a      	lsls	r2, r3, #10
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	609a      	str	r2, [r3, #8]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40012300 	.word	0x40012300
 8001334:	0f000001 	.word	0x0f000001

08001338 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001368:	4013      	ands	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001374:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800137c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137e:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	60d3      	str	r3, [r2, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <__NVIC_GetPriorityGrouping+0x18>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	f003 0307 	and.w	r3, r3, #7
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db0b      	blt.n	80013da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 021f 	and.w	r2, r3, #31
 80013c8:	4907      	ldr	r1, [pc, #28]	@ (80013e8 <__NVIC_EnableIRQ+0x38>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	2001      	movs	r0, #1
 80013d2:	fa00 f202 	lsl.w	r2, r0, r2
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e100 	.word	0xe000e100

080013ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db0a      	blt.n	8001416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	490c      	ldr	r1, [pc, #48]	@ (8001438 <__NVIC_SetPriority+0x4c>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	440b      	add	r3, r1
 8001410:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001414:	e00a      	b.n	800142c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	@ (800143c <__NVIC_SetPriority+0x50>)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	3b04      	subs	r3, #4
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	440b      	add	r3, r1
 800142a:	761a      	strb	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	@ 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf28      	it	cs
 800145e:	2304      	movcs	r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3304      	adds	r3, #4
 8001466:	2b06      	cmp	r3, #6
 8001468:	d902      	bls.n	8001470 <NVIC_EncodePriority+0x30>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b03      	subs	r3, #3
 800146e:	e000      	b.n	8001472 <NVIC_EncodePriority+0x32>
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43d9      	mvns	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	4313      	orrs	r3, r2
         );
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	@ 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014b8:	d301      	bcc.n	80014be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00f      	b.n	80014de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <SysTick_Config+0x40>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c6:	210f      	movs	r1, #15
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f7ff ff8e 	bl	80013ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <SysTick_Config+0x40>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d6:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <SysTick_Config+0x40>)
 80014d8:	2207      	movs	r2, #7
 80014da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	e000e010 	.word	0xe000e010

080014ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff29 	bl	800134c <__NVIC_SetPriorityGrouping>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001514:	f7ff ff3e 	bl	8001394 <__NVIC_GetPriorityGrouping>
 8001518:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff ff8e 	bl	8001440 <NVIC_EncodePriority>
 8001524:	4602      	mov	r2, r0
 8001526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff5d 	bl	80013ec <__NVIC_SetPriority>
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff31 	bl	80013b0 <__NVIC_EnableIRQ>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffa2 	bl	80014a8 <SysTick_Config>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff fb1c 	bl	8000bb8 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e099      	b.n	80016c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2202      	movs	r2, #2
 8001590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0201 	bic.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ac:	e00f      	b.n	80015ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ae:	f7ff fb03 	bl	8000bb8 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d908      	bls.n	80015ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2220      	movs	r2, #32
 80015c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2203      	movs	r2, #3
 80015c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e078      	b.n	80016c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1e8      	bne.n	80015ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	4b38      	ldr	r3, [pc, #224]	@ (80016c8 <HAL_DMA_Init+0x158>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001624:	2b04      	cmp	r3, #4
 8001626:	d107      	bne.n	8001638 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001630:	4313      	orrs	r3, r2
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4313      	orrs	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f023 0307 	bic.w	r3, r3, #7
 800164e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	4313      	orrs	r3, r2
 8001658:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165e:	2b04      	cmp	r3, #4
 8001660:	d117      	bne.n	8001692 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	4313      	orrs	r3, r2
 800166a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00e      	beq.n	8001692 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f9e9 	bl	8001a4c <DMA_CheckFifoParam>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d008      	beq.n	8001692 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2240      	movs	r2, #64	@ 0x40
 8001684:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800168e:	2301      	movs	r3, #1
 8001690:	e016      	b.n	80016c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f9a0 	bl	80019e0 <DMA_CalcBaseAndBitshift>
 80016a0:	4603      	mov	r3, r0
 80016a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a8:	223f      	movs	r2, #63	@ 0x3f
 80016aa:	409a      	lsls	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	f010803f 	.word	0xf010803f

080016cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016d8:	4b8e      	ldr	r3, [pc, #568]	@ (8001914 <HAL_DMA_IRQHandler+0x248>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a8e      	ldr	r2, [pc, #568]	@ (8001918 <HAL_DMA_IRQHandler+0x24c>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	0a9b      	lsrs	r3, r3, #10
 80016e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f6:	2208      	movs	r2, #8
 80016f8:	409a      	lsls	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d01a      	beq.n	8001738 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d013      	beq.n	8001738 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0204 	bic.w	r2, r2, #4
 800171e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001724:	2208      	movs	r2, #8
 8001726:	409a      	lsls	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001730:	f043 0201 	orr.w	r2, r3, #1
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800173c:	2201      	movs	r2, #1
 800173e:	409a      	lsls	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d012      	beq.n	800176e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800175a:	2201      	movs	r2, #1
 800175c:	409a      	lsls	r2, r3
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001766:	f043 0202 	orr.w	r2, r3, #2
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001772:	2204      	movs	r2, #4
 8001774:	409a      	lsls	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d012      	beq.n	80017a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00b      	beq.n	80017a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001790:	2204      	movs	r2, #4
 8001792:	409a      	lsls	r2, r3
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800179c:	f043 0204 	orr.w	r2, r3, #4
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a8:	2210      	movs	r2, #16
 80017aa:	409a      	lsls	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d043      	beq.n	800183c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d03c      	beq.n	800183c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c6:	2210      	movs	r2, #16
 80017c8:	409a      	lsls	r2, r3
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d018      	beq.n	800180e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d108      	bne.n	80017fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d024      	beq.n	800183c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	4798      	blx	r3
 80017fa:	e01f      	b.n	800183c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01b      	beq.n	800183c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	4798      	blx	r3
 800180c:	e016      	b.n	800183c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d107      	bne.n	800182c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0208 	bic.w	r2, r2, #8
 800182a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001840:	2220      	movs	r2, #32
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 808f 	beq.w	800196c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 8087 	beq.w	800196c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001862:	2220      	movs	r2, #32
 8001864:	409a      	lsls	r2, r3
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b05      	cmp	r3, #5
 8001874:	d136      	bne.n	80018e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0216 	bic.w	r2, r2, #22
 8001884:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695a      	ldr	r2, [r3, #20]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001894:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	2b00      	cmp	r3, #0
 800189c:	d103      	bne.n	80018a6 <HAL_DMA_IRQHandler+0x1da>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d007      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0208 	bic.w	r2, r2, #8
 80018b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ba:	223f      	movs	r2, #63	@ 0x3f
 80018bc:	409a      	lsls	r2, r3
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d07e      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	4798      	blx	r3
        }
        return;
 80018e2:	e079      	b.n	80019d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d01d      	beq.n	800192e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10d      	bne.n	800191c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001904:	2b00      	cmp	r3, #0
 8001906:	d031      	beq.n	800196c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	4798      	blx	r3
 8001910:	e02c      	b.n	800196c <HAL_DMA_IRQHandler+0x2a0>
 8001912:	bf00      	nop
 8001914:	20000000 	.word	0x20000000
 8001918:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001920:	2b00      	cmp	r3, #0
 8001922:	d023      	beq.n	800196c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	4798      	blx	r3
 800192c:	e01e      	b.n	800196c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10f      	bne.n	800195c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0210 	bic.w	r2, r2, #16
 800194a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001970:	2b00      	cmp	r3, #0
 8001972:	d032      	beq.n	80019da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d022      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2205      	movs	r2, #5
 8001984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0201 	bic.w	r2, r2, #1
 8001996:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	3301      	adds	r3, #1
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d307      	bcc.n	80019b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f2      	bne.n	8001998 <HAL_DMA_IRQHandler+0x2cc>
 80019b2:	e000      	b.n	80019b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	4798      	blx	r3
 80019d6:	e000      	b.n	80019da <HAL_DMA_IRQHandler+0x30e>
        return;
 80019d8:	bf00      	nop
    }
  }
}
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	3b10      	subs	r3, #16
 80019f0:	4a14      	ldr	r2, [pc, #80]	@ (8001a44 <DMA_CalcBaseAndBitshift+0x64>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019fa:	4a13      	ldr	r2, [pc, #76]	@ (8001a48 <DMA_CalcBaseAndBitshift+0x68>)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d909      	bls.n	8001a22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a16:	f023 0303 	bic.w	r3, r3, #3
 8001a1a:	1d1a      	adds	r2, r3, #4
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a20:	e007      	b.n	8001a32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a2a:	f023 0303 	bic.w	r3, r3, #3
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	aaaaaaab 	.word	0xaaaaaaab
 8001a48:	08008248 	.word	0x08008248

08001a4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d11f      	bne.n	8001aa6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d856      	bhi.n	8001b1a <DMA_CheckFifoParam+0xce>
 8001a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a74 <DMA_CheckFifoParam+0x28>)
 8001a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a72:	bf00      	nop
 8001a74:	08001a85 	.word	0x08001a85
 8001a78:	08001a97 	.word	0x08001a97
 8001a7c:	08001a85 	.word	0x08001a85
 8001a80:	08001b1b 	.word	0x08001b1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d046      	beq.n	8001b1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a94:	e043      	b.n	8001b1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a9e:	d140      	bne.n	8001b22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aa4:	e03d      	b.n	8001b22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001aae:	d121      	bne.n	8001af4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d837      	bhi.n	8001b26 <DMA_CheckFifoParam+0xda>
 8001ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8001abc <DMA_CheckFifoParam+0x70>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001acd 	.word	0x08001acd
 8001ac0:	08001ad3 	.word	0x08001ad3
 8001ac4:	08001acd 	.word	0x08001acd
 8001ac8:	08001ae5 	.word	0x08001ae5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad0:	e030      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d025      	beq.n	8001b2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ae2:	e022      	b.n	8001b2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001aec:	d11f      	bne.n	8001b2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001af2:	e01c      	b.n	8001b2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d903      	bls.n	8001b02 <DMA_CheckFifoParam+0xb6>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d003      	beq.n	8001b08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b00:	e018      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
      break;
 8001b06:	e015      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00e      	beq.n	8001b32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
      break;
 8001b18:	e00b      	b.n	8001b32 <DMA_CheckFifoParam+0xe6>
      break;
 8001b1a:	bf00      	nop
 8001b1c:	e00a      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;
 8001b1e:	bf00      	nop
 8001b20:	e008      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;
 8001b22:	bf00      	nop
 8001b24:	e006      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;
 8001b26:	bf00      	nop
 8001b28:	e004      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;
 8001b2a:	bf00      	nop
 8001b2c:	e002      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b2e:	bf00      	nop
 8001b30:	e000      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;
 8001b32:	bf00      	nop
    }
  } 
  
  return status; 
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	@ 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e159      	b.n	8001e14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	f040 8148 	bne.w	8001e0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d005      	beq.n	8001b96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d130      	bne.n	8001bf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 0201 	and.w	r2, r3, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d017      	beq.n	8001c34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d123      	bne.n	8001c88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	08da      	lsrs	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	69b9      	ldr	r1, [r7, #24]
 8001c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80a2 	beq.w	8001e0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b57      	ldr	r3, [pc, #348]	@ (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	4a56      	ldr	r2, [pc, #344]	@ (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cda:	4b54      	ldr	r3, [pc, #336]	@ (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce6:	4a52      	ldr	r2, [pc, #328]	@ (8001e30 <HAL_GPIO_Init+0x2ec>)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a49      	ldr	r2, [pc, #292]	@ (8001e34 <HAL_GPIO_Init+0x2f0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d019      	beq.n	8001d46 <HAL_GPIO_Init+0x202>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a48      	ldr	r2, [pc, #288]	@ (8001e38 <HAL_GPIO_Init+0x2f4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_GPIO_Init+0x1fe>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a47      	ldr	r2, [pc, #284]	@ (8001e3c <HAL_GPIO_Init+0x2f8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00d      	beq.n	8001d3e <HAL_GPIO_Init+0x1fa>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a46      	ldr	r2, [pc, #280]	@ (8001e40 <HAL_GPIO_Init+0x2fc>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d007      	beq.n	8001d3a <HAL_GPIO_Init+0x1f6>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a45      	ldr	r2, [pc, #276]	@ (8001e44 <HAL_GPIO_Init+0x300>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_GPIO_Init+0x1f2>
 8001d32:	2304      	movs	r3, #4
 8001d34:	e008      	b.n	8001d48 <HAL_GPIO_Init+0x204>
 8001d36:	2307      	movs	r3, #7
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x204>
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e004      	b.n	8001d48 <HAL_GPIO_Init+0x204>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e002      	b.n	8001d48 <HAL_GPIO_Init+0x204>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_GPIO_Init+0x204>
 8001d46:	2300      	movs	r3, #0
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	f002 0203 	and.w	r2, r2, #3
 8001d4e:	0092      	lsls	r2, r2, #2
 8001d50:	4093      	lsls	r3, r2
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d58:	4935      	ldr	r1, [pc, #212]	@ (8001e30 <HAL_GPIO_Init+0x2ec>)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d66:	4b38      	ldr	r3, [pc, #224]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d8a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d90:	4b2d      	ldr	r3, [pc, #180]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db4:	4a24      	ldr	r2, [pc, #144]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dba:	4b23      	ldr	r3, [pc, #140]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dde:	4a1a      	ldr	r2, [pc, #104]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de4:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e08:	4a0f      	ldr	r2, [pc, #60]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3301      	adds	r3, #1
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	2b0f      	cmp	r3, #15
 8001e18:	f67f aea2 	bls.w	8001b60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3724      	adds	r7, #36	@ 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40013800 	.word	0x40013800
 8001e34:	40020000 	.word	0x40020000
 8001e38:	40020400 	.word	0x40020400
 8001e3c:	40020800 	.word	0x40020800
 8001e40:	40020c00 	.word	0x40020c00
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40013c00 	.word	0x40013c00

08001e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	807b      	strh	r3, [r7, #2]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e5c:	787b      	ldrb	r3, [r7, #1]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e68:	e003      	b.n	8001e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	041a      	lsls	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	619a      	str	r2, [r3, #24]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af02      	add	r7, sp, #8
 8001e84:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e101      	b.n	8002094 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f005 fe50 	bl	8007b50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ebe:	d102      	bne.n	8001ec6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f002 fa9d 	bl	800440a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7c1a      	ldrb	r2, [r3, #16]
 8001ed8:	f88d 2000 	strb.w	r2, [sp]
 8001edc:	3304      	adds	r3, #4
 8001ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ee0:	f002 f97c 	bl	80041dc <USB_CoreInit>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2202      	movs	r2, #2
 8001eee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e0ce      	b.n	8002094 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 fa95 	bl	800442c <USB_SetCurrentMode>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0bf      	b.n	8002094 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	e04a      	b.n	8001fb0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	3315      	adds	r3, #21
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3314      	adds	r3, #20
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	b298      	uxth	r0, r3
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	332e      	adds	r3, #46	@ 0x2e
 8001f56:	4602      	mov	r2, r0
 8001f58:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	3318      	adds	r3, #24
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	331c      	adds	r3, #28
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	3320      	adds	r3, #32
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	3324      	adds	r3, #36	@ 0x24
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	3301      	adds	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	791b      	ldrb	r3, [r3, #4]
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d3af      	bcc.n	8001f1a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]
 8001fbe:	e044      	b.n	800204a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fd6:	7bfa      	ldrb	r2, [r7, #15]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	3301      	adds	r3, #1
 8002048:	73fb      	strb	r3, [r7, #15]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	791b      	ldrb	r3, [r3, #4]
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	429a      	cmp	r2, r3
 8002052:	d3b5      	bcc.n	8001fc0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7c1a      	ldrb	r2, [r3, #16]
 800205c:	f88d 2000 	strb.w	r2, [sp]
 8002060:	3304      	adds	r3, #4
 8002062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002064:	f002 fa2e 	bl	80044c4 <USB_DevInit>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e00c      	b.n	8002094 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f003 fa78 	bl	8005582 <USB_DevDisconnect>

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_PCD_Start+0x1c>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e022      	b.n	80020fe <HAL_PCD_Start+0x62>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d009      	beq.n	80020e0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 f97f 	bl	80043e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 fa26 	bl	8005540 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002106:	b590      	push	{r4, r7, lr}
 8002108:	b08d      	sub	sp, #52	@ 0x34
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f003 fae4 	bl	80056ea <USB_GetMode>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	f040 848c 	bne.w	8002a42 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f003 fa48 	bl	80055c4 <USB_ReadInterrupts>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8482 	beq.w	8002a40 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f003 fa35 	bl	80055c4 <USB_ReadInterrupts>
 800215a:	4603      	mov	r3, r0
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b02      	cmp	r3, #2
 8002162:	d107      	bne.n	8002174 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f002 0202 	and.w	r2, r2, #2
 8002172:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f003 fa23 	bl	80055c4 <USB_ReadInterrupts>
 800217e:	4603      	mov	r3, r0
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	2b10      	cmp	r3, #16
 8002186:	d161      	bne.n	800224c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0210 	bic.w	r2, r2, #16
 8002196:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	f003 020f 	and.w	r2, r3, #15
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	4413      	add	r3, r2
 80021b4:	3304      	adds	r3, #4
 80021b6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	0c5b      	lsrs	r3, r3, #17
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d124      	bne.n	800220e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d035      	beq.n	800223c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	091b      	lsrs	r3, r3, #4
 80021d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021de:	b29b      	uxth	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	6a38      	ldr	r0, [r7, #32]
 80021e4:	f003 f85a 	bl	800529c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	091b      	lsrs	r3, r3, #4
 80021f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021f4:	441a      	add	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002206:	441a      	add	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	615a      	str	r2, [r3, #20]
 800220c:	e016      	b.n	800223c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	0c5b      	lsrs	r3, r3, #17
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	2b06      	cmp	r3, #6
 8002218:	d110      	bne.n	800223c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002220:	2208      	movs	r2, #8
 8002222:	4619      	mov	r1, r3
 8002224:	6a38      	ldr	r0, [r7, #32]
 8002226:	f003 f839 	bl	800529c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002236:	441a      	add	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699a      	ldr	r2, [r3, #24]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0210 	orr.w	r2, r2, #16
 800224a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f003 f9b7 	bl	80055c4 <USB_ReadInterrupts>
 8002256:	4603      	mov	r3, r0
 8002258:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800225c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002260:	f040 80a7 	bne.w	80023b2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f003 f9bc 	bl	80055ea <USB_ReadDevAllOutEpInterrupt>
 8002272:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002274:	e099      	b.n	80023aa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 808e 	beq.w	800239e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f003 f9e0 	bl	8005652 <USB_ReadDevOutEPInterrupt>
 8002292:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00c      	beq.n	80022b8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022aa:	461a      	mov	r2, r3
 80022ac:	2301      	movs	r3, #1
 80022ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fea4 	bl	8003000 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00c      	beq.n	80022dc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022ce:	461a      	mov	r2, r3
 80022d0:	2308      	movs	r3, #8
 80022d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 ff7a 	bl	80031d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022f2:	461a      	mov	r2, r3
 80022f4:	2310      	movs	r3, #16
 80022f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d030      	beq.n	8002364 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230a:	2b80      	cmp	r3, #128	@ 0x80
 800230c:	d109      	bne.n	8002322 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800231c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002320:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	3304      	adds	r3, #4
 8002336:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	78db      	ldrb	r3, [r3, #3]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d108      	bne.n	8002352 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2200      	movs	r2, #0
 8002344:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4619      	mov	r1, r3
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f005 fd05 	bl	8007d5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	4413      	add	r3, r2
 800235a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800235e:	461a      	mov	r2, r3
 8002360:	2302      	movs	r3, #2
 8002362:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	4413      	add	r3, r2
 8002376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800237a:	461a      	mov	r2, r3
 800237c:	2320      	movs	r3, #32
 800237e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	4413      	add	r3, r2
 8002392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002396:	461a      	mov	r2, r3
 8002398:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800239c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	3301      	adds	r3, #1
 80023a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80023a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a6:	085b      	lsrs	r3, r3, #1
 80023a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80023aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f47f af62 	bne.w	8002276 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 f904 	bl	80055c4 <USB_ReadInterrupts>
 80023bc:	4603      	mov	r3, r0
 80023be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80023c6:	f040 80db 	bne.w	8002580 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 f925 	bl	800561e <USB_ReadDevAllInEpInterrupt>
 80023d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80023da:	e0cd      	b.n	8002578 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 80c2 	beq.w	800256c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	4611      	mov	r1, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 f94b 	bl	800568e <USB_ReadDevInEPInterrupt>
 80023f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d057      	beq.n	80024b4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	2201      	movs	r2, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002418:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	43db      	mvns	r3, r3
 800241e:	69f9      	ldr	r1, [r7, #28]
 8002420:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002424:	4013      	ands	r3, r2
 8002426:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	4413      	add	r3, r2
 8002430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002434:	461a      	mov	r2, r3
 8002436:	2301      	movs	r3, #1
 8002438:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	799b      	ldrb	r3, [r3, #6]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d132      	bne.n	80024a8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	3320      	adds	r3, #32
 8002452:	6819      	ldr	r1, [r3, #0]
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4403      	add	r3, r0
 8002462:	331c      	adds	r3, #28
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4419      	add	r1, r3
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800246c:	4613      	mov	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4403      	add	r3, r0
 8002476:	3320      	adds	r3, #32
 8002478:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	2b00      	cmp	r3, #0
 800247e:	d113      	bne.n	80024a8 <HAL_PCD_IRQHandler+0x3a2>
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002484:	4613      	mov	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4413      	add	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	3324      	adds	r3, #36	@ 0x24
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d108      	bne.n	80024a8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024a0:	461a      	mov	r2, r3
 80024a2:	2101      	movs	r1, #1
 80024a4:	f003 f952 	bl	800574c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4619      	mov	r1, r3
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f005 fbcf 	bl	8007c52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d008      	beq.n	80024d0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024ca:	461a      	mov	r2, r3
 80024cc:	2308      	movs	r3, #8
 80024ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d008      	beq.n	80024ec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024e6:	461a      	mov	r2, r3
 80024e8:	2310      	movs	r3, #16
 80024ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002502:	461a      	mov	r2, r3
 8002504:	2340      	movs	r3, #64	@ 0x40
 8002506:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d023      	beq.n	800255a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002512:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002514:	6a38      	ldr	r0, [r7, #32]
 8002516:	f002 f939 	bl	800478c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800251a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	3310      	adds	r3, #16
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	3304      	adds	r3, #4
 800252c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	78db      	ldrb	r3, [r3, #3]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d108      	bne.n	8002548 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2200      	movs	r2, #0
 800253a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	b2db      	uxtb	r3, r3
 8002540:	4619      	mov	r1, r3
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f005 fc1c 	bl	8007d80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	4413      	add	r3, r2
 8002550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002554:	461a      	mov	r2, r3
 8002556:	2302      	movs	r3, #2
 8002558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002564:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fcbd 	bl	8002ee6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	3301      	adds	r3, #1
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002574:	085b      	lsrs	r3, r3, #1
 8002576:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257a:	2b00      	cmp	r3, #0
 800257c:	f47f af2e 	bne.w	80023dc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f003 f81d 	bl	80055c4 <USB_ReadInterrupts>
 800258a:	4603      	mov	r3, r0
 800258c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002590:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002594:	d122      	bne.n	80025dc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d108      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025bc:	2100      	movs	r1, #0
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fea4 	bl	800330c <HAL_PCDEx_LPM_Callback>
 80025c4:	e002      	b.n	80025cc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f005 fbba 	bl	8007d40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80025da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f002 ffef 	bl	80055c4 <USB_ReadInterrupts>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025f0:	d112      	bne.n	8002618 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d102      	bne.n	8002608 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f005 fb76 	bl	8007cf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695a      	ldr	r2, [r3, #20]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002616:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f002 ffd1 	bl	80055c4 <USB_ReadInterrupts>
 8002622:	4603      	mov	r3, r0
 8002624:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800262c:	f040 80b7 	bne.w	800279e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2110      	movs	r1, #16
 800264a:	4618      	mov	r0, r3
 800264c:	f002 f89e 	bl	800478c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002650:	2300      	movs	r3, #0
 8002652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002654:	e046      	b.n	80026e4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	4413      	add	r3, r2
 800265e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002662:	461a      	mov	r2, r3
 8002664:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002668:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800266a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	4413      	add	r3, r2
 8002672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800267a:	0151      	lsls	r1, r2, #5
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	440a      	add	r2, r1
 8002680:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002684:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002688:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800268a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002696:	461a      	mov	r2, r3
 8002698:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800269c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800269e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026ae:	0151      	lsls	r1, r2, #5
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	440a      	add	r2, r1
 80026b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80026b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80026bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026ce:	0151      	lsls	r1, r2, #5
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	440a      	add	r2, r1
 80026d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80026d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80026dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e0:	3301      	adds	r3, #1
 80026e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	791b      	ldrb	r3, [r3, #4]
 80026e8:	461a      	mov	r2, r3
 80026ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d3b2      	bcc.n	8002656 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026fe:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002702:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7bdb      	ldrb	r3, [r3, #15]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d016      	beq.n	800273a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800271c:	f043 030b 	orr.w	r3, r3, #11
 8002720:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800272a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002732:	f043 030b 	orr.w	r3, r3, #11
 8002736:	6453      	str	r3, [r2, #68]	@ 0x44
 8002738:	e015      	b.n	8002766 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002748:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800274c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002750:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002760:	f043 030b 	orr.w	r3, r3, #11
 8002764:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002774:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002778:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002788:	461a      	mov	r2, r3
 800278a:	f002 ffdf 	bl	800574c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800279c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 ff0e 	bl	80055c4 <USB_ReadInterrupts>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027b2:	d123      	bne.n	80027fc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 ffa4 	bl	8005706 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 f85b 	bl	800487e <USB_GetDevSpeed>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681c      	ldr	r4, [r3, #0]
 80027d4:	f001 fa0a 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 80027d8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027de:	461a      	mov	r2, r3
 80027e0:	4620      	mov	r0, r4
 80027e2:	f001 fd5f 	bl	80042a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f005 fa5b 	bl	8007ca2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80027fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f002 fedf 	bl	80055c4 <USB_ReadInterrupts>
 8002806:	4603      	mov	r3, r0
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b08      	cmp	r3, #8
 800280e:	d10a      	bne.n	8002826 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f005 fa38 	bl	8007c86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f002 0208 	and.w	r2, r2, #8
 8002824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f002 feca 	bl	80055c4 <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002836:	2b80      	cmp	r3, #128	@ 0x80
 8002838:	d123      	bne.n	8002882 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002846:	2301      	movs	r3, #1
 8002848:	627b      	str	r3, [r7, #36]	@ 0x24
 800284a:	e014      	b.n	8002876 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d105      	bne.n	8002870 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	b2db      	uxtb	r3, r3
 8002868:	4619      	mov	r1, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fb0a 	bl	8002e84 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	3301      	adds	r3, #1
 8002874:	627b      	str	r3, [r7, #36]	@ 0x24
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	791b      	ldrb	r3, [r3, #4]
 800287a:	461a      	mov	r2, r3
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	4293      	cmp	r3, r2
 8002880:	d3e4      	bcc.n	800284c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f002 fe9c 	bl	80055c4 <USB_ReadInterrupts>
 800288c:	4603      	mov	r3, r0
 800288e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002896:	d13c      	bne.n	8002912 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002898:	2301      	movs	r3, #1
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
 800289c:	e02b      	b.n	80028f6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	3318      	adds	r3, #24
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d115      	bne.n	80028f0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80028c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	da12      	bge.n	80028f0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	3317      	adds	r3, #23
 80028da:	2201      	movs	r2, #1
 80028dc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	4619      	mov	r1, r3
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 faca 	bl	8002e84 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	3301      	adds	r3, #1
 80028f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	791b      	ldrb	r3, [r3, #4]
 80028fa:	461a      	mov	r2, r3
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	4293      	cmp	r3, r2
 8002900:	d3cd      	bcc.n	800289e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002910:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f002 fe54 	bl	80055c4 <USB_ReadInterrupts>
 800291c:	4603      	mov	r3, r0
 800291e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002922:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002926:	d156      	bne.n	80029d6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002928:	2301      	movs	r3, #1
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
 800292c:	e045      	b.n	80029ba <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d12e      	bne.n	80029b4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002956:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002958:	2b00      	cmp	r3, #0
 800295a:	da2b      	bge.n	80029b4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002968:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800296c:	429a      	cmp	r2, r3
 800296e:	d121      	bne.n	80029b4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029b0:	6053      	str	r3, [r2, #4]
            break;
 80029b2:	e008      	b.n	80029c6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	3301      	adds	r3, #1
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	791b      	ldrb	r3, [r3, #4]
 80029be:	461a      	mov	r2, r3
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d3b3      	bcc.n	800292e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80029d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f002 fdf2 	bl	80055c4 <USB_ReadInterrupts>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80029e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ea:	d10a      	bne.n	8002a02 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f005 f9d9 	bl	8007da4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 fddc 	bl	80055c4 <USB_ReadInterrupts>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d115      	bne.n	8002a42 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f005 f9c9 	bl	8007dc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	e000      	b.n	8002a42 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002a40:	bf00      	nop
    }
  }
}
 8002a42:	3734      	adds	r7, #52	@ 0x34
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd90      	pop	{r4, r7, pc}

08002a48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_PCD_SetAddress+0x1a>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e012      	b.n	8002a88 <HAL_PCD_SetAddress+0x40>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f002 fd3b 	bl	80054f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	4608      	mov	r0, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	70fb      	strb	r3, [r7, #3]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	803b      	strh	r3, [r7, #0]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002aae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da0f      	bge.n	8002ad6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	f003 020f 	and.w	r2, r3, #15
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	3310      	adds	r3, #16
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	3304      	adds	r3, #4
 8002acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	705a      	strb	r2, [r3, #1]
 8002ad4:	e00f      	b.n	8002af6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	f003 020f 	and.w	r2, r3, #15
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	3304      	adds	r3, #4
 8002aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002b02:	883b      	ldrh	r3, [r7, #0]
 8002b04:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	78ba      	ldrb	r2, [r7, #2]
 8002b10:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	785b      	ldrb	r3, [r3, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d004      	beq.n	8002b24 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b24:	78bb      	ldrb	r3, [r7, #2]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d102      	bne.n	8002b30 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_PCD_EP_Open+0xae>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e00e      	b.n	8002b5c <HAL_PCD_EP_Open+0xcc>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68f9      	ldr	r1, [r7, #12]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 febb 	bl	80048c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	da0f      	bge.n	8002b98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	f003 020f 	and.w	r2, r3, #15
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	3310      	adds	r3, #16
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	705a      	strb	r2, [r3, #1]
 8002b96:	e00f      	b.n	8002bb8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	f003 020f 	and.w	r2, r3, #15
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	3304      	adds	r3, #4
 8002bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_PCD_EP_Close+0x6e>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e00e      	b.n	8002bf0 <HAL_PCD_EP_Close+0x8c>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68f9      	ldr	r1, [r7, #12]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 fef9 	bl	80049d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	460b      	mov	r3, r1
 8002c06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c08:	7afb      	ldrb	r3, [r7, #11]
 8002c0a:	f003 020f 	and.w	r2, r3, #15
 8002c0e:	4613      	mov	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3304      	adds	r3, #4
 8002c20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2200      	movs	r2, #0
 8002c32:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2200      	movs	r2, #0
 8002c38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c3a:	7afb      	ldrb	r3, [r7, #11]
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	799b      	ldrb	r3, [r3, #6]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d102      	bne.n	8002c54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	799b      	ldrb	r3, [r3, #6]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	6979      	ldr	r1, [r7, #20]
 8002c60:	f001 ff96 	bl	8004b90 <USB_EPStartXfer>

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	460b      	mov	r3, r1
 8002c78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	f003 020f 	and.w	r2, r3, #15
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002c90:	681b      	ldr	r3, [r3, #0]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	460b      	mov	r3, r1
 8002cac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cae:	7afb      	ldrb	r3, [r7, #11]
 8002cb0:	f003 020f 	and.w	r2, r3, #15
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	3310      	adds	r3, #16
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cde:	7afb      	ldrb	r3, [r7, #11]
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	799b      	ldrb	r3, [r3, #6]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d102      	bne.n	8002cf8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	799b      	ldrb	r3, [r3, #6]
 8002d00:	461a      	mov	r2, r3
 8002d02:	6979      	ldr	r1, [r7, #20]
 8002d04:	f001 ff44 	bl	8004b90 <USB_EPStartXfer>

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	7912      	ldrb	r2, [r2, #4]
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d901      	bls.n	8002d30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e04f      	b.n	8002dd0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	da0f      	bge.n	8002d58 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	f003 020f 	and.w	r2, r3, #15
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	3310      	adds	r3, #16
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	705a      	strb	r2, [r3, #1]
 8002d56:	e00d      	b.n	8002d74 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_PCD_EP_SetStall+0x82>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e01d      	b.n	8002dd0 <HAL_PCD_EP_SetStall+0xbe>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68f9      	ldr	r1, [r7, #12]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f002 fad2 	bl	800534c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7999      	ldrb	r1, [r3, #6]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f002 fcc3 	bl	800574c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	7912      	ldrb	r2, [r2, #4]
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d901      	bls.n	8002df6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e042      	b.n	8002e7c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002df6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	da0f      	bge.n	8002e1e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	f003 020f 	and.w	r2, r3, #15
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	3310      	adds	r3, #16
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	3304      	adds	r3, #4
 8002e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	705a      	strb	r2, [r3, #1]
 8002e1c:	e00f      	b.n	8002e3e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e1e:	78fb      	ldrb	r3, [r7, #3]
 8002e20:	f003 020f 	and.w	r2, r3, #15
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	3304      	adds	r3, #4
 8002e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_PCD_EP_ClrStall+0x86>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e00e      	b.n	8002e7c <HAL_PCD_EP_ClrStall+0xa4>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68f9      	ldr	r1, [r7, #12]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f002 fadb 	bl	8005428 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	da0c      	bge.n	8002eb2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 020f 	and.w	r2, r3, #15
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	3310      	adds	r3, #16
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	4413      	add	r3, r2
 8002eac:	3304      	adds	r3, #4
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	e00c      	b.n	8002ecc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	f003 020f 	and.w	r2, r3, #15
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3304      	adds	r3, #4
 8002eca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68f9      	ldr	r1, [r7, #12]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f002 f8fa 	bl	80050cc <USB_EPStopXfer>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002edc:	7afb      	ldrb	r3, [r7, #11]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b08a      	sub	sp, #40	@ 0x28
 8002eea:	af02      	add	r7, sp, #8
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	3310      	adds	r3, #16
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d901      	bls.n	8002f1e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e06b      	b.n	8002ff6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d902      	bls.n	8002f3a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3303      	adds	r3, #3
 8002f3e:	089b      	lsrs	r3, r3, #2
 8002f40:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f42:	e02a      	b.n	8002f9a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d902      	bls.n	8002f60 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	3303      	adds	r3, #3
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	68d9      	ldr	r1, [r3, #12]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	6978      	ldr	r0, [r7, #20]
 8002f7e:	f002 f94f 	bl	8005220 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	441a      	add	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	441a      	add	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d809      	bhi.n	8002fc4 <PCD_WriteEmptyTxFifo+0xde>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d203      	bcs.n	8002fc4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1bf      	bne.n	8002f44 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d811      	bhi.n	8002ff4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	6939      	ldr	r1, [r7, #16]
 8002fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3720      	adds	r7, #32
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	333c      	adds	r3, #60	@ 0x3c
 8003018:	3304      	adds	r3, #4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	799b      	ldrb	r3, [r3, #6]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d17b      	bne.n	800312e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d015      	beq.n	800306c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	4a61      	ldr	r2, [pc, #388]	@ (80031c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	f240 80b9 	bls.w	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80b3 	beq.w	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003062:	461a      	mov	r2, r3
 8003064:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003068:	6093      	str	r3, [r2, #8]
 800306a:	e0a7      	b.n	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003082:	461a      	mov	r2, r3
 8003084:	2320      	movs	r3, #32
 8003086:	6093      	str	r3, [r2, #8]
 8003088:	e098      	b.n	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 8093 	bne.w	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	4a4b      	ldr	r2, [pc, #300]	@ (80031c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d90f      	bls.n	80030be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030b4:	461a      	mov	r2, r3
 80030b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ba:	6093      	str	r3, [r2, #8]
 80030bc:	e07e      	b.n	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	4413      	add	r3, r2
 80030d0:	3304      	adds	r3, #4
 80030d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a1a      	ldr	r2, [r3, #32]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	0159      	lsls	r1, r3, #5
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	440b      	add	r3, r1
 80030e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ea:	1ad2      	subs	r2, r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d114      	bne.n	8003120 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003108:	461a      	mov	r2, r3
 800310a:	2101      	movs	r1, #1
 800310c:	f002 fb1e 	bl	800574c <USB_EP0_OutStart>
 8003110:	e006      	b.n	8003120 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	441a      	add	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	4619      	mov	r1, r3
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f004 fd78 	bl	8007c1c <HAL_PCD_DataOutStageCallback>
 800312c:	e046      	b.n	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	4a26      	ldr	r2, [pc, #152]	@ (80031cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d124      	bne.n	8003180 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800314c:	461a      	mov	r2, r3
 800314e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003152:	6093      	str	r3, [r2, #8]
 8003154:	e032      	b.n	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	4413      	add	r3, r2
 8003168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800316c:	461a      	mov	r2, r3
 800316e:	2320      	movs	r3, #32
 8003170:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	4619      	mov	r1, r3
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f004 fd4f 	bl	8007c1c <HAL_PCD_DataOutStageCallback>
 800317e:	e01d      	b.n	80031bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d114      	bne.n	80031b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d108      	bne.n	80031b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031a8:	461a      	mov	r2, r3
 80031aa:	2100      	movs	r1, #0
 80031ac:	f002 face 	bl	800574c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f004 fd30 	bl	8007c1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	4f54300a 	.word	0x4f54300a
 80031cc:	4f54310a 	.word	0x4f54310a

080031d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	333c      	adds	r3, #60	@ 0x3c
 80031e8:	3304      	adds	r3, #4
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4a15      	ldr	r2, [pc, #84]	@ (8003258 <PCD_EP_OutSetupPacket_int+0x88>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d90e      	bls.n	8003224 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800321c:	461a      	mov	r2, r3
 800321e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003222:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f004 fce7 	bl	8007bf8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a0a      	ldr	r2, [pc, #40]	@ (8003258 <PCD_EP_OutSetupPacket_int+0x88>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d90c      	bls.n	800324c <PCD_EP_OutSetupPacket_int+0x7c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	799b      	ldrb	r3, [r3, #6]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d108      	bne.n	800324c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003244:	461a      	mov	r2, r3
 8003246:	2101      	movs	r1, #1
 8003248:	f002 fa80 	bl	800574c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	4f54300a 	.word	0x4f54300a

0800325c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	70fb      	strb	r3, [r7, #3]
 8003268:	4613      	mov	r3, r2
 800326a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d107      	bne.n	800328a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800327a:	883b      	ldrh	r3, [r7, #0]
 800327c:	0419      	lsls	r1, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	430a      	orrs	r2, r1
 8003286:	629a      	str	r2, [r3, #40]	@ 0x28
 8003288:	e028      	b.n	80032dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	4413      	add	r3, r2
 8003296:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003298:	2300      	movs	r3, #0
 800329a:	73fb      	strb	r3, [r7, #15]
 800329c:	e00d      	b.n	80032ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	3340      	adds	r3, #64	@ 0x40
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	0c1b      	lsrs	r3, r3, #16
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	4413      	add	r3, r2
 80032b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	3301      	adds	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
 80032ba:	7bfa      	ldrb	r2, [r7, #15]
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	3b01      	subs	r3, #1
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d3ec      	bcc.n	800329e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032c4:	883b      	ldrh	r3, [r7, #0]
 80032c6:	0418      	lsls	r0, r3, #16
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6819      	ldr	r1, [r3, #0]
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	4302      	orrs	r2, r0
 80032d4:	3340      	adds	r3, #64	@ 0x40
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	460b      	mov	r3, r1
 80032f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	887a      	ldrh	r2, [r7, #2]
 80032fc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e267      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d075      	beq.n	800342e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003342:	4b88      	ldr	r3, [pc, #544]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b04      	cmp	r3, #4
 800334c:	d00c      	beq.n	8003368 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800334e:	4b85      	ldr	r3, [pc, #532]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003356:	2b08      	cmp	r3, #8
 8003358:	d112      	bne.n	8003380 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800335a:	4b82      	ldr	r3, [pc, #520]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003362:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003366:	d10b      	bne.n	8003380 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003368:	4b7e      	ldr	r3, [pc, #504]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d05b      	beq.n	800342c <HAL_RCC_OscConfig+0x108>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d157      	bne.n	800342c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e242      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003388:	d106      	bne.n	8003398 <HAL_RCC_OscConfig+0x74>
 800338a:	4b76      	ldr	r3, [pc, #472]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a75      	ldr	r2, [pc, #468]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e01d      	b.n	80033d4 <HAL_RCC_OscConfig+0xb0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x98>
 80033a2:	4b70      	ldr	r3, [pc, #448]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a6f      	ldr	r2, [pc, #444]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a6c      	ldr	r2, [pc, #432]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_OscConfig+0xb0>
 80033bc:	4b69      	ldr	r3, [pc, #420]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a68      	ldr	r2, [pc, #416]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b66      	ldr	r3, [pc, #408]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a65      	ldr	r2, [pc, #404]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d013      	beq.n	8003404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7fd fbec 	bl	8000bb8 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fd fbe8 	bl	8000bb8 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	@ 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e207      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0xc0>
 8003402:	e014      	b.n	800342e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fd fbd8 	bl	8000bb8 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800340c:	f7fd fbd4 	bl	8000bb8 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	@ 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e1f3      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341e:	4b51      	ldr	r3, [pc, #324]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0xe8>
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d063      	beq.n	8003502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800343a:	4b4a      	ldr	r3, [pc, #296]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003446:	4b47      	ldr	r3, [pc, #284]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800344e:	2b08      	cmp	r3, #8
 8003450:	d11c      	bne.n	800348c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003452:	4b44      	ldr	r3, [pc, #272]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d116      	bne.n	800348c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345e:	4b41      	ldr	r3, [pc, #260]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_RCC_OscConfig+0x152>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d001      	beq.n	8003476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e1c7      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003476:	4b3b      	ldr	r3, [pc, #236]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4937      	ldr	r1, [pc, #220]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348a:	e03a      	b.n	8003502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d020      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003494:	4b34      	ldr	r3, [pc, #208]	@ (8003568 <HAL_RCC_OscConfig+0x244>)
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7fd fb8d 	bl	8000bb8 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a2:	f7fd fb89 	bl	8000bb8 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e1a8      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c0:	4b28      	ldr	r3, [pc, #160]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4925      	ldr	r1, [pc, #148]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	600b      	str	r3, [r1, #0]
 80034d4:	e015      	b.n	8003502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d6:	4b24      	ldr	r3, [pc, #144]	@ (8003568 <HAL_RCC_OscConfig+0x244>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fd fb6c 	bl	8000bb8 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e4:	f7fd fb68 	bl	8000bb8 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e187      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d036      	beq.n	800357c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d016      	beq.n	8003544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003516:	4b15      	ldr	r3, [pc, #84]	@ (800356c <HAL_RCC_OscConfig+0x248>)
 8003518:	2201      	movs	r2, #1
 800351a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fd fb4c 	bl	8000bb8 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003524:	f7fd fb48 	bl	8000bb8 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e167      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003536:	4b0b      	ldr	r3, [pc, #44]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x200>
 8003542:	e01b      	b.n	800357c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003544:	4b09      	ldr	r3, [pc, #36]	@ (800356c <HAL_RCC_OscConfig+0x248>)
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354a:	f7fd fb35 	bl	8000bb8 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003550:	e00e      	b.n	8003570 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003552:	f7fd fb31 	bl	8000bb8 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d907      	bls.n	8003570 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e150      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
 8003564:	40023800 	.word	0x40023800
 8003568:	42470000 	.word	0x42470000
 800356c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	4b88      	ldr	r3, [pc, #544]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1ea      	bne.n	8003552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8097 	beq.w	80036b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358a:	2300      	movs	r3, #0
 800358c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358e:	4b81      	ldr	r3, [pc, #516]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10f      	bne.n	80035ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	4b7d      	ldr	r3, [pc, #500]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	4a7c      	ldr	r2, [pc, #496]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b6:	2301      	movs	r3, #1
 80035b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ba:	4b77      	ldr	r3, [pc, #476]	@ (8003798 <HAL_RCC_OscConfig+0x474>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d118      	bne.n	80035f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c6:	4b74      	ldr	r3, [pc, #464]	@ (8003798 <HAL_RCC_OscConfig+0x474>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a73      	ldr	r2, [pc, #460]	@ (8003798 <HAL_RCC_OscConfig+0x474>)
 80035cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d2:	f7fd faf1 	bl	8000bb8 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035da:	f7fd faed 	bl	8000bb8 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e10c      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003798 <HAL_RCC_OscConfig+0x474>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d106      	bne.n	800360e <HAL_RCC_OscConfig+0x2ea>
 8003600:	4b64      	ldr	r3, [pc, #400]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003604:	4a63      	ldr	r2, [pc, #396]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6713      	str	r3, [r2, #112]	@ 0x70
 800360c:	e01c      	b.n	8003648 <HAL_RCC_OscConfig+0x324>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b05      	cmp	r3, #5
 8003614:	d10c      	bne.n	8003630 <HAL_RCC_OscConfig+0x30c>
 8003616:	4b5f      	ldr	r3, [pc, #380]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361a:	4a5e      	ldr	r2, [pc, #376]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 800361c:	f043 0304 	orr.w	r3, r3, #4
 8003620:	6713      	str	r3, [r2, #112]	@ 0x70
 8003622:	4b5c      	ldr	r3, [pc, #368]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003626:	4a5b      	ldr	r2, [pc, #364]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6713      	str	r3, [r2, #112]	@ 0x70
 800362e:	e00b      	b.n	8003648 <HAL_RCC_OscConfig+0x324>
 8003630:	4b58      	ldr	r3, [pc, #352]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003634:	4a57      	ldr	r2, [pc, #348]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	6713      	str	r3, [r2, #112]	@ 0x70
 800363c:	4b55      	ldr	r3, [pc, #340]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003640:	4a54      	ldr	r2, [pc, #336]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003642:	f023 0304 	bic.w	r3, r3, #4
 8003646:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003650:	f7fd fab2 	bl	8000bb8 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003656:	e00a      	b.n	800366e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7fd faae 	bl	8000bb8 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e0cb      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366e:	4b49      	ldr	r3, [pc, #292]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0ee      	beq.n	8003658 <HAL_RCC_OscConfig+0x334>
 800367a:	e014      	b.n	80036a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367c:	f7fd fa9c 	bl	8000bb8 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003682:	e00a      	b.n	800369a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003684:	f7fd fa98 	bl	8000bb8 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e0b5      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369a:	4b3e      	ldr	r3, [pc, #248]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1ee      	bne.n	8003684 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d105      	bne.n	80036b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ac:	4b39      	ldr	r3, [pc, #228]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	4a38      	ldr	r2, [pc, #224]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 80036b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80a1 	beq.w	8003804 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036c2:	4b34      	ldr	r3, [pc, #208]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d05c      	beq.n	8003788 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d141      	bne.n	800375a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d6:	4b31      	ldr	r3, [pc, #196]	@ (800379c <HAL_RCC_OscConfig+0x478>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fd fa6c 	bl	8000bb8 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fd fa68 	bl	8000bb8 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e087      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	4b27      	ldr	r3, [pc, #156]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69da      	ldr	r2, [r3, #28]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	019b      	lsls	r3, r3, #6
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	3b01      	subs	r3, #1
 800371c:	041b      	lsls	r3, r3, #16
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	061b      	lsls	r3, r3, #24
 8003726:	491b      	ldr	r1, [pc, #108]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800372c:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <HAL_RCC_OscConfig+0x478>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fd fa41 	bl	8000bb8 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373a:	f7fd fa3d 	bl	8000bb8 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e05c      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374c:	4b11      	ldr	r3, [pc, #68]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x416>
 8003758:	e054      	b.n	8003804 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b10      	ldr	r3, [pc, #64]	@ (800379c <HAL_RCC_OscConfig+0x478>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fd fa2a 	bl	8000bb8 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003768:	f7fd fa26 	bl	8000bb8 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e045      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x444>
 8003786:	e03d      	b.n	8003804 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e038      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
 8003794:	40023800 	.word	0x40023800
 8003798:	40007000 	.word	0x40007000
 800379c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003810 <HAL_RCC_OscConfig+0x4ec>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d028      	beq.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d121      	bne.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d11a      	bne.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037d0:	4013      	ands	r3, r2
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d8:	4293      	cmp	r3, r2
 80037da:	d111      	bne.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	3b01      	subs	r3, #1
 80037ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800

08003814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0cc      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003828:	4b68      	ldr	r3, [pc, #416]	@ (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d90c      	bls.n	8003850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b65      	ldr	r3, [pc, #404]	@ (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b63      	ldr	r3, [pc, #396]	@ (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0b8      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d020      	beq.n	800389e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003868:	4b59      	ldr	r3, [pc, #356]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4a58      	ldr	r2, [pc, #352]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003872:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003880:	4b53      	ldr	r3, [pc, #332]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	4a52      	ldr	r2, [pc, #328]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800388a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800388c:	4b50      	ldr	r3, [pc, #320]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	494d      	ldr	r1, [pc, #308]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d044      	beq.n	8003934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d107      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	4b47      	ldr	r3, [pc, #284]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d119      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e07f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d003      	beq.n	80038d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d2:	4b3f      	ldr	r3, [pc, #252]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e06f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e2:	4b3b      	ldr	r3, [pc, #236]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e067      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038f2:	4b37      	ldr	r3, [pc, #220]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4934      	ldr	r1, [pc, #208]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003904:	f7fd f958 	bl	8000bb8 <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	e00a      	b.n	8003922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390c:	f7fd f954 	bl	8000bb8 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e04f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003922:	4b2b      	ldr	r3, [pc, #172]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 020c 	and.w	r2, r3, #12
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	429a      	cmp	r2, r3
 8003932:	d1eb      	bne.n	800390c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003934:	4b25      	ldr	r3, [pc, #148]	@ (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d20c      	bcs.n	800395c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003942:	4b22      	ldr	r3, [pc, #136]	@ (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b20      	ldr	r3, [pc, #128]	@ (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e032      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003968:	4b19      	ldr	r3, [pc, #100]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4916      	ldr	r1, [pc, #88]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003986:	4b12      	ldr	r3, [pc, #72]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	490e      	ldr	r1, [pc, #56]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800399a:	f000 f821 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 800399e:	4602      	mov	r2, r0
 80039a0:	4b0b      	ldr	r3, [pc, #44]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	490a      	ldr	r1, [pc, #40]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c0>)
 80039ac:	5ccb      	ldrb	r3, [r1, r3]
 80039ae:	fa22 f303 	lsr.w	r3, r2, r3
 80039b2:	4a09      	ldr	r2, [pc, #36]	@ (80039d8 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80039b6:	4b09      	ldr	r3, [pc, #36]	@ (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd f8b8 	bl	8000b30 <HAL_InitTick>

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023c00 	.word	0x40023c00
 80039d0:	40023800 	.word	0x40023800
 80039d4:	08008230 	.word	0x08008230
 80039d8:	20000000 	.word	0x20000000
 80039dc:	20000004 	.word	0x20000004

080039e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e4:	b094      	sub	sp, #80	@ 0x50
 80039e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f8:	4b79      	ldr	r3, [pc, #484]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d00d      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x40>
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	f200 80e1 	bhi.w	8003bcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x34>
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d003      	beq.n	8003a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a12:	e0db      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a14:	4b73      	ldr	r3, [pc, #460]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a18:	e0db      	b.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a1a:	4b73      	ldr	r3, [pc, #460]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a1e:	e0d8      	b.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a20:	4b6f      	ldr	r3, [pc, #444]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d063      	beq.n	8003afe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a36:	4b6a      	ldr	r3, [pc, #424]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	099b      	lsrs	r3, r3, #6
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a48:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a52:	4622      	mov	r2, r4
 8003a54:	462b      	mov	r3, r5
 8003a56:	f04f 0000 	mov.w	r0, #0
 8003a5a:	f04f 0100 	mov.w	r1, #0
 8003a5e:	0159      	lsls	r1, r3, #5
 8003a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a64:	0150      	lsls	r0, r2, #5
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	1a51      	subs	r1, r2, r1
 8003a6e:	6139      	str	r1, [r7, #16]
 8003a70:	4629      	mov	r1, r5
 8003a72:	eb63 0301 	sbc.w	r3, r3, r1
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a84:	4659      	mov	r1, fp
 8003a86:	018b      	lsls	r3, r1, #6
 8003a88:	4651      	mov	r1, sl
 8003a8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a8e:	4651      	mov	r1, sl
 8003a90:	018a      	lsls	r2, r1, #6
 8003a92:	4651      	mov	r1, sl
 8003a94:	ebb2 0801 	subs.w	r8, r2, r1
 8003a98:	4659      	mov	r1, fp
 8003a9a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ab2:	4690      	mov	r8, r2
 8003ab4:	4699      	mov	r9, r3
 8003ab6:	4623      	mov	r3, r4
 8003ab8:	eb18 0303 	adds.w	r3, r8, r3
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	462b      	mov	r3, r5
 8003ac0:	eb49 0303 	adc.w	r3, r9, r3
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	024b      	lsls	r3, r1, #9
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003adc:	4621      	mov	r1, r4
 8003ade:	024a      	lsls	r2, r1, #9
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003aec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003af0:	f7fc fb70 	bl	80001d4 <__aeabi_uldivmod>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4613      	mov	r3, r2
 8003afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003afc:	e058      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003afe:	4b38      	ldr	r3, [pc, #224]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	099b      	lsrs	r3, r3, #6
 8003b04:	2200      	movs	r2, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	4611      	mov	r1, r2
 8003b0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b0e:	623b      	str	r3, [r7, #32]
 8003b10:	2300      	movs	r3, #0
 8003b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b18:	4642      	mov	r2, r8
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	f04f 0000 	mov.w	r0, #0
 8003b20:	f04f 0100 	mov.w	r1, #0
 8003b24:	0159      	lsls	r1, r3, #5
 8003b26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b2a:	0150      	lsls	r0, r2, #5
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4641      	mov	r1, r8
 8003b32:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b36:	4649      	mov	r1, r9
 8003b38:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b50:	ebb2 040a 	subs.w	r4, r2, sl
 8003b54:	eb63 050b 	sbc.w	r5, r3, fp
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	00eb      	lsls	r3, r5, #3
 8003b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b66:	00e2      	lsls	r2, r4, #3
 8003b68:	4614      	mov	r4, r2
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	4643      	mov	r3, r8
 8003b6e:	18e3      	adds	r3, r4, r3
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	464b      	mov	r3, r9
 8003b74:	eb45 0303 	adc.w	r3, r5, r3
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b86:	4629      	mov	r1, r5
 8003b88:	028b      	lsls	r3, r1, #10
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b90:	4621      	mov	r1, r4
 8003b92:	028a      	lsls	r2, r1, #10
 8003b94:	4610      	mov	r0, r2
 8003b96:	4619      	mov	r1, r3
 8003b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	61fa      	str	r2, [r7, #28]
 8003ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ba4:	f7fc fb16 	bl	80001d4 <__aeabi_uldivmod>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4613      	mov	r3, r2
 8003bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003bc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bca:	e002      	b.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bcc:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3750      	adds	r7, #80	@ 0x50
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800
 8003be4:	00f42400 	.word	0x00f42400
 8003be8:	007a1200 	.word	0x007a1200

08003bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf0:	4b03      	ldr	r3, [pc, #12]	@ (8003c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20000000 	.word	0x20000000

08003c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c08:	f7ff fff0 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b05      	ldr	r3, [pc, #20]	@ (8003c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	0a9b      	lsrs	r3, r3, #10
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4903      	ldr	r1, [pc, #12]	@ (8003c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c1a:	5ccb      	ldrb	r3, [r1, r3]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40023800 	.word	0x40023800
 8003c28:	08008240 	.word	0x08008240

08003c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c30:	f7ff ffdc 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8003c34:	4602      	mov	r2, r0
 8003c36:	4b05      	ldr	r3, [pc, #20]	@ (8003c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	0b5b      	lsrs	r3, r3, #13
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	4903      	ldr	r1, [pc, #12]	@ (8003c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c42:	5ccb      	ldrb	r3, [r1, r3]
 8003c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	08008240 	.word	0x08008240

08003c54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e042      	b.n	8003cec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fc fe64 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2224      	movs	r2, #36	@ 0x24
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f82b 	bl	8003cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ccc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf8:	b0c0      	sub	sp, #256	@ 0x100
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d10:	68d9      	ldr	r1, [r3, #12]
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	ea40 0301 	orr.w	r3, r0, r1
 8003d1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d4c:	f021 010c 	bic.w	r1, r1, #12
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6e:	6999      	ldr	r1, [r3, #24]
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	ea40 0301 	orr.w	r3, r0, r1
 8003d7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4b8f      	ldr	r3, [pc, #572]	@ (8003fc0 <UART_SetConfig+0x2cc>)
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d005      	beq.n	8003d94 <UART_SetConfig+0xa0>
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4b8d      	ldr	r3, [pc, #564]	@ (8003fc4 <UART_SetConfig+0x2d0>)
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d104      	bne.n	8003d9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d94:	f7ff ff4a 	bl	8003c2c <HAL_RCC_GetPCLK2Freq>
 8003d98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d9c:	e003      	b.n	8003da6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d9e:	f7ff ff31 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8003da2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003db0:	f040 810c 	bne.w	8003fcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003dbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003dc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003dc6:	4622      	mov	r2, r4
 8003dc8:	462b      	mov	r3, r5
 8003dca:	1891      	adds	r1, r2, r2
 8003dcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003dce:	415b      	adcs	r3, r3
 8003dd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	eb12 0801 	adds.w	r8, r2, r1
 8003ddc:	4629      	mov	r1, r5
 8003dde:	eb43 0901 	adc.w	r9, r3, r1
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003df6:	4690      	mov	r8, r2
 8003df8:	4699      	mov	r9, r3
 8003dfa:	4623      	mov	r3, r4
 8003dfc:	eb18 0303 	adds.w	r3, r8, r3
 8003e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e04:	462b      	mov	r3, r5
 8003e06:	eb49 0303 	adc.w	r3, r9, r3
 8003e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e22:	460b      	mov	r3, r1
 8003e24:	18db      	adds	r3, r3, r3
 8003e26:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e28:	4613      	mov	r3, r2
 8003e2a:	eb42 0303 	adc.w	r3, r2, r3
 8003e2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e38:	f7fc f9cc 	bl	80001d4 <__aeabi_uldivmod>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4b61      	ldr	r3, [pc, #388]	@ (8003fc8 <UART_SetConfig+0x2d4>)
 8003e42:	fba3 2302 	umull	r2, r3, r3, r2
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	011c      	lsls	r4, r3, #4
 8003e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	464b      	mov	r3, r9
 8003e60:	1891      	adds	r1, r2, r2
 8003e62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e64:	415b      	adcs	r3, r3
 8003e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e6c:	4641      	mov	r1, r8
 8003e6e:	eb12 0a01 	adds.w	sl, r2, r1
 8003e72:	4649      	mov	r1, r9
 8003e74:	eb43 0b01 	adc.w	fp, r3, r1
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e8c:	4692      	mov	sl, r2
 8003e8e:	469b      	mov	fp, r3
 8003e90:	4643      	mov	r3, r8
 8003e92:	eb1a 0303 	adds.w	r3, sl, r3
 8003e96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e9a:	464b      	mov	r3, r9
 8003e9c:	eb4b 0303 	adc.w	r3, fp, r3
 8003ea0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003eb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003eb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	18db      	adds	r3, r3, r3
 8003ebc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	eb42 0303 	adc.w	r3, r2, r3
 8003ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ec6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003eca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ece:	f7fc f981 	bl	80001d4 <__aeabi_uldivmod>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8003fc8 <UART_SetConfig+0x2d4>)
 8003eda:	fba3 2301 	umull	r2, r3, r3, r1
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	2264      	movs	r2, #100	@ 0x64
 8003ee2:	fb02 f303 	mul.w	r3, r2, r3
 8003ee6:	1acb      	subs	r3, r1, r3
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003eee:	4b36      	ldr	r3, [pc, #216]	@ (8003fc8 <UART_SetConfig+0x2d4>)
 8003ef0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef4:	095b      	lsrs	r3, r3, #5
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003efc:	441c      	add	r4, r3
 8003efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f02:	2200      	movs	r2, #0
 8003f04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f10:	4642      	mov	r2, r8
 8003f12:	464b      	mov	r3, r9
 8003f14:	1891      	adds	r1, r2, r2
 8003f16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f18:	415b      	adcs	r3, r3
 8003f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f20:	4641      	mov	r1, r8
 8003f22:	1851      	adds	r1, r2, r1
 8003f24:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f26:	4649      	mov	r1, r9
 8003f28:	414b      	adcs	r3, r1
 8003f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f38:	4659      	mov	r1, fp
 8003f3a:	00cb      	lsls	r3, r1, #3
 8003f3c:	4651      	mov	r1, sl
 8003f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f42:	4651      	mov	r1, sl
 8003f44:	00ca      	lsls	r2, r1, #3
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	189b      	adds	r3, r3, r2
 8003f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f54:	464b      	mov	r3, r9
 8003f56:	460a      	mov	r2, r1
 8003f58:	eb42 0303 	adc.w	r3, r2, r3
 8003f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f74:	460b      	mov	r3, r1
 8003f76:	18db      	adds	r3, r3, r3
 8003f78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	eb42 0303 	adc.w	r3, r2, r3
 8003f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f8a:	f7fc f923 	bl	80001d4 <__aeabi_uldivmod>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc8 <UART_SetConfig+0x2d4>)
 8003f94:	fba3 1302 	umull	r1, r3, r3, r2
 8003f98:	095b      	lsrs	r3, r3, #5
 8003f9a:	2164      	movs	r1, #100	@ 0x64
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	3332      	adds	r3, #50	@ 0x32
 8003fa6:	4a08      	ldr	r2, [pc, #32]	@ (8003fc8 <UART_SetConfig+0x2d4>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	f003 0207 	and.w	r2, r3, #7
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4422      	add	r2, r4
 8003fba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fbc:	e106      	b.n	80041cc <UART_SetConfig+0x4d8>
 8003fbe:	bf00      	nop
 8003fc0:	40011000 	.word	0x40011000
 8003fc4:	40011400 	.word	0x40011400
 8003fc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003fde:	4642      	mov	r2, r8
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	1891      	adds	r1, r2, r2
 8003fe4:	6239      	str	r1, [r7, #32]
 8003fe6:	415b      	adcs	r3, r3
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fee:	4641      	mov	r1, r8
 8003ff0:	1854      	adds	r4, r2, r1
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	eb43 0501 	adc.w	r5, r3, r1
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	00eb      	lsls	r3, r5, #3
 8004002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004006:	00e2      	lsls	r2, r4, #3
 8004008:	4614      	mov	r4, r2
 800400a:	461d      	mov	r5, r3
 800400c:	4643      	mov	r3, r8
 800400e:	18e3      	adds	r3, r4, r3
 8004010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004014:	464b      	mov	r3, r9
 8004016:	eb45 0303 	adc.w	r3, r5, r3
 800401a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800401e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800402a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800403a:	4629      	mov	r1, r5
 800403c:	008b      	lsls	r3, r1, #2
 800403e:	4621      	mov	r1, r4
 8004040:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004044:	4621      	mov	r1, r4
 8004046:	008a      	lsls	r2, r1, #2
 8004048:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800404c:	f7fc f8c2 	bl	80001d4 <__aeabi_uldivmod>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4b60      	ldr	r3, [pc, #384]	@ (80041d8 <UART_SetConfig+0x4e4>)
 8004056:	fba3 2302 	umull	r2, r3, r3, r2
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	011c      	lsls	r4, r3, #4
 800405e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004062:	2200      	movs	r2, #0
 8004064:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004068:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800406c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004070:	4642      	mov	r2, r8
 8004072:	464b      	mov	r3, r9
 8004074:	1891      	adds	r1, r2, r2
 8004076:	61b9      	str	r1, [r7, #24]
 8004078:	415b      	adcs	r3, r3
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004080:	4641      	mov	r1, r8
 8004082:	1851      	adds	r1, r2, r1
 8004084:	6139      	str	r1, [r7, #16]
 8004086:	4649      	mov	r1, r9
 8004088:	414b      	adcs	r3, r1
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004098:	4659      	mov	r1, fp
 800409a:	00cb      	lsls	r3, r1, #3
 800409c:	4651      	mov	r1, sl
 800409e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040a2:	4651      	mov	r1, sl
 80040a4:	00ca      	lsls	r2, r1, #3
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	4603      	mov	r3, r0
 80040ac:	4642      	mov	r2, r8
 80040ae:	189b      	adds	r3, r3, r2
 80040b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040b4:	464b      	mov	r3, r9
 80040b6:	460a      	mov	r2, r1
 80040b8:	eb42 0303 	adc.w	r3, r2, r3
 80040bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040d8:	4649      	mov	r1, r9
 80040da:	008b      	lsls	r3, r1, #2
 80040dc:	4641      	mov	r1, r8
 80040de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040e2:	4641      	mov	r1, r8
 80040e4:	008a      	lsls	r2, r1, #2
 80040e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040ea:	f7fc f873 	bl	80001d4 <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4611      	mov	r1, r2
 80040f4:	4b38      	ldr	r3, [pc, #224]	@ (80041d8 <UART_SetConfig+0x4e4>)
 80040f6:	fba3 2301 	umull	r2, r3, r3, r1
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	2264      	movs	r2, #100	@ 0x64
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	1acb      	subs	r3, r1, r3
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	3332      	adds	r3, #50	@ 0x32
 8004108:	4a33      	ldr	r2, [pc, #204]	@ (80041d8 <UART_SetConfig+0x4e4>)
 800410a:	fba2 2303 	umull	r2, r3, r2, r3
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004114:	441c      	add	r4, r3
 8004116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800411a:	2200      	movs	r2, #0
 800411c:	673b      	str	r3, [r7, #112]	@ 0x70
 800411e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004120:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004124:	4642      	mov	r2, r8
 8004126:	464b      	mov	r3, r9
 8004128:	1891      	adds	r1, r2, r2
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	415b      	adcs	r3, r3
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004134:	4641      	mov	r1, r8
 8004136:	1851      	adds	r1, r2, r1
 8004138:	6039      	str	r1, [r7, #0]
 800413a:	4649      	mov	r1, r9
 800413c:	414b      	adcs	r3, r1
 800413e:	607b      	str	r3, [r7, #4]
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800414c:	4659      	mov	r1, fp
 800414e:	00cb      	lsls	r3, r1, #3
 8004150:	4651      	mov	r1, sl
 8004152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004156:	4651      	mov	r1, sl
 8004158:	00ca      	lsls	r2, r1, #3
 800415a:	4610      	mov	r0, r2
 800415c:	4619      	mov	r1, r3
 800415e:	4603      	mov	r3, r0
 8004160:	4642      	mov	r2, r8
 8004162:	189b      	adds	r3, r3, r2
 8004164:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004166:	464b      	mov	r3, r9
 8004168:	460a      	mov	r2, r1
 800416a:	eb42 0303 	adc.w	r3, r2, r3
 800416e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	663b      	str	r3, [r7, #96]	@ 0x60
 800417a:	667a      	str	r2, [r7, #100]	@ 0x64
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004188:	4649      	mov	r1, r9
 800418a:	008b      	lsls	r3, r1, #2
 800418c:	4641      	mov	r1, r8
 800418e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004192:	4641      	mov	r1, r8
 8004194:	008a      	lsls	r2, r1, #2
 8004196:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800419a:	f7fc f81b 	bl	80001d4 <__aeabi_uldivmod>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <UART_SetConfig+0x4e4>)
 80041a4:	fba3 1302 	umull	r1, r3, r3, r2
 80041a8:	095b      	lsrs	r3, r3, #5
 80041aa:	2164      	movs	r1, #100	@ 0x64
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	3332      	adds	r3, #50	@ 0x32
 80041b6:	4a08      	ldr	r2, [pc, #32]	@ (80041d8 <UART_SetConfig+0x4e4>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	f003 020f 	and.w	r2, r3, #15
 80041c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4422      	add	r2, r4
 80041ca:	609a      	str	r2, [r3, #8]
}
 80041cc:	bf00      	nop
 80041ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041d2:	46bd      	mov	sp, r7
 80041d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041d8:	51eb851f 	.word	0x51eb851f

080041dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041dc:	b084      	sub	sp, #16
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	f107 001c 	add.w	r0, r7, #28
 80041ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d123      	bne.n	800423e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800420a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800421e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004222:	2b01      	cmp	r3, #1
 8004224:	d105      	bne.n	8004232 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f001 fae8 	bl	8005808 <USB_CoreReset>
 8004238:	4603      	mov	r3, r0
 800423a:	73fb      	strb	r3, [r7, #15]
 800423c:	e01b      	b.n	8004276 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f001 fadc 	bl	8005808 <USB_CoreReset>
 8004250:	4603      	mov	r3, r0
 8004252:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004254:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004258:	2b00      	cmp	r3, #0
 800425a:	d106      	bne.n	800426a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004260:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	639a      	str	r2, [r3, #56]	@ 0x38
 8004268:	e005      	b.n	8004276 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004276:	7fbb      	ldrb	r3, [r7, #30]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d10b      	bne.n	8004294 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f043 0206 	orr.w	r2, r3, #6
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f043 0220 	orr.w	r2, r3, #32
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004294:	7bfb      	ldrb	r3, [r7, #15]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042a0:	b004      	add	sp, #16
 80042a2:	4770      	bx	lr

080042a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d165      	bne.n	8004384 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4a41      	ldr	r2, [pc, #260]	@ (80043c0 <USB_SetTurnaroundTime+0x11c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d906      	bls.n	80042ce <USB_SetTurnaroundTime+0x2a>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4a40      	ldr	r2, [pc, #256]	@ (80043c4 <USB_SetTurnaroundTime+0x120>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d202      	bcs.n	80042ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80042c8:	230f      	movs	r3, #15
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	e062      	b.n	8004394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4a3c      	ldr	r2, [pc, #240]	@ (80043c4 <USB_SetTurnaroundTime+0x120>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d306      	bcc.n	80042e4 <USB_SetTurnaroundTime+0x40>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4a3b      	ldr	r2, [pc, #236]	@ (80043c8 <USB_SetTurnaroundTime+0x124>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d202      	bcs.n	80042e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042de:	230e      	movs	r3, #14
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	e057      	b.n	8004394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4a38      	ldr	r2, [pc, #224]	@ (80043c8 <USB_SetTurnaroundTime+0x124>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d306      	bcc.n	80042fa <USB_SetTurnaroundTime+0x56>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4a37      	ldr	r2, [pc, #220]	@ (80043cc <USB_SetTurnaroundTime+0x128>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d202      	bcs.n	80042fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042f4:	230d      	movs	r3, #13
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	e04c      	b.n	8004394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4a33      	ldr	r2, [pc, #204]	@ (80043cc <USB_SetTurnaroundTime+0x128>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d306      	bcc.n	8004310 <USB_SetTurnaroundTime+0x6c>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	4a32      	ldr	r2, [pc, #200]	@ (80043d0 <USB_SetTurnaroundTime+0x12c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d802      	bhi.n	8004310 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800430a:	230c      	movs	r3, #12
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	e041      	b.n	8004394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4a2f      	ldr	r2, [pc, #188]	@ (80043d0 <USB_SetTurnaroundTime+0x12c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d906      	bls.n	8004326 <USB_SetTurnaroundTime+0x82>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4a2e      	ldr	r2, [pc, #184]	@ (80043d4 <USB_SetTurnaroundTime+0x130>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d802      	bhi.n	8004326 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004320:	230b      	movs	r3, #11
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	e036      	b.n	8004394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4a2a      	ldr	r2, [pc, #168]	@ (80043d4 <USB_SetTurnaroundTime+0x130>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d906      	bls.n	800433c <USB_SetTurnaroundTime+0x98>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4a29      	ldr	r2, [pc, #164]	@ (80043d8 <USB_SetTurnaroundTime+0x134>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d802      	bhi.n	800433c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004336:	230a      	movs	r3, #10
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	e02b      	b.n	8004394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4a26      	ldr	r2, [pc, #152]	@ (80043d8 <USB_SetTurnaroundTime+0x134>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d906      	bls.n	8004352 <USB_SetTurnaroundTime+0xae>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4a25      	ldr	r2, [pc, #148]	@ (80043dc <USB_SetTurnaroundTime+0x138>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d202      	bcs.n	8004352 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800434c:	2309      	movs	r3, #9
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	e020      	b.n	8004394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4a21      	ldr	r2, [pc, #132]	@ (80043dc <USB_SetTurnaroundTime+0x138>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d306      	bcc.n	8004368 <USB_SetTurnaroundTime+0xc4>
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4a20      	ldr	r2, [pc, #128]	@ (80043e0 <USB_SetTurnaroundTime+0x13c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d802      	bhi.n	8004368 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004362:	2308      	movs	r3, #8
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	e015      	b.n	8004394 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4a1d      	ldr	r2, [pc, #116]	@ (80043e0 <USB_SetTurnaroundTime+0x13c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d906      	bls.n	800437e <USB_SetTurnaroundTime+0xda>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4a1c      	ldr	r2, [pc, #112]	@ (80043e4 <USB_SetTurnaroundTime+0x140>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d202      	bcs.n	800437e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004378:	2307      	movs	r3, #7
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	e00a      	b.n	8004394 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800437e:	2306      	movs	r3, #6
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	e007      	b.n	8004394 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800438a:	2309      	movs	r3, #9
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	e001      	b.n	8004394 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004390:	2309      	movs	r3, #9
 8004392:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	029b      	lsls	r3, r3, #10
 80043a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80043ac:	431a      	orrs	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	00d8acbf 	.word	0x00d8acbf
 80043c4:	00e4e1c0 	.word	0x00e4e1c0
 80043c8:	00f42400 	.word	0x00f42400
 80043cc:	01067380 	.word	0x01067380
 80043d0:	011a499f 	.word	0x011a499f
 80043d4:	01312cff 	.word	0x01312cff
 80043d8:	014ca43f 	.word	0x014ca43f
 80043dc:	016e3600 	.word	0x016e3600
 80043e0:	01a6ab1f 	.word	0x01a6ab1f
 80043e4:	01e84800 	.word	0x01e84800

080043e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f043 0201 	orr.w	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f023 0201 	bic.w	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d115      	bne.n	800447a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800445a:	200a      	movs	r0, #10
 800445c:	f7fc fbb8 	bl	8000bd0 <HAL_Delay>
      ms += 10U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	330a      	adds	r3, #10
 8004464:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f001 f93f 	bl	80056ea <USB_GetMode>
 800446c:	4603      	mov	r3, r0
 800446e:	2b01      	cmp	r3, #1
 8004470:	d01e      	beq.n	80044b0 <USB_SetCurrentMode+0x84>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2bc7      	cmp	r3, #199	@ 0xc7
 8004476:	d9f0      	bls.n	800445a <USB_SetCurrentMode+0x2e>
 8004478:	e01a      	b.n	80044b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800447a:	78fb      	ldrb	r3, [r7, #3]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d115      	bne.n	80044ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800448c:	200a      	movs	r0, #10
 800448e:	f7fc fb9f 	bl	8000bd0 <HAL_Delay>
      ms += 10U;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	330a      	adds	r3, #10
 8004496:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f001 f926 	bl	80056ea <USB_GetMode>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <USB_SetCurrentMode+0x84>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80044a8:	d9f0      	bls.n	800448c <USB_SetCurrentMode+0x60>
 80044aa:	e001      	b.n	80044b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e005      	b.n	80044bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80044b4:	d101      	bne.n	80044ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044c4:	b084      	sub	sp, #16
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b086      	sub	sp, #24
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80044d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	e009      	b.n	80044f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	3340      	adds	r3, #64	@ 0x40
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	2200      	movs	r2, #0
 80044f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	3301      	adds	r3, #1
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2b0e      	cmp	r3, #14
 80044fc:	d9f2      	bls.n	80044e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004502:	2b00      	cmp	r3, #0
 8004504:	d11c      	bne.n	8004540 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004514:	f043 0302 	orr.w	r3, r3, #2
 8004518:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004536:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	639a      	str	r2, [r3, #56]	@ 0x38
 800453e:	e00b      	b.n	8004558 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004544:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004550:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800455e:	461a      	mov	r2, r3
 8004560:	2300      	movs	r3, #0
 8004562:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004564:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004568:	2b01      	cmp	r3, #1
 800456a:	d10d      	bne.n	8004588 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800456c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004574:	2100      	movs	r1, #0
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f968 	bl	800484c <USB_SetDevSpeed>
 800457c:	e008      	b.n	8004590 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800457e:	2101      	movs	r1, #1
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f963 	bl	800484c <USB_SetDevSpeed>
 8004586:	e003      	b.n	8004590 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004588:	2103      	movs	r1, #3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f95e 	bl	800484c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004590:	2110      	movs	r1, #16
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f8fa 	bl	800478c <USB_FlushTxFifo>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f924 	bl	80047f0 <USB_FlushRxFifo>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045b8:	461a      	mov	r2, r3
 80045ba:	2300      	movs	r3, #0
 80045bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c4:	461a      	mov	r2, r3
 80045c6:	2300      	movs	r3, #0
 80045c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d0:	461a      	mov	r2, r3
 80045d2:	2300      	movs	r3, #0
 80045d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	e043      	b.n	8004664 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045f2:	d118      	bne.n	8004626 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10a      	bne.n	8004610 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004606:	461a      	mov	r2, r3
 8004608:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	e013      	b.n	8004638 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800461c:	461a      	mov	r2, r3
 800461e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	e008      	b.n	8004638 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004632:	461a      	mov	r2, r3
 8004634:	2300      	movs	r3, #0
 8004636:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004644:	461a      	mov	r2, r3
 8004646:	2300      	movs	r3, #0
 8004648:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004656:	461a      	mov	r2, r3
 8004658:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800465c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3301      	adds	r3, #1
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004668:	461a      	mov	r2, r3
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4293      	cmp	r3, r2
 800466e:	d3b5      	bcc.n	80045dc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	e043      	b.n	80046fe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004688:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800468c:	d118      	bne.n	80046c0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a0:	461a      	mov	r2, r3
 80046a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	e013      	b.n	80046d2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046b6:	461a      	mov	r2, r3
 80046b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	e008      	b.n	80046d2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046cc:	461a      	mov	r2, r3
 80046ce:	2300      	movs	r3, #0
 80046d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046de:	461a      	mov	r2, r3
 80046e0:	2300      	movs	r3, #0
 80046e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046f0:	461a      	mov	r2, r3
 80046f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	3301      	adds	r3, #1
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004702:	461a      	mov	r2, r3
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4293      	cmp	r3, r2
 8004708:	d3b5      	bcc.n	8004676 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800471c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800472a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800472c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004730:	2b00      	cmp	r3, #0
 8004732:	d105      	bne.n	8004740 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	f043 0210 	orr.w	r2, r3, #16
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699a      	ldr	r2, [r3, #24]
 8004744:	4b10      	ldr	r3, [pc, #64]	@ (8004788 <USB_DevInit+0x2c4>)
 8004746:	4313      	orrs	r3, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800474c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f043 0208 	orr.w	r2, r3, #8
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004760:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004764:	2b01      	cmp	r3, #1
 8004766:	d107      	bne.n	8004778 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004770:	f043 0304 	orr.w	r3, r3, #4
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004778:	7dfb      	ldrb	r3, [r7, #23]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004784:	b004      	add	sp, #16
 8004786:	4770      	bx	lr
 8004788:	803c3800 	.word	0x803c3800

0800478c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3301      	adds	r3, #1
 800479e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047a6:	d901      	bls.n	80047ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e01b      	b.n	80047e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	daf2      	bge.n	800479a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	019b      	lsls	r3, r3, #6
 80047bc:	f043 0220 	orr.w	r2, r3, #32
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	3301      	adds	r3, #1
 80047c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047d0:	d901      	bls.n	80047d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e006      	b.n	80047e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d0f0      	beq.n	80047c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3301      	adds	r3, #1
 8004800:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004808:	d901      	bls.n	800480e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e018      	b.n	8004840 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	daf2      	bge.n	80047fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2210      	movs	r2, #16
 800481e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3301      	adds	r3, #1
 8004824:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800482c:	d901      	bls.n	8004832 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e006      	b.n	8004840 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	2b10      	cmp	r3, #16
 800483c:	d0f0      	beq.n	8004820 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800487e:	b480      	push	{r7}
 8004880:	b087      	sub	sp, #28
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 0306 	and.w	r3, r3, #6
 8004896:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d102      	bne.n	80048a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800489e:	2300      	movs	r3, #0
 80048a0:	75fb      	strb	r3, [r7, #23]
 80048a2:	e00a      	b.n	80048ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d002      	beq.n	80048b0 <USB_GetDevSpeed+0x32>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b06      	cmp	r3, #6
 80048ae:	d102      	bne.n	80048b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80048b0:	2302      	movs	r3, #2
 80048b2:	75fb      	strb	r3, [r7, #23]
 80048b4:	e001      	b.n	80048ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80048b6:	230f      	movs	r3, #15
 80048b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	785b      	ldrb	r3, [r3, #1]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d13a      	bne.n	800495a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	2101      	movs	r1, #1
 80048f6:	fa01 f303 	lsl.w	r3, r1, r3
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	68f9      	ldr	r1, [r7, #12]
 80048fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004902:	4313      	orrs	r3, r2
 8004904:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d155      	bne.n	80049c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	791b      	ldrb	r3, [r3, #4]
 8004936:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004938:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	059b      	lsls	r3, r3, #22
 800493e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004940:	4313      	orrs	r3, r2
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	440a      	add	r2, r1
 800494a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800494e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	e036      	b.n	80049c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	2101      	movs	r1, #1
 800496c:	fa01 f303 	lsl.w	r3, r1, r3
 8004970:	041b      	lsls	r3, r3, #16
 8004972:	68f9      	ldr	r1, [r7, #12]
 8004974:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004978:	4313      	orrs	r3, r2
 800497a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d11a      	bne.n	80049c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	791b      	ldrb	r3, [r3, #4]
 80049ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049ae:	430b      	orrs	r3, r1
 80049b0:	4313      	orrs	r3, r2
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	0151      	lsls	r1, r2, #5
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	440a      	add	r2, r1
 80049ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
	...

080049d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	785b      	ldrb	r3, [r3, #1]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d161      	bne.n	8004ab8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a0a:	d11f      	bne.n	8004a4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	0151      	lsls	r1, r2, #5
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	440a      	add	r2, r1
 8004a42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	43db      	mvns	r3, r3
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	2101      	movs	r1, #1
 8004a82:	fa01 f303 	lsl.w	r3, r1, r3
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	68f9      	ldr	r1, [r7, #12]
 8004a8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a90:	4013      	ands	r3, r2
 8004a92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	0159      	lsls	r1, r3, #5
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	440b      	add	r3, r1
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4b35      	ldr	r3, [pc, #212]	@ (8004b88 <USB_DeactivateEndpoint+0x1b0>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]
 8004ab6:	e060      	b.n	8004b7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004aca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ace:	d11f      	bne.n	8004b10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	0151      	lsls	r1, r2, #5
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004aee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	0151      	lsls	r1, r2, #5
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	440a      	add	r2, r1
 8004b06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	2101      	movs	r1, #1
 8004b22:	fa01 f303 	lsl.w	r3, r1, r3
 8004b26:	041b      	lsls	r3, r3, #16
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	68f9      	ldr	r1, [r7, #12]
 8004b2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b30:	4013      	ands	r3, r2
 8004b32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	2101      	movs	r1, #1
 8004b46:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4a:	041b      	lsls	r3, r3, #16
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	68f9      	ldr	r1, [r7, #12]
 8004b50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b54:	4013      	ands	r3, r2
 8004b56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	0159      	lsls	r1, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	440b      	add	r3, r1
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b72:	4619      	mov	r1, r3
 8004b74:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <USB_DeactivateEndpoint+0x1b4>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	ec337800 	.word	0xec337800
 8004b8c:	eff37800 	.word	0xeff37800

08004b90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	@ 0x28
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	785b      	ldrb	r3, [r3, #1]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	f040 817f 	bne.w	8004eb0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d132      	bne.n	8004c20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	0151      	lsls	r1, r2, #5
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	440a      	add	r2, r1
 8004bd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bd4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004bd8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004bdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	0151      	lsls	r1, r2, #5
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	440a      	add	r2, r1
 8004bf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	0151      	lsls	r1, r2, #5
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	440a      	add	r2, r1
 8004c14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c18:	0cdb      	lsrs	r3, r3, #19
 8004c1a:	04db      	lsls	r3, r3, #19
 8004c1c:	6113      	str	r3, [r2, #16]
 8004c1e:	e097      	b.n	8004d50 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	0151      	lsls	r1, r2, #5
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	440a      	add	r2, r1
 8004c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c3a:	0cdb      	lsrs	r3, r3, #19
 8004c3c:	04db      	lsls	r3, r3, #19
 8004c3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	0151      	lsls	r1, r2, #5
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	440a      	add	r2, r1
 8004c56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c5a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004c5e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004c62:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d11a      	bne.n	8004ca0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d903      	bls.n	8004c7e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	0151      	lsls	r1, r2, #5
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	440a      	add	r2, r1
 8004c94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c9c:	6113      	str	r3, [r2, #16]
 8004c9e:	e044      	b.n	8004d2a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4413      	add	r3, r2
 8004caa:	1e5a      	subs	r2, r3, #1
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	8afb      	ldrh	r3, [r7, #22]
 8004cc6:	04d9      	lsls	r1, r3, #19
 8004cc8:	4ba4      	ldr	r3, [pc, #656]	@ (8004f5c <USB_EPStartXfer+0x3cc>)
 8004cca:	400b      	ands	r3, r1
 8004ccc:	69b9      	ldr	r1, [r7, #24]
 8004cce:	0148      	lsls	r0, r1, #5
 8004cd0:	69f9      	ldr	r1, [r7, #28]
 8004cd2:	4401      	add	r1, r0
 8004cd4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	791b      	ldrb	r3, [r3, #4]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d122      	bne.n	8004d2a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	0151      	lsls	r1, r2, #5
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	440a      	add	r2, r1
 8004cfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cfe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004d02:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d10:	691a      	ldr	r2, [r3, #16]
 8004d12:	8afb      	ldrh	r3, [r7, #22]
 8004d14:	075b      	lsls	r3, r3, #29
 8004d16:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004d1a:	69b9      	ldr	r1, [r7, #24]
 8004d1c:	0148      	lsls	r0, r1, #5
 8004d1e:	69f9      	ldr	r1, [r7, #28]
 8004d20:	4401      	add	r1, r0
 8004d22:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d26:	4313      	orrs	r3, r2
 8004d28:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d40:	69b9      	ldr	r1, [r7, #24]
 8004d42:	0148      	lsls	r0, r1, #5
 8004d44:	69f9      	ldr	r1, [r7, #28]
 8004d46:	4401      	add	r1, r0
 8004d48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d14b      	bne.n	8004dee <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	791b      	ldrb	r3, [r3, #4]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d128      	bne.n	8004dcc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d110      	bne.n	8004dac <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	0151      	lsls	r1, r2, #5
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	440a      	add	r2, r1
 8004da0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004da4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e00f      	b.n	8004dcc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dca:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	0151      	lsls	r1, r2, #5
 8004dde:	69fa      	ldr	r2, [r7, #28]
 8004de0:	440a      	add	r2, r1
 8004de2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004de6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	e166      	b.n	80050bc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e08:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e0c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	791b      	ldrb	r3, [r3, #4]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d015      	beq.n	8004e42 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 814e 	beq.w	80050bc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	2101      	movs	r1, #1
 8004e32:	fa01 f303 	lsl.w	r3, r1, r3
 8004e36:	69f9      	ldr	r1, [r7, #28]
 8004e38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	634b      	str	r3, [r1, #52]	@ 0x34
 8004e40:	e13c      	b.n	80050bc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d110      	bne.n	8004e74 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	e00f      	b.n	8004e94 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	68d9      	ldr	r1, [r3, #12]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	781a      	ldrb	r2, [r3, #0]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	b298      	uxth	r0, r3
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f9b9 	bl	8005220 <USB_WritePacket>
 8004eae:	e105      	b.n	80050bc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	0151      	lsls	r1, r2, #5
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004eca:	0cdb      	lsrs	r3, r3, #19
 8004ecc:	04db      	lsls	r3, r3, #19
 8004ece:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	0151      	lsls	r1, r2, #5
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004eea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004eee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ef2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d132      	bne.n	8004f60 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f28:	69b9      	ldr	r1, [r7, #24]
 8004f2a:	0148      	lsls	r0, r1, #5
 8004f2c:	69f9      	ldr	r1, [r7, #28]
 8004f2e:	4401      	add	r1, r0
 8004f30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f34:	4313      	orrs	r3, r2
 8004f36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	0151      	lsls	r1, r2, #5
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f56:	6113      	str	r3, [r2, #16]
 8004f58:	e062      	b.n	8005020 <USB_EPStartXfer+0x490>
 8004f5a:	bf00      	nop
 8004f5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d123      	bne.n	8004fb0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f7e:	69b9      	ldr	r1, [r7, #24]
 8004f80:	0148      	lsls	r0, r1, #5
 8004f82:	69f9      	ldr	r1, [r7, #28]
 8004f84:	4401      	add	r1, r0
 8004f86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	0151      	lsls	r1, r2, #5
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	440a      	add	r2, r1
 8004fa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fa8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fac:	6113      	str	r3, [r2, #16]
 8004fae:	e037      	b.n	8005020 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	4413      	add	r3, r2
 8004fba:	1e5a      	subs	r2, r3, #1
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	8afa      	ldrh	r2, [r7, #22]
 8004fcc:	fb03 f202 	mul.w	r2, r3, r2
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	8afb      	ldrh	r3, [r7, #22]
 8004fe4:	04d9      	lsls	r1, r3, #19
 8004fe6:	4b38      	ldr	r3, [pc, #224]	@ (80050c8 <USB_EPStartXfer+0x538>)
 8004fe8:	400b      	ands	r3, r1
 8004fea:	69b9      	ldr	r1, [r7, #24]
 8004fec:	0148      	lsls	r0, r1, #5
 8004fee:	69f9      	ldr	r1, [r7, #28]
 8004ff0:	4401      	add	r1, r0
 8004ff2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005010:	69b9      	ldr	r1, [r7, #24]
 8005012:	0148      	lsls	r0, r1, #5
 8005014:	69f9      	ldr	r1, [r7, #28]
 8005016:	4401      	add	r1, r0
 8005018:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800501c:	4313      	orrs	r3, r2
 800501e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005020:	79fb      	ldrb	r3, [r7, #7]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d10d      	bne.n	8005042 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d009      	beq.n	8005042 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	68d9      	ldr	r1, [r3, #12]
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800503e:	460a      	mov	r2, r1
 8005040:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	791b      	ldrb	r3, [r3, #4]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d128      	bne.n	800509c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005056:	2b00      	cmp	r3, #0
 8005058:	d110      	bne.n	800507c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	440a      	add	r2, r1
 8005070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005074:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	e00f      	b.n	800509c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	440a      	add	r2, r1
 8005092:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800509a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	0151      	lsls	r1, r2, #5
 80050ae:	69fa      	ldr	r2, [r7, #28]
 80050b0:	440a      	add	r2, r1
 80050b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80050ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	1ff80000 	.word	0x1ff80000

080050cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d14a      	bne.n	8005180 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005102:	f040 8086 	bne.w	8005212 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	7812      	ldrb	r2, [r2, #0]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005124:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005128:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	7812      	ldrb	r2, [r2, #0]
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	440a      	add	r2, r1
 8005144:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005148:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800514c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3301      	adds	r3, #1
 8005152:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f242 7210 	movw	r2, #10000	@ 0x2710
 800515a:	4293      	cmp	r3, r2
 800515c:	d902      	bls.n	8005164 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	75fb      	strb	r3, [r7, #23]
          break;
 8005162:	e056      	b.n	8005212 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005178:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800517c:	d0e7      	beq.n	800514e <USB_EPStopXfer+0x82>
 800517e:	e048      	b.n	8005212 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005194:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005198:	d13b      	bne.n	8005212 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	7812      	ldrb	r2, [r2, #0]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	7812      	ldrb	r2, [r2, #0]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3301      	adds	r3, #1
 80051e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d902      	bls.n	80051f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	75fb      	strb	r3, [r7, #23]
          break;
 80051f6:	e00c      	b.n	8005212 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800520c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005210:	d0e7      	beq.n	80051e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005212:	7dfb      	ldrb	r3, [r7, #23]
}
 8005214:	4618      	mov	r0, r3
 8005216:	371c      	adds	r7, #28
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005220:	b480      	push	{r7}
 8005222:	b089      	sub	sp, #36	@ 0x24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	4611      	mov	r1, r2
 800522c:	461a      	mov	r2, r3
 800522e:	460b      	mov	r3, r1
 8005230:	71fb      	strb	r3, [r7, #7]
 8005232:	4613      	mov	r3, r2
 8005234:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800523e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005242:	2b00      	cmp	r3, #0
 8005244:	d123      	bne.n	800528e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005246:	88bb      	ldrh	r3, [r7, #4]
 8005248:	3303      	adds	r3, #3
 800524a:	089b      	lsrs	r3, r3, #2
 800524c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800524e:	2300      	movs	r3, #0
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	e018      	b.n	8005286 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	031a      	lsls	r2, r3, #12
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	4413      	add	r3, r2
 800525c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005260:	461a      	mov	r2, r3
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	3301      	adds	r3, #1
 800526c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	3301      	adds	r3, #1
 8005272:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	3301      	adds	r3, #1
 8005278:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	3301      	adds	r3, #1
 800527e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	3301      	adds	r3, #1
 8005284:	61bb      	str	r3, [r7, #24]
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	429a      	cmp	r2, r3
 800528c:	d3e2      	bcc.n	8005254 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3724      	adds	r7, #36	@ 0x24
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800529c:	b480      	push	{r7}
 800529e:	b08b      	sub	sp, #44	@ 0x2c
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	4613      	mov	r3, r2
 80052a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	089b      	lsrs	r3, r3, #2
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052c2:	2300      	movs	r3, #0
 80052c4:	623b      	str	r3, [r7, #32]
 80052c6:	e014      	b.n	80052f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d6:	3301      	adds	r3, #1
 80052d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	3301      	adds	r3, #1
 80052de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	3301      	adds	r3, #1
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	3301      	adds	r3, #1
 80052ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	3301      	adds	r3, #1
 80052f0:	623b      	str	r3, [r7, #32]
 80052f2:	6a3a      	ldr	r2, [r7, #32]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d3e6      	bcc.n	80052c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052fa:	8bfb      	ldrh	r3, [r7, #30]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01e      	beq.n	800533e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800530a:	461a      	mov	r2, r3
 800530c:	f107 0310 	add.w	r3, r7, #16
 8005310:	6812      	ldr	r2, [r2, #0]
 8005312:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	b2db      	uxtb	r3, r3
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
 8005320:	b2da      	uxtb	r2, r3
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	701a      	strb	r2, [r3, #0]
      i++;
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	3301      	adds	r3, #1
 800532a:	623b      	str	r3, [r7, #32]
      pDest++;
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	3301      	adds	r3, #1
 8005330:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005332:	8bfb      	ldrh	r3, [r7, #30]
 8005334:	3b01      	subs	r3, #1
 8005336:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005338:	8bfb      	ldrh	r3, [r7, #30]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1ea      	bne.n	8005314 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005340:	4618      	mov	r0, r3
 8005342:	372c      	adds	r7, #44	@ 0x2c
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	785b      	ldrb	r3, [r3, #1]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d12c      	bne.n	80053c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	db12      	blt.n	80053a0 <USB_EPSetStall+0x54>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00f      	beq.n	80053a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	0151      	lsls	r1, r2, #5
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	440a      	add	r2, r1
 8005396:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800539a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800539e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	0151      	lsls	r1, r2, #5
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	440a      	add	r2, r1
 80053b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	e02b      	b.n	800541a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	db12      	blt.n	80053fa <USB_EPSetStall+0xae>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00f      	beq.n	80053fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	0151      	lsls	r1, r2, #5
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	440a      	add	r2, r1
 80053f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	0151      	lsls	r1, r2, #5
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	440a      	add	r2, r1
 8005410:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005414:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005418:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	785b      	ldrb	r3, [r3, #1]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d128      	bne.n	8005496 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	0151      	lsls	r1, r2, #5
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	440a      	add	r2, r1
 800545a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800545e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005462:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	791b      	ldrb	r3, [r3, #4]
 8005468:	2b03      	cmp	r3, #3
 800546a:	d003      	beq.n	8005474 <USB_EPClearStall+0x4c>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	791b      	ldrb	r3, [r3, #4]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d138      	bne.n	80054e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800548e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	e027      	b.n	80054e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	0151      	lsls	r1, r2, #5
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	440a      	add	r2, r1
 80054ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	791b      	ldrb	r3, [r3, #4]
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d003      	beq.n	80054c6 <USB_EPClearStall+0x9e>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	791b      	ldrb	r3, [r3, #4]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d10f      	bne.n	80054e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	0151      	lsls	r1, r2, #5
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	440a      	add	r2, r1
 80054dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005512:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005516:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005528:	68f9      	ldr	r1, [r7, #12]
 800552a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800552e:	4313      	orrs	r3, r2
 8005530:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800555a:	f023 0303 	bic.w	r3, r3, #3
 800555e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800556e:	f023 0302 	bic.w	r3, r3, #2
 8005572:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800559c:	f023 0303 	bic.w	r3, r3, #3
 80055a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055b0:	f043 0302 	orr.w	r3, r3, #2
 80055b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4013      	ands	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055dc:	68fb      	ldr	r3, [r7, #12]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	4013      	ands	r3, r2
 800560c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	0c1b      	lsrs	r3, r3, #16
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	4013      	ands	r3, r2
 8005640:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	b29b      	uxth	r3, r3
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	460b      	mov	r3, r1
 800565c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005662:	78fb      	ldrb	r3, [r7, #3]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	4013      	ands	r3, r2
 800567e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005680:	68bb      	ldr	r3, [r7, #8]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800568e:	b480      	push	{r7}
 8005690:	b087      	sub	sp, #28
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	460b      	mov	r3, r1
 8005698:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80056b2:	78fb      	ldrb	r3, [r7, #3]
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	fa22 f303 	lsr.w	r3, r2, r3
 80056be:	01db      	lsls	r3, r3, #7
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80056c8:	78fb      	ldrb	r3, [r7, #3]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4013      	ands	r3, r2
 80056da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056dc:	68bb      	ldr	r3, [r7, #8]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	f003 0301 	and.w	r3, r3, #1
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005706:	b480      	push	{r7}
 8005708:	b085      	sub	sp, #20
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005720:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005724:	f023 0307 	bic.w	r3, r3, #7
 8005728:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800573c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	460b      	mov	r3, r1
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	333c      	adds	r3, #60	@ 0x3c
 8005762:	3304      	adds	r3, #4
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4a26      	ldr	r2, [pc, #152]	@ (8005804 <USB_EP0_OutStart+0xb8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d90a      	bls.n	8005786 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800577c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005780:	d101      	bne.n	8005786 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	e037      	b.n	80057f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578c:	461a      	mov	r2, r3
 800578e:	2300      	movs	r3, #0
 8005790:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057b4:	f043 0318 	orr.w	r3, r3, #24
 80057b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057c8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80057cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80057ce:	7afb      	ldrb	r3, [r7, #11]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d10f      	bne.n	80057f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057da:	461a      	mov	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057ee:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80057f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	4f54300a 	.word	0x4f54300a

08005808 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3301      	adds	r3, #1
 8005818:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005820:	d901      	bls.n	8005826 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e01b      	b.n	800585e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	daf2      	bge.n	8005814 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f043 0201 	orr.w	r2, r3, #1
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3301      	adds	r3, #1
 8005842:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800584a:	d901      	bls.n	8005850 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e006      	b.n	800585e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b01      	cmp	r3, #1
 800585a:	d0f0      	beq.n	800583e <USB_CoreReset+0x36>

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005878:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800587c:	f002 fc38 	bl	80080f0 <USBD_static_malloc>
 8005880:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	32b0      	adds	r2, #176	@ 0xb0
 8005892:	2100      	movs	r1, #0
 8005894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005898:	2302      	movs	r3, #2
 800589a:	e0d4      	b.n	8005a46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800589c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80058a0:	2100      	movs	r1, #0
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f002 fc68 	bl	8008178 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	32b0      	adds	r2, #176	@ 0xb0
 80058b2:	68f9      	ldr	r1, [r7, #12]
 80058b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	32b0      	adds	r2, #176	@ 0xb0
 80058c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	7c1b      	ldrb	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d138      	bne.n	8005946 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80058d4:	4b5e      	ldr	r3, [pc, #376]	@ (8005a50 <USBD_CDC_Init+0x1e4>)
 80058d6:	7819      	ldrb	r1, [r3, #0]
 80058d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058dc:	2202      	movs	r2, #2
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f002 fae3 	bl	8007eaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80058e4:	4b5a      	ldr	r3, [pc, #360]	@ (8005a50 <USBD_CDC_Init+0x1e4>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	f003 020f 	and.w	r2, r3, #15
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	3324      	adds	r3, #36	@ 0x24
 80058fa:	2201      	movs	r2, #1
 80058fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80058fe:	4b55      	ldr	r3, [pc, #340]	@ (8005a54 <USBD_CDC_Init+0x1e8>)
 8005900:	7819      	ldrb	r1, [r3, #0]
 8005902:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005906:	2202      	movs	r2, #2
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f002 face 	bl	8007eaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800590e:	4b51      	ldr	r3, [pc, #324]	@ (8005a54 <USBD_CDC_Init+0x1e8>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	f003 020f 	and.w	r2, r3, #15
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005926:	2201      	movs	r2, #1
 8005928:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800592a:	4b4b      	ldr	r3, [pc, #300]	@ (8005a58 <USBD_CDC_Init+0x1ec>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	f003 020f 	and.w	r2, r3, #15
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	440b      	add	r3, r1
 800593e:	3326      	adds	r3, #38	@ 0x26
 8005940:	2210      	movs	r2, #16
 8005942:	801a      	strh	r2, [r3, #0]
 8005944:	e035      	b.n	80059b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005946:	4b42      	ldr	r3, [pc, #264]	@ (8005a50 <USBD_CDC_Init+0x1e4>)
 8005948:	7819      	ldrb	r1, [r3, #0]
 800594a:	2340      	movs	r3, #64	@ 0x40
 800594c:	2202      	movs	r2, #2
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f002 faab 	bl	8007eaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005954:	4b3e      	ldr	r3, [pc, #248]	@ (8005a50 <USBD_CDC_Init+0x1e4>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	f003 020f 	and.w	r2, r3, #15
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	440b      	add	r3, r1
 8005968:	3324      	adds	r3, #36	@ 0x24
 800596a:	2201      	movs	r2, #1
 800596c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800596e:	4b39      	ldr	r3, [pc, #228]	@ (8005a54 <USBD_CDC_Init+0x1e8>)
 8005970:	7819      	ldrb	r1, [r3, #0]
 8005972:	2340      	movs	r3, #64	@ 0x40
 8005974:	2202      	movs	r2, #2
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f002 fa97 	bl	8007eaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800597c:	4b35      	ldr	r3, [pc, #212]	@ (8005a54 <USBD_CDC_Init+0x1e8>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	f003 020f 	and.w	r2, r3, #15
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	440b      	add	r3, r1
 8005990:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005994:	2201      	movs	r2, #1
 8005996:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005998:	4b2f      	ldr	r3, [pc, #188]	@ (8005a58 <USBD_CDC_Init+0x1ec>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	f003 020f 	and.w	r2, r3, #15
 80059a0:	6879      	ldr	r1, [r7, #4]
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	440b      	add	r3, r1
 80059ac:	3326      	adds	r3, #38	@ 0x26
 80059ae:	2210      	movs	r2, #16
 80059b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059b2:	4b29      	ldr	r3, [pc, #164]	@ (8005a58 <USBD_CDC_Init+0x1ec>)
 80059b4:	7819      	ldrb	r1, [r3, #0]
 80059b6:	2308      	movs	r3, #8
 80059b8:	2203      	movs	r2, #3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f002 fa75 	bl	8007eaa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80059c0:	4b25      	ldr	r3, [pc, #148]	@ (8005a58 <USBD_CDC_Init+0x1ec>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	f003 020f 	and.w	r2, r3, #15
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	440b      	add	r3, r1
 80059d4:	3324      	adds	r3, #36	@ 0x24
 80059d6:	2201      	movs	r2, #1
 80059d8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	33b0      	adds	r3, #176	@ 0xb0
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005a10:	2302      	movs	r3, #2
 8005a12:	e018      	b.n	8005a46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	7c1b      	ldrb	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a54 <USBD_CDC_Init+0x1e8>)
 8005a1e:	7819      	ldrb	r1, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f002 fb2c 	bl	8008088 <USBD_LL_PrepareReceive>
 8005a30:	e008      	b.n	8005a44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a32:	4b08      	ldr	r3, [pc, #32]	@ (8005a54 <USBD_CDC_Init+0x1e8>)
 8005a34:	7819      	ldrb	r1, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a3c:	2340      	movs	r3, #64	@ 0x40
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f002 fb22 	bl	8008088 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000093 	.word	0x20000093
 8005a54:	20000094 	.word	0x20000094
 8005a58:	20000095 	.word	0x20000095

08005a5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005a68:	4b3a      	ldr	r3, [pc, #232]	@ (8005b54 <USBD_CDC_DeInit+0xf8>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f002 fa41 	bl	8007ef6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005a74:	4b37      	ldr	r3, [pc, #220]	@ (8005b54 <USBD_CDC_DeInit+0xf8>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	f003 020f 	and.w	r2, r3, #15
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	440b      	add	r3, r1
 8005a88:	3324      	adds	r3, #36	@ 0x24
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005a8e:	4b32      	ldr	r3, [pc, #200]	@ (8005b58 <USBD_CDC_DeInit+0xfc>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f002 fa2e 	bl	8007ef6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b58 <USBD_CDC_DeInit+0xfc>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	f003 020f 	and.w	r2, r3, #15
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005ab6:	4b29      	ldr	r3, [pc, #164]	@ (8005b5c <USBD_CDC_DeInit+0x100>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	4619      	mov	r1, r3
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f002 fa1a 	bl	8007ef6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005ac2:	4b26      	ldr	r3, [pc, #152]	@ (8005b5c <USBD_CDC_DeInit+0x100>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	f003 020f 	and.w	r2, r3, #15
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	3324      	adds	r3, #36	@ 0x24
 8005ad8:	2200      	movs	r2, #0
 8005ada:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005adc:	4b1f      	ldr	r3, [pc, #124]	@ (8005b5c <USBD_CDC_DeInit+0x100>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	f003 020f 	and.w	r2, r3, #15
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	440b      	add	r3, r1
 8005af0:	3326      	adds	r3, #38	@ 0x26
 8005af2:	2200      	movs	r2, #0
 8005af4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	32b0      	adds	r2, #176	@ 0xb0
 8005b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01f      	beq.n	8005b48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	33b0      	adds	r3, #176	@ 0xb0
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	32b0      	adds	r2, #176	@ 0xb0
 8005b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f002 faee 	bl	800810c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	32b0      	adds	r2, #176	@ 0xb0
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000093 	.word	0x20000093
 8005b58:	20000094 	.word	0x20000094
 8005b5c:	20000095 	.word	0x20000095

08005b60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	32b0      	adds	r2, #176	@ 0xb0
 8005b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e0bf      	b.n	8005d10 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d050      	beq.n	8005c3e <USBD_CDC_Setup+0xde>
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	f040 80af 	bne.w	8005d00 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	88db      	ldrh	r3, [r3, #6]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d03a      	beq.n	8005c20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	b25b      	sxtb	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	da1b      	bge.n	8005bec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	33b0      	adds	r3, #176	@ 0xb0
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005bca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	88d2      	ldrh	r2, [r2, #6]
 8005bd0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	88db      	ldrh	r3, [r3, #6]
 8005bd6:	2b07      	cmp	r3, #7
 8005bd8:	bf28      	it	cs
 8005bda:	2307      	movcs	r3, #7
 8005bdc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	89fa      	ldrh	r2, [r7, #14]
 8005be2:	4619      	mov	r1, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f001 fd53 	bl	8007690 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005bea:	e090      	b.n	8005d0e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	785a      	ldrb	r2, [r3, #1]
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	88db      	ldrh	r3, [r3, #6]
 8005bfa:	2b3f      	cmp	r3, #63	@ 0x3f
 8005bfc:	d803      	bhi.n	8005c06 <USBD_CDC_Setup+0xa6>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	88db      	ldrh	r3, [r3, #6]
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	e000      	b.n	8005c08 <USBD_CDC_Setup+0xa8>
 8005c06:	2240      	movs	r2, #64	@ 0x40
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005c0e:	6939      	ldr	r1, [r7, #16]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005c16:	461a      	mov	r2, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 fd65 	bl	80076e8 <USBD_CtlPrepareRx>
      break;
 8005c1e:	e076      	b.n	8005d0e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	33b0      	adds	r3, #176	@ 0xb0
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	7850      	ldrb	r0, [r2, #1]
 8005c36:	2200      	movs	r2, #0
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	4798      	blx	r3
      break;
 8005c3c:	e067      	b.n	8005d0e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	785b      	ldrb	r3, [r3, #1]
 8005c42:	2b0b      	cmp	r3, #11
 8005c44:	d851      	bhi.n	8005cea <USBD_CDC_Setup+0x18a>
 8005c46:	a201      	add	r2, pc, #4	@ (adr r2, 8005c4c <USBD_CDC_Setup+0xec>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005c7d 	.word	0x08005c7d
 8005c50:	08005cf9 	.word	0x08005cf9
 8005c54:	08005ceb 	.word	0x08005ceb
 8005c58:	08005ceb 	.word	0x08005ceb
 8005c5c:	08005ceb 	.word	0x08005ceb
 8005c60:	08005ceb 	.word	0x08005ceb
 8005c64:	08005ceb 	.word	0x08005ceb
 8005c68:	08005ceb 	.word	0x08005ceb
 8005c6c:	08005ceb 	.word	0x08005ceb
 8005c70:	08005ceb 	.word	0x08005ceb
 8005c74:	08005ca7 	.word	0x08005ca7
 8005c78:	08005cd1 	.word	0x08005cd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d107      	bne.n	8005c98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c88:	f107 030a 	add.w	r3, r7, #10
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f001 fcfd 	bl	8007690 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c96:	e032      	b.n	8005cfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 fc7b 	bl	8007596 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	75fb      	strb	r3, [r7, #23]
          break;
 8005ca4:	e02b      	b.n	8005cfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d107      	bne.n	8005cc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005cb2:	f107 030d 	add.w	r3, r7, #13
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	4619      	mov	r1, r3
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f001 fce8 	bl	8007690 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cc0:	e01d      	b.n	8005cfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005cc2:	6839      	ldr	r1, [r7, #0]
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f001 fc66 	bl	8007596 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8005cce:	e016      	b.n	8005cfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d00f      	beq.n	8005cfc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f001 fc59 	bl	8007596 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ce8:	e008      	b.n	8005cfc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 fc52 	bl	8007596 <USBD_CtlError>
          ret = USBD_FAIL;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8005cf6:	e002      	b.n	8005cfe <USBD_CDC_Setup+0x19e>
          break;
 8005cf8:	bf00      	nop
 8005cfa:	e008      	b.n	8005d0e <USBD_CDC_Setup+0x1ae>
          break;
 8005cfc:	bf00      	nop
      }
      break;
 8005cfe:	e006      	b.n	8005d0e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 fc47 	bl	8007596 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	460b      	mov	r3, r1
 8005d22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005d2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	32b0      	adds	r2, #176	@ 0xb0
 8005d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e065      	b.n	8005e0e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	32b0      	adds	r2, #176	@ 0xb0
 8005d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d52:	78fb      	ldrb	r3, [r7, #3]
 8005d54:	f003 020f 	and.w	r2, r3, #15
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	3318      	adds	r3, #24
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d02f      	beq.n	8005dcc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	f003 020f 	and.w	r2, r3, #15
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	3318      	adds	r3, #24
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	78fb      	ldrb	r3, [r7, #3]
 8005d84:	f003 010f 	and.w	r1, r3, #15
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	440b      	add	r3, r1
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4403      	add	r3, r0
 8005d94:	331c      	adds	r3, #28
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d9c:	fb01 f303 	mul.w	r3, r1, r3
 8005da0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d112      	bne.n	8005dcc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005da6:	78fb      	ldrb	r3, [r7, #3]
 8005da8:	f003 020f 	and.w	r2, r3, #15
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	3318      	adds	r3, #24
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005dbe:	78f9      	ldrb	r1, [r7, #3]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f002 f93e 	bl	8008046 <USBD_LL_Transmit>
 8005dca:	e01f      	b.n	8005e0c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	33b0      	adds	r3, #176	@ 0xb0
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d010      	beq.n	8005e0c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	33b0      	adds	r3, #176	@ 0xb0
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005e08:	78fa      	ldrb	r2, [r7, #3]
 8005e0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	32b0      	adds	r2, #176	@ 0xb0
 8005e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	32b0      	adds	r2, #176	@ 0xb0
 8005e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e01a      	b.n	8005e7e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f002 f93c 	bl	80080ca <USBD_LL_GetRxDataSize>
 8005e52:	4602      	mov	r2, r0
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	33b0      	adds	r3, #176	@ 0xb0
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005e78:	4611      	mov	r1, r2
 8005e7a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	32b0      	adds	r2, #176	@ 0xb0
 8005e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e024      	b.n	8005ef2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	33b0      	adds	r3, #176	@ 0xb0
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d019      	beq.n	8005ef0 <USBD_CDC_EP0_RxReady+0x6a>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005ec2:	2bff      	cmp	r3, #255	@ 0xff
 8005ec4:	d014      	beq.n	8005ef0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	33b0      	adds	r3, #176	@ 0xb0
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005ede:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ee6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	22ff      	movs	r2, #255	@ 0xff
 8005eec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f04:	2182      	movs	r1, #130	@ 0x82
 8005f06:	4818      	ldr	r0, [pc, #96]	@ (8005f68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f08:	f000 fd0f 	bl	800692a <USBD_GetEpDesc>
 8005f0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f0e:	2101      	movs	r1, #1
 8005f10:	4815      	ldr	r0, [pc, #84]	@ (8005f68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f12:	f000 fd0a 	bl	800692a <USBD_GetEpDesc>
 8005f16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f18:	2181      	movs	r1, #129	@ 0x81
 8005f1a:	4813      	ldr	r0, [pc, #76]	@ (8005f68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f1c:	f000 fd05 	bl	800692a <USBD_GetEpDesc>
 8005f20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2210      	movs	r2, #16
 8005f2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d006      	beq.n	8005f42 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f3c:	711a      	strb	r2, [r3, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d006      	beq.n	8005f56 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f50:	711a      	strb	r2, [r3, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2243      	movs	r2, #67	@ 0x43
 8005f5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f5c:	4b02      	ldr	r3, [pc, #8]	@ (8005f68 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000050 	.word	0x20000050

08005f6c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f74:	2182      	movs	r1, #130	@ 0x82
 8005f76:	4818      	ldr	r0, [pc, #96]	@ (8005fd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f78:	f000 fcd7 	bl	800692a <USBD_GetEpDesc>
 8005f7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f7e:	2101      	movs	r1, #1
 8005f80:	4815      	ldr	r0, [pc, #84]	@ (8005fd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f82:	f000 fcd2 	bl	800692a <USBD_GetEpDesc>
 8005f86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f88:	2181      	movs	r1, #129	@ 0x81
 8005f8a:	4813      	ldr	r0, [pc, #76]	@ (8005fd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f8c:	f000 fccd 	bl	800692a <USBD_GetEpDesc>
 8005f90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2210      	movs	r2, #16
 8005f9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d006      	beq.n	8005fb2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	711a      	strb	r2, [r3, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f042 0202 	orr.w	r2, r2, #2
 8005fb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d006      	beq.n	8005fc6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	711a      	strb	r2, [r3, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f042 0202 	orr.w	r2, r2, #2
 8005fc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2243      	movs	r2, #67	@ 0x43
 8005fca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005fcc:	4b02      	ldr	r3, [pc, #8]	@ (8005fd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000050 	.word	0x20000050

08005fdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005fe4:	2182      	movs	r1, #130	@ 0x82
 8005fe6:	4818      	ldr	r0, [pc, #96]	@ (8006048 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005fe8:	f000 fc9f 	bl	800692a <USBD_GetEpDesc>
 8005fec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fee:	2101      	movs	r1, #1
 8005ff0:	4815      	ldr	r0, [pc, #84]	@ (8006048 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ff2:	f000 fc9a 	bl	800692a <USBD_GetEpDesc>
 8005ff6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ff8:	2181      	movs	r1, #129	@ 0x81
 8005ffa:	4813      	ldr	r0, [pc, #76]	@ (8006048 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ffc:	f000 fc95 	bl	800692a <USBD_GetEpDesc>
 8006000:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2210      	movs	r2, #16
 800600c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d006      	beq.n	8006022 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2200      	movs	r2, #0
 8006018:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800601c:	711a      	strb	r2, [r3, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d006      	beq.n	8006036 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006030:	711a      	strb	r2, [r3, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2243      	movs	r2, #67	@ 0x43
 800603a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800603c:	4b02      	ldr	r3, [pc, #8]	@ (8006048 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000050 	.word	0x20000050

0800604c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	220a      	movs	r2, #10
 8006058:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800605a:	4b03      	ldr	r3, [pc, #12]	@ (8006068 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	2000000c 	.word	0x2000000c

0800606c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800607c:	2303      	movs	r3, #3
 800607e:	e009      	b.n	8006094 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	33b0      	adds	r3, #176	@ 0xb0
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	32b0      	adds	r2, #176	@ 0xb0
 80060b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e008      	b.n	80060d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	371c      	adds	r7, #28
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	32b0      	adds	r2, #176	@ 0xb0
 80060f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006104:	2303      	movs	r3, #3
 8006106:	e004      	b.n	8006112 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
	...

08006120 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	32b0      	adds	r2, #176	@ 0xb0
 8006132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006136:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	32b0      	adds	r2, #176	@ 0xb0
 8006142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800614a:	2303      	movs	r3, #3
 800614c:	e018      	b.n	8006180 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	7c1b      	ldrb	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10a      	bne.n	800616c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006156:	4b0c      	ldr	r3, [pc, #48]	@ (8006188 <USBD_CDC_ReceivePacket+0x68>)
 8006158:	7819      	ldrb	r1, [r3, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006160:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 ff8f 	bl	8008088 <USBD_LL_PrepareReceive>
 800616a:	e008      	b.n	800617e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800616c:	4b06      	ldr	r3, [pc, #24]	@ (8006188 <USBD_CDC_ReceivePacket+0x68>)
 800616e:	7819      	ldrb	r1, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006176:	2340      	movs	r3, #64	@ 0x40
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f001 ff85 	bl	8008088 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	20000094 	.word	0x20000094

0800618c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	4613      	mov	r3, r2
 8006198:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e01f      	b.n	80061e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	79fa      	ldrb	r2, [r7, #7]
 80061d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f001 fdff 	bl	8007ddc <USBD_LL_Init>
 80061de:	4603      	mov	r3, r0
 80061e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006200:	2303      	movs	r3, #3
 8006202:	e025      	b.n	8006250 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	32ae      	adds	r2, #174	@ 0xae
 8006216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00f      	beq.n	8006240 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	32ae      	adds	r2, #174	@ 0xae
 800622a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006230:	f107 020e 	add.w	r2, r7, #14
 8006234:	4610      	mov	r0, r2
 8006236:	4798      	blx	r3
 8006238:	4602      	mov	r2, r0
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 fe07 	bl	8007e74 <USBD_LL_Start>
 8006266:	4603      	mov	r3, r0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006278:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800627a:	4618      	mov	r0, r3
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	460b      	mov	r3, r1
 8006290:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800629c:	2b00      	cmp	r3, #0
 800629e:	d009      	beq.n	80062b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	78fa      	ldrb	r2, [r7, #3]
 80062aa:	4611      	mov	r1, r2
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	4798      	blx	r3
 80062b0:	4603      	mov	r3, r0
 80062b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	460b      	mov	r3, r1
 80062c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	78fa      	ldrb	r2, [r7, #3]
 80062d8:	4611      	mov	r1, r2
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	4798      	blx	r3
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80062e4:	2303      	movs	r3, #3
 80062e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	4618      	mov	r0, r3
 8006306:	f001 f90c 	bl	8007522 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006318:	461a      	mov	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006326:	f003 031f 	and.w	r3, r3, #31
 800632a:	2b02      	cmp	r3, #2
 800632c:	d01a      	beq.n	8006364 <USBD_LL_SetupStage+0x72>
 800632e:	2b02      	cmp	r3, #2
 8006330:	d822      	bhi.n	8006378 <USBD_LL_SetupStage+0x86>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <USBD_LL_SetupStage+0x4a>
 8006336:	2b01      	cmp	r3, #1
 8006338:	d00a      	beq.n	8006350 <USBD_LL_SetupStage+0x5e>
 800633a:	e01d      	b.n	8006378 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fb63 	bl	8006a10 <USBD_StdDevReq>
 800634a:	4603      	mov	r3, r0
 800634c:	73fb      	strb	r3, [r7, #15]
      break;
 800634e:	e020      	b.n	8006392 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fbcb 	bl	8006af4 <USBD_StdItfReq>
 800635e:	4603      	mov	r3, r0
 8006360:	73fb      	strb	r3, [r7, #15]
      break;
 8006362:	e016      	b.n	8006392 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fc2d 	bl	8006bcc <USBD_StdEPReq>
 8006372:	4603      	mov	r3, r0
 8006374:	73fb      	strb	r3, [r7, #15]
      break;
 8006376:	e00c      	b.n	8006392 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800637e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006382:	b2db      	uxtb	r3, r3
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f001 fdd4 	bl	8007f34 <USBD_LL_StallEP>
 800638c:	4603      	mov	r3, r0
 800638e:	73fb      	strb	r3, [r7, #15]
      break;
 8006390:	bf00      	nop
  }

  return ret;
 8006392:	7bfb      	ldrb	r3, [r7, #15]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	460b      	mov	r3, r1
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80063ae:	7afb      	ldrb	r3, [r7, #11]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d16e      	bne.n	8006492 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80063ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	f040 8098 	bne.w	80064f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d913      	bls.n	80063fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	1ad2      	subs	r2, r2, r3
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	4293      	cmp	r3, r2
 80063ec:	bf28      	it	cs
 80063ee:	4613      	movcs	r3, r2
 80063f0:	461a      	mov	r2, r3
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f001 f994 	bl	8007722 <USBD_CtlContinueRx>
 80063fa:	e07d      	b.n	80064f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	2b02      	cmp	r3, #2
 8006408:	d014      	beq.n	8006434 <USBD_LL_DataOutStage+0x98>
 800640a:	2b02      	cmp	r3, #2
 800640c:	d81d      	bhi.n	800644a <USBD_LL_DataOutStage+0xae>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <USBD_LL_DataOutStage+0x7c>
 8006412:	2b01      	cmp	r3, #1
 8006414:	d003      	beq.n	800641e <USBD_LL_DataOutStage+0x82>
 8006416:	e018      	b.n	800644a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006418:	2300      	movs	r3, #0
 800641a:	75bb      	strb	r3, [r7, #22]
            break;
 800641c:	e018      	b.n	8006450 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006424:	b2db      	uxtb	r3, r3
 8006426:	4619      	mov	r1, r3
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 fa64 	bl	80068f6 <USBD_CoreFindIF>
 800642e:	4603      	mov	r3, r0
 8006430:	75bb      	strb	r3, [r7, #22]
            break;
 8006432:	e00d      	b.n	8006450 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800643a:	b2db      	uxtb	r3, r3
 800643c:	4619      	mov	r1, r3
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 fa66 	bl	8006910 <USBD_CoreFindEP>
 8006444:	4603      	mov	r3, r0
 8006446:	75bb      	strb	r3, [r7, #22]
            break;
 8006448:	e002      	b.n	8006450 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	75bb      	strb	r3, [r7, #22]
            break;
 800644e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006450:	7dbb      	ldrb	r3, [r7, #22]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d119      	bne.n	800648a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b03      	cmp	r3, #3
 8006460:	d113      	bne.n	800648a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006462:	7dba      	ldrb	r2, [r7, #22]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	32ae      	adds	r2, #174	@ 0xae
 8006468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00b      	beq.n	800648a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006472:	7dba      	ldrb	r2, [r7, #22]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800647a:	7dba      	ldrb	r2, [r7, #22]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	32ae      	adds	r2, #174	@ 0xae
 8006480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f001 f95a 	bl	8007744 <USBD_CtlSendStatus>
 8006490:	e032      	b.n	80064f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006492:	7afb      	ldrb	r3, [r7, #11]
 8006494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006498:	b2db      	uxtb	r3, r3
 800649a:	4619      	mov	r1, r3
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 fa37 	bl	8006910 <USBD_CoreFindEP>
 80064a2:	4603      	mov	r3, r0
 80064a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064a6:	7dbb      	ldrb	r3, [r7, #22]
 80064a8:	2bff      	cmp	r3, #255	@ 0xff
 80064aa:	d025      	beq.n	80064f8 <USBD_LL_DataOutStage+0x15c>
 80064ac:	7dbb      	ldrb	r3, [r7, #22]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d122      	bne.n	80064f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d117      	bne.n	80064ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80064be:	7dba      	ldrb	r2, [r7, #22]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	32ae      	adds	r2, #174	@ 0xae
 80064c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00f      	beq.n	80064ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80064ce:	7dba      	ldrb	r2, [r7, #22]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80064d6:	7dba      	ldrb	r2, [r7, #22]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	32ae      	adds	r2, #174	@ 0xae
 80064dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	7afa      	ldrb	r2, [r7, #11]
 80064e4:	4611      	mov	r1, r2
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	4798      	blx	r3
 80064ea:	4603      	mov	r3, r0
 80064ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
 80064f6:	e000      	b.n	80064fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b086      	sub	sp, #24
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	460b      	mov	r3, r1
 800650c:	607a      	str	r2, [r7, #4]
 800650e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006510:	7afb      	ldrb	r3, [r7, #11]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d16f      	bne.n	80065f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3314      	adds	r3, #20
 800651a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006522:	2b02      	cmp	r3, #2
 8006524:	d15a      	bne.n	80065dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	689a      	ldr	r2, [r3, #8]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	429a      	cmp	r2, r3
 8006530:	d914      	bls.n	800655c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	1ad2      	subs	r2, r2, r3
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	461a      	mov	r2, r3
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f001 f8bc 	bl	80076c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800654e:	2300      	movs	r3, #0
 8006550:	2200      	movs	r2, #0
 8006552:	2100      	movs	r1, #0
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f001 fd97 	bl	8008088 <USBD_LL_PrepareReceive>
 800655a:	e03f      	b.n	80065dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	429a      	cmp	r2, r3
 8006566:	d11c      	bne.n	80065a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006570:	429a      	cmp	r2, r3
 8006572:	d316      	bcc.n	80065a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800657e:	429a      	cmp	r2, r3
 8006580:	d20f      	bcs.n	80065a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006582:	2200      	movs	r2, #0
 8006584:	2100      	movs	r1, #0
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f001 f89d 	bl	80076c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006594:	2300      	movs	r3, #0
 8006596:	2200      	movs	r2, #0
 8006598:	2100      	movs	r1, #0
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f001 fd74 	bl	8008088 <USBD_LL_PrepareReceive>
 80065a0:	e01c      	b.n	80065dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d10f      	bne.n	80065ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d009      	beq.n	80065ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065ce:	2180      	movs	r1, #128	@ 0x80
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f001 fcaf 	bl	8007f34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f001 f8c7 	bl	800776a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d03a      	beq.n	800665c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f7ff fe42 	bl	8006270 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80065f4:	e032      	b.n	800665c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80065f6:	7afb      	ldrb	r3, [r7, #11]
 80065f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	4619      	mov	r1, r3
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 f985 	bl	8006910 <USBD_CoreFindEP>
 8006606:	4603      	mov	r3, r0
 8006608:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800660a:	7dfb      	ldrb	r3, [r7, #23]
 800660c:	2bff      	cmp	r3, #255	@ 0xff
 800660e:	d025      	beq.n	800665c <USBD_LL_DataInStage+0x15a>
 8006610:	7dfb      	ldrb	r3, [r7, #23]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d122      	bne.n	800665c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b03      	cmp	r3, #3
 8006620:	d11c      	bne.n	800665c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006622:	7dfa      	ldrb	r2, [r7, #23]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	32ae      	adds	r2, #174	@ 0xae
 8006628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d014      	beq.n	800665c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006632:	7dfa      	ldrb	r2, [r7, #23]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800663a:	7dfa      	ldrb	r2, [r7, #23]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	32ae      	adds	r2, #174	@ 0xae
 8006640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	7afa      	ldrb	r2, [r7, #11]
 8006648:	4611      	mov	r1, r2
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	4798      	blx	r3
 800664e:	4603      	mov	r3, r0
 8006650:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006652:	7dbb      	ldrb	r3, [r7, #22]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006658:	7dbb      	ldrb	r3, [r7, #22]
 800665a:	e000      	b.n	800665e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d014      	beq.n	80066cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00e      	beq.n	80066cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6852      	ldr	r2, [r2, #4]
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	4611      	mov	r1, r2
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80066c8:	2303      	movs	r3, #3
 80066ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066cc:	2340      	movs	r3, #64	@ 0x40
 80066ce:	2200      	movs	r2, #0
 80066d0:	2100      	movs	r1, #0
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f001 fbe9 	bl	8007eaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2240      	movs	r2, #64	@ 0x40
 80066e4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066e8:	2340      	movs	r3, #64	@ 0x40
 80066ea:	2200      	movs	r2, #0
 80066ec:	2180      	movs	r1, #128	@ 0x80
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f001 fbdb 	bl	8007eaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2240      	movs	r2, #64	@ 0x40
 80066fe:	621a      	str	r2, [r3, #32]

  return ret;
 8006700:	7bfb      	ldrb	r3, [r7, #15]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	460b      	mov	r3, r1
 8006714:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	78fa      	ldrb	r2, [r7, #3]
 800671a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b04      	cmp	r3, #4
 800673c:	d006      	beq.n	800674c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006744:	b2da      	uxtb	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2204      	movs	r2, #4
 8006750:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b04      	cmp	r3, #4
 8006774:	d106      	bne.n	8006784 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800677c:	b2da      	uxtb	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b082      	sub	sp, #8
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d110      	bne.n	80067c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00b      	beq.n	80067c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	32ae      	adds	r2, #174	@ 0xae
 80067e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e01c      	b.n	800682e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b03      	cmp	r3, #3
 80067fe:	d115      	bne.n	800682c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	32ae      	adds	r2, #174	@ 0xae
 800680a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00b      	beq.n	800682c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	32ae      	adds	r2, #174	@ 0xae
 800681e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	78fa      	ldrb	r2, [r7, #3]
 8006826:	4611      	mov	r1, r2
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	32ae      	adds	r2, #174	@ 0xae
 800684c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006854:	2303      	movs	r3, #3
 8006856:	e01c      	b.n	8006892 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b03      	cmp	r3, #3
 8006862:	d115      	bne.n	8006890 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	32ae      	adds	r2, #174	@ 0xae
 800686e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00b      	beq.n	8006890 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	32ae      	adds	r2, #174	@ 0xae
 8006882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006888:	78fa      	ldrb	r2, [r7, #3]
 800688a:	4611      	mov	r1, r2
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00e      	beq.n	80068ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6852      	ldr	r2, [r2, #4]
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	4611      	mov	r1, r2
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4798      	blx	r3
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80068e8:	2303      	movs	r3, #3
 80068ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	460b      	mov	r3, r1
 8006900:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006902:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006904:	4618      	mov	r0, r3
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800691c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	460b      	mov	r3, r1
 8006934:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800693e:	2300      	movs	r3, #0
 8006940:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	885b      	ldrh	r3, [r3, #2]
 8006946:	b29b      	uxth	r3, r3
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	7812      	ldrb	r2, [r2, #0]
 800694c:	4293      	cmp	r3, r2
 800694e:	d91f      	bls.n	8006990 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006956:	e013      	b.n	8006980 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006958:	f107 030a 	add.w	r3, r7, #10
 800695c:	4619      	mov	r1, r3
 800695e:	6978      	ldr	r0, [r7, #20]
 8006960:	f000 f81b 	bl	800699a <USBD_GetNextDesc>
 8006964:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	785b      	ldrb	r3, [r3, #1]
 800696a:	2b05      	cmp	r3, #5
 800696c:	d108      	bne.n	8006980 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	789b      	ldrb	r3, [r3, #2]
 8006976:	78fa      	ldrb	r2, [r7, #3]
 8006978:	429a      	cmp	r2, r3
 800697a:	d008      	beq.n	800698e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800697c:	2300      	movs	r3, #0
 800697e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	885b      	ldrh	r3, [r3, #2]
 8006984:	b29a      	uxth	r2, r3
 8006986:	897b      	ldrh	r3, [r7, #10]
 8006988:	429a      	cmp	r2, r3
 800698a:	d8e5      	bhi.n	8006958 <USBD_GetEpDesc+0x2e>
 800698c:	e000      	b.n	8006990 <USBD_GetEpDesc+0x66>
          break;
 800698e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006990:	693b      	ldr	r3, [r7, #16]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800699a:	b480      	push	{r7}
 800699c:	b085      	sub	sp, #20
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	7812      	ldrb	r2, [r2, #0]
 80069b0:	4413      	add	r3, r2
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4413      	add	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80069c4:	68fb      	ldr	r3, [r7, #12]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b087      	sub	sp, #28
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	3301      	adds	r3, #1
 80069e8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069f0:	8a3b      	ldrh	r3, [r7, #16]
 80069f2:	021b      	lsls	r3, r3, #8
 80069f4:	b21a      	sxth	r2, r3
 80069f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	b21b      	sxth	r3, r3
 80069fe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a00:	89fb      	ldrh	r3, [r7, #14]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	371c      	adds	r7, #28
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
	...

08006a10 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a26:	2b40      	cmp	r3, #64	@ 0x40
 8006a28:	d005      	beq.n	8006a36 <USBD_StdDevReq+0x26>
 8006a2a:	2b40      	cmp	r3, #64	@ 0x40
 8006a2c:	d857      	bhi.n	8006ade <USBD_StdDevReq+0xce>
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00f      	beq.n	8006a52 <USBD_StdDevReq+0x42>
 8006a32:	2b20      	cmp	r3, #32
 8006a34:	d153      	bne.n	8006ade <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	32ae      	adds	r2, #174	@ 0xae
 8006a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	4798      	blx	r3
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a50:	e04a      	b.n	8006ae8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	785b      	ldrb	r3, [r3, #1]
 8006a56:	2b09      	cmp	r3, #9
 8006a58:	d83b      	bhi.n	8006ad2 <USBD_StdDevReq+0xc2>
 8006a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a60 <USBD_StdDevReq+0x50>)
 8006a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a60:	08006ab5 	.word	0x08006ab5
 8006a64:	08006ac9 	.word	0x08006ac9
 8006a68:	08006ad3 	.word	0x08006ad3
 8006a6c:	08006abf 	.word	0x08006abf
 8006a70:	08006ad3 	.word	0x08006ad3
 8006a74:	08006a93 	.word	0x08006a93
 8006a78:	08006a89 	.word	0x08006a89
 8006a7c:	08006ad3 	.word	0x08006ad3
 8006a80:	08006aab 	.word	0x08006aab
 8006a84:	08006a9d 	.word	0x08006a9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fa3c 	bl	8006f08 <USBD_GetDescriptor>
          break;
 8006a90:	e024      	b.n	8006adc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fba1 	bl	80071dc <USBD_SetAddress>
          break;
 8006a9a:	e01f      	b.n	8006adc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fbe0 	bl	8007264 <USBD_SetConfig>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	73fb      	strb	r3, [r7, #15]
          break;
 8006aa8:	e018      	b.n	8006adc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fc83 	bl	80073b8 <USBD_GetConfig>
          break;
 8006ab2:	e013      	b.n	8006adc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fcb4 	bl	8007424 <USBD_GetStatus>
          break;
 8006abc:	e00e      	b.n	8006adc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fce3 	bl	800748c <USBD_SetFeature>
          break;
 8006ac6:	e009      	b.n	8006adc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fd07 	bl	80074de <USBD_ClrFeature>
          break;
 8006ad0:	e004      	b.n	8006adc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fd5e 	bl	8007596 <USBD_CtlError>
          break;
 8006ada:	bf00      	nop
      }
      break;
 8006adc:	e004      	b.n	8006ae8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fd58 	bl	8007596 <USBD_CtlError>
      break;
 8006ae6:	bf00      	nop
  }

  return ret;
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop

08006af4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b0a:	2b40      	cmp	r3, #64	@ 0x40
 8006b0c:	d005      	beq.n	8006b1a <USBD_StdItfReq+0x26>
 8006b0e:	2b40      	cmp	r3, #64	@ 0x40
 8006b10:	d852      	bhi.n	8006bb8 <USBD_StdItfReq+0xc4>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <USBD_StdItfReq+0x26>
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d14e      	bne.n	8006bb8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d840      	bhi.n	8006baa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	889b      	ldrh	r3, [r3, #4]
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d836      	bhi.n	8006ba0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	889b      	ldrh	r3, [r3, #4]
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff fedb 	bl	80068f6 <USBD_CoreFindIF>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	2bff      	cmp	r3, #255	@ 0xff
 8006b48:	d01d      	beq.n	8006b86 <USBD_StdItfReq+0x92>
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d11a      	bne.n	8006b86 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006b50:	7bba      	ldrb	r2, [r7, #14]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	32ae      	adds	r2, #174	@ 0xae
 8006b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00f      	beq.n	8006b80 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006b60:	7bba      	ldrb	r2, [r7, #14]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b68:	7bba      	ldrb	r2, [r7, #14]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	32ae      	adds	r2, #174	@ 0xae
 8006b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	4798      	blx	r3
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b7e:	e004      	b.n	8006b8a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006b80:	2303      	movs	r3, #3
 8006b82:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b84:	e001      	b.n	8006b8a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006b86:	2303      	movs	r3, #3
 8006b88:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	88db      	ldrh	r3, [r3, #6]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d110      	bne.n	8006bb4 <USBD_StdItfReq+0xc0>
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10d      	bne.n	8006bb4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fdd3 	bl	8007744 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b9e:	e009      	b.n	8006bb4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fcf7 	bl	8007596 <USBD_CtlError>
          break;
 8006ba8:	e004      	b.n	8006bb4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fcf2 	bl	8007596 <USBD_CtlError>
          break;
 8006bb2:	e000      	b.n	8006bb6 <USBD_StdItfReq+0xc2>
          break;
 8006bb4:	bf00      	nop
      }
      break;
 8006bb6:	e004      	b.n	8006bc2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006bb8:	6839      	ldr	r1, [r7, #0]
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fceb 	bl	8007596 <USBD_CtlError>
      break;
 8006bc0:	bf00      	nop
  }

  return ret;
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	889b      	ldrh	r3, [r3, #4]
 8006bde:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006be8:	2b40      	cmp	r3, #64	@ 0x40
 8006bea:	d007      	beq.n	8006bfc <USBD_StdEPReq+0x30>
 8006bec:	2b40      	cmp	r3, #64	@ 0x40
 8006bee:	f200 817f 	bhi.w	8006ef0 <USBD_StdEPReq+0x324>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d02a      	beq.n	8006c4c <USBD_StdEPReq+0x80>
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	f040 817a 	bne.w	8006ef0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff fe85 	bl	8006910 <USBD_CoreFindEP>
 8006c06:	4603      	mov	r3, r0
 8006c08:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c0a:	7b7b      	ldrb	r3, [r7, #13]
 8006c0c:	2bff      	cmp	r3, #255	@ 0xff
 8006c0e:	f000 8174 	beq.w	8006efa <USBD_StdEPReq+0x32e>
 8006c12:	7b7b      	ldrb	r3, [r7, #13]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f040 8170 	bne.w	8006efa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006c1a:	7b7a      	ldrb	r2, [r7, #13]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006c22:	7b7a      	ldrb	r2, [r7, #13]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	32ae      	adds	r2, #174	@ 0xae
 8006c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 8163 	beq.w	8006efa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006c34:	7b7a      	ldrb	r2, [r7, #13]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	32ae      	adds	r2, #174	@ 0xae
 8006c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	4798      	blx	r3
 8006c46:	4603      	mov	r3, r0
 8006c48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c4a:	e156      	b.n	8006efa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	785b      	ldrb	r3, [r3, #1]
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d008      	beq.n	8006c66 <USBD_StdEPReq+0x9a>
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	f300 8145 	bgt.w	8006ee4 <USBD_StdEPReq+0x318>
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 809b 	beq.w	8006d96 <USBD_StdEPReq+0x1ca>
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d03c      	beq.n	8006cde <USBD_StdEPReq+0x112>
 8006c64:	e13e      	b.n	8006ee4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d002      	beq.n	8006c78 <USBD_StdEPReq+0xac>
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d016      	beq.n	8006ca4 <USBD_StdEPReq+0xd8>
 8006c76:	e02c      	b.n	8006cd2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00d      	beq.n	8006c9a <USBD_StdEPReq+0xce>
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	2b80      	cmp	r3, #128	@ 0x80
 8006c82:	d00a      	beq.n	8006c9a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f001 f953 	bl	8007f34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c8e:	2180      	movs	r1, #128	@ 0x80
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 f94f 	bl	8007f34 <USBD_LL_StallEP>
 8006c96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c98:	e020      	b.n	8006cdc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fc7a 	bl	8007596 <USBD_CtlError>
              break;
 8006ca2:	e01b      	b.n	8006cdc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	885b      	ldrh	r3, [r3, #2]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10e      	bne.n	8006cca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00b      	beq.n	8006cca <USBD_StdEPReq+0xfe>
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	2b80      	cmp	r3, #128	@ 0x80
 8006cb6:	d008      	beq.n	8006cca <USBD_StdEPReq+0xfe>
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	88db      	ldrh	r3, [r3, #6]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d104      	bne.n	8006cca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cc0:	7bbb      	ldrb	r3, [r7, #14]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 f935 	bl	8007f34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fd3a 	bl	8007744 <USBD_CtlSendStatus>

              break;
 8006cd0:	e004      	b.n	8006cdc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fc5e 	bl	8007596 <USBD_CtlError>
              break;
 8006cda:	bf00      	nop
          }
          break;
 8006cdc:	e107      	b.n	8006eee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d002      	beq.n	8006cf0 <USBD_StdEPReq+0x124>
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d016      	beq.n	8006d1c <USBD_StdEPReq+0x150>
 8006cee:	e04b      	b.n	8006d88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00d      	beq.n	8006d12 <USBD_StdEPReq+0x146>
 8006cf6:	7bbb      	ldrb	r3, [r7, #14]
 8006cf8:	2b80      	cmp	r3, #128	@ 0x80
 8006cfa:	d00a      	beq.n	8006d12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 f917 	bl	8007f34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d06:	2180      	movs	r1, #128	@ 0x80
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 f913 	bl	8007f34 <USBD_LL_StallEP>
 8006d0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d10:	e040      	b.n	8006d94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fc3e 	bl	8007596 <USBD_CtlError>
              break;
 8006d1a:	e03b      	b.n	8006d94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	885b      	ldrh	r3, [r3, #2]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d136      	bne.n	8006d92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d004      	beq.n	8006d38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 f91d 	bl	8007f72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fd03 	bl	8007744 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d3e:	7bbb      	ldrb	r3, [r7, #14]
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff fde4 	bl	8006910 <USBD_CoreFindEP>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d4c:	7b7b      	ldrb	r3, [r7, #13]
 8006d4e:	2bff      	cmp	r3, #255	@ 0xff
 8006d50:	d01f      	beq.n	8006d92 <USBD_StdEPReq+0x1c6>
 8006d52:	7b7b      	ldrb	r3, [r7, #13]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d11c      	bne.n	8006d92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006d58:	7b7a      	ldrb	r2, [r7, #13]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006d60:	7b7a      	ldrb	r2, [r7, #13]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	32ae      	adds	r2, #174	@ 0xae
 8006d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d010      	beq.n	8006d92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d70:	7b7a      	ldrb	r2, [r7, #13]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	32ae      	adds	r2, #174	@ 0xae
 8006d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	4798      	blx	r3
 8006d82:	4603      	mov	r3, r0
 8006d84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006d86:	e004      	b.n	8006d92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fc03 	bl	8007596 <USBD_CtlError>
              break;
 8006d90:	e000      	b.n	8006d94 <USBD_StdEPReq+0x1c8>
              break;
 8006d92:	bf00      	nop
          }
          break;
 8006d94:	e0ab      	b.n	8006eee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d002      	beq.n	8006da8 <USBD_StdEPReq+0x1dc>
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d032      	beq.n	8006e0c <USBD_StdEPReq+0x240>
 8006da6:	e097      	b.n	8006ed8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d007      	beq.n	8006dbe <USBD_StdEPReq+0x1f2>
 8006dae:	7bbb      	ldrb	r3, [r7, #14]
 8006db0:	2b80      	cmp	r3, #128	@ 0x80
 8006db2:	d004      	beq.n	8006dbe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fbed 	bl	8007596 <USBD_CtlError>
                break;
 8006dbc:	e091      	b.n	8006ee2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	da0b      	bge.n	8006dde <USBD_StdEPReq+0x212>
 8006dc6:	7bbb      	ldrb	r3, [r7, #14]
 8006dc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006dcc:	4613      	mov	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	3310      	adds	r3, #16
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	4413      	add	r3, r2
 8006dda:	3304      	adds	r3, #4
 8006ddc:	e00b      	b.n	8006df6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	4413      	add	r3, r2
 8006df4:	3304      	adds	r3, #4
 8006df6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2202      	movs	r2, #2
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fc43 	bl	8007690 <USBD_CtlSendData>
              break;
 8006e0a:	e06a      	b.n	8006ee2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	da11      	bge.n	8006e38 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e14:	7bbb      	ldrb	r3, [r7, #14]
 8006e16:	f003 020f 	and.w	r2, r3, #15
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	440b      	add	r3, r1
 8006e26:	3324      	adds	r3, #36	@ 0x24
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d117      	bne.n	8006e5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fbb0 	bl	8007596 <USBD_CtlError>
                  break;
 8006e36:	e054      	b.n	8006ee2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e38:	7bbb      	ldrb	r3, [r7, #14]
 8006e3a:	f003 020f 	and.w	r2, r3, #15
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	440b      	add	r3, r1
 8006e4a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fb9d 	bl	8007596 <USBD_CtlError>
                  break;
 8006e5c:	e041      	b.n	8006ee2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	da0b      	bge.n	8006e7e <USBD_StdEPReq+0x2b2>
 8006e66:	7bbb      	ldrb	r3, [r7, #14]
 8006e68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	3310      	adds	r3, #16
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	4413      	add	r3, r2
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	e00b      	b.n	8006e96 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e84:	4613      	mov	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	4413      	add	r3, r2
 8006e94:	3304      	adds	r3, #4
 8006e96:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d002      	beq.n	8006ea4 <USBD_StdEPReq+0x2d8>
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	2b80      	cmp	r3, #128	@ 0x80
 8006ea2:	d103      	bne.n	8006eac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	e00e      	b.n	8006eca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006eac:	7bbb      	ldrb	r3, [r7, #14]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 f87d 	bl	8007fb0 <USBD_LL_IsStallEP>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	e002      	b.n	8006eca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fbdd 	bl	8007690 <USBD_CtlSendData>
              break;
 8006ed6:	e004      	b.n	8006ee2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fb5b 	bl	8007596 <USBD_CtlError>
              break;
 8006ee0:	bf00      	nop
          }
          break;
 8006ee2:	e004      	b.n	8006eee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fb55 	bl	8007596 <USBD_CtlError>
          break;
 8006eec:	bf00      	nop
      }
      break;
 8006eee:	e005      	b.n	8006efc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fb4f 	bl	8007596 <USBD_CtlError>
      break;
 8006ef8:	e000      	b.n	8006efc <USBD_StdEPReq+0x330>
      break;
 8006efa:	bf00      	nop
  }

  return ret;
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	885b      	ldrh	r3, [r3, #2]
 8006f22:	0a1b      	lsrs	r3, r3, #8
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	2b06      	cmp	r3, #6
 8006f2a:	f200 8128 	bhi.w	800717e <USBD_GetDescriptor+0x276>
 8006f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f34 <USBD_GetDescriptor+0x2c>)
 8006f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f34:	08006f51 	.word	0x08006f51
 8006f38:	08006f69 	.word	0x08006f69
 8006f3c:	08006fa9 	.word	0x08006fa9
 8006f40:	0800717f 	.word	0x0800717f
 8006f44:	0800717f 	.word	0x0800717f
 8006f48:	0800711f 	.word	0x0800711f
 8006f4c:	0800714b 	.word	0x0800714b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	7c12      	ldrb	r2, [r2, #16]
 8006f5c:	f107 0108 	add.w	r1, r7, #8
 8006f60:	4610      	mov	r0, r2
 8006f62:	4798      	blx	r3
 8006f64:	60f8      	str	r0, [r7, #12]
      break;
 8006f66:	e112      	b.n	800718e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	7c1b      	ldrb	r3, [r3, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10d      	bne.n	8006f8c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f78:	f107 0208 	add.w	r2, r7, #8
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4798      	blx	r3
 8006f80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3301      	adds	r3, #1
 8006f86:	2202      	movs	r2, #2
 8006f88:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f8a:	e100      	b.n	800718e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f94:	f107 0208 	add.w	r2, r7, #8
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4798      	blx	r3
 8006f9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	701a      	strb	r2, [r3, #0]
      break;
 8006fa6:	e0f2      	b.n	800718e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	885b      	ldrh	r3, [r3, #2]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b05      	cmp	r3, #5
 8006fb0:	f200 80ac 	bhi.w	800710c <USBD_GetDescriptor+0x204>
 8006fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fbc <USBD_GetDescriptor+0xb4>)
 8006fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fba:	bf00      	nop
 8006fbc:	08006fd5 	.word	0x08006fd5
 8006fc0:	08007009 	.word	0x08007009
 8006fc4:	0800703d 	.word	0x0800703d
 8006fc8:	08007071 	.word	0x08007071
 8006fcc:	080070a5 	.word	0x080070a5
 8006fd0:	080070d9 	.word	0x080070d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00b      	beq.n	8006ff8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	7c12      	ldrb	r2, [r2, #16]
 8006fec:	f107 0108 	add.w	r1, r7, #8
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4798      	blx	r3
 8006ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ff6:	e091      	b.n	800711c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 facb 	bl	8007596 <USBD_CtlError>
            err++;
 8007000:	7afb      	ldrb	r3, [r7, #11]
 8007002:	3301      	adds	r3, #1
 8007004:	72fb      	strb	r3, [r7, #11]
          break;
 8007006:	e089      	b.n	800711c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	7c12      	ldrb	r2, [r2, #16]
 8007020:	f107 0108 	add.w	r1, r7, #8
 8007024:	4610      	mov	r0, r2
 8007026:	4798      	blx	r3
 8007028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800702a:	e077      	b.n	800711c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fab1 	bl	8007596 <USBD_CtlError>
            err++;
 8007034:	7afb      	ldrb	r3, [r7, #11]
 8007036:	3301      	adds	r3, #1
 8007038:	72fb      	strb	r3, [r7, #11]
          break;
 800703a:	e06f      	b.n	800711c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00b      	beq.n	8007060 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	7c12      	ldrb	r2, [r2, #16]
 8007054:	f107 0108 	add.w	r1, r7, #8
 8007058:	4610      	mov	r0, r2
 800705a:	4798      	blx	r3
 800705c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800705e:	e05d      	b.n	800711c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa97 	bl	8007596 <USBD_CtlError>
            err++;
 8007068:	7afb      	ldrb	r3, [r7, #11]
 800706a:	3301      	adds	r3, #1
 800706c:	72fb      	strb	r3, [r7, #11]
          break;
 800706e:	e055      	b.n	800711c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00b      	beq.n	8007094 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	7c12      	ldrb	r2, [r2, #16]
 8007088:	f107 0108 	add.w	r1, r7, #8
 800708c:	4610      	mov	r0, r2
 800708e:	4798      	blx	r3
 8007090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007092:	e043      	b.n	800711c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fa7d 	bl	8007596 <USBD_CtlError>
            err++;
 800709c:	7afb      	ldrb	r3, [r7, #11]
 800709e:	3301      	adds	r3, #1
 80070a0:	72fb      	strb	r3, [r7, #11]
          break;
 80070a2:	e03b      	b.n	800711c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00b      	beq.n	80070c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	7c12      	ldrb	r2, [r2, #16]
 80070bc:	f107 0108 	add.w	r1, r7, #8
 80070c0:	4610      	mov	r0, r2
 80070c2:	4798      	blx	r3
 80070c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070c6:	e029      	b.n	800711c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fa63 	bl	8007596 <USBD_CtlError>
            err++;
 80070d0:	7afb      	ldrb	r3, [r7, #11]
 80070d2:	3301      	adds	r3, #1
 80070d4:	72fb      	strb	r3, [r7, #11]
          break;
 80070d6:	e021      	b.n	800711c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00b      	beq.n	80070fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	7c12      	ldrb	r2, [r2, #16]
 80070f0:	f107 0108 	add.w	r1, r7, #8
 80070f4:	4610      	mov	r0, r2
 80070f6:	4798      	blx	r3
 80070f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070fa:	e00f      	b.n	800711c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fa49 	bl	8007596 <USBD_CtlError>
            err++;
 8007104:	7afb      	ldrb	r3, [r7, #11]
 8007106:	3301      	adds	r3, #1
 8007108:	72fb      	strb	r3, [r7, #11]
          break;
 800710a:	e007      	b.n	800711c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fa41 	bl	8007596 <USBD_CtlError>
          err++;
 8007114:	7afb      	ldrb	r3, [r7, #11]
 8007116:	3301      	adds	r3, #1
 8007118:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800711a:	bf00      	nop
      }
      break;
 800711c:	e037      	b.n	800718e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	7c1b      	ldrb	r3, [r3, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800712c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800712e:	f107 0208 	add.w	r2, r7, #8
 8007132:	4610      	mov	r0, r2
 8007134:	4798      	blx	r3
 8007136:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007138:	e029      	b.n	800718e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fa2a 	bl	8007596 <USBD_CtlError>
        err++;
 8007142:	7afb      	ldrb	r3, [r7, #11]
 8007144:	3301      	adds	r3, #1
 8007146:	72fb      	strb	r3, [r7, #11]
      break;
 8007148:	e021      	b.n	800718e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	7c1b      	ldrb	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10d      	bne.n	800716e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715a:	f107 0208 	add.w	r2, r7, #8
 800715e:	4610      	mov	r0, r2
 8007160:	4798      	blx	r3
 8007162:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	3301      	adds	r3, #1
 8007168:	2207      	movs	r2, #7
 800716a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800716c:	e00f      	b.n	800718e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fa10 	bl	8007596 <USBD_CtlError>
        err++;
 8007176:	7afb      	ldrb	r3, [r7, #11]
 8007178:	3301      	adds	r3, #1
 800717a:	72fb      	strb	r3, [r7, #11]
      break;
 800717c:	e007      	b.n	800718e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fa08 	bl	8007596 <USBD_CtlError>
      err++;
 8007186:	7afb      	ldrb	r3, [r7, #11]
 8007188:	3301      	adds	r3, #1
 800718a:	72fb      	strb	r3, [r7, #11]
      break;
 800718c:	bf00      	nop
  }

  if (err != 0U)
 800718e:	7afb      	ldrb	r3, [r7, #11]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d11e      	bne.n	80071d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	88db      	ldrh	r3, [r3, #6]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d016      	beq.n	80071ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800719c:	893b      	ldrh	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00e      	beq.n	80071c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	88da      	ldrh	r2, [r3, #6]
 80071a6:	893b      	ldrh	r3, [r7, #8]
 80071a8:	4293      	cmp	r3, r2
 80071aa:	bf28      	it	cs
 80071ac:	4613      	movcs	r3, r2
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80071b2:	893b      	ldrh	r3, [r7, #8]
 80071b4:	461a      	mov	r2, r3
 80071b6:	68f9      	ldr	r1, [r7, #12]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fa69 	bl	8007690 <USBD_CtlSendData>
 80071be:	e009      	b.n	80071d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f9e7 	bl	8007596 <USBD_CtlError>
 80071c8:	e004      	b.n	80071d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 faba 	bl	8007744 <USBD_CtlSendStatus>
 80071d0:	e000      	b.n	80071d4 <USBD_GetDescriptor+0x2cc>
    return;
 80071d2:	bf00      	nop
  }
}
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop

080071dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	889b      	ldrh	r3, [r3, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d131      	bne.n	8007252 <USBD_SetAddress+0x76>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	88db      	ldrh	r3, [r3, #6]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d12d      	bne.n	8007252 <USBD_SetAddress+0x76>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	885b      	ldrh	r3, [r3, #2]
 80071fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80071fc:	d829      	bhi.n	8007252 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	885b      	ldrh	r3, [r3, #2]
 8007202:	b2db      	uxtb	r3, r3
 8007204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007208:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b03      	cmp	r3, #3
 8007214:	d104      	bne.n	8007220 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f9bc 	bl	8007596 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800721e:	e01d      	b.n	800725c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	7bfa      	ldrb	r2, [r7, #15]
 8007224:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007228:	7bfb      	ldrb	r3, [r7, #15]
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 feeb 	bl	8008008 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fa86 	bl	8007744 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d004      	beq.n	8007248 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2202      	movs	r2, #2
 8007242:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007246:	e009      	b.n	800725c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007250:	e004      	b.n	800725c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f99e 	bl	8007596 <USBD_CtlError>
  }
}
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	885b      	ldrh	r3, [r3, #2]
 8007276:	b2da      	uxtb	r2, r3
 8007278:	4b4e      	ldr	r3, [pc, #312]	@ (80073b4 <USBD_SetConfig+0x150>)
 800727a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800727c:	4b4d      	ldr	r3, [pc, #308]	@ (80073b4 <USBD_SetConfig+0x150>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d905      	bls.n	8007290 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f985 	bl	8007596 <USBD_CtlError>
    return USBD_FAIL;
 800728c:	2303      	movs	r3, #3
 800728e:	e08c      	b.n	80073aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b02      	cmp	r3, #2
 800729a:	d002      	beq.n	80072a2 <USBD_SetConfig+0x3e>
 800729c:	2b03      	cmp	r3, #3
 800729e:	d029      	beq.n	80072f4 <USBD_SetConfig+0x90>
 80072a0:	e075      	b.n	800738e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80072a2:	4b44      	ldr	r3, [pc, #272]	@ (80073b4 <USBD_SetConfig+0x150>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d020      	beq.n	80072ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80072aa:	4b42      	ldr	r3, [pc, #264]	@ (80073b4 <USBD_SetConfig+0x150>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072b4:	4b3f      	ldr	r3, [pc, #252]	@ (80073b4 <USBD_SetConfig+0x150>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7fe ffe3 	bl	8006286 <USBD_SetClassConfig>
 80072c0:	4603      	mov	r3, r0
 80072c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d008      	beq.n	80072dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f962 	bl	8007596 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2202      	movs	r2, #2
 80072d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072da:	e065      	b.n	80073a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fa31 	bl	8007744 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2203      	movs	r2, #3
 80072e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80072ea:	e05d      	b.n	80073a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fa29 	bl	8007744 <USBD_CtlSendStatus>
      break;
 80072f2:	e059      	b.n	80073a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072f4:	4b2f      	ldr	r3, [pc, #188]	@ (80073b4 <USBD_SetConfig+0x150>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d112      	bne.n	8007322 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007304:	4b2b      	ldr	r3, [pc, #172]	@ (80073b4 <USBD_SetConfig+0x150>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	461a      	mov	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800730e:	4b29      	ldr	r3, [pc, #164]	@ (80073b4 <USBD_SetConfig+0x150>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7fe ffd2 	bl	80062be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa12 	bl	8007744 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007320:	e042      	b.n	80073a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007322:	4b24      	ldr	r3, [pc, #144]	@ (80073b4 <USBD_SetConfig+0x150>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	429a      	cmp	r2, r3
 800732e:	d02a      	beq.n	8007386 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	b2db      	uxtb	r3, r3
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7fe ffc0 	bl	80062be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800733e:	4b1d      	ldr	r3, [pc, #116]	@ (80073b4 <USBD_SetConfig+0x150>)
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	461a      	mov	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007348:	4b1a      	ldr	r3, [pc, #104]	@ (80073b4 <USBD_SetConfig+0x150>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7fe ff99 	bl	8006286 <USBD_SetClassConfig>
 8007354:	4603      	mov	r3, r0
 8007356:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00f      	beq.n	800737e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f918 	bl	8007596 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7fe ffa5 	bl	80062be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800737c:	e014      	b.n	80073a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f9e0 	bl	8007744 <USBD_CtlSendStatus>
      break;
 8007384:	e010      	b.n	80073a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f9dc 	bl	8007744 <USBD_CtlSendStatus>
      break;
 800738c:	e00c      	b.n	80073a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f900 	bl	8007596 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007396:	4b07      	ldr	r3, [pc, #28]	@ (80073b4 <USBD_SetConfig+0x150>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7fe ff8e 	bl	80062be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80073a2:	2303      	movs	r3, #3
 80073a4:	73fb      	strb	r3, [r7, #15]
      break;
 80073a6:	bf00      	nop
  }

  return ret;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	2000020c 	.word	0x2000020c

080073b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	88db      	ldrh	r3, [r3, #6]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d004      	beq.n	80073d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f8e2 	bl	8007596 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073d2:	e023      	b.n	800741c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b02      	cmp	r3, #2
 80073de:	dc02      	bgt.n	80073e6 <USBD_GetConfig+0x2e>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	dc03      	bgt.n	80073ec <USBD_GetConfig+0x34>
 80073e4:	e015      	b.n	8007412 <USBD_GetConfig+0x5a>
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d00b      	beq.n	8007402 <USBD_GetConfig+0x4a>
 80073ea:	e012      	b.n	8007412 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3308      	adds	r3, #8
 80073f6:	2201      	movs	r2, #1
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f948 	bl	8007690 <USBD_CtlSendData>
        break;
 8007400:	e00c      	b.n	800741c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3304      	adds	r3, #4
 8007406:	2201      	movs	r2, #1
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f940 	bl	8007690 <USBD_CtlSendData>
        break;
 8007410:	e004      	b.n	800741c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f8be 	bl	8007596 <USBD_CtlError>
        break;
 800741a:	bf00      	nop
}
 800741c:	bf00      	nop
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007434:	b2db      	uxtb	r3, r3
 8007436:	3b01      	subs	r3, #1
 8007438:	2b02      	cmp	r3, #2
 800743a:	d81e      	bhi.n	800747a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	88db      	ldrh	r3, [r3, #6]
 8007440:	2b02      	cmp	r3, #2
 8007442:	d004      	beq.n	800744e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f8a5 	bl	8007596 <USBD_CtlError>
        break;
 800744c:	e01a      	b.n	8007484 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800745a:	2b00      	cmp	r3, #0
 800745c:	d005      	beq.n	800746a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	f043 0202 	orr.w	r2, r3, #2
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	330c      	adds	r3, #12
 800746e:	2202      	movs	r2, #2
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f90c 	bl	8007690 <USBD_CtlSendData>
      break;
 8007478:	e004      	b.n	8007484 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f88a 	bl	8007596 <USBD_CtlError>
      break;
 8007482:	bf00      	nop
  }
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	885b      	ldrh	r3, [r3, #2]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d107      	bne.n	80074ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f94c 	bl	8007744 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80074ac:	e013      	b.n	80074d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	885b      	ldrh	r3, [r3, #2]
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d10b      	bne.n	80074ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	889b      	ldrh	r3, [r3, #4]
 80074ba:	0a1b      	lsrs	r3, r3, #8
 80074bc:	b29b      	uxth	r3, r3
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f93c 	bl	8007744 <USBD_CtlSendStatus>
}
 80074cc:	e003      	b.n	80074d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f860 	bl	8007596 <USBD_CtlError>
}
 80074d6:	bf00      	nop
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	3b01      	subs	r3, #1
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d80b      	bhi.n	800750e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	885b      	ldrh	r3, [r3, #2]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d10c      	bne.n	8007518 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f91c 	bl	8007744 <USBD_CtlSendStatus>
      }
      break;
 800750c:	e004      	b.n	8007518 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f840 	bl	8007596 <USBD_CtlError>
      break;
 8007516:	e000      	b.n	800751a <USBD_ClrFeature+0x3c>
      break;
 8007518:	bf00      	nop
  }
}
 800751a:	bf00      	nop
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	781a      	ldrb	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3301      	adds	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	781a      	ldrb	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3301      	adds	r3, #1
 800754a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7ff fa40 	bl	80069d2 <SWAPBYTE>
 8007552:	4603      	mov	r3, r0
 8007554:	461a      	mov	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	3301      	adds	r3, #1
 8007564:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f7ff fa33 	bl	80069d2 <SWAPBYTE>
 800756c:	4603      	mov	r3, r0
 800756e:	461a      	mov	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	3301      	adds	r3, #1
 8007578:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	3301      	adds	r3, #1
 800757e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f7ff fa26 	bl	80069d2 <SWAPBYTE>
 8007586:	4603      	mov	r3, r0
 8007588:	461a      	mov	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	80da      	strh	r2, [r3, #6]
}
 800758e:	bf00      	nop
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80075a0:	2180      	movs	r1, #128	@ 0x80
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fcc6 	bl	8007f34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80075a8:	2100      	movs	r1, #0
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fcc2 	bl	8007f34 <USBD_LL_StallEP>
}
 80075b0:	bf00      	nop
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d042      	beq.n	8007654 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80075d2:	6938      	ldr	r0, [r7, #16]
 80075d4:	f000 f842 	bl	800765c <USBD_GetLen>
 80075d8:	4603      	mov	r3, r0
 80075da:	3301      	adds	r3, #1
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075e2:	d808      	bhi.n	80075f6 <USBD_GetString+0x3e>
 80075e4:	6938      	ldr	r0, [r7, #16]
 80075e6:	f000 f839 	bl	800765c <USBD_GetLen>
 80075ea:	4603      	mov	r3, r0
 80075ec:	3301      	adds	r3, #1
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	005b      	lsls	r3, r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	e001      	b.n	80075fa <USBD_GetString+0x42>
 80075f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	4413      	add	r3, r2
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	7812      	ldrb	r2, [r2, #0]
 8007608:	701a      	strb	r2, [r3, #0]
  idx++;
 800760a:	7dfb      	ldrb	r3, [r7, #23]
 800760c:	3301      	adds	r3, #1
 800760e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	4413      	add	r3, r2
 8007616:	2203      	movs	r2, #3
 8007618:	701a      	strb	r2, [r3, #0]
  idx++;
 800761a:	7dfb      	ldrb	r3, [r7, #23]
 800761c:	3301      	adds	r3, #1
 800761e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007620:	e013      	b.n	800764a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007622:	7dfb      	ldrb	r3, [r7, #23]
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	4413      	add	r3, r2
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	7812      	ldrb	r2, [r2, #0]
 800762c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	3301      	adds	r3, #1
 8007632:	613b      	str	r3, [r7, #16]
    idx++;
 8007634:	7dfb      	ldrb	r3, [r7, #23]
 8007636:	3301      	adds	r3, #1
 8007638:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800763a:	7dfb      	ldrb	r3, [r7, #23]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	4413      	add	r3, r2
 8007640:	2200      	movs	r2, #0
 8007642:	701a      	strb	r2, [r3, #0]
    idx++;
 8007644:	7dfb      	ldrb	r3, [r7, #23]
 8007646:	3301      	adds	r3, #1
 8007648:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e7      	bne.n	8007622 <USBD_GetString+0x6a>
 8007652:	e000      	b.n	8007656 <USBD_GetString+0x9e>
    return;
 8007654:	bf00      	nop
  }
}
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800766c:	e005      	b.n	800767a <USBD_GetLen+0x1e>
  {
    len++;
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	3301      	adds	r3, #1
 8007672:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	3301      	adds	r3, #1
 8007678:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1f5      	bne.n	800766e <USBD_GetLen+0x12>
  }

  return len;
 8007682:	7bfb      	ldrb	r3, [r7, #15]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2202      	movs	r2, #2
 80076a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	2100      	movs	r1, #0
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fcc5 	bl	8008046 <USBD_LL_Transmit>

  return USBD_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
 80076ce:	60b9      	str	r1, [r7, #8]
 80076d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	2100      	movs	r1, #0
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fcb4 	bl	8008046 <USBD_LL_Transmit>

  return USBD_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2203      	movs	r2, #3
 80076f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	2100      	movs	r1, #0
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 fcb8 	bl	8008088 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	60b9      	str	r1, [r7, #8]
 800772c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	2100      	movs	r1, #0
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 fca7 	bl	8008088 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2204      	movs	r2, #4
 8007750:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007754:	2300      	movs	r3, #0
 8007756:	2200      	movs	r2, #0
 8007758:	2100      	movs	r1, #0
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fc73 	bl	8008046 <USBD_LL_Transmit>

  return USBD_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b082      	sub	sp, #8
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2205      	movs	r2, #5
 8007776:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800777a:	2300      	movs	r3, #0
 800777c:	2200      	movs	r2, #0
 800777e:	2100      	movs	r1, #0
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fc81 	bl	8008088 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007794:	2200      	movs	r2, #0
 8007796:	4912      	ldr	r1, [pc, #72]	@ (80077e0 <MX_USB_DEVICE_Init+0x50>)
 8007798:	4812      	ldr	r0, [pc, #72]	@ (80077e4 <MX_USB_DEVICE_Init+0x54>)
 800779a:	f7fe fcf7 	bl	800618c <USBD_Init>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80077a4:	f7f9 f822 	bl	80007ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80077a8:	490f      	ldr	r1, [pc, #60]	@ (80077e8 <MX_USB_DEVICE_Init+0x58>)
 80077aa:	480e      	ldr	r0, [pc, #56]	@ (80077e4 <MX_USB_DEVICE_Init+0x54>)
 80077ac:	f7fe fd1e 	bl	80061ec <USBD_RegisterClass>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80077b6:	f7f9 f819 	bl	80007ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80077ba:	490c      	ldr	r1, [pc, #48]	@ (80077ec <MX_USB_DEVICE_Init+0x5c>)
 80077bc:	4809      	ldr	r0, [pc, #36]	@ (80077e4 <MX_USB_DEVICE_Init+0x54>)
 80077be:	f7fe fc55 	bl	800606c <USBD_CDC_RegisterInterface>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80077c8:	f7f9 f810 	bl	80007ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80077cc:	4805      	ldr	r0, [pc, #20]	@ (80077e4 <MX_USB_DEVICE_Init+0x54>)
 80077ce:	f7fe fd43 	bl	8006258 <USBD_Start>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077d8:	f7f9 f808 	bl	80007ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077dc:	bf00      	nop
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	200000ac 	.word	0x200000ac
 80077e4:	20000210 	.word	0x20000210
 80077e8:	20000018 	.word	0x20000018
 80077ec:	20000098 	.word	0x20000098

080077f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80077f4:	2200      	movs	r2, #0
 80077f6:	4905      	ldr	r1, [pc, #20]	@ (800780c <CDC_Init_FS+0x1c>)
 80077f8:	4805      	ldr	r0, [pc, #20]	@ (8007810 <CDC_Init_FS+0x20>)
 80077fa:	f7fe fc51 	bl	80060a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80077fe:	4905      	ldr	r1, [pc, #20]	@ (8007814 <CDC_Init_FS+0x24>)
 8007800:	4803      	ldr	r0, [pc, #12]	@ (8007810 <CDC_Init_FS+0x20>)
 8007802:	f7fe fc6f 	bl	80060e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007806:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007808:	4618      	mov	r0, r3
 800780a:	bd80      	pop	{r7, pc}
 800780c:	20000cec 	.word	0x20000cec
 8007810:	20000210 	.word	0x20000210
 8007814:	200004ec 	.word	0x200004ec

08007818 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007818:	b480      	push	{r7}
 800781a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800781c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800781e:	4618      	mov	r0, r3
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	4603      	mov	r3, r0
 8007830:	6039      	str	r1, [r7, #0]
 8007832:	71fb      	strb	r3, [r7, #7]
 8007834:	4613      	mov	r3, r2
 8007836:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007838:	79fb      	ldrb	r3, [r7, #7]
 800783a:	2b23      	cmp	r3, #35	@ 0x23
 800783c:	d84a      	bhi.n	80078d4 <CDC_Control_FS+0xac>
 800783e:	a201      	add	r2, pc, #4	@ (adr r2, 8007844 <CDC_Control_FS+0x1c>)
 8007840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007844:	080078d5 	.word	0x080078d5
 8007848:	080078d5 	.word	0x080078d5
 800784c:	080078d5 	.word	0x080078d5
 8007850:	080078d5 	.word	0x080078d5
 8007854:	080078d5 	.word	0x080078d5
 8007858:	080078d5 	.word	0x080078d5
 800785c:	080078d5 	.word	0x080078d5
 8007860:	080078d5 	.word	0x080078d5
 8007864:	080078d5 	.word	0x080078d5
 8007868:	080078d5 	.word	0x080078d5
 800786c:	080078d5 	.word	0x080078d5
 8007870:	080078d5 	.word	0x080078d5
 8007874:	080078d5 	.word	0x080078d5
 8007878:	080078d5 	.word	0x080078d5
 800787c:	080078d5 	.word	0x080078d5
 8007880:	080078d5 	.word	0x080078d5
 8007884:	080078d5 	.word	0x080078d5
 8007888:	080078d5 	.word	0x080078d5
 800788c:	080078d5 	.word	0x080078d5
 8007890:	080078d5 	.word	0x080078d5
 8007894:	080078d5 	.word	0x080078d5
 8007898:	080078d5 	.word	0x080078d5
 800789c:	080078d5 	.word	0x080078d5
 80078a0:	080078d5 	.word	0x080078d5
 80078a4:	080078d5 	.word	0x080078d5
 80078a8:	080078d5 	.word	0x080078d5
 80078ac:	080078d5 	.word	0x080078d5
 80078b0:	080078d5 	.word	0x080078d5
 80078b4:	080078d5 	.word	0x080078d5
 80078b8:	080078d5 	.word	0x080078d5
 80078bc:	080078d5 	.word	0x080078d5
 80078c0:	080078d5 	.word	0x080078d5
 80078c4:	080078d5 	.word	0x080078d5
 80078c8:	080078d5 	.word	0x080078d5
 80078cc:	080078d5 	.word	0x080078d5
 80078d0:	080078d5 	.word	0x080078d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80078d4:	bf00      	nop
  }

  return (USBD_OK);
 80078d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80078ee:	6879      	ldr	r1, [r7, #4]
 80078f0:	4805      	ldr	r0, [pc, #20]	@ (8007908 <CDC_Receive_FS+0x24>)
 80078f2:	f7fe fbf7 	bl	80060e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80078f6:	4804      	ldr	r0, [pc, #16]	@ (8007908 <CDC_Receive_FS+0x24>)
 80078f8:	f7fe fc12 	bl	8006120 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80078fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20000210 	.word	0x20000210

0800790c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	4613      	mov	r3, r2
 8007918:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800791e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007922:	4618      	mov	r0, r3
 8007924:	371c      	adds	r7, #28
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
	...

08007930 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	4603      	mov	r3, r0
 8007938:	6039      	str	r1, [r7, #0]
 800793a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2212      	movs	r2, #18
 8007940:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007942:	4b03      	ldr	r3, [pc, #12]	@ (8007950 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	200000c8 	.word	0x200000c8

08007954 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	4603      	mov	r3, r0
 800795c:	6039      	str	r1, [r7, #0]
 800795e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2204      	movs	r2, #4
 8007964:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007966:	4b03      	ldr	r3, [pc, #12]	@ (8007974 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007968:	4618      	mov	r0, r3
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	200000dc 	.word	0x200000dc

08007978 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	4603      	mov	r3, r0
 8007980:	6039      	str	r1, [r7, #0]
 8007982:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	4907      	ldr	r1, [pc, #28]	@ (80079ac <USBD_FS_ProductStrDescriptor+0x34>)
 800798e:	4808      	ldr	r0, [pc, #32]	@ (80079b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007990:	f7ff fe12 	bl	80075b8 <USBD_GetString>
 8007994:	e004      	b.n	80079a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	4904      	ldr	r1, [pc, #16]	@ (80079ac <USBD_FS_ProductStrDescriptor+0x34>)
 800799a:	4805      	ldr	r0, [pc, #20]	@ (80079b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800799c:	f7ff fe0c 	bl	80075b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079a0:	4b02      	ldr	r3, [pc, #8]	@ (80079ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	200014ec 	.word	0x200014ec
 80079b0:	080081e8 	.word	0x080081e8

080079b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	4603      	mov	r3, r0
 80079bc:	6039      	str	r1, [r7, #0]
 80079be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	4904      	ldr	r1, [pc, #16]	@ (80079d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80079c4:	4804      	ldr	r0, [pc, #16]	@ (80079d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80079c6:	f7ff fdf7 	bl	80075b8 <USBD_GetString>
  return USBD_StrDesc;
 80079ca:	4b02      	ldr	r3, [pc, #8]	@ (80079d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	200014ec 	.word	0x200014ec
 80079d8:	08008200 	.word	0x08008200

080079dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	4603      	mov	r3, r0
 80079e4:	6039      	str	r1, [r7, #0]
 80079e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	221a      	movs	r2, #26
 80079ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80079ee:	f000 f843 	bl	8007a78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80079f2:	4b02      	ldr	r3, [pc, #8]	@ (80079fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	200000e0 	.word	0x200000e0

08007a00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	6039      	str	r1, [r7, #0]
 8007a0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d105      	bne.n	8007a1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	4907      	ldr	r1, [pc, #28]	@ (8007a34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a16:	4808      	ldr	r0, [pc, #32]	@ (8007a38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a18:	f7ff fdce 	bl	80075b8 <USBD_GetString>
 8007a1c:	e004      	b.n	8007a28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	4904      	ldr	r1, [pc, #16]	@ (8007a34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a22:	4805      	ldr	r0, [pc, #20]	@ (8007a38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a24:	f7ff fdc8 	bl	80075b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a28:	4b02      	ldr	r3, [pc, #8]	@ (8007a34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	200014ec 	.word	0x200014ec
 8007a38:	08008214 	.word	0x08008214

08007a3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	4603      	mov	r3, r0
 8007a44:	6039      	str	r1, [r7, #0]
 8007a46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d105      	bne.n	8007a5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	4907      	ldr	r1, [pc, #28]	@ (8007a70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a52:	4808      	ldr	r0, [pc, #32]	@ (8007a74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a54:	f7ff fdb0 	bl	80075b8 <USBD_GetString>
 8007a58:	e004      	b.n	8007a64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	4904      	ldr	r1, [pc, #16]	@ (8007a70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a5e:	4805      	ldr	r0, [pc, #20]	@ (8007a74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a60:	f7ff fdaa 	bl	80075b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a64:	4b02      	ldr	r3, [pc, #8]	@ (8007a70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	200014ec 	.word	0x200014ec
 8007a74:	08008220 	.word	0x08008220

08007a78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8007abc <Get_SerialNum+0x44>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a84:	4b0e      	ldr	r3, [pc, #56]	@ (8007ac0 <Get_SerialNum+0x48>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8007ac4 <Get_SerialNum+0x4c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4413      	add	r3, r2
 8007a96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d009      	beq.n	8007ab2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a9e:	2208      	movs	r2, #8
 8007aa0:	4909      	ldr	r1, [pc, #36]	@ (8007ac8 <Get_SerialNum+0x50>)
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f000 f814 	bl	8007ad0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007aa8:	2204      	movs	r2, #4
 8007aaa:	4908      	ldr	r1, [pc, #32]	@ (8007acc <Get_SerialNum+0x54>)
 8007aac:	68b8      	ldr	r0, [r7, #8]
 8007aae:	f000 f80f 	bl	8007ad0 <IntToUnicode>
  }
}
 8007ab2:	bf00      	nop
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	1fff7a10 	.word	0x1fff7a10
 8007ac0:	1fff7a14 	.word	0x1fff7a14
 8007ac4:	1fff7a18 	.word	0x1fff7a18
 8007ac8:	200000e2 	.word	0x200000e2
 8007acc:	200000f2 	.word	0x200000f2

08007ad0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b087      	sub	sp, #28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	4613      	mov	r3, r2
 8007adc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	75fb      	strb	r3, [r7, #23]
 8007ae6:	e027      	b.n	8007b38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	0f1b      	lsrs	r3, r3, #28
 8007aec:	2b09      	cmp	r3, #9
 8007aee:	d80b      	bhi.n	8007b08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	0f1b      	lsrs	r3, r3, #28
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	4619      	mov	r1, r3
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	440b      	add	r3, r1
 8007b00:	3230      	adds	r2, #48	@ 0x30
 8007b02:	b2d2      	uxtb	r2, r2
 8007b04:	701a      	strb	r2, [r3, #0]
 8007b06:	e00a      	b.n	8007b1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	0f1b      	lsrs	r3, r3, #28
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	005b      	lsls	r3, r3, #1
 8007b12:	4619      	mov	r1, r3
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	440b      	add	r3, r1
 8007b18:	3237      	adds	r2, #55	@ 0x37
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	011b      	lsls	r3, r3, #4
 8007b22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	3301      	adds	r3, #1
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	2200      	movs	r2, #0
 8007b30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	3301      	adds	r3, #1
 8007b36:	75fb      	strb	r3, [r7, #23]
 8007b38:	7dfa      	ldrb	r2, [r7, #23]
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d3d3      	bcc.n	8007ae8 <IntToUnicode+0x18>
  }
}
 8007b40:	bf00      	nop
 8007b42:	bf00      	nop
 8007b44:	371c      	adds	r7, #28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
	...

08007b50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08a      	sub	sp, #40	@ 0x28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b58:	f107 0314 	add.w	r3, r7, #20
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	601a      	str	r2, [r3, #0]
 8007b60:	605a      	str	r2, [r3, #4]
 8007b62:	609a      	str	r2, [r3, #8]
 8007b64:	60da      	str	r2, [r3, #12]
 8007b66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b70:	d13a      	bne.n	8007be8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b72:	2300      	movs	r3, #0
 8007b74:	613b      	str	r3, [r7, #16]
 8007b76:	4b1e      	ldr	r3, [pc, #120]	@ (8007bf0 <HAL_PCD_MspInit+0xa0>)
 8007b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8007bf0 <HAL_PCD_MspInit+0xa0>)
 8007b7c:	f043 0301 	orr.w	r3, r3, #1
 8007b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b82:	4b1b      	ldr	r3, [pc, #108]	@ (8007bf0 <HAL_PCD_MspInit+0xa0>)
 8007b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	613b      	str	r3, [r7, #16]
 8007b8c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b8e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b94:	2302      	movs	r3, #2
 8007b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ba0:	230a      	movs	r3, #10
 8007ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ba4:	f107 0314 	add.w	r3, r7, #20
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4812      	ldr	r0, [pc, #72]	@ (8007bf4 <HAL_PCD_MspInit+0xa4>)
 8007bac:	f7f9 ffca 	bl	8001b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8007bf0 <HAL_PCD_MspInit+0xa0>)
 8007bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bb4:	4a0e      	ldr	r2, [pc, #56]	@ (8007bf0 <HAL_PCD_MspInit+0xa0>)
 8007bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bba:	6353      	str	r3, [r2, #52]	@ 0x34
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf0 <HAL_PCD_MspInit+0xa0>)
 8007bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8007bf0 <HAL_PCD_MspInit+0xa0>)
 8007bc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007bca:	6453      	str	r3, [r2, #68]	@ 0x44
 8007bcc:	4b08      	ldr	r3, [pc, #32]	@ (8007bf0 <HAL_PCD_MspInit+0xa0>)
 8007bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2100      	movs	r1, #0
 8007bdc:	2043      	movs	r0, #67	@ 0x43
 8007bde:	f7f9 fc90 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007be2:	2043      	movs	r0, #67	@ 0x43
 8007be4:	f7f9 fca9 	bl	800153a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007be8:	bf00      	nop
 8007bea:	3728      	adds	r7, #40	@ 0x28
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	40023800 	.word	0x40023800
 8007bf4:	40020000 	.word	0x40020000

08007bf8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4610      	mov	r0, r2
 8007c10:	f7fe fb6f 	bl	80062f2 <USBD_LL_SetupStage>
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007c2e:	78fa      	ldrb	r2, [r7, #3]
 8007c30:	6879      	ldr	r1, [r7, #4]
 8007c32:	4613      	mov	r3, r2
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	440b      	add	r3, r1
 8007c3c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	78fb      	ldrb	r3, [r7, #3]
 8007c44:	4619      	mov	r1, r3
 8007c46:	f7fe fba9 	bl	800639c <USBD_LL_DataOutStage>
}
 8007c4a:	bf00      	nop
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007c64:	78fa      	ldrb	r2, [r7, #3]
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	4413      	add	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	440b      	add	r3, r1
 8007c72:	3320      	adds	r3, #32
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	78fb      	ldrb	r3, [r7, #3]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	f7fe fc42 	bl	8006502 <USBD_LL_DataInStage>
}
 8007c7e:	bf00      	nop
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b082      	sub	sp, #8
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fe fd7c 	bl	8006792 <USBD_LL_SOF>
}
 8007c9a:	bf00      	nop
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007caa:	2301      	movs	r3, #1
 8007cac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	79db      	ldrb	r3, [r3, #7]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d102      	bne.n	8007cbc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
 8007cba:	e008      	b.n	8007cce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	79db      	ldrb	r3, [r3, #7]
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d102      	bne.n	8007cca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	73fb      	strb	r3, [r7, #15]
 8007cc8:	e001      	b.n	8007cce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007cca:	f7f8 fd8f 	bl	80007ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cd4:	7bfa      	ldrb	r2, [r7, #15]
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fe fd16 	bl	800670a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fe fcbe 	bl	8006666 <USBD_LL_Reset>
}
 8007cea:	bf00      	nop
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe fd11 	bl	800672a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	6812      	ldr	r2, [r2, #0]
 8007d16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007d1a:	f043 0301 	orr.w	r3, r3, #1
 8007d1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	7adb      	ldrb	r3, [r3, #11]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d28:	4b04      	ldr	r3, [pc, #16]	@ (8007d3c <HAL_PCD_SuspendCallback+0x48>)
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	4a03      	ldr	r2, [pc, #12]	@ (8007d3c <HAL_PCD_SuspendCallback+0x48>)
 8007d2e:	f043 0306 	orr.w	r3, r3, #6
 8007d32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d34:	bf00      	nop
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	e000ed00 	.word	0xe000ed00

08007d40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe fd07 	bl	8006762 <USBD_LL_Resume>
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d6e:	78fa      	ldrb	r2, [r7, #3]
 8007d70:	4611      	mov	r1, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fd5f 	bl	8006836 <USBD_LL_IsoOUTIncomplete>
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d92:	78fa      	ldrb	r2, [r7, #3]
 8007d94:	4611      	mov	r1, r2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fe fd1b 	bl	80067d2 <USBD_LL_IsoINIncomplete>
}
 8007d9c:	bf00      	nop
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fe fd71 	bl	800689a <USBD_LL_DevConnected>
}
 8007db8:	bf00      	nop
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fd6e 	bl	80068b0 <USBD_LL_DevDisconnected>
}
 8007dd4:	bf00      	nop
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d13c      	bne.n	8007e66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007dec:	4a20      	ldr	r2, [pc, #128]	@ (8007e70 <USBD_LL_Init+0x94>)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a1e      	ldr	r2, [pc, #120]	@ (8007e70 <USBD_LL_Init+0x94>)
 8007df8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8007e70 <USBD_LL_Init+0x94>)
 8007dfe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007e02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007e04:	4b1a      	ldr	r3, [pc, #104]	@ (8007e70 <USBD_LL_Init+0x94>)
 8007e06:	2204      	movs	r2, #4
 8007e08:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007e0a:	4b19      	ldr	r3, [pc, #100]	@ (8007e70 <USBD_LL_Init+0x94>)
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e10:	4b17      	ldr	r3, [pc, #92]	@ (8007e70 <USBD_LL_Init+0x94>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e16:	4b16      	ldr	r3, [pc, #88]	@ (8007e70 <USBD_LL_Init+0x94>)
 8007e18:	2202      	movs	r2, #2
 8007e1a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e1c:	4b14      	ldr	r3, [pc, #80]	@ (8007e70 <USBD_LL_Init+0x94>)
 8007e1e:	2200      	movs	r2, #0
 8007e20:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007e22:	4b13      	ldr	r3, [pc, #76]	@ (8007e70 <USBD_LL_Init+0x94>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007e28:	4b11      	ldr	r3, [pc, #68]	@ (8007e70 <USBD_LL_Init+0x94>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007e2e:	4b10      	ldr	r3, [pc, #64]	@ (8007e70 <USBD_LL_Init+0x94>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007e34:	4b0e      	ldr	r3, [pc, #56]	@ (8007e70 <USBD_LL_Init+0x94>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007e3a:	480d      	ldr	r0, [pc, #52]	@ (8007e70 <USBD_LL_Init+0x94>)
 8007e3c:	f7fa f81f 	bl	8001e7e <HAL_PCD_Init>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007e46:	f7f8 fcd1 	bl	80007ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007e4a:	2180      	movs	r1, #128	@ 0x80
 8007e4c:	4808      	ldr	r0, [pc, #32]	@ (8007e70 <USBD_LL_Init+0x94>)
 8007e4e:	f7fb fa4c 	bl	80032ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e52:	2240      	movs	r2, #64	@ 0x40
 8007e54:	2100      	movs	r1, #0
 8007e56:	4806      	ldr	r0, [pc, #24]	@ (8007e70 <USBD_LL_Init+0x94>)
 8007e58:	f7fb fa00 	bl	800325c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e5c:	2280      	movs	r2, #128	@ 0x80
 8007e5e:	2101      	movs	r1, #1
 8007e60:	4803      	ldr	r0, [pc, #12]	@ (8007e70 <USBD_LL_Init+0x94>)
 8007e62:	f7fb f9fb 	bl	800325c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	200016ec 	.word	0x200016ec

08007e74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fa f906 	bl	800209c <HAL_PCD_Start>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 f942 	bl	8008120 <USBD_Get_USB_Status>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	4608      	mov	r0, r1
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	4603      	mov	r3, r0
 8007eba:	70fb      	strb	r3, [r7, #3]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70bb      	strb	r3, [r7, #2]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ed2:	78bb      	ldrb	r3, [r7, #2]
 8007ed4:	883a      	ldrh	r2, [r7, #0]
 8007ed6:	78f9      	ldrb	r1, [r7, #3]
 8007ed8:	f7fa fdda 	bl	8002a90 <HAL_PCD_EP_Open>
 8007edc:	4603      	mov	r3, r0
 8007ede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 f91c 	bl	8008120 <USBD_Get_USB_Status>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	460b      	mov	r3, r1
 8007f00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f10:	78fa      	ldrb	r2, [r7, #3]
 8007f12:	4611      	mov	r1, r2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fa fe25 	bl	8002b64 <HAL_PCD_EP_Close>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 f8fd 	bl	8008120 <USBD_Get_USB_Status>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f4e:	78fa      	ldrb	r2, [r7, #3]
 8007f50:	4611      	mov	r1, r2
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fa fedd 	bl	8002d12 <HAL_PCD_EP_SetStall>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 f8de 	bl	8008120 <USBD_Get_USB_Status>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f8c:	78fa      	ldrb	r2, [r7, #3]
 8007f8e:	4611      	mov	r1, r2
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fa ff21 	bl	8002dd8 <HAL_PCD_EP_ClrStall>
 8007f96:	4603      	mov	r3, r0
 8007f98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 f8bf 	bl	8008120 <USBD_Get_USB_Status>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	da0b      	bge.n	8007fe4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fd2:	68f9      	ldr	r1, [r7, #12]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	00db      	lsls	r3, r3, #3
 8007fd8:	4413      	add	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	440b      	add	r3, r1
 8007fde:	3316      	adds	r3, #22
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	e00b      	b.n	8007ffc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fea:	68f9      	ldr	r1, [r7, #12]
 8007fec:	4613      	mov	r3, r2
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	4413      	add	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	440b      	add	r3, r1
 8007ff6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007ffa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008022:	78fa      	ldrb	r2, [r7, #3]
 8008024:	4611      	mov	r1, r2
 8008026:	4618      	mov	r0, r3
 8008028:	f7fa fd0e 	bl	8002a48 <HAL_PCD_SetAddress>
 800802c:	4603      	mov	r3, r0
 800802e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	4618      	mov	r0, r3
 8008034:	f000 f874 	bl	8008120 <USBD_Get_USB_Status>
 8008038:	4603      	mov	r3, r0
 800803a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800803c:	7bbb      	ldrb	r3, [r7, #14]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b086      	sub	sp, #24
 800804a:	af00      	add	r7, sp, #0
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	603b      	str	r3, [r7, #0]
 8008052:	460b      	mov	r3, r1
 8008054:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008064:	7af9      	ldrb	r1, [r7, #11]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	f7fa fe18 	bl	8002c9e <HAL_PCD_EP_Transmit>
 800806e:	4603      	mov	r3, r0
 8008070:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	4618      	mov	r0, r3
 8008076:	f000 f853 	bl	8008120 <USBD_Get_USB_Status>
 800807a:	4603      	mov	r3, r0
 800807c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800807e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3718      	adds	r7, #24
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	607a      	str	r2, [r7, #4]
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	460b      	mov	r3, r1
 8008096:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80080a6:	7af9      	ldrb	r1, [r7, #11]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	f7fa fda4 	bl	8002bf8 <HAL_PCD_EP_Receive>
 80080b0:	4603      	mov	r3, r0
 80080b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 f832 	bl	8008120 <USBD_Get_USB_Status>
 80080bc:	4603      	mov	r3, r0
 80080be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b082      	sub	sp, #8
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	460b      	mov	r3, r1
 80080d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080dc:	78fa      	ldrb	r2, [r7, #3]
 80080de:	4611      	mov	r1, r2
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fa fdc4 	bl	8002c6e <HAL_PCD_EP_GetRxCount>
 80080e6:	4603      	mov	r3, r0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080f8:	4b03      	ldr	r3, [pc, #12]	@ (8008108 <USBD_static_malloc+0x18>)
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	20001bd0 	.word	0x20001bd0

0800810c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]

}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800812e:	79fb      	ldrb	r3, [r7, #7]
 8008130:	2b03      	cmp	r3, #3
 8008132:	d817      	bhi.n	8008164 <USBD_Get_USB_Status+0x44>
 8008134:	a201      	add	r2, pc, #4	@ (adr r2, 800813c <USBD_Get_USB_Status+0x1c>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	0800814d 	.word	0x0800814d
 8008140:	08008153 	.word	0x08008153
 8008144:	08008159 	.word	0x08008159
 8008148:	0800815f 	.word	0x0800815f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	73fb      	strb	r3, [r7, #15]
    break;
 8008150:	e00b      	b.n	800816a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008152:	2303      	movs	r3, #3
 8008154:	73fb      	strb	r3, [r7, #15]
    break;
 8008156:	e008      	b.n	800816a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008158:	2301      	movs	r3, #1
 800815a:	73fb      	strb	r3, [r7, #15]
    break;
 800815c:	e005      	b.n	800816a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800815e:	2303      	movs	r3, #3
 8008160:	73fb      	strb	r3, [r7, #15]
    break;
 8008162:	e002      	b.n	800816a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008164:	2303      	movs	r3, #3
 8008166:	73fb      	strb	r3, [r7, #15]
    break;
 8008168:	bf00      	nop
  }
  return usb_status;
 800816a:	7bfb      	ldrb	r3, [r7, #15]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <memset>:
 8008178:	4402      	add	r2, r0
 800817a:	4603      	mov	r3, r0
 800817c:	4293      	cmp	r3, r2
 800817e:	d100      	bne.n	8008182 <memset+0xa>
 8008180:	4770      	bx	lr
 8008182:	f803 1b01 	strb.w	r1, [r3], #1
 8008186:	e7f9      	b.n	800817c <memset+0x4>

08008188 <__libc_init_array>:
 8008188:	b570      	push	{r4, r5, r6, lr}
 800818a:	4d0d      	ldr	r5, [pc, #52]	@ (80081c0 <__libc_init_array+0x38>)
 800818c:	4c0d      	ldr	r4, [pc, #52]	@ (80081c4 <__libc_init_array+0x3c>)
 800818e:	1b64      	subs	r4, r4, r5
 8008190:	10a4      	asrs	r4, r4, #2
 8008192:	2600      	movs	r6, #0
 8008194:	42a6      	cmp	r6, r4
 8008196:	d109      	bne.n	80081ac <__libc_init_array+0x24>
 8008198:	4d0b      	ldr	r5, [pc, #44]	@ (80081c8 <__libc_init_array+0x40>)
 800819a:	4c0c      	ldr	r4, [pc, #48]	@ (80081cc <__libc_init_array+0x44>)
 800819c:	f000 f818 	bl	80081d0 <_init>
 80081a0:	1b64      	subs	r4, r4, r5
 80081a2:	10a4      	asrs	r4, r4, #2
 80081a4:	2600      	movs	r6, #0
 80081a6:	42a6      	cmp	r6, r4
 80081a8:	d105      	bne.n	80081b6 <__libc_init_array+0x2e>
 80081aa:	bd70      	pop	{r4, r5, r6, pc}
 80081ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b0:	4798      	blx	r3
 80081b2:	3601      	adds	r6, #1
 80081b4:	e7ee      	b.n	8008194 <__libc_init_array+0xc>
 80081b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ba:	4798      	blx	r3
 80081bc:	3601      	adds	r6, #1
 80081be:	e7f2      	b.n	80081a6 <__libc_init_array+0x1e>
 80081c0:	08008258 	.word	0x08008258
 80081c4:	08008258 	.word	0x08008258
 80081c8:	08008258 	.word	0x08008258
 80081cc:	0800825c 	.word	0x0800825c

080081d0 <_init>:
 80081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d2:	bf00      	nop
 80081d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d6:	bc08      	pop	{r3}
 80081d8:	469e      	mov	lr, r3
 80081da:	4770      	bx	lr

080081dc <_fini>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	bf00      	nop
 80081e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e2:	bc08      	pop	{r3}
 80081e4:	469e      	mov	lr, r3
 80081e6:	4770      	bx	lr
