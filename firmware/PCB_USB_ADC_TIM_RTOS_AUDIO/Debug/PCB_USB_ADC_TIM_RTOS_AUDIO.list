
PCB_USB_ADC_TIM_RTOS_AUDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f49c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800f5dc  0800f5dc  000105dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f7e4  0800f7e4  000107e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f7ec  0800f7ec  000107ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f7f0  0800f7f0  000107f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000158  20000008  0800f7f4  00011008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000aaa0  20000160  0800f94c  00011160  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000ac00  0800f94c  00011c00  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00011160  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029cad  00000000  00000000  00011190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005c3a  00000000  00000000  0003ae3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002798  00000000  00000000  00040a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001e20  00000000  00000000  00043210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000776b  00000000  00000000  00045030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028ad8  00000000  00000000  0004c79b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f9468  00000000  00000000  00075273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0016e6db  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ac20  00000000  00000000  0016e720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  00179340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000160 	.word	0x20000160
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f5c4 	.word	0x0800f5c4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000164 	.word	0x20000164
 800017c:	0800f5c4 	.word	0x0800f5c4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800022c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800022e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4313      	orrs	r3, r2
 8000236:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800023c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4013      	ands	r3, r2
 8000242:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000244:	68fb      	ldr	r3, [r7, #12]
}
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr

08000252 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000252:	b480      	push	{r7}
 8000254:	b085      	sub	sp, #20
 8000256:	af00      	add	r7, sp, #0
 8000258:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800025a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800025e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000260:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4313      	orrs	r3, r2
 8000268:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800026a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800026e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4013      	ands	r3, r2
 8000274:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000276:	68fb      	ldr	r3, [r7, #12]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr

08000284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000288:	f000 fcbe 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028c:	f000 f864 	bl	8000358 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000290:	f000 f8cc 	bl	800042c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000294:	f000 f9ac 	bl	80005f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000298:	f000 f998 	bl	80005cc <MX_DMA_Init>
  MX_ADC1_Init();
 800029c:	f000 f8e4 	bl	8000468 <MX_ADC1_Init>
  MX_TIM2_Init();
 80002a0:	f000 f946 	bl	8000530 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  test++;
 80002a4:	4b1d      	ldr	r3, [pc, #116]	@ (800031c <main+0x98>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	4b1b      	ldr	r3, [pc, #108]	@ (800031c <main+0x98>)
 80002ae:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_reading, 1);
 80002b0:	2201      	movs	r2, #1
 80002b2:	491b      	ldr	r1, [pc, #108]	@ (8000320 <main+0x9c>)
 80002b4:	481b      	ldr	r0, [pc, #108]	@ (8000324 <main+0xa0>)
 80002b6:	f001 f827 	bl	8001308 <HAL_ADC_Start_DMA>
  test++;
 80002ba:	4b18      	ldr	r3, [pc, #96]	@ (800031c <main+0x98>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	3301      	adds	r3, #1
 80002c0:	b2da      	uxtb	r2, r3
 80002c2:	4b16      	ldr	r3, [pc, #88]	@ (800031c <main+0x98>)
 80002c4:	701a      	strb	r2, [r3, #0]
  status = HAL_TIM_Base_Start_IT(&htim2);
 80002c6:	4818      	ldr	r0, [pc, #96]	@ (8000328 <main+0xa4>)
 80002c8:	f005 ffc2 	bl	8006250 <HAL_TIM_Base_Start_IT>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	4b16      	ldr	r3, [pc, #88]	@ (800032c <main+0xa8>)
 80002d2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002d4:	f00a f9cc 	bl	800a670 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of TransmitMutex */
  TransmitMutexHandle = osMutexNew(&TransmitMutex_attributes);
 80002d8:	4815      	ldr	r0, [pc, #84]	@ (8000330 <main+0xac>)
 80002da:	f00a fb7c 	bl	800a9d6 <osMutexNew>
 80002de:	4603      	mov	r3, r0
 80002e0:	4a14      	ldr	r2, [pc, #80]	@ (8000334 <main+0xb0>)
 80002e2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of AudioQueue */
  AudioQueueHandle = osMessageQueueNew (1, sizeof(uint8_t*), &AudioQueue_attributes);
 80002e4:	4a14      	ldr	r2, [pc, #80]	@ (8000338 <main+0xb4>)
 80002e6:	2104      	movs	r1, #4
 80002e8:	2001      	movs	r0, #1
 80002ea:	f00a fc82 	bl	800abf2 <osMessageQueueNew>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4a12      	ldr	r2, [pc, #72]	@ (800033c <main+0xb8>)
 80002f2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002f4:	4a12      	ldr	r2, [pc, #72]	@ (8000340 <main+0xbc>)
 80002f6:	2100      	movs	r1, #0
 80002f8:	4812      	ldr	r0, [pc, #72]	@ (8000344 <main+0xc0>)
 80002fa:	f00a fa03 	bl	800a704 <osThreadNew>
 80002fe:	4603      	mov	r3, r0
 8000300:	4a11      	ldr	r2, [pc, #68]	@ (8000348 <main+0xc4>)
 8000302:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(task1_handler, NULL, &Task1_attributes);
 8000304:	4a11      	ldr	r2, [pc, #68]	@ (800034c <main+0xc8>)
 8000306:	2100      	movs	r1, #0
 8000308:	4811      	ldr	r0, [pc, #68]	@ (8000350 <main+0xcc>)
 800030a:	f00a f9fb 	bl	800a704 <osThreadNew>
 800030e:	4603      	mov	r3, r0
 8000310:	4a10      	ldr	r2, [pc, #64]	@ (8000354 <main+0xd0>)
 8000312:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000314:	f00a f9d0 	bl	800a6b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000318:	bf00      	nop
 800031a:	e7fd      	b.n	8000318 <main+0x94>
 800031c:	2000029e 	.word	0x2000029e
 8000320:	2000029c 	.word	0x2000029c
 8000324:	2000017c 	.word	0x2000017c
 8000328:	20000240 	.word	0x20000240
 800032c:	20000008 	.word	0x20000008
 8000330:	0800f700 	.word	0x0800f700
 8000334:	20000298 	.word	0x20000298
 8000338:	0800f6e8 	.word	0x0800f6e8
 800033c:	20000294 	.word	0x20000294
 8000340:	0800f6a0 	.word	0x0800f6a0
 8000344:	08000689 	.word	0x08000689
 8000348:	2000028c 	.word	0x2000028c
 800034c:	0800f6c4 	.word	0x0800f6c4
 8000350:	08000699 	.word	0x08000699
 8000354:	20000290 	.word	0x20000290

08000358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b09a      	sub	sp, #104	@ 0x68
 800035c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035e:	f107 0320 	add.w	r3, r7, #32
 8000362:	2248      	movs	r2, #72	@ 0x48
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f00e fc50 	bl	800ec0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
 8000378:	611a      	str	r2, [r3, #16]
 800037a:	615a      	str	r2, [r3, #20]
 800037c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800037e:	4b2a      	ldr	r3, [pc, #168]	@ (8000428 <SystemClock_Config+0xd0>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000386:	4a28      	ldr	r2, [pc, #160]	@ (8000428 <SystemClock_Config+0xd0>)
 8000388:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800038c:	6013      	str	r3, [r2, #0]
 800038e:	4b26      	ldr	r3, [pc, #152]	@ (8000428 <SystemClock_Config+0xd0>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000396:	603b      	str	r3, [r7, #0]
 8000398:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800039a:	2362      	movs	r3, #98	@ 0x62
 800039c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003a4:	2301      	movs	r3, #1
 80003a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003a8:	2301      	movs	r3, #1
 80003aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ac:	2340      	movs	r3, #64	@ 0x40
 80003ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80003b0:	2300      	movs	r3, #0
 80003b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003b4:	2360      	movs	r3, #96	@ 0x60
 80003b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b8:	2302      	movs	r3, #2
 80003ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003bc:	2301      	movs	r3, #1
 80003be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80003c4:	2320      	movs	r3, #32
 80003c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80003cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003ce:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80003d2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80003d8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003da:	f107 0320 	add.w	r3, r7, #32
 80003de:	4618      	mov	r0, r3
 80003e0:	f004 fc88 	bl	8004cf4 <HAL_RCC_OscConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003ea:	f000 f993 	bl	8000714 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80003ee:	236f      	movs	r3, #111	@ 0x6f
 80003f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f2:	2303      	movs	r3, #3
 80003f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000402:	2380      	movs	r3, #128	@ 0x80
 8000404:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2103      	movs	r1, #3
 800040e:	4618      	mov	r0, r3
 8000410:	f004 ffe4 	bl	80053dc <HAL_RCC_ClockConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800041a:	f000 f97b 	bl	8000714 <Error_Handler>
  }
}
 800041e:	bf00      	nop
 8000420:	3768      	adds	r7, #104	@ 0x68
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	58000400 	.word	0x58000400

0800042c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b094      	sub	sp, #80	@ 0x50
 8000430:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000432:	463b      	mov	r3, r7
 8000434:	2250      	movs	r2, #80	@ 0x50
 8000436:	2100      	movs	r1, #0
 8000438:	4618      	mov	r0, r3
 800043a:	f00e fbe7 	bl	800ec0c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800043e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000442:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000444:	2300      	movs	r3, #0
 8000446:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000448:	2310      	movs	r3, #16
 800044a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800044c:	463b      	mov	r3, r7
 800044e:	4618      	mov	r0, r3
 8000450:	f005 fc1f 	bl	8005c92 <HAL_RCCEx_PeriphCLKConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800045a:	f000 f95b 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800045e:	bf00      	nop
 8000460:	3750      	adds	r7, #80	@ 0x50
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800046e:	463b      	mov	r3, r7
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
 800047a:	611a      	str	r2, [r3, #16]
 800047c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800047e:	4b29      	ldr	r3, [pc, #164]	@ (8000524 <MX_ADC1_Init+0xbc>)
 8000480:	4a29      	ldr	r2, [pc, #164]	@ (8000528 <MX_ADC1_Init+0xc0>)
 8000482:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000484:	4b27      	ldr	r3, [pc, #156]	@ (8000524 <MX_ADC1_Init+0xbc>)
 8000486:	2200      	movs	r2, #0
 8000488:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800048a:	4b26      	ldr	r3, [pc, #152]	@ (8000524 <MX_ADC1_Init+0xbc>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000490:	4b24      	ldr	r3, [pc, #144]	@ (8000524 <MX_ADC1_Init+0xbc>)
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000496:	4b23      	ldr	r3, [pc, #140]	@ (8000524 <MX_ADC1_Init+0xbc>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800049c:	4b21      	ldr	r3, [pc, #132]	@ (8000524 <MX_ADC1_Init+0xbc>)
 800049e:	2204      	movs	r2, #4
 80004a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004a2:	4b20      	ldr	r3, [pc, #128]	@ (8000524 <MX_ADC1_Init+0xbc>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000524 <MX_ADC1_Init+0xbc>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80004ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000524 <MX_ADC1_Init+0xbc>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000524 <MX_ADC1_Init+0xbc>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004bc:	4b19      	ldr	r3, [pc, #100]	@ (8000524 <MX_ADC1_Init+0xbc>)
 80004be:	2200      	movs	r2, #0
 80004c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004c2:	4b18      	ldr	r3, [pc, #96]	@ (8000524 <MX_ADC1_Init+0xbc>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80004c8:	4b16      	ldr	r3, [pc, #88]	@ (8000524 <MX_ADC1_Init+0xbc>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004d0:	4b14      	ldr	r3, [pc, #80]	@ (8000524 <MX_ADC1_Init+0xbc>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004d6:	4b13      	ldr	r3, [pc, #76]	@ (8000524 <MX_ADC1_Init+0xbc>)
 80004d8:	2200      	movs	r2, #0
 80004da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004de:	4811      	ldr	r0, [pc, #68]	@ (8000524 <MX_ADC1_Init+0xbc>)
 80004e0:	f000 fdc6 	bl	8001070 <HAL_ADC_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80004ea:	f000 f913 	bl	8000714 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004ee:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <MX_ADC1_Init+0xc4>)
 80004f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004f2:	2306      	movs	r3, #6
 80004f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80004f6:	2306      	movs	r3, #6
 80004f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004fa:	237f      	movs	r3, #127	@ 0x7f
 80004fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004fe:	2304      	movs	r3, #4
 8000500:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000506:	463b      	mov	r3, r7
 8000508:	4619      	mov	r1, r3
 800050a:	4806      	ldr	r0, [pc, #24]	@ (8000524 <MX_ADC1_Init+0xbc>)
 800050c:	f001 f95e 	bl	80017cc <HAL_ADC_ConfigChannel>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000516:	f000 f8fd 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	3718      	adds	r7, #24
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	2000017c 	.word	0x2000017c
 8000528:	50040000 	.word	0x50040000
 800052c:	14f00020 	.word	0x14f00020

08000530 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800054e:	4b1d      	ldr	r3, [pc, #116]	@ (80005c4 <MX_TIM2_Init+0x94>)
 8000550:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000554:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000556:	4b1b      	ldr	r3, [pc, #108]	@ (80005c4 <MX_TIM2_Init+0x94>)
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800055c:	4b19      	ldr	r3, [pc, #100]	@ (80005c4 <MX_TIM2_Init+0x94>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2560000-1;
 8000562:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <MX_TIM2_Init+0x94>)
 8000564:	4a18      	ldr	r2, [pc, #96]	@ (80005c8 <MX_TIM2_Init+0x98>)
 8000566:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000568:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <MX_TIM2_Init+0x94>)
 800056a:	2200      	movs	r2, #0
 800056c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800056e:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <MX_TIM2_Init+0x94>)
 8000570:	2280      	movs	r2, #128	@ 0x80
 8000572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000574:	4813      	ldr	r0, [pc, #76]	@ (80005c4 <MX_TIM2_Init+0x94>)
 8000576:	f005 fe13 	bl	80061a0 <HAL_TIM_Base_Init>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000580:	f000 f8c8 	bl	8000714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000584:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000588:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	4619      	mov	r1, r3
 8000590:	480c      	ldr	r0, [pc, #48]	@ (80005c4 <MX_TIM2_Init+0x94>)
 8000592:	f005 ffb2 	bl	80064fa <HAL_TIM_ConfigClockSource>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800059c:	f000 f8ba 	bl	8000714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80005a0:	2320      	movs	r3, #32
 80005a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	4619      	mov	r1, r3
 80005ac:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <MX_TIM2_Init+0x94>)
 80005ae:	f006 f99b 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80005b8:	f000 f8ac 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000240 	.word	0x20000240
 80005c8:	00270fff 	.word	0x00270fff

080005cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005d0:	2004      	movs	r0, #4
 80005d2:	f7ff fe25 	bl	8000220 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005d6:	2001      	movs	r0, #1
 80005d8:	f7ff fe22 	bl	8000220 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2105      	movs	r1, #5
 80005e0:	200b      	movs	r0, #11
 80005e2:	f001 feb1 	bl	8002348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005e6:	200b      	movs	r0, #11
 80005e8:	f001 fec8 	bl	800237c <HAL_NVIC_EnableIRQ>

}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000604:	2004      	movs	r0, #4
 8000606:	f7ff fe24 	bl	8000252 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	2001      	movs	r0, #1
 800060c:	f7ff fe21 	bl	8000252 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000610:	2002      	movs	r0, #2
 8000612:	f7ff fe1e 	bl	8000252 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HEL_Pin|HELL_Pin|HELLO_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2138      	movs	r1, #56	@ 0x38
 800061a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061e:	f002 fa9f 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HEL_Pin HELL_Pin HELLO_Pin */
  GPIO_InitStruct.Pin = HEL_Pin|HELL_Pin|HELLO_Pin;
 8000622:	2338      	movs	r3, #56	@ 0x38
 8000624:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063a:	f002 f921 	bl	8002880 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800063e:	bf00      	nop
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <USB_transmit>:

/* USER CODE BEGIN 4 */
void USB_transmit(uint8_t *buffer, size_t length){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
	osStatus_t status;

	osMutexAcquire(TransmitMutexHandle, osWaitForever);
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <USB_transmit+0x3c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f04f 31ff 	mov.w	r1, #4294967295
 800065a:	4618      	mov	r0, r3
 800065c:	f00a fa41 	bl	800aae2 <osMutexAcquire>
	status = CDC_Transmit_FS(buffer, length);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b29b      	uxth	r3, r3
 8000664:	4619      	mov	r1, r3
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f00d fe1c 	bl	800e2a4 <CDC_Transmit_FS>
 800066c:	4603      	mov	r3, r0
 800066e:	60fb      	str	r3, [r7, #12]
	osMutexRelease(TransmitMutexHandle);
 8000670:	4b04      	ldr	r3, [pc, #16]	@ (8000684 <USB_transmit+0x3c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f00a fa7f 	bl	800ab78 <osMutexRelease>
		//sprintf(msg, "Error, status code: %d \r\n", status);
		//sprintf(msg, "Error");
		//HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);

	}
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000298 	.word	0x20000298

08000688 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8000690:	f00d fd4a 	bl	800e128 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osThreadExit();
 8000694:	f00a f8c8 	bl	800a828 <osThreadExit>

08000698 <task1_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task1_handler */
void task1_handler(void *argument)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task1_handler */
	uint8_t buffer[20];
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 80006a0:	f04f 32ff 	mov.w	r2, #4294967295
 80006a4:	2100      	movs	r1, #0
 80006a6:	2001      	movs	r0, #1
 80006a8:	f00a f914 	bl	800a8d4 <osThreadFlagsWait>
	  sprintf((char*)buffer,"%d\r\n",ADC_reading);
 80006ac:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <task1_handler+0x38>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	4907      	ldr	r1, [pc, #28]	@ (80006d4 <task1_handler+0x3c>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f00e fa85 	bl	800ebc8 <siprintf>
	  USB_transmit(buffer, sizeof(buffer));
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2114      	movs	r1, #20
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ffbf 	bl	8000648 <USB_transmit>
	  osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 80006ca:	bf00      	nop
 80006cc:	e7e8      	b.n	80006a0 <task1_handler+0x8>
 80006ce:	bf00      	nop
 80006d0:	2000029c 	.word	0x2000029c
 80006d4:	0800f60c 	.word	0x0800f60c

080006d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a09      	ldr	r2, [pc, #36]	@ (800070c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d101      	bne.n	80006ee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80006ea:	f000 faad 	bl	8000c48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006f6:	d105      	bne.n	8000704 <HAL_TIM_PeriodElapsedCallback+0x2c>
		osThreadFlagsSet(Task1Handle, 0x01);
 80006f8:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2101      	movs	r1, #1
 80006fe:	4618      	mov	r0, r3
 8000700:	f00a f89a 	bl	800a838 <osThreadFlagsSet>
  		sample_count = 0;
  		osThreadFlagsSet(Task1Handle, 0x01);
  	}*/
    }
  /* USER CODE END Callback 1 */
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40012c00 	.word	0x40012c00
 8000710:	20000290 	.word	0x20000290

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <Error_Handler+0x8>

08000720 <LL_AHB2_GRP1_EnableClock>:
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800072c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800072e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4313      	orrs	r3, r2
 8000736:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800073c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4013      	ands	r3, r2
 8000742:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000744:	68fb      	ldr	r3, [r7, #12]
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000752:	b480      	push	{r7}
 8000754:	b085      	sub	sp, #20
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800075a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800075e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000760:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4313      	orrs	r3, r2
 8000768:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800076a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800076e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4013      	ands	r3, r2
 8000774:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000776:	68fb      	ldr	r3, [r7, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	210f      	movs	r1, #15
 800078c:	f06f 0001 	mvn.w	r0, #1
 8000790:	f001 fdda 	bl	8002348 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b09c      	sub	sp, #112	@ 0x70
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2250      	movs	r2, #80	@ 0x50
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f00e fa27 	bl	800ec0c <memset>
  if(hadc->Instance==ADC1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a36      	ldr	r2, [pc, #216]	@ (800089c <HAL_ADC_MspInit+0x104>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d164      	bne.n	8000892 <HAL_ADC_MspInit+0xfa>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007cc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80007ce:	2318      	movs	r3, #24
 80007d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80007d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80007d6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80007d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80007de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 80007e4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80007e8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80007ea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80007ee:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	4618      	mov	r0, r3
 80007f6:	f005 fa4c 	bl	8005c92 <HAL_RCCEx_PeriphCLKConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8000800:	f7ff ff88 	bl	8000714 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000804:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000808:	f7ff ff8a 	bl	8000720 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	2001      	movs	r0, #1
 800080e:	f7ff ff87 	bl	8000720 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000812:	2301      	movs	r3, #1
 8000814:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000816:	2303      	movs	r3, #3
 8000818:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000828:	f002 f82a 	bl	8002880 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800082c:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <HAL_ADC_MspInit+0x108>)
 800082e:	4a1d      	ldr	r2, [pc, #116]	@ (80008a4 <HAL_ADC_MspInit+0x10c>)
 8000830:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000832:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <HAL_ADC_MspInit+0x108>)
 8000834:	2205      	movs	r2, #5
 8000836:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <HAL_ADC_MspInit+0x108>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800083e:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <HAL_ADC_MspInit+0x108>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000844:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <HAL_ADC_MspInit+0x108>)
 8000846:	2280      	movs	r2, #128	@ 0x80
 8000848:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800084a:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <HAL_ADC_MspInit+0x108>)
 800084c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000850:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <HAL_ADC_MspInit+0x108>)
 8000854:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000858:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <HAL_ADC_MspInit+0x108>)
 800085c:	2220      	movs	r2, #32
 800085e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <HAL_ADC_MspInit+0x108>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000866:	480e      	ldr	r0, [pc, #56]	@ (80008a0 <HAL_ADC_MspInit+0x108>)
 8000868:	f001 fd96 	bl	8002398 <HAL_DMA_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8000872:	f7ff ff4f 	bl	8000714 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a09      	ldr	r2, [pc, #36]	@ (80008a0 <HAL_ADC_MspInit+0x108>)
 800087a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800087c:	4a08      	ldr	r2, [pc, #32]	@ (80008a0 <HAL_ADC_MspInit+0x108>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2105      	movs	r1, #5
 8000886:	2012      	movs	r0, #18
 8000888:	f001 fd5e 	bl	8002348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800088c:	2012      	movs	r0, #18
 800088e:	f001 fd75 	bl	800237c <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000892:	bf00      	nop
 8000894:	3770      	adds	r7, #112	@ 0x70
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	50040000 	.word	0x50040000
 80008a0:	200001e0 	.word	0x200001e0
 80008a4:	40020008 	.word	0x40020008

080008a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008b8:	d10a      	bne.n	80008d0 <HAL_TIM_Base_MspInit+0x28>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff ff49 	bl	8000752 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2105      	movs	r1, #5
 80008c4:	201c      	movs	r0, #28
 80008c6:	f001 fd3f 	bl	8002348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008ca:	201c      	movs	r0, #28
 80008cc:	f001 fd56 	bl	800237c <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80008e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4013      	ands	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008fc:	68fb      	ldr	r3, [r7, #12]
}
 80008fe:	bf00      	nop
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08e      	sub	sp, #56	@ 0x38
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800091c:	2300      	movs	r3, #0
 800091e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000922:	2200      	movs	r2, #0
 8000924:	6879      	ldr	r1, [r7, #4]
 8000926:	2019      	movs	r0, #25
 8000928:	f001 fd0e 	bl	8002348 <HAL_NVIC_SetPriority>
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800092c:	2019      	movs	r0, #25
 800092e:	f001 fd25 	bl	800237c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000932:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000936:	f7ff ffcf 	bl	80008d8 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800093a:	f107 020c 	add.w	r2, r7, #12
 800093e:	f107 0310 	add.w	r3, r7, #16
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f004 ff21 	bl	800578c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800094a:	f004 ff09 	bl	8005760 <HAL_RCC_GetPCLK2Freq>
 800094e:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000952:	4a21      	ldr	r2, [pc, #132]	@ (80009d8 <HAL_InitTick+0xcc>)
 8000954:	fba2 2303 	umull	r2, r3, r2, r3
 8000958:	0c9b      	lsrs	r3, r3, #18
 800095a:	3b01      	subs	r3, #1
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800095e:	4b1f      	ldr	r3, [pc, #124]	@ (80009dc <HAL_InitTick+0xd0>)
 8000960:	4a1f      	ldr	r2, [pc, #124]	@ (80009e0 <HAL_InitTick+0xd4>)
 8000962:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000964:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <HAL_InitTick+0xd0>)
 8000966:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800096a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800096c:	4a1b      	ldr	r2, [pc, #108]	@ (80009dc <HAL_InitTick+0xd0>)
 800096e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000970:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000972:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <HAL_InitTick+0xd0>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <HAL_InitTick+0xd0>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800097e:	4817      	ldr	r0, [pc, #92]	@ (80009dc <HAL_InitTick+0xd0>)
 8000980:	f005 fc0e 	bl	80061a0 <HAL_TIM_Base_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800098a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800098e:	2b00      	cmp	r3, #0
 8000990:	d11b      	bne.n	80009ca <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000992:	4812      	ldr	r0, [pc, #72]	@ (80009dc <HAL_InitTick+0xd0>)
 8000994:	f005 fc5c 	bl	8006250 <HAL_TIM_Base_Start_IT>
 8000998:	4603      	mov	r3, r0
 800099a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 800099e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d111      	bne.n	80009ca <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009a6:	2019      	movs	r0, #25
 80009a8:	f001 fce8 	bl	800237c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b0f      	cmp	r3, #15
 80009b0:	d808      	bhi.n	80009c4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80009b2:	2200      	movs	r2, #0
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	2019      	movs	r0, #25
 80009b8:	f001 fcc6 	bl	8002348 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009bc:	4a09      	ldr	r2, [pc, #36]	@ (80009e4 <HAL_InitTick+0xd8>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
 80009c2:	e002      	b.n	80009ca <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

 /* Return function status */
  return status;
 80009ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3738      	adds	r7, #56	@ 0x38
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	431bde83 	.word	0x431bde83
 80009dc:	200002a0 	.word	0x200002a0
 80009e0:	40012c00 	.word	0x40012c00
 80009e4:	20000010 	.word	0x20000010

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <NMI_Handler+0x4>

080009f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <MemManage_Handler+0x4>

08000a00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <DMA1_Channel1_IRQHandler+0x10>)
 8000a26:	f001 fdda 	bl	80025de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200001e0 	.word	0x200001e0

08000a34 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <ADC1_IRQHandler+0x10>)
 8000a3a:	f000 fce9 	bl	8001410 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000017c 	.word	0x2000017c

08000a48 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a4c:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <USB_LP_IRQHandler+0x10>)
 8000a4e:	f002 f98f 	bl	8002d70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2000a5bc 	.word	0x2000a5bc

08000a5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a60:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a62:	f005 fc43 	bl	80062ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200002a0 	.word	0x200002a0

08000a70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a74:	4802      	ldr	r0, [pc, #8]	@ (8000a80 <TIM2_IRQHandler+0x10>)
 8000a76:	f005 fc39 	bl	80062ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000240 	.word	0x20000240

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ae0 <_sbrk+0x5c>)
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <_sbrk+0x60>)
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a98:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <_sbrk+0x64>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <_sbrk+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d207      	bcs.n	8000ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab4:	f00e f910 	bl	800ecd8 <__errno>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	220c      	movs	r2, #12
 8000abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	e009      	b.n	8000ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aca:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a05      	ldr	r2, [pc, #20]	@ (8000ae8 <_sbrk+0x64>)
 8000ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20030000 	.word	0x20030000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	200002ec 	.word	0x200002ec
 8000aec:	2000ac00 	.word	0x2000ac00

08000af0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000af4:	4b24      	ldr	r3, [pc, #144]	@ (8000b88 <SystemInit+0x98>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afa:	4a23      	ldr	r2, [pc, #140]	@ (8000b88 <SystemInit+0x98>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b18:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000b1c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b28:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <SystemInit+0x9c>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b3a:	f023 0305 	bic.w	r3, r3, #5
 8000b3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000b4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b4e:	f023 0301 	bic.w	r3, r3, #1
 8000b52:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b5a:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <SystemInit+0xa0>)
 8000b5c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b62:	4a0b      	ldr	r2, [pc, #44]	@ (8000b90 <SystemInit+0xa0>)
 8000b64:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00
 8000b8c:	faf6fefb 	.word	0xfaf6fefb
 8000b90:	22041000 	.word	0x22041000

08000b94 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000b94:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b96:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b98:	3304      	adds	r3, #4

08000b9a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000b9e:	d3f9      	bcc.n	8000b94 <CopyDataInit>
  bx lr
 8000ba0:	4770      	bx	lr

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000ba2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ba4:	3004      	adds	r0, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000ba6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>
  bx lr
 8000baa:	4770      	bx	lr

08000bac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bac:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb0:	f7ff ff9e 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000bb4:	480b      	ldr	r0, [pc, #44]	@ (8000be4 <LoopForever+0x6>)
 8000bb6:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <LoopForever+0xa>)
 8000bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bec <LoopForever+0xe>)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f7ff ffed 	bl	8000b9a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000bc0:	480b      	ldr	r0, [pc, #44]	@ (8000bf0 <LoopForever+0x12>)
 8000bc2:	490c      	ldr	r1, [pc, #48]	@ (8000bf4 <LoopForever+0x16>)
 8000bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf8 <LoopForever+0x1a>)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f7ff ffe7 	bl	8000b9a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000bcc:	480b      	ldr	r0, [pc, #44]	@ (8000bfc <LoopForever+0x1e>)
 8000bce:	490c      	ldr	r1, [pc, #48]	@ (8000c00 <LoopForever+0x22>)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f7ff ffe8 	bl	8000ba6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bd6:	f00e f885 	bl	800ece4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bda:	f7ff fb53 	bl	8000284 <main>

08000bde <LoopForever>:

LoopForever:
  b LoopForever
 8000bde:	e7fe      	b.n	8000bde <LoopForever>
  ldr   r0, =_estack
 8000be0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000160 	.word	0x20000160
 8000bec:	0800f7f4 	.word	0x0800f7f4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000bf0:	20030000 	.word	0x20030000
 8000bf4:	20030000 	.word	0x20030000
 8000bf8:	0800f94c 	.word	0x0800f94c
  INIT_BSS _sbss, _ebss
 8000bfc:	20000160 	.word	0x20000160
 8000c00:	2000ac00 	.word	0x2000ac00

08000c04 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <AES1_IRQHandler>
	...

08000c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c12:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <HAL_Init+0x3c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a0b      	ldr	r2, [pc, #44]	@ (8000c44 <HAL_Init+0x3c>)
 8000c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1e:	2003      	movs	r0, #3
 8000c20:	f001 fb87 	bl	8002332 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c24:	200f      	movs	r0, #15
 8000c26:	f7ff fe71 	bl	800090c <HAL_InitTick>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	e001      	b.n	8000c3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c36:	f7ff fda5 	bl	8000784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	58004000 	.word	0x58004000

08000c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	@ (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000014 	.word	0x20000014
 8000c6c:	200002f0 	.word	0x200002f0

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	@ (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	200002f0 	.word	0x200002f0

08000c88 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	@ (8000c9c <HAL_GetTickPrio+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000010 	.word	0x20000010

08000ca0 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	609a      	str	r2, [r3, #8]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3360      	adds	r3, #96	@ 0x60
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <LL_ADC_SetOffset+0x44>)
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	4313      	orrs	r3, r2
 8000d38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d40:	bf00      	nop
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	03fff000 	.word	0x03fff000

08000d50 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3360      	adds	r3, #96	@ 0x60
 8000d5e:	461a      	mov	r2, r3
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3360      	adds	r3, #96	@ 0x60
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	431a      	orrs	r2, r3
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000da6:	bf00      	nop
 8000da8:	371c      	adds	r7, #28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e000      	b.n	8000dcc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000dca:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b087      	sub	sp, #28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	3330      	adds	r3, #48	@ 0x30
 8000de8:	461a      	mov	r2, r3
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	f003 030c 	and.w	r3, r3, #12
 8000df4:	4413      	add	r3, r2
 8000df6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	f003 031f 	and.w	r3, r3, #31
 8000e02:	211f      	movs	r1, #31
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	0e9b      	lsrs	r3, r3, #26
 8000e10:	f003 011f 	and.w	r1, r3, #31
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	f003 031f 	and.w	r3, r3, #31
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000e24:	bf00      	nop
 8000e26:	371c      	adds	r7, #28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e58:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d101      	bne.n	8000e64 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000e60:	2301      	movs	r3, #1
 8000e62:	e000      	b.n	8000e66 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b087      	sub	sp, #28
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3314      	adds	r3, #20
 8000e82:	461a      	mov	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	0e5b      	lsrs	r3, r3, #25
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	4413      	add	r3, r2
 8000e90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	0d1b      	lsrs	r3, r3, #20
 8000e9a:	f003 031f 	and.w	r3, r3, #31
 8000e9e:	2107      	movs	r1, #7
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	0d1b      	lsrs	r3, r3, #20
 8000eac:	f003 031f 	and.w	r3, r3, #31
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000ebc:	bf00      	nop
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0318 	and.w	r3, r3, #24
 8000eea:	4908      	ldr	r1, [pc, #32]	@ (8000f0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000eec:	40d9      	lsrs	r1, r3
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	400b      	ands	r3, r1
 8000ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	0007ffff 	.word	0x0007ffff

08000f10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000f20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	6093      	str	r3, [r2, #8]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f48:	d101      	bne.n	8000f4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000f6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f98:	d101      	bne.n	8000f9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fc0:	f043 0201 	orr.w	r2, r3, #1
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d101      	bne.n	8000fec <LL_ADC_IsEnabled+0x18>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <LL_ADC_IsEnabled+0x1a>
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800100a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800100e:	f043 0204 	orr.w	r2, r3, #4
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	2b04      	cmp	r3, #4
 8001034:	d101      	bne.n	800103a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	2b08      	cmp	r3, #8
 800105a:	d101      	bne.n	8001060 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e12e      	b.n	80012ec <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001098:	2b00      	cmp	r3, #0
 800109a:	d109      	bne.n	80010b0 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff fb7b 	bl	8000798 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff3d 	bl	8000f34 <LL_ADC_IsDeepPowerDownEnabled>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff23 	bl	8000f10 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff58 	bl	8000f84 <LL_ADC_IsInternalRegulatorEnabled>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d115      	bne.n	8001106 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff3c 	bl	8000f5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010e4:	4b83      	ldr	r3, [pc, #524]	@ (80012f4 <HAL_ADC_Init+0x284>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	099b      	lsrs	r3, r3, #6
 80010ea:	4a83      	ldr	r2, [pc, #524]	@ (80012f8 <HAL_ADC_Init+0x288>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	099b      	lsrs	r3, r3, #6
 80010f2:	3301      	adds	r3, #1
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010f8:	e002      	b.n	8001100 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f9      	bne.n	80010fa <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff3a 	bl	8000f84 <LL_ADC_IsInternalRegulatorEnabled>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10d      	bne.n	8001132 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800111a:	f043 0210 	orr.w	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001126:	f043 0201 	orr.w	r2, r3, #1
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff73 	bl	8001022 <LL_ADC_REG_IsConversionOngoing>
 800113c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	2b00      	cmp	r3, #0
 8001148:	f040 80c7 	bne.w	80012da <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f040 80c3 	bne.w	80012da <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001158:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800115c:	f043 0202 	orr.w	r2, r3, #2
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff33 	bl	8000fd4 <LL_ADC_IsEnabled>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10b      	bne.n	800118c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001174:	4861      	ldr	r0, [pc, #388]	@ (80012fc <HAL_ADC_Init+0x28c>)
 8001176:	f7ff ff2d 	bl	8000fd4 <LL_ADC_IsEnabled>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d105      	bne.n	800118c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4619      	mov	r1, r3
 8001186:	485e      	ldr	r0, [pc, #376]	@ (8001300 <HAL_ADC_Init+0x290>)
 8001188:	f7ff fd8a 	bl	8000ca0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7e5b      	ldrb	r3, [r3, #25]
 8001190:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001196:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800119c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80011a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011aa:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80011ac:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d106      	bne.n	80011cc <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c2:	3b01      	subs	r3, #1
 80011c4:	045b      	lsls	r3, r3, #17
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d009      	beq.n	80011e8 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	4b45      	ldr	r3, [pc, #276]	@ (8001304 <HAL_ADC_Init+0x294>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	69b9      	ldr	r1, [r7, #24]
 80011f8:	430b      	orrs	r3, r1
 80011fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff0e 	bl	8001022 <LL_ADC_REG_IsConversionOngoing>
 8001206:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff1b 	bl	8001048 <LL_ADC_INJ_IsConversionOngoing>
 8001212:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d13d      	bne.n	8001296 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d13a      	bne.n	8001296 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001224:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800122c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800123c:	f023 0302 	bic.w	r3, r3, #2
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	69b9      	ldr	r1, [r7, #24]
 8001246:	430b      	orrs	r3, r1
 8001248:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001250:	2b01      	cmp	r3, #1
 8001252:	d118      	bne.n	8001286 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800125e:	f023 0304 	bic.w	r3, r3, #4
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800126a:	4311      	orrs	r1, r2
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001270:	4311      	orrs	r1, r2
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001276:	430a      	orrs	r2, r1
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0201 	orr.w	r2, r2, #1
 8001282:	611a      	str	r2, [r3, #16]
 8001284:	e007      	b.n	8001296 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0201 	bic.w	r2, r2, #1
 8001294:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d10c      	bne.n	80012b8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a4:	f023 010f 	bic.w	r1, r3, #15
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	1e5a      	subs	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80012b6:	e007      	b.n	80012c8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 020f 	bic.w	r2, r2, #15
 80012c6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012cc:	f023 0303 	bic.w	r3, r3, #3
 80012d0:	f043 0201 	orr.w	r2, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80012d8:	e007      	b.n	80012ea <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012de:	f043 0210 	orr.w	r2, r3, #16
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000000c 	.word	0x2000000c
 80012f8:	053e2d63 	.word	0x053e2d63
 80012fc:	50040000 	.word	0x50040000
 8001300:	50040300 	.word	0x50040300
 8001304:	fff0c007 	.word	0xfff0c007

08001308 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fe82 	bl	8001022 <LL_ADC_REG_IsConversionOngoing>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d167      	bne.n	80013f4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800132a:	2b01      	cmp	r3, #1
 800132c:	d101      	bne.n	8001332 <HAL_ADC_Start_DMA+0x2a>
 800132e:	2302      	movs	r3, #2
 8001330:	e063      	b.n	80013fa <HAL_ADC_Start_DMA+0xf2>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f000 fe0c 	bl	8001f58 <ADC_Enable>
 8001340:	4603      	mov	r3, r0
 8001342:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d14f      	bne.n	80013ea <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800134e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001352:	f023 0301 	bic.w	r3, r3, #1
 8001356:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001362:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d006      	beq.n	8001378 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136e:	f023 0206 	bic.w	r2, r3, #6
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	659a      	str	r2, [r3, #88]	@ 0x58
 8001376:	e002      	b.n	800137e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a20      	ldr	r2, [pc, #128]	@ (8001404 <HAL_ADC_Start_DMA+0xfc>)
 8001384:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	4a1f      	ldr	r2, [pc, #124]	@ (8001408 <HAL_ADC_Start_DMA+0x100>)
 800138c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	4a1e      	ldr	r2, [pc, #120]	@ (800140c <HAL_ADC_Start_DMA+0x104>)
 8001394:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	221c      	movs	r2, #28
 800139c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0210 	orr.w	r2, r2, #16
 80013b4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 0201 	orr.w	r2, r2, #1
 80013c4:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3340      	adds	r3, #64	@ 0x40
 80013d0:	4619      	mov	r1, r3
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f001 f887 	bl	80024e8 <HAL_DMA_Start_IT>
 80013da:	4603      	mov	r3, r0
 80013dc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fe09 	bl	8000ffa <LL_ADC_REG_StartConversion>
 80013e8:	e006      	b.n	80013f8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80013f2:	e001      	b.n	80013f8 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013f4:	2302      	movs	r3, #2
 80013f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	0800204d 	.word	0x0800204d
 8001408:	08002125 	.word	0x08002125
 800140c:	08002141 	.word	0x08002141

08001410 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d017      	beq.n	8001466 <HAL_ADC_IRQHandler+0x56>
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d012      	beq.n	8001466 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	2b00      	cmp	r3, #0
 800144a:	d105      	bne.n	8001458 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001450:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 feb3 	bl	80021c4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2202      	movs	r2, #2
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d004      	beq.n	800147a <HAL_ADC_IRQHandler+0x6a>
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001480:	2b00      	cmp	r3, #0
 8001482:	d05d      	beq.n	8001540 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d058      	beq.n	8001540 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	2b00      	cmp	r3, #0
 8001498:	d105      	bne.n	80014a6 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fc81 	bl	8000db2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d03d      	beq.n	8001532 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014c4:	d035      	beq.n	8001532 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d12e      	bne.n	8001532 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fda2 	bl	8001022 <LL_ADC_REG_IsConversionOngoing>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d11a      	bne.n	800151a <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 020c 	bic.w	r2, r2, #12
 80014f2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001504:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d112      	bne.n	8001532 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001510:	f043 0201 	orr.w	r2, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	655a      	str	r2, [r3, #84]	@ 0x54
 8001518:	e00b      	b.n	8001532 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151e:	f043 0210 	orr.w	r2, r3, #16
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152a:	f043 0201 	orr.w	r2, r3, #1
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f922 	bl	800177c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	220c      	movs	r2, #12
 800153e:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	f003 0320 	and.w	r3, r3, #32
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <HAL_ADC_IRQHandler+0x144>
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f003 0320 	and.w	r3, r3, #32
 8001550:	2b00      	cmp	r3, #0
 8001552:	d109      	bne.n	8001568 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800155a:	2b00      	cmp	r3, #0
 800155c:	d074      	beq.n	8001648 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001564:	2b00      	cmp	r3, #0
 8001566:	d06f      	beq.n	8001648 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	2b00      	cmp	r3, #0
 8001572:	d105      	bne.n	8001580 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001578:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fc61 	bl	8000e4c <LL_ADC_INJ_IsTriggerSourceSWStart>
 800158a:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fc0e 	bl	8000db2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001596:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d049      	beq.n	800163a <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <HAL_ADC_IRQHandler+0x1b0>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d041      	beq.n	800163a <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d13c      	bne.n	800163a <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ca:	2b40      	cmp	r3, #64	@ 0x40
 80015cc:	d135      	bne.n	800163a <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d12e      	bne.n	800163a <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fd31 	bl	8001048 <LL_ADC_INJ_IsConversionOngoing>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d11a      	bne.n	8001622 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80015fa:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001600:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800160c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d112      	bne.n	800163a <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001618:	f043 0201 	orr.w	r2, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001620:	e00b      	b.n	800163a <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001626:	f043 0210 	orr.w	r2, r3, #16
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001632:	f043 0201 	orr.w	r2, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 fd9a 	bl	8002174 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2260      	movs	r2, #96	@ 0x60
 8001646:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800164e:	2b00      	cmp	r3, #0
 8001650:	d011      	beq.n	8001676 <HAL_ADC_IRQHandler+0x266>
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00c      	beq.n	8001676 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001660:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f89b 	bl	80017a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2280      	movs	r2, #128	@ 0x80
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d012      	beq.n	80016a6 <HAL_ADC_IRQHandler+0x296>
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00d      	beq.n	80016a6 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800168e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 fd80 	bl	800219c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d012      	beq.n	80016d6 <HAL_ADC_IRQHandler+0x2c6>
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00d      	beq.n	80016d6 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fd72 	bl	80021b0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d02b      	beq.n	8001738 <HAL_ADC_IRQHandler+0x328>
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d026      	beq.n	8001738 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d102      	bne.n	80016f8 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80016f2:	2301      	movs	r3, #1
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	e009      	b.n	800170c <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fb97 	bl	8000e30 <LL_ADC_REG_GetDMATransfer>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8001708:	2301      	movs	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d10e      	bne.n	8001730 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001716:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001722:	f043 0202 	orr.w	r2, r3, #2
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f844 	bl	80017b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2210      	movs	r2, #16
 8001736:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800173e:	2b00      	cmp	r3, #0
 8001740:	d018      	beq.n	8001774 <HAL_ADC_IRQHandler+0x364>
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001748:	2b00      	cmp	r3, #0
 800174a:	d013      	beq.n	8001774 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001750:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175c:	f043 0208 	orr.w	r2, r3, #8
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800176c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 fd0a 	bl	8002188 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8001774:	bf00      	nop
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0b6      	sub	sp, #216	@ 0xd8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x22>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e39f      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x762>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fc11 	bl	8001022 <LL_ADC_REG_IsConversionOngoing>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 8384 	bne.w	8001f10 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	f7ff fadf 	bl	8000dd8 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fbff 	bl	8001022 <LL_ADC_REG_IsConversionOngoing>
 8001824:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fc0b 	bl	8001048 <LL_ADC_INJ_IsConversionOngoing>
 8001832:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001836:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800183a:	2b00      	cmp	r3, #0
 800183c:	f040 81a6 	bne.w	8001b8c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001840:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001844:	2b00      	cmp	r3, #0
 8001846:	f040 81a1 	bne.w	8001b8c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	6819      	ldr	r1, [r3, #0]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	461a      	mov	r2, r3
 8001858:	f7ff fb0b 	bl	8000e72 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	695a      	ldr	r2, [r3, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	2b04      	cmp	r3, #4
 800187c:	d00a      	beq.n	8001894 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	6919      	ldr	r1, [r3, #16]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800188e:	f7ff fa3b 	bl	8000d08 <LL_ADC_SetOffset>
 8001892:	e17b      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fa58 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10a      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0xf4>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fa4d 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	0e9b      	lsrs	r3, r3, #26
 80018ba:	f003 021f 	and.w	r2, r3, #31
 80018be:	e01e      	b.n	80018fe <HAL_ADC_ConfigChannel+0x132>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fa42 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80018d6:	fa93 f3a3 	rbit	r3, r3
 80018da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80018e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80018ee:	2320      	movs	r3, #32
 80018f0:	e004      	b.n	80018fc <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80018f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001906:	2b00      	cmp	r3, #0
 8001908:	d105      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x14a>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	0e9b      	lsrs	r3, r3, #26
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	e018      	b.n	8001948 <HAL_ADC_ConfigChannel+0x17c>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001922:	fa93 f3a3 	rbit	r3, r3
 8001926:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800192a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800192e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800193a:	2320      	movs	r3, #32
 800193c:	e004      	b.n	8001948 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800193e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001942:	fab3 f383 	clz	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	429a      	cmp	r2, r3
 800194a:	d106      	bne.n	800195a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fa11 	bl	8000d7c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2101      	movs	r1, #1
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff f9f5 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10a      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x1ba>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2101      	movs	r1, #1
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff f9ea 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 800197c:	4603      	mov	r3, r0
 800197e:	0e9b      	lsrs	r3, r3, #26
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	e01e      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x1f8>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2101      	movs	r1, #1
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f9df 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800199c:	fa93 f3a3 	rbit	r3, r3
 80019a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80019a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80019ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80019b4:	2320      	movs	r3, #32
 80019b6:	e004      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80019b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x210>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	0e9b      	lsrs	r3, r3, #26
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	e018      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x242>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019e8:	fa93 f3a3 	rbit	r3, r3
 80019ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80019f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80019f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80019f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8001a00:	2320      	movs	r3, #32
 8001a02:	e004      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8001a04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d106      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2200      	movs	r2, #0
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f9ae 	bl	8000d7c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2102      	movs	r1, #2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff f992 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10a      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x280>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff f987 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 8001a42:	4603      	mov	r3, r0
 8001a44:	0e9b      	lsrs	r3, r3, #26
 8001a46:	f003 021f 	and.w	r2, r3, #31
 8001a4a:	e01e      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x2be>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2102      	movs	r1, #2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f97c 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a62:	fa93 f3a3 	rbit	r3, r3
 8001a66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001a6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001a72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8001a7a:	2320      	movs	r3, #32
 8001a7c:	e004      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001a7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d105      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x2d6>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	0e9b      	lsrs	r3, r3, #26
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	e016      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x304>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001aae:	fa93 f3a3 	rbit	r3, r3
 8001ab2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001ab4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ab6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001aba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	e004      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8001ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d106      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2102      	movs	r1, #2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff f94d 	bl	8000d7c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2103      	movs	r1, #3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff f931 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10a      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x342>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2103      	movs	r1, #3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f926 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 8001b04:	4603      	mov	r3, r0
 8001b06:	0e9b      	lsrs	r3, r3, #26
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	e017      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x372>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2103      	movs	r1, #3
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff f91b 	bl	8000d50 <LL_ADC_GetOffsetChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b20:	fa93 f3a3 	rbit	r3, r3
 8001b24:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001b26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b28:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001b2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8001b30:	2320      	movs	r3, #32
 8001b32:	e003      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8001b34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d105      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x38a>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	0e9b      	lsrs	r3, r3, #26
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	e011      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x3ae>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001b64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001b68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8001b6e:	2320      	movs	r3, #32
 8001b70:	e003      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8001b72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d106      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2200      	movs	r2, #0
 8001b84:	2103      	movs	r1, #3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f8f8 	bl	8000d7c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fa1f 	bl	8000fd4 <LL_ADC_IsEnabled>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f040 81c2 	bne.w	8001f22 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	6819      	ldr	r1, [r3, #0]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	461a      	mov	r2, r3
 8001bac:	f7ff f98c 	bl	8000ec8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4a8e      	ldr	r2, [pc, #568]	@ (8001df0 <HAL_ADC_ConfigChannel+0x624>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	f040 8130 	bne.w	8001e1c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10b      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x418>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0e9b      	lsrs	r3, r3, #26
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f003 031f 	and.w	r3, r3, #31
 8001bd8:	2b09      	cmp	r3, #9
 8001bda:	bf94      	ite	ls
 8001bdc:	2301      	movls	r3, #1
 8001bde:	2300      	movhi	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	e019      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x44c>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001bf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bf4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001bf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8001bfc:	2320      	movs	r3, #32
 8001bfe:	e003      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8001c00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	2b09      	cmp	r3, #9
 8001c10:	bf94      	ite	ls
 8001c12:	2301      	movls	r3, #1
 8001c14:	2300      	movhi	r3, #0
 8001c16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d079      	beq.n	8001d10 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d107      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x46c>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0e9b      	lsrs	r3, r3, #26
 8001c2e:	3301      	adds	r3, #1
 8001c30:	069b      	lsls	r3, r3, #26
 8001c32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c36:	e015      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x498>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c48:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001c50:	2320      	movs	r3, #32
 8001c52:	e003      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	069b      	lsls	r3, r3, #26
 8001c60:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d109      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x4b8>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0e9b      	lsrs	r3, r3, #26
 8001c76:	3301      	adds	r3, #1
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	e017      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x4e8>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c94:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001c96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	e003      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8001ca0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	2101      	movs	r1, #1
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	ea42 0103 	orr.w	r1, r2, r3
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10a      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x50e>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0e9b      	lsrs	r3, r3, #26
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	051b      	lsls	r3, r3, #20
 8001cd8:	e018      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x540>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001cf2:	2320      	movs	r3, #32
 8001cf4:	e003      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cf8:	fab3 f383 	clz	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	e080      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x560>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0e9b      	lsrs	r3, r3, #26
 8001d22:	3301      	adds	r3, #1
 8001d24:	069b      	lsls	r3, r3, #26
 8001d26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d2a:	e015      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x58c>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d3c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8001d44:	2320      	movs	r3, #32
 8001d46:	e003      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8001d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	3301      	adds	r3, #1
 8001d52:	069b      	lsls	r3, r3, #26
 8001d54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d109      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x5ac>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	0e9b      	lsrs	r3, r3, #26
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	2101      	movs	r1, #1
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	e017      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x5dc>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	61fb      	str	r3, [r7, #28]
  return result;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8001d90:	2320      	movs	r3, #32
 8001d92:	e003      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	2101      	movs	r1, #1
 8001da4:	fa01 f303 	lsl.w	r3, r1, r3
 8001da8:	ea42 0103 	orr.w	r1, r2, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10d      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x608>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0e9b      	lsrs	r3, r3, #26
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b1e      	subs	r3, #30
 8001dcc:	051b      	lsls	r3, r3, #20
 8001dce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dd2:	e01d      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x644>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	613b      	str	r3, [r7, #16]
  return result;
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8001dec:	2320      	movs	r3, #32
 8001dee:	e005      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x630>
 8001df0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f003 021f 	and.w	r2, r3, #31
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	3b1e      	subs	r3, #30
 8001e0a:	051b      	lsls	r3, r3, #20
 8001e0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e10:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e16:	4619      	mov	r1, r3
 8001e18:	f7ff f82b 	bl	8000e72 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b45      	ldr	r3, [pc, #276]	@ (8001f38 <HAL_ADC_ConfigChannel+0x76c>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d07c      	beq.n	8001f22 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e28:	4844      	ldr	r0, [pc, #272]	@ (8001f3c <HAL_ADC_ConfigChannel+0x770>)
 8001e2a:	f7fe ff5f 	bl	8000cec <LL_ADC_GetCommonPathInternalCh>
 8001e2e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e32:	4843      	ldr	r0, [pc, #268]	@ (8001f40 <HAL_ADC_ConfigChannel+0x774>)
 8001e34:	f7ff f8ce 	bl	8000fd4 <LL_ADC_IsEnabled>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d15e      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a40      	ldr	r2, [pc, #256]	@ (8001f44 <HAL_ADC_ConfigChannel+0x778>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d127      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x6cc>
 8001e48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d121      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a39      	ldr	r2, [pc, #228]	@ (8001f40 <HAL_ADC_ConfigChannel+0x774>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d161      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001e5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e66:	4619      	mov	r1, r3
 8001e68:	4834      	ldr	r0, [pc, #208]	@ (8001f3c <HAL_ADC_ConfigChannel+0x770>)
 8001e6a:	f7fe ff2c 	bl	8000cc6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e6e:	4b36      	ldr	r3, [pc, #216]	@ (8001f48 <HAL_ADC_ConfigChannel+0x77c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	099b      	lsrs	r3, r3, #6
 8001e74:	4a35      	ldr	r2, [pc, #212]	@ (8001f4c <HAL_ADC_ConfigChannel+0x780>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	099b      	lsrs	r3, r3, #6
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001e88:	e002      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f9      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e96:	e044      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8001f50 <HAL_ADC_ConfigChannel+0x784>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d113      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x6fe>
 8001ea2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ea6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10d      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a23      	ldr	r2, [pc, #140]	@ (8001f40 <HAL_ADC_ConfigChannel+0x774>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d134      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001eb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ebc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	481e      	ldr	r0, [pc, #120]	@ (8001f3c <HAL_ADC_ConfigChannel+0x770>)
 8001ec4:	f7fe feff 	bl	8000cc6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ec8:	e02b      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a21      	ldr	r2, [pc, #132]	@ (8001f54 <HAL_ADC_ConfigChannel+0x788>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d126      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x756>
 8001ed4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ed8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d120      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a16      	ldr	r2, [pc, #88]	@ (8001f40 <HAL_ADC_ConfigChannel+0x774>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d11b      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001eea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001eee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4811      	ldr	r0, [pc, #68]	@ (8001f3c <HAL_ADC_ConfigChannel+0x770>)
 8001ef6:	f7fe fee6 	bl	8000cc6 <LL_ADC_SetCommonPathInternalCh>
 8001efa:	e012      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f00:	f043 0220 	orr.w	r2, r3, #32
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001f0e:	e008      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f14:	f043 0220 	orr.w	r2, r3, #32
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8001f2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	37d8      	adds	r7, #216	@ 0xd8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	80080000 	.word	0x80080000
 8001f3c:	50040300 	.word	0x50040300
 8001f40:	50040000 	.word	0x50040000
 8001f44:	c7520000 	.word	0xc7520000
 8001f48:	2000000c 	.word	0x2000000c
 8001f4c:	053e2d63 	.word	0x053e2d63
 8001f50:	cb840000 	.word	0xcb840000
 8001f54:	80000001 	.word	0x80000001

08001f58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff f833 	bl	8000fd4 <LL_ADC_IsEnabled>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d15e      	bne.n	8002032 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	4b30      	ldr	r3, [pc, #192]	@ (800203c <ADC_Enable+0xe4>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00d      	beq.n	8001f9e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f86:	f043 0210 	orr.w	r2, r3, #16
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e04a      	b.n	8002034 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f802 	bl	8000fac <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001fa8:	4825      	ldr	r0, [pc, #148]	@ (8002040 <ADC_Enable+0xe8>)
 8001faa:	f7fe fe9f 	bl	8000cec <LL_ADC_GetCommonPathInternalCh>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00f      	beq.n	8001fd8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fb8:	4b22      	ldr	r3, [pc, #136]	@ (8002044 <ADC_Enable+0xec>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	099b      	lsrs	r3, r3, #6
 8001fbe:	4a22      	ldr	r2, [pc, #136]	@ (8002048 <ADC_Enable+0xf0>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	099b      	lsrs	r3, r3, #6
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001fca:	e002      	b.n	8001fd2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f9      	bne.n	8001fcc <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001fd8:	f7fe fe4a 	bl	8000c70 <HAL_GetTick>
 8001fdc:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fde:	e021      	b.n	8002024 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fff5 	bl	8000fd4 <LL_ADC_IsEnabled>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d104      	bne.n	8001ffa <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe ffd9 	bl	8000fac <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ffa:	f7fe fe39 	bl	8000c70 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d90d      	bls.n	8002024 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200c:	f043 0210 	orr.w	r2, r3, #16
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e007      	b.n	8002034 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b01      	cmp	r3, #1
 8002030:	d1d6      	bne.n	8001fe0 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	8000003f 	.word	0x8000003f
 8002040:	50040300 	.word	0x50040300
 8002044:	2000000c 	.word	0x2000000c
 8002048:	053e2d63 	.word	0x053e2d63

0800204c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002058:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002062:	2b00      	cmp	r3, #0
 8002064:	d14b      	bne.n	80020fe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d021      	beq.n	80020c4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fe94 	bl	8000db2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d032      	beq.n	80020f6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d12b      	bne.n	80020f6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d11f      	bne.n	80020f6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	655a      	str	r2, [r3, #84]	@ 0x54
 80020c2:	e018      	b.n	80020f6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d111      	bne.n	80020f6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d105      	bne.n	80020f6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ee:	f043 0201 	orr.w	r2, r3, #1
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f7ff fb40 	bl	800177c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020fc:	e00e      	b.n	800211c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7ff fb54 	bl	80017b8 <HAL_ADC_ErrorCallback>
}
 8002110:	e004      	b.n	800211c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002130:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f7ff fb2c 	bl	8001790 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002152:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215e:	f043 0204 	orr.w	r2, r3, #4
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f7ff fb26 	bl	80017b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e8:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <__NVIC_SetPriorityGrouping+0x44>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021f4:	4013      	ands	r3, r2
 80021f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002200:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220a:	4a04      	ldr	r2, [pc, #16]	@ (800221c <__NVIC_SetPriorityGrouping+0x44>)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	60d3      	str	r3, [r2, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002224:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <__NVIC_GetPriorityGrouping+0x18>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	f003 0307 	and.w	r3, r3, #7
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	2b00      	cmp	r3, #0
 800224c:	db0b      	blt.n	8002266 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	f003 021f 	and.w	r2, r3, #31
 8002254:	4907      	ldr	r1, [pc, #28]	@ (8002274 <__NVIC_EnableIRQ+0x38>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	2001      	movs	r0, #1
 800225e:	fa00 f202 	lsl.w	r2, r0, r2
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000e100 	.word	0xe000e100

08002278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db0a      	blt.n	80022a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	490c      	ldr	r1, [pc, #48]	@ (80022c4 <__NVIC_SetPriority+0x4c>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	440b      	add	r3, r1
 800229c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a0:	e00a      	b.n	80022b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4908      	ldr	r1, [pc, #32]	@ (80022c8 <__NVIC_SetPriority+0x50>)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	3b04      	subs	r3, #4
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	761a      	strb	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	@ 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f1c3 0307 	rsb	r3, r3, #7
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	bf28      	it	cs
 80022ea:	2304      	movcs	r3, #4
 80022ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d902      	bls.n	80022fc <NVIC_EncodePriority+0x30>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3b03      	subs	r3, #3
 80022fa:	e000      	b.n	80022fe <NVIC_EncodePriority+0x32>
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	f04f 32ff 	mov.w	r2, #4294967295
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	401a      	ands	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002314:	f04f 31ff 	mov.w	r1, #4294967295
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43d9      	mvns	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	4313      	orrs	r3, r2
         );
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	@ 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ff4c 	bl	80021d8 <__NVIC_SetPriorityGrouping>
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002356:	f7ff ff63 	bl	8002220 <__NVIC_GetPriorityGrouping>
 800235a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	6978      	ldr	r0, [r7, #20]
 8002362:	f7ff ffb3 	bl	80022cc <NVIC_EncodePriority>
 8002366:	4602      	mov	r2, r0
 8002368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800236c:	4611      	mov	r1, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff82 	bl	8002278 <__NVIC_SetPriority>
}
 8002374:	bf00      	nop
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ff56 	bl	800223c <__NVIC_EnableIRQ>
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e08e      	b.n	80024c8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	4b47      	ldr	r3, [pc, #284]	@ (80024d0 <HAL_DMA_Init+0x138>)
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d80f      	bhi.n	80023d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b45      	ldr	r3, [pc, #276]	@ (80024d4 <HAL_DMA_Init+0x13c>)
 80023be:	4413      	add	r3, r2
 80023c0:	4a45      	ldr	r2, [pc, #276]	@ (80024d8 <HAL_DMA_Init+0x140>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	009a      	lsls	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a42      	ldr	r2, [pc, #264]	@ (80024dc <HAL_DMA_Init+0x144>)
 80023d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80023d4:	e00e      	b.n	80023f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	4b40      	ldr	r3, [pc, #256]	@ (80024e0 <HAL_DMA_Init+0x148>)
 80023de:	4413      	add	r3, r2
 80023e0:	4a3d      	ldr	r2, [pc, #244]	@ (80024d8 <HAL_DMA_Init+0x140>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	009a      	lsls	r2, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a3c      	ldr	r2, [pc, #240]	@ (80024e4 <HAL_DMA_Init+0x14c>)
 80023f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800240a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800240e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002418:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002424:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002430:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f9b6 	bl	80027b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002454:	d102      	bne.n	800245c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002464:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002468:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002472:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d010      	beq.n	800249e <HAL_DMA_Init+0x106>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b04      	cmp	r3, #4
 8002482:	d80c      	bhi.n	800249e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f9d5 	bl	8002834 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	e008      	b.n	80024b0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40020407 	.word	0x40020407
 80024d4:	bffdfff8 	.word	0xbffdfff8
 80024d8:	cccccccd 	.word	0xcccccccd
 80024dc:	40020000 	.word	0x40020000
 80024e0:	bffdfbf8 	.word	0xbffdfbf8
 80024e4:	40020400 	.word	0x40020400

080024e8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_DMA_Start_IT+0x20>
 8002504:	2302      	movs	r3, #2
 8002506:	e066      	b.n	80025d6 <HAL_DMA_Start_IT+0xee>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d155      	bne.n	80025c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68b9      	ldr	r1, [r7, #8]
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f8fb 	bl	800273c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 020e 	orr.w	r2, r2, #14
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e00f      	b.n	8002580 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0204 	bic.w	r2, r2, #4
 800256e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 020a 	orr.w	r2, r2, #10
 800257e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d007      	beq.n	800259e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002598:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800259c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 0201 	orr.w	r2, r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	e005      	b.n	80025d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80025d0:	2302      	movs	r3, #2
 80025d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	f003 031c 	and.w	r3, r3, #28
 80025fe:	2204      	movs	r2, #4
 8002600:	409a      	lsls	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d026      	beq.n	8002658 <HAL_DMA_IRQHandler+0x7a>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d021      	beq.n	8002658 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b00      	cmp	r3, #0
 8002620:	d107      	bne.n	8002632 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0204 	bic.w	r2, r2, #4
 8002630:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	f003 021c 	and.w	r2, r3, #28
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	2104      	movs	r1, #4
 8002640:	fa01 f202 	lsl.w	r2, r1, r2
 8002644:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	2b00      	cmp	r3, #0
 800264c:	d071      	beq.n	8002732 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002656:	e06c      	b.n	8002732 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265c:	f003 031c 	and.w	r3, r3, #28
 8002660:	2202      	movs	r2, #2
 8002662:	409a      	lsls	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02e      	beq.n	80026ca <HAL_DMA_IRQHandler+0xec>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d029      	beq.n	80026ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10b      	bne.n	800269c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 020a 	bic.w	r2, r2, #10
 8002692:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a0:	f003 021c 	and.w	r2, r3, #28
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	2102      	movs	r1, #2
 80026aa:	fa01 f202 	lsl.w	r2, r1, r2
 80026ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d038      	beq.n	8002732 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80026c8:	e033      	b.n	8002732 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	f003 031c 	and.w	r3, r3, #28
 80026d2:	2208      	movs	r2, #8
 80026d4:	409a      	lsls	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d02a      	beq.n	8002734 <HAL_DMA_IRQHandler+0x156>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d025      	beq.n	8002734 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 020e 	bic.w	r2, r2, #14
 80026f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fc:	f003 021c 	and.w	r2, r3, #28
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	2101      	movs	r1, #1
 8002706:	fa01 f202 	lsl.w	r2, r1, r2
 800270a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002726:	2b00      	cmp	r3, #0
 8002728:	d004      	beq.n	8002734 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002732:	bf00      	nop
 8002734:	bf00      	nop
}
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002752:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002758:	2b00      	cmp	r3, #0
 800275a:	d004      	beq.n	8002766 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002764:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	f003 021c 	and.w	r2, r3, #28
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b10      	cmp	r3, #16
 8002788:	d108      	bne.n	800279c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800279a:	e007      	b.n	80027ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	60da      	str	r2, [r3, #12]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b17      	ldr	r3, [pc, #92]	@ (8002824 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d80a      	bhi.n	80027e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027d8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6493      	str	r3, [r2, #72]	@ 0x48
 80027e0:	e007      	b.n	80027f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	009a      	lsls	r2, r3, #2
 80027ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002828 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80027ec:	4413      	add	r3, r2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	3b08      	subs	r3, #8
 80027fa:	4a0c      	ldr	r2, [pc, #48]	@ (800282c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a0a      	ldr	r2, [pc, #40]	@ (8002830 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002808:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	2201      	movs	r2, #1
 8002812:	409a      	lsls	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	40020407 	.word	0x40020407
 8002828:	4002081c 	.word	0x4002081c
 800282c:	cccccccd 	.word	0xcccccccd
 8002830:	40020880 	.word	0x40020880

08002834 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002844:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	461a      	mov	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a09      	ldr	r2, [pc, #36]	@ (800287c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002858:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3b01      	subs	r3, #1
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2201      	movs	r2, #1
 8002864:	409a      	lsls	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	1000823f 	.word	0x1000823f
 800287c:	40020940 	.word	0x40020940

08002880 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288e:	e14c      	b.n	8002b2a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2101      	movs	r1, #1
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	4013      	ands	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 813e 	beq.w	8002b24 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d005      	beq.n	80028c0 <HAL_GPIO_Init+0x40>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d130      	bne.n	8002922 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4013      	ands	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028f6:	2201      	movs	r2, #1
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	f003 0201 	and.w	r2, r3, #1
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b03      	cmp	r3, #3
 800292c:	d017      	beq.n	800295e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2203      	movs	r2, #3
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d123      	bne.n	80029b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	08da      	lsrs	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3208      	adds	r2, #8
 8002972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002976:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	08da      	lsrs	r2, r3, #3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3208      	adds	r2, #8
 80029ac:	6939      	ldr	r1, [r7, #16]
 80029ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	2203      	movs	r2, #3
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0203 	and.w	r2, r3, #3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8098 	beq.w	8002b24 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80029f4:	4a54      	ldr	r2, [pc, #336]	@ (8002b48 <HAL_GPIO_Init+0x2c8>)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	3302      	adds	r3, #2
 80029fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a1e:	d019      	beq.n	8002a54 <HAL_GPIO_Init+0x1d4>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a4a      	ldr	r2, [pc, #296]	@ (8002b4c <HAL_GPIO_Init+0x2cc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d013      	beq.n	8002a50 <HAL_GPIO_Init+0x1d0>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a49      	ldr	r2, [pc, #292]	@ (8002b50 <HAL_GPIO_Init+0x2d0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00d      	beq.n	8002a4c <HAL_GPIO_Init+0x1cc>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a48      	ldr	r2, [pc, #288]	@ (8002b54 <HAL_GPIO_Init+0x2d4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d007      	beq.n	8002a48 <HAL_GPIO_Init+0x1c8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a47      	ldr	r2, [pc, #284]	@ (8002b58 <HAL_GPIO_Init+0x2d8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d101      	bne.n	8002a44 <HAL_GPIO_Init+0x1c4>
 8002a40:	2304      	movs	r3, #4
 8002a42:	e008      	b.n	8002a56 <HAL_GPIO_Init+0x1d6>
 8002a44:	2307      	movs	r3, #7
 8002a46:	e006      	b.n	8002a56 <HAL_GPIO_Init+0x1d6>
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e004      	b.n	8002a56 <HAL_GPIO_Init+0x1d6>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e002      	b.n	8002a56 <HAL_GPIO_Init+0x1d6>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <HAL_GPIO_Init+0x1d6>
 8002a54:	2300      	movs	r3, #0
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	f002 0203 	and.w	r2, r2, #3
 8002a5c:	0092      	lsls	r2, r2, #2
 8002a5e:	4093      	lsls	r3, r2
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a66:	4938      	ldr	r1, [pc, #224]	@ (8002b48 <HAL_GPIO_Init+0x2c8>)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a74:	4b39      	ldr	r3, [pc, #228]	@ (8002b5c <HAL_GPIO_Init+0x2dc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a98:	4a30      	ldr	r2, [pc, #192]	@ (8002b5c <HAL_GPIO_Init+0x2dc>)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b5c <HAL_GPIO_Init+0x2dc>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ac2:	4a26      	ldr	r2, [pc, #152]	@ (8002b5c <HAL_GPIO_Init+0x2dc>)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ac8:	4b24      	ldr	r3, [pc, #144]	@ (8002b5c <HAL_GPIO_Init+0x2dc>)
 8002aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002aee:	4a1b      	ldr	r2, [pc, #108]	@ (8002b5c <HAL_GPIO_Init+0x2dc>)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002af6:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <HAL_GPIO_Init+0x2dc>)
 8002af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8002b5c <HAL_GPIO_Init+0x2dc>)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	3301      	adds	r3, #1
 8002b28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f47f aeab 	bne.w	8002890 <HAL_GPIO_Init+0x10>
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	bf00      	nop
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40010000 	.word	0x40010000
 8002b4c:	48000400 	.word	0x48000400
 8002b50:	48000800 	.word	0x48000800
 8002b54:	48000c00 	.word	0x48000c00
 8002b58:	48001000 	.word	0x48001000
 8002b5c:	58000800 	.word	0x58000800

08002b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	807b      	strh	r3, [r7, #2]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b70:	787b      	ldrb	r3, [r7, #1]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b76:	887a      	ldrh	r2, [r7, #2]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b7c:	e002      	b.n	8002b84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0c0      	b.n	8002d24 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f00b fcee 	bl	800e598 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f003 ff22 	bl	8006a12 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	e03e      	b.n	8002c52 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	440b      	add	r3, r1
 8002be2:	3311      	adds	r3, #17
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	440b      	add	r3, r1
 8002bf6:	3310      	adds	r3, #16
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	3313      	adds	r3, #19
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3320      	adds	r3, #32
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	3324      	adds	r3, #36	@ 0x24
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	440b      	add	r3, r1
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	791b      	ldrb	r3, [r3, #4]
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d3bb      	bcc.n	8002bd4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]
 8002c60:	e044      	b.n	8002cec <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cd0:	7bfa      	ldrb	r2, [r7, #15]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	791b      	ldrb	r3, [r3, #4]
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d3b5      	bcc.n	8002c62 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d02:	f003 fea1 	bl	8006a48 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7a9b      	ldrb	r3, [r3, #10]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d102      	bne.n	8002d22 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f001 fc0e 	bl	800453e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_PCD_Start+0x16>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e012      	b.n	8002d68 <HAL_PCD_Start+0x3c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 fe48 	bl	80069e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f005 fc25 	bl	80085a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f005 fc2a 	bl	80085d6 <USB_ReadInterrupts>
 8002d82:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fb06 	bl	80033a0 <PCD_EP_ISR_Handler>

    return;
 8002d94:	e110      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d013      	beq.n	8002dc8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002db2:	b292      	uxth	r2, r2
 8002db4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f00b fc90 	bl	800e6de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f8fc 	bl	8002fbe <HAL_PCD_SetAddress>

    return;
 8002dc6:	e0f7      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00c      	beq.n	8002dec <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002de4:	b292      	uxth	r2, r2
 8002de6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002dea:	e0e5      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00c      	beq.n	8002e10 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e08:	b292      	uxth	r2, r2
 8002e0a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e0e:	e0d3      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d034      	beq.n	8002e84 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0204 	bic.w	r2, r2, #4
 8002e2c:	b292      	uxth	r2, r2
 8002e2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0208 	bic.w	r2, r2, #8
 8002e44:	b292      	uxth	r2, r2
 8002e46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d107      	bne.n	8002e64 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f00b fe32 	bl	800eac8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f00b fc73 	bl	800e750 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e7c:	b292      	uxth	r2, r2
 8002e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e82:	e099      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d027      	beq.n	8002ede <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0208 	orr.w	r2, r2, #8
 8002ea0:	b292      	uxth	r2, r2
 8002ea2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eb8:	b292      	uxth	r2, r2
 8002eba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0204 	orr.w	r2, r2, #4
 8002ed0:	b292      	uxth	r2, r2
 8002ed2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f00b fc20 	bl	800e71c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002edc:	e06c      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d040      	beq.n	8002f6a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002efa:	b292      	uxth	r2, r2
 8002efc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d12b      	bne.n	8002f62 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0204 	orr.w	r2, r2, #4
 8002f1c:	b292      	uxth	r2, r2
 8002f1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0208 	orr.w	r2, r2, #8
 8002f34:	b292      	uxth	r2, r2
 8002f36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002f58:	2101      	movs	r1, #1
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f00b fdb4 	bl	800eac8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002f60:	e02a      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f00b fbda 	bl	800e71c <HAL_PCD_SuspendCallback>
    return;
 8002f68:	e026      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00f      	beq.n	8002f94 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f86:	b292      	uxth	r2, r2
 8002f88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f00b fb98 	bl	800e6c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f92:	e011      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fb0:	b292      	uxth	r2, r2
 8002fb2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002fb6:	bf00      	nop
  }
}
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_PCD_SetAddress+0x1a>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e012      	b.n	8002ffe <HAL_PCD_SetAddress+0x40>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f005 fac6 	bl	8008580 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	4608      	mov	r0, r1
 8003010:	4611      	mov	r1, r2
 8003012:	461a      	mov	r2, r3
 8003014:	4603      	mov	r3, r0
 8003016:	70fb      	strb	r3, [r7, #3]
 8003018:	460b      	mov	r3, r1
 800301a:	803b      	strh	r3, [r7, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003028:	2b00      	cmp	r3, #0
 800302a:	da0e      	bge.n	800304a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	f003 0207 	and.w	r2, r3, #7
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	3310      	adds	r3, #16
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	4413      	add	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	705a      	strb	r2, [r3, #1]
 8003048:	e00e      	b.n	8003068 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	f003 0207 	and.w	r2, r3, #7
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	4413      	add	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003074:	883b      	ldrh	r3, [r7, #0]
 8003076:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	78ba      	ldrb	r2, [r7, #2]
 8003082:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003084:	78bb      	ldrb	r3, [r7, #2]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d102      	bne.n	8003090 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_PCD_EP_Open+0x98>
 800309a:	2302      	movs	r3, #2
 800309c:	e00e      	b.n	80030bc <HAL_PCD_EP_Open+0xb6>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68f9      	ldr	r1, [r7, #12]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f003 fce9 	bl	8006a84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80030ba:	7afb      	ldrb	r3, [r7, #11]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	da0e      	bge.n	80030f6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	f003 0207 	and.w	r2, r3, #7
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	3310      	adds	r3, #16
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	705a      	strb	r2, [r3, #1]
 80030f4:	e00e      	b.n	8003114 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	f003 0207 	and.w	r2, r3, #7
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	4413      	add	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	b2da      	uxtb	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_PCD_EP_Close+0x6a>
 800312a:	2302      	movs	r3, #2
 800312c:	e00e      	b.n	800314c <HAL_PCD_EP_Close+0x88>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68f9      	ldr	r1, [r7, #12]
 800313c:	4618      	mov	r0, r3
 800313e:	f004 f989 	bl	8007454 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	460b      	mov	r3, r1
 8003162:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003164:	7afb      	ldrb	r3, [r7, #11]
 8003166:	f003 0207 	and.w	r2, r3, #7
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2200      	movs	r2, #0
 8003192:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003194:	7afb      	ldrb	r3, [r7, #11]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	b2da      	uxtb	r2, r3
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6979      	ldr	r1, [r7, #20]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f004 fb41 	bl	800782e <USB_EPStartXfer>

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	f003 0207 	and.w	r2, r3, #7
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	440b      	add	r3, r1
 80031d4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80031d8:	681b      	ldr	r3, [r3, #0]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b086      	sub	sp, #24
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	460b      	mov	r3, r1
 80031f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f6:	7afb      	ldrb	r3, [r7, #11]
 80031f8:	f003 0207 	and.w	r2, r3, #7
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	3310      	adds	r3, #16
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4413      	add	r3, r2
 800320a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2200      	movs	r2, #0
 800322a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2201      	movs	r2, #1
 8003230:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003232:	7afb      	ldrb	r3, [r7, #11]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	b2da      	uxtb	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6979      	ldr	r1, [r7, #20]
 8003244:	4618      	mov	r0, r3
 8003246:	f004 faf2 	bl	800782e <USB_EPStartXfer>

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	7912      	ldrb	r2, [r2, #4]
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e03e      	b.n	80032f0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003276:	2b00      	cmp	r3, #0
 8003278:	da0e      	bge.n	8003298 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	f003 0207 	and.w	r2, r3, #7
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	3310      	adds	r3, #16
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	705a      	strb	r2, [r3, #1]
 8003296:	e00c      	b.n	80032b2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_PCD_EP_SetStall+0x7e>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e00e      	b.n	80032f0 <HAL_PCD_EP_SetStall+0x9c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68f9      	ldr	r1, [r7, #12]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f005 f853 	bl	800838c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	7912      	ldrb	r2, [r2, #4]
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e040      	b.n	8003398 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800331a:	2b00      	cmp	r3, #0
 800331c:	da0e      	bge.n	800333c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	f003 0207 	and.w	r2, r3, #7
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	3310      	adds	r3, #16
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	705a      	strb	r2, [r3, #1]
 800333a:	e00e      	b.n	800335a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	f003 0207 	and.w	r2, r3, #7
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	b2da      	uxtb	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_PCD_EP_ClrStall+0x82>
 8003376:	2302      	movs	r3, #2
 8003378:	e00e      	b.n	8003398 <HAL_PCD_EP_ClrStall+0xa0>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68f9      	ldr	r1, [r7, #12]
 8003388:	4618      	mov	r0, r3
 800338a:	f005 f850 	bl	800842e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b092      	sub	sp, #72	@ 0x48
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033a8:	e333      	b.n	8003a12 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033b2:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80033b4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80033c0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f040 8108 	bne.w	80035da <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80033ca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d14c      	bne.n	800346e <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80033e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033e4:	813b      	strh	r3, [r7, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	893b      	ldrh	r3, [r7, #8]
 80033ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3310      	adds	r3, #16
 80033fc:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003406:	b29b      	uxth	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	4413      	add	r3, r2
 8003418:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003424:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	441a      	add	r2, r3
 8003430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003432:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003434:	2100      	movs	r1, #0
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f00b f929 	bl	800e68e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7b1b      	ldrb	r3, [r3, #12]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 82e5 	beq.w	8003a12 <PCD_EP_ISR_Handler+0x672>
 8003448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f040 82e0 	bne.w	8003a12 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	7b1b      	ldrb	r3, [r3, #12]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800345c:	b2da      	uxtb	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	731a      	strb	r2, [r3, #12]
 800346c:	e2d1      	b.n	8003a12 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003474:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800347e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003484:	2b00      	cmp	r3, #0
 8003486:	d032      	beq.n	80034ee <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003490:	b29b      	uxth	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	4413      	add	r3, r2
 80034a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80034ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034bc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80034be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034c0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	f005 f8da 	bl	800867c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80034d4:	4013      	ands	r3, r2
 80034d6:	817b      	strh	r3, [r7, #10]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	897a      	ldrh	r2, [r7, #10]
 80034de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034e2:	b292      	uxth	r2, r2
 80034e4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f00b f8a4 	bl	800e634 <HAL_PCD_SetupStageCallback>
 80034ec:	e291      	b.n	8003a12 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034ee:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f280 828d 	bge.w	8003a12 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29a      	uxth	r2, r3
 8003500:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003504:	4013      	ands	r3, r2
 8003506:	81fb      	strh	r3, [r7, #14]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	89fa      	ldrh	r2, [r7, #14]
 800350e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003512:	b292      	uxth	r2, r2
 8003514:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800351e:	b29b      	uxth	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4413      	add	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	4413      	add	r3, r2
 8003530:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800353a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800353c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800353e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d019      	beq.n	800357a <PCD_EP_ISR_Handler+0x1da>
 8003546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d015      	beq.n	800357a <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003554:	6959      	ldr	r1, [r3, #20]
 8003556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003558:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800355a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800355c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800355e:	b29b      	uxth	r3, r3
 8003560:	f005 f88c 	bl	800867c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	441a      	add	r2, r3
 800356e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003570:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003572:	2100      	movs	r1, #0
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f00b f86f 	bl	800e658 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003582:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003588:	2b00      	cmp	r3, #0
 800358a:	f040 8242 	bne.w	8003a12 <PCD_EP_ISR_Handler+0x672>
 800358e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003590:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003594:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003598:	f000 823b 	beq.w	8003a12 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ac:	81bb      	strh	r3, [r7, #12]
 80035ae:	89bb      	ldrh	r3, [r7, #12]
 80035b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80035b4:	81bb      	strh	r3, [r7, #12]
 80035b6:	89bb      	ldrh	r3, [r7, #12]
 80035b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80035bc:	81bb      	strh	r3, [r7, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	89bb      	ldrh	r3, [r7, #12]
 80035c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	8013      	strh	r3, [r2, #0]
 80035d8:	e21b      	b.n	8003a12 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035ec:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f280 80f1 	bge.w	80037d8 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	b29a      	uxth	r2, r3
 8003608:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800360c:	4013      	ands	r3, r2
 800360e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003620:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003624:	b292      	uxth	r2, r2
 8003626:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003628:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	4413      	add	r3, r2
 800363c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800363e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003640:	7b1b      	ldrb	r3, [r3, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d123      	bne.n	800368e <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800364e:	b29b      	uxth	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	4413      	add	r3, r2
 8003660:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800366a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800366e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 808b 	beq.w	800378e <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800367e:	6959      	ldr	r1, [r3, #20]
 8003680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003682:	88da      	ldrh	r2, [r3, #6]
 8003684:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003688:	f004 fff8 	bl	800867c <USB_ReadPMA>
 800368c:	e07f      	b.n	800378e <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800368e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003690:	78db      	ldrb	r3, [r3, #3]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d109      	bne.n	80036aa <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003696:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003698:	461a      	mov	r2, r3
 800369a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f9c6 	bl	8003a2e <HAL_PCD_EP_DB_Receive>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80036a8:	e071      	b.n	800378e <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	441a      	add	r2, r3
 80036d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80036d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d022      	beq.n	800374a <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800370c:	b29b      	uxth	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	4413      	add	r3, r2
 800371e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003728:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800372c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003730:	2b00      	cmp	r3, #0
 8003732:	d02c      	beq.n	800378e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800373a:	6959      	ldr	r1, [r3, #20]
 800373c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800373e:	891a      	ldrh	r2, [r3, #8]
 8003740:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003744:	f004 ff9a 	bl	800867c <USB_ReadPMA>
 8003748:	e021      	b.n	800378e <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003752:	b29b      	uxth	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	4413      	add	r3, r2
 8003764:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800376e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003772:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003780:	6959      	ldr	r1, [r3, #20]
 8003782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003784:	895a      	ldrh	r2, [r3, #10]
 8003786:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800378a:	f004 ff77 	bl	800867c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800378e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003796:	441a      	add	r2, r3
 8003798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800379a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800379c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80037a4:	441a      	add	r2, r3
 80037a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037a8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80037aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <PCD_EP_ISR_Handler+0x41e>
 80037b2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80037b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d206      	bcs.n	80037cc <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80037be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	4619      	mov	r1, r3
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f00a ff47 	bl	800e658 <HAL_PCD_DataOutStageCallback>
 80037ca:	e005      	b.n	80037d8 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037d2:	4618      	mov	r0, r3
 80037d4:	f004 f82b 	bl	800782e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80037d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80037da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8117 	beq.w	8003a12 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80037e4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	3310      	adds	r3, #16
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	b29b      	uxth	r3, r3
 800380a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800380e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003812:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	441a      	add	r2, r3
 8003822:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800382c:	b29b      	uxth	r3, r3
 800382e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003832:	78db      	ldrb	r3, [r3, #3]
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 80a1 	bne.w	800397c <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800383a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800383c:	2200      	movs	r2, #0
 800383e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003842:	7b1b      	ldrb	r3, [r3, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8092 	beq.w	800396e <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800384a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800384c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d046      	beq.n	80038e2 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003856:	785b      	ldrb	r3, [r3, #1]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d126      	bne.n	80038aa <PCD_EP_ISR_Handler+0x50a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800386a:	b29b      	uxth	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	4413      	add	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	00da      	lsls	r2, r3, #3
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	4413      	add	r3, r2
 800387e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800388e:	b29a      	uxth	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	801a      	strh	r2, [r3, #0]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800389e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	801a      	strh	r2, [r3, #0]
 80038a8:	e061      	b.n	800396e <PCD_EP_ISR_Handler+0x5ce>
 80038aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ac:	785b      	ldrb	r3, [r3, #1]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d15d      	bne.n	800396e <PCD_EP_ISR_Handler+0x5ce>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	4413      	add	r3, r2
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	00da      	lsls	r2, r3, #3
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	4413      	add	r3, r2
 80038d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	2200      	movs	r2, #0
 80038de:	801a      	strh	r2, [r3, #0]
 80038e0:	e045      	b.n	800396e <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ea:	785b      	ldrb	r3, [r3, #1]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d126      	bne.n	800393e <PCD_EP_ISR_Handler+0x59e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038fe:	b29b      	uxth	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	4413      	add	r3, r2
 8003906:	627b      	str	r3, [r7, #36]	@ 0x24
 8003908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	00da      	lsls	r2, r3, #3
 800390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003910:	4413      	add	r3, r2
 8003912:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	b29b      	uxth	r3, r3
 800391e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003922:	b29a      	uxth	r2, r3
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	801a      	strh	r2, [r3, #0]
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	b29b      	uxth	r3, r3
 800392e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003936:	b29a      	uxth	r2, r3
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	801a      	strh	r2, [r3, #0]
 800393c:	e017      	b.n	800396e <PCD_EP_ISR_Handler+0x5ce>
 800393e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003940:	785b      	ldrb	r3, [r3, #1]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d113      	bne.n	800396e <PCD_EP_ISR_Handler+0x5ce>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800394e:	b29b      	uxth	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003954:	4413      	add	r3, r2
 8003956:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	00da      	lsls	r2, r3, #3
 800395e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003960:	4413      	add	r3, r2
 8003962:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003966:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396a:	2200      	movs	r2, #0
 800396c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800396e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	4619      	mov	r1, r3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f00a fe8a 	bl	800e68e <HAL_PCD_DataInStageCallback>
 800397a:	e04a      	b.n	8003a12 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800397c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800397e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d13f      	bne.n	8003a06 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800398e:	b29b      	uxth	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	4413      	add	r3, r2
 80039a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039aa:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80039ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ae:	699a      	ldr	r2, [r3, #24]
 80039b0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d906      	bls.n	80039c4 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80039b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80039bc:	1ad2      	subs	r2, r2, r3
 80039be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039c0:	619a      	str	r2, [r3, #24]
 80039c2:	e002      	b.n	80039ca <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80039c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039c6:	2200      	movs	r2, #0
 80039c8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80039ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	4619      	mov	r1, r3
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f00a fe58 	bl	800e68e <HAL_PCD_DataInStageCallback>
 80039de:	e018      	b.n	8003a12 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80039e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80039e6:	441a      	add	r2, r3
 80039e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ea:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80039ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80039f2:	441a      	add	r2, r3
 80039f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039fe:	4618      	mov	r0, r3
 8003a00:	f003 ff15 	bl	800782e <USB_EPStartXfer>
 8003a04:	e005      	b.n	8003a12 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a06:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003a08:	461a      	mov	r2, r3
 8003a0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f917 	bl	8003c40 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	b21b      	sxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f6ff acc3 	blt.w	80033aa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3748      	adds	r7, #72	@ 0x48
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b088      	sub	sp, #32
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d07c      	beq.n	8003b40 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a6a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	699a      	ldr	r2, [r3, #24]
 8003a70:	8b7b      	ldrh	r3, [r7, #26]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d306      	bcc.n	8003a84 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	8b7b      	ldrh	r3, [r7, #26]
 8003a7c:	1ad2      	subs	r2, r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	619a      	str	r2, [r3, #24]
 8003a82:	e002      	b.n	8003a8a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2200      	movs	r2, #0
 8003a88:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d123      	bne.n	8003ada <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aac:	833b      	strh	r3, [r7, #24]
 8003aae:	8b3b      	ldrh	r3, [r7, #24]
 8003ab0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ab4:	833b      	strh	r3, [r7, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	441a      	add	r2, r3
 8003ac4:	8b3b      	ldrh	r3, [r7, #24]
 8003ac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01f      	beq.n	8003b24 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003afe:	82fb      	strh	r3, [r7, #22]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	441a      	add	r2, r3
 8003b0e:	8afb      	ldrh	r3, [r7, #22]
 8003b10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b24:	8b7b      	ldrh	r3, [r7, #26]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8085 	beq.w	8003c36 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	6959      	ldr	r1, [r3, #20]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	891a      	ldrh	r2, [r3, #8]
 8003b38:	8b7b      	ldrh	r3, [r7, #26]
 8003b3a:	f004 fd9f 	bl	800867c <USB_ReadPMA>
 8003b3e:	e07a      	b.n	8003c36 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4413      	add	r3, r2
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b64:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	8b7b      	ldrh	r3, [r7, #26]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d306      	bcc.n	8003b7e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	8b7b      	ldrh	r3, [r7, #26]
 8003b76:	1ad2      	subs	r2, r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	619a      	str	r2, [r3, #24]
 8003b7c:	e002      	b.n	8003b84 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2200      	movs	r2, #0
 8003b82:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d123      	bne.n	8003bd4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba6:	83fb      	strh	r3, [r7, #30]
 8003ba8:	8bfb      	ldrh	r3, [r7, #30]
 8003baa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003bae:	83fb      	strh	r3, [r7, #30]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	441a      	add	r2, r3
 8003bbe:	8bfb      	ldrh	r3, [r7, #30]
 8003bc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d11f      	bne.n	8003c1e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf8:	83bb      	strh	r3, [r7, #28]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	441a      	add	r2, r3
 8003c08:	8bbb      	ldrh	r3, [r7, #28]
 8003c0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c1e:	8b7b      	ldrh	r3, [r7, #26]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	6959      	ldr	r1, [r3, #20]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	895a      	ldrh	r2, [r3, #10]
 8003c30:	8b7b      	ldrh	r3, [r7, #26]
 8003c32:	f004 fd23 	bl	800867c <USB_ReadPMA>
    }
  }

  return count;
 8003c36:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3720      	adds	r7, #32
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b0a6      	sub	sp, #152	@ 0x98
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 81f7 	beq.w	8004048 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	4413      	add	r3, r2
 8003c74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c7e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d907      	bls.n	8003c9e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c96:	1ad2      	subs	r2, r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	619a      	str	r2, [r3, #24]
 8003c9c:	e002      	b.n	8003ca4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f040 80e1 	bne.w	8003e70 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	785b      	ldrb	r3, [r3, #1]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d126      	bne.n	8003d04 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cca:	4413      	add	r3, r2
 8003ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	00da      	lsls	r2, r3, #3
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d00:	801a      	strh	r2, [r3, #0]
 8003d02:	e01a      	b.n	8003d3a <HAL_PCD_EP_DB_Transmit+0xfa>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	785b      	ldrb	r3, [r3, #1]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d116      	bne.n	8003d3a <HAL_PCD_EP_DB_Transmit+0xfa>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d20:	4413      	add	r3, r2
 8003d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	00da      	lsls	r2, r3, #3
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d36:	2200      	movs	r2, #0
 8003d38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	785b      	ldrb	r3, [r3, #1]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d126      	bne.n	8003d96 <HAL_PCD_EP_DB_Transmit+0x156>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	623b      	str	r3, [r7, #32]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	623b      	str	r3, [r7, #32]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	00da      	lsls	r2, r3, #3
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d6e:	61fb      	str	r3, [r7, #28]
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	801a      	strh	r2, [r3, #0]
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	801a      	strh	r2, [r3, #0]
 8003d94:	e017      	b.n	8003dc6 <HAL_PCD_EP_DB_Transmit+0x186>
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	785b      	ldrb	r3, [r3, #1]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d113      	bne.n	8003dc6 <HAL_PCD_EP_DB_Transmit+0x186>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dac:	4413      	add	r3, r2
 8003dae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	00da      	lsls	r2, r3, #3
 8003db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db8:	4413      	add	r3, r2
 8003dba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	78db      	ldrb	r3, [r3, #3]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d123      	bne.n	8003e16 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003de4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003de8:	837b      	strh	r3, [r7, #26]
 8003dea:	8b7b      	ldrh	r3, [r7, #26]
 8003dec:	f083 0320 	eor.w	r3, r3, #32
 8003df0:	837b      	strh	r3, [r7, #26]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	441a      	add	r2, r3
 8003e00:	8b7b      	ldrh	r3, [r7, #26]
 8003e02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f00a fc36 	bl	800e68e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01f      	beq.n	8003e6c <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e46:	833b      	strh	r3, [r7, #24]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	441a      	add	r2, r3
 8003e56:	8b3b      	ldrh	r3, [r7, #24]
 8003e58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e31f      	b.n	80044b0 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d021      	beq.n	8003ebe <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e94:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	441a      	add	r2, r3
 8003ea6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003eaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003eae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003eb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	f040 82ca 	bne.w	800445e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ed2:	441a      	add	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ee0:	441a      	add	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	6a1a      	ldr	r2, [r3, #32]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d309      	bcc.n	8003f06 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	6a1a      	ldr	r2, [r3, #32]
 8003efc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003efe:	1ad2      	subs	r2, r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	621a      	str	r2, [r3, #32]
 8003f04:	e015      	b.n	8003f32 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d107      	bne.n	8003f1e <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003f0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003f12:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003f1c:	e009      	b.n	8003f32 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	785b      	ldrb	r3, [r3, #1]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d15f      	bne.n	8003ffa <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f4e:	4413      	add	r3, r2
 8003f50:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	00da      	lsls	r2, r3, #3
 8003f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f70:	801a      	strh	r2, [r3, #0]
 8003f72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <HAL_PCD_EP_DB_Transmit+0x34e>
 8003f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f8a:	801a      	strh	r2, [r3, #0]
 8003f8c:	e051      	b.n	8004032 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f90:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f92:	d816      	bhi.n	8003fc2 <HAL_PCD_EP_DB_Transmit+0x382>
 8003f94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_PCD_EP_DB_Transmit+0x36a>
 8003fa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	029b      	lsls	r3, r3, #10
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fbe:	801a      	strh	r2, [r3, #0]
 8003fc0:	e037      	b.n	8004032 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003fc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fca:	f003 031f 	and.w	r3, r3, #31
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d102      	bne.n	8003fd8 <HAL_PCD_EP_DB_Transmit+0x398>
 8003fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	029b      	lsls	r3, r3, #10
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff6:	801a      	strh	r2, [r3, #0]
 8003ff8:	e01b      	b.n	8004032 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	785b      	ldrb	r3, [r3, #1]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d117      	bne.n	8004032 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004010:	b29b      	uxth	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004016:	4413      	add	r3, r2
 8004018:	64bb      	str	r3, [r7, #72]	@ 0x48
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	00da      	lsls	r2, r3, #3
 8004020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004022:	4413      	add	r3, r2
 8004024:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004028:	647b      	str	r3, [r7, #68]	@ 0x44
 800402a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800402c:	b29a      	uxth	r2, r3
 800402e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004030:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	6959      	ldr	r1, [r3, #20]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	891a      	ldrh	r2, [r3, #8]
 800403e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004040:	b29b      	uxth	r3, r3
 8004042:	f004 fad8 	bl	80085f6 <USB_WritePMA>
 8004046:	e20a      	b.n	800445e <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004050:	b29b      	uxth	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4413      	add	r3, r2
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	4413      	add	r3, r2
 8004062:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800406c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004078:	429a      	cmp	r2, r3
 800407a:	d307      	bcc.n	800408c <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	699a      	ldr	r2, [r3, #24]
 8004080:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004084:	1ad2      	subs	r2, r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	619a      	str	r2, [r3, #24]
 800408a:	e002      	b.n	8004092 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2200      	movs	r2, #0
 8004090:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f040 80f6 	bne.w	8004288 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	785b      	ldrb	r3, [r3, #1]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d126      	bne.n	80040f2 <HAL_PCD_EP_DB_Transmit+0x4b2>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040b8:	4413      	add	r3, r2
 80040ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	00da      	lsls	r2, r3, #3
 80040c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040c4:	4413      	add	r3, r2
 80040c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80040cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040da:	801a      	strh	r2, [r3, #0]
 80040dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040ee:	801a      	strh	r2, [r3, #0]
 80040f0:	e01a      	b.n	8004128 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	785b      	ldrb	r3, [r3, #1]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d116      	bne.n	8004128 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004108:	b29b      	uxth	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800410e:	4413      	add	r3, r2
 8004110:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	00da      	lsls	r2, r3, #3
 8004118:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800411a:	4413      	add	r3, r2
 800411c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004120:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004122:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004124:	2200      	movs	r2, #0
 8004126:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d12f      	bne.n	8004198 <HAL_PCD_EP_DB_Transmit+0x558>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004148:	b29b      	uxth	r3, r3
 800414a:	461a      	mov	r2, r3
 800414c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004150:	4413      	add	r3, r2
 8004152:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	00da      	lsls	r2, r3, #3
 800415c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004160:	4413      	add	r3, r2
 8004162:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004166:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800416a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	b29b      	uxth	r3, r3
 8004172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004176:	b29a      	uxth	r2, r3
 8004178:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800417c:	801a      	strh	r2, [r3, #0]
 800417e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	b29b      	uxth	r3, r3
 8004186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800418a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800418e:	b29a      	uxth	r2, r3
 8004190:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004194:	801a      	strh	r2, [r3, #0]
 8004196:	e01c      	b.n	80041d2 <HAL_PCD_EP_DB_Transmit+0x592>
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d118      	bne.n	80041d2 <HAL_PCD_EP_DB_Transmit+0x592>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041b0:	4413      	add	r3, r2
 80041b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	00da      	lsls	r2, r3, #3
 80041bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041c0:	4413      	add	r3, r2
 80041c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041ce:	2200      	movs	r2, #0
 80041d0:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	78db      	ldrb	r3, [r3, #3]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d127      	bne.n	800422a <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041f4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80041f8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80041fc:	f083 0320 	eor.w	r3, r3, #32
 8004200:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	441a      	add	r2, r3
 8004212:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004216:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800421a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800421e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004226:	b29b      	uxth	r3, r3
 8004228:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	4619      	mov	r1, r3
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f00a fa2c 	bl	800e68e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d121      	bne.n	8004284 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800425a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	441a      	add	r2, r3
 800426c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004270:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004274:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004278:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800427c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004280:	b29b      	uxth	r3, r3
 8004282:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	e113      	b.n	80044b0 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d121      	bne.n	80042d6 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ac:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	441a      	add	r2, r3
 80042be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80042c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042dc:	2b01      	cmp	r3, #1
 80042de:	f040 80be 	bne.w	800445e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80042ea:	441a      	add	r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80042f8:	441a      	add	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	6a1a      	ldr	r2, [r3, #32]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	429a      	cmp	r2, r3
 8004308:	d309      	bcc.n	800431e <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	6a1a      	ldr	r2, [r3, #32]
 8004314:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004316:	1ad2      	subs	r2, r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	621a      	str	r2, [r3, #32]
 800431c:	e015      	b.n	800434a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d107      	bne.n	8004336 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004326:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800432a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004334:	e009      	b.n	800434a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2200      	movs	r2, #0
 8004340:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	785b      	ldrb	r3, [r3, #1]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d15f      	bne.n	8004418 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004366:	b29b      	uxth	r3, r3
 8004368:	461a      	mov	r2, r3
 800436a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800436c:	4413      	add	r3, r2
 800436e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	00da      	lsls	r2, r3, #3
 8004376:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004378:	4413      	add	r3, r2
 800437a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800437e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004380:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800438a:	b29a      	uxth	r2, r3
 800438c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10a      	bne.n	80043ac <HAL_PCD_EP_DB_Transmit+0x76c>
 8004396:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b29b      	uxth	r3, r3
 800439c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043a8:	801a      	strh	r2, [r3, #0]
 80043aa:	e04e      	b.n	800444a <HAL_PCD_EP_DB_Transmit+0x80a>
 80043ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80043b0:	d816      	bhi.n	80043e0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80043b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043b4:	085b      	lsrs	r3, r3, #1
 80043b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80043b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <HAL_PCD_EP_DB_Transmit+0x788>
 80043c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043c4:	3301      	adds	r3, #1
 80043c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80043c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	029b      	lsls	r3, r3, #10
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	4313      	orrs	r3, r2
 80043d8:	b29a      	uxth	r2, r3
 80043da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043dc:	801a      	strh	r2, [r3, #0]
 80043de:	e034      	b.n	800444a <HAL_PCD_EP_DB_Transmit+0x80a>
 80043e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80043e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043e8:	f003 031f 	and.w	r3, r3, #31
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <HAL_PCD_EP_DB_Transmit+0x7b6>
 80043f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043f2:	3b01      	subs	r3, #1
 80043f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80043f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043fe:	b29b      	uxth	r3, r3
 8004400:	029b      	lsls	r3, r3, #10
 8004402:	b29b      	uxth	r3, r3
 8004404:	4313      	orrs	r3, r2
 8004406:	b29b      	uxth	r3, r3
 8004408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800440c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004410:	b29a      	uxth	r2, r3
 8004412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004414:	801a      	strh	r2, [r3, #0]
 8004416:	e018      	b.n	800444a <HAL_PCD_EP_DB_Transmit+0x80a>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	785b      	ldrb	r3, [r3, #1]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d114      	bne.n	800444a <HAL_PCD_EP_DB_Transmit+0x80a>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004428:	b29b      	uxth	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800442e:	4413      	add	r3, r2
 8004430:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	00da      	lsls	r2, r3, #3
 8004438:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800443a:	4413      	add	r3, r2
 800443c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004440:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004442:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004444:	b29a      	uxth	r2, r3
 8004446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004448:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	6959      	ldr	r1, [r3, #20]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	895a      	ldrh	r2, [r3, #10]
 8004456:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004458:	b29b      	uxth	r3, r3
 800445a:	f004 f8cc 	bl	80085f6 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004478:	82fb      	strh	r3, [r7, #22]
 800447a:	8afb      	ldrh	r3, [r7, #22]
 800447c:	f083 0310 	eor.w	r3, r3, #16
 8004480:	82fb      	strh	r3, [r7, #22]
 8004482:	8afb      	ldrh	r3, [r7, #22]
 8004484:	f083 0320 	eor.w	r3, r3, #32
 8004488:	82fb      	strh	r3, [r7, #22]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	441a      	add	r2, r3
 8004498:	8afb      	ldrh	r3, [r7, #22]
 800449a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800449e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3798      	adds	r7, #152	@ 0x98
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	460b      	mov	r3, r1
 80044c4:	817b      	strh	r3, [r7, #10]
 80044c6:	4613      	mov	r3, r2
 80044c8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80044ca:	897b      	ldrh	r3, [r7, #10]
 80044cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044d6:	897b      	ldrh	r3, [r7, #10]
 80044d8:	f003 0207 	and.w	r2, r3, #7
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	3310      	adds	r3, #16
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4413      	add	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	e009      	b.n	8004502 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044ee:	897a      	ldrh	r2, [r7, #10]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004502:	893b      	ldrh	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d107      	bne.n	8004518 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	2200      	movs	r2, #0
 800450c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	b29a      	uxth	r2, r3
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	80da      	strh	r2, [r3, #6]
 8004516:	e00b      	b.n	8004530 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2201      	movs	r2, #1
 800451c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	b29a      	uxth	r2, r3
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	b29a      	uxth	r2, r3
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800453e:	b480      	push	{r7}
 8004540:	b085      	sub	sp, #20
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004562:	b29b      	uxth	r3, r3
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004576:	b29b      	uxth	r3, r3
 8004578:	f043 0302 	orr.w	r3, r3, #2
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004598:	4b05      	ldr	r3, [pc, #20]	@ (80045b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a04      	ldr	r2, [pc, #16]	@ (80045b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800459e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a2:	6013      	str	r3, [r2, #0]
}
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	58000400 	.word	0x58000400

080045b4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80045b8:	4b04      	ldr	r3, [pc, #16]	@ (80045cc <HAL_PWREx_GetVoltageRange+0x18>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	58000400 	.word	0x58000400

080045d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80045d4:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	4a04      	ldr	r2, [pc, #16]	@ (80045ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80045da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045de:	6053      	str	r3, [r2, #4]
}
 80045e0:	bf00      	nop
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	58000400 	.word	0x58000400

080045f0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80045f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004602:	d101      	bne.n	8004608 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004626:	6013      	str	r3, [r2, #0]
}
 8004628:	bf00      	nop
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8004632:	b480      	push	{r7}
 8004634:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004640:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004644:	6013      	str	r3, [r2, #0]
}
 8004646:	bf00      	nop
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004662:	d101      	bne.n	8004668 <LL_RCC_HSE_IsReady+0x18>
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <LL_RCC_HSE_IsReady+0x1a>
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004686:	6013      	str	r3, [r2, #0]
}
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004692:	b480      	push	{r7}
 8004694:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046a4:	6013      	str	r3, [r2, #0]
}
 80046a6:	bf00      	nop
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80046b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046c2:	d101      	bne.n	80046c8 <LL_RCC_HSI_IsReady+0x18>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <LL_RCC_HSI_IsReady+0x1a>
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80046dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	061b      	lsls	r3, r3, #24
 80046ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046ee:	4313      	orrs	r3, r2
 80046f0:	604b      	str	r3, [r1, #4]
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80046fe:	b480      	push	{r7}
 8004700:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004706:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800470a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004716:	bf00      	nop
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004728:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800472c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004730:	f023 0301 	bic.w	r3, r3, #1
 8004734:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004738:	bf00      	nop
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8004742:	b480      	push	{r7}
 8004744:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800474a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b02      	cmp	r3, #2
 8004754:	d101      	bne.n	800475a <LL_RCC_HSI48_IsReady+0x18>
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <LL_RCC_HSI48_IsReady+0x1a>
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8004766:	b480      	push	{r7}
 8004768:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800476a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004772:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800477e:	bf00      	nop
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800478c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004794:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004798:	f023 0301 	bic.w	r3, r3, #1
 800479c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80047a0:	bf00      	nop
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80047aa:	b480      	push	{r7}
 80047ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047ba:	f043 0304 	orr.w	r3, r3, #4
 80047be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80047c2:	bf00      	nop
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047dc:	f023 0304 	bic.w	r3, r3, #4
 80047e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80047e4:	bf00      	nop
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80047ee:	b480      	push	{r7}
 80047f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80047f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d101      	bne.n	8004806 <LL_RCC_LSE_IsReady+0x18>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <LL_RCC_LSE_IsReady+0x1a>
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8004812:	b480      	push	{r7}
 8004814:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800481a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800481e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800482a:	bf00      	nop
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800483c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004840:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800484c:	bf00      	nop
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8004856:	b480      	push	{r7}
 8004858:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800485a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800485e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b02      	cmp	r3, #2
 8004868:	d101      	bne.n	800486e <LL_RCC_LSI1_IsReady+0x18>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <LL_RCC_LSI1_IsReady+0x1a>
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800487a:	b480      	push	{r7}
 800487c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800487e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004886:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800488a:	f043 0304 	orr.w	r3, r3, #4
 800488e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004892:	bf00      	nop
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80048a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048ac:	f023 0304 	bic.w	r3, r3, #4
 80048b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80048b4:	bf00      	nop
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80048be:	b480      	push	{r7}
 80048c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80048c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d101      	bne.n	80048d6 <LL_RCC_LSI2_IsReady+0x18>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <LL_RCC_LSI2_IsReady+0x1a>
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80048ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048f2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	021b      	lsls	r3, r3, #8
 80048fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800491e:	f043 0301 	orr.w	r3, r3, #1
 8004922:	6013      	str	r3, [r2, #0]
}
 8004924:	bf00      	nop
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800492e:	b480      	push	{r7}
 8004930:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	6013      	str	r3, [r2, #0]
}
 8004942:	bf00      	nop
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b02      	cmp	r3, #2
 800495c:	d101      	bne.n	8004962 <LL_RCC_MSI_IsReady+0x16>
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <LL_RCC_MSI_IsReady+0x18>
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004980:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4313      	orrs	r3, r2
 8004988:	600b      	str	r3, [r1, #0]
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800499c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049a6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2bb0      	cmp	r3, #176	@ 0xb0
 80049ac:	d901      	bls.n	80049b2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80049ae:	23b0      	movs	r3, #176	@ 0xb0
 80049b0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80049b2:	687b      	ldr	r3, [r7, #4]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80049c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049da:	4313      	orrs	r3, r2
 80049dc:	604b      	str	r3, [r1, #4]
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80049f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f023 0203 	bic.w	r2, r3, #3
 80049fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004a12:	b480      	push	{r7}
 8004a14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 030c 	and.w	r3, r3, #12
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004a5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004a62:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004a8e:	f023 020f 	bic.w	r2, r3, #15
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	091b      	lsrs	r3, r3, #4
 8004a96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004abe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	608b      	str	r3, [r1, #8]
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ae6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	608b      	str	r3, [r1, #8]
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004b32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b36:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004b62:	b480      	push	{r7}
 8004b64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b8c:	6013      	str	r3, [r2, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004baa:	6013      	str	r3, [r2, #0]
}
 8004bac:	bf00      	nop
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bc8:	d101      	bne.n	8004bce <LL_RCC_PLL_IsReady+0x18>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <LL_RCC_PLL_IsReady+0x1a>
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004bde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	0a1b      	lsrs	r3, r3, #8
 8004be6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004bf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f003 0303 	and.w	r3, r3, #3
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c4e:	d101      	bne.n	8004c54 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c68:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c74:	d101      	bne.n	8004c7a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004c86:	b480      	push	{r7}
 8004c88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004c8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c9a:	d101      	bne.n	8004ca0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cbe:	d101      	bne.n	8004cc4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ce2:	d101      	bne.n	8004ce8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cf4:	b590      	push	{r4, r7, lr}
 8004cf6:	b08d      	sub	sp, #52	@ 0x34
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e363      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 808d 	beq.w	8004e2e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d14:	f7ff fe7d 	bl	8004a12 <LL_RCC_GetSysClkSource>
 8004d18:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d1a:	f7ff ff83 	bl	8004c24 <LL_RCC_PLL_GetMainSource>
 8004d1e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <HAL_RCC_OscConfig+0x3e>
 8004d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d28:	2b0c      	cmp	r3, #12
 8004d2a:	d147      	bne.n	8004dbc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d144      	bne.n	8004dbc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e347      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004d42:	f7ff fe28 	bl	8004996 <LL_RCC_MSI_GetRange>
 8004d46:	4603      	mov	r3, r0
 8004d48:	429c      	cmp	r4, r3
 8004d4a:	d914      	bls.n	8004d76 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fd4d 	bl	80057f0 <RCC_SetFlashLatencyFromMSIRange>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e336      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff fe02 	bl	800496e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff fe26 	bl	80049c0 <LL_RCC_MSI_SetCalibTrimming>
 8004d74:	e013      	b.n	8004d9e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff fdf7 	bl	800496e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff fe1b 	bl	80049c0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fd2e 	bl	80057f0 <RCC_SetFlashLatencyFromMSIRange>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e317      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d9e:	f000 fccb 	bl	8005738 <HAL_RCC_GetHCLKFreq>
 8004da2:	4603      	mov	r3, r0
 8004da4:	4aa4      	ldr	r2, [pc, #656]	@ (8005038 <HAL_RCC_OscConfig+0x344>)
 8004da6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004da8:	4ba4      	ldr	r3, [pc, #656]	@ (800503c <HAL_RCC_OscConfig+0x348>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fb fdad 	bl	800090c <HAL_InitTick>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d039      	beq.n	8004e2c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e308      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01e      	beq.n	8004e02 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004dc4:	f7ff fda4 	bl	8004910 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004dc8:	f7fb ff52 	bl	8000c70 <HAL_GetTick>
 8004dcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dd0:	f7fb ff4e 	bl	8000c70 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e2f5      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004de2:	f7ff fdb3 	bl	800494c <LL_RCC_MSI_IsReady>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f1      	beq.n	8004dd0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff fdbc 	bl	800496e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff fde0 	bl	80049c0 <LL_RCC_MSI_SetCalibTrimming>
 8004e00:	e015      	b.n	8004e2e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e02:	f7ff fd94 	bl	800492e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e06:	f7fb ff33 	bl	8000c70 <HAL_GetTick>
 8004e0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004e0c:	e008      	b.n	8004e20 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e0e:	f7fb ff2f 	bl	8000c70 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e2d6      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004e20:	f7ff fd94 	bl	800494c <LL_RCC_MSI_IsReady>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f1      	bne.n	8004e0e <HAL_RCC_OscConfig+0x11a>
 8004e2a:	e000      	b.n	8004e2e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004e2c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d047      	beq.n	8004eca <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e3a:	f7ff fdea 	bl	8004a12 <LL_RCC_GetSysClkSource>
 8004e3e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e40:	f7ff fef0 	bl	8004c24 <LL_RCC_PLL_GetMainSource>
 8004e44:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d005      	beq.n	8004e58 <HAL_RCC_OscConfig+0x164>
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	2b0c      	cmp	r3, #12
 8004e50:	d108      	bne.n	8004e64 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d105      	bne.n	8004e64 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d134      	bne.n	8004eca <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e2b4      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e6c:	d102      	bne.n	8004e74 <HAL_RCC_OscConfig+0x180>
 8004e6e:	f7ff fbd1 	bl	8004614 <LL_RCC_HSE_Enable>
 8004e72:	e001      	b.n	8004e78 <HAL_RCC_OscConfig+0x184>
 8004e74:	f7ff fbdd 	bl	8004632 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d012      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fb fef6 	bl	8000c70 <HAL_GetTick>
 8004e84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e88:	f7fb fef2 	bl	8000c70 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	@ 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e299      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004e9a:	f7ff fbd9 	bl	8004650 <LL_RCC_HSE_IsReady>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0f1      	beq.n	8004e88 <HAL_RCC_OscConfig+0x194>
 8004ea4:	e011      	b.n	8004eca <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea6:	f7fb fee3 	bl	8000c70 <HAL_GetTick>
 8004eaa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eae:	f7fb fedf 	bl	8000c70 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b64      	cmp	r3, #100	@ 0x64
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e286      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004ec0:	f7ff fbc6 	bl	8004650 <LL_RCC_HSE_IsReady>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f1      	bne.n	8004eae <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d04c      	beq.n	8004f70 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed6:	f7ff fd9c 	bl	8004a12 <LL_RCC_GetSysClkSource>
 8004eda:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004edc:	f7ff fea2 	bl	8004c24 <LL_RCC_PLL_GetMainSource>
 8004ee0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d005      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x200>
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2b0c      	cmp	r3, #12
 8004eec:	d10e      	bne.n	8004f0c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d10b      	bne.n	8004f0c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e266      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff fbe5 	bl	80046d4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004f0a:	e031      	b.n	8004f70 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d019      	beq.n	8004f48 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f14:	f7ff fbae 	bl	8004674 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fb feaa 	bl	8000c70 <HAL_GetTick>
 8004f1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f20:	f7fb fea6 	bl	8000c70 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e24d      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004f32:	f7ff fbbd 	bl	80046b0 <LL_RCC_HSI_IsReady>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f1      	beq.n	8004f20 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fbc7 	bl	80046d4 <LL_RCC_HSI_SetCalibTrimming>
 8004f46:	e013      	b.n	8004f70 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f48:	f7ff fba3 	bl	8004692 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4c:	f7fb fe90 	bl	8000c70 <HAL_GetTick>
 8004f50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f54:	f7fb fe8c 	bl	8000c70 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e233      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004f66:	f7ff fba3 	bl	80046b0 <LL_RCC_HSI_IsReady>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1f1      	bne.n	8004f54 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80a3 	beq.w	80050d0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d076      	beq.n	8005080 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d046      	beq.n	800502c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004f9e:	f7ff fc5a 	bl	8004856 <LL_RCC_LSI1_IsReady>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d113      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004fa8:	f7ff fc33 	bl	8004812 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fac:	f7fb fe60 	bl	8000c70 <HAL_GetTick>
 8004fb0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004fb4:	f7fb fe5c 	bl	8000c70 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e203      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004fc6:	f7ff fc46 	bl	8004856 <LL_RCC_LSI1_IsReady>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0f1      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004fd0:	f7ff fc53 	bl	800487a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fb fe4c 	bl	8000c70 <HAL_GetTick>
 8004fd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004fdc:	f7fb fe48 	bl	8000c70 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e1ef      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004fee:	f7ff fc66 	bl	80048be <LL_RCC_LSI2_IsReady>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f1      	beq.n	8004fdc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff fc70 	bl	80048e2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005002:	f7ff fc17 	bl	8004834 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fb fe33 	bl	8000c70 <HAL_GetTick>
 800500a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800500e:	f7fb fe2f 	bl	8000c70 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e1d6      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005020:	f7ff fc19 	bl	8004856 <LL_RCC_LSI1_IsReady>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f1      	bne.n	800500e <HAL_RCC_OscConfig+0x31a>
 800502a:	e051      	b.n	80050d0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800502c:	f7ff fbf1 	bl	8004812 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fb fe1e 	bl	8000c70 <HAL_GetTick>
 8005034:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005036:	e00c      	b.n	8005052 <HAL_RCC_OscConfig+0x35e>
 8005038:	2000000c 	.word	0x2000000c
 800503c:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005040:	f7fb fe16 	bl	8000c70 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e1bd      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005052:	f7ff fc00 	bl	8004856 <LL_RCC_LSI1_IsReady>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0f1      	beq.n	8005040 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800505c:	f7ff fc1e 	bl	800489c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005060:	e008      	b.n	8005074 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005062:	f7fb fe05 	bl	8000c70 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b03      	cmp	r3, #3
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e1ac      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005074:	f7ff fc23 	bl	80048be <LL_RCC_LSI2_IsReady>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f1      	bne.n	8005062 <HAL_RCC_OscConfig+0x36e>
 800507e:	e027      	b.n	80050d0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005080:	f7ff fc0c 	bl	800489c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005084:	f7fb fdf4 	bl	8000c70 <HAL_GetTick>
 8005088:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800508c:	f7fb fdf0 	bl	8000c70 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b03      	cmp	r3, #3
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e197      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800509e:	f7ff fc0e 	bl	80048be <LL_RCC_LSI2_IsReady>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f1      	bne.n	800508c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80050a8:	f7ff fbc4 	bl	8004834 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ac:	f7fb fde0 	bl	8000c70 <HAL_GetTick>
 80050b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80050b4:	f7fb fddc 	bl	8000c70 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e183      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80050c6:	f7ff fbc6 	bl	8004856 <LL_RCC_LSI1_IsReady>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1f1      	bne.n	80050b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d05b      	beq.n	8005194 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050dc:	4ba7      	ldr	r3, [pc, #668]	@ (800537c <HAL_RCC_OscConfig+0x688>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d114      	bne.n	8005112 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80050e8:	f7ff fa54 	bl	8004594 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ec:	f7fb fdc0 	bl	8000c70 <HAL_GetTick>
 80050f0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f4:	f7fb fdbc 	bl	8000c70 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e163      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005106:	4b9d      	ldr	r3, [pc, #628]	@ (800537c <HAL_RCC_OscConfig+0x688>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d102      	bne.n	8005120 <HAL_RCC_OscConfig+0x42c>
 800511a:	f7ff fb24 	bl	8004766 <LL_RCC_LSE_Enable>
 800511e:	e00c      	b.n	800513a <HAL_RCC_OscConfig+0x446>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b05      	cmp	r3, #5
 8005126:	d104      	bne.n	8005132 <HAL_RCC_OscConfig+0x43e>
 8005128:	f7ff fb3f 	bl	80047aa <LL_RCC_LSE_EnableBypass>
 800512c:	f7ff fb1b 	bl	8004766 <LL_RCC_LSE_Enable>
 8005130:	e003      	b.n	800513a <HAL_RCC_OscConfig+0x446>
 8005132:	f7ff fb29 	bl	8004788 <LL_RCC_LSE_Disable>
 8005136:	f7ff fb49 	bl	80047cc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d014      	beq.n	800516c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005142:	f7fb fd95 	bl	8000c70 <HAL_GetTick>
 8005146:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005148:	e00a      	b.n	8005160 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7fb fd91 	bl	8000c70 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e136      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005160:	f7ff fb45 	bl	80047ee <LL_RCC_LSE_IsReady>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0ef      	beq.n	800514a <HAL_RCC_OscConfig+0x456>
 800516a:	e013      	b.n	8005194 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516c:	f7fb fd80 	bl	8000c70 <HAL_GetTick>
 8005170:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005172:	e00a      	b.n	800518a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005174:	f7fb fd7c 	bl	8000c70 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e121      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800518a:	f7ff fb30 	bl	80047ee <LL_RCC_LSE_IsReady>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1ef      	bne.n	8005174 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d02c      	beq.n	80051fa <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d014      	beq.n	80051d2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051a8:	f7ff faa9 	bl	80046fe <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ac:	f7fb fd60 	bl	8000c70 <HAL_GetTick>
 80051b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051b4:	f7fb fd5c 	bl	8000c70 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e103      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80051c6:	f7ff fabc 	bl	8004742 <LL_RCC_HSI48_IsReady>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0f1      	beq.n	80051b4 <HAL_RCC_OscConfig+0x4c0>
 80051d0:	e013      	b.n	80051fa <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051d2:	f7ff faa5 	bl	8004720 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d6:	f7fb fd4b 	bl	8000c70 <HAL_GetTick>
 80051da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051de:	f7fb fd47 	bl	8000c70 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e0ee      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80051f0:	f7ff faa7 	bl	8004742 <LL_RCC_HSI48_IsReady>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f1      	bne.n	80051de <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 80e4 	beq.w	80053cc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005204:	f7ff fc05 	bl	8004a12 <LL_RCC_GetSysClkSource>
 8005208:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800520a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005216:	2b02      	cmp	r3, #2
 8005218:	f040 80b4 	bne.w	8005384 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f003 0203 	and.w	r2, r3, #3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	429a      	cmp	r2, r3
 8005228:	d123      	bne.n	8005272 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005234:	429a      	cmp	r2, r3
 8005236:	d11c      	bne.n	8005272 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	0a1b      	lsrs	r3, r3, #8
 800523c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005244:	429a      	cmp	r2, r3
 8005246:	d114      	bne.n	8005272 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d10d      	bne.n	8005272 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d106      	bne.n	8005272 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800526e:	429a      	cmp	r2, r3
 8005270:	d05d      	beq.n	800532e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2b0c      	cmp	r3, #12
 8005276:	d058      	beq.n	800532a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e0a1      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800528a:	f7ff fc85 	bl	8004b98 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800528e:	f7fb fcef 	bl	8000c70 <HAL_GetTick>
 8005292:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005296:	f7fb fceb 	bl	8000c70 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e092      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1ef      	bne.n	8005296 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	4b30      	ldr	r3, [pc, #192]	@ (8005380 <HAL_RCC_OscConfig+0x68c>)
 80052be:	4013      	ands	r3, r2
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80052c8:	4311      	orrs	r1, r2
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80052ce:	0212      	lsls	r2, r2, #8
 80052d0:	4311      	orrs	r1, r2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80052d6:	4311      	orrs	r1, r2
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80052dc:	4311      	orrs	r1, r2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80052e2:	430a      	orrs	r2, r1
 80052e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80052ec:	f7ff fc45 	bl	8004b7a <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005300:	f7fb fcb6 	bl	8000c70 <HAL_GetTick>
 8005304:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005308:	f7fb fcb2 	bl	8000c70 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e059      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800531a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0ef      	beq.n	8005308 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005328:	e050      	b.n	80053cc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e04f      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800532e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d147      	bne.n	80053cc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800533c:	f7ff fc1d 	bl	8004b7a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800534a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800534e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005350:	f7fb fc8e 	bl	8000c70 <HAL_GetTick>
 8005354:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005358:	f7fb fc8a 	bl	8000c70 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e031      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0ef      	beq.n	8005358 <HAL_RCC_OscConfig+0x664>
 8005378:	e028      	b.n	80053cc <HAL_RCC_OscConfig+0x6d8>
 800537a:	bf00      	nop
 800537c:	58000400 	.word	0x58000400
 8005380:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	2b0c      	cmp	r3, #12
 8005388:	d01e      	beq.n	80053c8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538a:	f7ff fc05 	bl	8004b98 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538e:	f7fb fc6f 	bl	8000c70 <HAL_GetTick>
 8005392:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005396:	f7fb fc6b 	bl	8000c70 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e012      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1ef      	bne.n	8005396 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80053b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053c0:	4b05      	ldr	r3, [pc, #20]	@ (80053d8 <HAL_RCC_OscConfig+0x6e4>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	60cb      	str	r3, [r1, #12]
 80053c6:	e001      	b.n	80053cc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3734      	adds	r7, #52	@ 0x34
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd90      	pop	{r4, r7, pc}
 80053d6:	bf00      	nop
 80053d8:	eefefffc 	.word	0xeefefffc

080053dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e12d      	b.n	800564c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053f0:	4b98      	ldr	r3, [pc, #608]	@ (8005654 <HAL_RCC_ClockConfig+0x278>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d91b      	bls.n	8005436 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fe:	4b95      	ldr	r3, [pc, #596]	@ (8005654 <HAL_RCC_ClockConfig+0x278>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f023 0207 	bic.w	r2, r3, #7
 8005406:	4993      	ldr	r1, [pc, #588]	@ (8005654 <HAL_RCC_ClockConfig+0x278>)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	4313      	orrs	r3, r2
 800540c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800540e:	f7fb fc2f 	bl	8000c70 <HAL_GetTick>
 8005412:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005414:	e008      	b.n	8005428 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005416:	f7fb fc2b 	bl	8000c70 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e111      	b.n	800564c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005428:	4b8a      	ldr	r3, [pc, #552]	@ (8005654 <HAL_RCC_ClockConfig+0x278>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d1ef      	bne.n	8005416 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d016      	beq.n	8005470 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff faef 	bl	8004a2a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800544c:	f7fb fc10 	bl	8000c70 <HAL_GetTick>
 8005450:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005452:	e008      	b.n	8005466 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005454:	f7fb fc0c 	bl	8000c70 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e0f2      	b.n	800564c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005466:	f7ff fbe9 	bl	8004c3c <LL_RCC_IsActiveFlag_HPRE>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f1      	beq.n	8005454 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0320 	and.w	r3, r3, #32
 8005478:	2b00      	cmp	r3, #0
 800547a:	d016      	beq.n	80054aa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff fae6 	bl	8004a52 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005486:	f7fb fbf3 	bl	8000c70 <HAL_GetTick>
 800548a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800548e:	f7fb fbef 	bl	8000c70 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e0d5      	b.n	800564c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80054a0:	f7ff fbde 	bl	8004c60 <LL_RCC_IsActiveFlag_C2HPRE>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f1      	beq.n	800548e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d016      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff fadf 	bl	8004a7e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054c0:	f7fb fbd6 	bl	8000c70 <HAL_GetTick>
 80054c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80054c6:	e008      	b.n	80054da <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054c8:	f7fb fbd2 	bl	8000c70 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e0b8      	b.n	800564c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80054da:	f7ff fbd4 	bl	8004c86 <LL_RCC_IsActiveFlag_SHDHPRE>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0f1      	beq.n	80054c8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d016      	beq.n	800551e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff fad9 	bl	8004aac <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054fa:	f7fb fbb9 	bl	8000c70 <HAL_GetTick>
 80054fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005500:	e008      	b.n	8005514 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005502:	f7fb fbb5 	bl	8000c70 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e09b      	b.n	800564c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005514:	f7ff fbca 	bl	8004cac <LL_RCC_IsActiveFlag_PPRE1>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0f1      	beq.n	8005502 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d017      	beq.n	800555a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	4618      	mov	r0, r3
 8005532:	f7ff facf 	bl	8004ad4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005536:	f7fb fb9b 	bl	8000c70 <HAL_GetTick>
 800553a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800553c:	e008      	b.n	8005550 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800553e:	f7fb fb97 	bl	8000c70 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e07d      	b.n	800564c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005550:	f7ff fbbe 	bl	8004cd0 <LL_RCC_IsActiveFlag_PPRE2>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f1      	beq.n	800553e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d043      	beq.n	80055ee <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d106      	bne.n	800557c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800556e:	f7ff f86f 	bl	8004650 <LL_RCC_HSE_IsReady>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d11e      	bne.n	80055b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e067      	b.n	800564c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b03      	cmp	r3, #3
 8005582:	d106      	bne.n	8005592 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005584:	f7ff fb17 	bl	8004bb6 <LL_RCC_PLL_IsReady>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d113      	bne.n	80055b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e05c      	b.n	800564c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800559a:	f7ff f9d7 	bl	800494c <LL_RCC_MSI_IsReady>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d108      	bne.n	80055b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e051      	b.n	800564c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80055a8:	f7ff f882 	bl	80046b0 <LL_RCC_HSI_IsReady>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e04a      	b.n	800564c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff fa15 	bl	80049ea <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c0:	f7fb fb56 	bl	8000c70 <HAL_GetTick>
 80055c4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c6:	e00a      	b.n	80055de <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c8:	f7fb fb52 	bl	8000c70 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e036      	b.n	800564c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055de:	f7ff fa18 	bl	8004a12 <LL_RCC_GetSysClkSource>
 80055e2:	4602      	mov	r2, r0
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d1ec      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055ee:	4b19      	ldr	r3, [pc, #100]	@ (8005654 <HAL_RCC_ClockConfig+0x278>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d21b      	bcs.n	8005634 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fc:	4b15      	ldr	r3, [pc, #84]	@ (8005654 <HAL_RCC_ClockConfig+0x278>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f023 0207 	bic.w	r2, r3, #7
 8005604:	4913      	ldr	r1, [pc, #76]	@ (8005654 <HAL_RCC_ClockConfig+0x278>)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	4313      	orrs	r3, r2
 800560a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800560c:	f7fb fb30 	bl	8000c70 <HAL_GetTick>
 8005610:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005612:	e008      	b.n	8005626 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005614:	f7fb fb2c 	bl	8000c70 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e012      	b.n	800564c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005626:	4b0b      	ldr	r3, [pc, #44]	@ (8005654 <HAL_RCC_ClockConfig+0x278>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	429a      	cmp	r2, r3
 8005632:	d1ef      	bne.n	8005614 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005634:	f000 f880 	bl	8005738 <HAL_RCC_GetHCLKFreq>
 8005638:	4603      	mov	r3, r0
 800563a:	4a07      	ldr	r2, [pc, #28]	@ (8005658 <HAL_RCC_ClockConfig+0x27c>)
 800563c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800563e:	f7fb fb23 	bl	8000c88 <HAL_GetTickPrio>
 8005642:	4603      	mov	r3, r0
 8005644:	4618      	mov	r0, r3
 8005646:	f7fb f961 	bl	800090c <HAL_InitTick>
 800564a:	4603      	mov	r3, r0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	58004000 	.word	0x58004000
 8005658:	2000000c 	.word	0x2000000c

0800565c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800565c:	b590      	push	{r4, r7, lr}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005662:	f7ff f9d6 	bl	8004a12 <LL_RCC_GetSysClkSource>
 8005666:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800566e:	f7ff f992 	bl	8004996 <LL_RCC_MSI_GetRange>
 8005672:	4603      	mov	r3, r0
 8005674:	091b      	lsrs	r3, r3, #4
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	4a2b      	ldr	r2, [pc, #172]	@ (8005728 <HAL_RCC_GetSysClockFreq+0xcc>)
 800567c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e04b      	b.n	800571c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b04      	cmp	r3, #4
 8005688:	d102      	bne.n	8005690 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800568a:	4b28      	ldr	r3, [pc, #160]	@ (800572c <HAL_RCC_GetSysClockFreq+0xd0>)
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	e045      	b.n	800571c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b08      	cmp	r3, #8
 8005694:	d10a      	bne.n	80056ac <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005696:	f7fe ffab 	bl	80045f0 <LL_RCC_HSE_IsEnabledDiv2>
 800569a:	4603      	mov	r3, r0
 800569c:	2b01      	cmp	r3, #1
 800569e:	d102      	bne.n	80056a6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80056a0:	4b23      	ldr	r3, [pc, #140]	@ (8005730 <HAL_RCC_GetSysClockFreq+0xd4>)
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e03a      	b.n	800571c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80056a6:	4b23      	ldr	r3, [pc, #140]	@ (8005734 <HAL_RCC_GetSysClockFreq+0xd8>)
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	e037      	b.n	800571c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80056ac:	f7ff faba 	bl	8004c24 <LL_RCC_PLL_GetMainSource>
 80056b0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d003      	beq.n	80056c0 <HAL_RCC_GetSysClockFreq+0x64>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d003      	beq.n	80056c6 <HAL_RCC_GetSysClockFreq+0x6a>
 80056be:	e00d      	b.n	80056dc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80056c0:	4b1a      	ldr	r3, [pc, #104]	@ (800572c <HAL_RCC_GetSysClockFreq+0xd0>)
 80056c2:	60bb      	str	r3, [r7, #8]
        break;
 80056c4:	e015      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80056c6:	f7fe ff93 	bl	80045f0 <LL_RCC_HSE_IsEnabledDiv2>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d102      	bne.n	80056d6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80056d0:	4b17      	ldr	r3, [pc, #92]	@ (8005730 <HAL_RCC_GetSysClockFreq+0xd4>)
 80056d2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80056d4:	e00d      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80056d6:	4b17      	ldr	r3, [pc, #92]	@ (8005734 <HAL_RCC_GetSysClockFreq+0xd8>)
 80056d8:	60bb      	str	r3, [r7, #8]
        break;
 80056da:	e00a      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80056dc:	f7ff f95b 	bl	8004996 <LL_RCC_MSI_GetRange>
 80056e0:	4603      	mov	r3, r0
 80056e2:	091b      	lsrs	r3, r3, #4
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005728 <HAL_RCC_GetSysClockFreq+0xcc>)
 80056ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ee:	60bb      	str	r3, [r7, #8]
        break;
 80056f0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80056f2:	f7ff fa72 	bl	8004bda <LL_RCC_PLL_GetN>
 80056f6:	4602      	mov	r2, r0
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	fb03 f402 	mul.w	r4, r3, r2
 80056fe:	f7ff fa85 	bl	8004c0c <LL_RCC_PLL_GetDivider>
 8005702:	4603      	mov	r3, r0
 8005704:	091b      	lsrs	r3, r3, #4
 8005706:	3301      	adds	r3, #1
 8005708:	fbb4 f4f3 	udiv	r4, r4, r3
 800570c:	f7ff fa72 	bl	8004bf4 <LL_RCC_PLL_GetR>
 8005710:	4603      	mov	r3, r0
 8005712:	0f5b      	lsrs	r3, r3, #29
 8005714:	3301      	adds	r3, #1
 8005716:	fbb4 f3f3 	udiv	r3, r4, r3
 800571a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800571c:	68fb      	ldr	r3, [r7, #12]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	bd90      	pop	{r4, r7, pc}
 8005726:	bf00      	nop
 8005728:	0800f770 	.word	0x0800f770
 800572c:	00f42400 	.word	0x00f42400
 8005730:	003d0900 	.word	0x003d0900
 8005734:	007a1200 	.word	0x007a1200

08005738 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005738:	b598      	push	{r3, r4, r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800573c:	f7ff ff8e 	bl	800565c <HAL_RCC_GetSysClockFreq>
 8005740:	4604      	mov	r4, r0
 8005742:	f7ff f9db 	bl	8004afc <LL_RCC_GetAHBPrescaler>
 8005746:	4603      	mov	r3, r0
 8005748:	091b      	lsrs	r3, r3, #4
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	4a03      	ldr	r2, [pc, #12]	@ (800575c <HAL_RCC_GetHCLKFreq+0x24>)
 8005750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005754:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005758:	4618      	mov	r0, r3
 800575a:	bd98      	pop	{r3, r4, r7, pc}
 800575c:	0800f710 	.word	0x0800f710

08005760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005760:	b598      	push	{r3, r4, r7, lr}
 8005762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005764:	f7ff ffe8 	bl	8005738 <HAL_RCC_GetHCLKFreq>
 8005768:	4604      	mov	r4, r0
 800576a:	f7ff f9fa 	bl	8004b62 <LL_RCC_GetAPB2Prescaler>
 800576e:	4603      	mov	r3, r0
 8005770:	0adb      	lsrs	r3, r3, #11
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	4a04      	ldr	r2, [pc, #16]	@ (8005788 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800577c:	f003 031f 	and.w	r3, r3, #31
 8005780:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005784:	4618      	mov	r0, r3
 8005786:	bd98      	pop	{r3, r4, r7, pc}
 8005788:	0800f750 	.word	0x0800f750

0800578c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	226f      	movs	r2, #111	@ 0x6f
 800579a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800579c:	f7ff f939 	bl	8004a12 <LL_RCC_GetSysClkSource>
 80057a0:	4602      	mov	r2, r0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80057a6:	f7ff f9a9 	bl	8004afc <LL_RCC_GetAHBPrescaler>
 80057aa:	4602      	mov	r2, r0
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80057b0:	f7ff f9cb 	bl	8004b4a <LL_RCC_GetAPB1Prescaler>
 80057b4:	4602      	mov	r2, r0
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80057ba:	f7ff f9d2 	bl	8004b62 <LL_RCC_GetAPB2Prescaler>
 80057be:	4602      	mov	r2, r0
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80057c4:	f7ff f9a6 	bl	8004b14 <LL_C2_RCC_GetAHBPrescaler>
 80057c8:	4602      	mov	r2, r0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80057ce:	f7ff f9ae 	bl	8004b2e <LL_RCC_GetAHB4Prescaler>
 80057d2:	4602      	mov	r2, r0
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80057d8:	4b04      	ldr	r3, [pc, #16]	@ (80057ec <HAL_RCC_GetClockConfig+0x60>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0207 	and.w	r2, r3, #7
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	601a      	str	r2, [r3, #0]
}
 80057e4:	bf00      	nop
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	58004000 	.word	0x58004000

080057f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80057f0:	b590      	push	{r4, r7, lr}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2bb0      	cmp	r3, #176	@ 0xb0
 80057fc:	d903      	bls.n	8005806 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80057fe:	4b15      	ldr	r3, [pc, #84]	@ (8005854 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	e007      	b.n	8005816 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	091b      	lsrs	r3, r3, #4
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	4a11      	ldr	r2, [pc, #68]	@ (8005854 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005814:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005816:	f7ff f98a 	bl	8004b2e <LL_RCC_GetAHB4Prescaler>
 800581a:	4603      	mov	r3, r0
 800581c:	091b      	lsrs	r3, r3, #4
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	4a0d      	ldr	r2, [pc, #52]	@ (8005858 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	fbb2 f3f3 	udiv	r3, r2, r3
 800582e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4a0a      	ldr	r2, [pc, #40]	@ (800585c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005834:	fba2 2303 	umull	r2, r3, r2, r3
 8005838:	0c9c      	lsrs	r4, r3, #18
 800583a:	f7fe febb 	bl	80045b4 <HAL_PWREx_GetVoltageRange>
 800583e:	4603      	mov	r3, r0
 8005840:	4619      	mov	r1, r3
 8005842:	4620      	mov	r0, r4
 8005844:	f000 f80c 	bl	8005860 <RCC_SetFlashLatency>
 8005848:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	bd90      	pop	{r4, r7, pc}
 8005852:	bf00      	nop
 8005854:	0800f770 	.word	0x0800f770
 8005858:	0800f710 	.word	0x0800f710
 800585c:	431bde83 	.word	0x431bde83

08005860 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005860:	b590      	push	{r4, r7, lr}
 8005862:	b093      	sub	sp, #76	@ 0x4c
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800586a:	4b37      	ldr	r3, [pc, #220]	@ (8005948 <RCC_SetFlashLatency+0xe8>)
 800586c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005870:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005872:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005876:	4a35      	ldr	r2, [pc, #212]	@ (800594c <RCC_SetFlashLatency+0xec>)
 8005878:	f107 031c 	add.w	r3, r7, #28
 800587c:	ca07      	ldmia	r2, {r0, r1, r2}
 800587e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005882:	4b33      	ldr	r3, [pc, #204]	@ (8005950 <RCC_SetFlashLatency+0xf0>)
 8005884:	f107 040c 	add.w	r4, r7, #12
 8005888:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800588a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800588e:	2300      	movs	r3, #0
 8005890:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005898:	d11a      	bne.n	80058d0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800589a:	2300      	movs	r3, #0
 800589c:	643b      	str	r3, [r7, #64]	@ 0x40
 800589e:	e013      	b.n	80058c8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80058a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	3348      	adds	r3, #72	@ 0x48
 80058a6:	443b      	add	r3, r7
 80058a8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d807      	bhi.n	80058c2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80058b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	3348      	adds	r3, #72	@ 0x48
 80058b8:	443b      	add	r3, r7
 80058ba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80058be:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80058c0:	e020      	b.n	8005904 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80058c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058c4:	3301      	adds	r3, #1
 80058c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80058c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d9e8      	bls.n	80058a0 <RCC_SetFlashLatency+0x40>
 80058ce:	e019      	b.n	8005904 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80058d0:	2300      	movs	r3, #0
 80058d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058d4:	e013      	b.n	80058fe <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80058d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	3348      	adds	r3, #72	@ 0x48
 80058dc:	443b      	add	r3, r7
 80058de:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d807      	bhi.n	80058f8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80058e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	3348      	adds	r3, #72	@ 0x48
 80058ee:	443b      	add	r3, r7
 80058f0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80058f4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80058f6:	e005      	b.n	8005904 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80058f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058fa:	3301      	adds	r3, #1
 80058fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005900:	2b02      	cmp	r3, #2
 8005902:	d9e8      	bls.n	80058d6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005904:	4b13      	ldr	r3, [pc, #76]	@ (8005954 <RCC_SetFlashLatency+0xf4>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f023 0207 	bic.w	r2, r3, #7
 800590c:	4911      	ldr	r1, [pc, #68]	@ (8005954 <RCC_SetFlashLatency+0xf4>)
 800590e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005910:	4313      	orrs	r3, r2
 8005912:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005914:	f7fb f9ac 	bl	8000c70 <HAL_GetTick>
 8005918:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800591a:	e008      	b.n	800592e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800591c:	f7fb f9a8 	bl	8000c70 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e007      	b.n	800593e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800592e:	4b09      	ldr	r3, [pc, #36]	@ (8005954 <RCC_SetFlashLatency+0xf4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005938:	429a      	cmp	r2, r3
 800593a:	d1ef      	bne.n	800591c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	374c      	adds	r7, #76	@ 0x4c
 8005942:	46bd      	mov	sp, r7
 8005944:	bd90      	pop	{r4, r7, pc}
 8005946:	bf00      	nop
 8005948:	0800f614 	.word	0x0800f614
 800594c:	0800f624 	.word	0x0800f624
 8005950:	0800f630 	.word	0x0800f630
 8005954:	58004000 	.word	0x58004000

08005958 <LL_RCC_LSE_IsEnabled>:
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800595c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <LL_RCC_LSE_IsEnabled+0x18>
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <LL_RCC_LSE_IsEnabled+0x1a>
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <LL_RCC_LSE_IsReady>:
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b02      	cmp	r3, #2
 800598e:	d101      	bne.n	8005994 <LL_RCC_LSE_IsReady+0x18>
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <LL_RCC_LSE_IsReady+0x1a>
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <LL_RCC_SetRFWKPClockSource>:
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80059a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <LL_RCC_SetSMPSClockSource>:
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80059d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	f023 0203 	bic.w	r2, r3, #3
 80059de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <LL_RCC_SetSMPSPrescaler>:
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80059fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a02:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <LL_RCC_SetUSARTClockSource>:
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a2c:	f023 0203 	bic.w	r2, r3, #3
 8005a30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <LL_RCC_SetLPUARTClockSource>:
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a58:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <LL_RCC_SetI2CClockSource>:
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005a7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a80:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	091b      	lsrs	r3, r3, #4
 8005a88:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	401a      	ands	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005a98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <LL_RCC_SetLPTIMClockSource>:
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	0c1b      	lsrs	r3, r3, #16
 8005ac2:	041b      	lsls	r3, r3, #16
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	401a      	ands	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <LL_RCC_SetSAIClockSource>:
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005af6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <LL_RCC_SetRNGClockSource>:
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005b16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005b22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <LL_RCC_SetCLK48ClockSource>:
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <LL_RCC_SetUSBClockSource>:
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b082      	sub	sp, #8
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff ffe3 	bl	8005b3a <LL_RCC_SetCLK48ClockSource>
}
 8005b74:	bf00      	nop
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <LL_RCC_SetADCClockSource>:
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b8c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <LL_RCC_SetRTCClockSource>:
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <LL_RCC_GetRTCClockSource>:
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <LL_RCC_ForceBackupDomainReset>:
{
 8005bee:	b480      	push	{r7}
 8005bf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005c06:	bf00      	nop
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005c28:	bf00      	nop
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <LL_RCC_PLLSAI1_Enable>:
{
 8005c32:	b480      	push	{r7}
 8005c34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c44:	6013      	str	r3, [r2, #0]
}
 8005c46:	bf00      	nop
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <LL_RCC_PLLSAI1_Disable>:
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c62:	6013      	str	r3, [r2, #0]
}
 8005c64:	bf00      	nop
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <LL_RCC_PLLSAI1_IsReady>:
{
 8005c6e:	b480      	push	{r7}
 8005c70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c80:	d101      	bne.n	8005c86 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b088      	sub	sp, #32
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d034      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005cb6:	d021      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005cb8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005cbc:	d81b      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cc2:	d01d      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005cc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cc8:	d815      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00b      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005cce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cd2:	d110      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ce2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ce4:	e00d      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 f947 	bl	8005f7e <RCCEx_PLLSAI1_ConfigNP>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005cf4:	e005      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	77fb      	strb	r3, [r7, #31]
        break;
 8005cfa:	e002      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005cfc:	bf00      	nop
 8005cfe:	e000      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d02:	7ffb      	ldrb	r3, [r7, #31]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d105      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff fee8 	bl	8005ae2 <LL_RCC_SetSAIClockSource>
 8005d12:	e001      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d14:	7ffb      	ldrb	r3, [r7, #31]
 8005d16:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d046      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005d24:	f7ff ff56 	bl	8005bd4 <LL_RCC_GetRTCClockSource>
 8005d28:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d03c      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005d34:	f7fe fc2e 	bl	8004594 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d105      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff ff30 	bl	8005ba8 <LL_RCC_SetRTCClockSource>
 8005d48:	e02e      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d52:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005d54:	f7ff ff4b 	bl	8005bee <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005d58:	f7ff ff5a 	bl	8005c10 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005d6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005d74:	f7ff fdf0 	bl	8005958 <LL_RCC_LSE_IsEnabled>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d114      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d7e:	f7fa ff77 	bl	8000c70 <HAL_GetTick>
 8005d82:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005d84:	e00b      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d86:	f7fa ff73 	bl	8000c70 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d902      	bls.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	77fb      	strb	r3, [r7, #31]
              break;
 8005d9c:	e004      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005d9e:	f7ff fded 	bl	800597c <LL_RCC_LSE_IsReady>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d1ee      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005da8:	7ffb      	ldrb	r3, [r7, #31]
 8005daa:	77bb      	strb	r3, [r7, #30]
 8005dac:	e001      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dae:	7ffb      	ldrb	r3, [r7, #31]
 8005db0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d004      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7ff fe2a 	bl	8005a1c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff fe35 	bl	8005a48 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0310 	and.w	r3, r3, #16
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d004      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7ff fe5d 	bl	8005aae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d004      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff fe52 	bl	8005aae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0304 	and.w	r3, r3, #4
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d004      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff fe2a 	bl	8005a74 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0308 	and.w	r3, r3, #8
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d004      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff fe1f 	bl	8005a74 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d022      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff fe8d 	bl	8005b66 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e54:	d107      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e64:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e6e:	d10b      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 f8dd 	bl	8006034 <RCCEx_PLLSAI1_ConfigNQ>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005e7e:	7ffb      	ldrb	r3, [r7, #31]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005e84:	7ffb      	ldrb	r3, [r7, #31]
 8005e86:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d02b      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e9c:	d008      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ea6:	d003      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d105      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff fe2a 	bl	8005b0e <LL_RCC_SetRNGClockSource>
 8005eba:	e00a      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	f7ff fe21 	bl	8005b0e <LL_RCC_SetRNGClockSource>
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7ff fe34 	bl	8005b3a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005eda:	d107      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005eea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d022      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff fe3d 	bl	8005b7c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f0a:	d107      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f1a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f24:	d10b      	bne.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3304      	adds	r3, #4
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 f8dd 	bl	80060ea <RCCEx_PLLSAI1_ConfigNR>
 8005f30:	4603      	mov	r3, r0
 8005f32:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005f34:	7ffb      	ldrb	r3, [r7, #31]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005f3a:	7ffb      	ldrb	r3, [r7, #31]
 8005f3c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d004      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fd26 	bl	80059a0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d009      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff fd45 	bl	80059f4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fd2c 	bl	80059cc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005f74:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005f8a:	f7ff fe61 	bl	8005c50 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f8e:	f7fa fe6f 	bl	8000c70 <HAL_GetTick>
 8005f92:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f94:	e009      	b.n	8005faa <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f96:	f7fa fe6b 	bl	8000c70 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d902      	bls.n	8005faa <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa8:	e004      	b.n	8005fb4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005faa:	f7ff fe60 	bl	8005c6e <LL_RCC_PLLSAI1_IsReady>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1f0      	bne.n	8005f96 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d137      	bne.n	800602a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005fe8:	f7ff fe23 	bl	8005c32 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fec:	f7fa fe40 	bl	8000c70 <HAL_GetTick>
 8005ff0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ff2:	e009      	b.n	8006008 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ff4:	f7fa fe3c 	bl	8000c70 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d902      	bls.n	8006008 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	73fb      	strb	r3, [r7, #15]
        break;
 8006006:	e004      	b.n	8006012 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006008:	f7ff fe31 	bl	8005c6e <LL_RCC_PLLSAI1_IsReady>
 800600c:	4603      	mov	r3, r0
 800600e:	2b01      	cmp	r3, #1
 8006010:	d1f0      	bne.n	8005ff4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d108      	bne.n	800602a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006026:	4313      	orrs	r3, r2
 8006028:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800602a:	7bfb      	ldrb	r3, [r7, #15]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006040:	f7ff fe06 	bl	8005c50 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006044:	f7fa fe14 	bl	8000c70 <HAL_GetTick>
 8006048:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800604a:	e009      	b.n	8006060 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800604c:	f7fa fe10 	bl	8000c70 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d902      	bls.n	8006060 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	73fb      	strb	r3, [r7, #15]
      break;
 800605e:	e004      	b.n	800606a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006060:	f7ff fe05 	bl	8005c6e <LL_RCC_PLLSAI1_IsReady>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1f0      	bne.n	800604c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d137      	bne.n	80060e0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	021b      	lsls	r3, r3, #8
 8006080:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006084:	4313      	orrs	r3, r2
 8006086:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800609a:	4313      	orrs	r3, r2
 800609c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800609e:	f7ff fdc8 	bl	8005c32 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060a2:	f7fa fde5 	bl	8000c70 <HAL_GetTick>
 80060a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80060a8:	e009      	b.n	80060be <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060aa:	f7fa fde1 	bl	8000c70 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d902      	bls.n	80060be <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	73fb      	strb	r3, [r7, #15]
        break;
 80060bc:	e004      	b.n	80060c8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80060be:	f7ff fdd6 	bl	8005c6e <LL_RCC_PLLSAI1_IsReady>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d1f0      	bne.n	80060aa <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d108      	bne.n	80060e0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80060ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060dc:	4313      	orrs	r3, r2
 80060de:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80060f6:	f7ff fdab 	bl	8005c50 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060fa:	f7fa fdb9 	bl	8000c70 <HAL_GetTick>
 80060fe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006100:	e009      	b.n	8006116 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006102:	f7fa fdb5 	bl	8000c70 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d902      	bls.n	8006116 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	73fb      	strb	r3, [r7, #15]
      break;
 8006114:	e004      	b.n	8006120 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006116:	f7ff fdaa 	bl	8005c6e <LL_RCC_PLLSAI1_IsReady>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1f0      	bne.n	8006102 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d137      	bne.n	8006196 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	021b      	lsls	r3, r3, #8
 8006136:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800613a:	4313      	orrs	r3, r2
 800613c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800613e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006150:	4313      	orrs	r3, r2
 8006152:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006154:	f7ff fd6d 	bl	8005c32 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006158:	f7fa fd8a 	bl	8000c70 <HAL_GetTick>
 800615c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800615e:	e009      	b.n	8006174 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006160:	f7fa fd86 	bl	8000c70 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d902      	bls.n	8006174 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	73fb      	strb	r3, [r7, #15]
        break;
 8006172:	e004      	b.n	800617e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006174:	f7ff fd7b 	bl	8005c6e <LL_RCC_PLLSAI1_IsReady>
 8006178:	4603      	mov	r3, r0
 800617a:	2b01      	cmp	r3, #1
 800617c:	d1f0      	bne.n	8006160 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d108      	bne.n	8006196 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006188:	691a      	ldr	r2, [r3, #16]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006192:	4313      	orrs	r3, r2
 8006194:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e049      	b.n	8006246 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d106      	bne.n	80061cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fa fb6e 	bl	80008a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3304      	adds	r3, #4
 80061dc:	4619      	mov	r1, r3
 80061de:	4610      	mov	r0, r2
 80061e0:	f000 fa7c 	bl	80066dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b01      	cmp	r3, #1
 8006262:	d001      	beq.n	8006268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e036      	b.n	80062d6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a17      	ldr	r2, [pc, #92]	@ (80062e4 <HAL_TIM_Base_Start_IT+0x94>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d004      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0x44>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006292:	d115      	bne.n	80062c0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	4b13      	ldr	r3, [pc, #76]	@ (80062e8 <HAL_TIM_Base_Start_IT+0x98>)
 800629c:	4013      	ands	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b06      	cmp	r3, #6
 80062a4:	d015      	beq.n	80062d2 <HAL_TIM_Base_Start_IT+0x82>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ac:	d011      	beq.n	80062d2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0201 	orr.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062be:	e008      	b.n	80062d2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0201 	orr.w	r2, r2, #1
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	e000      	b.n	80062d4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	00010007 	.word	0x00010007

080062ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d020      	beq.n	8006350 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01b      	beq.n	8006350 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0202 	mvn.w	r2, #2
 8006320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f9b2 	bl	80066a0 <HAL_TIM_IC_CaptureCallback>
 800633c:	e005      	b.n	800634a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f9a4 	bl	800668c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f9b5 	bl	80066b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	2b00      	cmp	r3, #0
 8006358:	d020      	beq.n	800639c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d01b      	beq.n	800639c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0204 	mvn.w	r2, #4
 800636c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2202      	movs	r2, #2
 8006372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f98c 	bl	80066a0 <HAL_TIM_IC_CaptureCallback>
 8006388:	e005      	b.n	8006396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f97e 	bl	800668c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f98f 	bl	80066b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d020      	beq.n	80063e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f003 0308 	and.w	r3, r3, #8
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01b      	beq.n	80063e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f06f 0208 	mvn.w	r2, #8
 80063b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2204      	movs	r2, #4
 80063be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f966 	bl	80066a0 <HAL_TIM_IC_CaptureCallback>
 80063d4:	e005      	b.n	80063e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f958 	bl	800668c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f969 	bl	80066b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f003 0310 	and.w	r3, r3, #16
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d020      	beq.n	8006434 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f003 0310 	and.w	r3, r3, #16
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01b      	beq.n	8006434 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f06f 0210 	mvn.w	r2, #16
 8006404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2208      	movs	r2, #8
 800640a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f940 	bl	80066a0 <HAL_TIM_IC_CaptureCallback>
 8006420:	e005      	b.n	800642e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f932 	bl	800668c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f943 	bl	80066b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00c      	beq.n	8006458 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d007      	beq.n	8006458 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f06f 0201 	mvn.w	r2, #1
 8006450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fa f940 	bl	80006d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645e:	2b00      	cmp	r3, #0
 8006460:	d104      	bne.n	800646c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00c      	beq.n	8006486 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006472:	2b00      	cmp	r3, #0
 8006474:	d007      	beq.n	8006486 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800647e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fa9b 	bl	80069bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00c      	beq.n	80064aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006496:	2b00      	cmp	r3, #0
 8006498:	d007      	beq.n	80064aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80064a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fa93 	bl	80069d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00c      	beq.n	80064ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d007      	beq.n	80064ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f8fd 	bl	80066c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00c      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d007      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f06f 0220 	mvn.w	r2, #32
 80064ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fa5b 	bl	80069a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064f2:	bf00      	nop
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800650e:	2b01      	cmp	r3, #1
 8006510:	d101      	bne.n	8006516 <HAL_TIM_ConfigClockSource+0x1c>
 8006512:	2302      	movs	r3, #2
 8006514:	e0b6      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x18a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2202      	movs	r2, #2
 8006522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006534:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006538:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006540:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006552:	d03e      	beq.n	80065d2 <HAL_TIM_ConfigClockSource+0xd8>
 8006554:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006558:	f200 8087 	bhi.w	800666a <HAL_TIM_ConfigClockSource+0x170>
 800655c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006560:	f000 8086 	beq.w	8006670 <HAL_TIM_ConfigClockSource+0x176>
 8006564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006568:	d87f      	bhi.n	800666a <HAL_TIM_ConfigClockSource+0x170>
 800656a:	2b70      	cmp	r3, #112	@ 0x70
 800656c:	d01a      	beq.n	80065a4 <HAL_TIM_ConfigClockSource+0xaa>
 800656e:	2b70      	cmp	r3, #112	@ 0x70
 8006570:	d87b      	bhi.n	800666a <HAL_TIM_ConfigClockSource+0x170>
 8006572:	2b60      	cmp	r3, #96	@ 0x60
 8006574:	d050      	beq.n	8006618 <HAL_TIM_ConfigClockSource+0x11e>
 8006576:	2b60      	cmp	r3, #96	@ 0x60
 8006578:	d877      	bhi.n	800666a <HAL_TIM_ConfigClockSource+0x170>
 800657a:	2b50      	cmp	r3, #80	@ 0x50
 800657c:	d03c      	beq.n	80065f8 <HAL_TIM_ConfigClockSource+0xfe>
 800657e:	2b50      	cmp	r3, #80	@ 0x50
 8006580:	d873      	bhi.n	800666a <HAL_TIM_ConfigClockSource+0x170>
 8006582:	2b40      	cmp	r3, #64	@ 0x40
 8006584:	d058      	beq.n	8006638 <HAL_TIM_ConfigClockSource+0x13e>
 8006586:	2b40      	cmp	r3, #64	@ 0x40
 8006588:	d86f      	bhi.n	800666a <HAL_TIM_ConfigClockSource+0x170>
 800658a:	2b30      	cmp	r3, #48	@ 0x30
 800658c:	d064      	beq.n	8006658 <HAL_TIM_ConfigClockSource+0x15e>
 800658e:	2b30      	cmp	r3, #48	@ 0x30
 8006590:	d86b      	bhi.n	800666a <HAL_TIM_ConfigClockSource+0x170>
 8006592:	2b20      	cmp	r3, #32
 8006594:	d060      	beq.n	8006658 <HAL_TIM_ConfigClockSource+0x15e>
 8006596:	2b20      	cmp	r3, #32
 8006598:	d867      	bhi.n	800666a <HAL_TIM_ConfigClockSource+0x170>
 800659a:	2b00      	cmp	r3, #0
 800659c:	d05c      	beq.n	8006658 <HAL_TIM_ConfigClockSource+0x15e>
 800659e:	2b10      	cmp	r3, #16
 80065a0:	d05a      	beq.n	8006658 <HAL_TIM_ConfigClockSource+0x15e>
 80065a2:	e062      	b.n	800666a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065b4:	f000 f978 	bl	80068a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80065c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	609a      	str	r2, [r3, #8]
      break;
 80065d0:	e04f      	b.n	8006672 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065e2:	f000 f961 	bl	80068a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065f4:	609a      	str	r2, [r3, #8]
      break;
 80065f6:	e03c      	b.n	8006672 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006604:	461a      	mov	r2, r3
 8006606:	f000 f8d3 	bl	80067b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2150      	movs	r1, #80	@ 0x50
 8006610:	4618      	mov	r0, r3
 8006612:	f000 f92c 	bl	800686e <TIM_ITRx_SetConfig>
      break;
 8006616:	e02c      	b.n	8006672 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006624:	461a      	mov	r2, r3
 8006626:	f000 f8f2 	bl	800680e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2160      	movs	r1, #96	@ 0x60
 8006630:	4618      	mov	r0, r3
 8006632:	f000 f91c 	bl	800686e <TIM_ITRx_SetConfig>
      break;
 8006636:	e01c      	b.n	8006672 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006644:	461a      	mov	r2, r3
 8006646:	f000 f8b3 	bl	80067b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2140      	movs	r1, #64	@ 0x40
 8006650:	4618      	mov	r0, r3
 8006652:	f000 f90c 	bl	800686e <TIM_ITRx_SetConfig>
      break;
 8006656:	e00c      	b.n	8006672 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4619      	mov	r1, r3
 8006662:	4610      	mov	r0, r2
 8006664:	f000 f903 	bl	800686e <TIM_ITRx_SetConfig>
      break;
 8006668:	e003      	b.n	8006672 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]
      break;
 800666e:	e000      	b.n	8006672 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006670:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006682:	7bfb      	ldrb	r3, [r7, #15]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a2d      	ldr	r2, [pc, #180]	@ (80067a4 <TIM_Base_SetConfig+0xc8>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d003      	beq.n	80066fc <TIM_Base_SetConfig+0x20>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066fa:	d108      	bne.n	800670e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a24      	ldr	r2, [pc, #144]	@ (80067a4 <TIM_Base_SetConfig+0xc8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00b      	beq.n	800672e <TIM_Base_SetConfig+0x52>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800671c:	d007      	beq.n	800672e <TIM_Base_SetConfig+0x52>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a21      	ldr	r2, [pc, #132]	@ (80067a8 <TIM_Base_SetConfig+0xcc>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d003      	beq.n	800672e <TIM_Base_SetConfig+0x52>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a20      	ldr	r2, [pc, #128]	@ (80067ac <TIM_Base_SetConfig+0xd0>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d108      	bne.n	8006740 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a10      	ldr	r2, [pc, #64]	@ (80067a4 <TIM_Base_SetConfig+0xc8>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d007      	beq.n	8006776 <TIM_Base_SetConfig+0x9a>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a0f      	ldr	r2, [pc, #60]	@ (80067a8 <TIM_Base_SetConfig+0xcc>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d003      	beq.n	8006776 <TIM_Base_SetConfig+0x9a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a0e      	ldr	r2, [pc, #56]	@ (80067ac <TIM_Base_SetConfig+0xd0>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d103      	bne.n	800677e <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f043 0204 	orr.w	r2, r3, #4
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	601a      	str	r2, [r3, #0]
}
 8006796:	bf00      	nop
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	40012c00 	.word	0x40012c00
 80067a8:	40014400 	.word	0x40014400
 80067ac:	40014800 	.word	0x40014800

080067b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f023 0201 	bic.w	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f023 030a 	bic.w	r3, r3, #10
 80067ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	621a      	str	r2, [r3, #32]
}
 8006802:	bf00      	nop
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800680e:	b480      	push	{r7}
 8006810:	b087      	sub	sp, #28
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	f023 0210 	bic.w	r2, r3, #16
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006838:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	031b      	lsls	r3, r3, #12
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4313      	orrs	r3, r2
 8006842:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800684a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	621a      	str	r2, [r3, #32]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800686e:	b480      	push	{r7}
 8006870:	b085      	sub	sp, #20
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4313      	orrs	r3, r2
 8006890:	f043 0307 	orr.w	r3, r3, #7
 8006894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	609a      	str	r2, [r3, #8]
}
 800689c:	bf00      	nop
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	021a      	lsls	r2, r3, #8
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	431a      	orrs	r2, r3
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	609a      	str	r2, [r3, #8]
}
 80068dc:	bf00      	nop
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e04a      	b.n	8006996 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a1f      	ldr	r2, [pc, #124]	@ (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d108      	bne.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006930:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a12      	ldr	r2, [pc, #72]	@ (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d004      	beq.n	800696a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006968:	d10c      	bne.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	4313      	orrs	r3, r2
 800697a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	40012c00 	.word	0x40012c00

080069a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80069f4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80069f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b085      	sub	sp, #20
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a1a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006a1e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	4013      	ands	r3, r2
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	1d3b      	adds	r3, r7, #4
 8006a52:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b0a7      	sub	sp, #156	@ 0x9c
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aaa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	78db      	ldrb	r3, [r3, #3]
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d81f      	bhi.n	8006af6 <USB_ActivateEndpoint+0x72>
 8006ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8006abc <USB_ActivateEndpoint+0x38>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006acd 	.word	0x08006acd
 8006ac0:	08006ae9 	.word	0x08006ae9
 8006ac4:	08006aff 	.word	0x08006aff
 8006ac8:	08006adb 	.word	0x08006adb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006acc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006ad0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ad4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006ad8:	e012      	b.n	8006b00 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006ada:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006ade:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006ae2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006ae6:	e00b      	b.n	8006b00 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006ae8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006aec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006af0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006af4:	e004      	b.n	8006b00 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8006afc:	e000      	b.n	8006b00 <USB_ActivateEndpoint+0x7c>
      break;
 8006afe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	441a      	add	r2, r3
 8006b0a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006b0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	b21b      	sxth	r3, r3
 8006b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b3a:	b21a      	sxth	r2, r3
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	b21b      	sxth	r3, r3
 8006b42:	4313      	orrs	r3, r2
 8006b44:	b21b      	sxth	r3, r3
 8006b46:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	441a      	add	r2, r3
 8006b54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006b58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	7b1b      	ldrb	r3, [r3, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f040 8180 	bne.w	8006e76 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	785b      	ldrb	r3, [r3, #1]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 8084 	beq.w	8006c88 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	61bb      	str	r3, [r7, #24]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	4413      	add	r3, r2
 8006b92:	61bb      	str	r3, [r7, #24]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	00da      	lsls	r2, r3, #3
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ba2:	617b      	str	r3, [r7, #20]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	88db      	ldrh	r3, [r3, #6]
 8006ba8:	085b      	lsrs	r3, r3, #1
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	827b      	strh	r3, [r7, #18]
 8006bc2:	8a7b      	ldrh	r3, [r7, #18]
 8006bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01b      	beq.n	8006c04 <USB_ActivateEndpoint+0x180>
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be2:	823b      	strh	r3, [r7, #16]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	441a      	add	r2, r3
 8006bee:	8a3b      	ldrh	r3, [r7, #16]
 8006bf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bfc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	78db      	ldrb	r3, [r3, #3]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d020      	beq.n	8006c4e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c22:	81bb      	strh	r3, [r7, #12]
 8006c24:	89bb      	ldrh	r3, [r7, #12]
 8006c26:	f083 0320 	eor.w	r3, r3, #32
 8006c2a:	81bb      	strh	r3, [r7, #12]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	441a      	add	r2, r3
 8006c36:	89bb      	ldrh	r3, [r7, #12]
 8006c38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	8013      	strh	r3, [r2, #0]
 8006c4c:	e3f9      	b.n	8007442 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c64:	81fb      	strh	r3, [r7, #14]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	441a      	add	r2, r3
 8006c70:	89fb      	ldrh	r3, [r7, #14]
 8006c72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	8013      	strh	r3, [r2, #0]
 8006c86:	e3dc      	b.n	8007442 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c98:	4413      	add	r3, r2
 8006c9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	00da      	lsls	r2, r3, #3
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	88db      	ldrh	r3, [r3, #6]
 8006cb0:	085b      	lsrs	r3, r3, #1
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	461a      	mov	r2, r3
 8006cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ccc:	4413      	add	r3, r2
 8006cce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	00da      	lsls	r2, r3, #3
 8006cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd8:	4413      	add	r3, r2
 8006cda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cee:	801a      	strh	r2, [r3, #0]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <USB_ActivateEndpoint+0x28a>
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0a:	801a      	strh	r2, [r3, #0]
 8006d0c:	e041      	b.n	8006d92 <USB_ActivateEndpoint+0x30e>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d14:	d81c      	bhi.n	8006d50 <USB_ActivateEndpoint+0x2cc>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <USB_ActivateEndpoint+0x2b2>
 8006d2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d30:	3301      	adds	r3, #1
 8006d32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	029b      	lsls	r3, r3, #10
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	4313      	orrs	r3, r2
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4c:	801a      	strh	r2, [r3, #0]
 8006d4e:	e020      	b.n	8006d92 <USB_ActivateEndpoint+0x30e>
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	095b      	lsrs	r3, r3, #5
 8006d56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f003 031f 	and.w	r3, r3, #31
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d104      	bne.n	8006d70 <USB_ActivateEndpoint+0x2ec>
 8006d66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	029b      	lsls	r3, r3, #10
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	4313      	orrs	r3, r2
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006da0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d01b      	beq.n	8006de2 <USB_ActivateEndpoint+0x35e>
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dc0:	843b      	strh	r3, [r7, #32]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	8c3b      	ldrh	r3, [r7, #32]
 8006dce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d124      	bne.n	8006e34 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e00:	83bb      	strh	r3, [r7, #28]
 8006e02:	8bbb      	ldrh	r3, [r7, #28]
 8006e04:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e08:	83bb      	strh	r3, [r7, #28]
 8006e0a:	8bbb      	ldrh	r3, [r7, #28]
 8006e0c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e10:	83bb      	strh	r3, [r7, #28]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	441a      	add	r2, r3
 8006e1c:	8bbb      	ldrh	r3, [r7, #28]
 8006e1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	8013      	strh	r3, [r2, #0]
 8006e32:	e306      	b.n	8007442 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e4a:	83fb      	strh	r3, [r7, #30]
 8006e4c:	8bfb      	ldrh	r3, [r7, #30]
 8006e4e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e52:	83fb      	strh	r3, [r7, #30]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	441a      	add	r2, r3
 8006e5e:	8bfb      	ldrh	r3, [r7, #30]
 8006e60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	8013      	strh	r3, [r2, #0]
 8006e74:	e2e5      	b.n	8007442 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	78db      	ldrb	r3, [r3, #3]
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d11e      	bne.n	8006ebc <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e94:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	441a      	add	r2, r3
 8006ea2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8006ea6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eae:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	8013      	strh	r3, [r2, #0]
 8006eba:	e01d      	b.n	8006ef8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ed2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	441a      	add	r2, r3
 8006ee0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006ee4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ee8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ef0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f08:	4413      	add	r3, r2
 8006f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	00da      	lsls	r2, r3, #3
 8006f12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	891b      	ldrh	r3, [r3, #8]
 8006f20:	085b      	lsrs	r3, r3, #1
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f2a:	801a      	strh	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f3c:	4413      	add	r3, r2
 8006f3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	00da      	lsls	r2, r3, #3
 8006f46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f48:	4413      	add	r3, r2
 8006f4a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	895b      	ldrh	r3, [r3, #10]
 8006f54:	085b      	lsrs	r3, r3, #1
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f5e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	785b      	ldrb	r3, [r3, #1]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f040 81af 	bne.w	80072c8 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006f7a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01d      	beq.n	8006fc2 <USB_ActivateEndpoint+0x53e>
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	441a      	add	r2, r3
 8006faa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006fae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8006fd2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8006fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d01d      	beq.n	800701a <USB_ActivateEndpoint+0x596>
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	441a      	add	r2, r3
 8007002:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800700a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800700e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007012:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007016:	b29b      	uxth	r3, r3
 8007018:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d16b      	bne.n	80070fa <USB_ActivateEndpoint+0x676>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800702c:	b29b      	uxth	r3, r3
 800702e:	461a      	mov	r2, r3
 8007030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007032:	4413      	add	r3, r2
 8007034:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	00da      	lsls	r2, r3, #3
 800703c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800703e:	4413      	add	r3, r2
 8007040:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007044:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	b29b      	uxth	r3, r3
 800704c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007050:	b29a      	uxth	r2, r3
 8007052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007054:	801a      	strh	r2, [r3, #0]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10a      	bne.n	8007074 <USB_ActivateEndpoint+0x5f0>
 800705e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800706c:	b29a      	uxth	r2, r3
 800706e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007070:	801a      	strh	r2, [r3, #0]
 8007072:	e05d      	b.n	8007130 <USB_ActivateEndpoint+0x6ac>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	2b3e      	cmp	r3, #62	@ 0x3e
 800707a:	d81c      	bhi.n	80070b6 <USB_ActivateEndpoint+0x632>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	085b      	lsrs	r3, r3, #1
 8007082:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d004      	beq.n	800709c <USB_ActivateEndpoint+0x618>
 8007092:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007096:	3301      	adds	r3, #1
 8007098:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800709c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	029b      	lsls	r3, r3, #10
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	4313      	orrs	r3, r2
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070b2:	801a      	strh	r2, [r3, #0]
 80070b4:	e03c      	b.n	8007130 <USB_ActivateEndpoint+0x6ac>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	095b      	lsrs	r3, r3, #5
 80070bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <USB_ActivateEndpoint+0x652>
 80070cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070d0:	3b01      	subs	r3, #1
 80070d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	b29a      	uxth	r2, r3
 80070dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	029b      	lsls	r3, r3, #10
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	4313      	orrs	r3, r2
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070f6:	801a      	strh	r2, [r3, #0]
 80070f8:	e01a      	b.n	8007130 <USB_ActivateEndpoint+0x6ac>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	785b      	ldrb	r3, [r3, #1]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d116      	bne.n	8007130 <USB_ActivateEndpoint+0x6ac>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	657b      	str	r3, [r7, #84]	@ 0x54
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800710c:	b29b      	uxth	r3, r3
 800710e:	461a      	mov	r2, r3
 8007110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007112:	4413      	add	r3, r2
 8007114:	657b      	str	r3, [r7, #84]	@ 0x54
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	00da      	lsls	r2, r3, #3
 800711c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800711e:	4413      	add	r3, r2
 8007120:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007124:	653b      	str	r3, [r7, #80]	@ 0x50
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	b29a      	uxth	r2, r3
 800712c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800712e:	801a      	strh	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	647b      	str	r3, [r7, #68]	@ 0x44
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	785b      	ldrb	r3, [r3, #1]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d16b      	bne.n	8007214 <USB_ActivateEndpoint+0x790>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007146:	b29b      	uxth	r3, r3
 8007148:	461a      	mov	r2, r3
 800714a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800714c:	4413      	add	r3, r2
 800714e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	00da      	lsls	r2, r3, #3
 8007156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007158:	4413      	add	r3, r2
 800715a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800715e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	b29b      	uxth	r3, r3
 8007166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800716a:	b29a      	uxth	r2, r3
 800716c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716e:	801a      	strh	r2, [r3, #0]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10a      	bne.n	800718e <USB_ActivateEndpoint+0x70a>
 8007178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007186:	b29a      	uxth	r2, r3
 8007188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718a:	801a      	strh	r2, [r3, #0]
 800718c:	e05b      	b.n	8007246 <USB_ActivateEndpoint+0x7c2>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b3e      	cmp	r3, #62	@ 0x3e
 8007194:	d81c      	bhi.n	80071d0 <USB_ActivateEndpoint+0x74c>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <USB_ActivateEndpoint+0x732>
 80071ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071b0:	3301      	adds	r3, #1
 80071b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	029b      	lsls	r3, r3, #10
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	4313      	orrs	r3, r2
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071cc:	801a      	strh	r2, [r3, #0]
 80071ce:	e03a      	b.n	8007246 <USB_ActivateEndpoint+0x7c2>
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	095b      	lsrs	r3, r3, #5
 80071d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f003 031f 	and.w	r3, r3, #31
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d104      	bne.n	80071f0 <USB_ActivateEndpoint+0x76c>
 80071e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071ea:	3b01      	subs	r3, #1
 80071ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	029b      	lsls	r3, r3, #10
 80071fe:	b29b      	uxth	r3, r3
 8007200:	4313      	orrs	r3, r2
 8007202:	b29b      	uxth	r3, r3
 8007204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800720c:	b29a      	uxth	r2, r3
 800720e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007210:	801a      	strh	r2, [r3, #0]
 8007212:	e018      	b.n	8007246 <USB_ActivateEndpoint+0x7c2>
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d114      	bne.n	8007246 <USB_ActivateEndpoint+0x7c2>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007222:	b29b      	uxth	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007228:	4413      	add	r3, r2
 800722a:	647b      	str	r3, [r7, #68]	@ 0x44
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	00da      	lsls	r2, r3, #3
 8007232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007234:	4413      	add	r3, r2
 8007236:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800723a:	643b      	str	r3, [r7, #64]	@ 0x40
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	b29a      	uxth	r2, r3
 8007242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007244:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800725c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800725e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007260:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007264:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007266:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007268:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800726c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	441a      	add	r2, r3
 8007278:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800727a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800727e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800728a:	b29b      	uxth	r3, r3
 800728c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	b29b      	uxth	r3, r3
 800729c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072a4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	441a      	add	r2, r3
 80072b0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80072b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	8013      	strh	r3, [r2, #0]
 80072c6:	e0bc      	b.n	8007442 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80072d8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80072dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01d      	beq.n	8007320 <USB_ActivateEndpoint+0x89c>
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072fa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	441a      	add	r2, r3
 8007308:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800730c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007310:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007314:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800731c:	b29b      	uxth	r3, r3
 800731e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007330:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8007334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01d      	beq.n	8007378 <USB_ActivateEndpoint+0x8f4>
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800734e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007352:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	441a      	add	r2, r3
 8007360:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8007364:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007368:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800736c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007370:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007374:	b29b      	uxth	r3, r3
 8007376:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	78db      	ldrb	r3, [r3, #3]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d024      	beq.n	80073ca <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007392:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007396:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800739a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800739e:	f083 0320 	eor.w	r3, r3, #32
 80073a2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	441a      	add	r2, r3
 80073b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80073b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	8013      	strh	r3, [r2, #0]
 80073c8:	e01d      	b.n	8007406 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073e0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	441a      	add	r2, r3
 80073ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80073f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007402:	b29b      	uxth	r3, r3
 8007404:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	b29b      	uxth	r3, r3
 8007414:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800741c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	441a      	add	r2, r3
 800742a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800742e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007432:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800743a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800743e:	b29b      	uxth	r3, r3
 8007440:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007442:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8007446:	4618      	mov	r0, r3
 8007448:	379c      	adds	r7, #156	@ 0x9c
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop

08007454 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007454:	b480      	push	{r7}
 8007456:	b08d      	sub	sp, #52	@ 0x34
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	7b1b      	ldrb	r3, [r3, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	f040 808e 	bne.w	8007584 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	785b      	ldrb	r3, [r3, #1]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d044      	beq.n	80074fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	81bb      	strh	r3, [r7, #12]
 800747e:	89bb      	ldrh	r3, [r7, #12]
 8007480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01b      	beq.n	80074c0 <USB_DeactivateEndpoint+0x6c>
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800749a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800749e:	817b      	strh	r3, [r7, #10]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	441a      	add	r2, r3
 80074aa:	897b      	ldrh	r3, [r7, #10]
 80074ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80074bc:	b29b      	uxth	r3, r3
 80074be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074d6:	813b      	strh	r3, [r7, #8]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	441a      	add	r2, r3
 80074e2:	893b      	ldrh	r3, [r7, #8]
 80074e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	8013      	strh	r3, [r2, #0]
 80074f8:	e192      	b.n	8007820 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	827b      	strh	r3, [r7, #18]
 8007508:	8a7b      	ldrh	r3, [r7, #18]
 800750a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d01b      	beq.n	800754a <USB_DeactivateEndpoint+0xf6>
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007528:	823b      	strh	r3, [r7, #16]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	441a      	add	r2, r3
 8007534:	8a3b      	ldrh	r3, [r7, #16]
 8007536:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800753a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800753e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007546:	b29b      	uxth	r3, r3
 8007548:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800755c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007560:	81fb      	strh	r3, [r7, #14]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	441a      	add	r2, r3
 800756c:	89fb      	ldrh	r3, [r7, #14]
 800756e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800757a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800757e:	b29b      	uxth	r3, r3
 8007580:	8013      	strh	r3, [r2, #0]
 8007582:	e14d      	b.n	8007820 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	785b      	ldrb	r3, [r3, #1]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f040 80a5 	bne.w	80076d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	843b      	strh	r3, [r7, #32]
 800759c:	8c3b      	ldrh	r3, [r7, #32]
 800759e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01b      	beq.n	80075de <USB_DeactivateEndpoint+0x18a>
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075bc:	83fb      	strh	r3, [r7, #30]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	441a      	add	r2, r3
 80075c8:	8bfb      	ldrh	r3, [r7, #30]
 80075ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80075d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075da:	b29b      	uxth	r3, r3
 80075dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	83bb      	strh	r3, [r7, #28]
 80075ec:	8bbb      	ldrh	r3, [r7, #28]
 80075ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d01b      	beq.n	800762e <USB_DeactivateEndpoint+0x1da>
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800760c:	837b      	strh	r3, [r7, #26]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	441a      	add	r2, r3
 8007618:	8b7b      	ldrh	r3, [r7, #26]
 800761a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800761e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007626:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800762a:	b29b      	uxth	r3, r3
 800762c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	b29b      	uxth	r3, r3
 800763c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007644:	833b      	strh	r3, [r7, #24]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	441a      	add	r2, r3
 8007650:	8b3b      	ldrh	r3, [r7, #24]
 8007652:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007656:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800765a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800765e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007662:	b29b      	uxth	r3, r3
 8007664:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b29b      	uxth	r3, r3
 8007674:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800767c:	82fb      	strh	r3, [r7, #22]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	441a      	add	r2, r3
 8007688:	8afb      	ldrh	r3, [r7, #22]
 800768a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800768e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800769a:	b29b      	uxth	r3, r3
 800769c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076b4:	82bb      	strh	r3, [r7, #20]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	441a      	add	r2, r3
 80076c0:	8abb      	ldrh	r3, [r7, #20]
 80076c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	8013      	strh	r3, [r2, #0]
 80076d6:	e0a3      	b.n	8007820 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80076e6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80076e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d01b      	beq.n	8007728 <USB_DeactivateEndpoint+0x2d4>
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007706:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	441a      	add	r2, r3
 8007712:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007714:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007718:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800771c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007724:	b29b      	uxth	r3, r3
 8007726:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007736:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01b      	beq.n	8007778 <USB_DeactivateEndpoint+0x324>
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	b29b      	uxth	r3, r3
 800774e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007756:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	441a      	add	r2, r3
 8007762:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800776c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007770:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007774:	b29b      	uxth	r3, r3
 8007776:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	b29b      	uxth	r3, r3
 8007786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800778a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800778e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	441a      	add	r2, r3
 800779a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800779c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	441a      	add	r2, r3
 80077d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80077d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077fe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	441a      	add	r2, r3
 800780a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800780c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007810:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800781c:	b29b      	uxth	r3, r3
 800781e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3734      	adds	r7, #52	@ 0x34
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b0ac      	sub	sp, #176	@ 0xb0
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	785b      	ldrb	r3, [r3, #1]
 800783c:	2b01      	cmp	r3, #1
 800783e:	f040 84ca 	bne.w	80081d6 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	699a      	ldr	r2, [r3, #24]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	429a      	cmp	r2, r3
 800784c:	d904      	bls.n	8007858 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007856:	e003      	b.n	8007860 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	7b1b      	ldrb	r3, [r3, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d122      	bne.n	80078ae <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	6959      	ldr	r1, [r3, #20]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	88da      	ldrh	r2, [r3, #6]
 8007870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007874:	b29b      	uxth	r3, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 febd 	bl	80085f6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007886:	b29b      	uxth	r3, r3
 8007888:	461a      	mov	r2, r3
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	4413      	add	r3, r2
 800788e:	613b      	str	r3, [r7, #16]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	00da      	lsls	r2, r3, #3
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	4413      	add	r3, r2
 800789a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800789e:	60fb      	str	r3, [r7, #12]
 80078a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	801a      	strh	r2, [r3, #0]
 80078aa:	f000 bc6f 	b.w	800818c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	78db      	ldrb	r3, [r3, #3]
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	f040 831e 	bne.w	8007ef4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	6a1a      	ldr	r2, [r3, #32]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	f240 82cf 	bls.w	8007e64 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078dc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	441a      	add	r2, r3
 80078ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80078ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078f6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80078fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078fe:	b29b      	uxth	r3, r3
 8007900:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	6a1a      	ldr	r2, [r3, #32]
 8007906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800790a:	1ad2      	subs	r2, r2, r3
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 814f 	beq.w	8007bc6 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	633b      	str	r3, [r7, #48]	@ 0x30
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	785b      	ldrb	r3, [r3, #1]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d16b      	bne.n	8007a0c <USB_EPStartXfer+0x1de>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800793e:	b29b      	uxth	r3, r3
 8007940:	461a      	mov	r2, r3
 8007942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007944:	4413      	add	r3, r2
 8007946:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	00da      	lsls	r2, r3, #3
 800794e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007950:	4413      	add	r3, r2
 8007952:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007956:	627b      	str	r3, [r7, #36]	@ 0x24
 8007958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007962:	b29a      	uxth	r2, r3
 8007964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <USB_EPStartXfer+0x158>
 8007970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	b29b      	uxth	r3, r3
 8007976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800797a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800797e:	b29a      	uxth	r2, r3
 8007980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007982:	801a      	strh	r2, [r3, #0]
 8007984:	e05b      	b.n	8007a3e <USB_EPStartXfer+0x210>
 8007986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800798a:	2b3e      	cmp	r3, #62	@ 0x3e
 800798c:	d81c      	bhi.n	80079c8 <USB_EPStartXfer+0x19a>
 800798e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007992:	085b      	lsrs	r3, r3, #1
 8007994:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d004      	beq.n	80079ae <USB_EPStartXfer+0x180>
 80079a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079a8:	3301      	adds	r3, #1
 80079aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	029b      	lsls	r3, r3, #10
 80079bc:	b29b      	uxth	r3, r3
 80079be:	4313      	orrs	r3, r2
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	801a      	strh	r2, [r3, #0]
 80079c6:	e03a      	b.n	8007a3e <USB_EPStartXfer+0x210>
 80079c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079cc:	095b      	lsrs	r3, r3, #5
 80079ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079d6:	f003 031f 	and.w	r3, r3, #31
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d104      	bne.n	80079e8 <USB_EPStartXfer+0x1ba>
 80079de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079e2:	3b01      	subs	r3, #1
 80079e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	029b      	lsls	r3, r3, #10
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	4313      	orrs	r3, r2
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a08:	801a      	strh	r2, [r3, #0]
 8007a0a:	e018      	b.n	8007a3e <USB_EPStartXfer+0x210>
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	785b      	ldrb	r3, [r3, #1]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d114      	bne.n	8007a3e <USB_EPStartXfer+0x210>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a20:	4413      	add	r3, r2
 8007a22:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	00da      	lsls	r2, r3, #3
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	895b      	ldrh	r3, [r3, #10]
 8007a42:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	6959      	ldr	r1, [r3, #20]
 8007a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fdce 	bl	80085f6 <USB_WritePMA>
            ep->xfer_buff += len;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	695a      	ldr	r2, [r3, #20]
 8007a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a62:	441a      	add	r2, r3
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	6a1a      	ldr	r2, [r3, #32]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d907      	bls.n	8007a84 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	6a1a      	ldr	r2, [r3, #32]
 8007a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a7c:	1ad2      	subs	r2, r2, r3
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	621a      	str	r2, [r3, #32]
 8007a82:	e006      	b.n	8007a92 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d16b      	bne.n	8007b72 <USB_EPStartXfer+0x344>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	61bb      	str	r3, [r7, #24]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	4413      	add	r3, r2
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	00da      	lsls	r2, r3, #3
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007abc:	617b      	str	r3, [r7, #20]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	801a      	strh	r2, [r3, #0]
 8007ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10a      	bne.n	8007aec <USB_EPStartXfer+0x2be>
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	801a      	strh	r2, [r3, #0]
 8007aea:	e05d      	b.n	8007ba8 <USB_EPStartXfer+0x37a>
 8007aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007af0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007af2:	d81c      	bhi.n	8007b2e <USB_EPStartXfer+0x300>
 8007af4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007af8:	085b      	lsrs	r3, r3, #1
 8007afa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d004      	beq.n	8007b14 <USB_EPStartXfer+0x2e6>
 8007b0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b0e:	3301      	adds	r3, #1
 8007b10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	029b      	lsls	r3, r3, #10
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	4313      	orrs	r3, r2
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	801a      	strh	r2, [r3, #0]
 8007b2c:	e03c      	b.n	8007ba8 <USB_EPStartXfer+0x37a>
 8007b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b32:	095b      	lsrs	r3, r3, #5
 8007b34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b3c:	f003 031f 	and.w	r3, r3, #31
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d104      	bne.n	8007b4e <USB_EPStartXfer+0x320>
 8007b44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	029b      	lsls	r3, r3, #10
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	e01a      	b.n	8007ba8 <USB_EPStartXfer+0x37a>
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	785b      	ldrb	r3, [r3, #1]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d116      	bne.n	8007ba8 <USB_EPStartXfer+0x37a>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	623b      	str	r3, [r7, #32]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	623b      	str	r3, [r7, #32]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	00da      	lsls	r2, r3, #3
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	4413      	add	r3, r2
 8007b98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b9c:	61fb      	str	r3, [r7, #28]
 8007b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	891b      	ldrh	r3, [r3, #8]
 8007bac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	6959      	ldr	r1, [r3, #20]
 8007bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fd19 	bl	80085f6 <USB_WritePMA>
 8007bc4:	e2e2      	b.n	800818c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	785b      	ldrb	r3, [r3, #1]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d16b      	bne.n	8007ca6 <USB_EPStartXfer+0x478>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	461a      	mov	r2, r3
 8007bdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bde:	4413      	add	r3, r2
 8007be0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	00da      	lsls	r2, r3, #3
 8007be8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bea:	4413      	add	r3, r2
 8007bec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c00:	801a      	strh	r2, [r3, #0]
 8007c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10a      	bne.n	8007c20 <USB_EPStartXfer+0x3f2>
 8007c0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c1c:	801a      	strh	r2, [r3, #0]
 8007c1e:	e05d      	b.n	8007cdc <USB_EPStartXfer+0x4ae>
 8007c20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c24:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c26:	d81c      	bhi.n	8007c62 <USB_EPStartXfer+0x434>
 8007c28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c2c:	085b      	lsrs	r3, r3, #1
 8007c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d004      	beq.n	8007c48 <USB_EPStartXfer+0x41a>
 8007c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c42:	3301      	adds	r3, #1
 8007c44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	029b      	lsls	r3, r3, #10
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c5e:	801a      	strh	r2, [r3, #0]
 8007c60:	e03c      	b.n	8007cdc <USB_EPStartXfer+0x4ae>
 8007c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c66:	095b      	lsrs	r3, r3, #5
 8007c68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c70:	f003 031f 	and.w	r3, r3, #31
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d104      	bne.n	8007c82 <USB_EPStartXfer+0x454>
 8007c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	029b      	lsls	r3, r3, #10
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	4313      	orrs	r3, r2
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ca2:	801a      	strh	r2, [r3, #0]
 8007ca4:	e01a      	b.n	8007cdc <USB_EPStartXfer+0x4ae>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	785b      	ldrb	r3, [r3, #1]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d116      	bne.n	8007cdc <USB_EPStartXfer+0x4ae>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	461a      	mov	r2, r3
 8007cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cbe:	4413      	add	r3, r2
 8007cc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	00da      	lsls	r2, r3, #3
 8007cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cca:	4413      	add	r3, r2
 8007ccc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	891b      	ldrh	r3, [r3, #8]
 8007ce0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	6959      	ldr	r1, [r3, #20]
 8007ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fc7f 	bl	80085f6 <USB_WritePMA>
            ep->xfer_buff += len;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	695a      	ldr	r2, [r3, #20]
 8007cfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d00:	441a      	add	r2, r3
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	6a1a      	ldr	r2, [r3, #32]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d907      	bls.n	8007d22 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	6a1a      	ldr	r2, [r3, #32]
 8007d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d1a:	1ad2      	subs	r2, r2, r3
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	621a      	str	r2, [r3, #32]
 8007d20:	e006      	b.n	8007d30 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	785b      	ldrb	r3, [r3, #1]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d16b      	bne.n	8007e14 <USB_EPStartXfer+0x5e6>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4c:	4413      	add	r3, r2
 8007d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	00da      	lsls	r2, r3, #3
 8007d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d58:	4413      	add	r3, r2
 8007d5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d6e:	801a      	strh	r2, [r3, #0]
 8007d70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10a      	bne.n	8007d8e <USB_EPStartXfer+0x560>
 8007d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d8a:	801a      	strh	r2, [r3, #0]
 8007d8c:	e05b      	b.n	8007e46 <USB_EPStartXfer+0x618>
 8007d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d92:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d94:	d81c      	bhi.n	8007dd0 <USB_EPStartXfer+0x5a2>
 8007d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d9a:	085b      	lsrs	r3, r3, #1
 8007d9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007da0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d004      	beq.n	8007db6 <USB_EPStartXfer+0x588>
 8007dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007db0:	3301      	adds	r3, #1
 8007db2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	029b      	lsls	r3, r3, #10
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dcc:	801a      	strh	r2, [r3, #0]
 8007dce:	e03a      	b.n	8007e46 <USB_EPStartXfer+0x618>
 8007dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dde:	f003 031f 	and.w	r3, r3, #31
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d104      	bne.n	8007df0 <USB_EPStartXfer+0x5c2>
 8007de6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dea:	3b01      	subs	r3, #1
 8007dec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	029b      	lsls	r3, r3, #10
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	4313      	orrs	r3, r2
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e10:	801a      	strh	r2, [r3, #0]
 8007e12:	e018      	b.n	8007e46 <USB_EPStartXfer+0x618>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d114      	bne.n	8007e46 <USB_EPStartXfer+0x618>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e28:	4413      	add	r3, r2
 8007e2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	00da      	lsls	r2, r3, #3
 8007e32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e34:	4413      	add	r3, r2
 8007e36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	895b      	ldrh	r3, [r3, #10]
 8007e4a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	6959      	ldr	r1, [r3, #20]
 8007e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fbca 	bl	80085f6 <USB_WritePMA>
 8007e62:	e193      	b.n	800818c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e82:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	441a      	add	r2, r3
 8007e90:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007e94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007eb8:	4413      	add	r3, r2
 8007eba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	00da      	lsls	r2, r3, #3
 8007ec2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007eca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ed4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	891b      	ldrh	r3, [r3, #8]
 8007eda:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	6959      	ldr	r1, [r3, #20]
 8007ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fb82 	bl	80085f6 <USB_WritePMA>
 8007ef2:	e14b      	b.n	800818c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	6a1a      	ldr	r2, [r3, #32]
 8007ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007efc:	1ad2      	subs	r2, r2, r3
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 809a 	beq.w	800804e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	785b      	ldrb	r3, [r3, #1]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d16b      	bne.n	8007ffe <USB_EPStartXfer+0x7d0>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	461a      	mov	r2, r3
 8007f34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f36:	4413      	add	r3, r2
 8007f38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	00da      	lsls	r2, r3, #3
 8007f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f42:	4413      	add	r3, r2
 8007f44:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f48:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f58:	801a      	strh	r2, [r3, #0]
 8007f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10a      	bne.n	8007f78 <USB_EPStartXfer+0x74a>
 8007f62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f74:	801a      	strh	r2, [r3, #0]
 8007f76:	e05b      	b.n	8008030 <USB_EPStartXfer+0x802>
 8007f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f7e:	d81c      	bhi.n	8007fba <USB_EPStartXfer+0x78c>
 8007f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f84:	085b      	lsrs	r3, r3, #1
 8007f86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d004      	beq.n	8007fa0 <USB_EPStartXfer+0x772>
 8007f96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	029b      	lsls	r3, r3, #10
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fb6:	801a      	strh	r2, [r3, #0]
 8007fb8:	e03a      	b.n	8008030 <USB_EPStartXfer+0x802>
 8007fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fbe:	095b      	lsrs	r3, r3, #5
 8007fc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fc8:	f003 031f 	and.w	r3, r3, #31
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d104      	bne.n	8007fda <USB_EPStartXfer+0x7ac>
 8007fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	029b      	lsls	r3, r3, #10
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	4313      	orrs	r3, r2
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ffa:	801a      	strh	r2, [r3, #0]
 8007ffc:	e018      	b.n	8008030 <USB_EPStartXfer+0x802>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	785b      	ldrb	r3, [r3, #1]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d114      	bne.n	8008030 <USB_EPStartXfer+0x802>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800800c:	b29b      	uxth	r3, r3
 800800e:	461a      	mov	r2, r3
 8008010:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008012:	4413      	add	r3, r2
 8008014:	673b      	str	r3, [r7, #112]	@ 0x70
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	00da      	lsls	r2, r3, #3
 800801c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800801e:	4413      	add	r3, r2
 8008020:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008024:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800802a:	b29a      	uxth	r2, r3
 800802c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800802e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	895b      	ldrh	r3, [r3, #10]
 8008034:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	6959      	ldr	r1, [r3, #20]
 800803c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008040:	b29b      	uxth	r3, r3
 8008042:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fad5 	bl	80085f6 <USB_WritePMA>
 800804c:	e09e      	b.n	800818c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	785b      	ldrb	r3, [r3, #1]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d16b      	bne.n	800812e <USB_EPStartXfer+0x900>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008060:	b29b      	uxth	r3, r3
 8008062:	461a      	mov	r2, r3
 8008064:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008066:	4413      	add	r3, r2
 8008068:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	00da      	lsls	r2, r3, #3
 8008070:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008072:	4413      	add	r3, r2
 8008074:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008078:	67bb      	str	r3, [r7, #120]	@ 0x78
 800807a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	b29b      	uxth	r3, r3
 8008080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008084:	b29a      	uxth	r2, r3
 8008086:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008088:	801a      	strh	r2, [r3, #0]
 800808a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10a      	bne.n	80080a8 <USB_EPStartXfer+0x87a>
 8008092:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	b29b      	uxth	r3, r3
 8008098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800809c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080a4:	801a      	strh	r2, [r3, #0]
 80080a6:	e063      	b.n	8008170 <USB_EPStartXfer+0x942>
 80080a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80080ae:	d81c      	bhi.n	80080ea <USB_EPStartXfer+0x8bc>
 80080b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080b4:	085b      	lsrs	r3, r3, #1
 80080b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d004      	beq.n	80080d0 <USB_EPStartXfer+0x8a2>
 80080c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080ca:	3301      	adds	r3, #1
 80080cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080da:	b29b      	uxth	r3, r3
 80080dc:	029b      	lsls	r3, r3, #10
 80080de:	b29b      	uxth	r3, r3
 80080e0:	4313      	orrs	r3, r2
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080e6:	801a      	strh	r2, [r3, #0]
 80080e8:	e042      	b.n	8008170 <USB_EPStartXfer+0x942>
 80080ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080ee:	095b      	lsrs	r3, r3, #5
 80080f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080f8:	f003 031f 	and.w	r3, r3, #31
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d104      	bne.n	800810a <USB_EPStartXfer+0x8dc>
 8008100:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008104:	3b01      	subs	r3, #1
 8008106:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800810a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	b29a      	uxth	r2, r3
 8008110:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008114:	b29b      	uxth	r3, r3
 8008116:	029b      	lsls	r3, r3, #10
 8008118:	b29b      	uxth	r3, r3
 800811a:	4313      	orrs	r3, r2
 800811c:	b29b      	uxth	r3, r3
 800811e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008126:	b29a      	uxth	r2, r3
 8008128:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800812a:	801a      	strh	r2, [r3, #0]
 800812c:	e020      	b.n	8008170 <USB_EPStartXfer+0x942>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	785b      	ldrb	r3, [r3, #1]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d11c      	bne.n	8008170 <USB_EPStartXfer+0x942>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008142:	b29b      	uxth	r3, r3
 8008144:	461a      	mov	r2, r3
 8008146:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800814a:	4413      	add	r3, r2
 800814c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	00da      	lsls	r2, r3, #3
 8008156:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800815a:	4413      	add	r3, r2
 800815c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008160:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008168:	b29a      	uxth	r2, r3
 800816a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800816e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	891b      	ldrh	r3, [r3, #8]
 8008174:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	6959      	ldr	r1, [r3, #20]
 800817c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008180:	b29b      	uxth	r3, r3
 8008182:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fa35 	bl	80085f6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	881b      	ldrh	r3, [r3, #0]
 8008198:	b29b      	uxth	r3, r3
 800819a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800819e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081a2:	817b      	strh	r3, [r7, #10]
 80081a4:	897b      	ldrh	r3, [r7, #10]
 80081a6:	f083 0310 	eor.w	r3, r3, #16
 80081aa:	817b      	strh	r3, [r7, #10]
 80081ac:	897b      	ldrh	r3, [r7, #10]
 80081ae:	f083 0320 	eor.w	r3, r3, #32
 80081b2:	817b      	strh	r3, [r7, #10]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	441a      	add	r2, r3
 80081be:	897b      	ldrh	r3, [r7, #10]
 80081c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	8013      	strh	r3, [r2, #0]
 80081d4:	e0d5      	b.n	8008382 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	7b1b      	ldrb	r3, [r3, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d156      	bne.n	800828c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d122      	bne.n	800822c <USB_EPStartXfer+0x9fe>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	78db      	ldrb	r3, [r3, #3]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d11e      	bne.n	800822c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008204:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	441a      	add	r2, r3
 8008212:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008216:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800821a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800821e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008226:	b29b      	uxth	r3, r3
 8008228:	8013      	strh	r3, [r2, #0]
 800822a:	e01d      	b.n	8008268 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	881b      	ldrh	r3, [r3, #0]
 8008238:	b29b      	uxth	r3, r3
 800823a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800823e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008242:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	441a      	add	r2, r3
 8008250:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8008254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800825c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008264:	b29b      	uxth	r3, r3
 8008266:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	699a      	ldr	r2, [r3, #24]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	429a      	cmp	r2, r3
 8008272:	d907      	bls.n	8008284 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	699a      	ldr	r2, [r3, #24]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	1ad2      	subs	r2, r2, r3
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	619a      	str	r2, [r3, #24]
 8008282:	e054      	b.n	800832e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2200      	movs	r2, #0
 8008288:	619a      	str	r2, [r3, #24]
 800828a:	e050      	b.n	800832e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	78db      	ldrb	r3, [r3, #3]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d142      	bne.n	800831a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d048      	beq.n	800832e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80082ac:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80082b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d005      	beq.n	80082c4 <USB_EPStartXfer+0xa96>
 80082b8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80082bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10b      	bne.n	80082dc <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80082c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80082c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d12e      	bne.n	800832e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80082d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80082d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d128      	bne.n	800832e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082f2:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	441a      	add	r2, r3
 8008300:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8008304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800830c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008310:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008314:	b29b      	uxth	r3, r3
 8008316:	8013      	strh	r3, [r2, #0]
 8008318:	e009      	b.n	800832e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	78db      	ldrb	r3, [r3, #3]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d103      	bne.n	800832a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	2200      	movs	r2, #0
 8008326:	619a      	str	r2, [r3, #24]
 8008328:	e001      	b.n	800832e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e02a      	b.n	8008384 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	b29b      	uxth	r3, r3
 800833c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008344:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008348:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800834c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008350:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008354:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008358:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800835c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	441a      	add	r2, r3
 800836a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800836e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800837a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800837e:	b29b      	uxth	r3, r3
 8008380:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	37b0      	adds	r7, #176	@ 0xb0
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	785b      	ldrb	r3, [r3, #1]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d020      	beq.n	80083e0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083b4:	81bb      	strh	r3, [r7, #12]
 80083b6:	89bb      	ldrh	r3, [r7, #12]
 80083b8:	f083 0310 	eor.w	r3, r3, #16
 80083bc:	81bb      	strh	r3, [r7, #12]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	441a      	add	r2, r3
 80083c8:	89bb      	ldrh	r3, [r7, #12]
 80083ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083da:	b29b      	uxth	r3, r3
 80083dc:	8013      	strh	r3, [r2, #0]
 80083de:	e01f      	b.n	8008420 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	881b      	ldrh	r3, [r3, #0]
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083f6:	81fb      	strh	r3, [r7, #14]
 80083f8:	89fb      	ldrh	r3, [r7, #14]
 80083fa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80083fe:	81fb      	strh	r3, [r7, #14]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	441a      	add	r2, r3
 800840a:	89fb      	ldrh	r3, [r7, #14]
 800840c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008410:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008414:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800841c:	b29b      	uxth	r3, r3
 800841e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800842e:	b480      	push	{r7}
 8008430:	b087      	sub	sp, #28
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	785b      	ldrb	r3, [r3, #1]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d04c      	beq.n	80084da <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	4413      	add	r3, r2
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	823b      	strh	r3, [r7, #16]
 800844e:	8a3b      	ldrh	r3, [r7, #16]
 8008450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008454:	2b00      	cmp	r3, #0
 8008456:	d01b      	beq.n	8008490 <USB_EPClearStall+0x62>
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b29b      	uxth	r3, r3
 8008466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800846a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800846e:	81fb      	strh	r3, [r7, #14]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	441a      	add	r2, r3
 800847a:	89fb      	ldrh	r3, [r7, #14]
 800847c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008480:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008484:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008488:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800848c:	b29b      	uxth	r3, r3
 800848e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	78db      	ldrb	r3, [r3, #3]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d06c      	beq.n	8008572 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084ae:	81bb      	strh	r3, [r7, #12]
 80084b0:	89bb      	ldrh	r3, [r7, #12]
 80084b2:	f083 0320 	eor.w	r3, r3, #32
 80084b6:	81bb      	strh	r3, [r7, #12]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	441a      	add	r2, r3
 80084c2:	89bb      	ldrh	r3, [r7, #12]
 80084c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	8013      	strh	r3, [r2, #0]
 80084d8:	e04b      	b.n	8008572 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4413      	add	r3, r2
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	82fb      	strh	r3, [r7, #22]
 80084e8:	8afb      	ldrh	r3, [r7, #22]
 80084ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d01b      	beq.n	800852a <USB_EPClearStall+0xfc>
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008508:	82bb      	strh	r3, [r7, #20]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	441a      	add	r2, r3
 8008514:	8abb      	ldrh	r3, [r7, #20]
 8008516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800851a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800851e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008526:	b29b      	uxth	r3, r3
 8008528:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	b29b      	uxth	r3, r3
 8008538:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800853c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008540:	827b      	strh	r3, [r7, #18]
 8008542:	8a7b      	ldrh	r3, [r7, #18]
 8008544:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008548:	827b      	strh	r3, [r7, #18]
 800854a:	8a7b      	ldrh	r3, [r7, #18]
 800854c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008550:	827b      	strh	r3, [r7, #18]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	441a      	add	r2, r3
 800855c:	8a7b      	ldrh	r3, [r7, #18]
 800855e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800856a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800856e:	b29b      	uxth	r3, r3
 8008570:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	371c      	adds	r7, #28
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d103      	bne.n	800859a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2280      	movs	r2, #128	@ 0x80
 8008596:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b085      	sub	sp, #20
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80085e8:	68fb      	ldr	r3, [r7, #12]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b08b      	sub	sp, #44	@ 0x2c
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	4611      	mov	r1, r2
 8008602:	461a      	mov	r2, r3
 8008604:	460b      	mov	r3, r1
 8008606:	80fb      	strh	r3, [r7, #6]
 8008608:	4613      	mov	r3, r2
 800860a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800860c:	88bb      	ldrh	r3, [r7, #4]
 800860e:	3301      	adds	r3, #1
 8008610:	085b      	lsrs	r3, r3, #1
 8008612:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800861c:	88fa      	ldrh	r2, [r7, #6]
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	4413      	add	r3, r2
 8008622:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008626:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	627b      	str	r3, [r7, #36]	@ 0x24
 800862c:	e01c      	b.n	8008668 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	3301      	adds	r3, #1
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	b21b      	sxth	r3, r3
 800863c:	021b      	lsls	r3, r3, #8
 800863e:	b21a      	sxth	r2, r3
 8008640:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008644:	4313      	orrs	r3, r2
 8008646:	b21b      	sxth	r3, r3
 8008648:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	8a7a      	ldrh	r2, [r7, #18]
 800864e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	3302      	adds	r3, #2
 8008654:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	3301      	adds	r3, #1
 800865a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	3301      	adds	r3, #1
 8008660:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008664:	3b01      	subs	r3, #1
 8008666:	627b      	str	r3, [r7, #36]	@ 0x24
 8008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1df      	bne.n	800862e <USB_WritePMA+0x38>
  }
}
 800866e:	bf00      	nop
 8008670:	bf00      	nop
 8008672:	372c      	adds	r7, #44	@ 0x2c
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800867c:	b480      	push	{r7}
 800867e:	b08b      	sub	sp, #44	@ 0x2c
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	4611      	mov	r1, r2
 8008688:	461a      	mov	r2, r3
 800868a:	460b      	mov	r3, r1
 800868c:	80fb      	strh	r3, [r7, #6]
 800868e:	4613      	mov	r3, r2
 8008690:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008692:	88bb      	ldrh	r3, [r7, #4]
 8008694:	085b      	lsrs	r3, r3, #1
 8008696:	b29b      	uxth	r3, r3
 8008698:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086a2:	88fa      	ldrh	r2, [r7, #6]
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086ac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80086b2:	e018      	b.n	80086e6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80086bc:	6a3b      	ldr	r3, [r7, #32]
 80086be:	3302      	adds	r3, #2
 80086c0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	3301      	adds	r3, #1
 80086ce:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	0a1b      	lsrs	r3, r3, #8
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	3301      	adds	r3, #1
 80086de:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80086e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e2:	3b01      	subs	r3, #1
 80086e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80086e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e3      	bne.n	80086b4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80086ec:	88bb      	ldrh	r3, [r7, #4]
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d007      	beq.n	8008708 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	b2da      	uxtb	r2, r3
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	701a      	strb	r2, [r3, #0]
  }
}
 8008708:	bf00      	nop
 800870a:	372c      	adds	r7, #44	@ 0x2c
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008720:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008724:	f006 fa06 	bl	800eb34 <USBD_static_malloc>
 8008728:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d109      	bne.n	8008744 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	32b0      	adds	r2, #176	@ 0xb0
 800873a:	2100      	movs	r1, #0
 800873c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008740:	2302      	movs	r3, #2
 8008742:	e0d4      	b.n	80088ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008744:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008748:	2100      	movs	r1, #0
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f006 fa5e 	bl	800ec0c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	32b0      	adds	r2, #176	@ 0xb0
 800875a:	68f9      	ldr	r1, [r7, #12]
 800875c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	32b0      	adds	r2, #176	@ 0xb0
 800876a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	7c1b      	ldrb	r3, [r3, #16]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d138      	bne.n	80087ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800877c:	4b5e      	ldr	r3, [pc, #376]	@ (80088f8 <USBD_CDC_Init+0x1e4>)
 800877e:	7819      	ldrb	r1, [r3, #0]
 8008780:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008784:	2202      	movs	r2, #2
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f006 f87b 	bl	800e882 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800878c:	4b5a      	ldr	r3, [pc, #360]	@ (80088f8 <USBD_CDC_Init+0x1e4>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	f003 020f 	and.w	r2, r3, #15
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	4613      	mov	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	440b      	add	r3, r1
 80087a0:	3324      	adds	r3, #36	@ 0x24
 80087a2:	2201      	movs	r2, #1
 80087a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80087a6:	4b55      	ldr	r3, [pc, #340]	@ (80088fc <USBD_CDC_Init+0x1e8>)
 80087a8:	7819      	ldrb	r1, [r3, #0]
 80087aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087ae:	2202      	movs	r2, #2
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f006 f866 	bl	800e882 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80087b6:	4b51      	ldr	r3, [pc, #324]	@ (80088fc <USBD_CDC_Init+0x1e8>)
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	f003 020f 	and.w	r2, r3, #15
 80087be:	6879      	ldr	r1, [r7, #4]
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	440b      	add	r3, r1
 80087ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80087ce:	2201      	movs	r2, #1
 80087d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80087d2:	4b4b      	ldr	r3, [pc, #300]	@ (8008900 <USBD_CDC_Init+0x1ec>)
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	f003 020f 	and.w	r2, r3, #15
 80087da:	6879      	ldr	r1, [r7, #4]
 80087dc:	4613      	mov	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	440b      	add	r3, r1
 80087e6:	3326      	adds	r3, #38	@ 0x26
 80087e8:	2210      	movs	r2, #16
 80087ea:	801a      	strh	r2, [r3, #0]
 80087ec:	e035      	b.n	800885a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80087ee:	4b42      	ldr	r3, [pc, #264]	@ (80088f8 <USBD_CDC_Init+0x1e4>)
 80087f0:	7819      	ldrb	r1, [r3, #0]
 80087f2:	2340      	movs	r3, #64	@ 0x40
 80087f4:	2202      	movs	r2, #2
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f006 f843 	bl	800e882 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80087fc:	4b3e      	ldr	r3, [pc, #248]	@ (80088f8 <USBD_CDC_Init+0x1e4>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	f003 020f 	and.w	r2, r3, #15
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	4613      	mov	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	3324      	adds	r3, #36	@ 0x24
 8008812:	2201      	movs	r2, #1
 8008814:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008816:	4b39      	ldr	r3, [pc, #228]	@ (80088fc <USBD_CDC_Init+0x1e8>)
 8008818:	7819      	ldrb	r1, [r3, #0]
 800881a:	2340      	movs	r3, #64	@ 0x40
 800881c:	2202      	movs	r2, #2
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f006 f82f 	bl	800e882 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008824:	4b35      	ldr	r3, [pc, #212]	@ (80088fc <USBD_CDC_Init+0x1e8>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	f003 020f 	and.w	r2, r3, #15
 800882c:	6879      	ldr	r1, [r7, #4]
 800882e:	4613      	mov	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	440b      	add	r3, r1
 8008838:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800883c:	2201      	movs	r2, #1
 800883e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008840:	4b2f      	ldr	r3, [pc, #188]	@ (8008900 <USBD_CDC_Init+0x1ec>)
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	f003 020f 	and.w	r2, r3, #15
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	440b      	add	r3, r1
 8008854:	3326      	adds	r3, #38	@ 0x26
 8008856:	2210      	movs	r2, #16
 8008858:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800885a:	4b29      	ldr	r3, [pc, #164]	@ (8008900 <USBD_CDC_Init+0x1ec>)
 800885c:	7819      	ldrb	r1, [r3, #0]
 800885e:	2308      	movs	r3, #8
 8008860:	2203      	movs	r2, #3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f006 f80d 	bl	800e882 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008868:	4b25      	ldr	r3, [pc, #148]	@ (8008900 <USBD_CDC_Init+0x1ec>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	f003 020f 	and.w	r2, r3, #15
 8008870:	6879      	ldr	r1, [r7, #4]
 8008872:	4613      	mov	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	440b      	add	r3, r1
 800887c:	3324      	adds	r3, #36	@ 0x24
 800887e:	2201      	movs	r2, #1
 8008880:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	33b0      	adds	r3, #176	@ 0xb0
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80088b8:	2302      	movs	r3, #2
 80088ba:	e018      	b.n	80088ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	7c1b      	ldrb	r3, [r3, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10a      	bne.n	80088da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088c4:	4b0d      	ldr	r3, [pc, #52]	@ (80088fc <USBD_CDC_Init+0x1e8>)
 80088c6:	7819      	ldrb	r1, [r3, #0]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f006 f8c4 	bl	800ea60 <USBD_LL_PrepareReceive>
 80088d8:	e008      	b.n	80088ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088da:	4b08      	ldr	r3, [pc, #32]	@ (80088fc <USBD_CDC_Init+0x1e8>)
 80088dc:	7819      	ldrb	r1, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088e4:	2340      	movs	r3, #64	@ 0x40
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f006 f8ba 	bl	800ea60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	2000009f 	.word	0x2000009f
 80088fc:	200000a0 	.word	0x200000a0
 8008900:	200000a1 	.word	0x200000a1

08008904 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	460b      	mov	r3, r1
 800890e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008910:	4b3a      	ldr	r3, [pc, #232]	@ (80089fc <USBD_CDC_DeInit+0xf8>)
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	4619      	mov	r1, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f005 ffd9 	bl	800e8ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800891c:	4b37      	ldr	r3, [pc, #220]	@ (80089fc <USBD_CDC_DeInit+0xf8>)
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	f003 020f 	and.w	r2, r3, #15
 8008924:	6879      	ldr	r1, [r7, #4]
 8008926:	4613      	mov	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	440b      	add	r3, r1
 8008930:	3324      	adds	r3, #36	@ 0x24
 8008932:	2200      	movs	r2, #0
 8008934:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008936:	4b32      	ldr	r3, [pc, #200]	@ (8008a00 <USBD_CDC_DeInit+0xfc>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f005 ffc6 	bl	800e8ce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008942:	4b2f      	ldr	r3, [pc, #188]	@ (8008a00 <USBD_CDC_DeInit+0xfc>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	f003 020f 	and.w	r2, r3, #15
 800894a:	6879      	ldr	r1, [r7, #4]
 800894c:	4613      	mov	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	440b      	add	r3, r1
 8008956:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800895a:	2200      	movs	r2, #0
 800895c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800895e:	4b29      	ldr	r3, [pc, #164]	@ (8008a04 <USBD_CDC_DeInit+0x100>)
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	4619      	mov	r1, r3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f005 ffb2 	bl	800e8ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800896a:	4b26      	ldr	r3, [pc, #152]	@ (8008a04 <USBD_CDC_DeInit+0x100>)
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	f003 020f 	and.w	r2, r3, #15
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	4613      	mov	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	440b      	add	r3, r1
 800897e:	3324      	adds	r3, #36	@ 0x24
 8008980:	2200      	movs	r2, #0
 8008982:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008984:	4b1f      	ldr	r3, [pc, #124]	@ (8008a04 <USBD_CDC_DeInit+0x100>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	f003 020f 	and.w	r2, r3, #15
 800898c:	6879      	ldr	r1, [r7, #4]
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	440b      	add	r3, r1
 8008998:	3326      	adds	r3, #38	@ 0x26
 800899a:	2200      	movs	r2, #0
 800899c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	32b0      	adds	r2, #176	@ 0xb0
 80089a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01f      	beq.n	80089f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	33b0      	adds	r3, #176	@ 0xb0
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4413      	add	r3, r2
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	32b0      	adds	r2, #176	@ 0xb0
 80089ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f006 f8bc 	bl	800eb50 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	32b0      	adds	r2, #176	@ 0xb0
 80089e2:	2100      	movs	r1, #0
 80089e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	2000009f 	.word	0x2000009f
 8008a00:	200000a0 	.word	0x200000a0
 8008a04:	200000a1 	.word	0x200000a1

08008a08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	32b0      	adds	r2, #176	@ 0xb0
 8008a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e0bf      	b.n	8008bb8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d050      	beq.n	8008ae6 <USBD_CDC_Setup+0xde>
 8008a44:	2b20      	cmp	r3, #32
 8008a46:	f040 80af 	bne.w	8008ba8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	88db      	ldrh	r3, [r3, #6]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d03a      	beq.n	8008ac8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	b25b      	sxtb	r3, r3
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	da1b      	bge.n	8008a94 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	33b0      	adds	r3, #176	@ 0xb0
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4413      	add	r3, r2
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008a72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	88d2      	ldrh	r2, [r2, #6]
 8008a78:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	88db      	ldrh	r3, [r3, #6]
 8008a7e:	2b07      	cmp	r3, #7
 8008a80:	bf28      	it	cs
 8008a82:	2307      	movcs	r3, #7
 8008a84:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	89fa      	ldrh	r2, [r7, #14]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f001 fd2b 	bl	800a4e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008a92:	e090      	b.n	8008bb6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	785a      	ldrb	r2, [r3, #1]
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	88db      	ldrh	r3, [r3, #6]
 8008aa2:	2b3f      	cmp	r3, #63	@ 0x3f
 8008aa4:	d803      	bhi.n	8008aae <USBD_CDC_Setup+0xa6>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	88db      	ldrh	r3, [r3, #6]
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	e000      	b.n	8008ab0 <USBD_CDC_Setup+0xa8>
 8008aae:	2240      	movs	r2, #64	@ 0x40
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008ab6:	6939      	ldr	r1, [r7, #16]
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008abe:	461a      	mov	r2, r3
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f001 fd3d 	bl	800a540 <USBD_CtlPrepareRx>
      break;
 8008ac6:	e076      	b.n	8008bb6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	33b0      	adds	r3, #176	@ 0xb0
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	7850      	ldrb	r0, [r2, #1]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	4798      	blx	r3
      break;
 8008ae4:	e067      	b.n	8008bb6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	785b      	ldrb	r3, [r3, #1]
 8008aea:	2b0b      	cmp	r3, #11
 8008aec:	d851      	bhi.n	8008b92 <USBD_CDC_Setup+0x18a>
 8008aee:	a201      	add	r2, pc, #4	@ (adr r2, 8008af4 <USBD_CDC_Setup+0xec>)
 8008af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af4:	08008b25 	.word	0x08008b25
 8008af8:	08008ba1 	.word	0x08008ba1
 8008afc:	08008b93 	.word	0x08008b93
 8008b00:	08008b93 	.word	0x08008b93
 8008b04:	08008b93 	.word	0x08008b93
 8008b08:	08008b93 	.word	0x08008b93
 8008b0c:	08008b93 	.word	0x08008b93
 8008b10:	08008b93 	.word	0x08008b93
 8008b14:	08008b93 	.word	0x08008b93
 8008b18:	08008b93 	.word	0x08008b93
 8008b1c:	08008b4f 	.word	0x08008b4f
 8008b20:	08008b79 	.word	0x08008b79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d107      	bne.n	8008b40 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b30:	f107 030a 	add.w	r3, r7, #10
 8008b34:	2202      	movs	r2, #2
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 fcd5 	bl	800a4e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b3e:	e032      	b.n	8008ba6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f001 fc53 	bl	800a3ee <USBD_CtlError>
            ret = USBD_FAIL;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	75fb      	strb	r3, [r7, #23]
          break;
 8008b4c:	e02b      	b.n	8008ba6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d107      	bne.n	8008b6a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b5a:	f107 030d 	add.w	r3, r7, #13
 8008b5e:	2201      	movs	r2, #1
 8008b60:	4619      	mov	r1, r3
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f001 fcc0 	bl	800a4e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b68:	e01d      	b.n	8008ba6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 fc3e 	bl	800a3ee <USBD_CtlError>
            ret = USBD_FAIL;
 8008b72:	2303      	movs	r3, #3
 8008b74:	75fb      	strb	r3, [r7, #23]
          break;
 8008b76:	e016      	b.n	8008ba6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d00f      	beq.n	8008ba4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f001 fc31 	bl	800a3ee <USBD_CtlError>
            ret = USBD_FAIL;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b90:	e008      	b.n	8008ba4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f001 fc2a 	bl	800a3ee <USBD_CtlError>
          ret = USBD_FAIL;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b9e:	e002      	b.n	8008ba6 <USBD_CDC_Setup+0x19e>
          break;
 8008ba0:	bf00      	nop
 8008ba2:	e008      	b.n	8008bb6 <USBD_CDC_Setup+0x1ae>
          break;
 8008ba4:	bf00      	nop
      }
      break;
 8008ba6:	e006      	b.n	8008bb6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f001 fc1f 	bl	800a3ee <USBD_CtlError>
      ret = USBD_FAIL;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8008bb4:	bf00      	nop
  }

  return (uint8_t)ret;
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3718      	adds	r7, #24
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008bd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	32b0      	adds	r2, #176	@ 0xb0
 8008bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e065      	b.n	8008cb6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	32b0      	adds	r2, #176	@ 0xb0
 8008bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008bfa:	78fb      	ldrb	r3, [r7, #3]
 8008bfc:	f003 020f 	and.w	r2, r3, #15
 8008c00:	6879      	ldr	r1, [r7, #4]
 8008c02:	4613      	mov	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	440b      	add	r3, r1
 8008c0c:	3318      	adds	r3, #24
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d02f      	beq.n	8008c74 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	f003 020f 	and.w	r2, r3, #15
 8008c1a:	6879      	ldr	r1, [r7, #4]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	440b      	add	r3, r1
 8008c26:	3318      	adds	r3, #24
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	78fb      	ldrb	r3, [r7, #3]
 8008c2c:	f003 010f 	and.w	r1, r3, #15
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	460b      	mov	r3, r1
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	440b      	add	r3, r1
 8008c38:	00db      	lsls	r3, r3, #3
 8008c3a:	4403      	add	r3, r0
 8008c3c:	3320      	adds	r3, #32
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c44:	fb01 f303 	mul.w	r3, r1, r3
 8008c48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d112      	bne.n	8008c74 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008c4e:	78fb      	ldrb	r3, [r7, #3]
 8008c50:	f003 020f 	and.w	r2, r3, #15
 8008c54:	6879      	ldr	r1, [r7, #4]
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	440b      	add	r3, r1
 8008c60:	3318      	adds	r3, #24
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c66:	78f9      	ldrb	r1, [r7, #3]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f005 fed6 	bl	800ea1e <USBD_LL_Transmit>
 8008c72:	e01f      	b.n	8008cb4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	33b0      	adds	r3, #176	@ 0xb0
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d010      	beq.n	8008cb4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	33b0      	adds	r3, #176	@ 0xb0
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008cb0:	78fa      	ldrb	r2, [r7, #3]
 8008cb2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	32b0      	adds	r2, #176	@ 0xb0
 8008cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	32b0      	adds	r2, #176	@ 0xb0
 8008ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e01a      	b.n	8008d26 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008cf0:	78fb      	ldrb	r3, [r7, #3]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f005 fed4 	bl	800eaa2 <USBD_LL_GetRxDataSize>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	33b0      	adds	r3, #176	@ 0xb0
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008d20:	4611      	mov	r1, r2
 8008d22:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	32b0      	adds	r2, #176	@ 0xb0
 8008d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e024      	b.n	8008d9a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	33b0      	adds	r3, #176	@ 0xb0
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d019      	beq.n	8008d98 <USBD_CDC_EP0_RxReady+0x6a>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008d6a:	2bff      	cmp	r3, #255	@ 0xff
 8008d6c:	d014      	beq.n	8008d98 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	33b0      	adds	r3, #176	@ 0xb0
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008d86:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d8e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	22ff      	movs	r2, #255	@ 0xff
 8008d94:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
	...

08008da4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008dac:	2182      	movs	r1, #130	@ 0x82
 8008dae:	4818      	ldr	r0, [pc, #96]	@ (8008e10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008db0:	f000 fcbd 	bl	800972e <USBD_GetEpDesc>
 8008db4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008db6:	2101      	movs	r1, #1
 8008db8:	4815      	ldr	r0, [pc, #84]	@ (8008e10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008dba:	f000 fcb8 	bl	800972e <USBD_GetEpDesc>
 8008dbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008dc0:	2181      	movs	r1, #129	@ 0x81
 8008dc2:	4813      	ldr	r0, [pc, #76]	@ (8008e10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008dc4:	f000 fcb3 	bl	800972e <USBD_GetEpDesc>
 8008dc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2210      	movs	r2, #16
 8008dd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d006      	beq.n	8008dea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008de4:	711a      	strb	r2, [r3, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d006      	beq.n	8008dfe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008df8:	711a      	strb	r2, [r3, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2243      	movs	r2, #67	@ 0x43
 8008e02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e04:	4b02      	ldr	r3, [pc, #8]	@ (8008e10 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3718      	adds	r7, #24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	2000005c 	.word	0x2000005c

08008e14 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e1c:	2182      	movs	r1, #130	@ 0x82
 8008e1e:	4818      	ldr	r0, [pc, #96]	@ (8008e80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e20:	f000 fc85 	bl	800972e <USBD_GetEpDesc>
 8008e24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e26:	2101      	movs	r1, #1
 8008e28:	4815      	ldr	r0, [pc, #84]	@ (8008e80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e2a:	f000 fc80 	bl	800972e <USBD_GetEpDesc>
 8008e2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e30:	2181      	movs	r1, #129	@ 0x81
 8008e32:	4813      	ldr	r0, [pc, #76]	@ (8008e80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e34:	f000 fc7b 	bl	800972e <USBD_GetEpDesc>
 8008e38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d002      	beq.n	8008e46 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	2210      	movs	r2, #16
 8008e44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d006      	beq.n	8008e5a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	711a      	strb	r2, [r3, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f042 0202 	orr.w	r2, r2, #2
 8008e58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d006      	beq.n	8008e6e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	711a      	strb	r2, [r3, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f042 0202 	orr.w	r2, r2, #2
 8008e6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2243      	movs	r2, #67	@ 0x43
 8008e72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e74:	4b02      	ldr	r3, [pc, #8]	@ (8008e80 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3718      	adds	r7, #24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	2000005c 	.word	0x2000005c

08008e84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e8c:	2182      	movs	r1, #130	@ 0x82
 8008e8e:	4818      	ldr	r0, [pc, #96]	@ (8008ef0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e90:	f000 fc4d 	bl	800972e <USBD_GetEpDesc>
 8008e94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e96:	2101      	movs	r1, #1
 8008e98:	4815      	ldr	r0, [pc, #84]	@ (8008ef0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e9a:	f000 fc48 	bl	800972e <USBD_GetEpDesc>
 8008e9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ea0:	2181      	movs	r1, #129	@ 0x81
 8008ea2:	4813      	ldr	r0, [pc, #76]	@ (8008ef0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ea4:	f000 fc43 	bl	800972e <USBD_GetEpDesc>
 8008ea8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d002      	beq.n	8008eb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	2210      	movs	r2, #16
 8008eb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d006      	beq.n	8008eca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ec4:	711a      	strb	r2, [r3, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d006      	beq.n	8008ede <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ed8:	711a      	strb	r2, [r3, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2243      	movs	r2, #67	@ 0x43
 8008ee2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ee4:	4b02      	ldr	r3, [pc, #8]	@ (8008ef0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	2000005c 	.word	0x2000005c

08008ef4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	220a      	movs	r2, #10
 8008f00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008f02:	4b03      	ldr	r3, [pc, #12]	@ (8008f10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	20000018 	.word	0x20000018

08008f14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e009      	b.n	8008f3c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	33b0      	adds	r3, #176	@ 0xb0
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b087      	sub	sp, #28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	32b0      	adds	r2, #176	@ 0xb0
 8008f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f62:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e008      	b.n	8008f80 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	371c      	adds	r7, #28
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	32b0      	adds	r2, #176	@ 0xb0
 8008fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e004      	b.n	8008fba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
	...

08008fc8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	32b0      	adds	r2, #176	@ 0xb0
 8008fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fde:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e025      	b.n	800903a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d11f      	bne.n	8009038 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009000:	4b10      	ldr	r3, [pc, #64]	@ (8009044 <USBD_CDC_TransmitPacket+0x7c>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	f003 020f 	and.w	r2, r3, #15
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	4613      	mov	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4403      	add	r3, r0
 800901a:	3318      	adds	r3, #24
 800901c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800901e:	4b09      	ldr	r3, [pc, #36]	@ (8009044 <USBD_CDC_TransmitPacket+0x7c>)
 8009020:	7819      	ldrb	r1, [r3, #0]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f005 fcf5 	bl	800ea1e <USBD_LL_Transmit>

    ret = USBD_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009038:	7bfb      	ldrb	r3, [r7, #15]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	2000009f 	.word	0x2000009f

08009048 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	32b0      	adds	r2, #176	@ 0xb0
 800905a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	32b0      	adds	r2, #176	@ 0xb0
 800906a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009072:	2303      	movs	r3, #3
 8009074:	e018      	b.n	80090a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	7c1b      	ldrb	r3, [r3, #16]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10a      	bne.n	8009094 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800907e:	4b0c      	ldr	r3, [pc, #48]	@ (80090b0 <USBD_CDC_ReceivePacket+0x68>)
 8009080:	7819      	ldrb	r1, [r3, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009088:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f005 fce7 	bl	800ea60 <USBD_LL_PrepareReceive>
 8009092:	e008      	b.n	80090a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009094:	4b06      	ldr	r3, [pc, #24]	@ (80090b0 <USBD_CDC_ReceivePacket+0x68>)
 8009096:	7819      	ldrb	r1, [r3, #0]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800909e:	2340      	movs	r3, #64	@ 0x40
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f005 fcdd 	bl	800ea60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	200000a0 	.word	0x200000a0

080090b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	4613      	mov	r3, r2
 80090c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d101      	bne.n	80090cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e01f      	b.n	800910c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	79fa      	ldrb	r2, [r7, #7]
 80090fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f005 fb41 	bl	800e788 <USBD_LL_Init>
 8009106:	4603      	mov	r3, r0
 8009108:	75fb      	strb	r3, [r7, #23]

  return ret;
 800910a:	7dfb      	ldrb	r3, [r7, #23]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009128:	2303      	movs	r3, #3
 800912a:	e025      	b.n	8009178 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	32ae      	adds	r2, #174	@ 0xae
 800913e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00f      	beq.n	8009168 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	32ae      	adds	r2, #174	@ 0xae
 8009152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009158:	f107 020e 	add.w	r2, r7, #14
 800915c:	4610      	mov	r0, r2
 800915e:	4798      	blx	r3
 8009160:	4602      	mov	r2, r0
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f005 fb5f 	bl	800e84c <USBD_LL_Start>
 800918e:	4603      	mov	r3, r0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	460b      	mov	r3, r1
 80091b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d009      	beq.n	80091dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	78fa      	ldrb	r2, [r7, #3]
 80091d2:	4611      	mov	r1, r2
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	4798      	blx	r3
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	460b      	mov	r3, r1
 80091f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	78fa      	ldrb	r2, [r7, #3]
 8009200:	4611      	mov	r1, r2
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	4798      	blx	r3
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800920c:	2303      	movs	r3, #3
 800920e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009210:	7bfb      	ldrb	r3, [r7, #15]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f001 f8a4 	bl	800a37a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009240:	461a      	mov	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800924e:	f003 031f 	and.w	r3, r3, #31
 8009252:	2b02      	cmp	r3, #2
 8009254:	d01a      	beq.n	800928c <USBD_LL_SetupStage+0x72>
 8009256:	2b02      	cmp	r3, #2
 8009258:	d822      	bhi.n	80092a0 <USBD_LL_SetupStage+0x86>
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <USBD_LL_SetupStage+0x4a>
 800925e:	2b01      	cmp	r3, #1
 8009260:	d00a      	beq.n	8009278 <USBD_LL_SetupStage+0x5e>
 8009262:	e01d      	b.n	80092a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fad1 	bl	8009814 <USBD_StdDevReq>
 8009272:	4603      	mov	r3, r0
 8009274:	73fb      	strb	r3, [r7, #15]
      break;
 8009276:	e020      	b.n	80092ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fb39 	bl	80098f8 <USBD_StdItfReq>
 8009286:	4603      	mov	r3, r0
 8009288:	73fb      	strb	r3, [r7, #15]
      break;
 800928a:	e016      	b.n	80092ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fb9b 	bl	80099d0 <USBD_StdEPReq>
 800929a:	4603      	mov	r3, r0
 800929c:	73fb      	strb	r3, [r7, #15]
      break;
 800929e:	e00c      	b.n	80092ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80092a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	4619      	mov	r1, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f005 fb2c 	bl	800e90c <USBD_LL_StallEP>
 80092b4:	4603      	mov	r3, r0
 80092b6:	73fb      	strb	r3, [r7, #15]
      break;
 80092b8:	bf00      	nop
  }

  return ret;
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	460b      	mov	r3, r1
 80092ce:	607a      	str	r2, [r7, #4]
 80092d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80092d6:	7afb      	ldrb	r3, [r7, #11]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d16e      	bne.n	80093ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80092e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80092ea:	2b03      	cmp	r3, #3
 80092ec:	f040 8098 	bne.w	8009420 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d913      	bls.n	8009324 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	689a      	ldr	r2, [r3, #8]
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	1ad2      	subs	r2, r2, r3
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	68da      	ldr	r2, [r3, #12]
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	4293      	cmp	r3, r2
 8009314:	bf28      	it	cs
 8009316:	4613      	movcs	r3, r2
 8009318:	461a      	mov	r2, r3
 800931a:	6879      	ldr	r1, [r7, #4]
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f001 f92c 	bl	800a57a <USBD_CtlContinueRx>
 8009322:	e07d      	b.n	8009420 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800932a:	f003 031f 	and.w	r3, r3, #31
 800932e:	2b02      	cmp	r3, #2
 8009330:	d014      	beq.n	800935c <USBD_LL_DataOutStage+0x98>
 8009332:	2b02      	cmp	r3, #2
 8009334:	d81d      	bhi.n	8009372 <USBD_LL_DataOutStage+0xae>
 8009336:	2b00      	cmp	r3, #0
 8009338:	d002      	beq.n	8009340 <USBD_LL_DataOutStage+0x7c>
 800933a:	2b01      	cmp	r3, #1
 800933c:	d003      	beq.n	8009346 <USBD_LL_DataOutStage+0x82>
 800933e:	e018      	b.n	8009372 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009340:	2300      	movs	r3, #0
 8009342:	75bb      	strb	r3, [r7, #22]
            break;
 8009344:	e018      	b.n	8009378 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800934c:	b2db      	uxtb	r3, r3
 800934e:	4619      	mov	r1, r3
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 f9d2 	bl	80096fa <USBD_CoreFindIF>
 8009356:	4603      	mov	r3, r0
 8009358:	75bb      	strb	r3, [r7, #22]
            break;
 800935a:	e00d      	b.n	8009378 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009362:	b2db      	uxtb	r3, r3
 8009364:	4619      	mov	r1, r3
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f000 f9d4 	bl	8009714 <USBD_CoreFindEP>
 800936c:	4603      	mov	r3, r0
 800936e:	75bb      	strb	r3, [r7, #22]
            break;
 8009370:	e002      	b.n	8009378 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009372:	2300      	movs	r3, #0
 8009374:	75bb      	strb	r3, [r7, #22]
            break;
 8009376:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009378:	7dbb      	ldrb	r3, [r7, #22]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d119      	bne.n	80093b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b03      	cmp	r3, #3
 8009388:	d113      	bne.n	80093b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800938a:	7dba      	ldrb	r2, [r7, #22]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	32ae      	adds	r2, #174	@ 0xae
 8009390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00b      	beq.n	80093b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800939a:	7dba      	ldrb	r2, [r7, #22]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80093a2:	7dba      	ldrb	r2, [r7, #22]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	32ae      	adds	r2, #174	@ 0xae
 80093a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f001 f8f2 	bl	800a59c <USBD_CtlSendStatus>
 80093b8:	e032      	b.n	8009420 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80093ba:	7afb      	ldrb	r3, [r7, #11]
 80093bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	4619      	mov	r1, r3
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 f9a5 	bl	8009714 <USBD_CoreFindEP>
 80093ca:	4603      	mov	r3, r0
 80093cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093ce:	7dbb      	ldrb	r3, [r7, #22]
 80093d0:	2bff      	cmp	r3, #255	@ 0xff
 80093d2:	d025      	beq.n	8009420 <USBD_LL_DataOutStage+0x15c>
 80093d4:	7dbb      	ldrb	r3, [r7, #22]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d122      	bne.n	8009420 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d117      	bne.n	8009416 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80093e6:	7dba      	ldrb	r2, [r7, #22]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	32ae      	adds	r2, #174	@ 0xae
 80093ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00f      	beq.n	8009416 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80093f6:	7dba      	ldrb	r2, [r7, #22]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80093fe:	7dba      	ldrb	r2, [r7, #22]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	32ae      	adds	r2, #174	@ 0xae
 8009404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	7afa      	ldrb	r2, [r7, #11]
 800940c:	4611      	mov	r1, r2
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	4798      	blx	r3
 8009412:	4603      	mov	r3, r0
 8009414:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009416:	7dfb      	ldrb	r3, [r7, #23]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800941c:	7dfb      	ldrb	r3, [r7, #23]
 800941e:	e000      	b.n	8009422 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3718      	adds	r7, #24
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b086      	sub	sp, #24
 800942e:	af00      	add	r7, sp, #0
 8009430:	60f8      	str	r0, [r7, #12]
 8009432:	460b      	mov	r3, r1
 8009434:	607a      	str	r2, [r7, #4]
 8009436:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009438:	7afb      	ldrb	r3, [r7, #11]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d16f      	bne.n	800951e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3314      	adds	r3, #20
 8009442:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800944a:	2b02      	cmp	r3, #2
 800944c:	d15a      	bne.n	8009504 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	689a      	ldr	r2, [r3, #8]
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	429a      	cmp	r2, r3
 8009458:	d914      	bls.n	8009484 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	1ad2      	subs	r2, r2, r3
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	461a      	mov	r2, r3
 800946e:	6879      	ldr	r1, [r7, #4]
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f001 f854 	bl	800a51e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009476:	2300      	movs	r3, #0
 8009478:	2200      	movs	r2, #0
 800947a:	2100      	movs	r1, #0
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f005 faef 	bl	800ea60 <USBD_LL_PrepareReceive>
 8009482:	e03f      	b.n	8009504 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	68da      	ldr	r2, [r3, #12]
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	429a      	cmp	r2, r3
 800948e:	d11c      	bne.n	80094ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009498:	429a      	cmp	r2, r3
 800949a:	d316      	bcc.n	80094ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	685a      	ldr	r2, [r3, #4]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d20f      	bcs.n	80094ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094aa:	2200      	movs	r2, #0
 80094ac:	2100      	movs	r1, #0
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f001 f835 	bl	800a51e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094bc:	2300      	movs	r3, #0
 80094be:	2200      	movs	r2, #0
 80094c0:	2100      	movs	r1, #0
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f005 facc 	bl	800ea60 <USBD_LL_PrepareReceive>
 80094c8:	e01c      	b.n	8009504 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d10f      	bne.n	80094f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d009      	beq.n	80094f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80094f6:	2180      	movs	r1, #128	@ 0x80
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f005 fa07 	bl	800e90c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f001 f85f 	bl	800a5c2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d03a      	beq.n	8009584 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f7ff fe42 	bl	8009198 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800951c:	e032      	b.n	8009584 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800951e:	7afb      	ldrb	r3, [r7, #11]
 8009520:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009524:	b2db      	uxtb	r3, r3
 8009526:	4619      	mov	r1, r3
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 f8f3 	bl	8009714 <USBD_CoreFindEP>
 800952e:	4603      	mov	r3, r0
 8009530:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009532:	7dfb      	ldrb	r3, [r7, #23]
 8009534:	2bff      	cmp	r3, #255	@ 0xff
 8009536:	d025      	beq.n	8009584 <USBD_LL_DataInStage+0x15a>
 8009538:	7dfb      	ldrb	r3, [r7, #23]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d122      	bne.n	8009584 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b03      	cmp	r3, #3
 8009548:	d11c      	bne.n	8009584 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800954a:	7dfa      	ldrb	r2, [r7, #23]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	32ae      	adds	r2, #174	@ 0xae
 8009550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d014      	beq.n	8009584 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800955a:	7dfa      	ldrb	r2, [r7, #23]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009562:	7dfa      	ldrb	r2, [r7, #23]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	32ae      	adds	r2, #174	@ 0xae
 8009568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	7afa      	ldrb	r2, [r7, #11]
 8009570:	4611      	mov	r1, r2
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	4798      	blx	r3
 8009576:	4603      	mov	r3, r0
 8009578:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800957a:	7dbb      	ldrb	r3, [r7, #22]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009580:	7dbb      	ldrb	r3, [r7, #22]
 8009582:	e000      	b.n	8009586 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b084      	sub	sp, #16
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d014      	beq.n	80095f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00e      	beq.n	80095f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	6852      	ldr	r2, [r2, #4]
 80095e2:	b2d2      	uxtb	r2, r2
 80095e4:	4611      	mov	r1, r2
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	4798      	blx	r3
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80095f0:	2303      	movs	r3, #3
 80095f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095f4:	2340      	movs	r3, #64	@ 0x40
 80095f6:	2200      	movs	r2, #0
 80095f8:	2100      	movs	r1, #0
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f005 f941 	bl	800e882 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2240      	movs	r2, #64	@ 0x40
 800960c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009610:	2340      	movs	r3, #64	@ 0x40
 8009612:	2200      	movs	r2, #0
 8009614:	2180      	movs	r1, #128	@ 0x80
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f005 f933 	bl	800e882 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2240      	movs	r2, #64	@ 0x40
 8009626:	621a      	str	r2, [r3, #32]

  return ret;
 8009628:	7bfb      	ldrb	r3, [r7, #15]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009632:	b480      	push	{r7}
 8009634:	b083      	sub	sp, #12
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	460b      	mov	r3, r1
 800963c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	78fa      	ldrb	r2, [r7, #3]
 8009642:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	370c      	adds	r7, #12
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009660:	b2db      	uxtb	r3, r3
 8009662:	2b04      	cmp	r3, #4
 8009664:	d006      	beq.n	8009674 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800966c:	b2da      	uxtb	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2204      	movs	r2, #4
 8009678:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b04      	cmp	r3, #4
 800969c:	d106      	bne.n	80096ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b082      	sub	sp, #8
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d110      	bne.n	80096f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00b      	beq.n	80096f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096de:	69db      	ldr	r3, [r3, #28]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d005      	beq.n	80096f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b083      	sub	sp, #12
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	460b      	mov	r3, r1
 8009704:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009706:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009720:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009722:	4618      	mov	r0, r3
 8009724:	370c      	adds	r7, #12
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b086      	sub	sp, #24
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	460b      	mov	r3, r1
 8009738:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009742:	2300      	movs	r3, #0
 8009744:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	885b      	ldrh	r3, [r3, #2]
 800974a:	b29b      	uxth	r3, r3
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	7812      	ldrb	r2, [r2, #0]
 8009750:	4293      	cmp	r3, r2
 8009752:	d91f      	bls.n	8009794 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800975a:	e013      	b.n	8009784 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800975c:	f107 030a 	add.w	r3, r7, #10
 8009760:	4619      	mov	r1, r3
 8009762:	6978      	ldr	r0, [r7, #20]
 8009764:	f000 f81b 	bl	800979e <USBD_GetNextDesc>
 8009768:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	785b      	ldrb	r3, [r3, #1]
 800976e:	2b05      	cmp	r3, #5
 8009770:	d108      	bne.n	8009784 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	789b      	ldrb	r3, [r3, #2]
 800977a:	78fa      	ldrb	r2, [r7, #3]
 800977c:	429a      	cmp	r2, r3
 800977e:	d008      	beq.n	8009792 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009780:	2300      	movs	r3, #0
 8009782:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	885b      	ldrh	r3, [r3, #2]
 8009788:	b29a      	uxth	r2, r3
 800978a:	897b      	ldrh	r3, [r7, #10]
 800978c:	429a      	cmp	r2, r3
 800978e:	d8e5      	bhi.n	800975c <USBD_GetEpDesc+0x2e>
 8009790:	e000      	b.n	8009794 <USBD_GetEpDesc+0x66>
          break;
 8009792:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009794:	693b      	ldr	r3, [r7, #16]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800979e:	b480      	push	{r7}
 80097a0:	b085      	sub	sp, #20
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	881b      	ldrh	r3, [r3, #0]
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	7812      	ldrb	r2, [r2, #0]
 80097b4:	4413      	add	r3, r2
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	461a      	mov	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4413      	add	r3, r2
 80097c6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80097c8:	68fb      	ldr	r3, [r7, #12]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b087      	sub	sp, #28
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	3301      	adds	r3, #1
 80097ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80097f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80097f8:	021b      	lsls	r3, r3, #8
 80097fa:	b21a      	sxth	r2, r3
 80097fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009800:	4313      	orrs	r3, r2
 8009802:	b21b      	sxth	r3, r3
 8009804:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009806:	89fb      	ldrh	r3, [r7, #14]
}
 8009808:	4618      	mov	r0, r3
 800980a:	371c      	adds	r7, #28
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800982a:	2b40      	cmp	r3, #64	@ 0x40
 800982c:	d005      	beq.n	800983a <USBD_StdDevReq+0x26>
 800982e:	2b40      	cmp	r3, #64	@ 0x40
 8009830:	d857      	bhi.n	80098e2 <USBD_StdDevReq+0xce>
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00f      	beq.n	8009856 <USBD_StdDevReq+0x42>
 8009836:	2b20      	cmp	r3, #32
 8009838:	d153      	bne.n	80098e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	32ae      	adds	r2, #174	@ 0xae
 8009844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	4798      	blx	r3
 8009850:	4603      	mov	r3, r0
 8009852:	73fb      	strb	r3, [r7, #15]
      break;
 8009854:	e04a      	b.n	80098ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	785b      	ldrb	r3, [r3, #1]
 800985a:	2b09      	cmp	r3, #9
 800985c:	d83b      	bhi.n	80098d6 <USBD_StdDevReq+0xc2>
 800985e:	a201      	add	r2, pc, #4	@ (adr r2, 8009864 <USBD_StdDevReq+0x50>)
 8009860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009864:	080098b9 	.word	0x080098b9
 8009868:	080098cd 	.word	0x080098cd
 800986c:	080098d7 	.word	0x080098d7
 8009870:	080098c3 	.word	0x080098c3
 8009874:	080098d7 	.word	0x080098d7
 8009878:	08009897 	.word	0x08009897
 800987c:	0800988d 	.word	0x0800988d
 8009880:	080098d7 	.word	0x080098d7
 8009884:	080098af 	.word	0x080098af
 8009888:	080098a1 	.word	0x080098a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800988c:	6839      	ldr	r1, [r7, #0]
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fa3c 	bl	8009d0c <USBD_GetDescriptor>
          break;
 8009894:	e024      	b.n	80098e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fbcb 	bl	800a034 <USBD_SetAddress>
          break;
 800989e:	e01f      	b.n	80098e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fc0a 	bl	800a0bc <USBD_SetConfig>
 80098a8:	4603      	mov	r3, r0
 80098aa:	73fb      	strb	r3, [r7, #15]
          break;
 80098ac:	e018      	b.n	80098e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fcad 	bl	800a210 <USBD_GetConfig>
          break;
 80098b6:	e013      	b.n	80098e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fcde 	bl	800a27c <USBD_GetStatus>
          break;
 80098c0:	e00e      	b.n	80098e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fd0d 	bl	800a2e4 <USBD_SetFeature>
          break;
 80098ca:	e009      	b.n	80098e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fd31 	bl	800a336 <USBD_ClrFeature>
          break;
 80098d4:	e004      	b.n	80098e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fd88 	bl	800a3ee <USBD_CtlError>
          break;
 80098de:	bf00      	nop
      }
      break;
 80098e0:	e004      	b.n	80098ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80098e2:	6839      	ldr	r1, [r7, #0]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fd82 	bl	800a3ee <USBD_CtlError>
      break;
 80098ea:	bf00      	nop
  }

  return ret;
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop

080098f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800990e:	2b40      	cmp	r3, #64	@ 0x40
 8009910:	d005      	beq.n	800991e <USBD_StdItfReq+0x26>
 8009912:	2b40      	cmp	r3, #64	@ 0x40
 8009914:	d852      	bhi.n	80099bc <USBD_StdItfReq+0xc4>
 8009916:	2b00      	cmp	r3, #0
 8009918:	d001      	beq.n	800991e <USBD_StdItfReq+0x26>
 800991a:	2b20      	cmp	r3, #32
 800991c:	d14e      	bne.n	80099bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009924:	b2db      	uxtb	r3, r3
 8009926:	3b01      	subs	r3, #1
 8009928:	2b02      	cmp	r3, #2
 800992a:	d840      	bhi.n	80099ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	889b      	ldrh	r3, [r3, #4]
 8009930:	b2db      	uxtb	r3, r3
 8009932:	2b01      	cmp	r3, #1
 8009934:	d836      	bhi.n	80099a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	889b      	ldrh	r3, [r3, #4]
 800993a:	b2db      	uxtb	r3, r3
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f7ff fedb 	bl	80096fa <USBD_CoreFindIF>
 8009944:	4603      	mov	r3, r0
 8009946:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	2bff      	cmp	r3, #255	@ 0xff
 800994c:	d01d      	beq.n	800998a <USBD_StdItfReq+0x92>
 800994e:	7bbb      	ldrb	r3, [r7, #14]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d11a      	bne.n	800998a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009954:	7bba      	ldrb	r2, [r7, #14]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	32ae      	adds	r2, #174	@ 0xae
 800995a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00f      	beq.n	8009984 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009964:	7bba      	ldrb	r2, [r7, #14]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800996c:	7bba      	ldrb	r2, [r7, #14]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	32ae      	adds	r2, #174	@ 0xae
 8009972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	4798      	blx	r3
 800997e:	4603      	mov	r3, r0
 8009980:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009982:	e004      	b.n	800998e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009984:	2303      	movs	r3, #3
 8009986:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009988:	e001      	b.n	800998e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800998a:	2303      	movs	r3, #3
 800998c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	88db      	ldrh	r3, [r3, #6]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d110      	bne.n	80099b8 <USBD_StdItfReq+0xc0>
 8009996:	7bfb      	ldrb	r3, [r7, #15]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10d      	bne.n	80099b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fdfd 	bl	800a59c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80099a2:	e009      	b.n	80099b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fd21 	bl	800a3ee <USBD_CtlError>
          break;
 80099ac:	e004      	b.n	80099b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fd1c 	bl	800a3ee <USBD_CtlError>
          break;
 80099b6:	e000      	b.n	80099ba <USBD_StdItfReq+0xc2>
          break;
 80099b8:	bf00      	nop
      }
      break;
 80099ba:	e004      	b.n	80099c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fd15 	bl	800a3ee <USBD_CtlError>
      break;
 80099c4:	bf00      	nop
  }

  return ret;
 80099c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	889b      	ldrh	r3, [r3, #4]
 80099e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80099ec:	2b40      	cmp	r3, #64	@ 0x40
 80099ee:	d007      	beq.n	8009a00 <USBD_StdEPReq+0x30>
 80099f0:	2b40      	cmp	r3, #64	@ 0x40
 80099f2:	f200 817f 	bhi.w	8009cf4 <USBD_StdEPReq+0x324>
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d02a      	beq.n	8009a50 <USBD_StdEPReq+0x80>
 80099fa:	2b20      	cmp	r3, #32
 80099fc:	f040 817a 	bne.w	8009cf4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7ff fe85 	bl	8009714 <USBD_CoreFindEP>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a0e:	7b7b      	ldrb	r3, [r7, #13]
 8009a10:	2bff      	cmp	r3, #255	@ 0xff
 8009a12:	f000 8174 	beq.w	8009cfe <USBD_StdEPReq+0x32e>
 8009a16:	7b7b      	ldrb	r3, [r7, #13]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f040 8170 	bne.w	8009cfe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009a1e:	7b7a      	ldrb	r2, [r7, #13]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009a26:	7b7a      	ldrb	r2, [r7, #13]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	32ae      	adds	r2, #174	@ 0xae
 8009a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 8163 	beq.w	8009cfe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009a38:	7b7a      	ldrb	r2, [r7, #13]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	32ae      	adds	r2, #174	@ 0xae
 8009a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	4798      	blx	r3
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a4e:	e156      	b.n	8009cfe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	785b      	ldrb	r3, [r3, #1]
 8009a54:	2b03      	cmp	r3, #3
 8009a56:	d008      	beq.n	8009a6a <USBD_StdEPReq+0x9a>
 8009a58:	2b03      	cmp	r3, #3
 8009a5a:	f300 8145 	bgt.w	8009ce8 <USBD_StdEPReq+0x318>
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 809b 	beq.w	8009b9a <USBD_StdEPReq+0x1ca>
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d03c      	beq.n	8009ae2 <USBD_StdEPReq+0x112>
 8009a68:	e13e      	b.n	8009ce8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d002      	beq.n	8009a7c <USBD_StdEPReq+0xac>
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	d016      	beq.n	8009aa8 <USBD_StdEPReq+0xd8>
 8009a7a:	e02c      	b.n	8009ad6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a7c:	7bbb      	ldrb	r3, [r7, #14]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00d      	beq.n	8009a9e <USBD_StdEPReq+0xce>
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
 8009a84:	2b80      	cmp	r3, #128	@ 0x80
 8009a86:	d00a      	beq.n	8009a9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f004 ff3d 	bl	800e90c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a92:	2180      	movs	r1, #128	@ 0x80
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f004 ff39 	bl	800e90c <USBD_LL_StallEP>
 8009a9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a9c:	e020      	b.n	8009ae0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fca4 	bl	800a3ee <USBD_CtlError>
              break;
 8009aa6:	e01b      	b.n	8009ae0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	885b      	ldrh	r3, [r3, #2]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10e      	bne.n	8009ace <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ab0:	7bbb      	ldrb	r3, [r7, #14]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00b      	beq.n	8009ace <USBD_StdEPReq+0xfe>
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
 8009ab8:	2b80      	cmp	r3, #128	@ 0x80
 8009aba:	d008      	beq.n	8009ace <USBD_StdEPReq+0xfe>
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	88db      	ldrh	r3, [r3, #6]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d104      	bne.n	8009ace <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f004 ff1f 	bl	800e90c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fd64 	bl	800a59c <USBD_CtlSendStatus>

              break;
 8009ad4:	e004      	b.n	8009ae0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fc88 	bl	800a3ee <USBD_CtlError>
              break;
 8009ade:	bf00      	nop
          }
          break;
 8009ae0:	e107      	b.n	8009cf2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d002      	beq.n	8009af4 <USBD_StdEPReq+0x124>
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d016      	beq.n	8009b20 <USBD_StdEPReq+0x150>
 8009af2:	e04b      	b.n	8009b8c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00d      	beq.n	8009b16 <USBD_StdEPReq+0x146>
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
 8009afc:	2b80      	cmp	r3, #128	@ 0x80
 8009afe:	d00a      	beq.n	8009b16 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b00:	7bbb      	ldrb	r3, [r7, #14]
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f004 ff01 	bl	800e90c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b0a:	2180      	movs	r1, #128	@ 0x80
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f004 fefd 	bl	800e90c <USBD_LL_StallEP>
 8009b12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b14:	e040      	b.n	8009b98 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 fc68 	bl	800a3ee <USBD_CtlError>
              break;
 8009b1e:	e03b      	b.n	8009b98 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	885b      	ldrh	r3, [r3, #2]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d136      	bne.n	8009b96 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
 8009b2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d004      	beq.n	8009b3c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f004 ff07 	bl	800e94a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fd2d 	bl	800a59c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b42:	7bbb      	ldrb	r3, [r7, #14]
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7ff fde4 	bl	8009714 <USBD_CoreFindEP>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b50:	7b7b      	ldrb	r3, [r7, #13]
 8009b52:	2bff      	cmp	r3, #255	@ 0xff
 8009b54:	d01f      	beq.n	8009b96 <USBD_StdEPReq+0x1c6>
 8009b56:	7b7b      	ldrb	r3, [r7, #13]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d11c      	bne.n	8009b96 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009b5c:	7b7a      	ldrb	r2, [r7, #13]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009b64:	7b7a      	ldrb	r2, [r7, #13]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	32ae      	adds	r2, #174	@ 0xae
 8009b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d010      	beq.n	8009b96 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b74:	7b7a      	ldrb	r2, [r7, #13]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	32ae      	adds	r2, #174	@ 0xae
 8009b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	4798      	blx	r3
 8009b86:	4603      	mov	r3, r0
 8009b88:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009b8a:	e004      	b.n	8009b96 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fc2d 	bl	800a3ee <USBD_CtlError>
              break;
 8009b94:	e000      	b.n	8009b98 <USBD_StdEPReq+0x1c8>
              break;
 8009b96:	bf00      	nop
          }
          break;
 8009b98:	e0ab      	b.n	8009cf2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d002      	beq.n	8009bac <USBD_StdEPReq+0x1dc>
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d032      	beq.n	8009c10 <USBD_StdEPReq+0x240>
 8009baa:	e097      	b.n	8009cdc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d007      	beq.n	8009bc2 <USBD_StdEPReq+0x1f2>
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	2b80      	cmp	r3, #128	@ 0x80
 8009bb6:	d004      	beq.n	8009bc2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009bb8:	6839      	ldr	r1, [r7, #0]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fc17 	bl	800a3ee <USBD_CtlError>
                break;
 8009bc0:	e091      	b.n	8009ce6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	da0b      	bge.n	8009be2 <USBD_StdEPReq+0x212>
 8009bca:	7bbb      	ldrb	r3, [r7, #14]
 8009bcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	3310      	adds	r3, #16
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	4413      	add	r3, r2
 8009bde:	3304      	adds	r3, #4
 8009be0:	e00b      	b.n	8009bfa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009be2:	7bbb      	ldrb	r3, [r7, #14]
 8009be4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009be8:	4613      	mov	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2202      	movs	r2, #2
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 fc6d 	bl	800a4e8 <USBD_CtlSendData>
              break;
 8009c0e:	e06a      	b.n	8009ce6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	da11      	bge.n	8009c3c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c18:	7bbb      	ldrb	r3, [r7, #14]
 8009c1a:	f003 020f 	and.w	r2, r3, #15
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	440b      	add	r3, r1
 8009c2a:	3324      	adds	r3, #36	@ 0x24
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d117      	bne.n	8009c62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fbda 	bl	800a3ee <USBD_CtlError>
                  break;
 8009c3a:	e054      	b.n	8009ce6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c3c:	7bbb      	ldrb	r3, [r7, #14]
 8009c3e:	f003 020f 	and.w	r2, r3, #15
 8009c42:	6879      	ldr	r1, [r7, #4]
 8009c44:	4613      	mov	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	440b      	add	r3, r1
 8009c4e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d104      	bne.n	8009c62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fbc7 	bl	800a3ee <USBD_CtlError>
                  break;
 8009c60:	e041      	b.n	8009ce6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	da0b      	bge.n	8009c82 <USBD_StdEPReq+0x2b2>
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c70:	4613      	mov	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	3310      	adds	r3, #16
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	3304      	adds	r3, #4
 8009c80:	e00b      	b.n	8009c9a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
 8009c84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c88:	4613      	mov	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	4413      	add	r3, r2
 8009c98:	3304      	adds	r3, #4
 8009c9a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c9c:	7bbb      	ldrb	r3, [r7, #14]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <USBD_StdEPReq+0x2d8>
 8009ca2:	7bbb      	ldrb	r3, [r7, #14]
 8009ca4:	2b80      	cmp	r3, #128	@ 0x80
 8009ca6:	d103      	bne.n	8009cb0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	2200      	movs	r2, #0
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	e00e      	b.n	8009cce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009cb0:	7bbb      	ldrb	r3, [r7, #14]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f004 fe67 	bl	800e988 <USBD_LL_IsStallEP>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	601a      	str	r2, [r3, #0]
 8009cc6:	e002      	b.n	8009cce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fc07 	bl	800a4e8 <USBD_CtlSendData>
              break;
 8009cda:	e004      	b.n	8009ce6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fb85 	bl	800a3ee <USBD_CtlError>
              break;
 8009ce4:	bf00      	nop
          }
          break;
 8009ce6:	e004      	b.n	8009cf2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fb7f 	bl	800a3ee <USBD_CtlError>
          break;
 8009cf0:	bf00      	nop
      }
      break;
 8009cf2:	e005      	b.n	8009d00 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009cf4:	6839      	ldr	r1, [r7, #0]
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fb79 	bl	800a3ee <USBD_CtlError>
      break;
 8009cfc:	e000      	b.n	8009d00 <USBD_StdEPReq+0x330>
      break;
 8009cfe:	bf00      	nop
  }

  return ret;
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
	...

08009d0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	885b      	ldrh	r3, [r3, #2]
 8009d26:	0a1b      	lsrs	r3, r3, #8
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	2b0e      	cmp	r3, #14
 8009d2e:	f200 8152 	bhi.w	8009fd6 <USBD_GetDescriptor+0x2ca>
 8009d32:	a201      	add	r2, pc, #4	@ (adr r2, 8009d38 <USBD_GetDescriptor+0x2c>)
 8009d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d38:	08009da9 	.word	0x08009da9
 8009d3c:	08009dc1 	.word	0x08009dc1
 8009d40:	08009e01 	.word	0x08009e01
 8009d44:	08009fd7 	.word	0x08009fd7
 8009d48:	08009fd7 	.word	0x08009fd7
 8009d4c:	08009f77 	.word	0x08009f77
 8009d50:	08009fa3 	.word	0x08009fa3
 8009d54:	08009fd7 	.word	0x08009fd7
 8009d58:	08009fd7 	.word	0x08009fd7
 8009d5c:	08009fd7 	.word	0x08009fd7
 8009d60:	08009fd7 	.word	0x08009fd7
 8009d64:	08009fd7 	.word	0x08009fd7
 8009d68:	08009fd7 	.word	0x08009fd7
 8009d6c:	08009fd7 	.word	0x08009fd7
 8009d70:	08009d75 	.word	0x08009d75
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d7a:	69db      	ldr	r3, [r3, #28]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00b      	beq.n	8009d98 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	7c12      	ldrb	r2, [r2, #16]
 8009d8c:	f107 0108 	add.w	r1, r7, #8
 8009d90:	4610      	mov	r0, r2
 8009d92:	4798      	blx	r3
 8009d94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d96:	e126      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fb27 	bl	800a3ee <USBD_CtlError>
        err++;
 8009da0:	7afb      	ldrb	r3, [r7, #11]
 8009da2:	3301      	adds	r3, #1
 8009da4:	72fb      	strb	r3, [r7, #11]
      break;
 8009da6:	e11e      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	7c12      	ldrb	r2, [r2, #16]
 8009db4:	f107 0108 	add.w	r1, r7, #8
 8009db8:	4610      	mov	r0, r2
 8009dba:	4798      	blx	r3
 8009dbc:	60f8      	str	r0, [r7, #12]
      break;
 8009dbe:	e112      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	7c1b      	ldrb	r3, [r3, #16]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10d      	bne.n	8009de4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dd0:	f107 0208 	add.w	r2, r7, #8
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	4798      	blx	r3
 8009dd8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	2202      	movs	r2, #2
 8009de0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009de2:	e100      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dec:	f107 0208 	add.w	r2, r7, #8
 8009df0:	4610      	mov	r0, r2
 8009df2:	4798      	blx	r3
 8009df4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	701a      	strb	r2, [r3, #0]
      break;
 8009dfe:	e0f2      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	885b      	ldrh	r3, [r3, #2]
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b05      	cmp	r3, #5
 8009e08:	f200 80ac 	bhi.w	8009f64 <USBD_GetDescriptor+0x258>
 8009e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e14 <USBD_GetDescriptor+0x108>)
 8009e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e12:	bf00      	nop
 8009e14:	08009e2d 	.word	0x08009e2d
 8009e18:	08009e61 	.word	0x08009e61
 8009e1c:	08009e95 	.word	0x08009e95
 8009e20:	08009ec9 	.word	0x08009ec9
 8009e24:	08009efd 	.word	0x08009efd
 8009e28:	08009f31 	.word	0x08009f31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00b      	beq.n	8009e50 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	7c12      	ldrb	r2, [r2, #16]
 8009e44:	f107 0108 	add.w	r1, r7, #8
 8009e48:	4610      	mov	r0, r2
 8009e4a:	4798      	blx	r3
 8009e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e4e:	e091      	b.n	8009f74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 facb 	bl	800a3ee <USBD_CtlError>
            err++;
 8009e58:	7afb      	ldrb	r3, [r7, #11]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e5e:	e089      	b.n	8009f74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00b      	beq.n	8009e84 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	7c12      	ldrb	r2, [r2, #16]
 8009e78:	f107 0108 	add.w	r1, r7, #8
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	4798      	blx	r3
 8009e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e82:	e077      	b.n	8009f74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fab1 	bl	800a3ee <USBD_CtlError>
            err++;
 8009e8c:	7afb      	ldrb	r3, [r7, #11]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	72fb      	strb	r3, [r7, #11]
          break;
 8009e92:	e06f      	b.n	8009f74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00b      	beq.n	8009eb8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	7c12      	ldrb	r2, [r2, #16]
 8009eac:	f107 0108 	add.w	r1, r7, #8
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	4798      	blx	r3
 8009eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eb6:	e05d      	b.n	8009f74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fa97 	bl	800a3ee <USBD_CtlError>
            err++;
 8009ec0:	7afb      	ldrb	r3, [r7, #11]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ec6:	e055      	b.n	8009f74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00b      	beq.n	8009eec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	7c12      	ldrb	r2, [r2, #16]
 8009ee0:	f107 0108 	add.w	r1, r7, #8
 8009ee4:	4610      	mov	r0, r2
 8009ee6:	4798      	blx	r3
 8009ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eea:	e043      	b.n	8009f74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009eec:	6839      	ldr	r1, [r7, #0]
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fa7d 	bl	800a3ee <USBD_CtlError>
            err++;
 8009ef4:	7afb      	ldrb	r3, [r7, #11]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8009efa:	e03b      	b.n	8009f74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f02:	695b      	ldr	r3, [r3, #20]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00b      	beq.n	8009f20 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	7c12      	ldrb	r2, [r2, #16]
 8009f14:	f107 0108 	add.w	r1, r7, #8
 8009f18:	4610      	mov	r0, r2
 8009f1a:	4798      	blx	r3
 8009f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f1e:	e029      	b.n	8009f74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f20:	6839      	ldr	r1, [r7, #0]
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fa63 	bl	800a3ee <USBD_CtlError>
            err++;
 8009f28:	7afb      	ldrb	r3, [r7, #11]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f2e:	e021      	b.n	8009f74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00b      	beq.n	8009f54 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	7c12      	ldrb	r2, [r2, #16]
 8009f48:	f107 0108 	add.w	r1, r7, #8
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	4798      	blx	r3
 8009f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f52:	e00f      	b.n	8009f74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f54:	6839      	ldr	r1, [r7, #0]
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 fa49 	bl	800a3ee <USBD_CtlError>
            err++;
 8009f5c:	7afb      	ldrb	r3, [r7, #11]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	72fb      	strb	r3, [r7, #11]
          break;
 8009f62:	e007      	b.n	8009f74 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fa41 	bl	800a3ee <USBD_CtlError>
          err++;
 8009f6c:	7afb      	ldrb	r3, [r7, #11]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009f72:	bf00      	nop
      }
      break;
 8009f74:	e037      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	7c1b      	ldrb	r3, [r3, #16]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d109      	bne.n	8009f92 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f86:	f107 0208 	add.w	r2, r7, #8
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	4798      	blx	r3
 8009f8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f90:	e029      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fa2a 	bl	800a3ee <USBD_CtlError>
        err++;
 8009f9a:	7afb      	ldrb	r3, [r7, #11]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	72fb      	strb	r3, [r7, #11]
      break;
 8009fa0:	e021      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	7c1b      	ldrb	r3, [r3, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10d      	bne.n	8009fc6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fb2:	f107 0208 	add.w	r2, r7, #8
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	4798      	blx	r3
 8009fba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	2207      	movs	r2, #7
 8009fc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fc4:	e00f      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fa10 	bl	800a3ee <USBD_CtlError>
        err++;
 8009fce:	7afb      	ldrb	r3, [r7, #11]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	72fb      	strb	r3, [r7, #11]
      break;
 8009fd4:	e007      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 fa08 	bl	800a3ee <USBD_CtlError>
      err++;
 8009fde:	7afb      	ldrb	r3, [r7, #11]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	72fb      	strb	r3, [r7, #11]
      break;
 8009fe4:	bf00      	nop
  }

  if (err != 0U)
 8009fe6:	7afb      	ldrb	r3, [r7, #11]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d11e      	bne.n	800a02a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	88db      	ldrh	r3, [r3, #6]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d016      	beq.n	800a022 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009ff4:	893b      	ldrh	r3, [r7, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00e      	beq.n	800a018 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	88da      	ldrh	r2, [r3, #6]
 8009ffe:	893b      	ldrh	r3, [r7, #8]
 800a000:	4293      	cmp	r3, r2
 800a002:	bf28      	it	cs
 800a004:	4613      	movcs	r3, r2
 800a006:	b29b      	uxth	r3, r3
 800a008:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a00a:	893b      	ldrh	r3, [r7, #8]
 800a00c:	461a      	mov	r2, r3
 800a00e:	68f9      	ldr	r1, [r7, #12]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fa69 	bl	800a4e8 <USBD_CtlSendData>
 800a016:	e009      	b.n	800a02c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f9e7 	bl	800a3ee <USBD_CtlError>
 800a020:	e004      	b.n	800a02c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 faba 	bl	800a59c <USBD_CtlSendStatus>
 800a028:	e000      	b.n	800a02c <USBD_GetDescriptor+0x320>
    return;
 800a02a:	bf00      	nop
  }
}
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop

0800a034 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	889b      	ldrh	r3, [r3, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d131      	bne.n	800a0aa <USBD_SetAddress+0x76>
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	88db      	ldrh	r3, [r3, #6]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d12d      	bne.n	800a0aa <USBD_SetAddress+0x76>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	885b      	ldrh	r3, [r3, #2]
 800a052:	2b7f      	cmp	r3, #127	@ 0x7f
 800a054:	d829      	bhi.n	800a0aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	885b      	ldrh	r3, [r3, #2]
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a060:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b03      	cmp	r3, #3
 800a06c:	d104      	bne.n	800a078 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f9bc 	bl	800a3ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a076:	e01d      	b.n	800a0b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	7bfa      	ldrb	r2, [r7, #15]
 800a07c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a080:	7bfb      	ldrb	r3, [r7, #15]
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f004 fcab 	bl	800e9e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fa86 	bl	800a59c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a090:	7bfb      	ldrb	r3, [r7, #15]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d004      	beq.n	800a0a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2202      	movs	r2, #2
 800a09a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a09e:	e009      	b.n	800a0b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0a8:	e004      	b.n	800a0b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a0aa:	6839      	ldr	r1, [r7, #0]
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 f99e 	bl	800a3ee <USBD_CtlError>
  }
}
 800a0b2:	bf00      	nop
 800a0b4:	bf00      	nop
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	885b      	ldrh	r3, [r3, #2]
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	4b4e      	ldr	r3, [pc, #312]	@ (800a20c <USBD_SetConfig+0x150>)
 800a0d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0d4:	4b4d      	ldr	r3, [pc, #308]	@ (800a20c <USBD_SetConfig+0x150>)
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d905      	bls.n	800a0e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f985 	bl	800a3ee <USBD_CtlError>
    return USBD_FAIL;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e08c      	b.n	800a202 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d002      	beq.n	800a0fa <USBD_SetConfig+0x3e>
 800a0f4:	2b03      	cmp	r3, #3
 800a0f6:	d029      	beq.n	800a14c <USBD_SetConfig+0x90>
 800a0f8:	e075      	b.n	800a1e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a0fa:	4b44      	ldr	r3, [pc, #272]	@ (800a20c <USBD_SetConfig+0x150>)
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d020      	beq.n	800a144 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a102:	4b42      	ldr	r3, [pc, #264]	@ (800a20c <USBD_SetConfig+0x150>)
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a10c:	4b3f      	ldr	r3, [pc, #252]	@ (800a20c <USBD_SetConfig+0x150>)
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	4619      	mov	r1, r3
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7ff f84b 	bl	80091ae <USBD_SetClassConfig>
 800a118:	4603      	mov	r3, r0
 800a11a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a11c:	7bfb      	ldrb	r3, [r7, #15]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d008      	beq.n	800a134 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a122:	6839      	ldr	r1, [r7, #0]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 f962 	bl	800a3ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2202      	movs	r2, #2
 800a12e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a132:	e065      	b.n	800a200 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fa31 	bl	800a59c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2203      	movs	r2, #3
 800a13e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a142:	e05d      	b.n	800a200 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fa29 	bl	800a59c <USBD_CtlSendStatus>
      break;
 800a14a:	e059      	b.n	800a200 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a14c:	4b2f      	ldr	r3, [pc, #188]	@ (800a20c <USBD_SetConfig+0x150>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d112      	bne.n	800a17a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2202      	movs	r2, #2
 800a158:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a15c:	4b2b      	ldr	r3, [pc, #172]	@ (800a20c <USBD_SetConfig+0x150>)
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	461a      	mov	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a166:	4b29      	ldr	r3, [pc, #164]	@ (800a20c <USBD_SetConfig+0x150>)
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	4619      	mov	r1, r3
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff f83a 	bl	80091e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fa12 	bl	800a59c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a178:	e042      	b.n	800a200 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a17a:	4b24      	ldr	r3, [pc, #144]	@ (800a20c <USBD_SetConfig+0x150>)
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	461a      	mov	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	429a      	cmp	r2, r3
 800a186:	d02a      	beq.n	800a1de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff f828 	bl	80091e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a196:	4b1d      	ldr	r3, [pc, #116]	@ (800a20c <USBD_SetConfig+0x150>)
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	461a      	mov	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1a0:	4b1a      	ldr	r3, [pc, #104]	@ (800a20c <USBD_SetConfig+0x150>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7ff f801 	bl	80091ae <USBD_SetClassConfig>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00f      	beq.n	800a1d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a1b6:	6839      	ldr	r1, [r7, #0]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f918 	bl	800a3ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7ff f80d 	bl	80091e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a1d4:	e014      	b.n	800a200 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f9e0 	bl	800a59c <USBD_CtlSendStatus>
      break;
 800a1dc:	e010      	b.n	800a200 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f9dc 	bl	800a59c <USBD_CtlSendStatus>
      break;
 800a1e4:	e00c      	b.n	800a200 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f900 	bl	800a3ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a1ee:	4b07      	ldr	r3, [pc, #28]	@ (800a20c <USBD_SetConfig+0x150>)
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7fe fff6 	bl	80091e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a1fe:	bf00      	nop
  }

  return ret;
 800a200:	7bfb      	ldrb	r3, [r7, #15]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	200002f4 	.word	0x200002f4

0800a210 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	88db      	ldrh	r3, [r3, #6]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d004      	beq.n	800a22c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a222:	6839      	ldr	r1, [r7, #0]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f8e2 	bl	800a3ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a22a:	e023      	b.n	800a274 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b02      	cmp	r3, #2
 800a236:	dc02      	bgt.n	800a23e <USBD_GetConfig+0x2e>
 800a238:	2b00      	cmp	r3, #0
 800a23a:	dc03      	bgt.n	800a244 <USBD_GetConfig+0x34>
 800a23c:	e015      	b.n	800a26a <USBD_GetConfig+0x5a>
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d00b      	beq.n	800a25a <USBD_GetConfig+0x4a>
 800a242:	e012      	b.n	800a26a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3308      	adds	r3, #8
 800a24e:	2201      	movs	r2, #1
 800a250:	4619      	mov	r1, r3
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f948 	bl	800a4e8 <USBD_CtlSendData>
        break;
 800a258:	e00c      	b.n	800a274 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3304      	adds	r3, #4
 800a25e:	2201      	movs	r2, #1
 800a260:	4619      	mov	r1, r3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f940 	bl	800a4e8 <USBD_CtlSendData>
        break;
 800a268:	e004      	b.n	800a274 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f8be 	bl	800a3ee <USBD_CtlError>
        break;
 800a272:	bf00      	nop
}
 800a274:	bf00      	nop
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	3b01      	subs	r3, #1
 800a290:	2b02      	cmp	r3, #2
 800a292:	d81e      	bhi.n	800a2d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	88db      	ldrh	r3, [r3, #6]
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d004      	beq.n	800a2a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f8a5 	bl	800a3ee <USBD_CtlError>
        break;
 800a2a4:	e01a      	b.n	800a2dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d005      	beq.n	800a2c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f043 0202 	orr.w	r2, r3, #2
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	330c      	adds	r3, #12
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f90c 	bl	800a4e8 <USBD_CtlSendData>
      break;
 800a2d0:	e004      	b.n	800a2dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 f88a 	bl	800a3ee <USBD_CtlError>
      break;
 800a2da:	bf00      	nop
  }
}
 800a2dc:	bf00      	nop
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	885b      	ldrh	r3, [r3, #2]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d107      	bne.n	800a306 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f94c 	bl	800a59c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a304:	e013      	b.n	800a32e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	885b      	ldrh	r3, [r3, #2]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d10b      	bne.n	800a326 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	889b      	ldrh	r3, [r3, #4]
 800a312:	0a1b      	lsrs	r3, r3, #8
 800a314:	b29b      	uxth	r3, r3
 800a316:	b2da      	uxtb	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f93c 	bl	800a59c <USBD_CtlSendStatus>
}
 800a324:	e003      	b.n	800a32e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 f860 	bl	800a3ee <USBD_CtlError>
}
 800a32e:	bf00      	nop
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b082      	sub	sp, #8
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a346:	b2db      	uxtb	r3, r3
 800a348:	3b01      	subs	r3, #1
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d80b      	bhi.n	800a366 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	885b      	ldrh	r3, [r3, #2]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d10c      	bne.n	800a370 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f91c 	bl	800a59c <USBD_CtlSendStatus>
      }
      break;
 800a364:	e004      	b.n	800a370 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a366:	6839      	ldr	r1, [r7, #0]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f840 	bl	800a3ee <USBD_CtlError>
      break;
 800a36e:	e000      	b.n	800a372 <USBD_ClrFeature+0x3c>
      break;
 800a370:	bf00      	nop
  }
}
 800a372:	bf00      	nop
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b084      	sub	sp, #16
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	781a      	ldrb	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3301      	adds	r3, #1
 800a394:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	781a      	ldrb	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f7ff fa16 	bl	80097d6 <SWAPBYTE>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f7ff fa09 	bl	80097d6 <SWAPBYTE>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f7ff f9fc 	bl	80097d6 <SWAPBYTE>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	80da      	strh	r2, [r3, #6]
}
 800a3e6:	bf00      	nop
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b082      	sub	sp, #8
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3f8:	2180      	movs	r1, #128	@ 0x80
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f004 fa86 	bl	800e90c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a400:	2100      	movs	r1, #0
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f004 fa82 	bl	800e90c <USBD_LL_StallEP>
}
 800a408:	bf00      	nop
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a41c:	2300      	movs	r3, #0
 800a41e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d042      	beq.n	800a4ac <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a42a:	6938      	ldr	r0, [r7, #16]
 800a42c:	f000 f842 	bl	800a4b4 <USBD_GetLen>
 800a430:	4603      	mov	r3, r0
 800a432:	3301      	adds	r3, #1
 800a434:	005b      	lsls	r3, r3, #1
 800a436:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a43a:	d808      	bhi.n	800a44e <USBD_GetString+0x3e>
 800a43c:	6938      	ldr	r0, [r7, #16]
 800a43e:	f000 f839 	bl	800a4b4 <USBD_GetLen>
 800a442:	4603      	mov	r3, r0
 800a444:	3301      	adds	r3, #1
 800a446:	b29b      	uxth	r3, r3
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	e001      	b.n	800a452 <USBD_GetString+0x42>
 800a44e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a456:	7dfb      	ldrb	r3, [r7, #23]
 800a458:	68ba      	ldr	r2, [r7, #8]
 800a45a:	4413      	add	r3, r2
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	7812      	ldrb	r2, [r2, #0]
 800a460:	701a      	strb	r2, [r3, #0]
  idx++;
 800a462:	7dfb      	ldrb	r3, [r7, #23]
 800a464:	3301      	adds	r3, #1
 800a466:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a468:	7dfb      	ldrb	r3, [r7, #23]
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	4413      	add	r3, r2
 800a46e:	2203      	movs	r2, #3
 800a470:	701a      	strb	r2, [r3, #0]
  idx++;
 800a472:	7dfb      	ldrb	r3, [r7, #23]
 800a474:	3301      	adds	r3, #1
 800a476:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a478:	e013      	b.n	800a4a2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a47a:	7dfb      	ldrb	r3, [r7, #23]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	4413      	add	r3, r2
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	7812      	ldrb	r2, [r2, #0]
 800a484:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	3301      	adds	r3, #1
 800a48a:	613b      	str	r3, [r7, #16]
    idx++;
 800a48c:	7dfb      	ldrb	r3, [r7, #23]
 800a48e:	3301      	adds	r3, #1
 800a490:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a492:	7dfb      	ldrb	r3, [r7, #23]
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	4413      	add	r3, r2
 800a498:	2200      	movs	r2, #0
 800a49a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a49c:	7dfb      	ldrb	r3, [r7, #23]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1e7      	bne.n	800a47a <USBD_GetString+0x6a>
 800a4aa:	e000      	b.n	800a4ae <USBD_GetString+0x9e>
    return;
 800a4ac:	bf00      	nop
  }
}
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a4c4:	e005      	b.n	800a4d2 <USBD_GetLen+0x1e>
  {
    len++;
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1f5      	bne.n	800a4c6 <USBD_GetLen+0x12>
  }

  return len;
 800a4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3714      	adds	r7, #20
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2202      	movs	r2, #2
 800a4f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	68ba      	ldr	r2, [r7, #8]
 800a50c:	2100      	movs	r1, #0
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f004 fa85 	bl	800ea1e <USBD_LL_Transmit>

  return USBD_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b084      	sub	sp, #16
 800a522:	af00      	add	r7, sp, #0
 800a524:	60f8      	str	r0, [r7, #12]
 800a526:	60b9      	str	r1, [r7, #8]
 800a528:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	2100      	movs	r1, #0
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f004 fa74 	bl	800ea1e <USBD_LL_Transmit>

  return USBD_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2203      	movs	r2, #3
 800a550:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	2100      	movs	r1, #0
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f004 fa78 	bl	800ea60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b084      	sub	sp, #16
 800a57e:	af00      	add	r7, sp, #0
 800a580:	60f8      	str	r0, [r7, #12]
 800a582:	60b9      	str	r1, [r7, #8]
 800a584:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	2100      	movs	r1, #0
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f004 fa67 	bl	800ea60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2204      	movs	r2, #4
 800a5a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f004 fa33 	bl	800ea1e <USBD_LL_Transmit>

  return USBD_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2205      	movs	r2, #5
 800a5ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	2100      	movs	r1, #0
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f004 fa41 	bl	800ea60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <__NVIC_SetPriority>:
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	6039      	str	r1, [r7, #0]
 800a5f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	db0a      	blt.n	800a612 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	490c      	ldr	r1, [pc, #48]	@ (800a634 <__NVIC_SetPriority+0x4c>)
 800a602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a606:	0112      	lsls	r2, r2, #4
 800a608:	b2d2      	uxtb	r2, r2
 800a60a:	440b      	add	r3, r1
 800a60c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a610:	e00a      	b.n	800a628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	b2da      	uxtb	r2, r3
 800a616:	4908      	ldr	r1, [pc, #32]	@ (800a638 <__NVIC_SetPriority+0x50>)
 800a618:	79fb      	ldrb	r3, [r7, #7]
 800a61a:	f003 030f 	and.w	r3, r3, #15
 800a61e:	3b04      	subs	r3, #4
 800a620:	0112      	lsls	r2, r2, #4
 800a622:	b2d2      	uxtb	r2, r2
 800a624:	440b      	add	r3, r1
 800a626:	761a      	strb	r2, [r3, #24]
}
 800a628:	bf00      	nop
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	e000e100 	.word	0xe000e100
 800a638:	e000ed00 	.word	0xe000ed00

0800a63c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a63c:	b580      	push	{r7, lr}
 800a63e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a640:	4b05      	ldr	r3, [pc, #20]	@ (800a658 <SysTick_Handler+0x1c>)
 800a642:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a644:	f002 f9ec 	bl	800ca20 <xTaskGetSchedulerState>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d001      	beq.n	800a652 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a64e:	f003 faeb 	bl	800dc28 <xPortSysTickHandler>
  }
}
 800a652:	bf00      	nop
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	e000e010 	.word	0xe000e010

0800a65c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a65c:	b580      	push	{r7, lr}
 800a65e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a660:	2100      	movs	r1, #0
 800a662:	f06f 0004 	mvn.w	r0, #4
 800a666:	f7ff ffbf 	bl	800a5e8 <__NVIC_SetPriority>
#endif
}
 800a66a:	bf00      	nop
 800a66c:	bd80      	pop	{r7, pc}
	...

0800a670 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a676:	f3ef 8305 	mrs	r3, IPSR
 800a67a:	603b      	str	r3, [r7, #0]
  return(result);
 800a67c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d003      	beq.n	800a68a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a682:	f06f 0305 	mvn.w	r3, #5
 800a686:	607b      	str	r3, [r7, #4]
 800a688:	e00c      	b.n	800a6a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a68a:	4b0a      	ldr	r3, [pc, #40]	@ (800a6b4 <osKernelInitialize+0x44>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d105      	bne.n	800a69e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a692:	4b08      	ldr	r3, [pc, #32]	@ (800a6b4 <osKernelInitialize+0x44>)
 800a694:	2201      	movs	r2, #1
 800a696:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a698:	2300      	movs	r3, #0
 800a69a:	607b      	str	r3, [r7, #4]
 800a69c:	e002      	b.n	800a6a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a69e:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a6a4:	687b      	ldr	r3, [r7, #4]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	200002f8 	.word	0x200002f8

0800a6b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6be:	f3ef 8305 	mrs	r3, IPSR
 800a6c2:	603b      	str	r3, [r7, #0]
  return(result);
 800a6c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a6ca:	f06f 0305 	mvn.w	r3, #5
 800a6ce:	607b      	str	r3, [r7, #4]
 800a6d0:	e010      	b.n	800a6f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a6d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a700 <osKernelStart+0x48>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d109      	bne.n	800a6ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a6da:	f7ff ffbf 	bl	800a65c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a6de:	4b08      	ldr	r3, [pc, #32]	@ (800a700 <osKernelStart+0x48>)
 800a6e0:	2202      	movs	r2, #2
 800a6e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a6e4:	f001 fd28 	bl	800c138 <vTaskStartScheduler>
      stat = osOK;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	607b      	str	r3, [r7, #4]
 800a6ec:	e002      	b.n	800a6f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a6f4:	687b      	ldr	r3, [r7, #4]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	200002f8 	.word	0x200002f8

0800a704 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a704:	b580      	push	{r7, lr}
 800a706:	b08e      	sub	sp, #56	@ 0x38
 800a708:	af04      	add	r7, sp, #16
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a710:	2300      	movs	r3, #0
 800a712:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a714:	f3ef 8305 	mrs	r3, IPSR
 800a718:	617b      	str	r3, [r7, #20]
  return(result);
 800a71a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d17e      	bne.n	800a81e <osThreadNew+0x11a>
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d07b      	beq.n	800a81e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a726:	2380      	movs	r3, #128	@ 0x80
 800a728:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a72a:	2318      	movs	r3, #24
 800a72c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a72e:	2300      	movs	r3, #0
 800a730:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a732:	f04f 33ff 	mov.w	r3, #4294967295
 800a736:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d045      	beq.n	800a7ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d002      	beq.n	800a74c <osThreadNew+0x48>
        name = attr->name;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d008      	beq.n	800a772 <osThreadNew+0x6e>
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	2b38      	cmp	r3, #56	@ 0x38
 800a764:	d805      	bhi.n	800a772 <osThreadNew+0x6e>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	f003 0301 	and.w	r3, r3, #1
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d001      	beq.n	800a776 <osThreadNew+0x72>
        return (NULL);
 800a772:	2300      	movs	r3, #0
 800a774:	e054      	b.n	800a820 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d003      	beq.n	800a786 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	089b      	lsrs	r3, r3, #2
 800a784:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00e      	beq.n	800a7ac <osThreadNew+0xa8>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	2ba7      	cmp	r3, #167	@ 0xa7
 800a794:	d90a      	bls.n	800a7ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d006      	beq.n	800a7ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	695b      	ldr	r3, [r3, #20]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d002      	beq.n	800a7ac <osThreadNew+0xa8>
        mem = 1;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	61bb      	str	r3, [r7, #24]
 800a7aa:	e010      	b.n	800a7ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10c      	bne.n	800a7ce <osThreadNew+0xca>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d108      	bne.n	800a7ce <osThreadNew+0xca>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	691b      	ldr	r3, [r3, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d104      	bne.n	800a7ce <osThreadNew+0xca>
          mem = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	61bb      	str	r3, [r7, #24]
 800a7c8:	e001      	b.n	800a7ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d110      	bne.n	800a7f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7dc:	9202      	str	r2, [sp, #8]
 800a7de:	9301      	str	r3, [sp, #4]
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	6a3a      	ldr	r2, [r7, #32]
 800a7e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f001 fa72 	bl	800bcd4 <xTaskCreateStatic>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	613b      	str	r3, [r7, #16]
 800a7f4:	e013      	b.n	800a81e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d110      	bne.n	800a81e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a7fc:	6a3b      	ldr	r3, [r7, #32]
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	f107 0310 	add.w	r3, r7, #16
 800a804:	9301      	str	r3, [sp, #4]
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f001 fac0 	bl	800bd94 <xTaskCreate>
 800a814:	4603      	mov	r3, r0
 800a816:	2b01      	cmp	r3, #1
 800a818:	d001      	beq.n	800a81e <osThreadNew+0x11a>
            hTask = NULL;
 800a81a:	2300      	movs	r3, #0
 800a81c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a81e:	693b      	ldr	r3, [r7, #16]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3728      	adds	r7, #40	@ 0x28
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800a828:	b580      	push	{r7, lr}
 800a82a:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800a82c:	2000      	movs	r0, #0
 800a82e:	f001 fc0f 	bl	800c050 <vTaskDelete>
#endif
  for (;;);
 800a832:	bf00      	nop
 800a834:	e7fd      	b.n	800a832 <osThreadExit+0xa>
	...

0800a838 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800a838:	b580      	push	{r7, lr}
 800a83a:	b088      	sub	sp, #32
 800a83c:	af02      	add	r7, sp, #8
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <osThreadFlagsSet+0x1a>
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	da03      	bge.n	800a85a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800a852:	f06f 0303 	mvn.w	r3, #3
 800a856:	60fb      	str	r3, [r7, #12]
 800a858:	e035      	b.n	800a8c6 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800a85a:	f04f 33ff 	mov.w	r3, #4294967295
 800a85e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a860:	f3ef 8305 	mrs	r3, IPSR
 800a864:	613b      	str	r3, [r7, #16]
  return(result);
 800a866:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d01f      	beq.n	800a8ac <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800a86c:	2300      	movs	r3, #0
 800a86e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800a870:	f107 0308 	add.w	r3, r7, #8
 800a874:	9300      	str	r3, [sp, #0]
 800a876:	2300      	movs	r3, #0
 800a878:	2201      	movs	r2, #1
 800a87a:	6839      	ldr	r1, [r7, #0]
 800a87c:	6978      	ldr	r0, [r7, #20]
 800a87e:	f002 fb7f 	bl	800cf80 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800a882:	f107 030c 	add.w	r3, r7, #12
 800a886:	2200      	movs	r2, #0
 800a888:	9200      	str	r2, [sp, #0]
 800a88a:	2200      	movs	r2, #0
 800a88c:	2100      	movs	r1, #0
 800a88e:	6978      	ldr	r0, [r7, #20]
 800a890:	f002 fb76 	bl	800cf80 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d015      	beq.n	800a8c6 <osThreadFlagsSet+0x8e>
 800a89a:	4b0d      	ldr	r3, [pc, #52]	@ (800a8d0 <osThreadFlagsSet+0x98>)
 800a89c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8a0:	601a      	str	r2, [r3, #0]
 800a8a2:	f3bf 8f4f 	dsb	sy
 800a8a6:	f3bf 8f6f 	isb	sy
 800a8aa:	e00c      	b.n	800a8c6 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	6839      	ldr	r1, [r7, #0]
 800a8b2:	6978      	ldr	r0, [r7, #20]
 800a8b4:	f002 faa2 	bl	800cdfc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800a8b8:	f107 030c 	add.w	r3, r7, #12
 800a8bc:	2200      	movs	r2, #0
 800a8be:	2100      	movs	r1, #0
 800a8c0:	6978      	ldr	r0, [r7, #20]
 800a8c2:	f002 fa9b 	bl	800cdfc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3718      	adds	r7, #24
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	e000ed04 	.word	0xe000ed04

0800a8d4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b08c      	sub	sp, #48	@ 0x30
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8e0:	f3ef 8305 	mrs	r3, IPSR
 800a8e4:	617b      	str	r3, [r7, #20]
  return(result);
 800a8e6:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d003      	beq.n	800a8f4 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800a8ec:	f06f 0305 	mvn.w	r3, #5
 800a8f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8f2:	e06b      	b.n	800a9cc <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	da03      	bge.n	800a902 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800a8fa:	f06f 0303 	mvn.w	r3, #3
 800a8fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a900:	e064      	b.n	800a9cc <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	f003 0302 	and.w	r3, r3, #2
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d002      	beq.n	800a912 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800a90c:	2300      	movs	r3, #0
 800a90e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a910:	e001      	b.n	800a916 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800a916:	2300      	movs	r3, #0
 800a918:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800a91e:	f001 fd27 	bl	800c370 <xTaskGetTickCount>
 800a922:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800a924:	f107 0210 	add.w	r2, r7, #16
 800a928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a92c:	2000      	movs	r0, #0
 800a92e:	f002 fa05 	bl	800cd3c <xTaskNotifyWait>
 800a932:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d137      	bne.n	800a9aa <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800a93a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	4013      	ands	r3, r2
 800a940:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a946:	4313      	orrs	r3, r2
 800a948:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	f003 0301 	and.w	r3, r3, #1
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00c      	beq.n	800a96e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a958:	4013      	ands	r3, r2
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d032      	beq.n	800a9c6 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d10f      	bne.n	800a986 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a966:	f06f 0302 	mvn.w	r3, #2
 800a96a:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800a96c:	e02e      	b.n	800a9cc <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a972:	4013      	ands	r3, r2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d128      	bne.n	800a9ca <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d103      	bne.n	800a986 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a97e:	f06f 0302 	mvn.w	r3, #2
 800a982:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800a984:	e022      	b.n	800a9cc <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800a986:	f001 fcf3 	bl	800c370 <xTaskGetTickCount>
 800a98a:	4602      	mov	r2, r0
 800a98c:	6a3b      	ldr	r3, [r7, #32]
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800a992:	69ba      	ldr	r2, [r7, #24]
 800a994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a996:	429a      	cmp	r2, r3
 800a998:	d902      	bls.n	800a9a0 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a99e:	e00e      	b.n	800a9be <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800a9a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9a8:	e009      	b.n	800a9be <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d103      	bne.n	800a9b8 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800a9b0:	f06f 0302 	mvn.w	r3, #2
 800a9b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9b6:	e002      	b.n	800a9be <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800a9b8:	f06f 0301 	mvn.w	r3, #1
 800a9bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1af      	bne.n	800a924 <osThreadFlagsWait+0x50>
 800a9c4:	e002      	b.n	800a9cc <osThreadFlagsWait+0xf8>
            break;
 800a9c6:	bf00      	nop
 800a9c8:	e000      	b.n	800a9cc <osThreadFlagsWait+0xf8>
            break;
 800a9ca:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800a9cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3730      	adds	r7, #48	@ 0x30
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b088      	sub	sp, #32
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9e2:	f3ef 8305 	mrs	r3, IPSR
 800a9e6:	60bb      	str	r3, [r7, #8]
  return(result);
 800a9e8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d174      	bne.n	800aad8 <osMutexNew+0x102>
    if (attr != NULL) {
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d003      	beq.n	800a9fc <osMutexNew+0x26>
      type = attr->attr_bits;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	61bb      	str	r3, [r7, #24]
 800a9fa:	e001      	b.n	800aa00 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	f003 0301 	and.w	r3, r3, #1
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d002      	beq.n	800aa10 <osMutexNew+0x3a>
      rmtx = 1U;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	617b      	str	r3, [r7, #20]
 800aa0e:	e001      	b.n	800aa14 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800aa10:	2300      	movs	r3, #0
 800aa12:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	f003 0308 	and.w	r3, r3, #8
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d15c      	bne.n	800aad8 <osMutexNew+0x102>
      mem = -1;
 800aa1e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa22:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d015      	beq.n	800aa56 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d006      	beq.n	800aa40 <osMutexNew+0x6a>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	2b4f      	cmp	r3, #79	@ 0x4f
 800aa38:	d902      	bls.n	800aa40 <osMutexNew+0x6a>
          mem = 1;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	613b      	str	r3, [r7, #16]
 800aa3e:	e00c      	b.n	800aa5a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d108      	bne.n	800aa5a <osMutexNew+0x84>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d104      	bne.n	800aa5a <osMutexNew+0x84>
            mem = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	613b      	str	r3, [r7, #16]
 800aa54:	e001      	b.n	800aa5a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800aa56:	2300      	movs	r3, #0
 800aa58:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d112      	bne.n	800aa86 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d007      	beq.n	800aa76 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	2004      	movs	r0, #4
 800aa6e:	f000 fb92 	bl	800b196 <xQueueCreateMutexStatic>
 800aa72:	61f8      	str	r0, [r7, #28]
 800aa74:	e016      	b.n	800aaa4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	2001      	movs	r0, #1
 800aa7e:	f000 fb8a 	bl	800b196 <xQueueCreateMutexStatic>
 800aa82:	61f8      	str	r0, [r7, #28]
 800aa84:	e00e      	b.n	800aaa4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10b      	bne.n	800aaa4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d004      	beq.n	800aa9c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800aa92:	2004      	movs	r0, #4
 800aa94:	f000 fb67 	bl	800b166 <xQueueCreateMutex>
 800aa98:	61f8      	str	r0, [r7, #28]
 800aa9a:	e003      	b.n	800aaa4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800aa9c:	2001      	movs	r0, #1
 800aa9e:	f000 fb62 	bl	800b166 <xQueueCreateMutex>
 800aaa2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00c      	beq.n	800aac4 <osMutexNew+0xee>
        if (attr != NULL) {
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d003      	beq.n	800aab8 <osMutexNew+0xe2>
          name = attr->name;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	e001      	b.n	800aabc <osMutexNew+0xe6>
        } else {
          name = NULL;
 800aab8:	2300      	movs	r3, #0
 800aaba:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800aabc:	68f9      	ldr	r1, [r7, #12]
 800aabe:	69f8      	ldr	r0, [r7, #28]
 800aac0:	f001 f8aa 	bl	800bc18 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d006      	beq.n	800aad8 <osMutexNew+0x102>
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d003      	beq.n	800aad8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	f043 0301 	orr.w	r3, r3, #1
 800aad6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800aad8:	69fb      	ldr	r3, [r7, #28]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3720      	adds	r7, #32
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b086      	sub	sp, #24
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f023 0301 	bic.w	r3, r3, #1
 800aaf2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800aafc:	2300      	movs	r3, #0
 800aafe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab00:	f3ef 8305 	mrs	r3, IPSR
 800ab04:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab06:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d003      	beq.n	800ab14 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800ab0c:	f06f 0305 	mvn.w	r3, #5
 800ab10:	617b      	str	r3, [r7, #20]
 800ab12:	e02c      	b.n	800ab6e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d103      	bne.n	800ab22 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800ab1a:	f06f 0303 	mvn.w	r3, #3
 800ab1e:	617b      	str	r3, [r7, #20]
 800ab20:	e025      	b.n	800ab6e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d011      	beq.n	800ab4c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	6938      	ldr	r0, [r7, #16]
 800ab2c:	f000 fb83 	bl	800b236 <xQueueTakeMutexRecursive>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d01b      	beq.n	800ab6e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d003      	beq.n	800ab44 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ab3c:	f06f 0301 	mvn.w	r3, #1
 800ab40:	617b      	str	r3, [r7, #20]
 800ab42:	e014      	b.n	800ab6e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ab44:	f06f 0302 	mvn.w	r3, #2
 800ab48:	617b      	str	r3, [r7, #20]
 800ab4a:	e010      	b.n	800ab6e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ab4c:	6839      	ldr	r1, [r7, #0]
 800ab4e:	6938      	ldr	r0, [r7, #16]
 800ab50:	f000 fe2a 	bl	800b7a8 <xQueueSemaphoreTake>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d009      	beq.n	800ab6e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d003      	beq.n	800ab68 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ab60:	f06f 0301 	mvn.w	r3, #1
 800ab64:	617b      	str	r3, [r7, #20]
 800ab66:	e002      	b.n	800ab6e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ab68:	f06f 0302 	mvn.w	r3, #2
 800ab6c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ab6e:	697b      	ldr	r3, [r7, #20]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3718      	adds	r7, #24
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f023 0301 	bic.w	r3, r3, #1
 800ab86:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ab90:	2300      	movs	r3, #0
 800ab92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab94:	f3ef 8305 	mrs	r3, IPSR
 800ab98:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab9a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d003      	beq.n	800aba8 <osMutexRelease+0x30>
    stat = osErrorISR;
 800aba0:	f06f 0305 	mvn.w	r3, #5
 800aba4:	617b      	str	r3, [r7, #20]
 800aba6:	e01f      	b.n	800abe8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d103      	bne.n	800abb6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800abae:	f06f 0303 	mvn.w	r3, #3
 800abb2:	617b      	str	r3, [r7, #20]
 800abb4:	e018      	b.n	800abe8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d009      	beq.n	800abd0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800abbc:	6938      	ldr	r0, [r7, #16]
 800abbe:	f000 fb05 	bl	800b1cc <xQueueGiveMutexRecursive>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d00f      	beq.n	800abe8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800abc8:	f06f 0302 	mvn.w	r3, #2
 800abcc:	617b      	str	r3, [r7, #20]
 800abce:	e00b      	b.n	800abe8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800abd0:	2300      	movs	r3, #0
 800abd2:	2200      	movs	r2, #0
 800abd4:	2100      	movs	r1, #0
 800abd6:	6938      	ldr	r0, [r7, #16]
 800abd8:	f000 fb64 	bl	800b2a4 <xQueueGenericSend>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d002      	beq.n	800abe8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800abe2:	f06f 0302 	mvn.w	r3, #2
 800abe6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800abe8:	697b      	ldr	r3, [r7, #20]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3718      	adds	r7, #24
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b08a      	sub	sp, #40	@ 0x28
 800abf6:	af02      	add	r7, sp, #8
 800abf8:	60f8      	str	r0, [r7, #12]
 800abfa:	60b9      	str	r1, [r7, #8]
 800abfc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800abfe:	2300      	movs	r3, #0
 800ac00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac02:	f3ef 8305 	mrs	r3, IPSR
 800ac06:	613b      	str	r3, [r7, #16]
  return(result);
 800ac08:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d15f      	bne.n	800acce <osMessageQueueNew+0xdc>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d05c      	beq.n	800acce <osMessageQueueNew+0xdc>
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d059      	beq.n	800acce <osMessageQueueNew+0xdc>
    mem = -1;
 800ac1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac1e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d029      	beq.n	800ac7a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d012      	beq.n	800ac54 <osMessageQueueNew+0x62>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	2b4f      	cmp	r3, #79	@ 0x4f
 800ac34:	d90e      	bls.n	800ac54 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00a      	beq.n	800ac54 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	695a      	ldr	r2, [r3, #20]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	68b9      	ldr	r1, [r7, #8]
 800ac46:	fb01 f303 	mul.w	r3, r1, r3
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d302      	bcc.n	800ac54 <osMessageQueueNew+0x62>
        mem = 1;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	61bb      	str	r3, [r7, #24]
 800ac52:	e014      	b.n	800ac7e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d110      	bne.n	800ac7e <osMessageQueueNew+0x8c>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10c      	bne.n	800ac7e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d108      	bne.n	800ac7e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	695b      	ldr	r3, [r3, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d104      	bne.n	800ac7e <osMessageQueueNew+0x8c>
          mem = 0;
 800ac74:	2300      	movs	r3, #0
 800ac76:	61bb      	str	r3, [r7, #24]
 800ac78:	e001      	b.n	800ac7e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d10b      	bne.n	800ac9c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	691a      	ldr	r2, [r3, #16]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	9100      	str	r1, [sp, #0]
 800ac90:	68b9      	ldr	r1, [r7, #8]
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f000 f972 	bl	800af7c <xQueueGenericCreateStatic>
 800ac98:	61f8      	str	r0, [r7, #28]
 800ac9a:	e008      	b.n	800acae <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d105      	bne.n	800acae <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800aca2:	2200      	movs	r2, #0
 800aca4:	68b9      	ldr	r1, [r7, #8]
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f000 f9e5 	bl	800b076 <xQueueGenericCreate>
 800acac:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00c      	beq.n	800acce <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d003      	beq.n	800acc2 <osMessageQueueNew+0xd0>
        name = attr->name;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	617b      	str	r3, [r7, #20]
 800acc0:	e001      	b.n	800acc6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800acc2:	2300      	movs	r3, #0
 800acc4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800acc6:	6979      	ldr	r1, [r7, #20]
 800acc8:	69f8      	ldr	r0, [r7, #28]
 800acca:	f000 ffa5 	bl	800bc18 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800acce:	69fb      	ldr	r3, [r7, #28]
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3720      	adds	r7, #32
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	4a07      	ldr	r2, [pc, #28]	@ (800ad04 <vApplicationGetIdleTaskMemory+0x2c>)
 800ace8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	4a06      	ldr	r2, [pc, #24]	@ (800ad08 <vApplicationGetIdleTaskMemory+0x30>)
 800acee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2280      	movs	r2, #128	@ 0x80
 800acf4:	601a      	str	r2, [r3, #0]
}
 800acf6:	bf00      	nop
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	200002fc 	.word	0x200002fc
 800ad08:	200003a4 	.word	0x200003a4

0800ad0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ad0c:	b480      	push	{r7}
 800ad0e:	b085      	sub	sp, #20
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	4a07      	ldr	r2, [pc, #28]	@ (800ad38 <vApplicationGetTimerTaskMemory+0x2c>)
 800ad1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	4a06      	ldr	r2, [pc, #24]	@ (800ad3c <vApplicationGetTimerTaskMemory+0x30>)
 800ad22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad2a:	601a      	str	r2, [r3, #0]
}
 800ad2c:	bf00      	nop
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr
 800ad38:	200005a4 	.word	0x200005a4
 800ad3c:	2000064c 	.word	0x2000064c

0800ad40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f103 0208 	add.w	r2, r3, #8
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f04f 32ff 	mov.w	r2, #4294967295
 800ad58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f103 0208 	add.w	r2, r3, #8
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f103 0208 	add.w	r2, r3, #8
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ad74:	bf00      	nop
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad8e:	bf00      	nop
 800ad90:	370c      	adds	r7, #12
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr

0800ad9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad9a:	b480      	push	{r7}
 800ad9c:	b085      	sub	sp, #20
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	689a      	ldr	r2, [r3, #8]
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	683a      	ldr	r2, [r7, #0]
 800adc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	1c5a      	adds	r2, r3, #1
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	601a      	str	r2, [r3, #0]
}
 800add6:	bf00      	nop
 800add8:	3714      	adds	r7, #20
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ade2:	b480      	push	{r7}
 800ade4:	b085      	sub	sp, #20
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf8:	d103      	bne.n	800ae02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	60fb      	str	r3, [r7, #12]
 800ae00:	e00c      	b.n	800ae1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	3308      	adds	r3, #8
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	e002      	b.n	800ae10 <vListInsert+0x2e>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	60fb      	str	r3, [r7, #12]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68ba      	ldr	r2, [r7, #8]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d2f6      	bcs.n	800ae0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	685a      	ldr	r2, [r3, #4]
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	683a      	ldr	r2, [r7, #0]
 800ae36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	1c5a      	adds	r2, r3, #1
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	601a      	str	r2, [r3, #0]
}
 800ae48:	bf00      	nop
 800ae4a:	3714      	adds	r7, #20
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	6892      	ldr	r2, [r2, #8]
 800ae6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	6852      	ldr	r2, [r2, #4]
 800ae74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d103      	bne.n	800ae88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	689a      	ldr	r2, [r3, #8]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	1e5a      	subs	r2, r3, #1
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10b      	bne.n	800aed4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec0:	f383 8811 	msr	BASEPRI, r3
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aece:	bf00      	nop
 800aed0:	bf00      	nop
 800aed2:	e7fd      	b.n	800aed0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aed4:	f002 fe18 	bl	800db08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aee0:	68f9      	ldr	r1, [r7, #12]
 800aee2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aee4:	fb01 f303 	mul.w	r3, r1, r3
 800aee8:	441a      	add	r2, r3
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af04:	3b01      	subs	r3, #1
 800af06:	68f9      	ldr	r1, [r7, #12]
 800af08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800af0a:	fb01 f303 	mul.w	r3, r1, r3
 800af0e:	441a      	add	r2, r3
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	22ff      	movs	r2, #255	@ 0xff
 800af18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	22ff      	movs	r2, #255	@ 0xff
 800af20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d114      	bne.n	800af54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d01a      	beq.n	800af68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	3310      	adds	r3, #16
 800af36:	4618      	mov	r0, r3
 800af38:	f001 fb9c 	bl	800c674 <xTaskRemoveFromEventList>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d012      	beq.n	800af68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af42:	4b0d      	ldr	r3, [pc, #52]	@ (800af78 <xQueueGenericReset+0xd0>)
 800af44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af48:	601a      	str	r2, [r3, #0]
 800af4a:	f3bf 8f4f 	dsb	sy
 800af4e:	f3bf 8f6f 	isb	sy
 800af52:	e009      	b.n	800af68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	3310      	adds	r3, #16
 800af58:	4618      	mov	r0, r3
 800af5a:	f7ff fef1 	bl	800ad40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	3324      	adds	r3, #36	@ 0x24
 800af62:	4618      	mov	r0, r3
 800af64:	f7ff feec 	bl	800ad40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800af68:	f002 fe00 	bl	800db6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800af6c:	2301      	movs	r3, #1
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	e000ed04 	.word	0xe000ed04

0800af7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b08e      	sub	sp, #56	@ 0x38
 800af80:	af02      	add	r7, sp, #8
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
 800af88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10b      	bne.n	800afa8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800afa2:	bf00      	nop
 800afa4:	bf00      	nop
 800afa6:	e7fd      	b.n	800afa4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d10b      	bne.n	800afc6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800afae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb2:	f383 8811 	msr	BASEPRI, r3
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800afc0:	bf00      	nop
 800afc2:	bf00      	nop
 800afc4:	e7fd      	b.n	800afc2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <xQueueGenericCreateStatic+0x56>
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d001      	beq.n	800afd6 <xQueueGenericCreateStatic+0x5a>
 800afd2:	2301      	movs	r3, #1
 800afd4:	e000      	b.n	800afd8 <xQueueGenericCreateStatic+0x5c>
 800afd6:	2300      	movs	r3, #0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10b      	bne.n	800aff4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800afdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe0:	f383 8811 	msr	BASEPRI, r3
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	f3bf 8f4f 	dsb	sy
 800afec:	623b      	str	r3, [r7, #32]
}
 800afee:	bf00      	nop
 800aff0:	bf00      	nop
 800aff2:	e7fd      	b.n	800aff0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d102      	bne.n	800b000 <xQueueGenericCreateStatic+0x84>
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <xQueueGenericCreateStatic+0x88>
 800b000:	2301      	movs	r3, #1
 800b002:	e000      	b.n	800b006 <xQueueGenericCreateStatic+0x8a>
 800b004:	2300      	movs	r3, #0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d10b      	bne.n	800b022 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b00e:	f383 8811 	msr	BASEPRI, r3
 800b012:	f3bf 8f6f 	isb	sy
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	61fb      	str	r3, [r7, #28]
}
 800b01c:	bf00      	nop
 800b01e:	bf00      	nop
 800b020:	e7fd      	b.n	800b01e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b022:	2350      	movs	r3, #80	@ 0x50
 800b024:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	2b50      	cmp	r3, #80	@ 0x50
 800b02a:	d00b      	beq.n	800b044 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	61bb      	str	r3, [r7, #24]
}
 800b03e:	bf00      	nop
 800b040:	bf00      	nop
 800b042:	e7fd      	b.n	800b040 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b044:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00d      	beq.n	800b06c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b052:	2201      	movs	r2, #1
 800b054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b058:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	4613      	mov	r3, r2
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	68b9      	ldr	r1, [r7, #8]
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f000 f840 	bl	800b0ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b06e:	4618      	mov	r0, r3
 800b070:	3730      	adds	r7, #48	@ 0x30
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b076:	b580      	push	{r7, lr}
 800b078:	b08a      	sub	sp, #40	@ 0x28
 800b07a:	af02      	add	r7, sp, #8
 800b07c:	60f8      	str	r0, [r7, #12]
 800b07e:	60b9      	str	r1, [r7, #8]
 800b080:	4613      	mov	r3, r2
 800b082:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d10b      	bne.n	800b0a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08e:	f383 8811 	msr	BASEPRI, r3
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	613b      	str	r3, [r7, #16]
}
 800b09c:	bf00      	nop
 800b09e:	bf00      	nop
 800b0a0:	e7fd      	b.n	800b09e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	68ba      	ldr	r2, [r7, #8]
 800b0a6:	fb02 f303 	mul.w	r3, r2, r3
 800b0aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	3350      	adds	r3, #80	@ 0x50
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f002 fe4b 	bl	800dd4c <pvPortMalloc>
 800b0b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d011      	beq.n	800b0e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	3350      	adds	r3, #80	@ 0x50
 800b0c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b0d0:	79fa      	ldrb	r2, [r7, #7]
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	68b9      	ldr	r1, [r7, #8]
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f000 f805 	bl	800b0ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b0e2:	69bb      	ldr	r3, [r7, #24]
	}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3720      	adds	r7, #32
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
 800b0f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d103      	bne.n	800b108 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	69ba      	ldr	r2, [r7, #24]
 800b104:	601a      	str	r2, [r3, #0]
 800b106:	e002      	b.n	800b10e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	68ba      	ldr	r2, [r7, #8]
 800b118:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b11a:	2101      	movs	r1, #1
 800b11c:	69b8      	ldr	r0, [r7, #24]
 800b11e:	f7ff fec3 	bl	800aea8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	78fa      	ldrb	r2, [r7, #3]
 800b126:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b12a:	bf00      	nop
 800b12c:	3710      	adds	r7, #16
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b132:	b580      	push	{r7, lr}
 800b134:	b082      	sub	sp, #8
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d00e      	beq.n	800b15e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b152:	2300      	movs	r3, #0
 800b154:	2200      	movs	r2, #0
 800b156:	2100      	movs	r1, #0
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 f8a3 	bl	800b2a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b15e:	bf00      	nop
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b166:	b580      	push	{r7, lr}
 800b168:	b086      	sub	sp, #24
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	4603      	mov	r3, r0
 800b16e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b170:	2301      	movs	r3, #1
 800b172:	617b      	str	r3, [r7, #20]
 800b174:	2300      	movs	r3, #0
 800b176:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b178:	79fb      	ldrb	r3, [r7, #7]
 800b17a:	461a      	mov	r2, r3
 800b17c:	6939      	ldr	r1, [r7, #16]
 800b17e:	6978      	ldr	r0, [r7, #20]
 800b180:	f7ff ff79 	bl	800b076 <xQueueGenericCreate>
 800b184:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f7ff ffd3 	bl	800b132 <prvInitialiseMutex>

		return xNewQueue;
 800b18c:	68fb      	ldr	r3, [r7, #12]
	}
 800b18e:	4618      	mov	r0, r3
 800b190:	3718      	adds	r7, #24
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b196:	b580      	push	{r7, lr}
 800b198:	b088      	sub	sp, #32
 800b19a:	af02      	add	r7, sp, #8
 800b19c:	4603      	mov	r3, r0
 800b19e:	6039      	str	r1, [r7, #0]
 800b1a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	617b      	str	r3, [r7, #20]
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b1aa:	79fb      	ldrb	r3, [r7, #7]
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	6939      	ldr	r1, [r7, #16]
 800b1b4:	6978      	ldr	r0, [r7, #20]
 800b1b6:	f7ff fee1 	bl	800af7c <xQueueGenericCreateStatic>
 800b1ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f7ff ffb8 	bl	800b132 <prvInitialiseMutex>

		return xNewQueue;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
	}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3718      	adds	r7, #24
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b1cc:	b590      	push	{r4, r7, lr}
 800b1ce:	b087      	sub	sp, #28
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10b      	bne.n	800b1f6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800b1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	60fb      	str	r3, [r7, #12]
}
 800b1f0:	bf00      	nop
 800b1f2:	bf00      	nop
 800b1f4:	e7fd      	b.n	800b1f2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	689c      	ldr	r4, [r3, #8]
 800b1fa:	f001 fc01 	bl	800ca00 <xTaskGetCurrentTaskHandle>
 800b1fe:	4603      	mov	r3, r0
 800b200:	429c      	cmp	r4, r3
 800b202:	d111      	bne.n	800b228 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	1e5a      	subs	r2, r3, #1
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d105      	bne.n	800b222 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b216:	2300      	movs	r3, #0
 800b218:	2200      	movs	r2, #0
 800b21a:	2100      	movs	r1, #0
 800b21c:	6938      	ldr	r0, [r7, #16]
 800b21e:	f000 f841 	bl	800b2a4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b222:	2301      	movs	r3, #1
 800b224:	617b      	str	r3, [r7, #20]
 800b226:	e001      	b.n	800b22c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b228:	2300      	movs	r3, #0
 800b22a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b22c:	697b      	ldr	r3, [r7, #20]
	}
 800b22e:	4618      	mov	r0, r3
 800b230:	371c      	adds	r7, #28
 800b232:	46bd      	mov	sp, r7
 800b234:	bd90      	pop	{r4, r7, pc}

0800b236 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b236:	b590      	push	{r4, r7, lr}
 800b238:	b087      	sub	sp, #28
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d10b      	bne.n	800b262 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800b24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b24e:	f383 8811 	msr	BASEPRI, r3
 800b252:	f3bf 8f6f 	isb	sy
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	60fb      	str	r3, [r7, #12]
}
 800b25c:	bf00      	nop
 800b25e:	bf00      	nop
 800b260:	e7fd      	b.n	800b25e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	689c      	ldr	r4, [r3, #8]
 800b266:	f001 fbcb 	bl	800ca00 <xTaskGetCurrentTaskHandle>
 800b26a:	4603      	mov	r3, r0
 800b26c:	429c      	cmp	r4, r3
 800b26e:	d107      	bne.n	800b280 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	1c5a      	adds	r2, r3, #1
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b27a:	2301      	movs	r3, #1
 800b27c:	617b      	str	r3, [r7, #20]
 800b27e:	e00c      	b.n	800b29a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	6938      	ldr	r0, [r7, #16]
 800b284:	f000 fa90 	bl	800b7a8 <xQueueSemaphoreTake>
 800b288:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d004      	beq.n	800b29a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	1c5a      	adds	r2, r3, #1
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b29a:	697b      	ldr	r3, [r7, #20]
	}
 800b29c:	4618      	mov	r0, r3
 800b29e:	371c      	adds	r7, #28
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd90      	pop	{r4, r7, pc}

0800b2a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b08e      	sub	sp, #56	@ 0x38
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	607a      	str	r2, [r7, #4]
 800b2b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10b      	bne.n	800b2d8 <xQueueGenericSend+0x34>
	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b2d2:	bf00      	nop
 800b2d4:	bf00      	nop
 800b2d6:	e7fd      	b.n	800b2d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d103      	bne.n	800b2e6 <xQueueGenericSend+0x42>
 800b2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d101      	bne.n	800b2ea <xQueueGenericSend+0x46>
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e000      	b.n	800b2ec <xQueueGenericSend+0x48>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d10b      	bne.n	800b308 <xQueueGenericSend+0x64>
	__asm volatile
 800b2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f4:	f383 8811 	msr	BASEPRI, r3
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b302:	bf00      	nop
 800b304:	bf00      	nop
 800b306:	e7fd      	b.n	800b304 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	d103      	bne.n	800b316 <xQueueGenericSend+0x72>
 800b30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b312:	2b01      	cmp	r3, #1
 800b314:	d101      	bne.n	800b31a <xQueueGenericSend+0x76>
 800b316:	2301      	movs	r3, #1
 800b318:	e000      	b.n	800b31c <xQueueGenericSend+0x78>
 800b31a:	2300      	movs	r3, #0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10b      	bne.n	800b338 <xQueueGenericSend+0x94>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	623b      	str	r3, [r7, #32]
}
 800b332:	bf00      	nop
 800b334:	bf00      	nop
 800b336:	e7fd      	b.n	800b334 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b338:	f001 fb72 	bl	800ca20 <xTaskGetSchedulerState>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d102      	bne.n	800b348 <xQueueGenericSend+0xa4>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d101      	bne.n	800b34c <xQueueGenericSend+0xa8>
 800b348:	2301      	movs	r3, #1
 800b34a:	e000      	b.n	800b34e <xQueueGenericSend+0xaa>
 800b34c:	2300      	movs	r3, #0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d10b      	bne.n	800b36a <xQueueGenericSend+0xc6>
	__asm volatile
 800b352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b356:	f383 8811 	msr	BASEPRI, r3
 800b35a:	f3bf 8f6f 	isb	sy
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	61fb      	str	r3, [r7, #28]
}
 800b364:	bf00      	nop
 800b366:	bf00      	nop
 800b368:	e7fd      	b.n	800b366 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b36a:	f002 fbcd 	bl	800db08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b376:	429a      	cmp	r2, r3
 800b378:	d302      	bcc.n	800b380 <xQueueGenericSend+0xdc>
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d129      	bne.n	800b3d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	68b9      	ldr	r1, [r7, #8]
 800b384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b386:	f000 fb37 	bl	800b9f8 <prvCopyDataToQueue>
 800b38a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b38e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b390:	2b00      	cmp	r3, #0
 800b392:	d010      	beq.n	800b3b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b396:	3324      	adds	r3, #36	@ 0x24
 800b398:	4618      	mov	r0, r3
 800b39a:	f001 f96b 	bl	800c674 <xTaskRemoveFromEventList>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d013      	beq.n	800b3cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b3a4:	4b3f      	ldr	r3, [pc, #252]	@ (800b4a4 <xQueueGenericSend+0x200>)
 800b3a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3aa:	601a      	str	r2, [r3, #0]
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	e00a      	b.n	800b3cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d007      	beq.n	800b3cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b3bc:	4b39      	ldr	r3, [pc, #228]	@ (800b4a4 <xQueueGenericSend+0x200>)
 800b3be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	f3bf 8f4f 	dsb	sy
 800b3c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b3cc:	f002 fbce 	bl	800db6c <vPortExitCritical>
				return pdPASS;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e063      	b.n	800b49c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d103      	bne.n	800b3e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3da:	f002 fbc7 	bl	800db6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	e05c      	b.n	800b49c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d106      	bne.n	800b3f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3e8:	f107 0314 	add.w	r3, r7, #20
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f001 f9a5 	bl	800c73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3f6:	f002 fbb9 	bl	800db6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3fa:	f000 ff0d 	bl	800c218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3fe:	f002 fb83 	bl	800db08 <vPortEnterCritical>
 800b402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b404:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b408:	b25b      	sxtb	r3, r3
 800b40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b40e:	d103      	bne.n	800b418 <xQueueGenericSend+0x174>
 800b410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b412:	2200      	movs	r2, #0
 800b414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b41e:	b25b      	sxtb	r3, r3
 800b420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b424:	d103      	bne.n	800b42e <xQueueGenericSend+0x18a>
 800b426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b428:	2200      	movs	r2, #0
 800b42a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b42e:	f002 fb9d 	bl	800db6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b432:	1d3a      	adds	r2, r7, #4
 800b434:	f107 0314 	add.w	r3, r7, #20
 800b438:	4611      	mov	r1, r2
 800b43a:	4618      	mov	r0, r3
 800b43c:	f001 f994 	bl	800c768 <xTaskCheckForTimeOut>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d124      	bne.n	800b490 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b446:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b448:	f000 fbce 	bl	800bbe8 <prvIsQueueFull>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d018      	beq.n	800b484 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b454:	3310      	adds	r3, #16
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	4611      	mov	r1, r2
 800b45a:	4618      	mov	r0, r3
 800b45c:	f001 f8b8 	bl	800c5d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b460:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b462:	f000 fb59 	bl	800bb18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b466:	f000 fee5 	bl	800c234 <xTaskResumeAll>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f47f af7c 	bne.w	800b36a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b472:	4b0c      	ldr	r3, [pc, #48]	@ (800b4a4 <xQueueGenericSend+0x200>)
 800b474:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b478:	601a      	str	r2, [r3, #0]
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	e772      	b.n	800b36a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b484:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b486:	f000 fb47 	bl	800bb18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b48a:	f000 fed3 	bl	800c234 <xTaskResumeAll>
 800b48e:	e76c      	b.n	800b36a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b490:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b492:	f000 fb41 	bl	800bb18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b496:	f000 fecd 	bl	800c234 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b49a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3738      	adds	r7, #56	@ 0x38
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	e000ed04 	.word	0xe000ed04

0800b4a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b090      	sub	sp, #64	@ 0x40
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
 800b4b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d10b      	bne.n	800b4d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b4d2:	bf00      	nop
 800b4d4:	bf00      	nop
 800b4d6:	e7fd      	b.n	800b4d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d103      	bne.n	800b4e6 <xQueueGenericSendFromISR+0x3e>
 800b4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d101      	bne.n	800b4ea <xQueueGenericSendFromISR+0x42>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e000      	b.n	800b4ec <xQueueGenericSendFromISR+0x44>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10b      	bne.n	800b508 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f4:	f383 8811 	msr	BASEPRI, r3
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b502:	bf00      	nop
 800b504:	bf00      	nop
 800b506:	e7fd      	b.n	800b504 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	2b02      	cmp	r3, #2
 800b50c:	d103      	bne.n	800b516 <xQueueGenericSendFromISR+0x6e>
 800b50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b512:	2b01      	cmp	r3, #1
 800b514:	d101      	bne.n	800b51a <xQueueGenericSendFromISR+0x72>
 800b516:	2301      	movs	r3, #1
 800b518:	e000      	b.n	800b51c <xQueueGenericSendFromISR+0x74>
 800b51a:	2300      	movs	r3, #0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10b      	bne.n	800b538 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	623b      	str	r3, [r7, #32]
}
 800b532:	bf00      	nop
 800b534:	bf00      	nop
 800b536:	e7fd      	b.n	800b534 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b538:	f002 fbc6 	bl	800dcc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b53c:	f3ef 8211 	mrs	r2, BASEPRI
 800b540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b544:	f383 8811 	msr	BASEPRI, r3
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	f3bf 8f4f 	dsb	sy
 800b550:	61fa      	str	r2, [r7, #28]
 800b552:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b554:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b556:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b55a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b55e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b560:	429a      	cmp	r2, r3
 800b562:	d302      	bcc.n	800b56a <xQueueGenericSendFromISR+0xc2>
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	2b02      	cmp	r3, #2
 800b568:	d12f      	bne.n	800b5ca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b570:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b578:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b57a:	683a      	ldr	r2, [r7, #0]
 800b57c:	68b9      	ldr	r1, [r7, #8]
 800b57e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b580:	f000 fa3a 	bl	800b9f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b584:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58c:	d112      	bne.n	800b5b4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b592:	2b00      	cmp	r3, #0
 800b594:	d016      	beq.n	800b5c4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b598:	3324      	adds	r3, #36	@ 0x24
 800b59a:	4618      	mov	r0, r3
 800b59c:	f001 f86a 	bl	800c674 <xTaskRemoveFromEventList>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00e      	beq.n	800b5c4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00b      	beq.n	800b5c4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	601a      	str	r2, [r3, #0]
 800b5b2:	e007      	b.n	800b5c4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b5b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	b25a      	sxtb	r2, r3
 800b5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b5c8:	e001      	b.n	800b5ce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5d0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b5d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3740      	adds	r7, #64	@ 0x40
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b08c      	sub	sp, #48	@ 0x30
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d10b      	bne.n	800b616 <xQueueReceive+0x32>
	__asm volatile
 800b5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	623b      	str	r3, [r7, #32]
}
 800b610:	bf00      	nop
 800b612:	bf00      	nop
 800b614:	e7fd      	b.n	800b612 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d103      	bne.n	800b624 <xQueueReceive+0x40>
 800b61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b61e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b620:	2b00      	cmp	r3, #0
 800b622:	d101      	bne.n	800b628 <xQueueReceive+0x44>
 800b624:	2301      	movs	r3, #1
 800b626:	e000      	b.n	800b62a <xQueueReceive+0x46>
 800b628:	2300      	movs	r3, #0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d10b      	bne.n	800b646 <xQueueReceive+0x62>
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	61fb      	str	r3, [r7, #28]
}
 800b640:	bf00      	nop
 800b642:	bf00      	nop
 800b644:	e7fd      	b.n	800b642 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b646:	f001 f9eb 	bl	800ca20 <xTaskGetSchedulerState>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d102      	bne.n	800b656 <xQueueReceive+0x72>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d101      	bne.n	800b65a <xQueueReceive+0x76>
 800b656:	2301      	movs	r3, #1
 800b658:	e000      	b.n	800b65c <xQueueReceive+0x78>
 800b65a:	2300      	movs	r3, #0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10b      	bne.n	800b678 <xQueueReceive+0x94>
	__asm volatile
 800b660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b664:	f383 8811 	msr	BASEPRI, r3
 800b668:	f3bf 8f6f 	isb	sy
 800b66c:	f3bf 8f4f 	dsb	sy
 800b670:	61bb      	str	r3, [r7, #24]
}
 800b672:	bf00      	nop
 800b674:	bf00      	nop
 800b676:	e7fd      	b.n	800b674 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b678:	f002 fa46 	bl	800db08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b67e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b680:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b684:	2b00      	cmp	r3, #0
 800b686:	d01f      	beq.n	800b6c8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b688:	68b9      	ldr	r1, [r7, #8]
 800b68a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b68c:	f000 fa1e 	bl	800bacc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b692:	1e5a      	subs	r2, r3, #1
 800b694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b696:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00f      	beq.n	800b6c0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a2:	3310      	adds	r3, #16
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f000 ffe5 	bl	800c674 <xTaskRemoveFromEventList>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d007      	beq.n	800b6c0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b6b0:	4b3c      	ldr	r3, [pc, #240]	@ (800b7a4 <xQueueReceive+0x1c0>)
 800b6b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6b6:	601a      	str	r2, [r3, #0]
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6c0:	f002 fa54 	bl	800db6c <vPortExitCritical>
				return pdPASS;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e069      	b.n	800b79c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d103      	bne.n	800b6d6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6ce:	f002 fa4d 	bl	800db6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	e062      	b.n	800b79c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d106      	bne.n	800b6ea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6dc:	f107 0310 	add.w	r3, r7, #16
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f001 f82b 	bl	800c73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6ea:	f002 fa3f 	bl	800db6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6ee:	f000 fd93 	bl	800c218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6f2:	f002 fa09 	bl	800db08 <vPortEnterCritical>
 800b6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b6fc:	b25b      	sxtb	r3, r3
 800b6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b702:	d103      	bne.n	800b70c <xQueueReceive+0x128>
 800b704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b706:	2200      	movs	r2, #0
 800b708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b70e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b712:	b25b      	sxtb	r3, r3
 800b714:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b718:	d103      	bne.n	800b722 <xQueueReceive+0x13e>
 800b71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b71c:	2200      	movs	r2, #0
 800b71e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b722:	f002 fa23 	bl	800db6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b726:	1d3a      	adds	r2, r7, #4
 800b728:	f107 0310 	add.w	r3, r7, #16
 800b72c:	4611      	mov	r1, r2
 800b72e:	4618      	mov	r0, r3
 800b730:	f001 f81a 	bl	800c768 <xTaskCheckForTimeOut>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d123      	bne.n	800b782 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b73a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b73c:	f000 fa3e 	bl	800bbbc <prvIsQueueEmpty>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d017      	beq.n	800b776 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b748:	3324      	adds	r3, #36	@ 0x24
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	4611      	mov	r1, r2
 800b74e:	4618      	mov	r0, r3
 800b750:	f000 ff3e 	bl	800c5d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b754:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b756:	f000 f9df 	bl	800bb18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b75a:	f000 fd6b 	bl	800c234 <xTaskResumeAll>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	d189      	bne.n	800b678 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b764:	4b0f      	ldr	r3, [pc, #60]	@ (800b7a4 <xQueueReceive+0x1c0>)
 800b766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b76a:	601a      	str	r2, [r3, #0]
 800b76c:	f3bf 8f4f 	dsb	sy
 800b770:	f3bf 8f6f 	isb	sy
 800b774:	e780      	b.n	800b678 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b778:	f000 f9ce 	bl	800bb18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b77c:	f000 fd5a 	bl	800c234 <xTaskResumeAll>
 800b780:	e77a      	b.n	800b678 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b784:	f000 f9c8 	bl	800bb18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b788:	f000 fd54 	bl	800c234 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b78c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b78e:	f000 fa15 	bl	800bbbc <prvIsQueueEmpty>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	f43f af6f 	beq.w	800b678 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b79a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3730      	adds	r7, #48	@ 0x30
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	e000ed04 	.word	0xe000ed04

0800b7a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b08e      	sub	sp, #56	@ 0x38
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10b      	bne.n	800b7dc <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	623b      	str	r3, [r7, #32]
}
 800b7d6:	bf00      	nop
 800b7d8:	bf00      	nop
 800b7da:	e7fd      	b.n	800b7d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00b      	beq.n	800b7fc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	61fb      	str	r3, [r7, #28]
}
 800b7f6:	bf00      	nop
 800b7f8:	bf00      	nop
 800b7fa:	e7fd      	b.n	800b7f8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7fc:	f001 f910 	bl	800ca20 <xTaskGetSchedulerState>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d102      	bne.n	800b80c <xQueueSemaphoreTake+0x64>
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d101      	bne.n	800b810 <xQueueSemaphoreTake+0x68>
 800b80c:	2301      	movs	r3, #1
 800b80e:	e000      	b.n	800b812 <xQueueSemaphoreTake+0x6a>
 800b810:	2300      	movs	r3, #0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10b      	bne.n	800b82e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b81a:	f383 8811 	msr	BASEPRI, r3
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	f3bf 8f4f 	dsb	sy
 800b826:	61bb      	str	r3, [r7, #24]
}
 800b828:	bf00      	nop
 800b82a:	bf00      	nop
 800b82c:	e7fd      	b.n	800b82a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b82e:	f002 f96b 	bl	800db08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b836:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d024      	beq.n	800b888 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b840:	1e5a      	subs	r2, r3, #1
 800b842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b844:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d104      	bne.n	800b858 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b84e:	f001 fa61 	bl	800cd14 <pvTaskIncrementMutexHeldCount>
 800b852:	4602      	mov	r2, r0
 800b854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b856:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b85a:	691b      	ldr	r3, [r3, #16]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00f      	beq.n	800b880 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b862:	3310      	adds	r3, #16
 800b864:	4618      	mov	r0, r3
 800b866:	f000 ff05 	bl	800c674 <xTaskRemoveFromEventList>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d007      	beq.n	800b880 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b870:	4b54      	ldr	r3, [pc, #336]	@ (800b9c4 <xQueueSemaphoreTake+0x21c>)
 800b872:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b876:	601a      	str	r2, [r3, #0]
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b880:	f002 f974 	bl	800db6c <vPortExitCritical>
				return pdPASS;
 800b884:	2301      	movs	r3, #1
 800b886:	e098      	b.n	800b9ba <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d112      	bne.n	800b8b4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00b      	beq.n	800b8ac <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	617b      	str	r3, [r7, #20]
}
 800b8a6:	bf00      	nop
 800b8a8:	bf00      	nop
 800b8aa:	e7fd      	b.n	800b8a8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b8ac:	f002 f95e 	bl	800db6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	e082      	b.n	800b9ba <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d106      	bne.n	800b8c8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8ba:	f107 030c 	add.w	r3, r7, #12
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f000 ff3c 	bl	800c73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8c8:	f002 f950 	bl	800db6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b8cc:	f000 fca4 	bl	800c218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8d0:	f002 f91a 	bl	800db08 <vPortEnterCritical>
 800b8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b8da:	b25b      	sxtb	r3, r3
 800b8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e0:	d103      	bne.n	800b8ea <xQueueSemaphoreTake+0x142>
 800b8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8f0:	b25b      	sxtb	r3, r3
 800b8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f6:	d103      	bne.n	800b900 <xQueueSemaphoreTake+0x158>
 800b8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b900:	f002 f934 	bl	800db6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b904:	463a      	mov	r2, r7
 800b906:	f107 030c 	add.w	r3, r7, #12
 800b90a:	4611      	mov	r1, r2
 800b90c:	4618      	mov	r0, r3
 800b90e:	f000 ff2b 	bl	800c768 <xTaskCheckForTimeOut>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d132      	bne.n	800b97e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b918:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b91a:	f000 f94f 	bl	800bbbc <prvIsQueueEmpty>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d026      	beq.n	800b972 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d109      	bne.n	800b940 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b92c:	f002 f8ec 	bl	800db08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	4618      	mov	r0, r3
 800b936:	f001 f891 	bl	800ca5c <xTaskPriorityInherit>
 800b93a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b93c:	f002 f916 	bl	800db6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b942:	3324      	adds	r3, #36	@ 0x24
 800b944:	683a      	ldr	r2, [r7, #0]
 800b946:	4611      	mov	r1, r2
 800b948:	4618      	mov	r0, r3
 800b94a:	f000 fe41 	bl	800c5d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b94e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b950:	f000 f8e2 	bl	800bb18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b954:	f000 fc6e 	bl	800c234 <xTaskResumeAll>
 800b958:	4603      	mov	r3, r0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	f47f af67 	bne.w	800b82e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b960:	4b18      	ldr	r3, [pc, #96]	@ (800b9c4 <xQueueSemaphoreTake+0x21c>)
 800b962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b966:	601a      	str	r2, [r3, #0]
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	e75d      	b.n	800b82e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b972:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b974:	f000 f8d0 	bl	800bb18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b978:	f000 fc5c 	bl	800c234 <xTaskResumeAll>
 800b97c:	e757      	b.n	800b82e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b97e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b980:	f000 f8ca 	bl	800bb18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b984:	f000 fc56 	bl	800c234 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b988:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b98a:	f000 f917 	bl	800bbbc <prvIsQueueEmpty>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	f43f af4c 	beq.w	800b82e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00d      	beq.n	800b9b8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b99c:	f002 f8b4 	bl	800db08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b9a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b9a2:	f000 f811 	bl	800b9c8 <prvGetDisinheritPriorityAfterTimeout>
 800b9a6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f001 f92c 	bl	800cc0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b9b4:	f002 f8da 	bl	800db6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b9b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3738      	adds	r7, #56	@ 0x38
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	e000ed04 	.word	0xe000ed04

0800b9c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d006      	beq.n	800b9e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800b9e2:	60fb      	str	r3, [r7, #12]
 800b9e4:	e001      	b.n	800b9ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
	}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ba04:	2300      	movs	r3, #0
 800ba06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d10d      	bne.n	800ba32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d14d      	bne.n	800baba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	4618      	mov	r0, r3
 800ba24:	f001 f882 	bl	800cb2c <xTaskPriorityDisinherit>
 800ba28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	609a      	str	r2, [r3, #8]
 800ba30:	e043      	b.n	800baba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d119      	bne.n	800ba6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6858      	ldr	r0, [r3, #4]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba40:	461a      	mov	r2, r3
 800ba42:	68b9      	ldr	r1, [r7, #8]
 800ba44:	f003 f974 	bl	800ed30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	685a      	ldr	r2, [r3, #4]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba50:	441a      	add	r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d32b      	bcc.n	800baba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	605a      	str	r2, [r3, #4]
 800ba6a:	e026      	b.n	800baba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	68d8      	ldr	r0, [r3, #12]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba74:	461a      	mov	r2, r3
 800ba76:	68b9      	ldr	r1, [r7, #8]
 800ba78:	f003 f95a 	bl	800ed30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	68da      	ldr	r2, [r3, #12]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba84:	425b      	negs	r3, r3
 800ba86:	441a      	add	r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	68da      	ldr	r2, [r3, #12]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d207      	bcs.n	800baa8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	689a      	ldr	r2, [r3, #8]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baa0:	425b      	negs	r3, r3
 800baa2:	441a      	add	r2, r3
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b02      	cmp	r3, #2
 800baac:	d105      	bne.n	800baba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	1c5a      	adds	r2, r3, #1
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bac2:	697b      	ldr	r3, [r7, #20]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3718      	adds	r7, #24
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bada:	2b00      	cmp	r3, #0
 800badc:	d018      	beq.n	800bb10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	68da      	ldr	r2, [r3, #12]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bae6:	441a      	add	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	68da      	ldr	r2, [r3, #12]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d303      	bcc.n	800bb00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	68d9      	ldr	r1, [r3, #12]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb08:	461a      	mov	r2, r3
 800bb0a:	6838      	ldr	r0, [r7, #0]
 800bb0c:	f003 f910 	bl	800ed30 <memcpy>
	}
}
 800bb10:	bf00      	nop
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bb20:	f001 fff2 	bl	800db08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb2c:	e011      	b.n	800bb52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d012      	beq.n	800bb5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	3324      	adds	r3, #36	@ 0x24
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 fd9a 	bl	800c674 <xTaskRemoveFromEventList>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d001      	beq.n	800bb4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bb46:	f000 fe73 	bl	800c830 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bb4a:	7bfb      	ldrb	r3, [r7, #15]
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	dce9      	bgt.n	800bb2e <prvUnlockQueue+0x16>
 800bb5a:	e000      	b.n	800bb5e <prvUnlockQueue+0x46>
					break;
 800bb5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	22ff      	movs	r2, #255	@ 0xff
 800bb62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bb66:	f002 f801 	bl	800db6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bb6a:	f001 ffcd 	bl	800db08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb76:	e011      	b.n	800bb9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d012      	beq.n	800bba6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	3310      	adds	r3, #16
 800bb84:	4618      	mov	r0, r3
 800bb86:	f000 fd75 	bl	800c674 <xTaskRemoveFromEventList>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bb90:	f000 fe4e 	bl	800c830 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bb94:	7bbb      	ldrb	r3, [r7, #14]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	dce9      	bgt.n	800bb78 <prvUnlockQueue+0x60>
 800bba4:	e000      	b.n	800bba8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bba6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	22ff      	movs	r2, #255	@ 0xff
 800bbac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bbb0:	f001 ffdc 	bl	800db6c <vPortExitCritical>
}
 800bbb4:	bf00      	nop
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bbc4:	f001 ffa0 	bl	800db08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d102      	bne.n	800bbd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	60fb      	str	r3, [r7, #12]
 800bbd4:	e001      	b.n	800bbda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bbda:	f001 ffc7 	bl	800db6c <vPortExitCritical>

	return xReturn;
 800bbde:	68fb      	ldr	r3, [r7, #12]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bbf0:	f001 ff8a 	bl	800db08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d102      	bne.n	800bc06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bc00:	2301      	movs	r3, #1
 800bc02:	60fb      	str	r3, [r7, #12]
 800bc04:	e001      	b.n	800bc0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bc06:	2300      	movs	r3, #0
 800bc08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc0a:	f001 ffaf 	bl	800db6c <vPortExitCritical>

	return xReturn;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc22:	2300      	movs	r3, #0
 800bc24:	60fb      	str	r3, [r7, #12]
 800bc26:	e014      	b.n	800bc52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bc28:	4a0f      	ldr	r2, [pc, #60]	@ (800bc68 <vQueueAddToRegistry+0x50>)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10b      	bne.n	800bc4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bc34:	490c      	ldr	r1, [pc, #48]	@ (800bc68 <vQueueAddToRegistry+0x50>)
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	683a      	ldr	r2, [r7, #0]
 800bc3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bc3e:	4a0a      	ldr	r2, [pc, #40]	@ (800bc68 <vQueueAddToRegistry+0x50>)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	00db      	lsls	r3, r3, #3
 800bc44:	4413      	add	r3, r2
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bc4a:	e006      	b.n	800bc5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	60fb      	str	r3, [r7, #12]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2b07      	cmp	r3, #7
 800bc56:	d9e7      	bls.n	800bc28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bc58:	bf00      	nop
 800bc5a:	bf00      	nop
 800bc5c:	3714      	adds	r7, #20
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	20000a4c 	.word	0x20000a4c

0800bc6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bc7c:	f001 ff44 	bl	800db08 <vPortEnterCritical>
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc86:	b25b      	sxtb	r3, r3
 800bc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc8c:	d103      	bne.n	800bc96 <vQueueWaitForMessageRestricted+0x2a>
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	2200      	movs	r2, #0
 800bc92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc9c:	b25b      	sxtb	r3, r3
 800bc9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca2:	d103      	bne.n	800bcac <vQueueWaitForMessageRestricted+0x40>
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bcac:	f001 ff5e 	bl	800db6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d106      	bne.n	800bcc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	3324      	adds	r3, #36	@ 0x24
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	68b9      	ldr	r1, [r7, #8]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f000 fcab 	bl	800c61c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bcc6:	6978      	ldr	r0, [r7, #20]
 800bcc8:	f7ff ff26 	bl	800bb18 <prvUnlockQueue>
	}
 800bccc:	bf00      	nop
 800bcce:	3718      	adds	r7, #24
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b08e      	sub	sp, #56	@ 0x38
 800bcd8:	af04      	add	r7, sp, #16
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	607a      	str	r2, [r7, #4]
 800bce0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10b      	bne.n	800bd00 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	623b      	str	r3, [r7, #32]
}
 800bcfa:	bf00      	nop
 800bcfc:	bf00      	nop
 800bcfe:	e7fd      	b.n	800bcfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bd00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10b      	bne.n	800bd1e <xTaskCreateStatic+0x4a>
	__asm volatile
 800bd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd0a:	f383 8811 	msr	BASEPRI, r3
 800bd0e:	f3bf 8f6f 	isb	sy
 800bd12:	f3bf 8f4f 	dsb	sy
 800bd16:	61fb      	str	r3, [r7, #28]
}
 800bd18:	bf00      	nop
 800bd1a:	bf00      	nop
 800bd1c:	e7fd      	b.n	800bd1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bd1e:	23a8      	movs	r3, #168	@ 0xa8
 800bd20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	2ba8      	cmp	r3, #168	@ 0xa8
 800bd26:	d00b      	beq.n	800bd40 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bd28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	61bb      	str	r3, [r7, #24]
}
 800bd3a:	bf00      	nop
 800bd3c:	bf00      	nop
 800bd3e:	e7fd      	b.n	800bd3c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bd40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d01e      	beq.n	800bd86 <xTaskCreateStatic+0xb2>
 800bd48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d01b      	beq.n	800bd86 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd50:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd56:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd5a:	2202      	movs	r2, #2
 800bd5c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bd60:	2300      	movs	r3, #0
 800bd62:	9303      	str	r3, [sp, #12]
 800bd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd66:	9302      	str	r3, [sp, #8]
 800bd68:	f107 0314 	add.w	r3, r7, #20
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	68b9      	ldr	r1, [r7, #8]
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f000 f851 	bl	800be20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd80:	f000 f8f6 	bl	800bf70 <prvAddNewTaskToReadyList>
 800bd84:	e001      	b.n	800bd8a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bd86:	2300      	movs	r3, #0
 800bd88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bd8a:	697b      	ldr	r3, [r7, #20]
	}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3728      	adds	r7, #40	@ 0x28
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b08c      	sub	sp, #48	@ 0x30
 800bd98:	af04      	add	r7, sp, #16
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	603b      	str	r3, [r7, #0]
 800bda0:	4613      	mov	r3, r2
 800bda2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bda4:	88fb      	ldrh	r3, [r7, #6]
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f001 ffcf 	bl	800dd4c <pvPortMalloc>
 800bdae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00e      	beq.n	800bdd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bdb6:	20a8      	movs	r0, #168	@ 0xa8
 800bdb8:	f001 ffc8 	bl	800dd4c <pvPortMalloc>
 800bdbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d003      	beq.n	800bdcc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	631a      	str	r2, [r3, #48]	@ 0x30
 800bdca:	e005      	b.n	800bdd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bdcc:	6978      	ldr	r0, [r7, #20]
 800bdce:	f002 f88b 	bl	800dee8 <vPortFree>
 800bdd2:	e001      	b.n	800bdd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d017      	beq.n	800be0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bde6:	88fa      	ldrh	r2, [r7, #6]
 800bde8:	2300      	movs	r3, #0
 800bdea:	9303      	str	r3, [sp, #12]
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	9302      	str	r3, [sp, #8]
 800bdf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf2:	9301      	str	r3, [sp, #4]
 800bdf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdf6:	9300      	str	r3, [sp, #0]
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	68b9      	ldr	r1, [r7, #8]
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f000 f80f 	bl	800be20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be02:	69f8      	ldr	r0, [r7, #28]
 800be04:	f000 f8b4 	bl	800bf70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800be08:	2301      	movs	r3, #1
 800be0a:	61bb      	str	r3, [r7, #24]
 800be0c:	e002      	b.n	800be14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800be0e:	f04f 33ff 	mov.w	r3, #4294967295
 800be12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800be14:	69bb      	ldr	r3, [r7, #24]
	}
 800be16:	4618      	mov	r0, r3
 800be18:	3720      	adds	r7, #32
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
	...

0800be20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b088      	sub	sp, #32
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
 800be2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800be2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be30:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	461a      	mov	r2, r3
 800be38:	21a5      	movs	r1, #165	@ 0xa5
 800be3a:	f002 fee7 	bl	800ec0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800be3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be48:	3b01      	subs	r3, #1
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	4413      	add	r3, r2
 800be4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	f023 0307 	bic.w	r3, r3, #7
 800be56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	f003 0307 	and.w	r3, r3, #7
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00b      	beq.n	800be7a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800be62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be66:	f383 8811 	msr	BASEPRI, r3
 800be6a:	f3bf 8f6f 	isb	sy
 800be6e:	f3bf 8f4f 	dsb	sy
 800be72:	617b      	str	r3, [r7, #20]
}
 800be74:	bf00      	nop
 800be76:	bf00      	nop
 800be78:	e7fd      	b.n	800be76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d01f      	beq.n	800bec0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be80:	2300      	movs	r3, #0
 800be82:	61fb      	str	r3, [r7, #28]
 800be84:	e012      	b.n	800beac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800be86:	68ba      	ldr	r2, [r7, #8]
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	4413      	add	r3, r2
 800be8c:	7819      	ldrb	r1, [r3, #0]
 800be8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	4413      	add	r3, r2
 800be94:	3334      	adds	r3, #52	@ 0x34
 800be96:	460a      	mov	r2, r1
 800be98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	4413      	add	r3, r2
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d006      	beq.n	800beb4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	3301      	adds	r3, #1
 800beaa:	61fb      	str	r3, [r7, #28]
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	2b0f      	cmp	r3, #15
 800beb0:	d9e9      	bls.n	800be86 <prvInitialiseNewTask+0x66>
 800beb2:	e000      	b.n	800beb6 <prvInitialiseNewTask+0x96>
			{
				break;
 800beb4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800beb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb8:	2200      	movs	r2, #0
 800beba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bebe:	e003      	b.n	800bec8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec2:	2200      	movs	r2, #0
 800bec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beca:	2b37      	cmp	r3, #55	@ 0x37
 800becc:	d901      	bls.n	800bed2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bece:	2337      	movs	r3, #55	@ 0x37
 800bed0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bed6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bedc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee0:	2200      	movs	r2, #0
 800bee2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee6:	3304      	adds	r3, #4
 800bee8:	4618      	mov	r0, r3
 800beea:	f7fe ff49 	bl	800ad80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800beee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef0:	3318      	adds	r3, #24
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fe ff44 	bl	800ad80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800befa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800befc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800befe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bf04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bf08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf0c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bf0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf10:	2200      	movs	r2, #0
 800bf12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf20:	3354      	adds	r3, #84	@ 0x54
 800bf22:	224c      	movs	r2, #76	@ 0x4c
 800bf24:	2100      	movs	r1, #0
 800bf26:	4618      	mov	r0, r3
 800bf28:	f002 fe70 	bl	800ec0c <memset>
 800bf2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf2e:	4a0d      	ldr	r2, [pc, #52]	@ (800bf64 <prvInitialiseNewTask+0x144>)
 800bf30:	659a      	str	r2, [r3, #88]	@ 0x58
 800bf32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf34:	4a0c      	ldr	r2, [pc, #48]	@ (800bf68 <prvInitialiseNewTask+0x148>)
 800bf36:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bf38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3a:	4a0c      	ldr	r2, [pc, #48]	@ (800bf6c <prvInitialiseNewTask+0x14c>)
 800bf3c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	68f9      	ldr	r1, [r7, #12]
 800bf42:	69b8      	ldr	r0, [r7, #24]
 800bf44:	f001 fcb0 	bl	800d8a8 <pxPortInitialiseStack>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bf4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d002      	beq.n	800bf5a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bf54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf5a:	bf00      	nop
 800bf5c:	3720      	adds	r7, #32
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	2000aab8 	.word	0x2000aab8
 800bf68:	2000ab20 	.word	0x2000ab20
 800bf6c:	2000ab88 	.word	0x2000ab88

0800bf70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bf78:	f001 fdc6 	bl	800db08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bf7c:	4b2d      	ldr	r3, [pc, #180]	@ (800c034 <prvAddNewTaskToReadyList+0xc4>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	3301      	adds	r3, #1
 800bf82:	4a2c      	ldr	r2, [pc, #176]	@ (800c034 <prvAddNewTaskToReadyList+0xc4>)
 800bf84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bf86:	4b2c      	ldr	r3, [pc, #176]	@ (800c038 <prvAddNewTaskToReadyList+0xc8>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d109      	bne.n	800bfa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bf8e:	4a2a      	ldr	r2, [pc, #168]	@ (800c038 <prvAddNewTaskToReadyList+0xc8>)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bf94:	4b27      	ldr	r3, [pc, #156]	@ (800c034 <prvAddNewTaskToReadyList+0xc4>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d110      	bne.n	800bfbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bf9c:	f000 fc6c 	bl	800c878 <prvInitialiseTaskLists>
 800bfa0:	e00d      	b.n	800bfbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bfa2:	4b26      	ldr	r3, [pc, #152]	@ (800c03c <prvAddNewTaskToReadyList+0xcc>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d109      	bne.n	800bfbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bfaa:	4b23      	ldr	r3, [pc, #140]	@ (800c038 <prvAddNewTaskToReadyList+0xc8>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d802      	bhi.n	800bfbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bfb8:	4a1f      	ldr	r2, [pc, #124]	@ (800c038 <prvAddNewTaskToReadyList+0xc8>)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bfbe:	4b20      	ldr	r3, [pc, #128]	@ (800c040 <prvAddNewTaskToReadyList+0xd0>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	4a1e      	ldr	r2, [pc, #120]	@ (800c040 <prvAddNewTaskToReadyList+0xd0>)
 800bfc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bfc8:	4b1d      	ldr	r3, [pc, #116]	@ (800c040 <prvAddNewTaskToReadyList+0xd0>)
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfd4:	4b1b      	ldr	r3, [pc, #108]	@ (800c044 <prvAddNewTaskToReadyList+0xd4>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d903      	bls.n	800bfe4 <prvAddNewTaskToReadyList+0x74>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfe0:	4a18      	ldr	r2, [pc, #96]	@ (800c044 <prvAddNewTaskToReadyList+0xd4>)
 800bfe2:	6013      	str	r3, [r2, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfe8:	4613      	mov	r3, r2
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	4413      	add	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4a15      	ldr	r2, [pc, #84]	@ (800c048 <prvAddNewTaskToReadyList+0xd8>)
 800bff2:	441a      	add	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	3304      	adds	r3, #4
 800bff8:	4619      	mov	r1, r3
 800bffa:	4610      	mov	r0, r2
 800bffc:	f7fe fecd 	bl	800ad9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c000:	f001 fdb4 	bl	800db6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c004:	4b0d      	ldr	r3, [pc, #52]	@ (800c03c <prvAddNewTaskToReadyList+0xcc>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00e      	beq.n	800c02a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c00c:	4b0a      	ldr	r3, [pc, #40]	@ (800c038 <prvAddNewTaskToReadyList+0xc8>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c016:	429a      	cmp	r2, r3
 800c018:	d207      	bcs.n	800c02a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c01a:	4b0c      	ldr	r3, [pc, #48]	@ (800c04c <prvAddNewTaskToReadyList+0xdc>)
 800c01c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c020:	601a      	str	r2, [r3, #0]
 800c022:	f3bf 8f4f 	dsb	sy
 800c026:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c02a:	bf00      	nop
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	20000f60 	.word	0x20000f60
 800c038:	20000a8c 	.word	0x20000a8c
 800c03c:	20000f6c 	.word	0x20000f6c
 800c040:	20000f7c 	.word	0x20000f7c
 800c044:	20000f68 	.word	0x20000f68
 800c048:	20000a90 	.word	0x20000a90
 800c04c:	e000ed04 	.word	0xe000ed04

0800c050 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c058:	f001 fd56 	bl	800db08 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d102      	bne.n	800c068 <vTaskDelete+0x18>
 800c062:	4b2d      	ldr	r3, [pc, #180]	@ (800c118 <vTaskDelete+0xc8>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	e000      	b.n	800c06a <vTaskDelete+0x1a>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	3304      	adds	r3, #4
 800c070:	4618      	mov	r0, r3
 800c072:	f7fe feef 	bl	800ae54 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d004      	beq.n	800c088 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3318      	adds	r3, #24
 800c082:	4618      	mov	r0, r3
 800c084:	f7fe fee6 	bl	800ae54 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c088:	4b24      	ldr	r3, [pc, #144]	@ (800c11c <vTaskDelete+0xcc>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3301      	adds	r3, #1
 800c08e:	4a23      	ldr	r2, [pc, #140]	@ (800c11c <vTaskDelete+0xcc>)
 800c090:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c092:	4b21      	ldr	r3, [pc, #132]	@ (800c118 <vTaskDelete+0xc8>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d10b      	bne.n	800c0b4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	3304      	adds	r3, #4
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	481f      	ldr	r0, [pc, #124]	@ (800c120 <vTaskDelete+0xd0>)
 800c0a4:	f7fe fe79 	bl	800ad9a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c0a8:	4b1e      	ldr	r3, [pc, #120]	@ (800c124 <vTaskDelete+0xd4>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	4a1d      	ldr	r2, [pc, #116]	@ (800c124 <vTaskDelete+0xd4>)
 800c0b0:	6013      	str	r3, [r2, #0]
 800c0b2:	e009      	b.n	800c0c8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c0b4:	4b1c      	ldr	r3, [pc, #112]	@ (800c128 <vTaskDelete+0xd8>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c128 <vTaskDelete+0xd8>)
 800c0bc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f000 fc48 	bl	800c954 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c0c4:	f000 fc7c 	bl	800c9c0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800c0c8:	f001 fd50 	bl	800db6c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c0cc:	4b17      	ldr	r3, [pc, #92]	@ (800c12c <vTaskDelete+0xdc>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d01c      	beq.n	800c10e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800c0d4:	4b10      	ldr	r3, [pc, #64]	@ (800c118 <vTaskDelete+0xc8>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	68fa      	ldr	r2, [r7, #12]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d117      	bne.n	800c10e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c0de:	4b14      	ldr	r3, [pc, #80]	@ (800c130 <vTaskDelete+0xe0>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00b      	beq.n	800c0fe <vTaskDelete+0xae>
	__asm volatile
 800c0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ea:	f383 8811 	msr	BASEPRI, r3
 800c0ee:	f3bf 8f6f 	isb	sy
 800c0f2:	f3bf 8f4f 	dsb	sy
 800c0f6:	60bb      	str	r3, [r7, #8]
}
 800c0f8:	bf00      	nop
 800c0fa:	bf00      	nop
 800c0fc:	e7fd      	b.n	800c0fa <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800c0fe:	4b0d      	ldr	r3, [pc, #52]	@ (800c134 <vTaskDelete+0xe4>)
 800c100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c104:	601a      	str	r2, [r3, #0]
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c10e:	bf00      	nop
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	20000a8c 	.word	0x20000a8c
 800c11c:	20000f7c 	.word	0x20000f7c
 800c120:	20000f34 	.word	0x20000f34
 800c124:	20000f48 	.word	0x20000f48
 800c128:	20000f60 	.word	0x20000f60
 800c12c:	20000f6c 	.word	0x20000f6c
 800c130:	20000f88 	.word	0x20000f88
 800c134:	e000ed04 	.word	0xe000ed04

0800c138 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b08a      	sub	sp, #40	@ 0x28
 800c13c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c13e:	2300      	movs	r3, #0
 800c140:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c142:	2300      	movs	r3, #0
 800c144:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c146:	463a      	mov	r2, r7
 800c148:	1d39      	adds	r1, r7, #4
 800c14a:	f107 0308 	add.w	r3, r7, #8
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fe fdc2 	bl	800acd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c154:	6839      	ldr	r1, [r7, #0]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	68ba      	ldr	r2, [r7, #8]
 800c15a:	9202      	str	r2, [sp, #8]
 800c15c:	9301      	str	r3, [sp, #4]
 800c15e:	2300      	movs	r3, #0
 800c160:	9300      	str	r3, [sp, #0]
 800c162:	2300      	movs	r3, #0
 800c164:	460a      	mov	r2, r1
 800c166:	4924      	ldr	r1, [pc, #144]	@ (800c1f8 <vTaskStartScheduler+0xc0>)
 800c168:	4824      	ldr	r0, [pc, #144]	@ (800c1fc <vTaskStartScheduler+0xc4>)
 800c16a:	f7ff fdb3 	bl	800bcd4 <xTaskCreateStatic>
 800c16e:	4603      	mov	r3, r0
 800c170:	4a23      	ldr	r2, [pc, #140]	@ (800c200 <vTaskStartScheduler+0xc8>)
 800c172:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c174:	4b22      	ldr	r3, [pc, #136]	@ (800c200 <vTaskStartScheduler+0xc8>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d002      	beq.n	800c182 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c17c:	2301      	movs	r3, #1
 800c17e:	617b      	str	r3, [r7, #20]
 800c180:	e001      	b.n	800c186 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c182:	2300      	movs	r3, #0
 800c184:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d102      	bne.n	800c192 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c18c:	f001 f832 	bl	800d1f4 <xTimerCreateTimerTask>
 800c190:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d11b      	bne.n	800c1d0 <vTaskStartScheduler+0x98>
	__asm volatile
 800c198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c19c:	f383 8811 	msr	BASEPRI, r3
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	613b      	str	r3, [r7, #16]
}
 800c1aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c1ac:	4b15      	ldr	r3, [pc, #84]	@ (800c204 <vTaskStartScheduler+0xcc>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	3354      	adds	r3, #84	@ 0x54
 800c1b2:	4a15      	ldr	r2, [pc, #84]	@ (800c208 <vTaskStartScheduler+0xd0>)
 800c1b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c1b6:	4b15      	ldr	r3, [pc, #84]	@ (800c20c <vTaskStartScheduler+0xd4>)
 800c1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c1be:	4b14      	ldr	r3, [pc, #80]	@ (800c210 <vTaskStartScheduler+0xd8>)
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c1c4:	4b13      	ldr	r3, [pc, #76]	@ (800c214 <vTaskStartScheduler+0xdc>)
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c1ca:	f001 fbf9 	bl	800d9c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c1ce:	e00f      	b.n	800c1f0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d6:	d10b      	bne.n	800c1f0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	60fb      	str	r3, [r7, #12]
}
 800c1ea:	bf00      	nop
 800c1ec:	bf00      	nop
 800c1ee:	e7fd      	b.n	800c1ec <vTaskStartScheduler+0xb4>
}
 800c1f0:	bf00      	nop
 800c1f2:	3718      	adds	r7, #24
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	0800f640 	.word	0x0800f640
 800c1fc:	0800c849 	.word	0x0800c849
 800c200:	20000f84 	.word	0x20000f84
 800c204:	20000a8c 	.word	0x20000a8c
 800c208:	20000110 	.word	0x20000110
 800c20c:	20000f80 	.word	0x20000f80
 800c210:	20000f6c 	.word	0x20000f6c
 800c214:	20000f64 	.word	0x20000f64

0800c218 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c218:	b480      	push	{r7}
 800c21a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c21c:	4b04      	ldr	r3, [pc, #16]	@ (800c230 <vTaskSuspendAll+0x18>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	3301      	adds	r3, #1
 800c222:	4a03      	ldr	r2, [pc, #12]	@ (800c230 <vTaskSuspendAll+0x18>)
 800c224:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c226:	bf00      	nop
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr
 800c230:	20000f88 	.word	0x20000f88

0800c234 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c23a:	2300      	movs	r3, #0
 800c23c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c23e:	2300      	movs	r3, #0
 800c240:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c242:	4b42      	ldr	r3, [pc, #264]	@ (800c34c <xTaskResumeAll+0x118>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d10b      	bne.n	800c262 <xTaskResumeAll+0x2e>
	__asm volatile
 800c24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c24e:	f383 8811 	msr	BASEPRI, r3
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	f3bf 8f4f 	dsb	sy
 800c25a:	603b      	str	r3, [r7, #0]
}
 800c25c:	bf00      	nop
 800c25e:	bf00      	nop
 800c260:	e7fd      	b.n	800c25e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c262:	f001 fc51 	bl	800db08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c266:	4b39      	ldr	r3, [pc, #228]	@ (800c34c <xTaskResumeAll+0x118>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	3b01      	subs	r3, #1
 800c26c:	4a37      	ldr	r2, [pc, #220]	@ (800c34c <xTaskResumeAll+0x118>)
 800c26e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c270:	4b36      	ldr	r3, [pc, #216]	@ (800c34c <xTaskResumeAll+0x118>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d162      	bne.n	800c33e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c278:	4b35      	ldr	r3, [pc, #212]	@ (800c350 <xTaskResumeAll+0x11c>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d05e      	beq.n	800c33e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c280:	e02f      	b.n	800c2e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c282:	4b34      	ldr	r3, [pc, #208]	@ (800c354 <xTaskResumeAll+0x120>)
 800c284:	68db      	ldr	r3, [r3, #12]
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	3318      	adds	r3, #24
 800c28e:	4618      	mov	r0, r3
 800c290:	f7fe fde0 	bl	800ae54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	3304      	adds	r3, #4
 800c298:	4618      	mov	r0, r3
 800c29a:	f7fe fddb 	bl	800ae54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2a2:	4b2d      	ldr	r3, [pc, #180]	@ (800c358 <xTaskResumeAll+0x124>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d903      	bls.n	800c2b2 <xTaskResumeAll+0x7e>
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ae:	4a2a      	ldr	r2, [pc, #168]	@ (800c358 <xTaskResumeAll+0x124>)
 800c2b0:	6013      	str	r3, [r2, #0]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4413      	add	r3, r2
 800c2bc:	009b      	lsls	r3, r3, #2
 800c2be:	4a27      	ldr	r2, [pc, #156]	@ (800c35c <xTaskResumeAll+0x128>)
 800c2c0:	441a      	add	r2, r3
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	3304      	adds	r3, #4
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	f7fe fd66 	bl	800ad9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2d2:	4b23      	ldr	r3, [pc, #140]	@ (800c360 <xTaskResumeAll+0x12c>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d302      	bcc.n	800c2e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c2dc:	4b21      	ldr	r3, [pc, #132]	@ (800c364 <xTaskResumeAll+0x130>)
 800c2de:	2201      	movs	r2, #1
 800c2e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2e2:	4b1c      	ldr	r3, [pc, #112]	@ (800c354 <xTaskResumeAll+0x120>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1cb      	bne.n	800c282 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d001      	beq.n	800c2f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c2f0:	f000 fb66 	bl	800c9c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c2f4:	4b1c      	ldr	r3, [pc, #112]	@ (800c368 <xTaskResumeAll+0x134>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d010      	beq.n	800c322 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c300:	f000 f846 	bl	800c390 <xTaskIncrementTick>
 800c304:	4603      	mov	r3, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d002      	beq.n	800c310 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c30a:	4b16      	ldr	r3, [pc, #88]	@ (800c364 <xTaskResumeAll+0x130>)
 800c30c:	2201      	movs	r2, #1
 800c30e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	3b01      	subs	r3, #1
 800c314:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d1f1      	bne.n	800c300 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c31c:	4b12      	ldr	r3, [pc, #72]	@ (800c368 <xTaskResumeAll+0x134>)
 800c31e:	2200      	movs	r2, #0
 800c320:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c322:	4b10      	ldr	r3, [pc, #64]	@ (800c364 <xTaskResumeAll+0x130>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d009      	beq.n	800c33e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c32a:	2301      	movs	r3, #1
 800c32c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c32e:	4b0f      	ldr	r3, [pc, #60]	@ (800c36c <xTaskResumeAll+0x138>)
 800c330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c334:	601a      	str	r2, [r3, #0]
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c33e:	f001 fc15 	bl	800db6c <vPortExitCritical>

	return xAlreadyYielded;
 800c342:	68bb      	ldr	r3, [r7, #8]
}
 800c344:	4618      	mov	r0, r3
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	20000f88 	.word	0x20000f88
 800c350:	20000f60 	.word	0x20000f60
 800c354:	20000f20 	.word	0x20000f20
 800c358:	20000f68 	.word	0x20000f68
 800c35c:	20000a90 	.word	0x20000a90
 800c360:	20000a8c 	.word	0x20000a8c
 800c364:	20000f74 	.word	0x20000f74
 800c368:	20000f70 	.word	0x20000f70
 800c36c:	e000ed04 	.word	0xe000ed04

0800c370 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c376:	4b05      	ldr	r3, [pc, #20]	@ (800c38c <xTaskGetTickCount+0x1c>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c37c:	687b      	ldr	r3, [r7, #4]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	370c      	adds	r7, #12
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	20000f64 	.word	0x20000f64

0800c390 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b086      	sub	sp, #24
 800c394:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c396:	2300      	movs	r3, #0
 800c398:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c39a:	4b4f      	ldr	r3, [pc, #316]	@ (800c4d8 <xTaskIncrementTick+0x148>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	f040 8090 	bne.w	800c4c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c3a4:	4b4d      	ldr	r3, [pc, #308]	@ (800c4dc <xTaskIncrementTick+0x14c>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c3ac:	4a4b      	ldr	r2, [pc, #300]	@ (800c4dc <xTaskIncrementTick+0x14c>)
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d121      	bne.n	800c3fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c3b8:	4b49      	ldr	r3, [pc, #292]	@ (800c4e0 <xTaskIncrementTick+0x150>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00b      	beq.n	800c3da <xTaskIncrementTick+0x4a>
	__asm volatile
 800c3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c6:	f383 8811 	msr	BASEPRI, r3
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	603b      	str	r3, [r7, #0]
}
 800c3d4:	bf00      	nop
 800c3d6:	bf00      	nop
 800c3d8:	e7fd      	b.n	800c3d6 <xTaskIncrementTick+0x46>
 800c3da:	4b41      	ldr	r3, [pc, #260]	@ (800c4e0 <xTaskIncrementTick+0x150>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	60fb      	str	r3, [r7, #12]
 800c3e0:	4b40      	ldr	r3, [pc, #256]	@ (800c4e4 <xTaskIncrementTick+0x154>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a3e      	ldr	r2, [pc, #248]	@ (800c4e0 <xTaskIncrementTick+0x150>)
 800c3e6:	6013      	str	r3, [r2, #0]
 800c3e8:	4a3e      	ldr	r2, [pc, #248]	@ (800c4e4 <xTaskIncrementTick+0x154>)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	6013      	str	r3, [r2, #0]
 800c3ee:	4b3e      	ldr	r3, [pc, #248]	@ (800c4e8 <xTaskIncrementTick+0x158>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	4a3c      	ldr	r2, [pc, #240]	@ (800c4e8 <xTaskIncrementTick+0x158>)
 800c3f6:	6013      	str	r3, [r2, #0]
 800c3f8:	f000 fae2 	bl	800c9c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c3fc:	4b3b      	ldr	r3, [pc, #236]	@ (800c4ec <xTaskIncrementTick+0x15c>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	693a      	ldr	r2, [r7, #16]
 800c402:	429a      	cmp	r2, r3
 800c404:	d349      	bcc.n	800c49a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c406:	4b36      	ldr	r3, [pc, #216]	@ (800c4e0 <xTaskIncrementTick+0x150>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d104      	bne.n	800c41a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c410:	4b36      	ldr	r3, [pc, #216]	@ (800c4ec <xTaskIncrementTick+0x15c>)
 800c412:	f04f 32ff 	mov.w	r2, #4294967295
 800c416:	601a      	str	r2, [r3, #0]
					break;
 800c418:	e03f      	b.n	800c49a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c41a:	4b31      	ldr	r3, [pc, #196]	@ (800c4e0 <xTaskIncrementTick+0x150>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c42a:	693a      	ldr	r2, [r7, #16]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d203      	bcs.n	800c43a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c432:	4a2e      	ldr	r2, [pc, #184]	@ (800c4ec <xTaskIncrementTick+0x15c>)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c438:	e02f      	b.n	800c49a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	3304      	adds	r3, #4
 800c43e:	4618      	mov	r0, r3
 800c440:	f7fe fd08 	bl	800ae54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d004      	beq.n	800c456 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	3318      	adds	r3, #24
 800c450:	4618      	mov	r0, r3
 800c452:	f7fe fcff 	bl	800ae54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c45a:	4b25      	ldr	r3, [pc, #148]	@ (800c4f0 <xTaskIncrementTick+0x160>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d903      	bls.n	800c46a <xTaskIncrementTick+0xda>
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c466:	4a22      	ldr	r2, [pc, #136]	@ (800c4f0 <xTaskIncrementTick+0x160>)
 800c468:	6013      	str	r3, [r2, #0]
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c46e:	4613      	mov	r3, r2
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	4413      	add	r3, r2
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	4a1f      	ldr	r2, [pc, #124]	@ (800c4f4 <xTaskIncrementTick+0x164>)
 800c478:	441a      	add	r2, r3
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	3304      	adds	r3, #4
 800c47e:	4619      	mov	r1, r3
 800c480:	4610      	mov	r0, r2
 800c482:	f7fe fc8a 	bl	800ad9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c48a:	4b1b      	ldr	r3, [pc, #108]	@ (800c4f8 <xTaskIncrementTick+0x168>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c490:	429a      	cmp	r2, r3
 800c492:	d3b8      	bcc.n	800c406 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c494:	2301      	movs	r3, #1
 800c496:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c498:	e7b5      	b.n	800c406 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c49a:	4b17      	ldr	r3, [pc, #92]	@ (800c4f8 <xTaskIncrementTick+0x168>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4a0:	4914      	ldr	r1, [pc, #80]	@ (800c4f4 <xTaskIncrementTick+0x164>)
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	4413      	add	r3, r2
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	440b      	add	r3, r1
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d901      	bls.n	800c4b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c4b6:	4b11      	ldr	r3, [pc, #68]	@ (800c4fc <xTaskIncrementTick+0x16c>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d007      	beq.n	800c4ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	617b      	str	r3, [r7, #20]
 800c4c2:	e004      	b.n	800c4ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c4c4:	4b0e      	ldr	r3, [pc, #56]	@ (800c500 <xTaskIncrementTick+0x170>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	4a0d      	ldr	r2, [pc, #52]	@ (800c500 <xTaskIncrementTick+0x170>)
 800c4cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c4ce:	697b      	ldr	r3, [r7, #20]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3718      	adds	r7, #24
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	20000f88 	.word	0x20000f88
 800c4dc:	20000f64 	.word	0x20000f64
 800c4e0:	20000f18 	.word	0x20000f18
 800c4e4:	20000f1c 	.word	0x20000f1c
 800c4e8:	20000f78 	.word	0x20000f78
 800c4ec:	20000f80 	.word	0x20000f80
 800c4f0:	20000f68 	.word	0x20000f68
 800c4f4:	20000a90 	.word	0x20000a90
 800c4f8:	20000a8c 	.word	0x20000a8c
 800c4fc:	20000f74 	.word	0x20000f74
 800c500:	20000f70 	.word	0x20000f70

0800c504 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c50a:	4b2b      	ldr	r3, [pc, #172]	@ (800c5b8 <vTaskSwitchContext+0xb4>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d003      	beq.n	800c51a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c512:	4b2a      	ldr	r3, [pc, #168]	@ (800c5bc <vTaskSwitchContext+0xb8>)
 800c514:	2201      	movs	r2, #1
 800c516:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c518:	e047      	b.n	800c5aa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c51a:	4b28      	ldr	r3, [pc, #160]	@ (800c5bc <vTaskSwitchContext+0xb8>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c520:	4b27      	ldr	r3, [pc, #156]	@ (800c5c0 <vTaskSwitchContext+0xbc>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	60fb      	str	r3, [r7, #12]
 800c526:	e011      	b.n	800c54c <vTaskSwitchContext+0x48>
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d10b      	bne.n	800c546 <vTaskSwitchContext+0x42>
	__asm volatile
 800c52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	607b      	str	r3, [r7, #4]
}
 800c540:	bf00      	nop
 800c542:	bf00      	nop
 800c544:	e7fd      	b.n	800c542 <vTaskSwitchContext+0x3e>
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	3b01      	subs	r3, #1
 800c54a:	60fb      	str	r3, [r7, #12]
 800c54c:	491d      	ldr	r1, [pc, #116]	@ (800c5c4 <vTaskSwitchContext+0xc0>)
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	4613      	mov	r3, r2
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	4413      	add	r3, r2
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	440b      	add	r3, r1
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d0e3      	beq.n	800c528 <vTaskSwitchContext+0x24>
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	4613      	mov	r3, r2
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	4413      	add	r3, r2
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	4a16      	ldr	r2, [pc, #88]	@ (800c5c4 <vTaskSwitchContext+0xc0>)
 800c56c:	4413      	add	r3, r2
 800c56e:	60bb      	str	r3, [r7, #8]
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	685a      	ldr	r2, [r3, #4]
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	605a      	str	r2, [r3, #4]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	685a      	ldr	r2, [r3, #4]
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	3308      	adds	r3, #8
 800c582:	429a      	cmp	r2, r3
 800c584:	d104      	bne.n	800c590 <vTaskSwitchContext+0x8c>
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	685a      	ldr	r2, [r3, #4]
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	605a      	str	r2, [r3, #4]
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	4a0c      	ldr	r2, [pc, #48]	@ (800c5c8 <vTaskSwitchContext+0xc4>)
 800c598:	6013      	str	r3, [r2, #0]
 800c59a:	4a09      	ldr	r2, [pc, #36]	@ (800c5c0 <vTaskSwitchContext+0xbc>)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c5a0:	4b09      	ldr	r3, [pc, #36]	@ (800c5c8 <vTaskSwitchContext+0xc4>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	3354      	adds	r3, #84	@ 0x54
 800c5a6:	4a09      	ldr	r2, [pc, #36]	@ (800c5cc <vTaskSwitchContext+0xc8>)
 800c5a8:	6013      	str	r3, [r2, #0]
}
 800c5aa:	bf00      	nop
 800c5ac:	3714      	adds	r7, #20
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr
 800c5b6:	bf00      	nop
 800c5b8:	20000f88 	.word	0x20000f88
 800c5bc:	20000f74 	.word	0x20000f74
 800c5c0:	20000f68 	.word	0x20000f68
 800c5c4:	20000a90 	.word	0x20000a90
 800c5c8:	20000a8c 	.word	0x20000a8c
 800c5cc:	20000110 	.word	0x20000110

0800c5d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d10b      	bne.n	800c5f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	60fb      	str	r3, [r7, #12]
}
 800c5f2:	bf00      	nop
 800c5f4:	bf00      	nop
 800c5f6:	e7fd      	b.n	800c5f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c5f8:	4b07      	ldr	r3, [pc, #28]	@ (800c618 <vTaskPlaceOnEventList+0x48>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	3318      	adds	r3, #24
 800c5fe:	4619      	mov	r1, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f7fe fbee 	bl	800ade2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c606:	2101      	movs	r1, #1
 800c608:	6838      	ldr	r0, [r7, #0]
 800c60a:	f000 fd9f 	bl	800d14c <prvAddCurrentTaskToDelayedList>
}
 800c60e:	bf00      	nop
 800c610:	3710      	adds	r7, #16
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	20000a8c 	.word	0x20000a8c

0800c61c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b086      	sub	sp, #24
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d10b      	bne.n	800c646 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c632:	f383 8811 	msr	BASEPRI, r3
 800c636:	f3bf 8f6f 	isb	sy
 800c63a:	f3bf 8f4f 	dsb	sy
 800c63e:	617b      	str	r3, [r7, #20]
}
 800c640:	bf00      	nop
 800c642:	bf00      	nop
 800c644:	e7fd      	b.n	800c642 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c646:	4b0a      	ldr	r3, [pc, #40]	@ (800c670 <vTaskPlaceOnEventListRestricted+0x54>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	3318      	adds	r3, #24
 800c64c:	4619      	mov	r1, r3
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f7fe fba3 	bl	800ad9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d002      	beq.n	800c660 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c65a:	f04f 33ff 	mov.w	r3, #4294967295
 800c65e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c660:	6879      	ldr	r1, [r7, #4]
 800c662:	68b8      	ldr	r0, [r7, #8]
 800c664:	f000 fd72 	bl	800d14c <prvAddCurrentTaskToDelayedList>
	}
 800c668:	bf00      	nop
 800c66a:	3718      	adds	r7, #24
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	20000a8c 	.word	0x20000a8c

0800c674 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b086      	sub	sp, #24
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d10b      	bne.n	800c6a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c68e:	f383 8811 	msr	BASEPRI, r3
 800c692:	f3bf 8f6f 	isb	sy
 800c696:	f3bf 8f4f 	dsb	sy
 800c69a:	60fb      	str	r3, [r7, #12]
}
 800c69c:	bf00      	nop
 800c69e:	bf00      	nop
 800c6a0:	e7fd      	b.n	800c69e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	3318      	adds	r3, #24
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fe fbd4 	bl	800ae54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6ac:	4b1d      	ldr	r3, [pc, #116]	@ (800c724 <xTaskRemoveFromEventList+0xb0>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d11d      	bne.n	800c6f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7fe fbcb 	bl	800ae54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6c2:	4b19      	ldr	r3, [pc, #100]	@ (800c728 <xTaskRemoveFromEventList+0xb4>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d903      	bls.n	800c6d2 <xTaskRemoveFromEventList+0x5e>
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ce:	4a16      	ldr	r2, [pc, #88]	@ (800c728 <xTaskRemoveFromEventList+0xb4>)
 800c6d0:	6013      	str	r3, [r2, #0]
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	4413      	add	r3, r2
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	4a13      	ldr	r2, [pc, #76]	@ (800c72c <xTaskRemoveFromEventList+0xb8>)
 800c6e0:	441a      	add	r2, r3
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	4610      	mov	r0, r2
 800c6ea:	f7fe fb56 	bl	800ad9a <vListInsertEnd>
 800c6ee:	e005      	b.n	800c6fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	3318      	adds	r3, #24
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	480e      	ldr	r0, [pc, #56]	@ (800c730 <xTaskRemoveFromEventList+0xbc>)
 800c6f8:	f7fe fb4f 	bl	800ad9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c700:	4b0c      	ldr	r3, [pc, #48]	@ (800c734 <xTaskRemoveFromEventList+0xc0>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c706:	429a      	cmp	r2, r3
 800c708:	d905      	bls.n	800c716 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c70a:	2301      	movs	r3, #1
 800c70c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c70e:	4b0a      	ldr	r3, [pc, #40]	@ (800c738 <xTaskRemoveFromEventList+0xc4>)
 800c710:	2201      	movs	r2, #1
 800c712:	601a      	str	r2, [r3, #0]
 800c714:	e001      	b.n	800c71a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c716:	2300      	movs	r3, #0
 800c718:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c71a:	697b      	ldr	r3, [r7, #20]
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3718      	adds	r7, #24
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	20000f88 	.word	0x20000f88
 800c728:	20000f68 	.word	0x20000f68
 800c72c:	20000a90 	.word	0x20000a90
 800c730:	20000f20 	.word	0x20000f20
 800c734:	20000a8c 	.word	0x20000a8c
 800c738:	20000f74 	.word	0x20000f74

0800c73c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c744:	4b06      	ldr	r3, [pc, #24]	@ (800c760 <vTaskInternalSetTimeOutState+0x24>)
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c74c:	4b05      	ldr	r3, [pc, #20]	@ (800c764 <vTaskInternalSetTimeOutState+0x28>)
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	605a      	str	r2, [r3, #4]
}
 800c754:	bf00      	nop
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	20000f78 	.word	0x20000f78
 800c764:	20000f64 	.word	0x20000f64

0800c768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b088      	sub	sp, #32
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10b      	bne.n	800c790 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c77c:	f383 8811 	msr	BASEPRI, r3
 800c780:	f3bf 8f6f 	isb	sy
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	613b      	str	r3, [r7, #16]
}
 800c78a:	bf00      	nop
 800c78c:	bf00      	nop
 800c78e:	e7fd      	b.n	800c78c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d10b      	bne.n	800c7ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c79a:	f383 8811 	msr	BASEPRI, r3
 800c79e:	f3bf 8f6f 	isb	sy
 800c7a2:	f3bf 8f4f 	dsb	sy
 800c7a6:	60fb      	str	r3, [r7, #12]
}
 800c7a8:	bf00      	nop
 800c7aa:	bf00      	nop
 800c7ac:	e7fd      	b.n	800c7aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c7ae:	f001 f9ab 	bl	800db08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c7b2:	4b1d      	ldr	r3, [pc, #116]	@ (800c828 <xTaskCheckForTimeOut+0xc0>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	69ba      	ldr	r2, [r7, #24]
 800c7be:	1ad3      	subs	r3, r2, r3
 800c7c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ca:	d102      	bne.n	800c7d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	61fb      	str	r3, [r7, #28]
 800c7d0:	e023      	b.n	800c81a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	4b15      	ldr	r3, [pc, #84]	@ (800c82c <xTaskCheckForTimeOut+0xc4>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d007      	beq.n	800c7ee <xTaskCheckForTimeOut+0x86>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	69ba      	ldr	r2, [r7, #24]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d302      	bcc.n	800c7ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	61fb      	str	r3, [r7, #28]
 800c7ec:	e015      	b.n	800c81a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	697a      	ldr	r2, [r7, #20]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d20b      	bcs.n	800c810 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	1ad2      	subs	r2, r2, r3
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f7ff ff99 	bl	800c73c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c80a:	2300      	movs	r3, #0
 800c80c:	61fb      	str	r3, [r7, #28]
 800c80e:	e004      	b.n	800c81a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	2200      	movs	r2, #0
 800c814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c816:	2301      	movs	r3, #1
 800c818:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c81a:	f001 f9a7 	bl	800db6c <vPortExitCritical>

	return xReturn;
 800c81e:	69fb      	ldr	r3, [r7, #28]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3720      	adds	r7, #32
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	20000f64 	.word	0x20000f64
 800c82c:	20000f78 	.word	0x20000f78

0800c830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c830:	b480      	push	{r7}
 800c832:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c834:	4b03      	ldr	r3, [pc, #12]	@ (800c844 <vTaskMissedYield+0x14>)
 800c836:	2201      	movs	r2, #1
 800c838:	601a      	str	r2, [r3, #0]
}
 800c83a:	bf00      	nop
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr
 800c844:	20000f74 	.word	0x20000f74

0800c848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c850:	f000 f852 	bl	800c8f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c854:	4b06      	ldr	r3, [pc, #24]	@ (800c870 <prvIdleTask+0x28>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d9f9      	bls.n	800c850 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c85c:	4b05      	ldr	r3, [pc, #20]	@ (800c874 <prvIdleTask+0x2c>)
 800c85e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c862:	601a      	str	r2, [r3, #0]
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c86c:	e7f0      	b.n	800c850 <prvIdleTask+0x8>
 800c86e:	bf00      	nop
 800c870:	20000a90 	.word	0x20000a90
 800c874:	e000ed04 	.word	0xe000ed04

0800c878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c87e:	2300      	movs	r3, #0
 800c880:	607b      	str	r3, [r7, #4]
 800c882:	e00c      	b.n	800c89e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	4613      	mov	r3, r2
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	4413      	add	r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	4a12      	ldr	r2, [pc, #72]	@ (800c8d8 <prvInitialiseTaskLists+0x60>)
 800c890:	4413      	add	r3, r2
 800c892:	4618      	mov	r0, r3
 800c894:	f7fe fa54 	bl	800ad40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	3301      	adds	r3, #1
 800c89c:	607b      	str	r3, [r7, #4]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2b37      	cmp	r3, #55	@ 0x37
 800c8a2:	d9ef      	bls.n	800c884 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c8a4:	480d      	ldr	r0, [pc, #52]	@ (800c8dc <prvInitialiseTaskLists+0x64>)
 800c8a6:	f7fe fa4b 	bl	800ad40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c8aa:	480d      	ldr	r0, [pc, #52]	@ (800c8e0 <prvInitialiseTaskLists+0x68>)
 800c8ac:	f7fe fa48 	bl	800ad40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c8b0:	480c      	ldr	r0, [pc, #48]	@ (800c8e4 <prvInitialiseTaskLists+0x6c>)
 800c8b2:	f7fe fa45 	bl	800ad40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c8b6:	480c      	ldr	r0, [pc, #48]	@ (800c8e8 <prvInitialiseTaskLists+0x70>)
 800c8b8:	f7fe fa42 	bl	800ad40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c8bc:	480b      	ldr	r0, [pc, #44]	@ (800c8ec <prvInitialiseTaskLists+0x74>)
 800c8be:	f7fe fa3f 	bl	800ad40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c8c2:	4b0b      	ldr	r3, [pc, #44]	@ (800c8f0 <prvInitialiseTaskLists+0x78>)
 800c8c4:	4a05      	ldr	r2, [pc, #20]	@ (800c8dc <prvInitialiseTaskLists+0x64>)
 800c8c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c8c8:	4b0a      	ldr	r3, [pc, #40]	@ (800c8f4 <prvInitialiseTaskLists+0x7c>)
 800c8ca:	4a05      	ldr	r2, [pc, #20]	@ (800c8e0 <prvInitialiseTaskLists+0x68>)
 800c8cc:	601a      	str	r2, [r3, #0]
}
 800c8ce:	bf00      	nop
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	20000a90 	.word	0x20000a90
 800c8dc:	20000ef0 	.word	0x20000ef0
 800c8e0:	20000f04 	.word	0x20000f04
 800c8e4:	20000f20 	.word	0x20000f20
 800c8e8:	20000f34 	.word	0x20000f34
 800c8ec:	20000f4c 	.word	0x20000f4c
 800c8f0:	20000f18 	.word	0x20000f18
 800c8f4:	20000f1c 	.word	0x20000f1c

0800c8f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c8fe:	e019      	b.n	800c934 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c900:	f001 f902 	bl	800db08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c904:	4b10      	ldr	r3, [pc, #64]	@ (800c948 <prvCheckTasksWaitingTermination+0x50>)
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	3304      	adds	r3, #4
 800c910:	4618      	mov	r0, r3
 800c912:	f7fe fa9f 	bl	800ae54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c916:	4b0d      	ldr	r3, [pc, #52]	@ (800c94c <prvCheckTasksWaitingTermination+0x54>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	3b01      	subs	r3, #1
 800c91c:	4a0b      	ldr	r2, [pc, #44]	@ (800c94c <prvCheckTasksWaitingTermination+0x54>)
 800c91e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c920:	4b0b      	ldr	r3, [pc, #44]	@ (800c950 <prvCheckTasksWaitingTermination+0x58>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	3b01      	subs	r3, #1
 800c926:	4a0a      	ldr	r2, [pc, #40]	@ (800c950 <prvCheckTasksWaitingTermination+0x58>)
 800c928:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c92a:	f001 f91f 	bl	800db6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 f810 	bl	800c954 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c934:	4b06      	ldr	r3, [pc, #24]	@ (800c950 <prvCheckTasksWaitingTermination+0x58>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d1e1      	bne.n	800c900 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c93c:	bf00      	nop
 800c93e:	bf00      	nop
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	20000f34 	.word	0x20000f34
 800c94c:	20000f60 	.word	0x20000f60
 800c950:	20000f48 	.word	0x20000f48

0800c954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	3354      	adds	r3, #84	@ 0x54
 800c960:	4618      	mov	r0, r3
 800c962:	f002 f95b 	bl	800ec1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d108      	bne.n	800c982 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c974:	4618      	mov	r0, r3
 800c976:	f001 fab7 	bl	800dee8 <vPortFree>
				vPortFree( pxTCB );
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f001 fab4 	bl	800dee8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c980:	e019      	b.n	800c9b6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d103      	bne.n	800c994 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f001 faab 	bl	800dee8 <vPortFree>
	}
 800c992:	e010      	b.n	800c9b6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c99a:	2b02      	cmp	r3, #2
 800c99c:	d00b      	beq.n	800c9b6 <prvDeleteTCB+0x62>
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	60fb      	str	r3, [r7, #12]
}
 800c9b0:	bf00      	nop
 800c9b2:	bf00      	nop
 800c9b4:	e7fd      	b.n	800c9b2 <prvDeleteTCB+0x5e>
	}
 800c9b6:	bf00      	nop
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
	...

0800c9c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9c6:	4b0c      	ldr	r3, [pc, #48]	@ (800c9f8 <prvResetNextTaskUnblockTime+0x38>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d104      	bne.n	800c9da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9d0:	4b0a      	ldr	r3, [pc, #40]	@ (800c9fc <prvResetNextTaskUnblockTime+0x3c>)
 800c9d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c9d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c9d8:	e008      	b.n	800c9ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9da:	4b07      	ldr	r3, [pc, #28]	@ (800c9f8 <prvResetNextTaskUnblockTime+0x38>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	4a04      	ldr	r2, [pc, #16]	@ (800c9fc <prvResetNextTaskUnblockTime+0x3c>)
 800c9ea:	6013      	str	r3, [r2, #0]
}
 800c9ec:	bf00      	nop
 800c9ee:	370c      	adds	r7, #12
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr
 800c9f8:	20000f18 	.word	0x20000f18
 800c9fc:	20000f80 	.word	0x20000f80

0800ca00 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ca06:	4b05      	ldr	r3, [pc, #20]	@ (800ca1c <xTaskGetCurrentTaskHandle+0x1c>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ca0c:	687b      	ldr	r3, [r7, #4]
	}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	20000a8c 	.word	0x20000a8c

0800ca20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca26:	4b0b      	ldr	r3, [pc, #44]	@ (800ca54 <xTaskGetSchedulerState+0x34>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d102      	bne.n	800ca34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	607b      	str	r3, [r7, #4]
 800ca32:	e008      	b.n	800ca46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca34:	4b08      	ldr	r3, [pc, #32]	@ (800ca58 <xTaskGetSchedulerState+0x38>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d102      	bne.n	800ca42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca3c:	2302      	movs	r3, #2
 800ca3e:	607b      	str	r3, [r7, #4]
 800ca40:	e001      	b.n	800ca46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca42:	2300      	movs	r3, #0
 800ca44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca46:	687b      	ldr	r3, [r7, #4]
	}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	370c      	adds	r7, #12
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr
 800ca54:	20000f6c 	.word	0x20000f6c
 800ca58:	20000f88 	.word	0x20000f88

0800ca5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d051      	beq.n	800cb16 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca76:	4b2a      	ldr	r3, [pc, #168]	@ (800cb20 <xTaskPriorityInherit+0xc4>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d241      	bcs.n	800cb04 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	699b      	ldr	r3, [r3, #24]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	db06      	blt.n	800ca96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca88:	4b25      	ldr	r3, [pc, #148]	@ (800cb20 <xTaskPriorityInherit+0xc4>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca8e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	6959      	ldr	r1, [r3, #20]
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca9e:	4613      	mov	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	4413      	add	r3, r2
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	4a1f      	ldr	r2, [pc, #124]	@ (800cb24 <xTaskPriorityInherit+0xc8>)
 800caa8:	4413      	add	r3, r2
 800caaa:	4299      	cmp	r1, r3
 800caac:	d122      	bne.n	800caf4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	3304      	adds	r3, #4
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7fe f9ce 	bl	800ae54 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cab8:	4b19      	ldr	r3, [pc, #100]	@ (800cb20 <xTaskPriorityInherit+0xc4>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cac6:	4b18      	ldr	r3, [pc, #96]	@ (800cb28 <xTaskPriorityInherit+0xcc>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d903      	bls.n	800cad6 <xTaskPriorityInherit+0x7a>
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cad2:	4a15      	ldr	r2, [pc, #84]	@ (800cb28 <xTaskPriorityInherit+0xcc>)
 800cad4:	6013      	str	r3, [r2, #0]
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cada:	4613      	mov	r3, r2
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	4413      	add	r3, r2
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4a10      	ldr	r2, [pc, #64]	@ (800cb24 <xTaskPriorityInherit+0xc8>)
 800cae4:	441a      	add	r2, r3
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	3304      	adds	r3, #4
 800caea:	4619      	mov	r1, r3
 800caec:	4610      	mov	r0, r2
 800caee:	f7fe f954 	bl	800ad9a <vListInsertEnd>
 800caf2:	e004      	b.n	800cafe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800caf4:	4b0a      	ldr	r3, [pc, #40]	@ (800cb20 <xTaskPriorityInherit+0xc4>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cafe:	2301      	movs	r3, #1
 800cb00:	60fb      	str	r3, [r7, #12]
 800cb02:	e008      	b.n	800cb16 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb08:	4b05      	ldr	r3, [pc, #20]	@ (800cb20 <xTaskPriorityInherit+0xc4>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d201      	bcs.n	800cb16 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cb12:	2301      	movs	r3, #1
 800cb14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb16:	68fb      	ldr	r3, [r7, #12]
	}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	20000a8c 	.word	0x20000a8c
 800cb24:	20000a90 	.word	0x20000a90
 800cb28:	20000f68 	.word	0x20000f68

0800cb2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b086      	sub	sp, #24
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d058      	beq.n	800cbf4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cb42:	4b2f      	ldr	r3, [pc, #188]	@ (800cc00 <xTaskPriorityDisinherit+0xd4>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	693a      	ldr	r2, [r7, #16]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d00b      	beq.n	800cb64 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cb4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb50:	f383 8811 	msr	BASEPRI, r3
 800cb54:	f3bf 8f6f 	isb	sy
 800cb58:	f3bf 8f4f 	dsb	sy
 800cb5c:	60fb      	str	r3, [r7, #12]
}
 800cb5e:	bf00      	nop
 800cb60:	bf00      	nop
 800cb62:	e7fd      	b.n	800cb60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d10b      	bne.n	800cb84 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cb6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb70:	f383 8811 	msr	BASEPRI, r3
 800cb74:	f3bf 8f6f 	isb	sy
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	60bb      	str	r3, [r7, #8]
}
 800cb7e:	bf00      	nop
 800cb80:	bf00      	nop
 800cb82:	e7fd      	b.n	800cb80 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb88:	1e5a      	subs	r2, r3, #1
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d02c      	beq.n	800cbf4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d128      	bne.n	800cbf4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	3304      	adds	r3, #4
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7fe f954 	bl	800ae54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbc4:	4b0f      	ldr	r3, [pc, #60]	@ (800cc04 <xTaskPriorityDisinherit+0xd8>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d903      	bls.n	800cbd4 <xTaskPriorityDisinherit+0xa8>
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbd0:	4a0c      	ldr	r2, [pc, #48]	@ (800cc04 <xTaskPriorityDisinherit+0xd8>)
 800cbd2:	6013      	str	r3, [r2, #0]
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbd8:	4613      	mov	r3, r2
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	4413      	add	r3, r2
 800cbde:	009b      	lsls	r3, r3, #2
 800cbe0:	4a09      	ldr	r2, [pc, #36]	@ (800cc08 <xTaskPriorityDisinherit+0xdc>)
 800cbe2:	441a      	add	r2, r3
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	3304      	adds	r3, #4
 800cbe8:	4619      	mov	r1, r3
 800cbea:	4610      	mov	r0, r2
 800cbec:	f7fe f8d5 	bl	800ad9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cbf4:	697b      	ldr	r3, [r7, #20]
	}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3718      	adds	r7, #24
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	20000a8c 	.word	0x20000a8c
 800cc04:	20000f68 	.word	0x20000f68
 800cc08:	20000a90 	.word	0x20000a90

0800cc0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b088      	sub	sp, #32
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d06c      	beq.n	800ccfe <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d10b      	bne.n	800cc44 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800cc2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc30:	f383 8811 	msr	BASEPRI, r3
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	60fb      	str	r3, [r7, #12]
}
 800cc3e:	bf00      	nop
 800cc40:	bf00      	nop
 800cc42:	e7fd      	b.n	800cc40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc48:	683a      	ldr	r2, [r7, #0]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d902      	bls.n	800cc54 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	61fb      	str	r3, [r7, #28]
 800cc52:	e002      	b.n	800cc5a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc58:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc5e:	69fa      	ldr	r2, [r7, #28]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d04c      	beq.n	800ccfe <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc68:	697a      	ldr	r2, [r7, #20]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d147      	bne.n	800ccfe <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cc6e:	4b26      	ldr	r3, [pc, #152]	@ (800cd08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	69ba      	ldr	r2, [r7, #24]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d10b      	bne.n	800cc90 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800cc78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc7c:	f383 8811 	msr	BASEPRI, r3
 800cc80:	f3bf 8f6f 	isb	sy
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	60bb      	str	r3, [r7, #8]
}
 800cc8a:	bf00      	nop
 800cc8c:	bf00      	nop
 800cc8e:	e7fd      	b.n	800cc8c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cc90:	69bb      	ldr	r3, [r7, #24]
 800cc92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	69fa      	ldr	r2, [r7, #28]
 800cc9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	699b      	ldr	r3, [r3, #24]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	db04      	blt.n	800ccae <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	6959      	ldr	r1, [r3, #20]
 800ccb2:	693a      	ldr	r2, [r7, #16]
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	4413      	add	r3, r2
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	4a13      	ldr	r2, [pc, #76]	@ (800cd0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ccbe:	4413      	add	r3, r2
 800ccc0:	4299      	cmp	r1, r3
 800ccc2:	d11c      	bne.n	800ccfe <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	3304      	adds	r3, #4
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7fe f8c3 	bl	800ae54 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccd2:	4b0f      	ldr	r3, [pc, #60]	@ (800cd10 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d903      	bls.n	800cce2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ccda:	69bb      	ldr	r3, [r7, #24]
 800ccdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccde:	4a0c      	ldr	r2, [pc, #48]	@ (800cd10 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cce0:	6013      	str	r3, [r2, #0]
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cce6:	4613      	mov	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	4a07      	ldr	r2, [pc, #28]	@ (800cd0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ccf0:	441a      	add	r2, r3
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	3304      	adds	r3, #4
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	4610      	mov	r0, r2
 800ccfa:	f7fe f84e 	bl	800ad9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ccfe:	bf00      	nop
 800cd00:	3720      	adds	r7, #32
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	20000a8c 	.word	0x20000a8c
 800cd0c:	20000a90 	.word	0x20000a90
 800cd10:	20000f68 	.word	0x20000f68

0800cd14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cd14:	b480      	push	{r7}
 800cd16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cd18:	4b07      	ldr	r3, [pc, #28]	@ (800cd38 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d004      	beq.n	800cd2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cd20:	4b05      	ldr	r3, [pc, #20]	@ (800cd38 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cd26:	3201      	adds	r2, #1
 800cd28:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800cd2a:	4b03      	ldr	r3, [pc, #12]	@ (800cd38 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
	}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr
 800cd38:	20000a8c 	.word	0x20000a8c

0800cd3c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b086      	sub	sp, #24
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800cd4a:	f000 fedd 	bl	800db08 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800cd4e:	4b29      	ldr	r3, [pc, #164]	@ (800cdf4 <xTaskNotifyWait+0xb8>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	2b02      	cmp	r3, #2
 800cd5a:	d01c      	beq.n	800cd96 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800cd5c:	4b25      	ldr	r3, [pc, #148]	@ (800cdf4 <xTaskNotifyWait+0xb8>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	43d2      	mvns	r2, r2
 800cd68:	400a      	ands	r2, r1
 800cd6a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800cd6e:	4b21      	ldr	r3, [pc, #132]	@ (800cdf4 <xTaskNotifyWait+0xb8>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00b      	beq.n	800cd96 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd7e:	2101      	movs	r1, #1
 800cd80:	6838      	ldr	r0, [r7, #0]
 800cd82:	f000 f9e3 	bl	800d14c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800cd86:	4b1c      	ldr	r3, [pc, #112]	@ (800cdf8 <xTaskNotifyWait+0xbc>)
 800cd88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd8c:	601a      	str	r2, [r3, #0]
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cd96:	f000 fee9 	bl	800db6c <vPortExitCritical>

		taskENTER_CRITICAL();
 800cd9a:	f000 feb5 	bl	800db08 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d005      	beq.n	800cdb0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800cda4:	4b13      	ldr	r3, [pc, #76]	@ (800cdf4 <xTaskNotifyWait+0xb8>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800cdb0:	4b10      	ldr	r3, [pc, #64]	@ (800cdf4 <xTaskNotifyWait+0xb8>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	2b02      	cmp	r3, #2
 800cdbc:	d002      	beq.n	800cdc4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	617b      	str	r3, [r7, #20]
 800cdc2:	e00a      	b.n	800cdda <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800cdc4:	4b0b      	ldr	r3, [pc, #44]	@ (800cdf4 <xTaskNotifyWait+0xb8>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800cdcc:	68ba      	ldr	r2, [r7, #8]
 800cdce:	43d2      	mvns	r2, r2
 800cdd0:	400a      	ands	r2, r1
 800cdd2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cdda:	4b06      	ldr	r3, [pc, #24]	@ (800cdf4 <xTaskNotifyWait+0xb8>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2200      	movs	r2, #0
 800cde0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800cde4:	f000 fec2 	bl	800db6c <vPortExitCritical>

		return xReturn;
 800cde8:	697b      	ldr	r3, [r7, #20]
	}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3718      	adds	r7, #24
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	20000a8c 	.word	0x20000a8c
 800cdf8:	e000ed04 	.word	0xe000ed04

0800cdfc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b08a      	sub	sp, #40	@ 0x28
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	603b      	str	r3, [r7, #0]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d10b      	bne.n	800ce2e <xTaskGenericNotify+0x32>
	__asm volatile
 800ce16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce1a:	f383 8811 	msr	BASEPRI, r3
 800ce1e:	f3bf 8f6f 	isb	sy
 800ce22:	f3bf 8f4f 	dsb	sy
 800ce26:	61bb      	str	r3, [r7, #24]
}
 800ce28:	bf00      	nop
 800ce2a:	bf00      	nop
 800ce2c:	e7fd      	b.n	800ce2a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ce32:	f000 fe69 	bl	800db08 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d004      	beq.n	800ce46 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ce3c:	6a3b      	ldr	r3, [r7, #32]
 800ce3e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ce46:	6a3b      	ldr	r3, [r7, #32]
 800ce48:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ce4c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ce4e:	6a3b      	ldr	r3, [r7, #32]
 800ce50:	2202      	movs	r2, #2
 800ce52:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800ce56:	79fb      	ldrb	r3, [r7, #7]
 800ce58:	2b04      	cmp	r3, #4
 800ce5a:	d82e      	bhi.n	800ceba <xTaskGenericNotify+0xbe>
 800ce5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ce64 <xTaskGenericNotify+0x68>)
 800ce5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce62:	bf00      	nop
 800ce64:	0800cedf 	.word	0x0800cedf
 800ce68:	0800ce79 	.word	0x0800ce79
 800ce6c:	0800ce8b 	.word	0x0800ce8b
 800ce70:	0800ce9b 	.word	0x0800ce9b
 800ce74:	0800cea5 	.word	0x0800cea5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ce78:	6a3b      	ldr	r3, [r7, #32]
 800ce7a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	431a      	orrs	r2, r3
 800ce82:	6a3b      	ldr	r3, [r7, #32]
 800ce84:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ce88:	e02c      	b.n	800cee4 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ce8a:	6a3b      	ldr	r3, [r7, #32]
 800ce8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ce90:	1c5a      	adds	r2, r3, #1
 800ce92:	6a3b      	ldr	r3, [r7, #32]
 800ce94:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ce98:	e024      	b.n	800cee4 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ce9a:	6a3b      	ldr	r3, [r7, #32]
 800ce9c:	68ba      	ldr	r2, [r7, #8]
 800ce9e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800cea2:	e01f      	b.n	800cee4 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cea4:	7ffb      	ldrb	r3, [r7, #31]
 800cea6:	2b02      	cmp	r3, #2
 800cea8:	d004      	beq.n	800ceb4 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ceaa:	6a3b      	ldr	r3, [r7, #32]
 800ceac:	68ba      	ldr	r2, [r7, #8]
 800ceae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ceb2:	e017      	b.n	800cee4 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800ceb8:	e014      	b.n	800cee4 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ceba:	6a3b      	ldr	r3, [r7, #32]
 800cebc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec4:	d00d      	beq.n	800cee2 <xTaskGenericNotify+0xe6>
	__asm volatile
 800cec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceca:	f383 8811 	msr	BASEPRI, r3
 800cece:	f3bf 8f6f 	isb	sy
 800ced2:	f3bf 8f4f 	dsb	sy
 800ced6:	617b      	str	r3, [r7, #20]
}
 800ced8:	bf00      	nop
 800ceda:	bf00      	nop
 800cedc:	e7fd      	b.n	800ceda <xTaskGenericNotify+0xde>
					break;
 800cede:	bf00      	nop
 800cee0:	e000      	b.n	800cee4 <xTaskGenericNotify+0xe8>

					break;
 800cee2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cee4:	7ffb      	ldrb	r3, [r7, #31]
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d13b      	bne.n	800cf62 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ceea:	6a3b      	ldr	r3, [r7, #32]
 800ceec:	3304      	adds	r3, #4
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7fd ffb0 	bl	800ae54 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800cef4:	6a3b      	ldr	r3, [r7, #32]
 800cef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cef8:	4b1d      	ldr	r3, [pc, #116]	@ (800cf70 <xTaskGenericNotify+0x174>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d903      	bls.n	800cf08 <xTaskGenericNotify+0x10c>
 800cf00:	6a3b      	ldr	r3, [r7, #32]
 800cf02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf04:	4a1a      	ldr	r2, [pc, #104]	@ (800cf70 <xTaskGenericNotify+0x174>)
 800cf06:	6013      	str	r3, [r2, #0]
 800cf08:	6a3b      	ldr	r3, [r7, #32]
 800cf0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	4413      	add	r3, r2
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	4a17      	ldr	r2, [pc, #92]	@ (800cf74 <xTaskGenericNotify+0x178>)
 800cf16:	441a      	add	r2, r3
 800cf18:	6a3b      	ldr	r3, [r7, #32]
 800cf1a:	3304      	adds	r3, #4
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	4610      	mov	r0, r2
 800cf20:	f7fd ff3b 	bl	800ad9a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cf24:	6a3b      	ldr	r3, [r7, #32]
 800cf26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d00b      	beq.n	800cf44 <xTaskGenericNotify+0x148>
	__asm volatile
 800cf2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf30:	f383 8811 	msr	BASEPRI, r3
 800cf34:	f3bf 8f6f 	isb	sy
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	613b      	str	r3, [r7, #16]
}
 800cf3e:	bf00      	nop
 800cf40:	bf00      	nop
 800cf42:	e7fd      	b.n	800cf40 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf44:	6a3b      	ldr	r3, [r7, #32]
 800cf46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf48:	4b0b      	ldr	r3, [pc, #44]	@ (800cf78 <xTaskGenericNotify+0x17c>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d907      	bls.n	800cf62 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800cf52:	4b0a      	ldr	r3, [pc, #40]	@ (800cf7c <xTaskGenericNotify+0x180>)
 800cf54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf58:	601a      	str	r2, [r3, #0]
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cf62:	f000 fe03 	bl	800db6c <vPortExitCritical>

		return xReturn;
 800cf66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3728      	adds	r7, #40	@ 0x28
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	20000f68 	.word	0x20000f68
 800cf74:	20000a90 	.word	0x20000a90
 800cf78:	20000a8c 	.word	0x20000a8c
 800cf7c:	e000ed04 	.word	0xe000ed04

0800cf80 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b08e      	sub	sp, #56	@ 0x38
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	603b      	str	r3, [r7, #0]
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800cf90:	2301      	movs	r3, #1
 800cf92:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d10b      	bne.n	800cfb2 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800cf9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf9e:	f383 8811 	msr	BASEPRI, r3
 800cfa2:	f3bf 8f6f 	isb	sy
 800cfa6:	f3bf 8f4f 	dsb	sy
 800cfaa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cfac:	bf00      	nop
 800cfae:	bf00      	nop
 800cfb0:	e7fd      	b.n	800cfae <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfb2:	f000 fe89 	bl	800dcc8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800cfba:	f3ef 8211 	mrs	r2, BASEPRI
 800cfbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	623a      	str	r2, [r7, #32]
 800cfd0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800cfd2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cfd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d004      	beq.n	800cfe6 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cfdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfde:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cfe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800cfec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff2:	2202      	movs	r2, #2
 800cff4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800cff8:	79fb      	ldrb	r3, [r7, #7]
 800cffa:	2b04      	cmp	r3, #4
 800cffc:	d82e      	bhi.n	800d05c <xTaskGenericNotifyFromISR+0xdc>
 800cffe:	a201      	add	r2, pc, #4	@ (adr r2, 800d004 <xTaskGenericNotifyFromISR+0x84>)
 800d000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d004:	0800d081 	.word	0x0800d081
 800d008:	0800d019 	.word	0x0800d019
 800d00c:	0800d02b 	.word	0x0800d02b
 800d010:	0800d03b 	.word	0x0800d03b
 800d014:	0800d045 	.word	0x0800d045
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d01a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	431a      	orrs	r2, r3
 800d022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d024:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d028:	e02d      	b.n	800d086 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d02c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d030:	1c5a      	adds	r2, r3, #1
 800d032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d034:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d038:	e025      	b.n	800d086 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d03c:	68ba      	ldr	r2, [r7, #8]
 800d03e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d042:	e020      	b.n	800d086 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d044:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d048:	2b02      	cmp	r3, #2
 800d04a:	d004      	beq.n	800d056 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d04e:	68ba      	ldr	r2, [r7, #8]
 800d050:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d054:	e017      	b.n	800d086 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800d056:	2300      	movs	r3, #0
 800d058:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800d05a:	e014      	b.n	800d086 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d05e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d066:	d00d      	beq.n	800d084 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800d068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d06c:	f383 8811 	msr	BASEPRI, r3
 800d070:	f3bf 8f6f 	isb	sy
 800d074:	f3bf 8f4f 	dsb	sy
 800d078:	61bb      	str	r3, [r7, #24]
}
 800d07a:	bf00      	nop
 800d07c:	bf00      	nop
 800d07e:	e7fd      	b.n	800d07c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800d080:	bf00      	nop
 800d082:	e000      	b.n	800d086 <xTaskGenericNotifyFromISR+0x106>
					break;
 800d084:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d086:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d147      	bne.n	800d11e <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d092:	2b00      	cmp	r3, #0
 800d094:	d00b      	beq.n	800d0ae <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800d096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d09a:	f383 8811 	msr	BASEPRI, r3
 800d09e:	f3bf 8f6f 	isb	sy
 800d0a2:	f3bf 8f4f 	dsb	sy
 800d0a6:	617b      	str	r3, [r7, #20]
}
 800d0a8:	bf00      	nop
 800d0aa:	bf00      	nop
 800d0ac:	e7fd      	b.n	800d0aa <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0ae:	4b21      	ldr	r3, [pc, #132]	@ (800d134 <xTaskGenericNotifyFromISR+0x1b4>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d11d      	bne.n	800d0f2 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fd feca 	bl	800ae54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0c4:	4b1c      	ldr	r3, [pc, #112]	@ (800d138 <xTaskGenericNotifyFromISR+0x1b8>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d903      	bls.n	800d0d4 <xTaskGenericNotifyFromISR+0x154>
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0d0:	4a19      	ldr	r2, [pc, #100]	@ (800d138 <xTaskGenericNotifyFromISR+0x1b8>)
 800d0d2:	6013      	str	r3, [r2, #0]
 800d0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0d8:	4613      	mov	r3, r2
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	4413      	add	r3, r2
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	4a16      	ldr	r2, [pc, #88]	@ (800d13c <xTaskGenericNotifyFromISR+0x1bc>)
 800d0e2:	441a      	add	r2, r3
 800d0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e6:	3304      	adds	r3, #4
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	4610      	mov	r0, r2
 800d0ec:	f7fd fe55 	bl	800ad9a <vListInsertEnd>
 800d0f0:	e005      	b.n	800d0fe <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f4:	3318      	adds	r3, #24
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	4811      	ldr	r0, [pc, #68]	@ (800d140 <xTaskGenericNotifyFromISR+0x1c0>)
 800d0fa:	f7fd fe4e 	bl	800ad9a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d102:	4b10      	ldr	r3, [pc, #64]	@ (800d144 <xTaskGenericNotifyFromISR+0x1c4>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d108:	429a      	cmp	r2, r3
 800d10a:	d908      	bls.n	800d11e <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d10c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d002      	beq.n	800d118 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d114:	2201      	movs	r2, #1
 800d116:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d118:	4b0b      	ldr	r3, [pc, #44]	@ (800d148 <xTaskGenericNotifyFromISR+0x1c8>)
 800d11a:	2201      	movs	r2, #1
 800d11c:	601a      	str	r2, [r3, #0]
 800d11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d120:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	f383 8811 	msr	BASEPRI, r3
}
 800d128:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3738      	adds	r7, #56	@ 0x38
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	20000f88 	.word	0x20000f88
 800d138:	20000f68 	.word	0x20000f68
 800d13c:	20000a90 	.word	0x20000a90
 800d140:	20000f20 	.word	0x20000f20
 800d144:	20000a8c 	.word	0x20000a8c
 800d148:	20000f74 	.word	0x20000f74

0800d14c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d156:	4b21      	ldr	r3, [pc, #132]	@ (800d1dc <prvAddCurrentTaskToDelayedList+0x90>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d15c:	4b20      	ldr	r3, [pc, #128]	@ (800d1e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	3304      	adds	r3, #4
 800d162:	4618      	mov	r0, r3
 800d164:	f7fd fe76 	bl	800ae54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16e:	d10a      	bne.n	800d186 <prvAddCurrentTaskToDelayedList+0x3a>
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d007      	beq.n	800d186 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d176:	4b1a      	ldr	r3, [pc, #104]	@ (800d1e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	3304      	adds	r3, #4
 800d17c:	4619      	mov	r1, r3
 800d17e:	4819      	ldr	r0, [pc, #100]	@ (800d1e4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d180:	f7fd fe0b 	bl	800ad9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d184:	e026      	b.n	800d1d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4413      	add	r3, r2
 800d18c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d18e:	4b14      	ldr	r3, [pc, #80]	@ (800d1e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	68ba      	ldr	r2, [r7, #8]
 800d194:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d196:	68ba      	ldr	r2, [r7, #8]
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d209      	bcs.n	800d1b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d19e:	4b12      	ldr	r3, [pc, #72]	@ (800d1e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	4b0f      	ldr	r3, [pc, #60]	@ (800d1e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	3304      	adds	r3, #4
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	4610      	mov	r0, r2
 800d1ac:	f7fd fe19 	bl	800ade2 <vListInsert>
}
 800d1b0:	e010      	b.n	800d1d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1b2:	4b0e      	ldr	r3, [pc, #56]	@ (800d1ec <prvAddCurrentTaskToDelayedList+0xa0>)
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	4b0a      	ldr	r3, [pc, #40]	@ (800d1e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	3304      	adds	r3, #4
 800d1bc:	4619      	mov	r1, r3
 800d1be:	4610      	mov	r0, r2
 800d1c0:	f7fd fe0f 	bl	800ade2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d1c4:	4b0a      	ldr	r3, [pc, #40]	@ (800d1f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	68ba      	ldr	r2, [r7, #8]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d202      	bcs.n	800d1d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d1ce:	4a08      	ldr	r2, [pc, #32]	@ (800d1f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	6013      	str	r3, [r2, #0]
}
 800d1d4:	bf00      	nop
 800d1d6:	3710      	adds	r7, #16
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	20000f64 	.word	0x20000f64
 800d1e0:	20000a8c 	.word	0x20000a8c
 800d1e4:	20000f4c 	.word	0x20000f4c
 800d1e8:	20000f1c 	.word	0x20000f1c
 800d1ec:	20000f18 	.word	0x20000f18
 800d1f0:	20000f80 	.word	0x20000f80

0800d1f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b08a      	sub	sp, #40	@ 0x28
 800d1f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d1fe:	f000 fb13 	bl	800d828 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d202:	4b1d      	ldr	r3, [pc, #116]	@ (800d278 <xTimerCreateTimerTask+0x84>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d021      	beq.n	800d24e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d20a:	2300      	movs	r3, #0
 800d20c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d20e:	2300      	movs	r3, #0
 800d210:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d212:	1d3a      	adds	r2, r7, #4
 800d214:	f107 0108 	add.w	r1, r7, #8
 800d218:	f107 030c 	add.w	r3, r7, #12
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fd fd75 	bl	800ad0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d222:	6879      	ldr	r1, [r7, #4]
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	68fa      	ldr	r2, [r7, #12]
 800d228:	9202      	str	r2, [sp, #8]
 800d22a:	9301      	str	r3, [sp, #4]
 800d22c:	2302      	movs	r3, #2
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	2300      	movs	r3, #0
 800d232:	460a      	mov	r2, r1
 800d234:	4911      	ldr	r1, [pc, #68]	@ (800d27c <xTimerCreateTimerTask+0x88>)
 800d236:	4812      	ldr	r0, [pc, #72]	@ (800d280 <xTimerCreateTimerTask+0x8c>)
 800d238:	f7fe fd4c 	bl	800bcd4 <xTaskCreateStatic>
 800d23c:	4603      	mov	r3, r0
 800d23e:	4a11      	ldr	r2, [pc, #68]	@ (800d284 <xTimerCreateTimerTask+0x90>)
 800d240:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d242:	4b10      	ldr	r3, [pc, #64]	@ (800d284 <xTimerCreateTimerTask+0x90>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d001      	beq.n	800d24e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d24a:	2301      	movs	r3, #1
 800d24c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d10b      	bne.n	800d26c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d258:	f383 8811 	msr	BASEPRI, r3
 800d25c:	f3bf 8f6f 	isb	sy
 800d260:	f3bf 8f4f 	dsb	sy
 800d264:	613b      	str	r3, [r7, #16]
}
 800d266:	bf00      	nop
 800d268:	bf00      	nop
 800d26a:	e7fd      	b.n	800d268 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d26c:	697b      	ldr	r3, [r7, #20]
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3718      	adds	r7, #24
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop
 800d278:	20000fbc 	.word	0x20000fbc
 800d27c:	0800f648 	.word	0x0800f648
 800d280:	0800d3c1 	.word	0x0800d3c1
 800d284:	20000fc0 	.word	0x20000fc0

0800d288 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b08a      	sub	sp, #40	@ 0x28
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	607a      	str	r2, [r7, #4]
 800d294:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d296:	2300      	movs	r3, #0
 800d298:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10b      	bne.n	800d2b8 <xTimerGenericCommand+0x30>
	__asm volatile
 800d2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a4:	f383 8811 	msr	BASEPRI, r3
 800d2a8:	f3bf 8f6f 	isb	sy
 800d2ac:	f3bf 8f4f 	dsb	sy
 800d2b0:	623b      	str	r3, [r7, #32]
}
 800d2b2:	bf00      	nop
 800d2b4:	bf00      	nop
 800d2b6:	e7fd      	b.n	800d2b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d2b8:	4b19      	ldr	r3, [pc, #100]	@ (800d320 <xTimerGenericCommand+0x98>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d02a      	beq.n	800d316 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	2b05      	cmp	r3, #5
 800d2d0:	dc18      	bgt.n	800d304 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d2d2:	f7ff fba5 	bl	800ca20 <xTaskGetSchedulerState>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b02      	cmp	r3, #2
 800d2da:	d109      	bne.n	800d2f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d2dc:	4b10      	ldr	r3, [pc, #64]	@ (800d320 <xTimerGenericCommand+0x98>)
 800d2de:	6818      	ldr	r0, [r3, #0]
 800d2e0:	f107 0110 	add.w	r1, r7, #16
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2e8:	f7fd ffdc 	bl	800b2a4 <xQueueGenericSend>
 800d2ec:	6278      	str	r0, [r7, #36]	@ 0x24
 800d2ee:	e012      	b.n	800d316 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d2f0:	4b0b      	ldr	r3, [pc, #44]	@ (800d320 <xTimerGenericCommand+0x98>)
 800d2f2:	6818      	ldr	r0, [r3, #0]
 800d2f4:	f107 0110 	add.w	r1, r7, #16
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f7fd ffd2 	bl	800b2a4 <xQueueGenericSend>
 800d300:	6278      	str	r0, [r7, #36]	@ 0x24
 800d302:	e008      	b.n	800d316 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d304:	4b06      	ldr	r3, [pc, #24]	@ (800d320 <xTimerGenericCommand+0x98>)
 800d306:	6818      	ldr	r0, [r3, #0]
 800d308:	f107 0110 	add.w	r1, r7, #16
 800d30c:	2300      	movs	r3, #0
 800d30e:	683a      	ldr	r2, [r7, #0]
 800d310:	f7fe f8ca 	bl	800b4a8 <xQueueGenericSendFromISR>
 800d314:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3728      	adds	r7, #40	@ 0x28
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	20000fbc 	.word	0x20000fbc

0800d324 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b088      	sub	sp, #32
 800d328:	af02      	add	r7, sp, #8
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d32e:	4b23      	ldr	r3, [pc, #140]	@ (800d3bc <prvProcessExpiredTimer+0x98>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	3304      	adds	r3, #4
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7fd fd89 	bl	800ae54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d348:	f003 0304 	and.w	r3, r3, #4
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d023      	beq.n	800d398 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	699a      	ldr	r2, [r3, #24]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	18d1      	adds	r1, r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	683a      	ldr	r2, [r7, #0]
 800d35c:	6978      	ldr	r0, [r7, #20]
 800d35e:	f000 f8d5 	bl	800d50c <prvInsertTimerInActiveList>
 800d362:	4603      	mov	r3, r0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d020      	beq.n	800d3aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d368:	2300      	movs	r3, #0
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	2300      	movs	r3, #0
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	2100      	movs	r1, #0
 800d372:	6978      	ldr	r0, [r7, #20]
 800d374:	f7ff ff88 	bl	800d288 <xTimerGenericCommand>
 800d378:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d114      	bne.n	800d3aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d384:	f383 8811 	msr	BASEPRI, r3
 800d388:	f3bf 8f6f 	isb	sy
 800d38c:	f3bf 8f4f 	dsb	sy
 800d390:	60fb      	str	r3, [r7, #12]
}
 800d392:	bf00      	nop
 800d394:	bf00      	nop
 800d396:	e7fd      	b.n	800d394 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d39e:	f023 0301 	bic.w	r3, r3, #1
 800d3a2:	b2da      	uxtb	r2, r3
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	6a1b      	ldr	r3, [r3, #32]
 800d3ae:	6978      	ldr	r0, [r7, #20]
 800d3b0:	4798      	blx	r3
}
 800d3b2:	bf00      	nop
 800d3b4:	3718      	adds	r7, #24
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20000fb4 	.word	0x20000fb4

0800d3c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d3c8:	f107 0308 	add.w	r3, r7, #8
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f000 f859 	bl	800d484 <prvGetNextExpireTime>
 800d3d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	68f8      	ldr	r0, [r7, #12]
 800d3da:	f000 f805 	bl	800d3e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d3de:	f000 f8d7 	bl	800d590 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d3e2:	bf00      	nop
 800d3e4:	e7f0      	b.n	800d3c8 <prvTimerTask+0x8>
	...

0800d3e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d3f2:	f7fe ff11 	bl	800c218 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d3f6:	f107 0308 	add.w	r3, r7, #8
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f000 f866 	bl	800d4cc <prvSampleTimeNow>
 800d400:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d130      	bne.n	800d46a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d10a      	bne.n	800d424 <prvProcessTimerOrBlockTask+0x3c>
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	429a      	cmp	r2, r3
 800d414:	d806      	bhi.n	800d424 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d416:	f7fe ff0d 	bl	800c234 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d41a:	68f9      	ldr	r1, [r7, #12]
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f7ff ff81 	bl	800d324 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d422:	e024      	b.n	800d46e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d008      	beq.n	800d43c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d42a:	4b13      	ldr	r3, [pc, #76]	@ (800d478 <prvProcessTimerOrBlockTask+0x90>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d101      	bne.n	800d438 <prvProcessTimerOrBlockTask+0x50>
 800d434:	2301      	movs	r3, #1
 800d436:	e000      	b.n	800d43a <prvProcessTimerOrBlockTask+0x52>
 800d438:	2300      	movs	r3, #0
 800d43a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d43c:	4b0f      	ldr	r3, [pc, #60]	@ (800d47c <prvProcessTimerOrBlockTask+0x94>)
 800d43e:	6818      	ldr	r0, [r3, #0]
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	1ad3      	subs	r3, r2, r3
 800d446:	683a      	ldr	r2, [r7, #0]
 800d448:	4619      	mov	r1, r3
 800d44a:	f7fe fc0f 	bl	800bc6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d44e:	f7fe fef1 	bl	800c234 <xTaskResumeAll>
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d10a      	bne.n	800d46e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d458:	4b09      	ldr	r3, [pc, #36]	@ (800d480 <prvProcessTimerOrBlockTask+0x98>)
 800d45a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d45e:	601a      	str	r2, [r3, #0]
 800d460:	f3bf 8f4f 	dsb	sy
 800d464:	f3bf 8f6f 	isb	sy
}
 800d468:	e001      	b.n	800d46e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d46a:	f7fe fee3 	bl	800c234 <xTaskResumeAll>
}
 800d46e:	bf00      	nop
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	20000fb8 	.word	0x20000fb8
 800d47c:	20000fbc 	.word	0x20000fbc
 800d480:	e000ed04 	.word	0xe000ed04

0800d484 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d484:	b480      	push	{r7}
 800d486:	b085      	sub	sp, #20
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d48c:	4b0e      	ldr	r3, [pc, #56]	@ (800d4c8 <prvGetNextExpireTime+0x44>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d101      	bne.n	800d49a <prvGetNextExpireTime+0x16>
 800d496:	2201      	movs	r2, #1
 800d498:	e000      	b.n	800d49c <prvGetNextExpireTime+0x18>
 800d49a:	2200      	movs	r2, #0
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d105      	bne.n	800d4b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d4a8:	4b07      	ldr	r3, [pc, #28]	@ (800d4c8 <prvGetNextExpireTime+0x44>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	68db      	ldr	r3, [r3, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	60fb      	str	r3, [r7, #12]
 800d4b2:	e001      	b.n	800d4b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3714      	adds	r7, #20
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr
 800d4c6:	bf00      	nop
 800d4c8:	20000fb4 	.word	0x20000fb4

0800d4cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d4d4:	f7fe ff4c 	bl	800c370 <xTaskGetTickCount>
 800d4d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d4da:	4b0b      	ldr	r3, [pc, #44]	@ (800d508 <prvSampleTimeNow+0x3c>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	68fa      	ldr	r2, [r7, #12]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d205      	bcs.n	800d4f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d4e4:	f000 f93a 	bl	800d75c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	601a      	str	r2, [r3, #0]
 800d4ee:	e002      	b.n	800d4f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d4f6:	4a04      	ldr	r2, [pc, #16]	@ (800d508 <prvSampleTimeNow+0x3c>)
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3710      	adds	r7, #16
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	20000fc4 	.word	0x20000fc4

0800d50c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b086      	sub	sp, #24
 800d510:	af00      	add	r7, sp, #0
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]
 800d518:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d51a:	2300      	movs	r3, #0
 800d51c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	68ba      	ldr	r2, [r7, #8]
 800d522:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	68fa      	ldr	r2, [r7, #12]
 800d528:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d52a:	68ba      	ldr	r2, [r7, #8]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d812      	bhi.n	800d558 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	1ad2      	subs	r2, r2, r3
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	699b      	ldr	r3, [r3, #24]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d302      	bcc.n	800d546 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d540:	2301      	movs	r3, #1
 800d542:	617b      	str	r3, [r7, #20]
 800d544:	e01b      	b.n	800d57e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d546:	4b10      	ldr	r3, [pc, #64]	@ (800d588 <prvInsertTimerInActiveList+0x7c>)
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	3304      	adds	r3, #4
 800d54e:	4619      	mov	r1, r3
 800d550:	4610      	mov	r0, r2
 800d552:	f7fd fc46 	bl	800ade2 <vListInsert>
 800d556:	e012      	b.n	800d57e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d206      	bcs.n	800d56e <prvInsertTimerInActiveList+0x62>
 800d560:	68ba      	ldr	r2, [r7, #8]
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	429a      	cmp	r2, r3
 800d566:	d302      	bcc.n	800d56e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d568:	2301      	movs	r3, #1
 800d56a:	617b      	str	r3, [r7, #20]
 800d56c:	e007      	b.n	800d57e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d56e:	4b07      	ldr	r3, [pc, #28]	@ (800d58c <prvInsertTimerInActiveList+0x80>)
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	3304      	adds	r3, #4
 800d576:	4619      	mov	r1, r3
 800d578:	4610      	mov	r0, r2
 800d57a:	f7fd fc32 	bl	800ade2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d57e:	697b      	ldr	r3, [r7, #20]
}
 800d580:	4618      	mov	r0, r3
 800d582:	3718      	adds	r7, #24
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	20000fb8 	.word	0x20000fb8
 800d58c:	20000fb4 	.word	0x20000fb4

0800d590 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b08e      	sub	sp, #56	@ 0x38
 800d594:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d596:	e0ce      	b.n	800d736 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	da19      	bge.n	800d5d2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d59e:	1d3b      	adds	r3, r7, #4
 800d5a0:	3304      	adds	r3, #4
 800d5a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10b      	bne.n	800d5c2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ae:	f383 8811 	msr	BASEPRI, r3
 800d5b2:	f3bf 8f6f 	isb	sy
 800d5b6:	f3bf 8f4f 	dsb	sy
 800d5ba:	61fb      	str	r3, [r7, #28]
}
 800d5bc:	bf00      	nop
 800d5be:	bf00      	nop
 800d5c0:	e7fd      	b.n	800d5be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d5c8:	6850      	ldr	r0, [r2, #4]
 800d5ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d5cc:	6892      	ldr	r2, [r2, #8]
 800d5ce:	4611      	mov	r1, r2
 800d5d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f2c0 80ae 	blt.w	800d736 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5e0:	695b      	ldr	r3, [r3, #20]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d004      	beq.n	800d5f0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5e8:	3304      	adds	r3, #4
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7fd fc32 	bl	800ae54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d5f0:	463b      	mov	r3, r7
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7ff ff6a 	bl	800d4cc <prvSampleTimeNow>
 800d5f8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2b09      	cmp	r3, #9
 800d5fe:	f200 8097 	bhi.w	800d730 <prvProcessReceivedCommands+0x1a0>
 800d602:	a201      	add	r2, pc, #4	@ (adr r2, 800d608 <prvProcessReceivedCommands+0x78>)
 800d604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d608:	0800d631 	.word	0x0800d631
 800d60c:	0800d631 	.word	0x0800d631
 800d610:	0800d631 	.word	0x0800d631
 800d614:	0800d6a7 	.word	0x0800d6a7
 800d618:	0800d6bb 	.word	0x0800d6bb
 800d61c:	0800d707 	.word	0x0800d707
 800d620:	0800d631 	.word	0x0800d631
 800d624:	0800d631 	.word	0x0800d631
 800d628:	0800d6a7 	.word	0x0800d6a7
 800d62c:	0800d6bb 	.word	0x0800d6bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d632:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d636:	f043 0301 	orr.w	r3, r3, #1
 800d63a:	b2da      	uxtb	r2, r3
 800d63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d63e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d646:	699b      	ldr	r3, [r3, #24]
 800d648:	18d1      	adds	r1, r2, r3
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d64e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d650:	f7ff ff5c 	bl	800d50c <prvInsertTimerInActiveList>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d06c      	beq.n	800d734 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d65c:	6a1b      	ldr	r3, [r3, #32]
 800d65e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d660:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d664:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d668:	f003 0304 	and.w	r3, r3, #4
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d061      	beq.n	800d734 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d670:	68ba      	ldr	r2, [r7, #8]
 800d672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d674:	699b      	ldr	r3, [r3, #24]
 800d676:	441a      	add	r2, r3
 800d678:	2300      	movs	r3, #0
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	2300      	movs	r3, #0
 800d67e:	2100      	movs	r1, #0
 800d680:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d682:	f7ff fe01 	bl	800d288 <xTimerGenericCommand>
 800d686:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d688:	6a3b      	ldr	r3, [r7, #32]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d152      	bne.n	800d734 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d692:	f383 8811 	msr	BASEPRI, r3
 800d696:	f3bf 8f6f 	isb	sy
 800d69a:	f3bf 8f4f 	dsb	sy
 800d69e:	61bb      	str	r3, [r7, #24]
}
 800d6a0:	bf00      	nop
 800d6a2:	bf00      	nop
 800d6a4:	e7fd      	b.n	800d6a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d6ac:	f023 0301 	bic.w	r3, r3, #1
 800d6b0:	b2da      	uxtb	r2, r3
 800d6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d6b8:	e03d      	b.n	800d736 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d6c0:	f043 0301 	orr.w	r3, r3, #1
 800d6c4:	b2da      	uxtb	r2, r3
 800d6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d6cc:	68ba      	ldr	r2, [r7, #8]
 800d6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6d4:	699b      	ldr	r3, [r3, #24]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d10b      	bne.n	800d6f2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d6da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6de:	f383 8811 	msr	BASEPRI, r3
 800d6e2:	f3bf 8f6f 	isb	sy
 800d6e6:	f3bf 8f4f 	dsb	sy
 800d6ea:	617b      	str	r3, [r7, #20]
}
 800d6ec:	bf00      	nop
 800d6ee:	bf00      	nop
 800d6f0:	e7fd      	b.n	800d6ee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f4:	699a      	ldr	r2, [r3, #24]
 800d6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f8:	18d1      	adds	r1, r2, r3
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d700:	f7ff ff04 	bl	800d50c <prvInsertTimerInActiveList>
					break;
 800d704:	e017      	b.n	800d736 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d70c:	f003 0302 	and.w	r3, r3, #2
 800d710:	2b00      	cmp	r3, #0
 800d712:	d103      	bne.n	800d71c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d714:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d716:	f000 fbe7 	bl	800dee8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d71a:	e00c      	b.n	800d736 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d71e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d722:	f023 0301 	bic.w	r3, r3, #1
 800d726:	b2da      	uxtb	r2, r3
 800d728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d72a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d72e:	e002      	b.n	800d736 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d730:	bf00      	nop
 800d732:	e000      	b.n	800d736 <prvProcessReceivedCommands+0x1a6>
					break;
 800d734:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d736:	4b08      	ldr	r3, [pc, #32]	@ (800d758 <prvProcessReceivedCommands+0x1c8>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	1d39      	adds	r1, r7, #4
 800d73c:	2200      	movs	r2, #0
 800d73e:	4618      	mov	r0, r3
 800d740:	f7fd ff50 	bl	800b5e4 <xQueueReceive>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	f47f af26 	bne.w	800d598 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d74c:	bf00      	nop
 800d74e:	bf00      	nop
 800d750:	3730      	adds	r7, #48	@ 0x30
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	20000fbc 	.word	0x20000fbc

0800d75c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b088      	sub	sp, #32
 800d760:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d762:	e049      	b.n	800d7f8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d764:	4b2e      	ldr	r3, [pc, #184]	@ (800d820 <prvSwitchTimerLists+0xc4>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	68db      	ldr	r3, [r3, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d76e:	4b2c      	ldr	r3, [pc, #176]	@ (800d820 <prvSwitchTimerLists+0xc4>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	3304      	adds	r3, #4
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fd fb69 	bl	800ae54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	6a1b      	ldr	r3, [r3, #32]
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d790:	f003 0304 	and.w	r3, r3, #4
 800d794:	2b00      	cmp	r3, #0
 800d796:	d02f      	beq.n	800d7f8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	699b      	ldr	r3, [r3, #24]
 800d79c:	693a      	ldr	r2, [r7, #16]
 800d79e:	4413      	add	r3, r2
 800d7a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d7a2:	68ba      	ldr	r2, [r7, #8]
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d90e      	bls.n	800d7c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	68ba      	ldr	r2, [r7, #8]
 800d7ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	68fa      	ldr	r2, [r7, #12]
 800d7b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d7b6:	4b1a      	ldr	r3, [pc, #104]	@ (800d820 <prvSwitchTimerLists+0xc4>)
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	3304      	adds	r3, #4
 800d7be:	4619      	mov	r1, r3
 800d7c0:	4610      	mov	r0, r2
 800d7c2:	f7fd fb0e 	bl	800ade2 <vListInsert>
 800d7c6:	e017      	b.n	800d7f8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	693a      	ldr	r2, [r7, #16]
 800d7d0:	2100      	movs	r1, #0
 800d7d2:	68f8      	ldr	r0, [r7, #12]
 800d7d4:	f7ff fd58 	bl	800d288 <xTimerGenericCommand>
 800d7d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d10b      	bne.n	800d7f8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7e4:	f383 8811 	msr	BASEPRI, r3
 800d7e8:	f3bf 8f6f 	isb	sy
 800d7ec:	f3bf 8f4f 	dsb	sy
 800d7f0:	603b      	str	r3, [r7, #0]
}
 800d7f2:	bf00      	nop
 800d7f4:	bf00      	nop
 800d7f6:	e7fd      	b.n	800d7f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d7f8:	4b09      	ldr	r3, [pc, #36]	@ (800d820 <prvSwitchTimerLists+0xc4>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d1b0      	bne.n	800d764 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d802:	4b07      	ldr	r3, [pc, #28]	@ (800d820 <prvSwitchTimerLists+0xc4>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d808:	4b06      	ldr	r3, [pc, #24]	@ (800d824 <prvSwitchTimerLists+0xc8>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a04      	ldr	r2, [pc, #16]	@ (800d820 <prvSwitchTimerLists+0xc4>)
 800d80e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d810:	4a04      	ldr	r2, [pc, #16]	@ (800d824 <prvSwitchTimerLists+0xc8>)
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	6013      	str	r3, [r2, #0]
}
 800d816:	bf00      	nop
 800d818:	3718      	adds	r7, #24
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	20000fb4 	.word	0x20000fb4
 800d824:	20000fb8 	.word	0x20000fb8

0800d828 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d82e:	f000 f96b 	bl	800db08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d832:	4b15      	ldr	r3, [pc, #84]	@ (800d888 <prvCheckForValidListAndQueue+0x60>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d120      	bne.n	800d87c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d83a:	4814      	ldr	r0, [pc, #80]	@ (800d88c <prvCheckForValidListAndQueue+0x64>)
 800d83c:	f7fd fa80 	bl	800ad40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d840:	4813      	ldr	r0, [pc, #76]	@ (800d890 <prvCheckForValidListAndQueue+0x68>)
 800d842:	f7fd fa7d 	bl	800ad40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d846:	4b13      	ldr	r3, [pc, #76]	@ (800d894 <prvCheckForValidListAndQueue+0x6c>)
 800d848:	4a10      	ldr	r2, [pc, #64]	@ (800d88c <prvCheckForValidListAndQueue+0x64>)
 800d84a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d84c:	4b12      	ldr	r3, [pc, #72]	@ (800d898 <prvCheckForValidListAndQueue+0x70>)
 800d84e:	4a10      	ldr	r2, [pc, #64]	@ (800d890 <prvCheckForValidListAndQueue+0x68>)
 800d850:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d852:	2300      	movs	r3, #0
 800d854:	9300      	str	r3, [sp, #0]
 800d856:	4b11      	ldr	r3, [pc, #68]	@ (800d89c <prvCheckForValidListAndQueue+0x74>)
 800d858:	4a11      	ldr	r2, [pc, #68]	@ (800d8a0 <prvCheckForValidListAndQueue+0x78>)
 800d85a:	2110      	movs	r1, #16
 800d85c:	200a      	movs	r0, #10
 800d85e:	f7fd fb8d 	bl	800af7c <xQueueGenericCreateStatic>
 800d862:	4603      	mov	r3, r0
 800d864:	4a08      	ldr	r2, [pc, #32]	@ (800d888 <prvCheckForValidListAndQueue+0x60>)
 800d866:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d868:	4b07      	ldr	r3, [pc, #28]	@ (800d888 <prvCheckForValidListAndQueue+0x60>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d005      	beq.n	800d87c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d870:	4b05      	ldr	r3, [pc, #20]	@ (800d888 <prvCheckForValidListAndQueue+0x60>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	490b      	ldr	r1, [pc, #44]	@ (800d8a4 <prvCheckForValidListAndQueue+0x7c>)
 800d876:	4618      	mov	r0, r3
 800d878:	f7fe f9ce 	bl	800bc18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d87c:	f000 f976 	bl	800db6c <vPortExitCritical>
}
 800d880:	bf00      	nop
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	20000fbc 	.word	0x20000fbc
 800d88c:	20000f8c 	.word	0x20000f8c
 800d890:	20000fa0 	.word	0x20000fa0
 800d894:	20000fb4 	.word	0x20000fb4
 800d898:	20000fb8 	.word	0x20000fb8
 800d89c:	20001068 	.word	0x20001068
 800d8a0:	20000fc8 	.word	0x20000fc8
 800d8a4:	0800f650 	.word	0x0800f650

0800d8a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	3b04      	subs	r3, #4
 800d8b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d8c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	3b04      	subs	r3, #4
 800d8c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	f023 0201 	bic.w	r2, r3, #1
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	3b04      	subs	r3, #4
 800d8d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d8d8:	4a0c      	ldr	r2, [pc, #48]	@ (800d90c <pxPortInitialiseStack+0x64>)
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	3b14      	subs	r3, #20
 800d8e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	3b04      	subs	r3, #4
 800d8ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	f06f 0202 	mvn.w	r2, #2
 800d8f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	3b20      	subs	r3, #32
 800d8fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3714      	adds	r7, #20
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr
 800d90c:	0800d911 	.word	0x0800d911

0800d910 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d910:	b480      	push	{r7}
 800d912:	b085      	sub	sp, #20
 800d914:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d916:	2300      	movs	r3, #0
 800d918:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d91a:	4b13      	ldr	r3, [pc, #76]	@ (800d968 <prvTaskExitError+0x58>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d922:	d00b      	beq.n	800d93c <prvTaskExitError+0x2c>
	__asm volatile
 800d924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d928:	f383 8811 	msr	BASEPRI, r3
 800d92c:	f3bf 8f6f 	isb	sy
 800d930:	f3bf 8f4f 	dsb	sy
 800d934:	60fb      	str	r3, [r7, #12]
}
 800d936:	bf00      	nop
 800d938:	bf00      	nop
 800d93a:	e7fd      	b.n	800d938 <prvTaskExitError+0x28>
	__asm volatile
 800d93c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d940:	f383 8811 	msr	BASEPRI, r3
 800d944:	f3bf 8f6f 	isb	sy
 800d948:	f3bf 8f4f 	dsb	sy
 800d94c:	60bb      	str	r3, [r7, #8]
}
 800d94e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d950:	bf00      	nop
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d0fc      	beq.n	800d952 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d958:	bf00      	nop
 800d95a:	bf00      	nop
 800d95c:	3714      	adds	r7, #20
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr
 800d966:	bf00      	nop
 800d968:	200000a4 	.word	0x200000a4
 800d96c:	00000000 	.word	0x00000000

0800d970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d970:	4b07      	ldr	r3, [pc, #28]	@ (800d990 <pxCurrentTCBConst2>)
 800d972:	6819      	ldr	r1, [r3, #0]
 800d974:	6808      	ldr	r0, [r1, #0]
 800d976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d97a:	f380 8809 	msr	PSP, r0
 800d97e:	f3bf 8f6f 	isb	sy
 800d982:	f04f 0000 	mov.w	r0, #0
 800d986:	f380 8811 	msr	BASEPRI, r0
 800d98a:	4770      	bx	lr
 800d98c:	f3af 8000 	nop.w

0800d990 <pxCurrentTCBConst2>:
 800d990:	20000a8c 	.word	0x20000a8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d994:	bf00      	nop
 800d996:	bf00      	nop

0800d998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d998:	4808      	ldr	r0, [pc, #32]	@ (800d9bc <prvPortStartFirstTask+0x24>)
 800d99a:	6800      	ldr	r0, [r0, #0]
 800d99c:	6800      	ldr	r0, [r0, #0]
 800d99e:	f380 8808 	msr	MSP, r0
 800d9a2:	f04f 0000 	mov.w	r0, #0
 800d9a6:	f380 8814 	msr	CONTROL, r0
 800d9aa:	b662      	cpsie	i
 800d9ac:	b661      	cpsie	f
 800d9ae:	f3bf 8f4f 	dsb	sy
 800d9b2:	f3bf 8f6f 	isb	sy
 800d9b6:	df00      	svc	0
 800d9b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d9ba:	bf00      	nop
 800d9bc:	e000ed08 	.word	0xe000ed08

0800d9c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b086      	sub	sp, #24
 800d9c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d9c6:	4b47      	ldr	r3, [pc, #284]	@ (800dae4 <xPortStartScheduler+0x124>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4a47      	ldr	r2, [pc, #284]	@ (800dae8 <xPortStartScheduler+0x128>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d10b      	bne.n	800d9e8 <xPortStartScheduler+0x28>
	__asm volatile
 800d9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d4:	f383 8811 	msr	BASEPRI, r3
 800d9d8:	f3bf 8f6f 	isb	sy
 800d9dc:	f3bf 8f4f 	dsb	sy
 800d9e0:	60fb      	str	r3, [r7, #12]
}
 800d9e2:	bf00      	nop
 800d9e4:	bf00      	nop
 800d9e6:	e7fd      	b.n	800d9e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d9e8:	4b3e      	ldr	r3, [pc, #248]	@ (800dae4 <xPortStartScheduler+0x124>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a3f      	ldr	r2, [pc, #252]	@ (800daec <xPortStartScheduler+0x12c>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d10b      	bne.n	800da0a <xPortStartScheduler+0x4a>
	__asm volatile
 800d9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9f6:	f383 8811 	msr	BASEPRI, r3
 800d9fa:	f3bf 8f6f 	isb	sy
 800d9fe:	f3bf 8f4f 	dsb	sy
 800da02:	613b      	str	r3, [r7, #16]
}
 800da04:	bf00      	nop
 800da06:	bf00      	nop
 800da08:	e7fd      	b.n	800da06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800da0a:	4b39      	ldr	r3, [pc, #228]	@ (800daf0 <xPortStartScheduler+0x130>)
 800da0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	b2db      	uxtb	r3, r3
 800da14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	22ff      	movs	r2, #255	@ 0xff
 800da1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	b2db      	uxtb	r3, r3
 800da22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da24:	78fb      	ldrb	r3, [r7, #3]
 800da26:	b2db      	uxtb	r3, r3
 800da28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800da2c:	b2da      	uxtb	r2, r3
 800da2e:	4b31      	ldr	r3, [pc, #196]	@ (800daf4 <xPortStartScheduler+0x134>)
 800da30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da32:	4b31      	ldr	r3, [pc, #196]	@ (800daf8 <xPortStartScheduler+0x138>)
 800da34:	2207      	movs	r2, #7
 800da36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da38:	e009      	b.n	800da4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800da3a:	4b2f      	ldr	r3, [pc, #188]	@ (800daf8 <xPortStartScheduler+0x138>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	3b01      	subs	r3, #1
 800da40:	4a2d      	ldr	r2, [pc, #180]	@ (800daf8 <xPortStartScheduler+0x138>)
 800da42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800da44:	78fb      	ldrb	r3, [r7, #3]
 800da46:	b2db      	uxtb	r3, r3
 800da48:	005b      	lsls	r3, r3, #1
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da4e:	78fb      	ldrb	r3, [r7, #3]
 800da50:	b2db      	uxtb	r3, r3
 800da52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da56:	2b80      	cmp	r3, #128	@ 0x80
 800da58:	d0ef      	beq.n	800da3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800da5a:	4b27      	ldr	r3, [pc, #156]	@ (800daf8 <xPortStartScheduler+0x138>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f1c3 0307 	rsb	r3, r3, #7
 800da62:	2b04      	cmp	r3, #4
 800da64:	d00b      	beq.n	800da7e <xPortStartScheduler+0xbe>
	__asm volatile
 800da66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da6a:	f383 8811 	msr	BASEPRI, r3
 800da6e:	f3bf 8f6f 	isb	sy
 800da72:	f3bf 8f4f 	dsb	sy
 800da76:	60bb      	str	r3, [r7, #8]
}
 800da78:	bf00      	nop
 800da7a:	bf00      	nop
 800da7c:	e7fd      	b.n	800da7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800da7e:	4b1e      	ldr	r3, [pc, #120]	@ (800daf8 <xPortStartScheduler+0x138>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	021b      	lsls	r3, r3, #8
 800da84:	4a1c      	ldr	r2, [pc, #112]	@ (800daf8 <xPortStartScheduler+0x138>)
 800da86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800da88:	4b1b      	ldr	r3, [pc, #108]	@ (800daf8 <xPortStartScheduler+0x138>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800da90:	4a19      	ldr	r2, [pc, #100]	@ (800daf8 <xPortStartScheduler+0x138>)
 800da92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	b2da      	uxtb	r2, r3
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800da9c:	4b17      	ldr	r3, [pc, #92]	@ (800dafc <xPortStartScheduler+0x13c>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a16      	ldr	r2, [pc, #88]	@ (800dafc <xPortStartScheduler+0x13c>)
 800daa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800daa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800daa8:	4b14      	ldr	r3, [pc, #80]	@ (800dafc <xPortStartScheduler+0x13c>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a13      	ldr	r2, [pc, #76]	@ (800dafc <xPortStartScheduler+0x13c>)
 800daae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800dab2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dab4:	f000 f8da 	bl	800dc6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dab8:	4b11      	ldr	r3, [pc, #68]	@ (800db00 <xPortStartScheduler+0x140>)
 800daba:	2200      	movs	r2, #0
 800dabc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dabe:	f000 f8f9 	bl	800dcb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dac2:	4b10      	ldr	r3, [pc, #64]	@ (800db04 <xPortStartScheduler+0x144>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4a0f      	ldr	r2, [pc, #60]	@ (800db04 <xPortStartScheduler+0x144>)
 800dac8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800dacc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dace:	f7ff ff63 	bl	800d998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dad2:	f7fe fd17 	bl	800c504 <vTaskSwitchContext>
	prvTaskExitError();
 800dad6:	f7ff ff1b 	bl	800d910 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3718      	adds	r7, #24
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	e000ed00 	.word	0xe000ed00
 800dae8:	410fc271 	.word	0x410fc271
 800daec:	410fc270 	.word	0x410fc270
 800daf0:	e000e400 	.word	0xe000e400
 800daf4:	200010b8 	.word	0x200010b8
 800daf8:	200010bc 	.word	0x200010bc
 800dafc:	e000ed20 	.word	0xe000ed20
 800db00:	200000a4 	.word	0x200000a4
 800db04:	e000ef34 	.word	0xe000ef34

0800db08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db08:	b480      	push	{r7}
 800db0a:	b083      	sub	sp, #12
 800db0c:	af00      	add	r7, sp, #0
	__asm volatile
 800db0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db12:	f383 8811 	msr	BASEPRI, r3
 800db16:	f3bf 8f6f 	isb	sy
 800db1a:	f3bf 8f4f 	dsb	sy
 800db1e:	607b      	str	r3, [r7, #4]
}
 800db20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800db22:	4b10      	ldr	r3, [pc, #64]	@ (800db64 <vPortEnterCritical+0x5c>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	3301      	adds	r3, #1
 800db28:	4a0e      	ldr	r2, [pc, #56]	@ (800db64 <vPortEnterCritical+0x5c>)
 800db2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800db2c:	4b0d      	ldr	r3, [pc, #52]	@ (800db64 <vPortEnterCritical+0x5c>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2b01      	cmp	r3, #1
 800db32:	d110      	bne.n	800db56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800db34:	4b0c      	ldr	r3, [pc, #48]	@ (800db68 <vPortEnterCritical+0x60>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00b      	beq.n	800db56 <vPortEnterCritical+0x4e>
	__asm volatile
 800db3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db42:	f383 8811 	msr	BASEPRI, r3
 800db46:	f3bf 8f6f 	isb	sy
 800db4a:	f3bf 8f4f 	dsb	sy
 800db4e:	603b      	str	r3, [r7, #0]
}
 800db50:	bf00      	nop
 800db52:	bf00      	nop
 800db54:	e7fd      	b.n	800db52 <vPortEnterCritical+0x4a>
	}
}
 800db56:	bf00      	nop
 800db58:	370c      	adds	r7, #12
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	200000a4 	.word	0x200000a4
 800db68:	e000ed04 	.word	0xe000ed04

0800db6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800db72:	4b12      	ldr	r3, [pc, #72]	@ (800dbbc <vPortExitCritical+0x50>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d10b      	bne.n	800db92 <vPortExitCritical+0x26>
	__asm volatile
 800db7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db7e:	f383 8811 	msr	BASEPRI, r3
 800db82:	f3bf 8f6f 	isb	sy
 800db86:	f3bf 8f4f 	dsb	sy
 800db8a:	607b      	str	r3, [r7, #4]
}
 800db8c:	bf00      	nop
 800db8e:	bf00      	nop
 800db90:	e7fd      	b.n	800db8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800db92:	4b0a      	ldr	r3, [pc, #40]	@ (800dbbc <vPortExitCritical+0x50>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	3b01      	subs	r3, #1
 800db98:	4a08      	ldr	r2, [pc, #32]	@ (800dbbc <vPortExitCritical+0x50>)
 800db9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800db9c:	4b07      	ldr	r3, [pc, #28]	@ (800dbbc <vPortExitCritical+0x50>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d105      	bne.n	800dbb0 <vPortExitCritical+0x44>
 800dba4:	2300      	movs	r3, #0
 800dba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	f383 8811 	msr	BASEPRI, r3
}
 800dbae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dbb0:	bf00      	nop
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr
 800dbbc:	200000a4 	.word	0x200000a4

0800dbc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dbc0:	f3ef 8009 	mrs	r0, PSP
 800dbc4:	f3bf 8f6f 	isb	sy
 800dbc8:	4b15      	ldr	r3, [pc, #84]	@ (800dc20 <pxCurrentTCBConst>)
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	f01e 0f10 	tst.w	lr, #16
 800dbd0:	bf08      	it	eq
 800dbd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dbd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbda:	6010      	str	r0, [r2, #0]
 800dbdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dbe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dbe4:	f380 8811 	msr	BASEPRI, r0
 800dbe8:	f3bf 8f4f 	dsb	sy
 800dbec:	f3bf 8f6f 	isb	sy
 800dbf0:	f7fe fc88 	bl	800c504 <vTaskSwitchContext>
 800dbf4:	f04f 0000 	mov.w	r0, #0
 800dbf8:	f380 8811 	msr	BASEPRI, r0
 800dbfc:	bc09      	pop	{r0, r3}
 800dbfe:	6819      	ldr	r1, [r3, #0]
 800dc00:	6808      	ldr	r0, [r1, #0]
 800dc02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc06:	f01e 0f10 	tst.w	lr, #16
 800dc0a:	bf08      	it	eq
 800dc0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dc10:	f380 8809 	msr	PSP, r0
 800dc14:	f3bf 8f6f 	isb	sy
 800dc18:	4770      	bx	lr
 800dc1a:	bf00      	nop
 800dc1c:	f3af 8000 	nop.w

0800dc20 <pxCurrentTCBConst>:
 800dc20:	20000a8c 	.word	0x20000a8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dc24:	bf00      	nop
 800dc26:	bf00      	nop

0800dc28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
	__asm volatile
 800dc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc32:	f383 8811 	msr	BASEPRI, r3
 800dc36:	f3bf 8f6f 	isb	sy
 800dc3a:	f3bf 8f4f 	dsb	sy
 800dc3e:	607b      	str	r3, [r7, #4]
}
 800dc40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dc42:	f7fe fba5 	bl	800c390 <xTaskIncrementTick>
 800dc46:	4603      	mov	r3, r0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d003      	beq.n	800dc54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dc4c:	4b06      	ldr	r3, [pc, #24]	@ (800dc68 <xPortSysTickHandler+0x40>)
 800dc4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc52:	601a      	str	r2, [r3, #0]
 800dc54:	2300      	movs	r3, #0
 800dc56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	f383 8811 	msr	BASEPRI, r3
}
 800dc5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dc60:	bf00      	nop
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	e000ed04 	.word	0xe000ed04

0800dc6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dc70:	4b0b      	ldr	r3, [pc, #44]	@ (800dca0 <vPortSetupTimerInterrupt+0x34>)
 800dc72:	2200      	movs	r2, #0
 800dc74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dc76:	4b0b      	ldr	r3, [pc, #44]	@ (800dca4 <vPortSetupTimerInterrupt+0x38>)
 800dc78:	2200      	movs	r2, #0
 800dc7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dc7c:	4b0a      	ldr	r3, [pc, #40]	@ (800dca8 <vPortSetupTimerInterrupt+0x3c>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a0a      	ldr	r2, [pc, #40]	@ (800dcac <vPortSetupTimerInterrupt+0x40>)
 800dc82:	fba2 2303 	umull	r2, r3, r2, r3
 800dc86:	0a1b      	lsrs	r3, r3, #8
 800dc88:	4a09      	ldr	r2, [pc, #36]	@ (800dcb0 <vPortSetupTimerInterrupt+0x44>)
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dc8e:	4b04      	ldr	r3, [pc, #16]	@ (800dca0 <vPortSetupTimerInterrupt+0x34>)
 800dc90:	2207      	movs	r2, #7
 800dc92:	601a      	str	r2, [r3, #0]
}
 800dc94:	bf00      	nop
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr
 800dc9e:	bf00      	nop
 800dca0:	e000e010 	.word	0xe000e010
 800dca4:	e000e018 	.word	0xe000e018
 800dca8:	2000000c 	.word	0x2000000c
 800dcac:	51eb851f 	.word	0x51eb851f
 800dcb0:	e000e014 	.word	0xe000e014

0800dcb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dcb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dcc4 <vPortEnableVFP+0x10>
 800dcb8:	6801      	ldr	r1, [r0, #0]
 800dcba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dcbe:	6001      	str	r1, [r0, #0]
 800dcc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dcc2:	bf00      	nop
 800dcc4:	e000ed88 	.word	0xe000ed88

0800dcc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dcc8:	b480      	push	{r7}
 800dcca:	b085      	sub	sp, #20
 800dccc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dcce:	f3ef 8305 	mrs	r3, IPSR
 800dcd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2b0f      	cmp	r3, #15
 800dcd8:	d915      	bls.n	800dd06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dcda:	4a18      	ldr	r2, [pc, #96]	@ (800dd3c <vPortValidateInterruptPriority+0x74>)
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	4413      	add	r3, r2
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dce4:	4b16      	ldr	r3, [pc, #88]	@ (800dd40 <vPortValidateInterruptPriority+0x78>)
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	7afa      	ldrb	r2, [r7, #11]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d20b      	bcs.n	800dd06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800dcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcf2:	f383 8811 	msr	BASEPRI, r3
 800dcf6:	f3bf 8f6f 	isb	sy
 800dcfa:	f3bf 8f4f 	dsb	sy
 800dcfe:	607b      	str	r3, [r7, #4]
}
 800dd00:	bf00      	nop
 800dd02:	bf00      	nop
 800dd04:	e7fd      	b.n	800dd02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dd06:	4b0f      	ldr	r3, [pc, #60]	@ (800dd44 <vPortValidateInterruptPriority+0x7c>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dd0e:	4b0e      	ldr	r3, [pc, #56]	@ (800dd48 <vPortValidateInterruptPriority+0x80>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d90b      	bls.n	800dd2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800dd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd1a:	f383 8811 	msr	BASEPRI, r3
 800dd1e:	f3bf 8f6f 	isb	sy
 800dd22:	f3bf 8f4f 	dsb	sy
 800dd26:	603b      	str	r3, [r7, #0]
}
 800dd28:	bf00      	nop
 800dd2a:	bf00      	nop
 800dd2c:	e7fd      	b.n	800dd2a <vPortValidateInterruptPriority+0x62>
	}
 800dd2e:	bf00      	nop
 800dd30:	3714      	adds	r7, #20
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr
 800dd3a:	bf00      	nop
 800dd3c:	e000e3f0 	.word	0xe000e3f0
 800dd40:	200010b8 	.word	0x200010b8
 800dd44:	e000ed0c 	.word	0xe000ed0c
 800dd48:	200010bc 	.word	0x200010bc

0800dd4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b08a      	sub	sp, #40	@ 0x28
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dd54:	2300      	movs	r3, #0
 800dd56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dd58:	f7fe fa5e 	bl	800c218 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dd5c:	4b5c      	ldr	r3, [pc, #368]	@ (800ded0 <pvPortMalloc+0x184>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d101      	bne.n	800dd68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dd64:	f000 f924 	bl	800dfb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dd68:	4b5a      	ldr	r3, [pc, #360]	@ (800ded4 <pvPortMalloc+0x188>)
 800dd6a:	681a      	ldr	r2, [r3, #0]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	4013      	ands	r3, r2
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	f040 8095 	bne.w	800dea0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d01e      	beq.n	800ddba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800dd7c:	2208      	movs	r2, #8
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	4413      	add	r3, r2
 800dd82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f003 0307 	and.w	r3, r3, #7
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d015      	beq.n	800ddba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f023 0307 	bic.w	r3, r3, #7
 800dd94:	3308      	adds	r3, #8
 800dd96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f003 0307 	and.w	r3, r3, #7
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00b      	beq.n	800ddba <pvPortMalloc+0x6e>
	__asm volatile
 800dda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda6:	f383 8811 	msr	BASEPRI, r3
 800ddaa:	f3bf 8f6f 	isb	sy
 800ddae:	f3bf 8f4f 	dsb	sy
 800ddb2:	617b      	str	r3, [r7, #20]
}
 800ddb4:	bf00      	nop
 800ddb6:	bf00      	nop
 800ddb8:	e7fd      	b.n	800ddb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d06f      	beq.n	800dea0 <pvPortMalloc+0x154>
 800ddc0:	4b45      	ldr	r3, [pc, #276]	@ (800ded8 <pvPortMalloc+0x18c>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d86a      	bhi.n	800dea0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ddca:	4b44      	ldr	r3, [pc, #272]	@ (800dedc <pvPortMalloc+0x190>)
 800ddcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ddce:	4b43      	ldr	r3, [pc, #268]	@ (800dedc <pvPortMalloc+0x190>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ddd4:	e004      	b.n	800dde0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ddd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ddda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d903      	bls.n	800ddf2 <pvPortMalloc+0xa6>
 800ddea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d1f1      	bne.n	800ddd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ddf2:	4b37      	ldr	r3, [pc, #220]	@ (800ded0 <pvPortMalloc+0x184>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d051      	beq.n	800dea0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ddfc:	6a3b      	ldr	r3, [r7, #32]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	2208      	movs	r2, #8
 800de02:	4413      	add	r3, r2
 800de04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800de06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	6a3b      	ldr	r3, [r7, #32]
 800de0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800de0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de10:	685a      	ldr	r2, [r3, #4]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	1ad2      	subs	r2, r2, r3
 800de16:	2308      	movs	r3, #8
 800de18:	005b      	lsls	r3, r3, #1
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d920      	bls.n	800de60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800de1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	4413      	add	r3, r2
 800de24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	f003 0307 	and.w	r3, r3, #7
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d00b      	beq.n	800de48 <pvPortMalloc+0xfc>
	__asm volatile
 800de30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de34:	f383 8811 	msr	BASEPRI, r3
 800de38:	f3bf 8f6f 	isb	sy
 800de3c:	f3bf 8f4f 	dsb	sy
 800de40:	613b      	str	r3, [r7, #16]
}
 800de42:	bf00      	nop
 800de44:	bf00      	nop
 800de46:	e7fd      	b.n	800de44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800de48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de4a:	685a      	ldr	r2, [r3, #4]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	1ad2      	subs	r2, r2, r3
 800de50:	69bb      	ldr	r3, [r7, #24]
 800de52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800de54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800de5a:	69b8      	ldr	r0, [r7, #24]
 800de5c:	f000 f90a 	bl	800e074 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800de60:	4b1d      	ldr	r3, [pc, #116]	@ (800ded8 <pvPortMalloc+0x18c>)
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	1ad3      	subs	r3, r2, r3
 800de6a:	4a1b      	ldr	r2, [pc, #108]	@ (800ded8 <pvPortMalloc+0x18c>)
 800de6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800de6e:	4b1a      	ldr	r3, [pc, #104]	@ (800ded8 <pvPortMalloc+0x18c>)
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	4b1b      	ldr	r3, [pc, #108]	@ (800dee0 <pvPortMalloc+0x194>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	429a      	cmp	r2, r3
 800de78:	d203      	bcs.n	800de82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800de7a:	4b17      	ldr	r3, [pc, #92]	@ (800ded8 <pvPortMalloc+0x18c>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4a18      	ldr	r2, [pc, #96]	@ (800dee0 <pvPortMalloc+0x194>)
 800de80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800de82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de84:	685a      	ldr	r2, [r3, #4]
 800de86:	4b13      	ldr	r3, [pc, #76]	@ (800ded4 <pvPortMalloc+0x188>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	431a      	orrs	r2, r3
 800de8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800de90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de92:	2200      	movs	r2, #0
 800de94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800de96:	4b13      	ldr	r3, [pc, #76]	@ (800dee4 <pvPortMalloc+0x198>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	3301      	adds	r3, #1
 800de9c:	4a11      	ldr	r2, [pc, #68]	@ (800dee4 <pvPortMalloc+0x198>)
 800de9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dea0:	f7fe f9c8 	bl	800c234 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dea4:	69fb      	ldr	r3, [r7, #28]
 800dea6:	f003 0307 	and.w	r3, r3, #7
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d00b      	beq.n	800dec6 <pvPortMalloc+0x17a>
	__asm volatile
 800deae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb2:	f383 8811 	msr	BASEPRI, r3
 800deb6:	f3bf 8f6f 	isb	sy
 800deba:	f3bf 8f4f 	dsb	sy
 800debe:	60fb      	str	r3, [r7, #12]
}
 800dec0:	bf00      	nop
 800dec2:	bf00      	nop
 800dec4:	e7fd      	b.n	800dec2 <pvPortMalloc+0x176>
	return pvReturn;
 800dec6:	69fb      	ldr	r3, [r7, #28]
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3728      	adds	r7, #40	@ 0x28
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	200090c8 	.word	0x200090c8
 800ded4:	200090dc 	.word	0x200090dc
 800ded8:	200090cc 	.word	0x200090cc
 800dedc:	200090c0 	.word	0x200090c0
 800dee0:	200090d0 	.word	0x200090d0
 800dee4:	200090d4 	.word	0x200090d4

0800dee8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b086      	sub	sp, #24
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d04f      	beq.n	800df9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800defa:	2308      	movs	r3, #8
 800defc:	425b      	negs	r3, r3
 800defe:	697a      	ldr	r2, [r7, #20]
 800df00:	4413      	add	r3, r2
 800df02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	685a      	ldr	r2, [r3, #4]
 800df0c:	4b25      	ldr	r3, [pc, #148]	@ (800dfa4 <vPortFree+0xbc>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4013      	ands	r3, r2
 800df12:	2b00      	cmp	r3, #0
 800df14:	d10b      	bne.n	800df2e <vPortFree+0x46>
	__asm volatile
 800df16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df1a:	f383 8811 	msr	BASEPRI, r3
 800df1e:	f3bf 8f6f 	isb	sy
 800df22:	f3bf 8f4f 	dsb	sy
 800df26:	60fb      	str	r3, [r7, #12]
}
 800df28:	bf00      	nop
 800df2a:	bf00      	nop
 800df2c:	e7fd      	b.n	800df2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d00b      	beq.n	800df4e <vPortFree+0x66>
	__asm volatile
 800df36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df3a:	f383 8811 	msr	BASEPRI, r3
 800df3e:	f3bf 8f6f 	isb	sy
 800df42:	f3bf 8f4f 	dsb	sy
 800df46:	60bb      	str	r3, [r7, #8]
}
 800df48:	bf00      	nop
 800df4a:	bf00      	nop
 800df4c:	e7fd      	b.n	800df4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	685a      	ldr	r2, [r3, #4]
 800df52:	4b14      	ldr	r3, [pc, #80]	@ (800dfa4 <vPortFree+0xbc>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4013      	ands	r3, r2
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d01e      	beq.n	800df9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d11a      	bne.n	800df9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	685a      	ldr	r2, [r3, #4]
 800df68:	4b0e      	ldr	r3, [pc, #56]	@ (800dfa4 <vPortFree+0xbc>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	43db      	mvns	r3, r3
 800df6e:	401a      	ands	r2, r3
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800df74:	f7fe f950 	bl	800c218 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	685a      	ldr	r2, [r3, #4]
 800df7c:	4b0a      	ldr	r3, [pc, #40]	@ (800dfa8 <vPortFree+0xc0>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4413      	add	r3, r2
 800df82:	4a09      	ldr	r2, [pc, #36]	@ (800dfa8 <vPortFree+0xc0>)
 800df84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800df86:	6938      	ldr	r0, [r7, #16]
 800df88:	f000 f874 	bl	800e074 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800df8c:	4b07      	ldr	r3, [pc, #28]	@ (800dfac <vPortFree+0xc4>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	3301      	adds	r3, #1
 800df92:	4a06      	ldr	r2, [pc, #24]	@ (800dfac <vPortFree+0xc4>)
 800df94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800df96:	f7fe f94d 	bl	800c234 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800df9a:	bf00      	nop
 800df9c:	3718      	adds	r7, #24
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	200090dc 	.word	0x200090dc
 800dfa8:	200090cc 	.word	0x200090cc
 800dfac:	200090d8 	.word	0x200090d8

0800dfb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b085      	sub	sp, #20
 800dfb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dfb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dfba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dfbc:	4b27      	ldr	r3, [pc, #156]	@ (800e05c <prvHeapInit+0xac>)
 800dfbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f003 0307 	and.w	r3, r3, #7
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d00c      	beq.n	800dfe4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	3307      	adds	r3, #7
 800dfce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f023 0307 	bic.w	r3, r3, #7
 800dfd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dfd8:	68ba      	ldr	r2, [r7, #8]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	1ad3      	subs	r3, r2, r3
 800dfde:	4a1f      	ldr	r2, [pc, #124]	@ (800e05c <prvHeapInit+0xac>)
 800dfe0:	4413      	add	r3, r2
 800dfe2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dfe8:	4a1d      	ldr	r2, [pc, #116]	@ (800e060 <prvHeapInit+0xb0>)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dfee:	4b1c      	ldr	r3, [pc, #112]	@ (800e060 <prvHeapInit+0xb0>)
 800dff0:	2200      	movs	r2, #0
 800dff2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	68ba      	ldr	r2, [r7, #8]
 800dff8:	4413      	add	r3, r2
 800dffa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dffc:	2208      	movs	r2, #8
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	1a9b      	subs	r3, r3, r2
 800e002:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f023 0307 	bic.w	r3, r3, #7
 800e00a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	4a15      	ldr	r2, [pc, #84]	@ (800e064 <prvHeapInit+0xb4>)
 800e010:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e012:	4b14      	ldr	r3, [pc, #80]	@ (800e064 <prvHeapInit+0xb4>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2200      	movs	r2, #0
 800e018:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e01a:	4b12      	ldr	r3, [pc, #72]	@ (800e064 <prvHeapInit+0xb4>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2200      	movs	r2, #0
 800e020:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	68fa      	ldr	r2, [r7, #12]
 800e02a:	1ad2      	subs	r2, r2, r3
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e030:	4b0c      	ldr	r3, [pc, #48]	@ (800e064 <prvHeapInit+0xb4>)
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	4a0a      	ldr	r2, [pc, #40]	@ (800e068 <prvHeapInit+0xb8>)
 800e03e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	4a09      	ldr	r2, [pc, #36]	@ (800e06c <prvHeapInit+0xbc>)
 800e046:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e048:	4b09      	ldr	r3, [pc, #36]	@ (800e070 <prvHeapInit+0xc0>)
 800e04a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e04e:	601a      	str	r2, [r3, #0]
}
 800e050:	bf00      	nop
 800e052:	3714      	adds	r7, #20
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr
 800e05c:	200010c0 	.word	0x200010c0
 800e060:	200090c0 	.word	0x200090c0
 800e064:	200090c8 	.word	0x200090c8
 800e068:	200090d0 	.word	0x200090d0
 800e06c:	200090cc 	.word	0x200090cc
 800e070:	200090dc 	.word	0x200090dc

0800e074 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e074:	b480      	push	{r7}
 800e076:	b085      	sub	sp, #20
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e07c:	4b28      	ldr	r3, [pc, #160]	@ (800e120 <prvInsertBlockIntoFreeList+0xac>)
 800e07e:	60fb      	str	r3, [r7, #12]
 800e080:	e002      	b.n	800e088 <prvInsertBlockIntoFreeList+0x14>
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	60fb      	str	r3, [r7, #12]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d8f7      	bhi.n	800e082 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	68ba      	ldr	r2, [r7, #8]
 800e09c:	4413      	add	r3, r2
 800e09e:	687a      	ldr	r2, [r7, #4]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d108      	bne.n	800e0b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	685a      	ldr	r2, [r3, #4]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	441a      	add	r2, r3
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	68ba      	ldr	r2, [r7, #8]
 800e0c0:	441a      	add	r2, r3
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d118      	bne.n	800e0fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	4b15      	ldr	r3, [pc, #84]	@ (800e124 <prvInsertBlockIntoFreeList+0xb0>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d00d      	beq.n	800e0f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	685a      	ldr	r2, [r3, #4]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	441a      	add	r2, r3
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	601a      	str	r2, [r3, #0]
 800e0f0:	e008      	b.n	800e104 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e0f2:	4b0c      	ldr	r3, [pc, #48]	@ (800e124 <prvInsertBlockIntoFreeList+0xb0>)
 800e0f4:	681a      	ldr	r2, [r3, #0]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	601a      	str	r2, [r3, #0]
 800e0fa:	e003      	b.n	800e104 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e104:	68fa      	ldr	r2, [r7, #12]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	429a      	cmp	r2, r3
 800e10a:	d002      	beq.n	800e112 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e112:	bf00      	nop
 800e114:	3714      	adds	r7, #20
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	200090c0 	.word	0x200090c0
 800e124:	200090c8 	.word	0x200090c8

0800e128 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e12c:	2200      	movs	r2, #0
 800e12e:	4912      	ldr	r1, [pc, #72]	@ (800e178 <MX_USB_Device_Init+0x50>)
 800e130:	4812      	ldr	r0, [pc, #72]	@ (800e17c <MX_USB_Device_Init+0x54>)
 800e132:	f7fa ffbf 	bl	80090b4 <USBD_Init>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d001      	beq.n	800e140 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e13c:	f7f2 faea 	bl	8000714 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e140:	490f      	ldr	r1, [pc, #60]	@ (800e180 <MX_USB_Device_Init+0x58>)
 800e142:	480e      	ldr	r0, [pc, #56]	@ (800e17c <MX_USB_Device_Init+0x54>)
 800e144:	f7fa ffe6 	bl	8009114 <USBD_RegisterClass>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d001      	beq.n	800e152 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800e14e:	f7f2 fae1 	bl	8000714 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e152:	490c      	ldr	r1, [pc, #48]	@ (800e184 <MX_USB_Device_Init+0x5c>)
 800e154:	4809      	ldr	r0, [pc, #36]	@ (800e17c <MX_USB_Device_Init+0x54>)
 800e156:	f7fa fedd 	bl	8008f14 <USBD_CDC_RegisterInterface>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d001      	beq.n	800e164 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800e160:	f7f2 fad8 	bl	8000714 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e164:	4805      	ldr	r0, [pc, #20]	@ (800e17c <MX_USB_Device_Init+0x54>)
 800e166:	f7fb f80b 	bl	8009180 <USBD_Start>
 800e16a:	4603      	mov	r3, r0
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d001      	beq.n	800e174 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800e170:	f7f2 fad0 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e174:	bf00      	nop
 800e176:	bd80      	pop	{r7, pc}
 800e178:	200000bc 	.word	0x200000bc
 800e17c:	200090e0 	.word	0x200090e0
 800e180:	20000024 	.word	0x20000024
 800e184:	200000a8 	.word	0x200000a8

0800e188 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e18c:	2200      	movs	r2, #0
 800e18e:	4905      	ldr	r1, [pc, #20]	@ (800e1a4 <CDC_Init_FS+0x1c>)
 800e190:	4805      	ldr	r0, [pc, #20]	@ (800e1a8 <CDC_Init_FS+0x20>)
 800e192:	f7fa fed9 	bl	8008f48 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e196:	4905      	ldr	r1, [pc, #20]	@ (800e1ac <CDC_Init_FS+0x24>)
 800e198:	4803      	ldr	r0, [pc, #12]	@ (800e1a8 <CDC_Init_FS+0x20>)
 800e19a:	f7fa fef7 	bl	8008f8c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e19e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	20009bbc 	.word	0x20009bbc
 800e1a8:	200090e0 	.word	0x200090e0
 800e1ac:	200093bc 	.word	0x200093bc

0800e1b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e1b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr

0800e1c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	6039      	str	r1, [r7, #0]
 800e1ca:	71fb      	strb	r3, [r7, #7]
 800e1cc:	4613      	mov	r3, r2
 800e1ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e1d0:	79fb      	ldrb	r3, [r7, #7]
 800e1d2:	2b23      	cmp	r3, #35	@ 0x23
 800e1d4:	d84a      	bhi.n	800e26c <CDC_Control_FS+0xac>
 800e1d6:	a201      	add	r2, pc, #4	@ (adr r2, 800e1dc <CDC_Control_FS+0x1c>)
 800e1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1dc:	0800e26d 	.word	0x0800e26d
 800e1e0:	0800e26d 	.word	0x0800e26d
 800e1e4:	0800e26d 	.word	0x0800e26d
 800e1e8:	0800e26d 	.word	0x0800e26d
 800e1ec:	0800e26d 	.word	0x0800e26d
 800e1f0:	0800e26d 	.word	0x0800e26d
 800e1f4:	0800e26d 	.word	0x0800e26d
 800e1f8:	0800e26d 	.word	0x0800e26d
 800e1fc:	0800e26d 	.word	0x0800e26d
 800e200:	0800e26d 	.word	0x0800e26d
 800e204:	0800e26d 	.word	0x0800e26d
 800e208:	0800e26d 	.word	0x0800e26d
 800e20c:	0800e26d 	.word	0x0800e26d
 800e210:	0800e26d 	.word	0x0800e26d
 800e214:	0800e26d 	.word	0x0800e26d
 800e218:	0800e26d 	.word	0x0800e26d
 800e21c:	0800e26d 	.word	0x0800e26d
 800e220:	0800e26d 	.word	0x0800e26d
 800e224:	0800e26d 	.word	0x0800e26d
 800e228:	0800e26d 	.word	0x0800e26d
 800e22c:	0800e26d 	.word	0x0800e26d
 800e230:	0800e26d 	.word	0x0800e26d
 800e234:	0800e26d 	.word	0x0800e26d
 800e238:	0800e26d 	.word	0x0800e26d
 800e23c:	0800e26d 	.word	0x0800e26d
 800e240:	0800e26d 	.word	0x0800e26d
 800e244:	0800e26d 	.word	0x0800e26d
 800e248:	0800e26d 	.word	0x0800e26d
 800e24c:	0800e26d 	.word	0x0800e26d
 800e250:	0800e26d 	.word	0x0800e26d
 800e254:	0800e26d 	.word	0x0800e26d
 800e258:	0800e26d 	.word	0x0800e26d
 800e25c:	0800e26d 	.word	0x0800e26d
 800e260:	0800e26d 	.word	0x0800e26d
 800e264:	0800e26d 	.word	0x0800e26d
 800e268:	0800e26d 	.word	0x0800e26d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e26c:	bf00      	nop
  }

  return (USBD_OK);
 800e26e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e270:	4618      	mov	r0, r3
 800e272:	370c      	adds	r7, #12
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e286:	6879      	ldr	r1, [r7, #4]
 800e288:	4805      	ldr	r0, [pc, #20]	@ (800e2a0 <CDC_Receive_FS+0x24>)
 800e28a:	f7fa fe7f 	bl	8008f8c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e28e:	4804      	ldr	r0, [pc, #16]	@ (800e2a0 <CDC_Receive_FS+0x24>)
 800e290:	f7fa feda 	bl	8009048 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e294:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e296:	4618      	mov	r0, r3
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	200090e0 	.word	0x200090e0

0800e2a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b084      	sub	sp, #16
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e2b4:	4b0d      	ldr	r3, [pc, #52]	@ (800e2ec <CDC_Transmit_FS+0x48>)
 800e2b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e2ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d001      	beq.n	800e2ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e00b      	b.n	800e2e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e2ca:	887b      	ldrh	r3, [r7, #2]
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	6879      	ldr	r1, [r7, #4]
 800e2d0:	4806      	ldr	r0, [pc, #24]	@ (800e2ec <CDC_Transmit_FS+0x48>)
 800e2d2:	f7fa fe39 	bl	8008f48 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e2d6:	4805      	ldr	r0, [pc, #20]	@ (800e2ec <CDC_Transmit_FS+0x48>)
 800e2d8:	f7fa fe76 	bl	8008fc8 <USBD_CDC_TransmitPacket>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	200090e0 	.word	0x200090e0

0800e2f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b087      	sub	sp, #28
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	60b9      	str	r1, [r7, #8]
 800e2fa:	4613      	mov	r3, r2
 800e2fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e2fe:	2300      	movs	r3, #0
 800e300:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e302:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e306:	4618      	mov	r0, r3
 800e308:	371c      	adds	r7, #28
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
	...

0800e314 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
 800e31a:	4603      	mov	r3, r0
 800e31c:	6039      	str	r1, [r7, #0]
 800e31e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	2212      	movs	r2, #18
 800e324:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e326:	4b03      	ldr	r3, [pc, #12]	@ (800e334 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e328:	4618      	mov	r0, r3
 800e32a:	370c      	adds	r7, #12
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr
 800e334:	200000dc 	.word	0x200000dc

0800e338 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	4603      	mov	r3, r0
 800e340:	6039      	str	r1, [r7, #0]
 800e342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	2204      	movs	r2, #4
 800e348:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e34a:	4b03      	ldr	r3, [pc, #12]	@ (800e358 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	370c      	adds	r7, #12
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr
 800e358:	200000f0 	.word	0x200000f0

0800e35c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	4603      	mov	r3, r0
 800e364:	6039      	str	r1, [r7, #0]
 800e366:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e368:	79fb      	ldrb	r3, [r7, #7]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d105      	bne.n	800e37a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e36e:	683a      	ldr	r2, [r7, #0]
 800e370:	4907      	ldr	r1, [pc, #28]	@ (800e390 <USBD_CDC_ProductStrDescriptor+0x34>)
 800e372:	4808      	ldr	r0, [pc, #32]	@ (800e394 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e374:	f7fc f84c 	bl	800a410 <USBD_GetString>
 800e378:	e004      	b.n	800e384 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e37a:	683a      	ldr	r2, [r7, #0]
 800e37c:	4904      	ldr	r1, [pc, #16]	@ (800e390 <USBD_CDC_ProductStrDescriptor+0x34>)
 800e37e:	4805      	ldr	r0, [pc, #20]	@ (800e394 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e380:	f7fc f846 	bl	800a410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e384:	4b02      	ldr	r3, [pc, #8]	@ (800e390 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800e386:	4618      	mov	r0, r3
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	2000a3bc 	.word	0x2000a3bc
 800e394:	0800f658 	.word	0x0800f658

0800e398 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	4603      	mov	r3, r0
 800e3a0:	6039      	str	r1, [r7, #0]
 800e3a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e3a4:	683a      	ldr	r2, [r7, #0]
 800e3a6:	4904      	ldr	r1, [pc, #16]	@ (800e3b8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800e3a8:	4804      	ldr	r0, [pc, #16]	@ (800e3bc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800e3aa:	f7fc f831 	bl	800a410 <USBD_GetString>
  return USBD_StrDesc;
 800e3ae:	4b02      	ldr	r3, [pc, #8]	@ (800e3b8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	2000a3bc 	.word	0x2000a3bc
 800e3bc:	0800f670 	.word	0x0800f670

0800e3c0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	6039      	str	r1, [r7, #0]
 800e3ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	221a      	movs	r2, #26
 800e3d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e3d2:	f000 f843 	bl	800e45c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e3d6:	4b02      	ldr	r3, [pc, #8]	@ (800e3e0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3708      	adds	r7, #8
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	200000f4 	.word	0x200000f4

0800e3e4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	6039      	str	r1, [r7, #0]
 800e3ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e3f0:	79fb      	ldrb	r3, [r7, #7]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d105      	bne.n	800e402 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e3f6:	683a      	ldr	r2, [r7, #0]
 800e3f8:	4907      	ldr	r1, [pc, #28]	@ (800e418 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e3fa:	4808      	ldr	r0, [pc, #32]	@ (800e41c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e3fc:	f7fc f808 	bl	800a410 <USBD_GetString>
 800e400:	e004      	b.n	800e40c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e402:	683a      	ldr	r2, [r7, #0]
 800e404:	4904      	ldr	r1, [pc, #16]	@ (800e418 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e406:	4805      	ldr	r0, [pc, #20]	@ (800e41c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e408:	f7fc f802 	bl	800a410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e40c:	4b02      	ldr	r3, [pc, #8]	@ (800e418 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3708      	adds	r7, #8
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	2000a3bc 	.word	0x2000a3bc
 800e41c:	0800f684 	.word	0x0800f684

0800e420 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	4603      	mov	r3, r0
 800e428:	6039      	str	r1, [r7, #0]
 800e42a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e42c:	79fb      	ldrb	r3, [r7, #7]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d105      	bne.n	800e43e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e432:	683a      	ldr	r2, [r7, #0]
 800e434:	4907      	ldr	r1, [pc, #28]	@ (800e454 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e436:	4808      	ldr	r0, [pc, #32]	@ (800e458 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e438:	f7fb ffea 	bl	800a410 <USBD_GetString>
 800e43c:	e004      	b.n	800e448 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e43e:	683a      	ldr	r2, [r7, #0]
 800e440:	4904      	ldr	r1, [pc, #16]	@ (800e454 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e442:	4805      	ldr	r0, [pc, #20]	@ (800e458 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e444:	f7fb ffe4 	bl	800a410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e448:	4b02      	ldr	r3, [pc, #8]	@ (800e454 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3708      	adds	r7, #8
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	2000a3bc 	.word	0x2000a3bc
 800e458:	0800f690 	.word	0x0800f690

0800e45c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e462:	4b0f      	ldr	r3, [pc, #60]	@ (800e4a0 <Get_SerialNum+0x44>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e468:	4b0e      	ldr	r3, [pc, #56]	@ (800e4a4 <Get_SerialNum+0x48>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e46e:	4b0e      	ldr	r3, [pc, #56]	@ (800e4a8 <Get_SerialNum+0x4c>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	4413      	add	r3, r2
 800e47a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d009      	beq.n	800e496 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e482:	2208      	movs	r2, #8
 800e484:	4909      	ldr	r1, [pc, #36]	@ (800e4ac <Get_SerialNum+0x50>)
 800e486:	68f8      	ldr	r0, [r7, #12]
 800e488:	f000 f814 	bl	800e4b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e48c:	2204      	movs	r2, #4
 800e48e:	4908      	ldr	r1, [pc, #32]	@ (800e4b0 <Get_SerialNum+0x54>)
 800e490:	68b8      	ldr	r0, [r7, #8]
 800e492:	f000 f80f 	bl	800e4b4 <IntToUnicode>
  }
}
 800e496:	bf00      	nop
 800e498:	3710      	adds	r7, #16
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	1fff7590 	.word	0x1fff7590
 800e4a4:	1fff7594 	.word	0x1fff7594
 800e4a8:	1fff7598 	.word	0x1fff7598
 800e4ac:	200000f6 	.word	0x200000f6
 800e4b0:	20000106 	.word	0x20000106

0800e4b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b087      	sub	sp, #28
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	4613      	mov	r3, r2
 800e4c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	75fb      	strb	r3, [r7, #23]
 800e4ca:	e027      	b.n	800e51c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	0f1b      	lsrs	r3, r3, #28
 800e4d0:	2b09      	cmp	r3, #9
 800e4d2:	d80b      	bhi.n	800e4ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	0f1b      	lsrs	r3, r3, #28
 800e4d8:	b2da      	uxtb	r2, r3
 800e4da:	7dfb      	ldrb	r3, [r7, #23]
 800e4dc:	005b      	lsls	r3, r3, #1
 800e4de:	4619      	mov	r1, r3
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	440b      	add	r3, r1
 800e4e4:	3230      	adds	r2, #48	@ 0x30
 800e4e6:	b2d2      	uxtb	r2, r2
 800e4e8:	701a      	strb	r2, [r3, #0]
 800e4ea:	e00a      	b.n	800e502 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	0f1b      	lsrs	r3, r3, #28
 800e4f0:	b2da      	uxtb	r2, r3
 800e4f2:	7dfb      	ldrb	r3, [r7, #23]
 800e4f4:	005b      	lsls	r3, r3, #1
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	440b      	add	r3, r1
 800e4fc:	3237      	adds	r2, #55	@ 0x37
 800e4fe:	b2d2      	uxtb	r2, r2
 800e500:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	011b      	lsls	r3, r3, #4
 800e506:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e508:	7dfb      	ldrb	r3, [r7, #23]
 800e50a:	005b      	lsls	r3, r3, #1
 800e50c:	3301      	adds	r3, #1
 800e50e:	68ba      	ldr	r2, [r7, #8]
 800e510:	4413      	add	r3, r2
 800e512:	2200      	movs	r2, #0
 800e514:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e516:	7dfb      	ldrb	r3, [r7, #23]
 800e518:	3301      	adds	r3, #1
 800e51a:	75fb      	strb	r3, [r7, #23]
 800e51c:	7dfa      	ldrb	r2, [r7, #23]
 800e51e:	79fb      	ldrb	r3, [r7, #7]
 800e520:	429a      	cmp	r2, r3
 800e522:	d3d3      	bcc.n	800e4cc <IntToUnicode+0x18>
  }
}
 800e524:	bf00      	nop
 800e526:	bf00      	nop
 800e528:	371c      	adds	r7, #28
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr

0800e532 <LL_AHB2_GRP1_EnableClock>:
{
 800e532:	b480      	push	{r7}
 800e534:	b085      	sub	sp, #20
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800e53a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e53e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e540:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	4313      	orrs	r3, r2
 800e548:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800e54a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e54e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	4013      	ands	r3, r2
 800e554:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e556:	68fb      	ldr	r3, [r7, #12]
}
 800e558:	bf00      	nop
 800e55a:	3714      	adds	r7, #20
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <LL_APB1_GRP1_EnableClock>:
{
 800e564:	b480      	push	{r7}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800e56c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e570:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e572:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4313      	orrs	r3, r2
 800e57a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800e57c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e580:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	4013      	ands	r3, r2
 800e586:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e588:	68fb      	ldr	r3, [r7, #12]
}
 800e58a:	bf00      	nop
 800e58c:	3714      	adds	r7, #20
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr
	...

0800e598 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b09c      	sub	sp, #112	@ 0x70
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5a0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	601a      	str	r2, [r3, #0]
 800e5a8:	605a      	str	r2, [r3, #4]
 800e5aa:	609a      	str	r2, [r3, #8]
 800e5ac:	60da      	str	r2, [r3, #12]
 800e5ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e5b0:	f107 030c 	add.w	r3, r7, #12
 800e5b4:	2250      	movs	r2, #80	@ 0x50
 800e5b6:	2100      	movs	r1, #0
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f000 fb27 	bl	800ec0c <memset>
  if(pcdHandle->Instance==USB)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	4a1b      	ldr	r2, [pc, #108]	@ (800e630 <HAL_PCD_MspInit+0x98>)
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d12f      	bne.n	800e628 <HAL_PCD_MspInit+0x90>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e5c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e5cc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e5d2:	f107 030c 	add.w	r3, r7, #12
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7f7 fb5b 	bl	8005c92 <HAL_RCCEx_PeriphCLKConfig>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d001      	beq.n	800e5e6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800e5e2:	f7f2 f897 	bl	8000714 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5e6:	2001      	movs	r0, #1
 800e5e8:	f7ff ffa3 	bl	800e532 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e5ec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e5f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5f2:	2302      	movs	r3, #2
 800e5f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800e5fe:	230a      	movs	r3, #10
 800e600:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e602:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800e606:	4619      	mov	r1, r3
 800e608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e60c:	f7f4 f938 	bl	8002880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e610:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800e614:	f7ff ffa6 	bl	800e564 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800e618:	2200      	movs	r2, #0
 800e61a:	2105      	movs	r1, #5
 800e61c:	2014      	movs	r0, #20
 800e61e:	f7f3 fe93 	bl	8002348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e622:	2014      	movs	r0, #20
 800e624:	f7f3 feaa 	bl	800237c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e628:	bf00      	nop
 800e62a:	3770      	adds	r7, #112	@ 0x70
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}
 800e630:	40006800 	.word	0x40006800

0800e634 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800e648:	4619      	mov	r1, r3
 800e64a:	4610      	mov	r0, r2
 800e64c:	f7fa fde5 	bl	800921a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e650:	bf00      	nop
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	460b      	mov	r3, r1
 800e662:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e66a:	78fa      	ldrb	r2, [r7, #3]
 800e66c:	6879      	ldr	r1, [r7, #4]
 800e66e:	4613      	mov	r3, r2
 800e670:	009b      	lsls	r3, r3, #2
 800e672:	4413      	add	r3, r2
 800e674:	00db      	lsls	r3, r3, #3
 800e676:	440b      	add	r3, r1
 800e678:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	78fb      	ldrb	r3, [r7, #3]
 800e680:	4619      	mov	r1, r3
 800e682:	f7fa fe1f 	bl	80092c4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e686:	bf00      	nop
 800e688:	3708      	adds	r7, #8
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}

0800e68e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e68e:	b580      	push	{r7, lr}
 800e690:	b082      	sub	sp, #8
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
 800e696:	460b      	mov	r3, r1
 800e698:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e6a0:	78fa      	ldrb	r2, [r7, #3]
 800e6a2:	6879      	ldr	r1, [r7, #4]
 800e6a4:	4613      	mov	r3, r2
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	4413      	add	r3, r2
 800e6aa:	00db      	lsls	r3, r3, #3
 800e6ac:	440b      	add	r3, r1
 800e6ae:	3324      	adds	r3, #36	@ 0x24
 800e6b0:	681a      	ldr	r2, [r3, #0]
 800e6b2:	78fb      	ldrb	r3, [r7, #3]
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	f7fa feb8 	bl	800942a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e6ba:	bf00      	nop
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b082      	sub	sp, #8
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7fa fff2 	bl	80096ba <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e6d6:	bf00      	nop
 800e6d8:	3708      	adds	r7, #8
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b084      	sub	sp, #16
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	795b      	ldrb	r3, [r3, #5]
 800e6ee:	2b02      	cmp	r3, #2
 800e6f0:	d001      	beq.n	800e6f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e6f2:	f7f2 f80f 	bl	8000714 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e6fc:	7bfa      	ldrb	r2, [r7, #15]
 800e6fe:	4611      	mov	r1, r2
 800e700:	4618      	mov	r0, r3
 800e702:	f7fa ff96 	bl	8009632 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7fa ff3e 	bl	800958e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e712:	bf00      	nop
 800e714:	3710      	adds	r7, #16
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
	...

0800e71c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fa ff91 	bl	8009652 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	7a5b      	ldrb	r3, [r3, #9]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d005      	beq.n	800e744 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e738:	4b04      	ldr	r3, [pc, #16]	@ (800e74c <HAL_PCD_SuspendCallback+0x30>)
 800e73a:	691b      	ldr	r3, [r3, #16]
 800e73c:	4a03      	ldr	r2, [pc, #12]	@ (800e74c <HAL_PCD_SuspendCallback+0x30>)
 800e73e:	f043 0306 	orr.w	r3, r3, #6
 800e742:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e744:	bf00      	nop
 800e746:	3708      	adds	r7, #8
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	e000ed00 	.word	0xe000ed00

0800e750 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	7a5b      	ldrb	r3, [r3, #9]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d007      	beq.n	800e770 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e760:	4b08      	ldr	r3, [pc, #32]	@ (800e784 <HAL_PCD_ResumeCallback+0x34>)
 800e762:	691b      	ldr	r3, [r3, #16]
 800e764:	4a07      	ldr	r2, [pc, #28]	@ (800e784 <HAL_PCD_ResumeCallback+0x34>)
 800e766:	f023 0306 	bic.w	r3, r3, #6
 800e76a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e76c:	f000 f9fa 	bl	800eb64 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e776:	4618      	mov	r0, r3
 800e778:	f7fa ff87 	bl	800968a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e77c:	bf00      	nop
 800e77e:	3708      	adds	r7, #8
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	e000ed00 	.word	0xe000ed00

0800e788 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e790:	4a2c      	ldr	r2, [pc, #176]	@ (800e844 <USBD_LL_Init+0xbc>)
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	4a2a      	ldr	r2, [pc, #168]	@ (800e844 <USBD_LL_Init+0xbc>)
 800e79c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800e7a0:	f7f5 ff16 	bl	80045d0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800e7a4:	4b27      	ldr	r3, [pc, #156]	@ (800e844 <USBD_LL_Init+0xbc>)
 800e7a6:	4a28      	ldr	r2, [pc, #160]	@ (800e848 <USBD_LL_Init+0xc0>)
 800e7a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e7aa:	4b26      	ldr	r3, [pc, #152]	@ (800e844 <USBD_LL_Init+0xbc>)
 800e7ac:	2208      	movs	r2, #8
 800e7ae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e7b0:	4b24      	ldr	r3, [pc, #144]	@ (800e844 <USBD_LL_Init+0xbc>)
 800e7b2:	2202      	movs	r2, #2
 800e7b4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e7b6:	4b23      	ldr	r3, [pc, #140]	@ (800e844 <USBD_LL_Init+0xbc>)
 800e7b8:	2202      	movs	r2, #2
 800e7ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e7bc:	4b21      	ldr	r3, [pc, #132]	@ (800e844 <USBD_LL_Init+0xbc>)
 800e7be:	2200      	movs	r2, #0
 800e7c0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e7c2:	4b20      	ldr	r3, [pc, #128]	@ (800e844 <USBD_LL_Init+0xbc>)
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e7c8:	4b1e      	ldr	r3, [pc, #120]	@ (800e844 <USBD_LL_Init+0xbc>)
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e7ce:	4b1d      	ldr	r3, [pc, #116]	@ (800e844 <USBD_LL_Init+0xbc>)
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e7d4:	481b      	ldr	r0, [pc, #108]	@ (800e844 <USBD_LL_Init+0xbc>)
 800e7d6:	f7f4 f9db 	bl	8002b90 <HAL_PCD_Init>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d001      	beq.n	800e7e4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800e7e0:	f7f1 ff98 	bl	8000714 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e7ea:	2318      	movs	r3, #24
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	f7f5 fe62 	bl	80044b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e7fa:	2358      	movs	r3, #88	@ 0x58
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	2180      	movs	r1, #128	@ 0x80
 800e800:	f7f5 fe5a 	bl	80044b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e80a:	23c0      	movs	r3, #192	@ 0xc0
 800e80c:	2200      	movs	r2, #0
 800e80e:	2181      	movs	r1, #129	@ 0x81
 800e810:	f7f5 fe52 	bl	80044b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e81a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e81e:	2200      	movs	r2, #0
 800e820:	2101      	movs	r1, #1
 800e822:	f7f5 fe49 	bl	80044b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e82c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e830:	2200      	movs	r2, #0
 800e832:	2182      	movs	r1, #130	@ 0x82
 800e834:	f7f5 fe40 	bl	80044b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e838:	2300      	movs	r3, #0
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3708      	adds	r7, #8
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	2000a5bc 	.word	0x2000a5bc
 800e848:	40006800 	.word	0x40006800

0800e84c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e854:	2300      	movs	r3, #0
 800e856:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e858:	2300      	movs	r3, #0
 800e85a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e862:	4618      	mov	r0, r3
 800e864:	f7f4 fa62 	bl	8002d2c <HAL_PCD_Start>
 800e868:	4603      	mov	r3, r0
 800e86a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e86c:	7bfb      	ldrb	r3, [r7, #15]
 800e86e:	4618      	mov	r0, r3
 800e870:	f000 f97e 	bl	800eb70 <USBD_Get_USB_Status>
 800e874:	4603      	mov	r3, r0
 800e876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e878:	7bbb      	ldrb	r3, [r7, #14]
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3710      	adds	r7, #16
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}

0800e882 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e882:	b580      	push	{r7, lr}
 800e884:	b084      	sub	sp, #16
 800e886:	af00      	add	r7, sp, #0
 800e888:	6078      	str	r0, [r7, #4]
 800e88a:	4608      	mov	r0, r1
 800e88c:	4611      	mov	r1, r2
 800e88e:	461a      	mov	r2, r3
 800e890:	4603      	mov	r3, r0
 800e892:	70fb      	strb	r3, [r7, #3]
 800e894:	460b      	mov	r3, r1
 800e896:	70bb      	strb	r3, [r7, #2]
 800e898:	4613      	mov	r3, r2
 800e89a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e89c:	2300      	movs	r3, #0
 800e89e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e8aa:	78bb      	ldrb	r3, [r7, #2]
 800e8ac:	883a      	ldrh	r2, [r7, #0]
 800e8ae:	78f9      	ldrb	r1, [r7, #3]
 800e8b0:	f7f4 fba9 	bl	8003006 <HAL_PCD_EP_Open>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8b8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f000 f958 	bl	800eb70 <USBD_Get_USB_Status>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3710      	adds	r7, #16
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}

0800e8ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8ce:	b580      	push	{r7, lr}
 800e8d0:	b084      	sub	sp, #16
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	6078      	str	r0, [r7, #4]
 800e8d6:	460b      	mov	r3, r1
 800e8d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e8e8:	78fa      	ldrb	r2, [r7, #3]
 800e8ea:	4611      	mov	r1, r2
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7f4 fbe9 	bl	80030c4 <HAL_PCD_EP_Close>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8f6:	7bfb      	ldrb	r3, [r7, #15]
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f000 f939 	bl	800eb70 <USBD_Get_USB_Status>
 800e8fe:	4603      	mov	r3, r0
 800e900:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e902:	7bbb      	ldrb	r3, [r7, #14]
}
 800e904:	4618      	mov	r0, r3
 800e906:	3710      	adds	r7, #16
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}

0800e90c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	460b      	mov	r3, r1
 800e916:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e918:	2300      	movs	r3, #0
 800e91a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e91c:	2300      	movs	r3, #0
 800e91e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e926:	78fa      	ldrb	r2, [r7, #3]
 800e928:	4611      	mov	r1, r2
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7f4 fc92 	bl	8003254 <HAL_PCD_EP_SetStall>
 800e930:	4603      	mov	r3, r0
 800e932:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e934:	7bfb      	ldrb	r3, [r7, #15]
 800e936:	4618      	mov	r0, r3
 800e938:	f000 f91a 	bl	800eb70 <USBD_Get_USB_Status>
 800e93c:	4603      	mov	r3, r0
 800e93e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e940:	7bbb      	ldrb	r3, [r7, #14]
}
 800e942:	4618      	mov	r0, r3
 800e944:	3710      	adds	r7, #16
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b084      	sub	sp, #16
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
 800e952:	460b      	mov	r3, r1
 800e954:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e956:	2300      	movs	r3, #0
 800e958:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e95a:	2300      	movs	r3, #0
 800e95c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e964:	78fa      	ldrb	r2, [r7, #3]
 800e966:	4611      	mov	r1, r2
 800e968:	4618      	mov	r0, r3
 800e96a:	f7f4 fcc5 	bl	80032f8 <HAL_PCD_EP_ClrStall>
 800e96e:	4603      	mov	r3, r0
 800e970:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e972:	7bfb      	ldrb	r3, [r7, #15]
 800e974:	4618      	mov	r0, r3
 800e976:	f000 f8fb 	bl	800eb70 <USBD_Get_USB_Status>
 800e97a:	4603      	mov	r3, r0
 800e97c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e97e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e980:	4618      	mov	r0, r3
 800e982:	3710      	adds	r7, #16
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e988:	b480      	push	{r7}
 800e98a:	b085      	sub	sp, #20
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	460b      	mov	r3, r1
 800e992:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e99a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e99c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	da0b      	bge.n	800e9bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e9a4:	78fb      	ldrb	r3, [r7, #3]
 800e9a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e9aa:	68f9      	ldr	r1, [r7, #12]
 800e9ac:	4613      	mov	r3, r2
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	4413      	add	r3, r2
 800e9b2:	00db      	lsls	r3, r3, #3
 800e9b4:	440b      	add	r3, r1
 800e9b6:	3312      	adds	r3, #18
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	e00b      	b.n	800e9d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e9bc:	78fb      	ldrb	r3, [r7, #3]
 800e9be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e9c2:	68f9      	ldr	r1, [r7, #12]
 800e9c4:	4613      	mov	r3, r2
 800e9c6:	009b      	lsls	r3, r3, #2
 800e9c8:	4413      	add	r3, r2
 800e9ca:	00db      	lsls	r3, r3, #3
 800e9cc:	440b      	add	r3, r1
 800e9ce:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800e9d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3714      	adds	r7, #20
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e9fa:	78fa      	ldrb	r2, [r7, #3]
 800e9fc:	4611      	mov	r1, r2
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7f4 fadd 	bl	8002fbe <HAL_PCD_SetAddress>
 800ea04:	4603      	mov	r3, r0
 800ea06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea08:	7bfb      	ldrb	r3, [r7, #15]
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f000 f8b0 	bl	800eb70 <USBD_Get_USB_Status>
 800ea10:	4603      	mov	r3, r0
 800ea12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea14:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	3710      	adds	r7, #16
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}

0800ea1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ea1e:	b580      	push	{r7, lr}
 800ea20:	b086      	sub	sp, #24
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	60f8      	str	r0, [r7, #12]
 800ea26:	607a      	str	r2, [r7, #4]
 800ea28:	603b      	str	r3, [r7, #0]
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea32:	2300      	movs	r3, #0
 800ea34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ea3c:	7af9      	ldrb	r1, [r7, #11]
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	687a      	ldr	r2, [r7, #4]
 800ea42:	f7f4 fbd0 	bl	80031e6 <HAL_PCD_EP_Transmit>
 800ea46:	4603      	mov	r3, r0
 800ea48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea4a:	7dfb      	ldrb	r3, [r7, #23]
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f000 f88f 	bl	800eb70 <USBD_Get_USB_Status>
 800ea52:	4603      	mov	r3, r0
 800ea54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ea56:	7dbb      	ldrb	r3, [r7, #22]
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3718      	adds	r7, #24
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b086      	sub	sp, #24
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	607a      	str	r2, [r7, #4]
 800ea6a:	603b      	str	r3, [r7, #0]
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea70:	2300      	movs	r3, #0
 800ea72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea74:	2300      	movs	r3, #0
 800ea76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ea7e:	7af9      	ldrb	r1, [r7, #11]
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	687a      	ldr	r2, [r7, #4]
 800ea84:	f7f4 fb66 	bl	8003154 <HAL_PCD_EP_Receive>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea8c:	7dfb      	ldrb	r3, [r7, #23]
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f000 f86e 	bl	800eb70 <USBD_Get_USB_Status>
 800ea94:	4603      	mov	r3, r0
 800ea96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ea98:	7dbb      	ldrb	r3, [r7, #22]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3718      	adds	r7, #24
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}

0800eaa2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eaa2:	b580      	push	{r7, lr}
 800eaa4:	b082      	sub	sp, #8
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
 800eaaa:	460b      	mov	r3, r1
 800eaac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eab4:	78fa      	ldrb	r2, [r7, #3]
 800eab6:	4611      	mov	r1, r2
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7f4 fb7c 	bl	80031b6 <HAL_PCD_EP_GetRxCount>
 800eabe:	4603      	mov	r3, r0
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3708      	adds	r7, #8
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	460b      	mov	r3, r1
 800ead2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ead4:	78fb      	ldrb	r3, [r7, #3]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d002      	beq.n	800eae0 <HAL_PCDEx_LPM_Callback+0x18>
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d013      	beq.n	800eb06 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800eade:	e023      	b.n	800eb28 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	7a5b      	ldrb	r3, [r3, #9]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d007      	beq.n	800eaf8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800eae8:	f000 f83c 	bl	800eb64 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eaec:	4b10      	ldr	r3, [pc, #64]	@ (800eb30 <HAL_PCDEx_LPM_Callback+0x68>)
 800eaee:	691b      	ldr	r3, [r3, #16]
 800eaf0:	4a0f      	ldr	r2, [pc, #60]	@ (800eb30 <HAL_PCDEx_LPM_Callback+0x68>)
 800eaf2:	f023 0306 	bic.w	r3, r3, #6
 800eaf6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fa fdc3 	bl	800968a <USBD_LL_Resume>
    break;
 800eb04:	e010      	b.n	800eb28 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f7fa fda0 	bl	8009652 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	7a5b      	ldrb	r3, [r3, #9]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d005      	beq.n	800eb26 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eb1a:	4b05      	ldr	r3, [pc, #20]	@ (800eb30 <HAL_PCDEx_LPM_Callback+0x68>)
 800eb1c:	691b      	ldr	r3, [r3, #16]
 800eb1e:	4a04      	ldr	r2, [pc, #16]	@ (800eb30 <HAL_PCDEx_LPM_Callback+0x68>)
 800eb20:	f043 0306 	orr.w	r3, r3, #6
 800eb24:	6113      	str	r3, [r2, #16]
    break;
 800eb26:	bf00      	nop
}
 800eb28:	bf00      	nop
 800eb2a:	3708      	adds	r7, #8
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	e000ed00 	.word	0xe000ed00

0800eb34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800eb3c:	4b03      	ldr	r3, [pc, #12]	@ (800eb4c <USBD_static_malloc+0x18>)
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	370c      	adds	r7, #12
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr
 800eb4a:	bf00      	nop
 800eb4c:	2000a898 	.word	0x2000a898

0800eb50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b083      	sub	sp, #12
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800eb58:	bf00      	nop
 800eb5a:	370c      	adds	r7, #12
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr

0800eb64 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800eb68:	f7f1 fbf6 	bl	8000358 <SystemClock_Config>
}
 800eb6c:	bf00      	nop
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b085      	sub	sp, #20
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	4603      	mov	r3, r0
 800eb78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eb7e:	79fb      	ldrb	r3, [r7, #7]
 800eb80:	2b03      	cmp	r3, #3
 800eb82:	d817      	bhi.n	800ebb4 <USBD_Get_USB_Status+0x44>
 800eb84:	a201      	add	r2, pc, #4	@ (adr r2, 800eb8c <USBD_Get_USB_Status+0x1c>)
 800eb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb8a:	bf00      	nop
 800eb8c:	0800eb9d 	.word	0x0800eb9d
 800eb90:	0800eba3 	.word	0x0800eba3
 800eb94:	0800eba9 	.word	0x0800eba9
 800eb98:	0800ebaf 	.word	0x0800ebaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	73fb      	strb	r3, [r7, #15]
    break;
 800eba0:	e00b      	b.n	800ebba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eba2:	2303      	movs	r3, #3
 800eba4:	73fb      	strb	r3, [r7, #15]
    break;
 800eba6:	e008      	b.n	800ebba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	73fb      	strb	r3, [r7, #15]
    break;
 800ebac:	e005      	b.n	800ebba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ebae:	2303      	movs	r3, #3
 800ebb0:	73fb      	strb	r3, [r7, #15]
    break;
 800ebb2:	e002      	b.n	800ebba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ebb4:	2303      	movs	r3, #3
 800ebb6:	73fb      	strb	r3, [r7, #15]
    break;
 800ebb8:	bf00      	nop
  }
  return usb_status;
 800ebba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3714      	adds	r7, #20
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr

0800ebc8 <siprintf>:
 800ebc8:	b40e      	push	{r1, r2, r3}
 800ebca:	b510      	push	{r4, lr}
 800ebcc:	b09d      	sub	sp, #116	@ 0x74
 800ebce:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ebd0:	9002      	str	r0, [sp, #8]
 800ebd2:	9006      	str	r0, [sp, #24]
 800ebd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ebd8:	480a      	ldr	r0, [pc, #40]	@ (800ec04 <siprintf+0x3c>)
 800ebda:	9107      	str	r1, [sp, #28]
 800ebdc:	9104      	str	r1, [sp, #16]
 800ebde:	490a      	ldr	r1, [pc, #40]	@ (800ec08 <siprintf+0x40>)
 800ebe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebe4:	9105      	str	r1, [sp, #20]
 800ebe6:	2400      	movs	r4, #0
 800ebe8:	a902      	add	r1, sp, #8
 800ebea:	6800      	ldr	r0, [r0, #0]
 800ebec:	9301      	str	r3, [sp, #4]
 800ebee:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ebf0:	f000 fa00 	bl	800eff4 <_svfiprintf_r>
 800ebf4:	9b02      	ldr	r3, [sp, #8]
 800ebf6:	701c      	strb	r4, [r3, #0]
 800ebf8:	b01d      	add	sp, #116	@ 0x74
 800ebfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebfe:	b003      	add	sp, #12
 800ec00:	4770      	bx	lr
 800ec02:	bf00      	nop
 800ec04:	20000110 	.word	0x20000110
 800ec08:	ffff0208 	.word	0xffff0208

0800ec0c <memset>:
 800ec0c:	4402      	add	r2, r0
 800ec0e:	4603      	mov	r3, r0
 800ec10:	4293      	cmp	r3, r2
 800ec12:	d100      	bne.n	800ec16 <memset+0xa>
 800ec14:	4770      	bx	lr
 800ec16:	f803 1b01 	strb.w	r1, [r3], #1
 800ec1a:	e7f9      	b.n	800ec10 <memset+0x4>

0800ec1c <_reclaim_reent>:
 800ec1c:	4b2d      	ldr	r3, [pc, #180]	@ (800ecd4 <_reclaim_reent+0xb8>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4283      	cmp	r3, r0
 800ec22:	b570      	push	{r4, r5, r6, lr}
 800ec24:	4604      	mov	r4, r0
 800ec26:	d053      	beq.n	800ecd0 <_reclaim_reent+0xb4>
 800ec28:	69c3      	ldr	r3, [r0, #28]
 800ec2a:	b31b      	cbz	r3, 800ec74 <_reclaim_reent+0x58>
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	b163      	cbz	r3, 800ec4a <_reclaim_reent+0x2e>
 800ec30:	2500      	movs	r5, #0
 800ec32:	69e3      	ldr	r3, [r4, #28]
 800ec34:	68db      	ldr	r3, [r3, #12]
 800ec36:	5959      	ldr	r1, [r3, r5]
 800ec38:	b9b1      	cbnz	r1, 800ec68 <_reclaim_reent+0x4c>
 800ec3a:	3504      	adds	r5, #4
 800ec3c:	2d80      	cmp	r5, #128	@ 0x80
 800ec3e:	d1f8      	bne.n	800ec32 <_reclaim_reent+0x16>
 800ec40:	69e3      	ldr	r3, [r4, #28]
 800ec42:	4620      	mov	r0, r4
 800ec44:	68d9      	ldr	r1, [r3, #12]
 800ec46:	f000 f881 	bl	800ed4c <_free_r>
 800ec4a:	69e3      	ldr	r3, [r4, #28]
 800ec4c:	6819      	ldr	r1, [r3, #0]
 800ec4e:	b111      	cbz	r1, 800ec56 <_reclaim_reent+0x3a>
 800ec50:	4620      	mov	r0, r4
 800ec52:	f000 f87b 	bl	800ed4c <_free_r>
 800ec56:	69e3      	ldr	r3, [r4, #28]
 800ec58:	689d      	ldr	r5, [r3, #8]
 800ec5a:	b15d      	cbz	r5, 800ec74 <_reclaim_reent+0x58>
 800ec5c:	4629      	mov	r1, r5
 800ec5e:	4620      	mov	r0, r4
 800ec60:	682d      	ldr	r5, [r5, #0]
 800ec62:	f000 f873 	bl	800ed4c <_free_r>
 800ec66:	e7f8      	b.n	800ec5a <_reclaim_reent+0x3e>
 800ec68:	680e      	ldr	r6, [r1, #0]
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f000 f86e 	bl	800ed4c <_free_r>
 800ec70:	4631      	mov	r1, r6
 800ec72:	e7e1      	b.n	800ec38 <_reclaim_reent+0x1c>
 800ec74:	6961      	ldr	r1, [r4, #20]
 800ec76:	b111      	cbz	r1, 800ec7e <_reclaim_reent+0x62>
 800ec78:	4620      	mov	r0, r4
 800ec7a:	f000 f867 	bl	800ed4c <_free_r>
 800ec7e:	69e1      	ldr	r1, [r4, #28]
 800ec80:	b111      	cbz	r1, 800ec88 <_reclaim_reent+0x6c>
 800ec82:	4620      	mov	r0, r4
 800ec84:	f000 f862 	bl	800ed4c <_free_r>
 800ec88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ec8a:	b111      	cbz	r1, 800ec92 <_reclaim_reent+0x76>
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f000 f85d 	bl	800ed4c <_free_r>
 800ec92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec94:	b111      	cbz	r1, 800ec9c <_reclaim_reent+0x80>
 800ec96:	4620      	mov	r0, r4
 800ec98:	f000 f858 	bl	800ed4c <_free_r>
 800ec9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ec9e:	b111      	cbz	r1, 800eca6 <_reclaim_reent+0x8a>
 800eca0:	4620      	mov	r0, r4
 800eca2:	f000 f853 	bl	800ed4c <_free_r>
 800eca6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800eca8:	b111      	cbz	r1, 800ecb0 <_reclaim_reent+0x94>
 800ecaa:	4620      	mov	r0, r4
 800ecac:	f000 f84e 	bl	800ed4c <_free_r>
 800ecb0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ecb2:	b111      	cbz	r1, 800ecba <_reclaim_reent+0x9e>
 800ecb4:	4620      	mov	r0, r4
 800ecb6:	f000 f849 	bl	800ed4c <_free_r>
 800ecba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ecbc:	b111      	cbz	r1, 800ecc4 <_reclaim_reent+0xa8>
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f000 f844 	bl	800ed4c <_free_r>
 800ecc4:	6a23      	ldr	r3, [r4, #32]
 800ecc6:	b11b      	cbz	r3, 800ecd0 <_reclaim_reent+0xb4>
 800ecc8:	4620      	mov	r0, r4
 800ecca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecce:	4718      	bx	r3
 800ecd0:	bd70      	pop	{r4, r5, r6, pc}
 800ecd2:	bf00      	nop
 800ecd4:	20000110 	.word	0x20000110

0800ecd8 <__errno>:
 800ecd8:	4b01      	ldr	r3, [pc, #4]	@ (800ece0 <__errno+0x8>)
 800ecda:	6818      	ldr	r0, [r3, #0]
 800ecdc:	4770      	bx	lr
 800ecde:	bf00      	nop
 800ece0:	20000110 	.word	0x20000110

0800ece4 <__libc_init_array>:
 800ece4:	b570      	push	{r4, r5, r6, lr}
 800ece6:	4d0d      	ldr	r5, [pc, #52]	@ (800ed1c <__libc_init_array+0x38>)
 800ece8:	4c0d      	ldr	r4, [pc, #52]	@ (800ed20 <__libc_init_array+0x3c>)
 800ecea:	1b64      	subs	r4, r4, r5
 800ecec:	10a4      	asrs	r4, r4, #2
 800ecee:	2600      	movs	r6, #0
 800ecf0:	42a6      	cmp	r6, r4
 800ecf2:	d109      	bne.n	800ed08 <__libc_init_array+0x24>
 800ecf4:	4d0b      	ldr	r5, [pc, #44]	@ (800ed24 <__libc_init_array+0x40>)
 800ecf6:	4c0c      	ldr	r4, [pc, #48]	@ (800ed28 <__libc_init_array+0x44>)
 800ecf8:	f000 fc64 	bl	800f5c4 <_init>
 800ecfc:	1b64      	subs	r4, r4, r5
 800ecfe:	10a4      	asrs	r4, r4, #2
 800ed00:	2600      	movs	r6, #0
 800ed02:	42a6      	cmp	r6, r4
 800ed04:	d105      	bne.n	800ed12 <__libc_init_array+0x2e>
 800ed06:	bd70      	pop	{r4, r5, r6, pc}
 800ed08:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed0c:	4798      	blx	r3
 800ed0e:	3601      	adds	r6, #1
 800ed10:	e7ee      	b.n	800ecf0 <__libc_init_array+0xc>
 800ed12:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed16:	4798      	blx	r3
 800ed18:	3601      	adds	r6, #1
 800ed1a:	e7f2      	b.n	800ed02 <__libc_init_array+0x1e>
 800ed1c:	0800f7ec 	.word	0x0800f7ec
 800ed20:	0800f7ec 	.word	0x0800f7ec
 800ed24:	0800f7ec 	.word	0x0800f7ec
 800ed28:	0800f7f0 	.word	0x0800f7f0

0800ed2c <__retarget_lock_acquire_recursive>:
 800ed2c:	4770      	bx	lr

0800ed2e <__retarget_lock_release_recursive>:
 800ed2e:	4770      	bx	lr

0800ed30 <memcpy>:
 800ed30:	440a      	add	r2, r1
 800ed32:	4291      	cmp	r1, r2
 800ed34:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed38:	d100      	bne.n	800ed3c <memcpy+0xc>
 800ed3a:	4770      	bx	lr
 800ed3c:	b510      	push	{r4, lr}
 800ed3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed46:	4291      	cmp	r1, r2
 800ed48:	d1f9      	bne.n	800ed3e <memcpy+0xe>
 800ed4a:	bd10      	pop	{r4, pc}

0800ed4c <_free_r>:
 800ed4c:	b538      	push	{r3, r4, r5, lr}
 800ed4e:	4605      	mov	r5, r0
 800ed50:	2900      	cmp	r1, #0
 800ed52:	d041      	beq.n	800edd8 <_free_r+0x8c>
 800ed54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed58:	1f0c      	subs	r4, r1, #4
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	bfb8      	it	lt
 800ed5e:	18e4      	addlt	r4, r4, r3
 800ed60:	f000 f8e0 	bl	800ef24 <__malloc_lock>
 800ed64:	4a1d      	ldr	r2, [pc, #116]	@ (800eddc <_free_r+0x90>)
 800ed66:	6813      	ldr	r3, [r2, #0]
 800ed68:	b933      	cbnz	r3, 800ed78 <_free_r+0x2c>
 800ed6a:	6063      	str	r3, [r4, #4]
 800ed6c:	6014      	str	r4, [r2, #0]
 800ed6e:	4628      	mov	r0, r5
 800ed70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed74:	f000 b8dc 	b.w	800ef30 <__malloc_unlock>
 800ed78:	42a3      	cmp	r3, r4
 800ed7a:	d908      	bls.n	800ed8e <_free_r+0x42>
 800ed7c:	6820      	ldr	r0, [r4, #0]
 800ed7e:	1821      	adds	r1, r4, r0
 800ed80:	428b      	cmp	r3, r1
 800ed82:	bf01      	itttt	eq
 800ed84:	6819      	ldreq	r1, [r3, #0]
 800ed86:	685b      	ldreq	r3, [r3, #4]
 800ed88:	1809      	addeq	r1, r1, r0
 800ed8a:	6021      	streq	r1, [r4, #0]
 800ed8c:	e7ed      	b.n	800ed6a <_free_r+0x1e>
 800ed8e:	461a      	mov	r2, r3
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	b10b      	cbz	r3, 800ed98 <_free_r+0x4c>
 800ed94:	42a3      	cmp	r3, r4
 800ed96:	d9fa      	bls.n	800ed8e <_free_r+0x42>
 800ed98:	6811      	ldr	r1, [r2, #0]
 800ed9a:	1850      	adds	r0, r2, r1
 800ed9c:	42a0      	cmp	r0, r4
 800ed9e:	d10b      	bne.n	800edb8 <_free_r+0x6c>
 800eda0:	6820      	ldr	r0, [r4, #0]
 800eda2:	4401      	add	r1, r0
 800eda4:	1850      	adds	r0, r2, r1
 800eda6:	4283      	cmp	r3, r0
 800eda8:	6011      	str	r1, [r2, #0]
 800edaa:	d1e0      	bne.n	800ed6e <_free_r+0x22>
 800edac:	6818      	ldr	r0, [r3, #0]
 800edae:	685b      	ldr	r3, [r3, #4]
 800edb0:	6053      	str	r3, [r2, #4]
 800edb2:	4408      	add	r0, r1
 800edb4:	6010      	str	r0, [r2, #0]
 800edb6:	e7da      	b.n	800ed6e <_free_r+0x22>
 800edb8:	d902      	bls.n	800edc0 <_free_r+0x74>
 800edba:	230c      	movs	r3, #12
 800edbc:	602b      	str	r3, [r5, #0]
 800edbe:	e7d6      	b.n	800ed6e <_free_r+0x22>
 800edc0:	6820      	ldr	r0, [r4, #0]
 800edc2:	1821      	adds	r1, r4, r0
 800edc4:	428b      	cmp	r3, r1
 800edc6:	bf04      	itt	eq
 800edc8:	6819      	ldreq	r1, [r3, #0]
 800edca:	685b      	ldreq	r3, [r3, #4]
 800edcc:	6063      	str	r3, [r4, #4]
 800edce:	bf04      	itt	eq
 800edd0:	1809      	addeq	r1, r1, r0
 800edd2:	6021      	streq	r1, [r4, #0]
 800edd4:	6054      	str	r4, [r2, #4]
 800edd6:	e7ca      	b.n	800ed6e <_free_r+0x22>
 800edd8:	bd38      	pop	{r3, r4, r5, pc}
 800edda:	bf00      	nop
 800eddc:	2000abfc 	.word	0x2000abfc

0800ede0 <sbrk_aligned>:
 800ede0:	b570      	push	{r4, r5, r6, lr}
 800ede2:	4e0f      	ldr	r6, [pc, #60]	@ (800ee20 <sbrk_aligned+0x40>)
 800ede4:	460c      	mov	r4, r1
 800ede6:	6831      	ldr	r1, [r6, #0]
 800ede8:	4605      	mov	r5, r0
 800edea:	b911      	cbnz	r1, 800edf2 <sbrk_aligned+0x12>
 800edec:	f000 fba4 	bl	800f538 <_sbrk_r>
 800edf0:	6030      	str	r0, [r6, #0]
 800edf2:	4621      	mov	r1, r4
 800edf4:	4628      	mov	r0, r5
 800edf6:	f000 fb9f 	bl	800f538 <_sbrk_r>
 800edfa:	1c43      	adds	r3, r0, #1
 800edfc:	d103      	bne.n	800ee06 <sbrk_aligned+0x26>
 800edfe:	f04f 34ff 	mov.w	r4, #4294967295
 800ee02:	4620      	mov	r0, r4
 800ee04:	bd70      	pop	{r4, r5, r6, pc}
 800ee06:	1cc4      	adds	r4, r0, #3
 800ee08:	f024 0403 	bic.w	r4, r4, #3
 800ee0c:	42a0      	cmp	r0, r4
 800ee0e:	d0f8      	beq.n	800ee02 <sbrk_aligned+0x22>
 800ee10:	1a21      	subs	r1, r4, r0
 800ee12:	4628      	mov	r0, r5
 800ee14:	f000 fb90 	bl	800f538 <_sbrk_r>
 800ee18:	3001      	adds	r0, #1
 800ee1a:	d1f2      	bne.n	800ee02 <sbrk_aligned+0x22>
 800ee1c:	e7ef      	b.n	800edfe <sbrk_aligned+0x1e>
 800ee1e:	bf00      	nop
 800ee20:	2000abf8 	.word	0x2000abf8

0800ee24 <_malloc_r>:
 800ee24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee28:	1ccd      	adds	r5, r1, #3
 800ee2a:	f025 0503 	bic.w	r5, r5, #3
 800ee2e:	3508      	adds	r5, #8
 800ee30:	2d0c      	cmp	r5, #12
 800ee32:	bf38      	it	cc
 800ee34:	250c      	movcc	r5, #12
 800ee36:	2d00      	cmp	r5, #0
 800ee38:	4606      	mov	r6, r0
 800ee3a:	db01      	blt.n	800ee40 <_malloc_r+0x1c>
 800ee3c:	42a9      	cmp	r1, r5
 800ee3e:	d904      	bls.n	800ee4a <_malloc_r+0x26>
 800ee40:	230c      	movs	r3, #12
 800ee42:	6033      	str	r3, [r6, #0]
 800ee44:	2000      	movs	r0, #0
 800ee46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ef20 <_malloc_r+0xfc>
 800ee4e:	f000 f869 	bl	800ef24 <__malloc_lock>
 800ee52:	f8d8 3000 	ldr.w	r3, [r8]
 800ee56:	461c      	mov	r4, r3
 800ee58:	bb44      	cbnz	r4, 800eeac <_malloc_r+0x88>
 800ee5a:	4629      	mov	r1, r5
 800ee5c:	4630      	mov	r0, r6
 800ee5e:	f7ff ffbf 	bl	800ede0 <sbrk_aligned>
 800ee62:	1c43      	adds	r3, r0, #1
 800ee64:	4604      	mov	r4, r0
 800ee66:	d158      	bne.n	800ef1a <_malloc_r+0xf6>
 800ee68:	f8d8 4000 	ldr.w	r4, [r8]
 800ee6c:	4627      	mov	r7, r4
 800ee6e:	2f00      	cmp	r7, #0
 800ee70:	d143      	bne.n	800eefa <_malloc_r+0xd6>
 800ee72:	2c00      	cmp	r4, #0
 800ee74:	d04b      	beq.n	800ef0e <_malloc_r+0xea>
 800ee76:	6823      	ldr	r3, [r4, #0]
 800ee78:	4639      	mov	r1, r7
 800ee7a:	4630      	mov	r0, r6
 800ee7c:	eb04 0903 	add.w	r9, r4, r3
 800ee80:	f000 fb5a 	bl	800f538 <_sbrk_r>
 800ee84:	4581      	cmp	r9, r0
 800ee86:	d142      	bne.n	800ef0e <_malloc_r+0xea>
 800ee88:	6821      	ldr	r1, [r4, #0]
 800ee8a:	1a6d      	subs	r5, r5, r1
 800ee8c:	4629      	mov	r1, r5
 800ee8e:	4630      	mov	r0, r6
 800ee90:	f7ff ffa6 	bl	800ede0 <sbrk_aligned>
 800ee94:	3001      	adds	r0, #1
 800ee96:	d03a      	beq.n	800ef0e <_malloc_r+0xea>
 800ee98:	6823      	ldr	r3, [r4, #0]
 800ee9a:	442b      	add	r3, r5
 800ee9c:	6023      	str	r3, [r4, #0]
 800ee9e:	f8d8 3000 	ldr.w	r3, [r8]
 800eea2:	685a      	ldr	r2, [r3, #4]
 800eea4:	bb62      	cbnz	r2, 800ef00 <_malloc_r+0xdc>
 800eea6:	f8c8 7000 	str.w	r7, [r8]
 800eeaa:	e00f      	b.n	800eecc <_malloc_r+0xa8>
 800eeac:	6822      	ldr	r2, [r4, #0]
 800eeae:	1b52      	subs	r2, r2, r5
 800eeb0:	d420      	bmi.n	800eef4 <_malloc_r+0xd0>
 800eeb2:	2a0b      	cmp	r2, #11
 800eeb4:	d917      	bls.n	800eee6 <_malloc_r+0xc2>
 800eeb6:	1961      	adds	r1, r4, r5
 800eeb8:	42a3      	cmp	r3, r4
 800eeba:	6025      	str	r5, [r4, #0]
 800eebc:	bf18      	it	ne
 800eebe:	6059      	strne	r1, [r3, #4]
 800eec0:	6863      	ldr	r3, [r4, #4]
 800eec2:	bf08      	it	eq
 800eec4:	f8c8 1000 	streq.w	r1, [r8]
 800eec8:	5162      	str	r2, [r4, r5]
 800eeca:	604b      	str	r3, [r1, #4]
 800eecc:	4630      	mov	r0, r6
 800eece:	f000 f82f 	bl	800ef30 <__malloc_unlock>
 800eed2:	f104 000b 	add.w	r0, r4, #11
 800eed6:	1d23      	adds	r3, r4, #4
 800eed8:	f020 0007 	bic.w	r0, r0, #7
 800eedc:	1ac2      	subs	r2, r0, r3
 800eede:	bf1c      	itt	ne
 800eee0:	1a1b      	subne	r3, r3, r0
 800eee2:	50a3      	strne	r3, [r4, r2]
 800eee4:	e7af      	b.n	800ee46 <_malloc_r+0x22>
 800eee6:	6862      	ldr	r2, [r4, #4]
 800eee8:	42a3      	cmp	r3, r4
 800eeea:	bf0c      	ite	eq
 800eeec:	f8c8 2000 	streq.w	r2, [r8]
 800eef0:	605a      	strne	r2, [r3, #4]
 800eef2:	e7eb      	b.n	800eecc <_malloc_r+0xa8>
 800eef4:	4623      	mov	r3, r4
 800eef6:	6864      	ldr	r4, [r4, #4]
 800eef8:	e7ae      	b.n	800ee58 <_malloc_r+0x34>
 800eefa:	463c      	mov	r4, r7
 800eefc:	687f      	ldr	r7, [r7, #4]
 800eefe:	e7b6      	b.n	800ee6e <_malloc_r+0x4a>
 800ef00:	461a      	mov	r2, r3
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	42a3      	cmp	r3, r4
 800ef06:	d1fb      	bne.n	800ef00 <_malloc_r+0xdc>
 800ef08:	2300      	movs	r3, #0
 800ef0a:	6053      	str	r3, [r2, #4]
 800ef0c:	e7de      	b.n	800eecc <_malloc_r+0xa8>
 800ef0e:	230c      	movs	r3, #12
 800ef10:	6033      	str	r3, [r6, #0]
 800ef12:	4630      	mov	r0, r6
 800ef14:	f000 f80c 	bl	800ef30 <__malloc_unlock>
 800ef18:	e794      	b.n	800ee44 <_malloc_r+0x20>
 800ef1a:	6005      	str	r5, [r0, #0]
 800ef1c:	e7d6      	b.n	800eecc <_malloc_r+0xa8>
 800ef1e:	bf00      	nop
 800ef20:	2000abfc 	.word	0x2000abfc

0800ef24 <__malloc_lock>:
 800ef24:	4801      	ldr	r0, [pc, #4]	@ (800ef2c <__malloc_lock+0x8>)
 800ef26:	f7ff bf01 	b.w	800ed2c <__retarget_lock_acquire_recursive>
 800ef2a:	bf00      	nop
 800ef2c:	2000abf4 	.word	0x2000abf4

0800ef30 <__malloc_unlock>:
 800ef30:	4801      	ldr	r0, [pc, #4]	@ (800ef38 <__malloc_unlock+0x8>)
 800ef32:	f7ff befc 	b.w	800ed2e <__retarget_lock_release_recursive>
 800ef36:	bf00      	nop
 800ef38:	2000abf4 	.word	0x2000abf4

0800ef3c <__ssputs_r>:
 800ef3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef40:	688e      	ldr	r6, [r1, #8]
 800ef42:	461f      	mov	r7, r3
 800ef44:	42be      	cmp	r6, r7
 800ef46:	680b      	ldr	r3, [r1, #0]
 800ef48:	4682      	mov	sl, r0
 800ef4a:	460c      	mov	r4, r1
 800ef4c:	4690      	mov	r8, r2
 800ef4e:	d82d      	bhi.n	800efac <__ssputs_r+0x70>
 800ef50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ef58:	d026      	beq.n	800efa8 <__ssputs_r+0x6c>
 800ef5a:	6965      	ldr	r5, [r4, #20]
 800ef5c:	6909      	ldr	r1, [r1, #16]
 800ef5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef62:	eba3 0901 	sub.w	r9, r3, r1
 800ef66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef6a:	1c7b      	adds	r3, r7, #1
 800ef6c:	444b      	add	r3, r9
 800ef6e:	106d      	asrs	r5, r5, #1
 800ef70:	429d      	cmp	r5, r3
 800ef72:	bf38      	it	cc
 800ef74:	461d      	movcc	r5, r3
 800ef76:	0553      	lsls	r3, r2, #21
 800ef78:	d527      	bpl.n	800efca <__ssputs_r+0x8e>
 800ef7a:	4629      	mov	r1, r5
 800ef7c:	f7ff ff52 	bl	800ee24 <_malloc_r>
 800ef80:	4606      	mov	r6, r0
 800ef82:	b360      	cbz	r0, 800efde <__ssputs_r+0xa2>
 800ef84:	6921      	ldr	r1, [r4, #16]
 800ef86:	464a      	mov	r2, r9
 800ef88:	f7ff fed2 	bl	800ed30 <memcpy>
 800ef8c:	89a3      	ldrh	r3, [r4, #12]
 800ef8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ef92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef96:	81a3      	strh	r3, [r4, #12]
 800ef98:	6126      	str	r6, [r4, #16]
 800ef9a:	6165      	str	r5, [r4, #20]
 800ef9c:	444e      	add	r6, r9
 800ef9e:	eba5 0509 	sub.w	r5, r5, r9
 800efa2:	6026      	str	r6, [r4, #0]
 800efa4:	60a5      	str	r5, [r4, #8]
 800efa6:	463e      	mov	r6, r7
 800efa8:	42be      	cmp	r6, r7
 800efaa:	d900      	bls.n	800efae <__ssputs_r+0x72>
 800efac:	463e      	mov	r6, r7
 800efae:	6820      	ldr	r0, [r4, #0]
 800efb0:	4632      	mov	r2, r6
 800efb2:	4641      	mov	r1, r8
 800efb4:	f000 faa6 	bl	800f504 <memmove>
 800efb8:	68a3      	ldr	r3, [r4, #8]
 800efba:	1b9b      	subs	r3, r3, r6
 800efbc:	60a3      	str	r3, [r4, #8]
 800efbe:	6823      	ldr	r3, [r4, #0]
 800efc0:	4433      	add	r3, r6
 800efc2:	6023      	str	r3, [r4, #0]
 800efc4:	2000      	movs	r0, #0
 800efc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efca:	462a      	mov	r2, r5
 800efcc:	f000 fac4 	bl	800f558 <_realloc_r>
 800efd0:	4606      	mov	r6, r0
 800efd2:	2800      	cmp	r0, #0
 800efd4:	d1e0      	bne.n	800ef98 <__ssputs_r+0x5c>
 800efd6:	6921      	ldr	r1, [r4, #16]
 800efd8:	4650      	mov	r0, sl
 800efda:	f7ff feb7 	bl	800ed4c <_free_r>
 800efde:	230c      	movs	r3, #12
 800efe0:	f8ca 3000 	str.w	r3, [sl]
 800efe4:	89a3      	ldrh	r3, [r4, #12]
 800efe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efea:	81a3      	strh	r3, [r4, #12]
 800efec:	f04f 30ff 	mov.w	r0, #4294967295
 800eff0:	e7e9      	b.n	800efc6 <__ssputs_r+0x8a>
	...

0800eff4 <_svfiprintf_r>:
 800eff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff8:	4698      	mov	r8, r3
 800effa:	898b      	ldrh	r3, [r1, #12]
 800effc:	061b      	lsls	r3, r3, #24
 800effe:	b09d      	sub	sp, #116	@ 0x74
 800f000:	4607      	mov	r7, r0
 800f002:	460d      	mov	r5, r1
 800f004:	4614      	mov	r4, r2
 800f006:	d510      	bpl.n	800f02a <_svfiprintf_r+0x36>
 800f008:	690b      	ldr	r3, [r1, #16]
 800f00a:	b973      	cbnz	r3, 800f02a <_svfiprintf_r+0x36>
 800f00c:	2140      	movs	r1, #64	@ 0x40
 800f00e:	f7ff ff09 	bl	800ee24 <_malloc_r>
 800f012:	6028      	str	r0, [r5, #0]
 800f014:	6128      	str	r0, [r5, #16]
 800f016:	b930      	cbnz	r0, 800f026 <_svfiprintf_r+0x32>
 800f018:	230c      	movs	r3, #12
 800f01a:	603b      	str	r3, [r7, #0]
 800f01c:	f04f 30ff 	mov.w	r0, #4294967295
 800f020:	b01d      	add	sp, #116	@ 0x74
 800f022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f026:	2340      	movs	r3, #64	@ 0x40
 800f028:	616b      	str	r3, [r5, #20]
 800f02a:	2300      	movs	r3, #0
 800f02c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f02e:	2320      	movs	r3, #32
 800f030:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f034:	f8cd 800c 	str.w	r8, [sp, #12]
 800f038:	2330      	movs	r3, #48	@ 0x30
 800f03a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f1d8 <_svfiprintf_r+0x1e4>
 800f03e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f042:	f04f 0901 	mov.w	r9, #1
 800f046:	4623      	mov	r3, r4
 800f048:	469a      	mov	sl, r3
 800f04a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f04e:	b10a      	cbz	r2, 800f054 <_svfiprintf_r+0x60>
 800f050:	2a25      	cmp	r2, #37	@ 0x25
 800f052:	d1f9      	bne.n	800f048 <_svfiprintf_r+0x54>
 800f054:	ebba 0b04 	subs.w	fp, sl, r4
 800f058:	d00b      	beq.n	800f072 <_svfiprintf_r+0x7e>
 800f05a:	465b      	mov	r3, fp
 800f05c:	4622      	mov	r2, r4
 800f05e:	4629      	mov	r1, r5
 800f060:	4638      	mov	r0, r7
 800f062:	f7ff ff6b 	bl	800ef3c <__ssputs_r>
 800f066:	3001      	adds	r0, #1
 800f068:	f000 80a7 	beq.w	800f1ba <_svfiprintf_r+0x1c6>
 800f06c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f06e:	445a      	add	r2, fp
 800f070:	9209      	str	r2, [sp, #36]	@ 0x24
 800f072:	f89a 3000 	ldrb.w	r3, [sl]
 800f076:	2b00      	cmp	r3, #0
 800f078:	f000 809f 	beq.w	800f1ba <_svfiprintf_r+0x1c6>
 800f07c:	2300      	movs	r3, #0
 800f07e:	f04f 32ff 	mov.w	r2, #4294967295
 800f082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f086:	f10a 0a01 	add.w	sl, sl, #1
 800f08a:	9304      	str	r3, [sp, #16]
 800f08c:	9307      	str	r3, [sp, #28]
 800f08e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f092:	931a      	str	r3, [sp, #104]	@ 0x68
 800f094:	4654      	mov	r4, sl
 800f096:	2205      	movs	r2, #5
 800f098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f09c:	484e      	ldr	r0, [pc, #312]	@ (800f1d8 <_svfiprintf_r+0x1e4>)
 800f09e:	f7f1 f86f 	bl	8000180 <memchr>
 800f0a2:	9a04      	ldr	r2, [sp, #16]
 800f0a4:	b9d8      	cbnz	r0, 800f0de <_svfiprintf_r+0xea>
 800f0a6:	06d0      	lsls	r0, r2, #27
 800f0a8:	bf44      	itt	mi
 800f0aa:	2320      	movmi	r3, #32
 800f0ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0b0:	0711      	lsls	r1, r2, #28
 800f0b2:	bf44      	itt	mi
 800f0b4:	232b      	movmi	r3, #43	@ 0x2b
 800f0b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0ba:	f89a 3000 	ldrb.w	r3, [sl]
 800f0be:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0c0:	d015      	beq.n	800f0ee <_svfiprintf_r+0xfa>
 800f0c2:	9a07      	ldr	r2, [sp, #28]
 800f0c4:	4654      	mov	r4, sl
 800f0c6:	2000      	movs	r0, #0
 800f0c8:	f04f 0c0a 	mov.w	ip, #10
 800f0cc:	4621      	mov	r1, r4
 800f0ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0d2:	3b30      	subs	r3, #48	@ 0x30
 800f0d4:	2b09      	cmp	r3, #9
 800f0d6:	d94b      	bls.n	800f170 <_svfiprintf_r+0x17c>
 800f0d8:	b1b0      	cbz	r0, 800f108 <_svfiprintf_r+0x114>
 800f0da:	9207      	str	r2, [sp, #28]
 800f0dc:	e014      	b.n	800f108 <_svfiprintf_r+0x114>
 800f0de:	eba0 0308 	sub.w	r3, r0, r8
 800f0e2:	fa09 f303 	lsl.w	r3, r9, r3
 800f0e6:	4313      	orrs	r3, r2
 800f0e8:	9304      	str	r3, [sp, #16]
 800f0ea:	46a2      	mov	sl, r4
 800f0ec:	e7d2      	b.n	800f094 <_svfiprintf_r+0xa0>
 800f0ee:	9b03      	ldr	r3, [sp, #12]
 800f0f0:	1d19      	adds	r1, r3, #4
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	9103      	str	r1, [sp, #12]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	bfbb      	ittet	lt
 800f0fa:	425b      	neglt	r3, r3
 800f0fc:	f042 0202 	orrlt.w	r2, r2, #2
 800f100:	9307      	strge	r3, [sp, #28]
 800f102:	9307      	strlt	r3, [sp, #28]
 800f104:	bfb8      	it	lt
 800f106:	9204      	strlt	r2, [sp, #16]
 800f108:	7823      	ldrb	r3, [r4, #0]
 800f10a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f10c:	d10a      	bne.n	800f124 <_svfiprintf_r+0x130>
 800f10e:	7863      	ldrb	r3, [r4, #1]
 800f110:	2b2a      	cmp	r3, #42	@ 0x2a
 800f112:	d132      	bne.n	800f17a <_svfiprintf_r+0x186>
 800f114:	9b03      	ldr	r3, [sp, #12]
 800f116:	1d1a      	adds	r2, r3, #4
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	9203      	str	r2, [sp, #12]
 800f11c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f120:	3402      	adds	r4, #2
 800f122:	9305      	str	r3, [sp, #20]
 800f124:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f1e8 <_svfiprintf_r+0x1f4>
 800f128:	7821      	ldrb	r1, [r4, #0]
 800f12a:	2203      	movs	r2, #3
 800f12c:	4650      	mov	r0, sl
 800f12e:	f7f1 f827 	bl	8000180 <memchr>
 800f132:	b138      	cbz	r0, 800f144 <_svfiprintf_r+0x150>
 800f134:	9b04      	ldr	r3, [sp, #16]
 800f136:	eba0 000a 	sub.w	r0, r0, sl
 800f13a:	2240      	movs	r2, #64	@ 0x40
 800f13c:	4082      	lsls	r2, r0
 800f13e:	4313      	orrs	r3, r2
 800f140:	3401      	adds	r4, #1
 800f142:	9304      	str	r3, [sp, #16]
 800f144:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f148:	4824      	ldr	r0, [pc, #144]	@ (800f1dc <_svfiprintf_r+0x1e8>)
 800f14a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f14e:	2206      	movs	r2, #6
 800f150:	f7f1 f816 	bl	8000180 <memchr>
 800f154:	2800      	cmp	r0, #0
 800f156:	d036      	beq.n	800f1c6 <_svfiprintf_r+0x1d2>
 800f158:	4b21      	ldr	r3, [pc, #132]	@ (800f1e0 <_svfiprintf_r+0x1ec>)
 800f15a:	bb1b      	cbnz	r3, 800f1a4 <_svfiprintf_r+0x1b0>
 800f15c:	9b03      	ldr	r3, [sp, #12]
 800f15e:	3307      	adds	r3, #7
 800f160:	f023 0307 	bic.w	r3, r3, #7
 800f164:	3308      	adds	r3, #8
 800f166:	9303      	str	r3, [sp, #12]
 800f168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f16a:	4433      	add	r3, r6
 800f16c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f16e:	e76a      	b.n	800f046 <_svfiprintf_r+0x52>
 800f170:	fb0c 3202 	mla	r2, ip, r2, r3
 800f174:	460c      	mov	r4, r1
 800f176:	2001      	movs	r0, #1
 800f178:	e7a8      	b.n	800f0cc <_svfiprintf_r+0xd8>
 800f17a:	2300      	movs	r3, #0
 800f17c:	3401      	adds	r4, #1
 800f17e:	9305      	str	r3, [sp, #20]
 800f180:	4619      	mov	r1, r3
 800f182:	f04f 0c0a 	mov.w	ip, #10
 800f186:	4620      	mov	r0, r4
 800f188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f18c:	3a30      	subs	r2, #48	@ 0x30
 800f18e:	2a09      	cmp	r2, #9
 800f190:	d903      	bls.n	800f19a <_svfiprintf_r+0x1a6>
 800f192:	2b00      	cmp	r3, #0
 800f194:	d0c6      	beq.n	800f124 <_svfiprintf_r+0x130>
 800f196:	9105      	str	r1, [sp, #20]
 800f198:	e7c4      	b.n	800f124 <_svfiprintf_r+0x130>
 800f19a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f19e:	4604      	mov	r4, r0
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	e7f0      	b.n	800f186 <_svfiprintf_r+0x192>
 800f1a4:	ab03      	add	r3, sp, #12
 800f1a6:	9300      	str	r3, [sp, #0]
 800f1a8:	462a      	mov	r2, r5
 800f1aa:	4b0e      	ldr	r3, [pc, #56]	@ (800f1e4 <_svfiprintf_r+0x1f0>)
 800f1ac:	a904      	add	r1, sp, #16
 800f1ae:	4638      	mov	r0, r7
 800f1b0:	f3af 8000 	nop.w
 800f1b4:	1c42      	adds	r2, r0, #1
 800f1b6:	4606      	mov	r6, r0
 800f1b8:	d1d6      	bne.n	800f168 <_svfiprintf_r+0x174>
 800f1ba:	89ab      	ldrh	r3, [r5, #12]
 800f1bc:	065b      	lsls	r3, r3, #25
 800f1be:	f53f af2d 	bmi.w	800f01c <_svfiprintf_r+0x28>
 800f1c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f1c4:	e72c      	b.n	800f020 <_svfiprintf_r+0x2c>
 800f1c6:	ab03      	add	r3, sp, #12
 800f1c8:	9300      	str	r3, [sp, #0]
 800f1ca:	462a      	mov	r2, r5
 800f1cc:	4b05      	ldr	r3, [pc, #20]	@ (800f1e4 <_svfiprintf_r+0x1f0>)
 800f1ce:	a904      	add	r1, sp, #16
 800f1d0:	4638      	mov	r0, r7
 800f1d2:	f000 f879 	bl	800f2c8 <_printf_i>
 800f1d6:	e7ed      	b.n	800f1b4 <_svfiprintf_r+0x1c0>
 800f1d8:	0800f7b0 	.word	0x0800f7b0
 800f1dc:	0800f7ba 	.word	0x0800f7ba
 800f1e0:	00000000 	.word	0x00000000
 800f1e4:	0800ef3d 	.word	0x0800ef3d
 800f1e8:	0800f7b6 	.word	0x0800f7b6

0800f1ec <_printf_common>:
 800f1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1f0:	4616      	mov	r6, r2
 800f1f2:	4698      	mov	r8, r3
 800f1f4:	688a      	ldr	r2, [r1, #8]
 800f1f6:	690b      	ldr	r3, [r1, #16]
 800f1f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	bfb8      	it	lt
 800f200:	4613      	movlt	r3, r2
 800f202:	6033      	str	r3, [r6, #0]
 800f204:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f208:	4607      	mov	r7, r0
 800f20a:	460c      	mov	r4, r1
 800f20c:	b10a      	cbz	r2, 800f212 <_printf_common+0x26>
 800f20e:	3301      	adds	r3, #1
 800f210:	6033      	str	r3, [r6, #0]
 800f212:	6823      	ldr	r3, [r4, #0]
 800f214:	0699      	lsls	r1, r3, #26
 800f216:	bf42      	ittt	mi
 800f218:	6833      	ldrmi	r3, [r6, #0]
 800f21a:	3302      	addmi	r3, #2
 800f21c:	6033      	strmi	r3, [r6, #0]
 800f21e:	6825      	ldr	r5, [r4, #0]
 800f220:	f015 0506 	ands.w	r5, r5, #6
 800f224:	d106      	bne.n	800f234 <_printf_common+0x48>
 800f226:	f104 0a19 	add.w	sl, r4, #25
 800f22a:	68e3      	ldr	r3, [r4, #12]
 800f22c:	6832      	ldr	r2, [r6, #0]
 800f22e:	1a9b      	subs	r3, r3, r2
 800f230:	42ab      	cmp	r3, r5
 800f232:	dc26      	bgt.n	800f282 <_printf_common+0x96>
 800f234:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f238:	6822      	ldr	r2, [r4, #0]
 800f23a:	3b00      	subs	r3, #0
 800f23c:	bf18      	it	ne
 800f23e:	2301      	movne	r3, #1
 800f240:	0692      	lsls	r2, r2, #26
 800f242:	d42b      	bmi.n	800f29c <_printf_common+0xb0>
 800f244:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f248:	4641      	mov	r1, r8
 800f24a:	4638      	mov	r0, r7
 800f24c:	47c8      	blx	r9
 800f24e:	3001      	adds	r0, #1
 800f250:	d01e      	beq.n	800f290 <_printf_common+0xa4>
 800f252:	6823      	ldr	r3, [r4, #0]
 800f254:	6922      	ldr	r2, [r4, #16]
 800f256:	f003 0306 	and.w	r3, r3, #6
 800f25a:	2b04      	cmp	r3, #4
 800f25c:	bf02      	ittt	eq
 800f25e:	68e5      	ldreq	r5, [r4, #12]
 800f260:	6833      	ldreq	r3, [r6, #0]
 800f262:	1aed      	subeq	r5, r5, r3
 800f264:	68a3      	ldr	r3, [r4, #8]
 800f266:	bf0c      	ite	eq
 800f268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f26c:	2500      	movne	r5, #0
 800f26e:	4293      	cmp	r3, r2
 800f270:	bfc4      	itt	gt
 800f272:	1a9b      	subgt	r3, r3, r2
 800f274:	18ed      	addgt	r5, r5, r3
 800f276:	2600      	movs	r6, #0
 800f278:	341a      	adds	r4, #26
 800f27a:	42b5      	cmp	r5, r6
 800f27c:	d11a      	bne.n	800f2b4 <_printf_common+0xc8>
 800f27e:	2000      	movs	r0, #0
 800f280:	e008      	b.n	800f294 <_printf_common+0xa8>
 800f282:	2301      	movs	r3, #1
 800f284:	4652      	mov	r2, sl
 800f286:	4641      	mov	r1, r8
 800f288:	4638      	mov	r0, r7
 800f28a:	47c8      	blx	r9
 800f28c:	3001      	adds	r0, #1
 800f28e:	d103      	bne.n	800f298 <_printf_common+0xac>
 800f290:	f04f 30ff 	mov.w	r0, #4294967295
 800f294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f298:	3501      	adds	r5, #1
 800f29a:	e7c6      	b.n	800f22a <_printf_common+0x3e>
 800f29c:	18e1      	adds	r1, r4, r3
 800f29e:	1c5a      	adds	r2, r3, #1
 800f2a0:	2030      	movs	r0, #48	@ 0x30
 800f2a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f2a6:	4422      	add	r2, r4
 800f2a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f2ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f2b0:	3302      	adds	r3, #2
 800f2b2:	e7c7      	b.n	800f244 <_printf_common+0x58>
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	4622      	mov	r2, r4
 800f2b8:	4641      	mov	r1, r8
 800f2ba:	4638      	mov	r0, r7
 800f2bc:	47c8      	blx	r9
 800f2be:	3001      	adds	r0, #1
 800f2c0:	d0e6      	beq.n	800f290 <_printf_common+0xa4>
 800f2c2:	3601      	adds	r6, #1
 800f2c4:	e7d9      	b.n	800f27a <_printf_common+0x8e>
	...

0800f2c8 <_printf_i>:
 800f2c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2cc:	7e0f      	ldrb	r7, [r1, #24]
 800f2ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f2d0:	2f78      	cmp	r7, #120	@ 0x78
 800f2d2:	4691      	mov	r9, r2
 800f2d4:	4680      	mov	r8, r0
 800f2d6:	460c      	mov	r4, r1
 800f2d8:	469a      	mov	sl, r3
 800f2da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f2de:	d807      	bhi.n	800f2f0 <_printf_i+0x28>
 800f2e0:	2f62      	cmp	r7, #98	@ 0x62
 800f2e2:	d80a      	bhi.n	800f2fa <_printf_i+0x32>
 800f2e4:	2f00      	cmp	r7, #0
 800f2e6:	f000 80d1 	beq.w	800f48c <_printf_i+0x1c4>
 800f2ea:	2f58      	cmp	r7, #88	@ 0x58
 800f2ec:	f000 80b8 	beq.w	800f460 <_printf_i+0x198>
 800f2f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f2f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f2f8:	e03a      	b.n	800f370 <_printf_i+0xa8>
 800f2fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f2fe:	2b15      	cmp	r3, #21
 800f300:	d8f6      	bhi.n	800f2f0 <_printf_i+0x28>
 800f302:	a101      	add	r1, pc, #4	@ (adr r1, 800f308 <_printf_i+0x40>)
 800f304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f308:	0800f361 	.word	0x0800f361
 800f30c:	0800f375 	.word	0x0800f375
 800f310:	0800f2f1 	.word	0x0800f2f1
 800f314:	0800f2f1 	.word	0x0800f2f1
 800f318:	0800f2f1 	.word	0x0800f2f1
 800f31c:	0800f2f1 	.word	0x0800f2f1
 800f320:	0800f375 	.word	0x0800f375
 800f324:	0800f2f1 	.word	0x0800f2f1
 800f328:	0800f2f1 	.word	0x0800f2f1
 800f32c:	0800f2f1 	.word	0x0800f2f1
 800f330:	0800f2f1 	.word	0x0800f2f1
 800f334:	0800f473 	.word	0x0800f473
 800f338:	0800f39f 	.word	0x0800f39f
 800f33c:	0800f42d 	.word	0x0800f42d
 800f340:	0800f2f1 	.word	0x0800f2f1
 800f344:	0800f2f1 	.word	0x0800f2f1
 800f348:	0800f495 	.word	0x0800f495
 800f34c:	0800f2f1 	.word	0x0800f2f1
 800f350:	0800f39f 	.word	0x0800f39f
 800f354:	0800f2f1 	.word	0x0800f2f1
 800f358:	0800f2f1 	.word	0x0800f2f1
 800f35c:	0800f435 	.word	0x0800f435
 800f360:	6833      	ldr	r3, [r6, #0]
 800f362:	1d1a      	adds	r2, r3, #4
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	6032      	str	r2, [r6, #0]
 800f368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f36c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f370:	2301      	movs	r3, #1
 800f372:	e09c      	b.n	800f4ae <_printf_i+0x1e6>
 800f374:	6833      	ldr	r3, [r6, #0]
 800f376:	6820      	ldr	r0, [r4, #0]
 800f378:	1d19      	adds	r1, r3, #4
 800f37a:	6031      	str	r1, [r6, #0]
 800f37c:	0606      	lsls	r6, r0, #24
 800f37e:	d501      	bpl.n	800f384 <_printf_i+0xbc>
 800f380:	681d      	ldr	r5, [r3, #0]
 800f382:	e003      	b.n	800f38c <_printf_i+0xc4>
 800f384:	0645      	lsls	r5, r0, #25
 800f386:	d5fb      	bpl.n	800f380 <_printf_i+0xb8>
 800f388:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f38c:	2d00      	cmp	r5, #0
 800f38e:	da03      	bge.n	800f398 <_printf_i+0xd0>
 800f390:	232d      	movs	r3, #45	@ 0x2d
 800f392:	426d      	negs	r5, r5
 800f394:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f398:	4858      	ldr	r0, [pc, #352]	@ (800f4fc <_printf_i+0x234>)
 800f39a:	230a      	movs	r3, #10
 800f39c:	e011      	b.n	800f3c2 <_printf_i+0xfa>
 800f39e:	6821      	ldr	r1, [r4, #0]
 800f3a0:	6833      	ldr	r3, [r6, #0]
 800f3a2:	0608      	lsls	r0, r1, #24
 800f3a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f3a8:	d402      	bmi.n	800f3b0 <_printf_i+0xe8>
 800f3aa:	0649      	lsls	r1, r1, #25
 800f3ac:	bf48      	it	mi
 800f3ae:	b2ad      	uxthmi	r5, r5
 800f3b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f3b2:	4852      	ldr	r0, [pc, #328]	@ (800f4fc <_printf_i+0x234>)
 800f3b4:	6033      	str	r3, [r6, #0]
 800f3b6:	bf14      	ite	ne
 800f3b8:	230a      	movne	r3, #10
 800f3ba:	2308      	moveq	r3, #8
 800f3bc:	2100      	movs	r1, #0
 800f3be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f3c2:	6866      	ldr	r6, [r4, #4]
 800f3c4:	60a6      	str	r6, [r4, #8]
 800f3c6:	2e00      	cmp	r6, #0
 800f3c8:	db05      	blt.n	800f3d6 <_printf_i+0x10e>
 800f3ca:	6821      	ldr	r1, [r4, #0]
 800f3cc:	432e      	orrs	r6, r5
 800f3ce:	f021 0104 	bic.w	r1, r1, #4
 800f3d2:	6021      	str	r1, [r4, #0]
 800f3d4:	d04b      	beq.n	800f46e <_printf_i+0x1a6>
 800f3d6:	4616      	mov	r6, r2
 800f3d8:	fbb5 f1f3 	udiv	r1, r5, r3
 800f3dc:	fb03 5711 	mls	r7, r3, r1, r5
 800f3e0:	5dc7      	ldrb	r7, [r0, r7]
 800f3e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f3e6:	462f      	mov	r7, r5
 800f3e8:	42bb      	cmp	r3, r7
 800f3ea:	460d      	mov	r5, r1
 800f3ec:	d9f4      	bls.n	800f3d8 <_printf_i+0x110>
 800f3ee:	2b08      	cmp	r3, #8
 800f3f0:	d10b      	bne.n	800f40a <_printf_i+0x142>
 800f3f2:	6823      	ldr	r3, [r4, #0]
 800f3f4:	07df      	lsls	r7, r3, #31
 800f3f6:	d508      	bpl.n	800f40a <_printf_i+0x142>
 800f3f8:	6923      	ldr	r3, [r4, #16]
 800f3fa:	6861      	ldr	r1, [r4, #4]
 800f3fc:	4299      	cmp	r1, r3
 800f3fe:	bfde      	ittt	le
 800f400:	2330      	movle	r3, #48	@ 0x30
 800f402:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f406:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f40a:	1b92      	subs	r2, r2, r6
 800f40c:	6122      	str	r2, [r4, #16]
 800f40e:	f8cd a000 	str.w	sl, [sp]
 800f412:	464b      	mov	r3, r9
 800f414:	aa03      	add	r2, sp, #12
 800f416:	4621      	mov	r1, r4
 800f418:	4640      	mov	r0, r8
 800f41a:	f7ff fee7 	bl	800f1ec <_printf_common>
 800f41e:	3001      	adds	r0, #1
 800f420:	d14a      	bne.n	800f4b8 <_printf_i+0x1f0>
 800f422:	f04f 30ff 	mov.w	r0, #4294967295
 800f426:	b004      	add	sp, #16
 800f428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f42c:	6823      	ldr	r3, [r4, #0]
 800f42e:	f043 0320 	orr.w	r3, r3, #32
 800f432:	6023      	str	r3, [r4, #0]
 800f434:	4832      	ldr	r0, [pc, #200]	@ (800f500 <_printf_i+0x238>)
 800f436:	2778      	movs	r7, #120	@ 0x78
 800f438:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f43c:	6823      	ldr	r3, [r4, #0]
 800f43e:	6831      	ldr	r1, [r6, #0]
 800f440:	061f      	lsls	r7, r3, #24
 800f442:	f851 5b04 	ldr.w	r5, [r1], #4
 800f446:	d402      	bmi.n	800f44e <_printf_i+0x186>
 800f448:	065f      	lsls	r7, r3, #25
 800f44a:	bf48      	it	mi
 800f44c:	b2ad      	uxthmi	r5, r5
 800f44e:	6031      	str	r1, [r6, #0]
 800f450:	07d9      	lsls	r1, r3, #31
 800f452:	bf44      	itt	mi
 800f454:	f043 0320 	orrmi.w	r3, r3, #32
 800f458:	6023      	strmi	r3, [r4, #0]
 800f45a:	b11d      	cbz	r5, 800f464 <_printf_i+0x19c>
 800f45c:	2310      	movs	r3, #16
 800f45e:	e7ad      	b.n	800f3bc <_printf_i+0xf4>
 800f460:	4826      	ldr	r0, [pc, #152]	@ (800f4fc <_printf_i+0x234>)
 800f462:	e7e9      	b.n	800f438 <_printf_i+0x170>
 800f464:	6823      	ldr	r3, [r4, #0]
 800f466:	f023 0320 	bic.w	r3, r3, #32
 800f46a:	6023      	str	r3, [r4, #0]
 800f46c:	e7f6      	b.n	800f45c <_printf_i+0x194>
 800f46e:	4616      	mov	r6, r2
 800f470:	e7bd      	b.n	800f3ee <_printf_i+0x126>
 800f472:	6833      	ldr	r3, [r6, #0]
 800f474:	6825      	ldr	r5, [r4, #0]
 800f476:	6961      	ldr	r1, [r4, #20]
 800f478:	1d18      	adds	r0, r3, #4
 800f47a:	6030      	str	r0, [r6, #0]
 800f47c:	062e      	lsls	r6, r5, #24
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	d501      	bpl.n	800f486 <_printf_i+0x1be>
 800f482:	6019      	str	r1, [r3, #0]
 800f484:	e002      	b.n	800f48c <_printf_i+0x1c4>
 800f486:	0668      	lsls	r0, r5, #25
 800f488:	d5fb      	bpl.n	800f482 <_printf_i+0x1ba>
 800f48a:	8019      	strh	r1, [r3, #0]
 800f48c:	2300      	movs	r3, #0
 800f48e:	6123      	str	r3, [r4, #16]
 800f490:	4616      	mov	r6, r2
 800f492:	e7bc      	b.n	800f40e <_printf_i+0x146>
 800f494:	6833      	ldr	r3, [r6, #0]
 800f496:	1d1a      	adds	r2, r3, #4
 800f498:	6032      	str	r2, [r6, #0]
 800f49a:	681e      	ldr	r6, [r3, #0]
 800f49c:	6862      	ldr	r2, [r4, #4]
 800f49e:	2100      	movs	r1, #0
 800f4a0:	4630      	mov	r0, r6
 800f4a2:	f7f0 fe6d 	bl	8000180 <memchr>
 800f4a6:	b108      	cbz	r0, 800f4ac <_printf_i+0x1e4>
 800f4a8:	1b80      	subs	r0, r0, r6
 800f4aa:	6060      	str	r0, [r4, #4]
 800f4ac:	6863      	ldr	r3, [r4, #4]
 800f4ae:	6123      	str	r3, [r4, #16]
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4b6:	e7aa      	b.n	800f40e <_printf_i+0x146>
 800f4b8:	6923      	ldr	r3, [r4, #16]
 800f4ba:	4632      	mov	r2, r6
 800f4bc:	4649      	mov	r1, r9
 800f4be:	4640      	mov	r0, r8
 800f4c0:	47d0      	blx	sl
 800f4c2:	3001      	adds	r0, #1
 800f4c4:	d0ad      	beq.n	800f422 <_printf_i+0x15a>
 800f4c6:	6823      	ldr	r3, [r4, #0]
 800f4c8:	079b      	lsls	r3, r3, #30
 800f4ca:	d413      	bmi.n	800f4f4 <_printf_i+0x22c>
 800f4cc:	68e0      	ldr	r0, [r4, #12]
 800f4ce:	9b03      	ldr	r3, [sp, #12]
 800f4d0:	4298      	cmp	r0, r3
 800f4d2:	bfb8      	it	lt
 800f4d4:	4618      	movlt	r0, r3
 800f4d6:	e7a6      	b.n	800f426 <_printf_i+0x15e>
 800f4d8:	2301      	movs	r3, #1
 800f4da:	4632      	mov	r2, r6
 800f4dc:	4649      	mov	r1, r9
 800f4de:	4640      	mov	r0, r8
 800f4e0:	47d0      	blx	sl
 800f4e2:	3001      	adds	r0, #1
 800f4e4:	d09d      	beq.n	800f422 <_printf_i+0x15a>
 800f4e6:	3501      	adds	r5, #1
 800f4e8:	68e3      	ldr	r3, [r4, #12]
 800f4ea:	9903      	ldr	r1, [sp, #12]
 800f4ec:	1a5b      	subs	r3, r3, r1
 800f4ee:	42ab      	cmp	r3, r5
 800f4f0:	dcf2      	bgt.n	800f4d8 <_printf_i+0x210>
 800f4f2:	e7eb      	b.n	800f4cc <_printf_i+0x204>
 800f4f4:	2500      	movs	r5, #0
 800f4f6:	f104 0619 	add.w	r6, r4, #25
 800f4fa:	e7f5      	b.n	800f4e8 <_printf_i+0x220>
 800f4fc:	0800f7c1 	.word	0x0800f7c1
 800f500:	0800f7d2 	.word	0x0800f7d2

0800f504 <memmove>:
 800f504:	4288      	cmp	r0, r1
 800f506:	b510      	push	{r4, lr}
 800f508:	eb01 0402 	add.w	r4, r1, r2
 800f50c:	d902      	bls.n	800f514 <memmove+0x10>
 800f50e:	4284      	cmp	r4, r0
 800f510:	4623      	mov	r3, r4
 800f512:	d807      	bhi.n	800f524 <memmove+0x20>
 800f514:	1e43      	subs	r3, r0, #1
 800f516:	42a1      	cmp	r1, r4
 800f518:	d008      	beq.n	800f52c <memmove+0x28>
 800f51a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f51e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f522:	e7f8      	b.n	800f516 <memmove+0x12>
 800f524:	4402      	add	r2, r0
 800f526:	4601      	mov	r1, r0
 800f528:	428a      	cmp	r2, r1
 800f52a:	d100      	bne.n	800f52e <memmove+0x2a>
 800f52c:	bd10      	pop	{r4, pc}
 800f52e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f536:	e7f7      	b.n	800f528 <memmove+0x24>

0800f538 <_sbrk_r>:
 800f538:	b538      	push	{r3, r4, r5, lr}
 800f53a:	4d06      	ldr	r5, [pc, #24]	@ (800f554 <_sbrk_r+0x1c>)
 800f53c:	2300      	movs	r3, #0
 800f53e:	4604      	mov	r4, r0
 800f540:	4608      	mov	r0, r1
 800f542:	602b      	str	r3, [r5, #0]
 800f544:	f7f1 fa9e 	bl	8000a84 <_sbrk>
 800f548:	1c43      	adds	r3, r0, #1
 800f54a:	d102      	bne.n	800f552 <_sbrk_r+0x1a>
 800f54c:	682b      	ldr	r3, [r5, #0]
 800f54e:	b103      	cbz	r3, 800f552 <_sbrk_r+0x1a>
 800f550:	6023      	str	r3, [r4, #0]
 800f552:	bd38      	pop	{r3, r4, r5, pc}
 800f554:	2000abf0 	.word	0x2000abf0

0800f558 <_realloc_r>:
 800f558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f55c:	4607      	mov	r7, r0
 800f55e:	4614      	mov	r4, r2
 800f560:	460d      	mov	r5, r1
 800f562:	b921      	cbnz	r1, 800f56e <_realloc_r+0x16>
 800f564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f568:	4611      	mov	r1, r2
 800f56a:	f7ff bc5b 	b.w	800ee24 <_malloc_r>
 800f56e:	b92a      	cbnz	r2, 800f57c <_realloc_r+0x24>
 800f570:	f7ff fbec 	bl	800ed4c <_free_r>
 800f574:	4625      	mov	r5, r4
 800f576:	4628      	mov	r0, r5
 800f578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f57c:	f000 f81a 	bl	800f5b4 <_malloc_usable_size_r>
 800f580:	4284      	cmp	r4, r0
 800f582:	4606      	mov	r6, r0
 800f584:	d802      	bhi.n	800f58c <_realloc_r+0x34>
 800f586:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f58a:	d8f4      	bhi.n	800f576 <_realloc_r+0x1e>
 800f58c:	4621      	mov	r1, r4
 800f58e:	4638      	mov	r0, r7
 800f590:	f7ff fc48 	bl	800ee24 <_malloc_r>
 800f594:	4680      	mov	r8, r0
 800f596:	b908      	cbnz	r0, 800f59c <_realloc_r+0x44>
 800f598:	4645      	mov	r5, r8
 800f59a:	e7ec      	b.n	800f576 <_realloc_r+0x1e>
 800f59c:	42b4      	cmp	r4, r6
 800f59e:	4622      	mov	r2, r4
 800f5a0:	4629      	mov	r1, r5
 800f5a2:	bf28      	it	cs
 800f5a4:	4632      	movcs	r2, r6
 800f5a6:	f7ff fbc3 	bl	800ed30 <memcpy>
 800f5aa:	4629      	mov	r1, r5
 800f5ac:	4638      	mov	r0, r7
 800f5ae:	f7ff fbcd 	bl	800ed4c <_free_r>
 800f5b2:	e7f1      	b.n	800f598 <_realloc_r+0x40>

0800f5b4 <_malloc_usable_size_r>:
 800f5b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5b8:	1f18      	subs	r0, r3, #4
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	bfbc      	itt	lt
 800f5be:	580b      	ldrlt	r3, [r1, r0]
 800f5c0:	18c0      	addlt	r0, r0, r3
 800f5c2:	4770      	bx	lr

0800f5c4 <_init>:
 800f5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5c6:	bf00      	nop
 800f5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5ca:	bc08      	pop	{r3}
 800f5cc:	469e      	mov	lr, r3
 800f5ce:	4770      	bx	lr

0800f5d0 <_fini>:
 800f5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5d2:	bf00      	nop
 800f5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5d6:	bc08      	pop	{r3}
 800f5d8:	469e      	mov	lr, r3
 800f5da:	4770      	bx	lr
